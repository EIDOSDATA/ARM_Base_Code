
SWD_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000db18  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00021ab4  0800dc9c  0800dc9c  0001dc9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802f750  0802f750  000401e0  2**0
                  CONTENTS
  4 .ARM          00000008  0802f750  0802f750  0003f750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802f758  0802f758  000401e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802f758  0802f758  0003f758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802f75c  0802f75c  0003f75c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0802f760  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002154  200001e0  0802f940  000401e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002334  0802f940  00042334  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000401e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f4b1  00000000  00000000  00040209  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000454b  00000000  00000000  0005f6ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015c8  00000000  00000000  00063c08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013b0  00000000  00000000  000651d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025c4e  00000000  00000000  00066580  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015d14  00000000  00000000  0008c1ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ce2ff  00000000  00000000  000a1ee2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001701e1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c78  00000000  00000000  0017025c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	200001e0 	.word	0x200001e0
 80001a0:	00000000 	.word	0x00000000
 80001a4:	0800dc84 	.word	0x0800dc84

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	200001e4 	.word	0x200001e4
 80001c0:	0800dc84 	.word	0x0800dc84

080001c4 <strlen>:
 80001c4:	4603      	mov	r3, r0
 80001c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ca:	2a00      	cmp	r2, #0
 80001cc:	d1fb      	bne.n	80001c6 <strlen+0x2>
 80001ce:	1a18      	subs	r0, r3, r0
 80001d0:	3801      	subs	r0, #1
 80001d2:	4770      	bx	lr

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	468c      	mov	ip, r1
 800020a:	4604      	mov	r4, r0
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14b      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000212:	428a      	cmp	r2, r1
 8000214:	4615      	mov	r5, r2
 8000216:	d967      	bls.n	80002e8 <__udivmoddi4+0xe4>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0720 	rsb	r7, r2, #32
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	fa20 f707 	lsr.w	r7, r0, r7
 800022a:	4095      	lsls	r5, r2
 800022c:	ea47 0c03 	orr.w	ip, r7, r3
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000236:	fbbc f7fe 	udiv	r7, ip, lr
 800023a:	fa1f f885 	uxth.w	r8, r5
 800023e:	fb0e c317 	mls	r3, lr, r7, ip
 8000242:	fb07 f908 	mul.w	r9, r7, r8
 8000246:	0c21      	lsrs	r1, r4, #16
 8000248:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024c:	4599      	cmp	r9, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18eb      	adds	r3, r5, r3
 8000252:	f107 31ff 	add.w	r1, r7, #4294967295	; 0xffffffff
 8000256:	f080 811c 	bcs.w	8000492 <__udivmoddi4+0x28e>
 800025a:	4599      	cmp	r9, r3
 800025c:	f240 8119 	bls.w	8000492 <__udivmoddi4+0x28e>
 8000260:	3f02      	subs	r7, #2
 8000262:	442b      	add	r3, r5
 8000264:	eba3 0309 	sub.w	r3, r3, r9
 8000268:	fbb3 f0fe 	udiv	r0, r3, lr
 800026c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000270:	fb00 f108 	mul.w	r1, r0, r8
 8000274:	b2a4      	uxth	r4, r4
 8000276:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027a:	42a1      	cmp	r1, r4
 800027c:	d909      	bls.n	8000292 <__udivmoddi4+0x8e>
 800027e:	192c      	adds	r4, r5, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000284:	f080 8107 	bcs.w	8000496 <__udivmoddi4+0x292>
 8000288:	42a1      	cmp	r1, r4
 800028a:	f240 8104 	bls.w	8000496 <__udivmoddi4+0x292>
 800028e:	3802      	subs	r0, #2
 8000290:	442c      	add	r4, r5
 8000292:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000296:	2700      	movs	r7, #0
 8000298:	1a64      	subs	r4, r4, r1
 800029a:	b11e      	cbz	r6, 80002a4 <__udivmoddi4+0xa0>
 800029c:	2300      	movs	r3, #0
 800029e:	40d4      	lsrs	r4, r2
 80002a0:	e9c6 4300 	strd	r4, r3, [r6]
 80002a4:	4639      	mov	r1, r7
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xbe>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80ec 	beq.w	800048c <__udivmoddi4+0x288>
 80002b4:	2700      	movs	r7, #0
 80002b6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ba:	4638      	mov	r0, r7
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f783 	clz	r7, r3
 80002c6:	2f00      	cmp	r7, #0
 80002c8:	d148      	bne.n	800035c <__udivmoddi4+0x158>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd0>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fb 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469c      	mov	ip, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa0>
 80002e2:	e9c6 4c00 	strd	r4, ip, [r6]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa0>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xe8>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 808f 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f6:	2701      	movs	r7, #1
 80002f8:	1b49      	subs	r1, r1, r5
 80002fa:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80002fe:	fa1f f985 	uxth.w	r9, r5
 8000302:	fbb1 fef8 	udiv	lr, r1, r8
 8000306:	fb08 111e 	mls	r1, r8, lr, r1
 800030a:	fb09 f00e 	mul.w	r0, r9, lr
 800030e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000312:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000316:	4298      	cmp	r0, r3
 8000318:	d907      	bls.n	800032a <__udivmoddi4+0x126>
 800031a:	18eb      	adds	r3, r5, r3
 800031c:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8000320:	d202      	bcs.n	8000328 <__udivmoddi4+0x124>
 8000322:	4298      	cmp	r0, r3
 8000324:	f200 80cd 	bhi.w	80004c2 <__udivmoddi4+0x2be>
 8000328:	468e      	mov	lr, r1
 800032a:	1a1b      	subs	r3, r3, r0
 800032c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000330:	fb08 3310 	mls	r3, r8, r0, r3
 8000334:	fb09 f900 	mul.w	r9, r9, r0
 8000338:	b2a4      	uxth	r4, r4
 800033a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800033e:	45a1      	cmp	r9, r4
 8000340:	d907      	bls.n	8000352 <__udivmoddi4+0x14e>
 8000342:	192c      	adds	r4, r5, r4
 8000344:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x14c>
 800034a:	45a1      	cmp	r9, r4
 800034c:	f200 80b6 	bhi.w	80004bc <__udivmoddi4+0x2b8>
 8000350:	4618      	mov	r0, r3
 8000352:	eba4 0409 	sub.w	r4, r4, r9
 8000356:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 800035a:	e79e      	b.n	800029a <__udivmoddi4+0x96>
 800035c:	f1c7 0520 	rsb	r5, r7, #32
 8000360:	40bb      	lsls	r3, r7
 8000362:	fa22 fc05 	lsr.w	ip, r2, r5
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa21 f405 	lsr.w	r4, r1, r5
 800036e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000372:	fbb4 f9fe 	udiv	r9, r4, lr
 8000376:	fa1f f88c 	uxth.w	r8, ip
 800037a:	fb0e 4419 	mls	r4, lr, r9, r4
 800037e:	fa20 f305 	lsr.w	r3, r0, r5
 8000382:	40b9      	lsls	r1, r7
 8000384:	fb09 fa08 	mul.w	sl, r9, r8
 8000388:	4319      	orrs	r1, r3
 800038a:	0c0b      	lsrs	r3, r1, #16
 800038c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000390:	45a2      	cmp	sl, r4
 8000392:	fa02 f207 	lsl.w	r2, r2, r7
 8000396:	fa00 f307 	lsl.w	r3, r0, r7
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2b4>
 80003a8:	45a2      	cmp	sl, r4
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2b4>
 80003ae:	f1a9 0902 	sub.w	r9, r9, #2
 80003b2:	4464      	add	r4, ip
 80003b4:	eba4 040a 	sub.w	r4, r4, sl
 80003b8:	fbb4 f0fe 	udiv	r0, r4, lr
 80003bc:	fb0e 4410 	mls	r4, lr, r0, r4
 80003c0:	fb00 fa08 	mul.w	sl, r0, r8
 80003c4:	b289      	uxth	r1, r1
 80003c6:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d908      	bls.n	80003e0 <__udivmoddi4+0x1dc>
 80003ce:	eb1c 0404 	adds.w	r4, ip, r4
 80003d2:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003d6:	d26b      	bcs.n	80004b0 <__udivmoddi4+0x2ac>
 80003d8:	45a2      	cmp	sl, r4
 80003da:	d969      	bls.n	80004b0 <__udivmoddi4+0x2ac>
 80003dc:	3802      	subs	r0, #2
 80003de:	4464      	add	r4, ip
 80003e0:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e4:	fba0 8902 	umull	r8, r9, r0, r2
 80003e8:	eba4 040a 	sub.w	r4, r4, sl
 80003ec:	454c      	cmp	r4, r9
 80003ee:	4641      	mov	r1, r8
 80003f0:	46ce      	mov	lr, r9
 80003f2:	d354      	bcc.n	800049e <__udivmoddi4+0x29a>
 80003f4:	d051      	beq.n	800049a <__udivmoddi4+0x296>
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	d069      	beq.n	80004ce <__udivmoddi4+0x2ca>
 80003fa:	1a5a      	subs	r2, r3, r1
 80003fc:	eb64 040e 	sbc.w	r4, r4, lr
 8000400:	fa04 f505 	lsl.w	r5, r4, r5
 8000404:	fa22 f307 	lsr.w	r3, r2, r7
 8000408:	40fc      	lsrs	r4, r7
 800040a:	431d      	orrs	r5, r3
 800040c:	e9c6 5400 	strd	r5, r4, [r6]
 8000410:	2700      	movs	r7, #0
 8000412:	e747      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000414:	4095      	lsls	r5, r2
 8000416:	f1c2 0320 	rsb	r3, r2, #32
 800041a:	fa21 f003 	lsr.w	r0, r1, r3
 800041e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000422:	fbb0 f7f8 	udiv	r7, r0, r8
 8000426:	fa1f f985 	uxth.w	r9, r5
 800042a:	fb08 0017 	mls	r0, r8, r7, r0
 800042e:	fa24 f303 	lsr.w	r3, r4, r3
 8000432:	4091      	lsls	r1, r2
 8000434:	fb07 fc09 	mul.w	ip, r7, r9
 8000438:	430b      	orrs	r3, r1
 800043a:	0c19      	lsrs	r1, r3, #16
 800043c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000440:	458c      	cmp	ip, r1
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d907      	bls.n	8000458 <__udivmoddi4+0x254>
 8000448:	1869      	adds	r1, r5, r1
 800044a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800044e:	d231      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000450:	458c      	cmp	ip, r1
 8000452:	d92f      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 8000454:	3f02      	subs	r7, #2
 8000456:	4429      	add	r1, r5
 8000458:	eba1 010c 	sub.w	r1, r1, ip
 800045c:	fbb1 f0f8 	udiv	r0, r1, r8
 8000460:	fb08 1c10 	mls	ip, r8, r0, r1
 8000464:	fb00 fe09 	mul.w	lr, r0, r9
 8000468:	b299      	uxth	r1, r3
 800046a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800046e:	458e      	cmp	lr, r1
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x27e>
 8000472:	1869      	adds	r1, r5, r1
 8000474:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000478:	d218      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800047a:	458e      	cmp	lr, r1
 800047c:	d916      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800047e:	3802      	subs	r0, #2
 8000480:	4429      	add	r1, r5
 8000482:	eba1 010e 	sub.w	r1, r1, lr
 8000486:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048a:	e73a      	b.n	8000302 <__udivmoddi4+0xfe>
 800048c:	4637      	mov	r7, r6
 800048e:	4630      	mov	r0, r6
 8000490:	e708      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000492:	460f      	mov	r7, r1
 8000494:	e6e6      	b.n	8000264 <__udivmoddi4+0x60>
 8000496:	4618      	mov	r0, r3
 8000498:	e6fb      	b.n	8000292 <__udivmoddi4+0x8e>
 800049a:	4543      	cmp	r3, r8
 800049c:	d2ab      	bcs.n	80003f6 <__udivmoddi4+0x1f2>
 800049e:	ebb8 0102 	subs.w	r1, r8, r2
 80004a2:	eb69 020c 	sbc.w	r2, r9, ip
 80004a6:	3801      	subs	r0, #1
 80004a8:	4696      	mov	lr, r2
 80004aa:	e7a4      	b.n	80003f6 <__udivmoddi4+0x1f2>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e7e8      	b.n	8000482 <__udivmoddi4+0x27e>
 80004b0:	4608      	mov	r0, r1
 80004b2:	e795      	b.n	80003e0 <__udivmoddi4+0x1dc>
 80004b4:	4607      	mov	r7, r0
 80004b6:	e7cf      	b.n	8000458 <__udivmoddi4+0x254>
 80004b8:	4681      	mov	r9, r0
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004bc:	3802      	subs	r0, #2
 80004be:	442c      	add	r4, r5
 80004c0:	e747      	b.n	8000352 <__udivmoddi4+0x14e>
 80004c2:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c6:	442b      	add	r3, r5
 80004c8:	e72f      	b.n	800032a <__udivmoddi4+0x126>
 80004ca:	4638      	mov	r0, r7
 80004cc:	e707      	b.n	80002de <__udivmoddi4+0xda>
 80004ce:	4637      	mov	r7, r6
 80004d0:	e6e8      	b.n	80002a4 <__udivmoddi4+0xa0>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80004d8:	b480      	push	{r7}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004e0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004e4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80004e8:	f003 0301 	and.w	r3, r3, #1
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d013      	beq.n	8000518 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80004f0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004f4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80004f8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d00b      	beq.n	8000518 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000500:	e000      	b.n	8000504 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000502:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000504:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	2b00      	cmp	r3, #0
 800050c:	d0f9      	beq.n	8000502 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800050e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000512:	687a      	ldr	r2, [r7, #4]
 8000514:	b2d2      	uxtb	r2, r2
 8000516:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000518:	687b      	ldr	r3, [r7, #4]
}
 800051a:	4618      	mov	r0, r3
 800051c:	370c      	adds	r7, #12
 800051e:	46bd      	mov	sp, r7
 8000520:	bc80      	pop	{r7}
 8000522:	4770      	bx	lr

08000524 <HAL_GPIO_EXTI_Callback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	4603      	mov	r3, r0
 800052c:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 800052e:	88fb      	ldrh	r3, [r7, #6]
 8000530:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000534:	d022      	beq.n	800057c <HAL_GPIO_EXTI_Callback+0x58>
 8000536:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800053a:	dc04      	bgt.n	8000546 <HAL_GPIO_EXTI_Callback+0x22>
 800053c:	2b40      	cmp	r3, #64	; 0x40
 800053e:	d009      	beq.n	8000554 <HAL_GPIO_EXTI_Callback+0x30>
 8000540:	2b80      	cmp	r3, #128	; 0x80
 8000542:	d011      	beq.n	8000568 <HAL_GPIO_EXTI_Callback+0x44>
		break;
	case GPIO_PIN_14:
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
		break;
	}
}
 8000544:	e02a      	b.n	800059c <HAL_GPIO_EXTI_Callback+0x78>
	switch (GPIO_Pin) {
 8000546:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800054a:	d01c      	beq.n	8000586 <HAL_GPIO_EXTI_Callback+0x62>
 800054c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000550:	d01e      	beq.n	8000590 <HAL_GPIO_EXTI_Callback+0x6c>
}
 8000552:	e023      	b.n	800059c <HAL_GPIO_EXTI_Callback+0x78>
		ITM_SendChar('6');
 8000554:	2036      	movs	r0, #54	; 0x36
 8000556:	f7ff ffbf 	bl	80004d8 <ITM_SendChar>
		ITM_SendChar('\r');
 800055a:	200d      	movs	r0, #13
 800055c:	f7ff ffbc 	bl	80004d8 <ITM_SendChar>
		ITM_SendChar('\n');
 8000560:	200a      	movs	r0, #10
 8000562:	f7ff ffb9 	bl	80004d8 <ITM_SendChar>
		break;
 8000566:	e019      	b.n	800059c <HAL_GPIO_EXTI_Callback+0x78>
		ITM_SendChar('7');
 8000568:	2037      	movs	r0, #55	; 0x37
 800056a:	f7ff ffb5 	bl	80004d8 <ITM_SendChar>
		ITM_SendChar('\r');
 800056e:	200d      	movs	r0, #13
 8000570:	f7ff ffb2 	bl	80004d8 <ITM_SendChar>
		ITM_SendChar('\n');
 8000574:	200a      	movs	r0, #10
 8000576:	f7ff ffaf 	bl	80004d8 <ITM_SendChar>
		break;
 800057a:	e00f      	b.n	800059c <HAL_GPIO_EXTI_Callback+0x78>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 800057c:	2180      	movs	r1, #128	; 0x80
 800057e:	4809      	ldr	r0, [pc, #36]	; (80005a4 <HAL_GPIO_EXTI_Callback+0x80>)
 8000580:	f002 f877 	bl	8002672 <HAL_GPIO_TogglePin>
		break;
 8000584:	e00a      	b.n	800059c <HAL_GPIO_EXTI_Callback+0x78>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000586:	2101      	movs	r1, #1
 8000588:	4806      	ldr	r0, [pc, #24]	; (80005a4 <HAL_GPIO_EXTI_Callback+0x80>)
 800058a:	f002 f872 	bl	8002672 <HAL_GPIO_TogglePin>
		break;
 800058e:	e005      	b.n	800059c <HAL_GPIO_EXTI_Callback+0x78>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000590:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000594:	4803      	ldr	r0, [pc, #12]	; (80005a4 <HAL_GPIO_EXTI_Callback+0x80>)
 8000596:	f002 f86c 	bl	8002672 <HAL_GPIO_TogglePin>
		break;
 800059a:	bf00      	nop
}
 800059c:	bf00      	nop
 800059e:	3708      	adds	r7, #8
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	40020400 	.word	0x40020400

080005a8 <ITM_SendStr>:

void ITM_SendStr(char* str)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
	while(*str)
 80005b0:	e007      	b.n	80005c2 <ITM_SendStr+0x1a>
	{
		ITM_SendChar(*str);
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	4618      	mov	r0, r3
 80005b8:	f7ff ff8e 	bl	80004d8 <ITM_SendChar>
		str++;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	3301      	adds	r3, #1
 80005c0:	607b      	str	r3, [r7, #4]
	while(*str)
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d1f3      	bne.n	80005b2 <ITM_SendStr+0xa>
	}
}
 80005ca:	bf00      	nop
 80005cc:	3708      	adds	r7, #8
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
	...

080005d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	f5ad 6dbc 	sub.w	sp, sp, #1504	; 0x5e0
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005dc:	f000 fd7a 	bl	80010d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e0:	f000 f86e 	bl	80006c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e4:	f000 f966 	bl	80008b4 <MX_GPIO_Init>
  MX_DMA_Init();
 80005e8:	f000 f93c 	bl	8000864 <MX_DMA_Init>
  MX_ETH_Init();
 80005ec:	f000 f8b0 	bl	8000750 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005f0:	f000 f90e 	bl	8000810 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 80005f4:	f00c fa18 	bl	800ca28 <MX_USB_DEVICE_Init>
  MX_SDIO_SD_Init();
 80005f8:	f000 f8ea 	bl	80007d0 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 80005fc:	f007 fc48 	bl	8007e90 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);
 8000600:	2064      	movs	r0, #100	; 0x64
 8000602:	f000 fdd5 	bl	80011b0 <HAL_Delay>
	DIR dp;
	FIL temp;
	FILINFO fnp;
	char buf[100];
	volatile int res;
	res=f_mount(&SDFatFS, SDPath, 1);
 8000606:	2201      	movs	r2, #1
 8000608:	4927      	ldr	r1, [pc, #156]	; (80006a8 <main+0xd4>)
 800060a:	4828      	ldr	r0, [pc, #160]	; (80006ac <main+0xd8>)
 800060c:	f00b fb4e 	bl	800bcac <f_mount>
 8000610:	4603      	mov	r3, r0
 8000612:	461a      	mov	r2, r3
 8000614:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8000618:	601a      	str	r2, [r3, #0]
	sprintf(buf,"f_mount res=%d\r\n",res);
 800061a:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800061e:	681a      	ldr	r2, [r3, #0]
 8000620:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000624:	4922      	ldr	r1, [pc, #136]	; (80006b0 <main+0xdc>)
 8000626:	4618      	mov	r0, r3
 8000628:	f00c ffda 	bl	800d5e0 <siprintf>
	ITM_SendStr(buf);
 800062c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000630:	4618      	mov	r0, r3
 8000632:	f7ff ffb9 	bl	80005a8 <ITM_SendStr>
	res=f_open(&temp, "WriteTest.txt", FA_WRITE|FA_CREATE_ALWAYS);
 8000636:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800063a:	220a      	movs	r2, #10
 800063c:	491d      	ldr	r1, [pc, #116]	; (80006b4 <main+0xe0>)
 800063e:	4618      	mov	r0, r3
 8000640:	f00b fb7c 	bl	800bd3c <f_open>
 8000644:	4603      	mov	r3, r0
 8000646:	461a      	mov	r2, r3
 8000648:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800064c:	601a      	str	r2, [r3, #0]

	char tmp[]="Good Day YOUTUBE! 우맙니다. 자 오늘은 한도동동님!\r\n"
 800064e:	1d3b      	adds	r3, r7, #4
 8000650:	4a19      	ldr	r2, [pc, #100]	; (80006b8 <main+0xe4>)
 8000652:	4618      	mov	r0, r3
 8000654:	4611      	mov	r1, r2
 8000656:	f44f 7380 	mov.w	r3, #256	; 0x100
 800065a:	461a      	mov	r2, r3
 800065c:	f00c fef6 	bl	800d44c <memcpy>
			"A.K.A 한 지 산 님께서 아주 특별한 컨텐츠를 진행한다고 하네요!\\r\n"
			"자 그러면 오늘의 컨텐츠! 한도동동님의 곱등이 녹차 먹방입니다!!!!\r\n"
			"춤춰요!\r\n";

	f_write(&temp, tmp, strlen(tmp), &res);
 8000660:	1d3b      	adds	r3, r7, #4
 8000662:	4618      	mov	r0, r3
 8000664:	f7ff fdae 	bl	80001c4 <strlen>
 8000668:	4602      	mov	r2, r0
 800066a:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800066e:	1d39      	adds	r1, r7, #4
 8000670:	f507 70c6 	add.w	r0, r7, #396	; 0x18c
 8000674:	f00b fd74 	bl	800c160 <f_write>
	f_close(&temp);
 8000678:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800067c:	4618      	mov	r0, r3
 800067e:	f00b ffd6 	bl	800c62e <f_close>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, SET);
 8000682:	2201      	movs	r2, #1
 8000684:	2140      	movs	r1, #64	; 0x40
 8000686:	480d      	ldr	r0, [pc, #52]	; (80006bc <main+0xe8>)
 8000688:	f001 ffdb 	bl	8002642 <HAL_GPIO_WritePin>
		HAL_Delay(30);
 800068c:	201e      	movs	r0, #30
 800068e:	f000 fd8f 	bl	80011b0 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, RESET);
 8000692:	2200      	movs	r2, #0
 8000694:	2140      	movs	r1, #64	; 0x40
 8000696:	4809      	ldr	r0, [pc, #36]	; (80006bc <main+0xe8>)
 8000698:	f001 ffd3 	bl	8002642 <HAL_GPIO_WritePin>
		HAL_Delay(470);
 800069c:	f44f 70eb 	mov.w	r0, #470	; 0x1d6
 80006a0:	f000 fd86 	bl	80011b0 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, SET);
 80006a4:	e7ed      	b.n	8000682 <main+0xae>
 80006a6:	bf00      	nop
 80006a8:	2000060c 	.word	0x2000060c
 80006ac:	2000083c 	.word	0x2000083c
 80006b0:	0800dc9c 	.word	0x0800dc9c
 80006b4:	0800dcb0 	.word	0x0800dcb0
 80006b8:	0800dcc0 	.word	0x0800dcc0
 80006bc:	40021800 	.word	0x40021800

080006c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b092      	sub	sp, #72	; 0x48
 80006c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c6:	f107 0318 	add.w	r3, r7, #24
 80006ca:	2230      	movs	r2, #48	; 0x30
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f00c fec7 	bl	800d462 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d4:	1d3b      	adds	r3, r7, #4
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]
 80006e0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e2:	2302      	movs	r3, #2
 80006e4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e6:	2301      	movs	r3, #1
 80006e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ea:	2310      	movs	r3, #16
 80006ec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ee:	2302      	movs	r3, #2
 80006f0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006f2:	2300      	movs	r3, #0
 80006f4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 13;
 80006f6:	230d      	movs	r3, #13
 80006f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 195;
 80006fa:	23c3      	movs	r3, #195	; 0xc3
 80006fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006fe:	2302      	movs	r3, #2
 8000700:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000702:	2305      	movs	r3, #5
 8000704:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000706:	f107 0318 	add.w	r3, r7, #24
 800070a:	4618      	mov	r0, r3
 800070c:	f003 f93e 	bl	800398c <HAL_RCC_OscConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8000716:	f000 f9b5 	bl	8000a84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071a:	230f      	movs	r3, #15
 800071c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071e:	2302      	movs	r3, #2
 8000720:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000722:	2300      	movs	r3, #0
 8000724:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000726:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800072a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800072c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000730:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000732:	1d3b      	adds	r3, r7, #4
 8000734:	2103      	movs	r1, #3
 8000736:	4618      	mov	r0, r3
 8000738:	f003 fb92 	bl	8003e60 <HAL_RCC_ClockConfig>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000742:	f000 f99f 	bl	8000a84 <Error_Handler>
  }
}
 8000746:	bf00      	nop
 8000748:	3748      	adds	r7, #72	; 0x48
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
	...

08000750 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000754:	4b1c      	ldr	r3, [pc, #112]	; (80007c8 <MX_ETH_Init+0x78>)
 8000756:	4a1d      	ldr	r2, [pc, #116]	; (80007cc <MX_ETH_Init+0x7c>)
 8000758:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800075a:	4b1b      	ldr	r3, [pc, #108]	; (80007c8 <MX_ETH_Init+0x78>)
 800075c:	2201      	movs	r2, #1
 800075e:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8000760:	4b19      	ldr	r3, [pc, #100]	; (80007c8 <MX_ETH_Init+0x78>)
 8000762:	2200      	movs	r2, #0
 8000764:	821a      	strh	r2, [r3, #16]
  heth.Init.MACAddr[0] =   0x00;
 8000766:	4b18      	ldr	r3, [pc, #96]	; (80007c8 <MX_ETH_Init+0x78>)
 8000768:	695b      	ldr	r3, [r3, #20]
 800076a:	2200      	movs	r2, #0
 800076c:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 800076e:	4b16      	ldr	r3, [pc, #88]	; (80007c8 <MX_ETH_Init+0x78>)
 8000770:	695b      	ldr	r3, [r3, #20]
 8000772:	3301      	adds	r3, #1
 8000774:	2280      	movs	r2, #128	; 0x80
 8000776:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8000778:	4b13      	ldr	r3, [pc, #76]	; (80007c8 <MX_ETH_Init+0x78>)
 800077a:	695b      	ldr	r3, [r3, #20]
 800077c:	3302      	adds	r3, #2
 800077e:	22e1      	movs	r2, #225	; 0xe1
 8000780:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8000782:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <MX_ETH_Init+0x78>)
 8000784:	695b      	ldr	r3, [r3, #20]
 8000786:	3303      	adds	r3, #3
 8000788:	2200      	movs	r2, #0
 800078a:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 800078c:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <MX_ETH_Init+0x78>)
 800078e:	695b      	ldr	r3, [r3, #20]
 8000790:	3304      	adds	r3, #4
 8000792:	2200      	movs	r2, #0
 8000794:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8000796:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <MX_ETH_Init+0x78>)
 8000798:	695b      	ldr	r3, [r3, #20]
 800079a:	3305      	adds	r3, #5
 800079c:	2200      	movs	r2, #0
 800079e:	701a      	strb	r2, [r3, #0]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 80007a0:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <MX_ETH_Init+0x78>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80007a6:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <MX_ETH_Init+0x78>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80007ac:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <MX_ETH_Init+0x78>)
 80007ae:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80007b2:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80007b4:	4804      	ldr	r0, [pc, #16]	; (80007c8 <MX_ETH_Init+0x78>)
 80007b6:	f001 f933 	bl	8001a20 <HAL_ETH_Init>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_ETH_Init+0x74>
  {
    Error_Handler();
 80007c0:	f000 f960 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80007c4:	bf00      	nop
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	200005bc 	.word	0x200005bc
 80007cc:	40028000 	.word	0x40028000

080007d0 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80007d4:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <MX_SDIO_SD_Init+0x38>)
 80007d6:	4a0d      	ldr	r2, [pc, #52]	; (800080c <MX_SDIO_SD_Init+0x3c>)
 80007d8:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80007da:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <MX_SDIO_SD_Init+0x38>)
 80007dc:	2200      	movs	r2, #0
 80007de:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80007e0:	4b09      	ldr	r3, [pc, #36]	; (8000808 <MX_SDIO_SD_Init+0x38>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80007e6:	4b08      	ldr	r3, [pc, #32]	; (8000808 <MX_SDIO_SD_Init+0x38>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80007ec:	4b06      	ldr	r3, [pc, #24]	; (8000808 <MX_SDIO_SD_Init+0x38>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80007f2:	4b05      	ldr	r3, [pc, #20]	; (8000808 <MX_SDIO_SD_Init+0x38>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 10;
 80007f8:	4b03      	ldr	r3, [pc, #12]	; (8000808 <MX_SDIO_SD_Init+0x38>)
 80007fa:	220a      	movs	r2, #10
 80007fc:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80007fe:	bf00      	nop
 8000800:	46bd      	mov	sp, r7
 8000802:	bc80      	pop	{r7}
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	20000538 	.word	0x20000538
 800080c:	40012c00 	.word	0x40012c00

08000810 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000814:	4b11      	ldr	r3, [pc, #68]	; (800085c <MX_USART3_UART_Init+0x4c>)
 8000816:	4a12      	ldr	r2, [pc, #72]	; (8000860 <MX_USART3_UART_Init+0x50>)
 8000818:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800081a:	4b10      	ldr	r3, [pc, #64]	; (800085c <MX_USART3_UART_Init+0x4c>)
 800081c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000820:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000822:	4b0e      	ldr	r3, [pc, #56]	; (800085c <MX_USART3_UART_Init+0x4c>)
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000828:	4b0c      	ldr	r3, [pc, #48]	; (800085c <MX_USART3_UART_Init+0x4c>)
 800082a:	2200      	movs	r2, #0
 800082c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800082e:	4b0b      	ldr	r3, [pc, #44]	; (800085c <MX_USART3_UART_Init+0x4c>)
 8000830:	2200      	movs	r2, #0
 8000832:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000834:	4b09      	ldr	r3, [pc, #36]	; (800085c <MX_USART3_UART_Init+0x4c>)
 8000836:	220c      	movs	r2, #12
 8000838:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800083a:	4b08      	ldr	r3, [pc, #32]	; (800085c <MX_USART3_UART_Init+0x4c>)
 800083c:	2200      	movs	r2, #0
 800083e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000840:	4b06      	ldr	r3, [pc, #24]	; (800085c <MX_USART3_UART_Init+0x4c>)
 8000842:	2200      	movs	r2, #0
 8000844:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000846:	4805      	ldr	r0, [pc, #20]	; (800085c <MX_USART3_UART_Init+0x4c>)
 8000848:	f005 f92e 	bl	8005aa8 <HAL_UART_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000852:	f000 f917 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	20000498 	.word	0x20000498
 8000860:	40004800 	.word	0x40004800

08000864 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	4b10      	ldr	r3, [pc, #64]	; (80008b0 <MX_DMA_Init+0x4c>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a0f      	ldr	r2, [pc, #60]	; (80008b0 <MX_DMA_Init+0x4c>)
 8000874:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b0d      	ldr	r3, [pc, #52]	; (80008b0 <MX_DMA_Init+0x4c>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 6, 0);
 8000886:	2200      	movs	r2, #0
 8000888:	2106      	movs	r1, #6
 800088a:	203b      	movs	r0, #59	; 0x3b
 800088c:	f000 fd89 	bl	80013a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000890:	203b      	movs	r0, #59	; 0x3b
 8000892:	f000 fda2 	bl	80013da <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 6, 0);
 8000896:	2200      	movs	r2, #0
 8000898:	2106      	movs	r1, #6
 800089a:	2045      	movs	r0, #69	; 0x45
 800089c:	f000 fd81 	bl	80013a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80008a0:	2045      	movs	r0, #69	; 0x45
 80008a2:	f000 fd9a 	bl	80013da <HAL_NVIC_EnableIRQ>

}
 80008a6:	bf00      	nop
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40023800 	.word	0x40023800

080008b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b08c      	sub	sp, #48	; 0x30
 80008b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ba:	f107 031c 	add.w	r3, r7, #28
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]
 80008c4:	609a      	str	r2, [r3, #8]
 80008c6:	60da      	str	r2, [r3, #12]
 80008c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	61bb      	str	r3, [r7, #24]
 80008ce:	4b67      	ldr	r3, [pc, #412]	; (8000a6c <MX_GPIO_Init+0x1b8>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	4a66      	ldr	r2, [pc, #408]	; (8000a6c <MX_GPIO_Init+0x1b8>)
 80008d4:	f043 0304 	orr.w	r3, r3, #4
 80008d8:	6313      	str	r3, [r2, #48]	; 0x30
 80008da:	4b64      	ldr	r3, [pc, #400]	; (8000a6c <MX_GPIO_Init+0x1b8>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f003 0304 	and.w	r3, r3, #4
 80008e2:	61bb      	str	r3, [r7, #24]
 80008e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	617b      	str	r3, [r7, #20]
 80008ea:	4b60      	ldr	r3, [pc, #384]	; (8000a6c <MX_GPIO_Init+0x1b8>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a5f      	ldr	r2, [pc, #380]	; (8000a6c <MX_GPIO_Init+0x1b8>)
 80008f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b5d      	ldr	r3, [pc, #372]	; (8000a6c <MX_GPIO_Init+0x1b8>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008fe:	617b      	str	r3, [r7, #20]
 8000900:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	613b      	str	r3, [r7, #16]
 8000906:	4b59      	ldr	r3, [pc, #356]	; (8000a6c <MX_GPIO_Init+0x1b8>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4a58      	ldr	r2, [pc, #352]	; (8000a6c <MX_GPIO_Init+0x1b8>)
 800090c:	f043 0301 	orr.w	r3, r3, #1
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b56      	ldr	r3, [pc, #344]	; (8000a6c <MX_GPIO_Init+0x1b8>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	613b      	str	r3, [r7, #16]
 800091c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	60fb      	str	r3, [r7, #12]
 8000922:	4b52      	ldr	r3, [pc, #328]	; (8000a6c <MX_GPIO_Init+0x1b8>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a51      	ldr	r2, [pc, #324]	; (8000a6c <MX_GPIO_Init+0x1b8>)
 8000928:	f043 0302 	orr.w	r3, r3, #2
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	4b4f      	ldr	r3, [pc, #316]	; (8000a6c <MX_GPIO_Init+0x1b8>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	f003 0302 	and.w	r3, r3, #2
 8000936:	60fb      	str	r3, [r7, #12]
 8000938:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	60bb      	str	r3, [r7, #8]
 800093e:	4b4b      	ldr	r3, [pc, #300]	; (8000a6c <MX_GPIO_Init+0x1b8>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	4a4a      	ldr	r2, [pc, #296]	; (8000a6c <MX_GPIO_Init+0x1b8>)
 8000944:	f043 0310 	orr.w	r3, r3, #16
 8000948:	6313      	str	r3, [r2, #48]	; 0x30
 800094a:	4b48      	ldr	r3, [pc, #288]	; (8000a6c <MX_GPIO_Init+0x1b8>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	f003 0310 	and.w	r3, r3, #16
 8000952:	60bb      	str	r3, [r7, #8]
 8000954:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	607b      	str	r3, [r7, #4]
 800095a:	4b44      	ldr	r3, [pc, #272]	; (8000a6c <MX_GPIO_Init+0x1b8>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a43      	ldr	r2, [pc, #268]	; (8000a6c <MX_GPIO_Init+0x1b8>)
 8000960:	f043 0308 	orr.w	r3, r3, #8
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b41      	ldr	r3, [pc, #260]	; (8000a6c <MX_GPIO_Init+0x1b8>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0308 	and.w	r3, r3, #8
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	603b      	str	r3, [r7, #0]
 8000976:	4b3d      	ldr	r3, [pc, #244]	; (8000a6c <MX_GPIO_Init+0x1b8>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	4a3c      	ldr	r2, [pc, #240]	; (8000a6c <MX_GPIO_Init+0x1b8>)
 800097c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000980:	6313      	str	r3, [r2, #48]	; 0x30
 8000982:	4b3a      	ldr	r3, [pc, #232]	; (8000a6c <MX_GPIO_Init+0x1b8>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800098a:	603b      	str	r3, [r7, #0]
 800098c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800098e:	2200      	movs	r2, #0
 8000990:	f244 0181 	movw	r1, #16513	; 0x4081
 8000994:	4836      	ldr	r0, [pc, #216]	; (8000a70 <MX_GPIO_Init+0x1bc>)
 8000996:	f001 fe54 	bl	8002642 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800099a:	2200      	movs	r2, #0
 800099c:	2140      	movs	r1, #64	; 0x40
 800099e:	4835      	ldr	r0, [pc, #212]	; (8000a74 <MX_GPIO_Init+0x1c0>)
 80009a0:	f001 fe4f 	bl	8002642 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : USER_Btn_Pin PC6 PC7 */
  GPIO_InitStruct.Pin = USER_Btn_Pin|GPIO_PIN_6|GPIO_PIN_7;
 80009a4:	f44f 5303 	mov.w	r3, #8384	; 0x20c0
 80009a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009aa:	4b33      	ldr	r3, [pc, #204]	; (8000a78 <MX_GPIO_Init+0x1c4>)
 80009ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	4619      	mov	r1, r3
 80009b8:	4830      	ldr	r0, [pc, #192]	; (8000a7c <MX_GPIO_Init+0x1c8>)
 80009ba:	f001 fc8d 	bl	80022d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80009be:	f244 0381 	movw	r3, #16513	; 0x4081
 80009c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c4:	2301      	movs	r3, #1
 80009c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009cc:	2300      	movs	r3, #0
 80009ce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d0:	f107 031c 	add.w	r3, r7, #28
 80009d4:	4619      	mov	r1, r3
 80009d6:	4826      	ldr	r0, [pc, #152]	; (8000a70 <MX_GPIO_Init+0x1bc>)
 80009d8:	f001 fc7e 	bl	80022d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE10 PE11 PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14;
 80009dc:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 80009e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009e2:	4b25      	ldr	r3, [pc, #148]	; (8000a78 <MX_GPIO_Init+0x1c4>)
 80009e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009ea:	f107 031c 	add.w	r3, r7, #28
 80009ee:	4619      	mov	r1, r3
 80009f0:	4823      	ldr	r0, [pc, #140]	; (8000a80 <MX_GPIO_Init+0x1cc>)
 80009f2:	f001 fc71 	bl	80022d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009f6:	2304      	movs	r3, #4
 80009f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009fa:	2300      	movs	r3, #0
 80009fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009fe:	2301      	movs	r3, #1
 8000a00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a02:	f107 031c 	add.w	r3, r7, #28
 8000a06:	4619      	mov	r1, r3
 8000a08:	481a      	ldr	r0, [pc, #104]	; (8000a74 <MX_GPIO_Init+0x1c0>)
 8000a0a:	f001 fc65 	bl	80022d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a0e:	2340      	movs	r3, #64	; 0x40
 8000a10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a12:	2301      	movs	r3, #1
 8000a14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a1e:	f107 031c 	add.w	r3, r7, #28
 8000a22:	4619      	mov	r1, r3
 8000a24:	4813      	ldr	r0, [pc, #76]	; (8000a74 <MX_GPIO_Init+0x1c0>)
 8000a26:	f001 fc57 	bl	80022d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a2a:	2380      	movs	r3, #128	; 0x80
 8000a2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a36:	f107 031c 	add.w	r3, r7, #28
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	480d      	ldr	r0, [pc, #52]	; (8000a74 <MX_GPIO_Init+0x1c0>)
 8000a3e:	f001 fc4b 	bl	80022d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000a42:	2200      	movs	r2, #0
 8000a44:	2100      	movs	r1, #0
 8000a46:	2017      	movs	r0, #23
 8000a48:	f000 fcab 	bl	80013a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000a4c:	2017      	movs	r0, #23
 8000a4e:	f000 fcc4 	bl	80013da <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2100      	movs	r1, #0
 8000a56:	2028      	movs	r0, #40	; 0x28
 8000a58:	f000 fca3 	bl	80013a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a5c:	2028      	movs	r0, #40	; 0x28
 8000a5e:	f000 fcbc 	bl	80013da <HAL_NVIC_EnableIRQ>

}
 8000a62:	bf00      	nop
 8000a64:	3730      	adds	r7, #48	; 0x30
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40023800 	.word	0x40023800
 8000a70:	40020400 	.word	0x40020400
 8000a74:	40021800 	.word	0x40021800
 8000a78:	10110000 	.word	0x10110000
 8000a7c:	40020800 	.word	0x40020800
 8000a80:	40021000 	.word	0x40021000

08000a84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bc80      	pop	{r7}
 8000a8e:	4770      	bx	lr

08000a90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	607b      	str	r3, [r7, #4]
 8000a9a:	4b0f      	ldr	r3, [pc, #60]	; (8000ad8 <HAL_MspInit+0x48>)
 8000a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9e:	4a0e      	ldr	r2, [pc, #56]	; (8000ad8 <HAL_MspInit+0x48>)
 8000aa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aa4:	6453      	str	r3, [r2, #68]	; 0x44
 8000aa6:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <HAL_MspInit+0x48>)
 8000aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aae:	607b      	str	r3, [r7, #4]
 8000ab0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	603b      	str	r3, [r7, #0]
 8000ab6:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <HAL_MspInit+0x48>)
 8000ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aba:	4a07      	ldr	r2, [pc, #28]	; (8000ad8 <HAL_MspInit+0x48>)
 8000abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac2:	4b05      	ldr	r3, [pc, #20]	; (8000ad8 <HAL_MspInit+0x48>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aca:	603b      	str	r3, [r7, #0]
 8000acc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bc80      	pop	{r7}
 8000ad6:	4770      	bx	lr
 8000ad8:	40023800 	.word	0x40023800

08000adc <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08e      	sub	sp, #56	; 0x38
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
 8000af2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a55      	ldr	r2, [pc, #340]	; (8000c50 <HAL_ETH_MspInit+0x174>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	f040 80a4 	bne.w	8000c48 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000b00:	2300      	movs	r3, #0
 8000b02:	623b      	str	r3, [r7, #32]
 8000b04:	4b53      	ldr	r3, [pc, #332]	; (8000c54 <HAL_ETH_MspInit+0x178>)
 8000b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b08:	4a52      	ldr	r2, [pc, #328]	; (8000c54 <HAL_ETH_MspInit+0x178>)
 8000b0a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b0e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b10:	4b50      	ldr	r3, [pc, #320]	; (8000c54 <HAL_ETH_MspInit+0x178>)
 8000b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b18:	623b      	str	r3, [r7, #32]
 8000b1a:	6a3b      	ldr	r3, [r7, #32]
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	61fb      	str	r3, [r7, #28]
 8000b20:	4b4c      	ldr	r3, [pc, #304]	; (8000c54 <HAL_ETH_MspInit+0x178>)
 8000b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b24:	4a4b      	ldr	r2, [pc, #300]	; (8000c54 <HAL_ETH_MspInit+0x178>)
 8000b26:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b2a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2c:	4b49      	ldr	r3, [pc, #292]	; (8000c54 <HAL_ETH_MspInit+0x178>)
 8000b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b30:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b34:	61fb      	str	r3, [r7, #28]
 8000b36:	69fb      	ldr	r3, [r7, #28]
 8000b38:	2300      	movs	r3, #0
 8000b3a:	61bb      	str	r3, [r7, #24]
 8000b3c:	4b45      	ldr	r3, [pc, #276]	; (8000c54 <HAL_ETH_MspInit+0x178>)
 8000b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b40:	4a44      	ldr	r2, [pc, #272]	; (8000c54 <HAL_ETH_MspInit+0x178>)
 8000b42:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000b46:	6313      	str	r3, [r2, #48]	; 0x30
 8000b48:	4b42      	ldr	r3, [pc, #264]	; (8000c54 <HAL_ETH_MspInit+0x178>)
 8000b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000b50:	61bb      	str	r3, [r7, #24]
 8000b52:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b54:	2300      	movs	r3, #0
 8000b56:	617b      	str	r3, [r7, #20]
 8000b58:	4b3e      	ldr	r3, [pc, #248]	; (8000c54 <HAL_ETH_MspInit+0x178>)
 8000b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5c:	4a3d      	ldr	r2, [pc, #244]	; (8000c54 <HAL_ETH_MspInit+0x178>)
 8000b5e:	f043 0304 	orr.w	r3, r3, #4
 8000b62:	6313      	str	r3, [r2, #48]	; 0x30
 8000b64:	4b3b      	ldr	r3, [pc, #236]	; (8000c54 <HAL_ETH_MspInit+0x178>)
 8000b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b68:	f003 0304 	and.w	r3, r3, #4
 8000b6c:	617b      	str	r3, [r7, #20]
 8000b6e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b70:	2300      	movs	r3, #0
 8000b72:	613b      	str	r3, [r7, #16]
 8000b74:	4b37      	ldr	r3, [pc, #220]	; (8000c54 <HAL_ETH_MspInit+0x178>)
 8000b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b78:	4a36      	ldr	r2, [pc, #216]	; (8000c54 <HAL_ETH_MspInit+0x178>)
 8000b7a:	f043 0301 	orr.w	r3, r3, #1
 8000b7e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b80:	4b34      	ldr	r3, [pc, #208]	; (8000c54 <HAL_ETH_MspInit+0x178>)
 8000b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b84:	f003 0301 	and.w	r3, r3, #1
 8000b88:	613b      	str	r3, [r7, #16]
 8000b8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	4b30      	ldr	r3, [pc, #192]	; (8000c54 <HAL_ETH_MspInit+0x178>)
 8000b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b94:	4a2f      	ldr	r2, [pc, #188]	; (8000c54 <HAL_ETH_MspInit+0x178>)
 8000b96:	f043 0302 	orr.w	r3, r3, #2
 8000b9a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9c:	4b2d      	ldr	r3, [pc, #180]	; (8000c54 <HAL_ETH_MspInit+0x178>)
 8000b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba0:	f003 0302 	and.w	r3, r3, #2
 8000ba4:	60fb      	str	r3, [r7, #12]
 8000ba6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ba8:	2300      	movs	r3, #0
 8000baa:	60bb      	str	r3, [r7, #8]
 8000bac:	4b29      	ldr	r3, [pc, #164]	; (8000c54 <HAL_ETH_MspInit+0x178>)
 8000bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb0:	4a28      	ldr	r2, [pc, #160]	; (8000c54 <HAL_ETH_MspInit+0x178>)
 8000bb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bb6:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb8:	4b26      	ldr	r3, [pc, #152]	; (8000c54 <HAL_ETH_MspInit+0x178>)
 8000bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bc0:	60bb      	str	r3, [r7, #8]
 8000bc2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000bc4:	2332      	movs	r3, #50	; 0x32
 8000bc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bd4:	230b      	movs	r3, #11
 8000bd6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bdc:	4619      	mov	r1, r3
 8000bde:	481e      	ldr	r0, [pc, #120]	; (8000c58 <HAL_ETH_MspInit+0x17c>)
 8000be0:	f001 fb7a 	bl	80022d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000be4:	2386      	movs	r3, #134	; 0x86
 8000be6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be8:	2302      	movs	r3, #2
 8000bea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bf4:	230b      	movs	r3, #11
 8000bf6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4817      	ldr	r0, [pc, #92]	; (8000c5c <HAL_ETH_MspInit+0x180>)
 8000c00:	f001 fb6a 	bl	80022d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000c04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c12:	2303      	movs	r3, #3
 8000c14:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c16:	230b      	movs	r3, #11
 8000c18:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c1e:	4619      	mov	r1, r3
 8000c20:	480f      	ldr	r0, [pc, #60]	; (8000c60 <HAL_ETH_MspInit+0x184>)
 8000c22:	f001 fb59 	bl	80022d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c26:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c34:	2303      	movs	r3, #3
 8000c36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c38:	230b      	movs	r3, #11
 8000c3a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c40:	4619      	mov	r1, r3
 8000c42:	4808      	ldr	r0, [pc, #32]	; (8000c64 <HAL_ETH_MspInit+0x188>)
 8000c44:	f001 fb48 	bl	80022d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000c48:	bf00      	nop
 8000c4a:	3738      	adds	r7, #56	; 0x38
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	40028000 	.word	0x40028000
 8000c54:	40023800 	.word	0x40023800
 8000c58:	40020800 	.word	0x40020800
 8000c5c:	40020000 	.word	0x40020000
 8000c60:	40020400 	.word	0x40020400
 8000c64:	40021800 	.word	0x40021800

08000c68 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b08a      	sub	sp, #40	; 0x28
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c70:	f107 0314 	add.w	r3, r7, #20
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a68      	ldr	r2, [pc, #416]	; (8000e28 <HAL_SD_MspInit+0x1c0>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	f040 80c9 	bne.w	8000e1e <HAL_SD_MspInit+0x1b6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	613b      	str	r3, [r7, #16]
 8000c90:	4b66      	ldr	r3, [pc, #408]	; (8000e2c <HAL_SD_MspInit+0x1c4>)
 8000c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c94:	4a65      	ldr	r2, [pc, #404]	; (8000e2c <HAL_SD_MspInit+0x1c4>)
 8000c96:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c9a:	6453      	str	r3, [r2, #68]	; 0x44
 8000c9c:	4b63      	ldr	r3, [pc, #396]	; (8000e2c <HAL_SD_MspInit+0x1c4>)
 8000c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ca4:	613b      	str	r3, [r7, #16]
 8000ca6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca8:	2300      	movs	r3, #0
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	4b5f      	ldr	r3, [pc, #380]	; (8000e2c <HAL_SD_MspInit+0x1c4>)
 8000cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb0:	4a5e      	ldr	r2, [pc, #376]	; (8000e2c <HAL_SD_MspInit+0x1c4>)
 8000cb2:	f043 0304 	orr.w	r3, r3, #4
 8000cb6:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb8:	4b5c      	ldr	r3, [pc, #368]	; (8000e2c <HAL_SD_MspInit+0x1c4>)
 8000cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbc:	f003 0304 	and.w	r3, r3, #4
 8000cc0:	60fb      	str	r3, [r7, #12]
 8000cc2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	60bb      	str	r3, [r7, #8]
 8000cc8:	4b58      	ldr	r3, [pc, #352]	; (8000e2c <HAL_SD_MspInit+0x1c4>)
 8000cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ccc:	4a57      	ldr	r2, [pc, #348]	; (8000e2c <HAL_SD_MspInit+0x1c4>)
 8000cce:	f043 0308 	orr.w	r3, r3, #8
 8000cd2:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd4:	4b55      	ldr	r3, [pc, #340]	; (8000e2c <HAL_SD_MspInit+0x1c4>)
 8000cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd8:	f003 0308 	and.w	r3, r3, #8
 8000cdc:	60bb      	str	r3, [r7, #8]
 8000cde:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000ce0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000ce4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cee:	2303      	movs	r3, #3
 8000cf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000cf2:	230c      	movs	r3, #12
 8000cf4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cf6:	f107 0314 	add.w	r3, r7, #20
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	484c      	ldr	r0, [pc, #304]	; (8000e30 <HAL_SD_MspInit+0x1c8>)
 8000cfe:	f001 faeb 	bl	80022d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d02:	2304      	movs	r3, #4
 8000d04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d06:	2302      	movs	r3, #2
 8000d08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0e:	2303      	movs	r3, #3
 8000d10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000d12:	230c      	movs	r3, #12
 8000d14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d16:	f107 0314 	add.w	r3, r7, #20
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4845      	ldr	r0, [pc, #276]	; (8000e34 <HAL_SD_MspInit+0x1cc>)
 8000d1e:	f001 fadb 	bl	80022d8 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8000d22:	4b45      	ldr	r3, [pc, #276]	; (8000e38 <HAL_SD_MspInit+0x1d0>)
 8000d24:	4a45      	ldr	r2, [pc, #276]	; (8000e3c <HAL_SD_MspInit+0x1d4>)
 8000d26:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8000d28:	4b43      	ldr	r3, [pc, #268]	; (8000e38 <HAL_SD_MspInit+0x1d0>)
 8000d2a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d2e:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d30:	4b41      	ldr	r3, [pc, #260]	; (8000e38 <HAL_SD_MspInit+0x1d0>)
 8000d32:	2240      	movs	r2, #64	; 0x40
 8000d34:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d36:	4b40      	ldr	r3, [pc, #256]	; (8000e38 <HAL_SD_MspInit+0x1d0>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d3c:	4b3e      	ldr	r3, [pc, #248]	; (8000e38 <HAL_SD_MspInit+0x1d0>)
 8000d3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d42:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000d44:	4b3c      	ldr	r3, [pc, #240]	; (8000e38 <HAL_SD_MspInit+0x1d0>)
 8000d46:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d4a:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d4c:	4b3a      	ldr	r3, [pc, #232]	; (8000e38 <HAL_SD_MspInit+0x1d0>)
 8000d4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d52:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8000d54:	4b38      	ldr	r3, [pc, #224]	; (8000e38 <HAL_SD_MspInit+0x1d0>)
 8000d56:	2220      	movs	r2, #32
 8000d58:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d5a:	4b37      	ldr	r3, [pc, #220]	; (8000e38 <HAL_SD_MspInit+0x1d0>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000d60:	4b35      	ldr	r3, [pc, #212]	; (8000e38 <HAL_SD_MspInit+0x1d0>)
 8000d62:	2204      	movs	r2, #4
 8000d64:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000d66:	4b34      	ldr	r3, [pc, #208]	; (8000e38 <HAL_SD_MspInit+0x1d0>)
 8000d68:	2203      	movs	r2, #3
 8000d6a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8000d6c:	4b32      	ldr	r3, [pc, #200]	; (8000e38 <HAL_SD_MspInit+0x1d0>)
 8000d6e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000d72:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000d74:	4b30      	ldr	r3, [pc, #192]	; (8000e38 <HAL_SD_MspInit+0x1d0>)
 8000d76:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000d7a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8000d7c:	482e      	ldr	r0, [pc, #184]	; (8000e38 <HAL_SD_MspInit+0x1d0>)
 8000d7e:	f000 fb47 	bl	8001410 <HAL_DMA_Init>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 8000d88:	f7ff fe7c 	bl	8000a84 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	4a2a      	ldr	r2, [pc, #168]	; (8000e38 <HAL_SD_MspInit+0x1d0>)
 8000d90:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d92:	4a29      	ldr	r2, [pc, #164]	; (8000e38 <HAL_SD_MspInit+0x1d0>)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8000d98:	4b29      	ldr	r3, [pc, #164]	; (8000e40 <HAL_SD_MspInit+0x1d8>)
 8000d9a:	4a2a      	ldr	r2, [pc, #168]	; (8000e44 <HAL_SD_MspInit+0x1dc>)
 8000d9c:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8000d9e:	4b28      	ldr	r3, [pc, #160]	; (8000e40 <HAL_SD_MspInit+0x1d8>)
 8000da0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000da4:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000da6:	4b26      	ldr	r3, [pc, #152]	; (8000e40 <HAL_SD_MspInit+0x1d8>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dac:	4b24      	ldr	r3, [pc, #144]	; (8000e40 <HAL_SD_MspInit+0x1d8>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000db2:	4b23      	ldr	r3, [pc, #140]	; (8000e40 <HAL_SD_MspInit+0x1d8>)
 8000db4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000db8:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000dba:	4b21      	ldr	r3, [pc, #132]	; (8000e40 <HAL_SD_MspInit+0x1d8>)
 8000dbc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000dc0:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000dc2:	4b1f      	ldr	r3, [pc, #124]	; (8000e40 <HAL_SD_MspInit+0x1d8>)
 8000dc4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000dc8:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8000dca:	4b1d      	ldr	r3, [pc, #116]	; (8000e40 <HAL_SD_MspInit+0x1d8>)
 8000dcc:	2220      	movs	r2, #32
 8000dce:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000dd0:	4b1b      	ldr	r3, [pc, #108]	; (8000e40 <HAL_SD_MspInit+0x1d8>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000dd6:	4b1a      	ldr	r3, [pc, #104]	; (8000e40 <HAL_SD_MspInit+0x1d8>)
 8000dd8:	2204      	movs	r2, #4
 8000dda:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000ddc:	4b18      	ldr	r3, [pc, #96]	; (8000e40 <HAL_SD_MspInit+0x1d8>)
 8000dde:	2203      	movs	r2, #3
 8000de0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8000de2:	4b17      	ldr	r3, [pc, #92]	; (8000e40 <HAL_SD_MspInit+0x1d8>)
 8000de4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000de8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000dea:	4b15      	ldr	r3, [pc, #84]	; (8000e40 <HAL_SD_MspInit+0x1d8>)
 8000dec:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000df0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8000df2:	4813      	ldr	r0, [pc, #76]	; (8000e40 <HAL_SD_MspInit+0x1d8>)
 8000df4:	f000 fb0c 	bl	8001410 <HAL_DMA_Init>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 8000dfe:	f7ff fe41 	bl	8000a84 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4a0e      	ldr	r2, [pc, #56]	; (8000e40 <HAL_SD_MspInit+0x1d8>)
 8000e06:	641a      	str	r2, [r3, #64]	; 0x40
 8000e08:	4a0d      	ldr	r2, [pc, #52]	; (8000e40 <HAL_SD_MspInit+0x1d8>)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	2105      	movs	r1, #5
 8000e12:	2031      	movs	r0, #49	; 0x31
 8000e14:	f000 fac5 	bl	80013a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8000e18:	2031      	movs	r0, #49	; 0x31
 8000e1a:	f000 fade 	bl	80013da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000e1e:	bf00      	nop
 8000e20:	3728      	adds	r7, #40	; 0x28
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40012c00 	.word	0x40012c00
 8000e2c:	40023800 	.word	0x40023800
 8000e30:	40020800 	.word	0x40020800
 8000e34:	40020c00 	.word	0x40020c00
 8000e38:	200004d8 	.word	0x200004d8
 8000e3c:	400264a0 	.word	0x400264a0
 8000e40:	20000438 	.word	0x20000438
 8000e44:	40026458 	.word	0x40026458

08000e48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08a      	sub	sp, #40	; 0x28
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e50:	f107 0314 	add.w	r3, r7, #20
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a19      	ldr	r2, [pc, #100]	; (8000ecc <HAL_UART_MspInit+0x84>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d12c      	bne.n	8000ec4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	613b      	str	r3, [r7, #16]
 8000e6e:	4b18      	ldr	r3, [pc, #96]	; (8000ed0 <HAL_UART_MspInit+0x88>)
 8000e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e72:	4a17      	ldr	r2, [pc, #92]	; (8000ed0 <HAL_UART_MspInit+0x88>)
 8000e74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e78:	6413      	str	r3, [r2, #64]	; 0x40
 8000e7a:	4b15      	ldr	r3, [pc, #84]	; (8000ed0 <HAL_UART_MspInit+0x88>)
 8000e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e82:	613b      	str	r3, [r7, #16]
 8000e84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	60fb      	str	r3, [r7, #12]
 8000e8a:	4b11      	ldr	r3, [pc, #68]	; (8000ed0 <HAL_UART_MspInit+0x88>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	4a10      	ldr	r2, [pc, #64]	; (8000ed0 <HAL_UART_MspInit+0x88>)
 8000e90:	f043 0308 	orr.w	r3, r3, #8
 8000e94:	6313      	str	r3, [r2, #48]	; 0x30
 8000e96:	4b0e      	ldr	r3, [pc, #56]	; (8000ed0 <HAL_UART_MspInit+0x88>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	f003 0308 	and.w	r3, r3, #8
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000ea2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ea6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb0:	2303      	movs	r3, #3
 8000eb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000eb4:	2307      	movs	r3, #7
 8000eb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eb8:	f107 0314 	add.w	r3, r7, #20
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4805      	ldr	r0, [pc, #20]	; (8000ed4 <HAL_UART_MspInit+0x8c>)
 8000ec0:	f001 fa0a 	bl	80022d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ec4:	bf00      	nop
 8000ec6:	3728      	adds	r7, #40	; 0x28
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40004800 	.word	0x40004800
 8000ed0:	40023800 	.word	0x40023800
 8000ed4:	40020c00 	.word	0x40020c00

08000ed8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bc80      	pop	{r7}
 8000ee2:	4770      	bx	lr

08000ee4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <HardFault_Handler+0x4>

08000eea <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eee:	e7fe      	b.n	8000eee <MemManage_Handler+0x4>

08000ef0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ef4:	e7fe      	b.n	8000ef4 <BusFault_Handler+0x4>

08000ef6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000efa:	e7fe      	b.n	8000efa <UsageFault_Handler+0x4>

08000efc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc80      	pop	{r7}
 8000f06:	4770      	bx	lr

08000f08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bc80      	pop	{r7}
 8000f12:	4770      	bx	lr

08000f14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bc80      	pop	{r7}
 8000f1e:	4770      	bx	lr

08000f20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f24:	f000 f928 	bl	8001178 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f28:	bf00      	nop
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000f30:	2040      	movs	r0, #64	; 0x40
 8000f32:	f001 fbb7 	bl	80026a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000f36:	2080      	movs	r0, #128	; 0x80
 8000f38:	f001 fbb4 	bl	80026a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000f3c:	bf00      	nop
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000f44:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000f48:	f001 fbac 	bl	80026a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8000f4c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000f50:	f001 fba8 	bl	80026a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000f54:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f58:	f001 fba4 	bl	80026a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8000f5c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000f60:	f001 fba0 	bl	80026a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8000f6c:	4802      	ldr	r0, [pc, #8]	; (8000f78 <SDIO_IRQHandler+0x10>)
 8000f6e:	f003 fdb5 	bl	8004adc <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20000538 	.word	0x20000538

08000f7c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 Stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8000f80:	4802      	ldr	r0, [pc, #8]	; (8000f8c <DMA2_Stream3_IRQHandler+0x10>)
 8000f82:	f000 fb15 	bl	80015b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000438 	.word	0x20000438

08000f90 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000f94:	4802      	ldr	r0, [pc, #8]	; (8000fa0 <OTG_FS_IRQHandler+0x10>)
 8000f96:	f001 fcdc 	bl	8002952 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	20001f30 	.word	0x20001f30

08000fa4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 Stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8000fa8:	4802      	ldr	r0, [pc, #8]	; (8000fb4 <DMA2_Stream6_IRQHandler+0x10>)
 8000faa:	f000 fb01 	bl	80015b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	200004d8 	.word	0x200004d8

08000fb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fc0:	4a14      	ldr	r2, [pc, #80]	; (8001014 <_sbrk+0x5c>)
 8000fc2:	4b15      	ldr	r3, [pc, #84]	; (8001018 <_sbrk+0x60>)
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fcc:	4b13      	ldr	r3, [pc, #76]	; (800101c <_sbrk+0x64>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d102      	bne.n	8000fda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fd4:	4b11      	ldr	r3, [pc, #68]	; (800101c <_sbrk+0x64>)
 8000fd6:	4a12      	ldr	r2, [pc, #72]	; (8001020 <_sbrk+0x68>)
 8000fd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fda:	4b10      	ldr	r3, [pc, #64]	; (800101c <_sbrk+0x64>)
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d207      	bcs.n	8000ff8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fe8:	f00c f9f6 	bl	800d3d8 <__errno>
 8000fec:	4602      	mov	r2, r0
 8000fee:	230c      	movs	r3, #12
 8000ff0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000ff2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ff6:	e009      	b.n	800100c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ff8:	4b08      	ldr	r3, [pc, #32]	; (800101c <_sbrk+0x64>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ffe:	4b07      	ldr	r3, [pc, #28]	; (800101c <_sbrk+0x64>)
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4413      	add	r3, r2
 8001006:	4a05      	ldr	r2, [pc, #20]	; (800101c <_sbrk+0x64>)
 8001008:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800100a:	68fb      	ldr	r3, [r7, #12]
}
 800100c:	4618      	mov	r0, r3
 800100e:	3718      	adds	r7, #24
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20020000 	.word	0x20020000
 8001018:	00000400 	.word	0x00000400
 800101c:	200001fc 	.word	0x200001fc
 8001020:	20002338 	.word	0x20002338

08001024 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001028:	4b12      	ldr	r3, [pc, #72]	; (8001074 <SystemInit+0x50>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a11      	ldr	r2, [pc, #68]	; (8001074 <SystemInit+0x50>)
 800102e:	f043 0301 	orr.w	r3, r3, #1
 8001032:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001034:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <SystemInit+0x50>)
 8001036:	2200      	movs	r2, #0
 8001038:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800103a:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <SystemInit+0x50>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a0d      	ldr	r2, [pc, #52]	; (8001074 <SystemInit+0x50>)
 8001040:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001044:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001048:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800104a:	4b0a      	ldr	r3, [pc, #40]	; (8001074 <SystemInit+0x50>)
 800104c:	4a0a      	ldr	r2, [pc, #40]	; (8001078 <SystemInit+0x54>)
 800104e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001050:	4b08      	ldr	r3, [pc, #32]	; (8001074 <SystemInit+0x50>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a07      	ldr	r2, [pc, #28]	; (8001074 <SystemInit+0x50>)
 8001056:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800105a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800105c:	4b05      	ldr	r3, [pc, #20]	; (8001074 <SystemInit+0x50>)
 800105e:	2200      	movs	r2, #0
 8001060:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001062:	4b06      	ldr	r3, [pc, #24]	; (800107c <SystemInit+0x58>)
 8001064:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001068:	609a      	str	r2, [r3, #8]
#endif
}
 800106a:	bf00      	nop
 800106c:	46bd      	mov	sp, r7
 800106e:	bc80      	pop	{r7}
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	40023800 	.word	0x40023800
 8001078:	24003010 	.word	0x24003010
 800107c:	e000ed00 	.word	0xe000ed00

08001080 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001080:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010b8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8001084:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001086:	e003      	b.n	8001090 <LoopCopyDataInit>

08001088 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001088:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800108a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800108c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800108e:	3104      	adds	r1, #4

08001090 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8001090:	480b      	ldr	r0, [pc, #44]	; (80010c0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001092:	4b0c      	ldr	r3, [pc, #48]	; (80010c4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001094:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001096:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001098:	d3f6      	bcc.n	8001088 <CopyDataInit>
  ldr  r2, =_sbss
 800109a:	4a0b      	ldr	r2, [pc, #44]	; (80010c8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800109c:	e002      	b.n	80010a4 <LoopFillZerobss>

0800109e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800109e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80010a0:	f842 3b04 	str.w	r3, [r2], #4

080010a4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr  r3, = _ebss
 80010a4:	4b09      	ldr	r3, [pc, #36]	; (80010cc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80010a6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80010a8:	d3f9      	bcc.n	800109e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80010aa:	f7ff ffbb 	bl	8001024 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010ae:	f00c f999 	bl	800d3e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010b2:	f7ff fa8f 	bl	80005d4 <main>
  bx  lr
 80010b6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80010b8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80010bc:	0802f760 	.word	0x0802f760
  ldr  r0, =_sdata
 80010c0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80010c4:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 80010c8:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 80010cc:	20002334 	.word	0x20002334

080010d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010d0:	e7fe      	b.n	80010d0 <ADC_IRQHandler>
	...

080010d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010d8:	4b0e      	ldr	r3, [pc, #56]	; (8001114 <HAL_Init+0x40>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a0d      	ldr	r2, [pc, #52]	; (8001114 <HAL_Init+0x40>)
 80010de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80010e4:	4b0b      	ldr	r3, [pc, #44]	; (8001114 <HAL_Init+0x40>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a0a      	ldr	r2, [pc, #40]	; (8001114 <HAL_Init+0x40>)
 80010ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010f0:	4b08      	ldr	r3, [pc, #32]	; (8001114 <HAL_Init+0x40>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a07      	ldr	r2, [pc, #28]	; (8001114 <HAL_Init+0x40>)
 80010f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010fc:	2003      	movs	r0, #3
 80010fe:	f000 f945 	bl	800138c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001102:	2000      	movs	r0, #0
 8001104:	f000 f808 	bl	8001118 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001108:	f7ff fcc2 	bl	8000a90 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800110c:	2300      	movs	r3, #0
}
 800110e:	4618      	mov	r0, r3
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40023c00 	.word	0x40023c00

08001118 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001120:	4b12      	ldr	r3, [pc, #72]	; (800116c <HAL_InitTick+0x54>)
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	4b12      	ldr	r3, [pc, #72]	; (8001170 <HAL_InitTick+0x58>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	4619      	mov	r1, r3
 800112a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800112e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001132:	fbb2 f3f3 	udiv	r3, r2, r3
 8001136:	4618      	mov	r0, r3
 8001138:	f000 f95d 	bl	80013f6 <HAL_SYSTICK_Config>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e00e      	b.n	8001164 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2b0f      	cmp	r3, #15
 800114a:	d80a      	bhi.n	8001162 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800114c:	2200      	movs	r2, #0
 800114e:	6879      	ldr	r1, [r7, #4]
 8001150:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001154:	f000 f925 	bl	80013a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001158:	4a06      	ldr	r2, [pc, #24]	; (8001174 <HAL_InitTick+0x5c>)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800115e:	2300      	movs	r3, #0
 8001160:	e000      	b.n	8001164 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
}
 8001164:	4618      	mov	r0, r3
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	20000000 	.word	0x20000000
 8001170:	20000008 	.word	0x20000008
 8001174:	20000004 	.word	0x20000004

08001178 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800117c:	4b05      	ldr	r3, [pc, #20]	; (8001194 <HAL_IncTick+0x1c>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	461a      	mov	r2, r3
 8001182:	4b05      	ldr	r3, [pc, #20]	; (8001198 <HAL_IncTick+0x20>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4413      	add	r3, r2
 8001188:	4a03      	ldr	r2, [pc, #12]	; (8001198 <HAL_IncTick+0x20>)
 800118a:	6013      	str	r3, [r2, #0]
}
 800118c:	bf00      	nop
 800118e:	46bd      	mov	sp, r7
 8001190:	bc80      	pop	{r7}
 8001192:	4770      	bx	lr
 8001194:	20000008 	.word	0x20000008
 8001198:	20000604 	.word	0x20000604

0800119c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  return uwTick;
 80011a0:	4b02      	ldr	r3, [pc, #8]	; (80011ac <HAL_GetTick+0x10>)
 80011a2:	681b      	ldr	r3, [r3, #0]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bc80      	pop	{r7}
 80011aa:	4770      	bx	lr
 80011ac:	20000604 	.word	0x20000604

080011b0 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011b8:	f7ff fff0 	bl	800119c <HAL_GetTick>
 80011bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80011c8:	d005      	beq.n	80011d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011ca:	4b09      	ldr	r3, [pc, #36]	; (80011f0 <HAL_Delay+0x40>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	461a      	mov	r2, r3
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	4413      	add	r3, r2
 80011d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011d6:	bf00      	nop
 80011d8:	f7ff ffe0 	bl	800119c <HAL_GetTick>
 80011dc:	4602      	mov	r2, r0
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	68fa      	ldr	r2, [r7, #12]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d8f7      	bhi.n	80011d8 <HAL_Delay+0x28>
  {
  }
}
 80011e8:	bf00      	nop
 80011ea:	3710      	adds	r7, #16
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20000008 	.word	0x20000008

080011f4 <__NVIC_SetPriorityGrouping>:
{
 80011f4:	b480      	push	{r7}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f003 0307 	and.w	r3, r3, #7
 8001202:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001204:	4b0c      	ldr	r3, [pc, #48]	; (8001238 <__NVIC_SetPriorityGrouping+0x44>)
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800120a:	68ba      	ldr	r2, [r7, #8]
 800120c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001210:	4013      	ands	r3, r2
 8001212:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800121c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001220:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001224:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001226:	4a04      	ldr	r2, [pc, #16]	; (8001238 <__NVIC_SetPriorityGrouping+0x44>)
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	60d3      	str	r3, [r2, #12]
}
 800122c:	bf00      	nop
 800122e:	3714      	adds	r7, #20
 8001230:	46bd      	mov	sp, r7
 8001232:	bc80      	pop	{r7}
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	e000ed00 	.word	0xe000ed00

0800123c <__NVIC_GetPriorityGrouping>:
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001240:	4b04      	ldr	r3, [pc, #16]	; (8001254 <__NVIC_GetPriorityGrouping+0x18>)
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	0a1b      	lsrs	r3, r3, #8
 8001246:	f003 0307 	and.w	r3, r3, #7
}
 800124a:	4618      	mov	r0, r3
 800124c:	46bd      	mov	sp, r7
 800124e:	bc80      	pop	{r7}
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	e000ed00 	.word	0xe000ed00

08001258 <__NVIC_EnableIRQ>:
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001266:	2b00      	cmp	r3, #0
 8001268:	db0b      	blt.n	8001282 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800126a:	79fb      	ldrb	r3, [r7, #7]
 800126c:	f003 021f 	and.w	r2, r3, #31
 8001270:	4906      	ldr	r1, [pc, #24]	; (800128c <__NVIC_EnableIRQ+0x34>)
 8001272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001276:	095b      	lsrs	r3, r3, #5
 8001278:	2001      	movs	r0, #1
 800127a:	fa00 f202 	lsl.w	r2, r0, r2
 800127e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001282:	bf00      	nop
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	bc80      	pop	{r7}
 800128a:	4770      	bx	lr
 800128c:	e000e100 	.word	0xe000e100

08001290 <__NVIC_SetPriority>:
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	6039      	str	r1, [r7, #0]
 800129a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800129c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	db0a      	blt.n	80012ba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	b2da      	uxtb	r2, r3
 80012a8:	490c      	ldr	r1, [pc, #48]	; (80012dc <__NVIC_SetPriority+0x4c>)
 80012aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ae:	0112      	lsls	r2, r2, #4
 80012b0:	b2d2      	uxtb	r2, r2
 80012b2:	440b      	add	r3, r1
 80012b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80012b8:	e00a      	b.n	80012d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	b2da      	uxtb	r2, r3
 80012be:	4908      	ldr	r1, [pc, #32]	; (80012e0 <__NVIC_SetPriority+0x50>)
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	f003 030f 	and.w	r3, r3, #15
 80012c6:	3b04      	subs	r3, #4
 80012c8:	0112      	lsls	r2, r2, #4
 80012ca:	b2d2      	uxtb	r2, r2
 80012cc:	440b      	add	r3, r1
 80012ce:	761a      	strb	r2, [r3, #24]
}
 80012d0:	bf00      	nop
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bc80      	pop	{r7}
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	e000e100 	.word	0xe000e100
 80012e0:	e000ed00 	.word	0xe000ed00

080012e4 <NVIC_EncodePriority>:
{
 80012e4:	b480      	push	{r7}
 80012e6:	b089      	sub	sp, #36	; 0x24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	60b9      	str	r1, [r7, #8]
 80012ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	f003 0307 	and.w	r3, r3, #7
 80012f6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	f1c3 0307 	rsb	r3, r3, #7
 80012fe:	2b04      	cmp	r3, #4
 8001300:	bf28      	it	cs
 8001302:	2304      	movcs	r3, #4
 8001304:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	3304      	adds	r3, #4
 800130a:	2b06      	cmp	r3, #6
 800130c:	d902      	bls.n	8001314 <NVIC_EncodePriority+0x30>
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	3b03      	subs	r3, #3
 8001312:	e000      	b.n	8001316 <NVIC_EncodePriority+0x32>
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001318:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	43da      	mvns	r2, r3
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	401a      	ands	r2, r3
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800132c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	fa01 f303 	lsl.w	r3, r1, r3
 8001336:	43d9      	mvns	r1, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800133c:	4313      	orrs	r3, r2
}
 800133e:	4618      	mov	r0, r3
 8001340:	3724      	adds	r7, #36	; 0x24
 8001342:	46bd      	mov	sp, r7
 8001344:	bc80      	pop	{r7}
 8001346:	4770      	bx	lr

08001348 <SysTick_Config>:
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	3b01      	subs	r3, #1
 8001354:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001358:	d301      	bcc.n	800135e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800135a:	2301      	movs	r3, #1
 800135c:	e00f      	b.n	800137e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800135e:	4a0a      	ldr	r2, [pc, #40]	; (8001388 <SysTick_Config+0x40>)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	3b01      	subs	r3, #1
 8001364:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001366:	210f      	movs	r1, #15
 8001368:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800136c:	f7ff ff90 	bl	8001290 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001370:	4b05      	ldr	r3, [pc, #20]	; (8001388 <SysTick_Config+0x40>)
 8001372:	2200      	movs	r2, #0
 8001374:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001376:	4b04      	ldr	r3, [pc, #16]	; (8001388 <SysTick_Config+0x40>)
 8001378:	2207      	movs	r2, #7
 800137a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800137c:	2300      	movs	r3, #0
}
 800137e:	4618      	mov	r0, r3
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	e000e010 	.word	0xe000e010

0800138c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f7ff ff2d 	bl	80011f4 <__NVIC_SetPriorityGrouping>
}
 800139a:	bf00      	nop
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b086      	sub	sp, #24
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	4603      	mov	r3, r0
 80013aa:	60b9      	str	r1, [r7, #8]
 80013ac:	607a      	str	r2, [r7, #4]
 80013ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013b0:	2300      	movs	r3, #0
 80013b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013b4:	f7ff ff42 	bl	800123c <__NVIC_GetPriorityGrouping>
 80013b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	68b9      	ldr	r1, [r7, #8]
 80013be:	6978      	ldr	r0, [r7, #20]
 80013c0:	f7ff ff90 	bl	80012e4 <NVIC_EncodePriority>
 80013c4:	4602      	mov	r2, r0
 80013c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ca:	4611      	mov	r1, r2
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff ff5f 	bl	8001290 <__NVIC_SetPriority>
}
 80013d2:	bf00      	nop
 80013d4:	3718      	adds	r7, #24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	b082      	sub	sp, #8
 80013de:	af00      	add	r7, sp, #0
 80013e0:	4603      	mov	r3, r0
 80013e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff ff35 	bl	8001258 <__NVIC_EnableIRQ>
}
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b082      	sub	sp, #8
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f7ff ffa2 	bl	8001348 <SysTick_Config>
 8001404:	4603      	mov	r3, r0
}
 8001406:	4618      	mov	r0, r3
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
	...

08001410 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001418:	2300      	movs	r3, #0
 800141a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800141c:	f7ff febe 	bl	800119c <HAL_GetTick>
 8001420:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d101      	bne.n	800142c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	e099      	b.n	8001560 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2200      	movs	r2, #0
 8001430:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2202      	movs	r2, #2
 8001438:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f022 0201 	bic.w	r2, r2, #1
 800144a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800144c:	e00f      	b.n	800146e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800144e:	f7ff fea5 	bl	800119c <HAL_GetTick>
 8001452:	4602      	mov	r2, r0
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	2b05      	cmp	r3, #5
 800145a:	d908      	bls.n	800146e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2220      	movs	r2, #32
 8001460:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2203      	movs	r2, #3
 8001466:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e078      	b.n	8001560 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 0301 	and.w	r3, r3, #1
 8001478:	2b00      	cmp	r3, #0
 800147a:	d1e8      	bne.n	800144e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001484:	697a      	ldr	r2, [r7, #20]
 8001486:	4b38      	ldr	r3, [pc, #224]	; (8001568 <HAL_DMA_Init+0x158>)
 8001488:	4013      	ands	r3, r2
 800148a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685a      	ldr	r2, [r3, #4]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800149a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	691b      	ldr	r3, [r3, #16]
 80014a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	699b      	ldr	r3, [r3, #24]
 80014ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6a1b      	ldr	r3, [r3, #32]
 80014b8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014ba:	697a      	ldr	r2, [r7, #20]
 80014bc:	4313      	orrs	r3, r2
 80014be:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c4:	2b04      	cmp	r3, #4
 80014c6:	d107      	bne.n	80014d8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d0:	4313      	orrs	r3, r2
 80014d2:	697a      	ldr	r2, [r7, #20]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	697a      	ldr	r2, [r7, #20]
 80014de:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	695b      	ldr	r3, [r3, #20]
 80014e6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	f023 0307 	bic.w	r3, r3, #7
 80014ee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f4:	697a      	ldr	r2, [r7, #20]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fe:	2b04      	cmp	r3, #4
 8001500:	d117      	bne.n	8001532 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001506:	697a      	ldr	r2, [r7, #20]
 8001508:	4313      	orrs	r3, r2
 800150a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001510:	2b00      	cmp	r3, #0
 8001512:	d00e      	beq.n	8001532 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f000 fa09 	bl	800192c <DMA_CheckFifoParam>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d008      	beq.n	8001532 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2240      	movs	r2, #64	; 0x40
 8001524:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2201      	movs	r2, #1
 800152a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800152e:	2301      	movs	r3, #1
 8001530:	e016      	b.n	8001560 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	697a      	ldr	r2, [r7, #20]
 8001538:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f000 f9c2 	bl	80018c4 <DMA_CalcBaseAndBitshift>
 8001540:	4603      	mov	r3, r0
 8001542:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001548:	223f      	movs	r2, #63	; 0x3f
 800154a:	409a      	lsls	r2, r3
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2200      	movs	r2, #0
 8001554:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2201      	movs	r2, #1
 800155a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800155e:	2300      	movs	r3, #0
}
 8001560:	4618      	mov	r0, r3
 8001562:	3718      	adds	r7, #24
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	f010803f 	.word	0xf010803f

0800156c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800157a:	b2db      	uxtb	r3, r3
 800157c:	2b02      	cmp	r3, #2
 800157e:	d004      	beq.n	800158a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2280      	movs	r2, #128	; 0x80
 8001584:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e00c      	b.n	80015a4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2205      	movs	r2, #5
 800158e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f022 0201 	bic.w	r2, r2, #1
 80015a0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80015a2:	2300      	movs	r3, #0
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bc80      	pop	{r7}
 80015ac:	4770      	bx	lr
	...

080015b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b086      	sub	sp, #24
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80015b8:	2300      	movs	r3, #0
 80015ba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80015bc:	4b92      	ldr	r3, [pc, #584]	; (8001808 <HAL_DMA_IRQHandler+0x258>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a92      	ldr	r2, [pc, #584]	; (800180c <HAL_DMA_IRQHandler+0x25c>)
 80015c2:	fba2 2303 	umull	r2, r3, r2, r3
 80015c6:	0a9b      	lsrs	r3, r3, #10
 80015c8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015da:	2208      	movs	r2, #8
 80015dc:	409a      	lsls	r2, r3
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	4013      	ands	r3, r2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d01a      	beq.n	800161c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0304 	and.w	r3, r3, #4
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d013      	beq.n	800161c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f022 0204 	bic.w	r2, r2, #4
 8001602:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001608:	2208      	movs	r2, #8
 800160a:	409a      	lsls	r2, r3
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001614:	f043 0201 	orr.w	r2, r3, #1
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001620:	2201      	movs	r2, #1
 8001622:	409a      	lsls	r2, r3
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	4013      	ands	r3, r2
 8001628:	2b00      	cmp	r3, #0
 800162a:	d012      	beq.n	8001652 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	695b      	ldr	r3, [r3, #20]
 8001632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001636:	2b00      	cmp	r3, #0
 8001638:	d00b      	beq.n	8001652 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800163e:	2201      	movs	r2, #1
 8001640:	409a      	lsls	r2, r3
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800164a:	f043 0202 	orr.w	r2, r3, #2
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001656:	2204      	movs	r2, #4
 8001658:	409a      	lsls	r2, r3
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	4013      	ands	r3, r2
 800165e:	2b00      	cmp	r3, #0
 8001660:	d012      	beq.n	8001688 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0302 	and.w	r3, r3, #2
 800166c:	2b00      	cmp	r3, #0
 800166e:	d00b      	beq.n	8001688 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001674:	2204      	movs	r2, #4
 8001676:	409a      	lsls	r2, r3
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001680:	f043 0204 	orr.w	r2, r3, #4
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800168c:	2210      	movs	r2, #16
 800168e:	409a      	lsls	r2, r3
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	4013      	ands	r3, r2
 8001694:	2b00      	cmp	r3, #0
 8001696:	d043      	beq.n	8001720 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0308 	and.w	r3, r3, #8
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d03c      	beq.n	8001720 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016aa:	2210      	movs	r2, #16
 80016ac:	409a      	lsls	r2, r3
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d018      	beq.n	80016f2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d108      	bne.n	80016e0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d024      	beq.n	8001720 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	4798      	blx	r3
 80016de:	e01f      	b.n	8001720 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d01b      	beq.n	8001720 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	4798      	blx	r3
 80016f0:	e016      	b.n	8001720 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d107      	bne.n	8001710 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f022 0208 	bic.w	r2, r2, #8
 800170e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001714:	2b00      	cmp	r3, #0
 8001716:	d003      	beq.n	8001720 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001724:	2220      	movs	r2, #32
 8001726:	409a      	lsls	r2, r3
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	4013      	ands	r3, r2
 800172c:	2b00      	cmp	r3, #0
 800172e:	f000 808e 	beq.w	800184e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0310 	and.w	r3, r3, #16
 800173c:	2b00      	cmp	r3, #0
 800173e:	f000 8086 	beq.w	800184e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001746:	2220      	movs	r2, #32
 8001748:	409a      	lsls	r2, r3
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001754:	b2db      	uxtb	r3, r3
 8001756:	2b05      	cmp	r3, #5
 8001758:	d136      	bne.n	80017c8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f022 0216 	bic.w	r2, r2, #22
 8001768:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	695a      	ldr	r2, [r3, #20]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001778:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177e:	2b00      	cmp	r3, #0
 8001780:	d103      	bne.n	800178a <HAL_DMA_IRQHandler+0x1da>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001786:	2b00      	cmp	r3, #0
 8001788:	d007      	beq.n	800179a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f022 0208 	bic.w	r2, r2, #8
 8001798:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800179e:	223f      	movs	r2, #63	; 0x3f
 80017a0:	409a      	lsls	r2, r3
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2200      	movs	r2, #0
 80017aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2201      	movs	r2, #1
 80017b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d07d      	beq.n	80018ba <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	4798      	blx	r3
        }
        return;
 80017c6:	e078      	b.n	80018ba <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d01c      	beq.n	8001810 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d108      	bne.n	80017f6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d030      	beq.n	800184e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	4798      	blx	r3
 80017f4:	e02b      	b.n	800184e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d027      	beq.n	800184e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	4798      	blx	r3
 8001806:	e022      	b.n	800184e <HAL_DMA_IRQHandler+0x29e>
 8001808:	20000000 	.word	0x20000000
 800180c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800181a:	2b00      	cmp	r3, #0
 800181c:	d10f      	bne.n	800183e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f022 0210 	bic.w	r2, r2, #16
 800182c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2200      	movs	r2, #0
 8001832:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2201      	movs	r2, #1
 800183a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001842:	2b00      	cmp	r3, #0
 8001844:	d003      	beq.n	800184e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001852:	2b00      	cmp	r3, #0
 8001854:	d032      	beq.n	80018bc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	2b00      	cmp	r3, #0
 8001860:	d022      	beq.n	80018a8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2205      	movs	r2, #5
 8001866:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f022 0201 	bic.w	r2, r2, #1
 8001878:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	3301      	adds	r3, #1
 800187e:	60bb      	str	r3, [r7, #8]
 8001880:	697a      	ldr	r2, [r7, #20]
 8001882:	429a      	cmp	r2, r3
 8001884:	d307      	bcc.n	8001896 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0301 	and.w	r3, r3, #1
 8001890:	2b00      	cmp	r3, #0
 8001892:	d1f2      	bne.n	800187a <HAL_DMA_IRQHandler+0x2ca>
 8001894:	e000      	b.n	8001898 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001896:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2200      	movs	r2, #0
 800189c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2201      	movs	r2, #1
 80018a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d005      	beq.n	80018bc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	4798      	blx	r3
 80018b8:	e000      	b.n	80018bc <HAL_DMA_IRQHandler+0x30c>
        return;
 80018ba:	bf00      	nop
    }
  }
}
 80018bc:	3718      	adds	r7, #24
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop

080018c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	3b10      	subs	r3, #16
 80018d4:	4a13      	ldr	r2, [pc, #76]	; (8001924 <DMA_CalcBaseAndBitshift+0x60>)
 80018d6:	fba2 2303 	umull	r2, r3, r2, r3
 80018da:	091b      	lsrs	r3, r3, #4
 80018dc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80018de:	4a12      	ldr	r2, [pc, #72]	; (8001928 <DMA_CalcBaseAndBitshift+0x64>)
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	4413      	add	r3, r2
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	461a      	mov	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2b03      	cmp	r3, #3
 80018f0:	d909      	bls.n	8001906 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80018fa:	f023 0303 	bic.w	r3, r3, #3
 80018fe:	1d1a      	adds	r2, r3, #4
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	659a      	str	r2, [r3, #88]	; 0x58
 8001904:	e007      	b.n	8001916 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800190e:	f023 0303 	bic.w	r3, r3, #3
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800191a:	4618      	mov	r0, r3
 800191c:	3714      	adds	r7, #20
 800191e:	46bd      	mov	sp, r7
 8001920:	bc80      	pop	{r7}
 8001922:	4770      	bx	lr
 8001924:	aaaaaaab 	.word	0xaaaaaaab
 8001928:	0800de68 	.word	0x0800de68

0800192c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001934:	2300      	movs	r3, #0
 8001936:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800193c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	699b      	ldr	r3, [r3, #24]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d11f      	bne.n	8001986 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	2b03      	cmp	r3, #3
 800194a:	d855      	bhi.n	80019f8 <DMA_CheckFifoParam+0xcc>
 800194c:	a201      	add	r2, pc, #4	; (adr r2, 8001954 <DMA_CheckFifoParam+0x28>)
 800194e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001952:	bf00      	nop
 8001954:	08001965 	.word	0x08001965
 8001958:	08001977 	.word	0x08001977
 800195c:	08001965 	.word	0x08001965
 8001960:	080019f9 	.word	0x080019f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001968:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d045      	beq.n	80019fc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001974:	e042      	b.n	80019fc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800197a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800197e:	d13f      	bne.n	8001a00 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001984:	e03c      	b.n	8001a00 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	699b      	ldr	r3, [r3, #24]
 800198a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800198e:	d121      	bne.n	80019d4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	2b03      	cmp	r3, #3
 8001994:	d836      	bhi.n	8001a04 <DMA_CheckFifoParam+0xd8>
 8001996:	a201      	add	r2, pc, #4	; (adr r2, 800199c <DMA_CheckFifoParam+0x70>)
 8001998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800199c:	080019ad 	.word	0x080019ad
 80019a0:	080019b3 	.word	0x080019b3
 80019a4:	080019ad 	.word	0x080019ad
 80019a8:	080019c5 	.word	0x080019c5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	73fb      	strb	r3, [r7, #15]
      break;
 80019b0:	e02f      	b.n	8001a12 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d024      	beq.n	8001a08 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019c2:	e021      	b.n	8001a08 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80019cc:	d11e      	bne.n	8001a0c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80019d2:	e01b      	b.n	8001a0c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d902      	bls.n	80019e0 <DMA_CheckFifoParam+0xb4>
 80019da:	2b03      	cmp	r3, #3
 80019dc:	d003      	beq.n	80019e6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80019de:	e018      	b.n	8001a12 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	73fb      	strb	r3, [r7, #15]
      break;
 80019e4:	e015      	b.n	8001a12 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d00e      	beq.n	8001a10 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	73fb      	strb	r3, [r7, #15]
      break;
 80019f6:	e00b      	b.n	8001a10 <DMA_CheckFifoParam+0xe4>
      break;
 80019f8:	bf00      	nop
 80019fa:	e00a      	b.n	8001a12 <DMA_CheckFifoParam+0xe6>
      break;
 80019fc:	bf00      	nop
 80019fe:	e008      	b.n	8001a12 <DMA_CheckFifoParam+0xe6>
      break;
 8001a00:	bf00      	nop
 8001a02:	e006      	b.n	8001a12 <DMA_CheckFifoParam+0xe6>
      break;
 8001a04:	bf00      	nop
 8001a06:	e004      	b.n	8001a12 <DMA_CheckFifoParam+0xe6>
      break;
 8001a08:	bf00      	nop
 8001a0a:	e002      	b.n	8001a12 <DMA_CheckFifoParam+0xe6>
      break;   
 8001a0c:	bf00      	nop
 8001a0e:	e000      	b.n	8001a12 <DMA_CheckFifoParam+0xe6>
      break;
 8001a10:	bf00      	nop
    }
  } 
  
  return status; 
 8001a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3714      	adds	r7, #20
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bc80      	pop	{r7}
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop

08001a20 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b088      	sub	sp, #32
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	61fb      	str	r3, [r7, #28]
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8001a30:	4ba3      	ldr	r3, [pc, #652]	; (8001cc0 <HAL_ETH_Init+0x2a0>)
 8001a32:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8001a34:	2300      	movs	r3, #0
 8001a36:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	613b      	str	r3, [r7, #16]

  /* Check the ETH peripheral state */
  if (heth == NULL)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d101      	bne.n	8001a46 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e175      	b.n	8001d32 <HAL_ETH_Init+0x312>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));

  if (heth->State == HAL_ETH_STATE_RESET)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d106      	bne.n	8001a60 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f7ff f83e 	bl	8000adc <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a60:	2300      	movs	r3, #0
 8001a62:	60bb      	str	r3, [r7, #8]
 8001a64:	4b97      	ldr	r3, [pc, #604]	; (8001cc4 <HAL_ETH_Init+0x2a4>)
 8001a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a68:	4a96      	ldr	r2, [pc, #600]	; (8001cc4 <HAL_ETH_Init+0x2a4>)
 8001a6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a6e:	6453      	str	r3, [r2, #68]	; 0x44
 8001a70:	4b94      	ldr	r3, [pc, #592]	; (8001cc4 <HAL_ETH_Init+0x2a4>)
 8001a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a78:	60bb      	str	r3, [r7, #8]
 8001a7a:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001a7c:	4b92      	ldr	r3, [pc, #584]	; (8001cc8 <HAL_ETH_Init+0x2a8>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	4a91      	ldr	r2, [pc, #580]	; (8001cc8 <HAL_ETH_Init+0x2a8>)
 8001a82:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001a86:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001a88:	4b8f      	ldr	r3, [pc, #572]	; (8001cc8 <HAL_ETH_Init+0x2a8>)
 8001a8a:	685a      	ldr	r2, [r3, #4]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6a1b      	ldr	r3, [r3, #32]
 8001a90:	498d      	ldr	r1, [pc, #564]	; (8001cc8 <HAL_ETH_Init+0x2a8>)
 8001a92:	4313      	orrs	r3, r2
 8001a94:	604b      	str	r3, [r1, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f042 0201 	orr.w	r2, r2, #1
 8001aa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001aac:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001aae:	f7ff fb75 	bl	800119c <HAL_GetTick>
 8001ab2:	6178      	str	r0, [r7, #20]

  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001ab4:	e011      	b.n	8001ada <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_SWRESET)
 8001ab6:	f7ff fb71 	bl	800119c <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001ac4:	d909      	bls.n	8001ada <HAL_ETH_Init+0xba>
    {
      heth->State = HAL_ETH_STATE_TIMEOUT;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2203      	movs	r2, #3
 8001aca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e12b      	b.n	8001d32 <HAL_ETH_Init+0x312>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0301 	and.w	r3, r3, #1
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d1e4      	bne.n	8001ab6 <HAL_ETH_Init+0x96>
    }
  }

  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	691b      	ldr	r3, [r3, #16]
 8001af2:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	f023 031c 	bic.w	r3, r3, #28
 8001afa:	61fb      	str	r3, [r7, #28]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001afc:	f002 fb74 	bl	80041e8 <HAL_RCC_GetHCLKFreq>
 8001b00:	61b8      	str	r0, [r7, #24]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	4a71      	ldr	r2, [pc, #452]	; (8001ccc <HAL_ETH_Init+0x2ac>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d908      	bls.n	8001b1c <HAL_ETH_Init+0xfc>
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	4a70      	ldr	r2, [pc, #448]	; (8001cd0 <HAL_ETH_Init+0x2b0>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d804      	bhi.n	8001b1c <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	f043 0308 	orr.w	r3, r3, #8
 8001b18:	61fb      	str	r3, [r7, #28]
 8001b1a:	e01a      	b.n	8001b52 <HAL_ETH_Init+0x132>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	4a6c      	ldr	r2, [pc, #432]	; (8001cd0 <HAL_ETH_Init+0x2b0>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d908      	bls.n	8001b36 <HAL_ETH_Init+0x116>
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	4a6b      	ldr	r2, [pc, #428]	; (8001cd4 <HAL_ETH_Init+0x2b4>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d804      	bhi.n	8001b36 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	f043 030c 	orr.w	r3, r3, #12
 8001b32:	61fb      	str	r3, [r7, #28]
 8001b34:	e00d      	b.n	8001b52 <HAL_ETH_Init+0x132>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	4a66      	ldr	r2, [pc, #408]	; (8001cd4 <HAL_ETH_Init+0x2b4>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d903      	bls.n	8001b46 <HAL_ETH_Init+0x126>
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	4a65      	ldr	r2, [pc, #404]	; (8001cd8 <HAL_ETH_Init+0x2b8>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d904      	bls.n	8001b50 <HAL_ETH_Init+0x130>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else /* ((hclk >= 100000000)&&(hclk < 120000000)) */
  {
    /* CSR Clock Range between 100-120 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	f043 0304 	orr.w	r3, r3, #4
 8001b4c:	61fb      	str	r3, [r7, #28]
 8001b4e:	e000      	b.n	8001b52 <HAL_ETH_Init+0x132>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001b50:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	69fa      	ldr	r2, [r7, #28]
 8001b58:	611a      	str	r2, [r3, #16]

  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001b5a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001b5e:	2100      	movs	r1, #0
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f000 f953 	bl	8001e0c <HAL_ETH_WritePHYRegister>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d00b      	beq.n	8001b84 <HAL_ETH_Init+0x164>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	613b      	str	r3, [r7, #16]

    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001b70:	6939      	ldr	r1, [r7, #16]
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f000 f9b0 	bl	8001ed8 <ETH_MACDMAConfig>

    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e0d6      	b.n	8001d32 <HAL_ETH_Init+0x312>
  }

  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001b84:	20ff      	movs	r0, #255	; 0xff
 8001b86:	f7ff fb13 	bl	80011b0 <HAL_Delay>

  if ((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	f000 80a4 	beq.w	8001cdc <HAL_ETH_Init+0x2bc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001b94:	f7ff fb02 	bl	800119c <HAL_GetTick>
 8001b98:	6178      	str	r0, [r7, #20]

    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001b9a:	f107 030c 	add.w	r3, r7, #12
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	2101      	movs	r1, #1
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f000 f8ca 	bl	8001d3c <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_LINKED_STATE)
 8001ba8:	f7ff faf8 	bl	800119c <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d90f      	bls.n	8001bda <HAL_ETH_Init+0x1ba>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001bbe:	6939      	ldr	r1, [r7, #16]
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f000 f989 	bl	8001ed8 <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2201      	movs	r2, #1
 8001bca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e0ab      	b.n	8001d32 <HAL_ETH_Init+0x312>
      }
    }
    while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	f003 0304 	and.w	r3, r3, #4
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d0da      	beq.n	8001b9a <HAL_ETH_Init+0x17a>


    /* Enable Auto-Negotiation */
    if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001be4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001be8:	2100      	movs	r1, #0
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f000 f90e 	bl	8001e0c <HAL_ETH_WritePHYRegister>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d00b      	beq.n	8001c0e <HAL_ETH_Init+0x1ee>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001bfa:	6939      	ldr	r1, [r7, #16]
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f000 f96b 	bl	8001ed8 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2201      	movs	r2, #1
 8001c06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e091      	b.n	8001d32 <HAL_ETH_Init+0x312>
    }

    /* Get tick */
    tickstart = HAL_GetTick();
 8001c0e:	f7ff fac5 	bl	800119c <HAL_GetTick>
 8001c12:	6178      	str	r0, [r7, #20]

    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001c14:	f107 030c 	add.w	r3, r7, #12
 8001c18:	461a      	mov	r2, r3
 8001c1a:	2101      	movs	r1, #1
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f000 f88d 	bl	8001d3c <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001c22:	f7ff fabb 	bl	800119c <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d90f      	bls.n	8001c54 <HAL_ETH_Init+0x234>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001c38:	6939      	ldr	r1, [r7, #16]
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f000 f94c 	bl	8001ed8 <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e06e      	b.n	8001d32 <HAL_ETH_Init+0x312>
      }

    }
    while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	f003 0320 	and.w	r3, r3, #32
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d0da      	beq.n	8001c14 <HAL_ETH_Init+0x1f4>

    /* Read the result of the auto-negotiation */
    if ((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001c5e:	f107 030c 	add.w	r3, r7, #12
 8001c62:	461a      	mov	r2, r3
 8001c64:	211f      	movs	r1, #31
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f000 f868 	bl	8001d3c <HAL_ETH_ReadPHYRegister>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d00b      	beq.n	8001c8a <HAL_ETH_Init+0x26a>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001c76:	6939      	ldr	r1, [r7, #16]
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f000 f92d 	bl	8001ed8 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2201      	movs	r2, #1
 8001c82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e053      	b.n	8001d32 <HAL_ETH_Init+0x312>
    }

    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if ((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	f003 0310 	and.w	r3, r3, #16
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d004      	beq.n	8001c9e <HAL_ETH_Init+0x27e>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c9a:	60da      	str	r2, [r3, #12]
 8001c9c:	e002      	b.n	8001ca4 <HAL_ETH_Init+0x284>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if ((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	f003 0304 	and.w	r3, r3, #4
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d003      	beq.n	8001cb6 <HAL_ETH_Init+0x296>
    {
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	609a      	str	r2, [r3, #8]
 8001cb4:	e034      	b.n	8001d20 <HAL_ETH_Init+0x300>
    }
    else
    {
      /* Set Ethernet speed to 100M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_100M;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001cbc:	609a      	str	r2, [r3, #8]
 8001cbe:	e02f      	b.n	8001d20 <HAL_ETH_Init+0x300>
 8001cc0:	03938700 	.word	0x03938700
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	40013800 	.word	0x40013800
 8001ccc:	01312cff 	.word	0x01312cff
 8001cd0:	02160ebf 	.word	0x02160ebf
 8001cd4:	039386ff 	.word	0x039386ff
 8001cd8:	05f5e0ff 	.word	0x05f5e0ff
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

    /* Set MAC Speed and Duplex Mode */
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	08db      	lsrs	r3, r3, #3
 8001ce2:	b29a      	uxth	r2, r3
                                                 (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	085b      	lsrs	r3, r3, #1
 8001cea:	b29b      	uxth	r3, r3
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001cec:	4313      	orrs	r3, r2
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f000 f889 	bl	8001e0c <HAL_ETH_WritePHYRegister>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d00b      	beq.n	8001d18 <HAL_ETH_Init+0x2f8>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001d04:	6939      	ldr	r1, [r7, #16]
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f000 f8e6 	bl	8001ed8 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e00c      	b.n	8001d32 <HAL_ETH_Init+0x312>
    }

    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001d18:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001d1c:	f7ff fa48 	bl	80011b0 <HAL_Delay>
  }

  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001d20:	6939      	ldr	r1, [r7, #16]
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f000 f8d8 	bl	8001ed8 <ETH_MACDMAConfig>

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3720      	adds	r7, #32
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop

08001d3c <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param  RegValue PHY register value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b086      	sub	sp, #24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	460b      	mov	r3, r1
 8001d46:	607a      	str	r2, [r7, #4]
 8001d48:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_RD)
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	2b82      	cmp	r3, #130	; 0x82
 8001d5c:	d101      	bne.n	8001d62 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001d5e:	2302      	movs	r3, #2
 8001d60:	e050      	b.n	8001e04 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2282      	movs	r2, #130	; 0x82
 8001d66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	691b      	ldr	r3, [r3, #16]
 8001d70:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	f003 031c 	and.w	r3, r3, #28
 8001d78:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	8a1b      	ldrh	r3, [r3, #16]
 8001d7e:	02db      	lsls	r3, r3, #11
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	697a      	ldr	r2, [r7, #20]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001d88:	897b      	ldrh	r3, [r7, #10]
 8001d8a:	019b      	lsls	r3, r3, #6
 8001d8c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001d90:	697a      	ldr	r2, [r7, #20]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	f023 0302 	bic.w	r3, r3, #2
 8001d9c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	f043 0301 	orr.w	r3, r3, #1
 8001da4:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	697a      	ldr	r2, [r7, #20]
 8001dac:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001dae:	f7ff f9f5 	bl	800119c <HAL_GetTick>
 8001db2:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001db4:	e015      	b.n	8001de2 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001db6:	f7ff f9f1 	bl	800119c <HAL_GetTick>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dc4:	d309      	bcc.n	8001dda <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State = HAL_ETH_STATE_READY;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e014      	b.n	8001e04 <HAL_ETH_ReadPHYRegister+0xc8>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	691b      	ldr	r3, [r3, #16]
 8001de0:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	f003 0301 	and.w	r3, r3, #1
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d1e4      	bne.n	8001db6 <HAL_ETH_ReadPHYRegister+0x7a>
  }

  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	695b      	ldr	r3, [r3, #20]
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	461a      	mov	r2, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	601a      	str	r2, [r3, #0]

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8001e02:	2300      	movs	r3, #0
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3718      	adds	r7, #24
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b086      	sub	sp, #24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	460b      	mov	r3, r1
 8001e16:	607a      	str	r2, [r7, #4]
 8001e18:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_WR)
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	2b42      	cmp	r3, #66	; 0x42
 8001e2c:	d101      	bne.n	8001e32 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001e2e:	2302      	movs	r3, #2
 8001e30:	e04e      	b.n	8001ed0 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2242      	movs	r2, #66	; 0x42
 8001e36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	691b      	ldr	r3, [r3, #16]
 8001e40:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	f003 031c 	and.w	r3, r3, #28
 8001e48:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	8a1b      	ldrh	r3, [r3, #16]
 8001e4e:	02db      	lsls	r3, r3, #11
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	697a      	ldr	r2, [r7, #20]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001e58:	897b      	ldrh	r3, [r7, #10]
 8001e5a:	019b      	lsls	r3, r3, #6
 8001e5c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001e60:	697a      	ldr	r2, [r7, #20]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	f043 0302 	orr.w	r3, r3, #2
 8001e6c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	f043 0301 	orr.w	r3, r3, #1
 8001e74:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	b29a      	uxth	r2, r3
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	697a      	ldr	r2, [r7, #20]
 8001e86:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e88:	f7ff f988 	bl	800119c <HAL_GetTick>
 8001e8c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e8e:	e015      	b.n	8001ebc <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001e90:	f7ff f984 	bl	800119c <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e9e:	d309      	bcc.n	8001eb4 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State = HAL_ETH_STATE_READY;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e00d      	b.n	8001ed0 <HAL_ETH_WritePHYRegister+0xc4>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	691b      	ldr	r3, [r3, #16]
 8001eba:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d1e4      	bne.n	8001e90 <HAL_ETH_WritePHYRegister+0x84>
  }

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2201      	movs	r2, #1
 8001eca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8001ece:	2300      	movs	r3, #0
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3718      	adds	r7, #24
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b0b0      	sub	sp, #192	; 0xc0
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d007      	beq.n	8001efe <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ef4:	60da      	str	r2, [r3, #12]

    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001efc:	609a      	str	r2, [r3, #8]
  }

  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001efe:	2300      	movs	r3, #0
 8001f00:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001f02:	2300      	movs	r3, #0
 8001f04:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001f06:	2300      	movs	r3, #0
 8001f08:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001f12:	2300      	movs	r3, #0
 8001f14:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	69db      	ldr	r3, [r3, #28]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d103      	bne.n	8001f26 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001f1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f22:	663b      	str	r3, [r7, #96]	; 0x60
 8001f24:	e001      	b.n	8001f2a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001f26:	2300      	movs	r3, #0
 8001f28:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001f2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f2e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001f30:	2300      	movs	r3, #0
 8001f32:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001f34:	2300      	movs	r3, #0
 8001f36:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001f40:	2300      	movs	r3, #0
 8001f42:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001f44:	2340      	movs	r3, #64	; 0x40
 8001f46:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001f54:	2300      	movs	r3, #0
 8001f56:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001f60:	2300      	movs	r3, #0
 8001f62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8001f66:	2300      	movs	r3, #0
 8001f68:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8001f72:	2300      	movs	r3, #0
 8001f74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001f78:	2380      	movs	r3, #128	; 0x80
 8001f7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001f84:	2300      	movs	r3, #0
 8001f86:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001f90:	2300      	movs	r3, #0
 8001f92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001f96:	2300      	movs	r3, #0
 8001f98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001fac:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fb0:	4bac      	ldr	r3, [pc, #688]	; (8002264 <ETH_MACDMAConfig+0x38c>)
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8001fb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
                        macinit.Jabber |
 8001fba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8001fbc:	431a      	orrs	r2, r3
                        macinit.InterFrameGap |
 8001fbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                        macinit.Jabber |
 8001fc0:	431a      	orrs	r2, r3
                        macinit.CarrierSense |
 8001fc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                        macinit.InterFrameGap |
 8001fc4:	431a      	orrs	r2, r3
                        (heth->Init).Speed |
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	689b      	ldr	r3, [r3, #8]
                        macinit.CarrierSense |
 8001fca:	431a      	orrs	r2, r3
                        macinit.ReceiveOwn |
 8001fcc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                        (heth->Init).Speed |
 8001fce:	431a      	orrs	r2, r3
                        macinit.LoopbackMode |
 8001fd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                        macinit.ReceiveOwn |
 8001fd2:	431a      	orrs	r2, r3
                        (heth->Init).DuplexMode |
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	68db      	ldr	r3, [r3, #12]
                        macinit.LoopbackMode |
 8001fd8:	431a      	orrs	r2, r3
                        macinit.ChecksumOffload |
 8001fda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                        (heth->Init).DuplexMode |
 8001fdc:	431a      	orrs	r2, r3
                        macinit.RetryTransmission |
 8001fde:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                        macinit.ChecksumOffload |
 8001fe0:	431a      	orrs	r2, r3
                        macinit.AutomaticPadCRCStrip |
 8001fe2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                        macinit.RetryTransmission |
 8001fe4:	431a      	orrs	r2, r3
                        macinit.BackOffLimit |
 8001fe6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                        macinit.AutomaticPadCRCStrip |
 8001fe8:	431a      	orrs	r2, r3
                        macinit.DeferralCheck);
 8001fea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                        macinit.BackOffLimit |
 8001fec:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8001fee:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002000:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800200c:	2001      	movs	r0, #1
 800200e:	f7ff f8cf 	bl	80011b0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800201a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 800201c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800201e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8002020:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002022:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002024:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception |
 8002026:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800202a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 800202c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception |
 8002030:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002032:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002036:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002038:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 800203c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002040:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002048:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 800204a:	605a      	str	r2, [r3, #4]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFFR;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002056:	2001      	movs	r0, #1
 8002058:	f7ff f8aa 	bl	80011b0 <HAL_Delay>
  (heth->Instance)->MACFFR = tmpreg1;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002064:	605a      	str	r2, [r3, #4]

  /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
  /* Write to ETHERNET MACHTHR */
  (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800206e:	609a      	str	r2, [r3, #8]

  /* Write to ETHERNET MACHTLR */
  (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002078:	60da      	str	r2, [r3, #12]
  /*----------------------- ETHERNET MACFCR Configuration -------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002084:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002088:	f64f 7341 	movw	r3, #65345	; 0xff41
 800208c:	4013      	ands	r3, r2
 800208e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
  /* Set the PLT bit according to ETH PauseLowThreshold value */
  /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
  /* Set the RFE bit according to ETH ReceiveFlowControl value */
  /* Set the TFE bit according to ETH TransmitFlowControl value */
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8002092:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002096:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002098:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 800209c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800209e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80020a2:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect |
 80020a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80020a8:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80020aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect |
 80020ae:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl);
 80020b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80020b4:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 80020b6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020ba:	4313      	orrs	r3, r2
 80020bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020c8:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80020d4:	2001      	movs	r0, #1
 80020d6:	f7ff f86b 	bl	80011b0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020e2:	619a      	str	r2, [r3, #24]

  /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
  /* Set the ETV bit according to ETH VLANTagComparison value */
  /* Set the VL bit according to ETH VLANTagIdentifier value */
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 80020e4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                           macinit.VLANTagIdentifier);
 80020e8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	430a      	orrs	r2, r1
 80020f2:	61da      	str	r2, [r3, #28]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACVLANTR;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	69db      	ldr	r3, [r3, #28]
 80020fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80020fe:	2001      	movs	r0, #1
 8002100:	f7ff f856 	bl	80011b0 <HAL_Delay>
  (heth->Instance)->MACVLANTR = tmpreg1;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800210c:	61da      	str	r2, [r3, #28]

  /* Ethernet DMA default initialization ************************************/
  dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800210e:	2300      	movs	r3, #0
 8002110:	60bb      	str	r3, [r7, #8]
  dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002112:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002116:	60fb      	str	r3, [r7, #12]
  dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002118:	2300      	movs	r3, #0
 800211a:	613b      	str	r3, [r7, #16]
  dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;
 800211c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002120:	617b      	str	r3, [r7, #20]
  dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002122:	2300      	movs	r3, #0
 8002124:	61bb      	str	r3, [r7, #24]
  dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002126:	2300      	movs	r3, #0
 8002128:	61fb      	str	r3, [r7, #28]
  dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800212a:	2300      	movs	r3, #0
 800212c:	623b      	str	r3, [r7, #32]
  dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800212e:	2300      	movs	r3, #0
 8002130:	627b      	str	r3, [r7, #36]	; 0x24
  dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002132:	2304      	movs	r3, #4
 8002134:	62bb      	str	r3, [r7, #40]	; 0x28
  dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002136:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800213a:	62fb      	str	r3, [r7, #44]	; 0x2c
  dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 800213c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002140:	633b      	str	r3, [r7, #48]	; 0x30
  dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002142:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002146:	637b      	str	r3, [r7, #52]	; 0x34
  dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002148:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800214c:	63bb      	str	r3, [r7, #56]	; 0x38
  dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800214e:	2380      	movs	r3, #128	; 0x80
 8002150:	63fb      	str	r3, [r7, #60]	; 0x3c
  dmainit.DescriptorSkipLength = 0x0U;
 8002152:	2300      	movs	r3, #0
 8002154:	643b      	str	r3, [r7, #64]	; 0x40
  dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002156:	2300      	movs	r3, #0
 8002158:	647b      	str	r3, [r7, #68]	; 0x44

  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002162:	3318      	adds	r3, #24
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800216a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800216e:	4b3e      	ldr	r3, [pc, #248]	; (8002268 <ETH_MACDMAConfig+0x390>)
 8002170:	4013      	ands	r3, r2
 8002172:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the TTC bit according to ETH TransmitThresholdControl value */
  /* Set the FEF bit according to ETH ForwardErrorFrames value */
  /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
  /* Set the RTC bit according to ETH ReceiveThresholdControl value */
  /* Set the OSF bit according to ETH SecondFrameOperate value */
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 8002176:	68ba      	ldr	r2, [r7, #8]
                        dmainit.ReceiveStoreForward |
 8002178:	68fb      	ldr	r3, [r7, #12]
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 800217a:	431a      	orrs	r2, r3
                        dmainit.FlushReceivedFrame |
 800217c:	693b      	ldr	r3, [r7, #16]
                        dmainit.ReceiveStoreForward |
 800217e:	431a      	orrs	r2, r3
                        dmainit.TransmitStoreForward |
 8002180:	697b      	ldr	r3, [r7, #20]
                        dmainit.FlushReceivedFrame |
 8002182:	431a      	orrs	r2, r3
                        dmainit.TransmitThresholdControl |
 8002184:	69bb      	ldr	r3, [r7, #24]
                        dmainit.TransmitStoreForward |
 8002186:	431a      	orrs	r2, r3
                        dmainit.ForwardErrorFrames |
 8002188:	69fb      	ldr	r3, [r7, #28]
                        dmainit.TransmitThresholdControl |
 800218a:	431a      	orrs	r2, r3
                        dmainit.ForwardUndersizedGoodFrames |
 800218c:	6a3b      	ldr	r3, [r7, #32]
                        dmainit.ForwardErrorFrames |
 800218e:	431a      	orrs	r2, r3
                        dmainit.ReceiveThresholdControl |
 8002190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                        dmainit.ForwardUndersizedGoodFrames |
 8002192:	431a      	orrs	r2, r3
                        dmainit.SecondFrameOperate);
 8002194:	6abb      	ldr	r3, [r7, #40]	; 0x28
                        dmainit.ReceiveThresholdControl |
 8002196:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 8002198:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800219c:	4313      	orrs	r3, r2
 800219e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021aa:	3318      	adds	r3, #24
 80021ac:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021b0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021ba:	3318      	adds	r3, #24
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80021c2:	2001      	movs	r0, #1
 80021c4:	f7fe fff4 	bl	80011b0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021d0:	3318      	adds	r3, #24
 80021d2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021d6:	601a      	str	r2, [r3, #0]
  /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
  /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
  /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
  /* Set the DSL bit according to ETH DesciptorSkipLength value */
  /* Set the PR and DA bits according to ETH DMAArbitration value */
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 80021d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                        dmainit.FixedBurst |
 80021da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 80021dc:	431a      	orrs	r2, r3
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80021de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                        dmainit.FixedBurst |
 80021e0:	431a      	orrs	r2, r3
                                        dmainit.TxDMABurstLength |
 80021e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80021e4:	431a      	orrs	r2, r3
                                        dmainit.EnhancedDescriptorFormat |
 80021e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                        dmainit.TxDMABurstLength |
 80021e8:	431a      	orrs	r2, r3
                                        (dmainit.DescriptorSkipLength << 2U) |
 80021ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021ec:	009b      	lsls	r3, r3, #2
                                        dmainit.EnhancedDescriptorFormat |
 80021ee:	431a      	orrs	r2, r3
                                        dmainit.DMAArbitration |
 80021f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                        (dmainit.DescriptorSkipLength << 2U) |
 80021f2:	431a      	orrs	r2, r3
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80021fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002200:	601a      	str	r2, [r3, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002210:	2001      	movs	r0, #1
 8002212:	f7fe ffcd 	bl	80011b0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800221e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002222:	601a      	str	r2, [r3, #0]

  if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	699b      	ldr	r3, [r3, #24]
 8002228:	2b01      	cmp	r3, #1
 800222a:	d10f      	bne.n	800224c <ETH_MACDMAConfig+0x374>
  {
    /* Enable the Ethernet Rx Interrupt */
    __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002234:	331c      	adds	r3, #28
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002240:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002244:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002248:	331c      	adds	r3, #28
 800224a:	601a      	str	r2, [r3, #0]
  }

  /* Initialize MAC address in ethernet MAC */
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	695b      	ldr	r3, [r3, #20]
 8002250:	461a      	mov	r2, r3
 8002252:	2100      	movs	r1, #0
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f000 f809 	bl	800226c <ETH_MACAddressConfig>
}
 800225a:	bf00      	nop
 800225c:	37c0      	adds	r7, #192	; 0xc0
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	ff20810f 	.word	0xff20810f
 8002268:	f8de3f23 	.word	0xf8de3f23

0800226c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800226c:	b480      	push	{r7}
 800226e:	b087      	sub	sp, #28
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	3305      	adds	r3, #5
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	021b      	lsls	r3, r3, #8
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	3204      	adds	r2, #4
 8002284:	7812      	ldrb	r2, [r2, #0]
 8002286:	4313      	orrs	r3, r2
 8002288:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800228a:	68ba      	ldr	r2, [r7, #8]
 800228c:	4b10      	ldr	r3, [pc, #64]	; (80022d0 <ETH_MACAddressConfig+0x64>)
 800228e:	4413      	add	r3, r2
 8002290:	461a      	mov	r2, r3
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	3303      	adds	r3, #3
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	061a      	lsls	r2, r3, #24
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	3302      	adds	r3, #2
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	041b      	lsls	r3, r3, #16
 80022a6:	431a      	orrs	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	3301      	adds	r3, #1
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	021b      	lsls	r3, r3, #8
 80022b0:	4313      	orrs	r3, r2
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	7812      	ldrb	r2, [r2, #0]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80022ba:	68ba      	ldr	r2, [r7, #8]
 80022bc:	4b05      	ldr	r3, [pc, #20]	; (80022d4 <ETH_MACAddressConfig+0x68>)
 80022be:	4413      	add	r3, r2
 80022c0:	461a      	mov	r2, r3
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	6013      	str	r3, [r2, #0]
}
 80022c6:	bf00      	nop
 80022c8:	371c      	adds	r7, #28
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bc80      	pop	{r7}
 80022ce:	4770      	bx	lr
 80022d0:	40028040 	.word	0x40028040
 80022d4:	40028044 	.word	0x40028044

080022d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022d8:	b480      	push	{r7}
 80022da:	b087      	sub	sp, #28
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022e2:	2300      	movs	r3, #0
 80022e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022e6:	e16f      	b.n	80025c8 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	2101      	movs	r1, #1
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	fa01 f303 	lsl.w	r3, r1, r3
 80022f4:	4013      	ands	r3, r2
 80022f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	f000 8161 	beq.w	80025c2 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d00b      	beq.n	8002320 <HAL_GPIO_Init+0x48>
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	2b02      	cmp	r3, #2
 800230e:	d007      	beq.n	8002320 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002314:	2b11      	cmp	r3, #17
 8002316:	d003      	beq.n	8002320 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	2b12      	cmp	r3, #18
 800231e:	d130      	bne.n	8002382 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	2203      	movs	r2, #3
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	43db      	mvns	r3, r3
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	4013      	ands	r3, r2
 8002336:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	68da      	ldr	r2, [r3, #12]
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	4313      	orrs	r3, r2
 8002348:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	693a      	ldr	r2, [r7, #16]
 800234e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002356:	2201      	movs	r2, #1
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	fa02 f303 	lsl.w	r3, r2, r3
 800235e:	43db      	mvns	r3, r3
 8002360:	693a      	ldr	r2, [r7, #16]
 8002362:	4013      	ands	r3, r2
 8002364:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	091b      	lsrs	r3, r3, #4
 800236c:	f003 0201 	and.w	r2, r3, #1
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	4313      	orrs	r3, r2
 800237a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	2203      	movs	r2, #3
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	43db      	mvns	r3, r3
 8002394:	693a      	ldr	r2, [r7, #16]
 8002396:	4013      	ands	r3, r2
 8002398:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	689a      	ldr	r2, [r3, #8]
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	fa02 f303 	lsl.w	r3, r2, r3
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	60da      	str	r2, [r3, #12]

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d003      	beq.n	80023c2 <HAL_GPIO_Init+0xea>
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	2b12      	cmp	r3, #18
 80023c0:	d123      	bne.n	800240a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	08da      	lsrs	r2, r3, #3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	3208      	adds	r2, #8
 80023ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	f003 0307 	and.w	r3, r3, #7
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	220f      	movs	r2, #15
 80023da:	fa02 f303 	lsl.w	r3, r2, r3
 80023de:	43db      	mvns	r3, r3
 80023e0:	693a      	ldr	r2, [r7, #16]
 80023e2:	4013      	ands	r3, r2
 80023e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	691a      	ldr	r2, [r3, #16]
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	f003 0307 	and.w	r3, r3, #7
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	fa02 f303 	lsl.w	r3, r2, r3
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	08da      	lsrs	r2, r3, #3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	3208      	adds	r2, #8
 8002404:	6939      	ldr	r1, [r7, #16]
 8002406:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	005b      	lsls	r3, r3, #1
 8002414:	2203      	movs	r2, #3
 8002416:	fa02 f303 	lsl.w	r3, r2, r3
 800241a:	43db      	mvns	r3, r3
 800241c:	693a      	ldr	r2, [r7, #16]
 800241e:	4013      	ands	r3, r2
 8002420:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f003 0203 	and.w	r2, r3, #3
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	fa02 f303 	lsl.w	r3, r2, r3
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	4313      	orrs	r3, r2
 8002436:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002446:	2b00      	cmp	r3, #0
 8002448:	f000 80bb 	beq.w	80025c2 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800244c:	2300      	movs	r3, #0
 800244e:	60bb      	str	r3, [r7, #8]
 8002450:	4b64      	ldr	r3, [pc, #400]	; (80025e4 <HAL_GPIO_Init+0x30c>)
 8002452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002454:	4a63      	ldr	r2, [pc, #396]	; (80025e4 <HAL_GPIO_Init+0x30c>)
 8002456:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800245a:	6453      	str	r3, [r2, #68]	; 0x44
 800245c:	4b61      	ldr	r3, [pc, #388]	; (80025e4 <HAL_GPIO_Init+0x30c>)
 800245e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002460:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002464:	60bb      	str	r3, [r7, #8]
 8002466:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002468:	4a5f      	ldr	r2, [pc, #380]	; (80025e8 <HAL_GPIO_Init+0x310>)
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	089b      	lsrs	r3, r3, #2
 800246e:	3302      	adds	r3, #2
 8002470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002474:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	f003 0303 	and.w	r3, r3, #3
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	220f      	movs	r2, #15
 8002480:	fa02 f303 	lsl.w	r3, r2, r3
 8002484:	43db      	mvns	r3, r3
 8002486:	693a      	ldr	r2, [r7, #16]
 8002488:	4013      	ands	r3, r2
 800248a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	4a57      	ldr	r2, [pc, #348]	; (80025ec <HAL_GPIO_Init+0x314>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d031      	beq.n	80024f8 <HAL_GPIO_Init+0x220>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4a56      	ldr	r2, [pc, #344]	; (80025f0 <HAL_GPIO_Init+0x318>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d02b      	beq.n	80024f4 <HAL_GPIO_Init+0x21c>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	4a55      	ldr	r2, [pc, #340]	; (80025f4 <HAL_GPIO_Init+0x31c>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d025      	beq.n	80024f0 <HAL_GPIO_Init+0x218>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	4a54      	ldr	r2, [pc, #336]	; (80025f8 <HAL_GPIO_Init+0x320>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d01f      	beq.n	80024ec <HAL_GPIO_Init+0x214>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	4a53      	ldr	r2, [pc, #332]	; (80025fc <HAL_GPIO_Init+0x324>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d019      	beq.n	80024e8 <HAL_GPIO_Init+0x210>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	4a52      	ldr	r2, [pc, #328]	; (8002600 <HAL_GPIO_Init+0x328>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d013      	beq.n	80024e4 <HAL_GPIO_Init+0x20c>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	4a51      	ldr	r2, [pc, #324]	; (8002604 <HAL_GPIO_Init+0x32c>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d00d      	beq.n	80024e0 <HAL_GPIO_Init+0x208>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4a50      	ldr	r2, [pc, #320]	; (8002608 <HAL_GPIO_Init+0x330>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d007      	beq.n	80024dc <HAL_GPIO_Init+0x204>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4a4f      	ldr	r2, [pc, #316]	; (800260c <HAL_GPIO_Init+0x334>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d101      	bne.n	80024d8 <HAL_GPIO_Init+0x200>
 80024d4:	2308      	movs	r3, #8
 80024d6:	e010      	b.n	80024fa <HAL_GPIO_Init+0x222>
 80024d8:	2309      	movs	r3, #9
 80024da:	e00e      	b.n	80024fa <HAL_GPIO_Init+0x222>
 80024dc:	2307      	movs	r3, #7
 80024de:	e00c      	b.n	80024fa <HAL_GPIO_Init+0x222>
 80024e0:	2306      	movs	r3, #6
 80024e2:	e00a      	b.n	80024fa <HAL_GPIO_Init+0x222>
 80024e4:	2305      	movs	r3, #5
 80024e6:	e008      	b.n	80024fa <HAL_GPIO_Init+0x222>
 80024e8:	2304      	movs	r3, #4
 80024ea:	e006      	b.n	80024fa <HAL_GPIO_Init+0x222>
 80024ec:	2303      	movs	r3, #3
 80024ee:	e004      	b.n	80024fa <HAL_GPIO_Init+0x222>
 80024f0:	2302      	movs	r3, #2
 80024f2:	e002      	b.n	80024fa <HAL_GPIO_Init+0x222>
 80024f4:	2301      	movs	r3, #1
 80024f6:	e000      	b.n	80024fa <HAL_GPIO_Init+0x222>
 80024f8:	2300      	movs	r3, #0
 80024fa:	697a      	ldr	r2, [r7, #20]
 80024fc:	f002 0203 	and.w	r2, r2, #3
 8002500:	0092      	lsls	r2, r2, #2
 8002502:	4093      	lsls	r3, r2
 8002504:	461a      	mov	r2, r3
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	4313      	orrs	r3, r2
 800250a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800250c:	4936      	ldr	r1, [pc, #216]	; (80025e8 <HAL_GPIO_Init+0x310>)
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	089b      	lsrs	r3, r3, #2
 8002512:	3302      	adds	r3, #2
 8002514:	693a      	ldr	r2, [r7, #16]
 8002516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800251a:	4b3d      	ldr	r3, [pc, #244]	; (8002610 <HAL_GPIO_Init+0x338>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	43db      	mvns	r3, r3
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	4013      	ands	r3, r2
 8002528:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d003      	beq.n	800253e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	4313      	orrs	r3, r2
 800253c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800253e:	4a34      	ldr	r2, [pc, #208]	; (8002610 <HAL_GPIO_Init+0x338>)
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002544:	4b32      	ldr	r3, [pc, #200]	; (8002610 <HAL_GPIO_Init+0x338>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	43db      	mvns	r3, r3
 800254e:	693a      	ldr	r2, [r7, #16]
 8002550:	4013      	ands	r3, r2
 8002552:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d003      	beq.n	8002568 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002560:	693a      	ldr	r2, [r7, #16]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	4313      	orrs	r3, r2
 8002566:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002568:	4a29      	ldr	r2, [pc, #164]	; (8002610 <HAL_GPIO_Init+0x338>)
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800256e:	4b28      	ldr	r3, [pc, #160]	; (8002610 <HAL_GPIO_Init+0x338>)
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	43db      	mvns	r3, r3
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	4013      	ands	r3, r2
 800257c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d003      	beq.n	8002592 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	4313      	orrs	r3, r2
 8002590:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002592:	4a1f      	ldr	r2, [pc, #124]	; (8002610 <HAL_GPIO_Init+0x338>)
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002598:	4b1d      	ldr	r3, [pc, #116]	; (8002610 <HAL_GPIO_Init+0x338>)
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	43db      	mvns	r3, r3
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	4013      	ands	r3, r2
 80025a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d003      	beq.n	80025bc <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 80025b4:	693a      	ldr	r2, [r7, #16]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80025bc:	4a14      	ldr	r2, [pc, #80]	; (8002610 <HAL_GPIO_Init+0x338>)
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	3301      	adds	r3, #1
 80025c6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	fa22 f303 	lsr.w	r3, r2, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f47f ae88 	bne.w	80022e8 <HAL_GPIO_Init+0x10>
  }
}
 80025d8:	bf00      	nop
 80025da:	371c      	adds	r7, #28
 80025dc:	46bd      	mov	sp, r7
 80025de:	bc80      	pop	{r7}
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	40023800 	.word	0x40023800
 80025e8:	40013800 	.word	0x40013800
 80025ec:	40020000 	.word	0x40020000
 80025f0:	40020400 	.word	0x40020400
 80025f4:	40020800 	.word	0x40020800
 80025f8:	40020c00 	.word	0x40020c00
 80025fc:	40021000 	.word	0x40021000
 8002600:	40021400 	.word	0x40021400
 8002604:	40021800 	.word	0x40021800
 8002608:	40021c00 	.word	0x40021c00
 800260c:	40022000 	.word	0x40022000
 8002610:	40013c00 	.word	0x40013c00

08002614 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002614:	b480      	push	{r7}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	460b      	mov	r3, r1
 800261e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	691a      	ldr	r2, [r3, #16]
 8002624:	887b      	ldrh	r3, [r7, #2]
 8002626:	4013      	ands	r3, r2
 8002628:	2b00      	cmp	r3, #0
 800262a:	d002      	beq.n	8002632 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800262c:	2301      	movs	r3, #1
 800262e:	73fb      	strb	r3, [r7, #15]
 8002630:	e001      	b.n	8002636 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002632:	2300      	movs	r3, #0
 8002634:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002636:	7bfb      	ldrb	r3, [r7, #15]
}
 8002638:	4618      	mov	r0, r3
 800263a:	3714      	adds	r7, #20
 800263c:	46bd      	mov	sp, r7
 800263e:	bc80      	pop	{r7}
 8002640:	4770      	bx	lr

08002642 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002642:	b480      	push	{r7}
 8002644:	b083      	sub	sp, #12
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
 800264a:	460b      	mov	r3, r1
 800264c:	807b      	strh	r3, [r7, #2]
 800264e:	4613      	mov	r3, r2
 8002650:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002652:	787b      	ldrb	r3, [r7, #1]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d003      	beq.n	8002660 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002658:	887a      	ldrh	r2, [r7, #2]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800265e:	e003      	b.n	8002668 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002660:	887b      	ldrh	r3, [r7, #2]
 8002662:	041a      	lsls	r2, r3, #16
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	619a      	str	r2, [r3, #24]
}
 8002668:	bf00      	nop
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	bc80      	pop	{r7}
 8002670:	4770      	bx	lr

08002672 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..I) to select the GPIO peripheral. 
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002672:	b480      	push	{r7}
 8002674:	b083      	sub	sp, #12
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
 800267a:	460b      	mov	r3, r1
 800267c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	695a      	ldr	r2, [r3, #20]
 8002682:	887b      	ldrh	r3, [r7, #2]
 8002684:	4013      	ands	r3, r2
 8002686:	2b00      	cmp	r3, #0
 8002688:	d004      	beq.n	8002694 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800268a:	887b      	ldrh	r3, [r7, #2]
 800268c:	041a      	lsls	r2, r3, #16
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8002692:	e002      	b.n	800269a <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002694:	887a      	ldrh	r2, [r7, #2]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	619a      	str	r2, [r3, #24]
}
 800269a:	bf00      	nop
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	bc80      	pop	{r7}
 80026a2:	4770      	bx	lr

080026a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	4603      	mov	r3, r0
 80026ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80026ae:	4b08      	ldr	r3, [pc, #32]	; (80026d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026b0:	695a      	ldr	r2, [r3, #20]
 80026b2:	88fb      	ldrh	r3, [r7, #6]
 80026b4:	4013      	ands	r3, r2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d006      	beq.n	80026c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80026ba:	4a05      	ldr	r2, [pc, #20]	; (80026d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026bc:	88fb      	ldrh	r3, [r7, #6]
 80026be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80026c0:	88fb      	ldrh	r3, [r7, #6]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7fd ff2e 	bl	8000524 <HAL_GPIO_EXTI_Callback>
  }
}
 80026c8:	bf00      	nop
 80026ca:	3708      	adds	r7, #8
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	40013c00 	.word	0x40013c00

080026d4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80026d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026d6:	b08f      	sub	sp, #60	; 0x3c
 80026d8:	af0a      	add	r7, sp, #40	; 0x28
 80026da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d101      	bne.n	80026e6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e10f      	b.n	8002906 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d106      	bne.n	8002706 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f00a fb5d 	bl	800cdc0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2203      	movs	r2, #3
 800270a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002716:	2b00      	cmp	r3, #0
 8002718:	d102      	bne.n	8002720 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4618      	mov	r0, r3
 8002726:	f004 fa07 	bl	8006b38 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	603b      	str	r3, [r7, #0]
 8002730:	687e      	ldr	r6, [r7, #4]
 8002732:	466d      	mov	r5, sp
 8002734:	f106 0410 	add.w	r4, r6, #16
 8002738:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800273a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800273c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800273e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002740:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002744:	e885 0003 	stmia.w	r5, {r0, r1}
 8002748:	1d33      	adds	r3, r6, #4
 800274a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800274c:	6838      	ldr	r0, [r7, #0]
 800274e:	f004 f8e9 	bl	8006924 <USB_CoreInit>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d005      	beq.n	8002764 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2202      	movs	r2, #2
 800275c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e0d0      	b.n	8002906 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2100      	movs	r1, #0
 800276a:	4618      	mov	r0, r3
 800276c:	f004 f9f4 	bl	8006b58 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002770:	2300      	movs	r3, #0
 8002772:	73fb      	strb	r3, [r7, #15]
 8002774:	e04a      	b.n	800280c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002776:	7bfa      	ldrb	r2, [r7, #15]
 8002778:	6879      	ldr	r1, [r7, #4]
 800277a:	4613      	mov	r3, r2
 800277c:	00db      	lsls	r3, r3, #3
 800277e:	1a9b      	subs	r3, r3, r2
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	440b      	add	r3, r1
 8002784:	333d      	adds	r3, #61	; 0x3d
 8002786:	2201      	movs	r2, #1
 8002788:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800278a:	7bfa      	ldrb	r2, [r7, #15]
 800278c:	6879      	ldr	r1, [r7, #4]
 800278e:	4613      	mov	r3, r2
 8002790:	00db      	lsls	r3, r3, #3
 8002792:	1a9b      	subs	r3, r3, r2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	440b      	add	r3, r1
 8002798:	333c      	adds	r3, #60	; 0x3c
 800279a:	7bfa      	ldrb	r2, [r7, #15]
 800279c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800279e:	7bfa      	ldrb	r2, [r7, #15]
 80027a0:	7bfb      	ldrb	r3, [r7, #15]
 80027a2:	b298      	uxth	r0, r3
 80027a4:	6879      	ldr	r1, [r7, #4]
 80027a6:	4613      	mov	r3, r2
 80027a8:	00db      	lsls	r3, r3, #3
 80027aa:	1a9b      	subs	r3, r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	440b      	add	r3, r1
 80027b0:	3342      	adds	r3, #66	; 0x42
 80027b2:	4602      	mov	r2, r0
 80027b4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80027b6:	7bfa      	ldrb	r2, [r7, #15]
 80027b8:	6879      	ldr	r1, [r7, #4]
 80027ba:	4613      	mov	r3, r2
 80027bc:	00db      	lsls	r3, r3, #3
 80027be:	1a9b      	subs	r3, r3, r2
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	440b      	add	r3, r1
 80027c4:	333f      	adds	r3, #63	; 0x3f
 80027c6:	2200      	movs	r2, #0
 80027c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80027ca:	7bfa      	ldrb	r2, [r7, #15]
 80027cc:	6879      	ldr	r1, [r7, #4]
 80027ce:	4613      	mov	r3, r2
 80027d0:	00db      	lsls	r3, r3, #3
 80027d2:	1a9b      	subs	r3, r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	440b      	add	r3, r1
 80027d8:	3344      	adds	r3, #68	; 0x44
 80027da:	2200      	movs	r2, #0
 80027dc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80027de:	7bfa      	ldrb	r2, [r7, #15]
 80027e0:	6879      	ldr	r1, [r7, #4]
 80027e2:	4613      	mov	r3, r2
 80027e4:	00db      	lsls	r3, r3, #3
 80027e6:	1a9b      	subs	r3, r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	440b      	add	r3, r1
 80027ec:	3348      	adds	r3, #72	; 0x48
 80027ee:	2200      	movs	r2, #0
 80027f0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80027f2:	7bfa      	ldrb	r2, [r7, #15]
 80027f4:	6879      	ldr	r1, [r7, #4]
 80027f6:	4613      	mov	r3, r2
 80027f8:	00db      	lsls	r3, r3, #3
 80027fa:	1a9b      	subs	r3, r3, r2
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	440b      	add	r3, r1
 8002800:	3350      	adds	r3, #80	; 0x50
 8002802:	2200      	movs	r2, #0
 8002804:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002806:	7bfb      	ldrb	r3, [r7, #15]
 8002808:	3301      	adds	r3, #1
 800280a:	73fb      	strb	r3, [r7, #15]
 800280c:	7bfa      	ldrb	r2, [r7, #15]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	429a      	cmp	r2, r3
 8002814:	d3af      	bcc.n	8002776 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002816:	2300      	movs	r3, #0
 8002818:	73fb      	strb	r3, [r7, #15]
 800281a:	e044      	b.n	80028a6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800281c:	7bfa      	ldrb	r2, [r7, #15]
 800281e:	6879      	ldr	r1, [r7, #4]
 8002820:	4613      	mov	r3, r2
 8002822:	00db      	lsls	r3, r3, #3
 8002824:	1a9b      	subs	r3, r3, r2
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	440b      	add	r3, r1
 800282a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800282e:	2200      	movs	r2, #0
 8002830:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002832:	7bfa      	ldrb	r2, [r7, #15]
 8002834:	6879      	ldr	r1, [r7, #4]
 8002836:	4613      	mov	r3, r2
 8002838:	00db      	lsls	r3, r3, #3
 800283a:	1a9b      	subs	r3, r3, r2
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	440b      	add	r3, r1
 8002840:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002844:	7bfa      	ldrb	r2, [r7, #15]
 8002846:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002848:	7bfa      	ldrb	r2, [r7, #15]
 800284a:	6879      	ldr	r1, [r7, #4]
 800284c:	4613      	mov	r3, r2
 800284e:	00db      	lsls	r3, r3, #3
 8002850:	1a9b      	subs	r3, r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	440b      	add	r3, r1
 8002856:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800285a:	2200      	movs	r2, #0
 800285c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800285e:	7bfa      	ldrb	r2, [r7, #15]
 8002860:	6879      	ldr	r1, [r7, #4]
 8002862:	4613      	mov	r3, r2
 8002864:	00db      	lsls	r3, r3, #3
 8002866:	1a9b      	subs	r3, r3, r2
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	440b      	add	r3, r1
 800286c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002870:	2200      	movs	r2, #0
 8002872:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002874:	7bfa      	ldrb	r2, [r7, #15]
 8002876:	6879      	ldr	r1, [r7, #4]
 8002878:	4613      	mov	r3, r2
 800287a:	00db      	lsls	r3, r3, #3
 800287c:	1a9b      	subs	r3, r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	440b      	add	r3, r1
 8002882:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002886:	2200      	movs	r2, #0
 8002888:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800288a:	7bfa      	ldrb	r2, [r7, #15]
 800288c:	6879      	ldr	r1, [r7, #4]
 800288e:	4613      	mov	r3, r2
 8002890:	00db      	lsls	r3, r3, #3
 8002892:	1a9b      	subs	r3, r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	440b      	add	r3, r1
 8002898:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800289c:	2200      	movs	r2, #0
 800289e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028a0:	7bfb      	ldrb	r3, [r7, #15]
 80028a2:	3301      	adds	r3, #1
 80028a4:	73fb      	strb	r3, [r7, #15]
 80028a6:	7bfa      	ldrb	r2, [r7, #15]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d3b5      	bcc.n	800281c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	603b      	str	r3, [r7, #0]
 80028b6:	687e      	ldr	r6, [r7, #4]
 80028b8:	466d      	mov	r5, sp
 80028ba:	f106 0410 	add.w	r4, r6, #16
 80028be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80028ca:	e885 0003 	stmia.w	r5, {r0, r1}
 80028ce:	1d33      	adds	r3, r6, #4
 80028d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028d2:	6838      	ldr	r0, [r7, #0]
 80028d4:	f004 f96a 	bl	8006bac <USB_DevInit>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d005      	beq.n	80028ea <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2202      	movs	r2, #2
 80028e2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e00d      	b.n	8002906 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2201      	movs	r2, #1
 80028f6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  (void)USB_DevDisconnect(hpcd->Instance);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4618      	mov	r0, r3
 8002900:	f005 f951 	bl	8007ba6 <USB_DevDisconnect>

  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3714      	adds	r7, #20
 800290a:	46bd      	mov	sp, r7
 800290c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800290e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800290e:	b580      	push	{r7, lr}
 8002910:	b082      	sub	sp, #8
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800291c:	2b01      	cmp	r3, #1
 800291e:	d101      	bne.n	8002924 <HAL_PCD_Start+0x16>
 8002920:	2302      	movs	r3, #2
 8002922:	e012      	b.n	800294a <HAL_PCD_Start+0x3c>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DevConnect(hpcd->Instance);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4618      	mov	r0, r3
 8002932:	f005 f920 	bl	8007b76 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4618      	mov	r0, r3
 800293c:	f004 f8ec 	bl	8006b18 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002952:	b590      	push	{r4, r7, lr}
 8002954:	b08d      	sub	sp, #52	; 0x34
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002960:	6a3b      	ldr	r3, [r7, #32]
 8002962:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4618      	mov	r0, r3
 800296a:	f005 f9c2 	bl	8007cf2 <USB_GetMode>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	f040 8380 	bne.w	8003076 <HAL_PCD_IRQHandler+0x724>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4618      	mov	r0, r3
 800297c:	f005 f92b 	bl	8007bd6 <USB_ReadInterrupts>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	f000 8376 	beq.w	8003074 <HAL_PCD_IRQHandler+0x722>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4618      	mov	r0, r3
 800298e:	f005 f922 	bl	8007bd6 <USB_ReadInterrupts>
 8002992:	4603      	mov	r3, r0
 8002994:	f003 0302 	and.w	r3, r3, #2
 8002998:	2b02      	cmp	r3, #2
 800299a:	d107      	bne.n	80029ac <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	695a      	ldr	r2, [r3, #20]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f002 0202 	and.w	r2, r2, #2
 80029aa:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f005 f910 	bl	8007bd6 <USB_ReadInterrupts>
 80029b6:	4603      	mov	r3, r0
 80029b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029bc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80029c0:	d17b      	bne.n	8002aba <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 80029c2:	2300      	movs	r3, #0
 80029c4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f005 f915 	bl	8007bfa <USB_ReadDevAllOutEpInterrupt>
 80029d0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80029d2:	e06f      	b.n	8002ab4 <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 80029d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d064      	beq.n	8002aa8 <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029e4:	b2d2      	uxtb	r2, r2
 80029e6:	4611      	mov	r1, r2
 80029e8:	4618      	mov	r0, r3
 80029ea:	f005 f938 	bl	8007c5e <USB_ReadDevOutEPInterrupt>
 80029ee:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00c      	beq.n	8002a14 <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80029fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fc:	015a      	lsls	r2, r3, #5
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	4413      	add	r3, r2
 8002a02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a06:	461a      	mov	r2, r3
 8002a08:	2301      	movs	r3, #1
 8002a0a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002a0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f000 fdfe 	bl	8003610 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	f003 0308 	and.w	r3, r3, #8
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d00c      	beq.n	8002a38 <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002a1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f000 fefd 	bl	8003820 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a28:	015a      	lsls	r2, r3, #5
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a32:	461a      	mov	r2, r3
 8002a34:	2308      	movs	r3, #8
 8002a36:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	f003 0310 	and.w	r3, r3, #16
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d008      	beq.n	8002a54 <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a44:	015a      	lsls	r2, r3, #5
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	4413      	add	r3, r2
 8002a4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a4e:	461a      	mov	r2, r3
 8002a50:	2310      	movs	r3, #16
 8002a52:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	f003 0320 	and.w	r3, r3, #32
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d015      	beq.n	8002a8a <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d108      	bne.n	8002a78 <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6818      	ldr	r0, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002a70:	461a      	mov	r2, r3
 8002a72:	2101      	movs	r1, #1
 8002a74:	f005 f97e 	bl	8007d74 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7a:	015a      	lsls	r2, r3, #5
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	4413      	add	r3, r2
 8002a80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a84:	461a      	mov	r2, r3
 8002a86:	2320      	movs	r3, #32
 8002a88:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d009      	beq.n	8002aa8 <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a96:	015a      	lsls	r2, r3, #5
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	4413      	add	r3, r2
 8002a9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002aa6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aaa:	3301      	adds	r3, #1
 8002aac:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ab0:	085b      	lsrs	r3, r3, #1
 8002ab2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d18c      	bne.n	80029d4 <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f005 f889 	bl	8007bd6 <USB_ReadInterrupts>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002aca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ace:	f040 80c4 	bne.w	8002c5a <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f005 f8a8 	bl	8007c2c <USB_ReadDevAllInEpInterrupt>
 8002adc:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002ae2:	e0b6      	b.n	8002c52 <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f000 80ab 	beq.w	8002c46 <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002af6:	b2d2      	uxtb	r2, r2
 8002af8:	4611      	mov	r1, r2
 8002afa:	4618      	mov	r0, r3
 8002afc:	f005 f8cc 	bl	8007c98 <USB_ReadDevInEPInterrupt>
 8002b00:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	f003 0301 	and.w	r3, r3, #1
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d05b      	beq.n	8002bc4 <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0e:	f003 030f 	and.w	r3, r3, #15
 8002b12:	2201      	movs	r2, #1
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	43db      	mvns	r3, r3
 8002b26:	69f9      	ldr	r1, [r7, #28]
 8002b28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b32:	015a      	lsls	r2, r3, #5
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	4413      	add	r3, r2
 8002b38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	2301      	movs	r3, #1
 8002b40:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d11b      	bne.n	8002b82 <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002b4a:	6879      	ldr	r1, [r7, #4]
 8002b4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b4e:	4613      	mov	r3, r2
 8002b50:	00db      	lsls	r3, r3, #3
 8002b52:	1a9b      	subs	r3, r3, r2
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	440b      	add	r3, r1
 8002b58:	3348      	adds	r3, #72	; 0x48
 8002b5a:	6819      	ldr	r1, [r3, #0]
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b60:	4613      	mov	r3, r2
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	1a9b      	subs	r3, r3, r2
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	4403      	add	r3, r0
 8002b6a:	3344      	adds	r3, #68	; 0x44
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4419      	add	r1, r3
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b74:	4613      	mov	r3, r2
 8002b76:	00db      	lsls	r3, r3, #3
 8002b78:	1a9b      	subs	r3, r3, r2
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	4403      	add	r3, r0
 8002b7e:	3348      	adds	r3, #72	; 0x48
 8002b80:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	4619      	mov	r1, r3
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f00a f9a8 	bl	800cede <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d116      	bne.n	8002bc4 <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d113      	bne.n	8002bc4 <HAL_PCD_IRQHandler+0x272>
 8002b9c:	6879      	ldr	r1, [r7, #4]
 8002b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	1a9b      	subs	r3, r3, r2
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	440b      	add	r3, r1
 8002baa:	3350      	adds	r3, #80	; 0x50
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d108      	bne.n	8002bc4 <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6818      	ldr	r0, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	2101      	movs	r1, #1
 8002bc0:	f005 f8d8 	bl	8007d74 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	f003 0308 	and.w	r3, r3, #8
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d008      	beq.n	8002be0 <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd0:	015a      	lsls	r2, r3, #5
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bda:	461a      	mov	r2, r3
 8002bdc:	2308      	movs	r3, #8
 8002bde:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	f003 0310 	and.w	r3, r3, #16
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d008      	beq.n	8002bfc <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bec:	015a      	lsls	r2, r3, #5
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	4413      	add	r3, r2
 8002bf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	2310      	movs	r3, #16
 8002bfa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d008      	beq.n	8002c18 <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c08:	015a      	lsls	r2, r3, #5
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	4413      	add	r3, r2
 8002c0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c12:	461a      	mov	r2, r3
 8002c14:	2340      	movs	r3, #64	; 0x40
 8002c16:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d008      	beq.n	8002c34 <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c24:	015a      	lsls	r2, r3, #5
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	4413      	add	r3, r2
 8002c2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c2e:	461a      	mov	r2, r3
 8002c30:	2302      	movs	r3, #2
 8002c32:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d003      	beq.n	8002c46 <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002c3e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f000 fc58 	bl	80034f6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c48:	3301      	adds	r3, #1
 8002c4a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c4e:	085b      	lsrs	r3, r3, #1
 8002c50:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	f47f af45 	bne.w	8002ae4 <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f004 ffb9 	bl	8007bd6 <USB_ReadInterrupts>
 8002c64:	4603      	mov	r3, r0
 8002c66:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002c6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c6e:	d114      	bne.n	8002c9a <HAL_PCD_IRQHandler+0x348>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	69fa      	ldr	r2, [r7, #28]
 8002c7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c7e:	f023 0301 	bic.w	r3, r3, #1
 8002c82:	6053      	str	r3, [r2, #4]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResumeCallback(hpcd);
#else
      HAL_PCD_ResumeCallback(hpcd);
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f00a f9a1 	bl	800cfcc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	695a      	ldr	r2, [r3, #20]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002c98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f004 ff99 	bl	8007bd6 <USB_ReadInterrupts>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002caa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cae:	d112      	bne.n	8002cd6 <HAL_PCD_IRQHandler+0x384>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f003 0301 	and.w	r3, r3, #1
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d102      	bne.n	8002cc6 <HAL_PCD_IRQHandler+0x374>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f00a f95d 	bl	800cf80 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	695a      	ldr	r2, [r3, #20]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002cd4:	615a      	str	r2, [r3, #20]
    }
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f004 ff7b 	bl	8007bd6 <USB_ReadInterrupts>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ce6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cea:	f040 80a7 	bne.w	8002e3c <HAL_PCD_IRQHandler+0x4ea>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	69fa      	ldr	r2, [r7, #28]
 8002cf8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cfc:	f023 0301 	bic.w	r3, r3, #1
 8002d00:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2110      	movs	r1, #16
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f004 f8c1 	bl	8006e90 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d0e:	2300      	movs	r3, #0
 8002d10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d12:	e036      	b.n	8002d82 <HAL_PCD_IRQHandler+0x430>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d16:	015a      	lsls	r2, r3, #5
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d20:	461a      	mov	r2, r3
 8002d22:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002d26:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d2a:	015a      	lsls	r2, r3, #5
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	4413      	add	r3, r2
 8002d30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d38:	0151      	lsls	r1, r2, #5
 8002d3a:	69fa      	ldr	r2, [r7, #28]
 8002d3c:	440a      	add	r2, r1
 8002d3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002d42:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002d46:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d4a:	015a      	lsls	r2, r3, #5
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	4413      	add	r3, r2
 8002d50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d54:	461a      	mov	r2, r3
 8002d56:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002d5a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d5e:	015a      	lsls	r2, r3, #5
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	4413      	add	r3, r2
 8002d64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d6c:	0151      	lsls	r1, r2, #5
 8002d6e:	69fa      	ldr	r2, [r7, #28]
 8002d70:	440a      	add	r2, r1
 8002d72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002d76:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002d7a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d7e:	3301      	adds	r3, #1
 8002d80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d3c3      	bcc.n	8002d14 <HAL_PCD_IRQHandler+0x3c2>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d92:	69db      	ldr	r3, [r3, #28]
 8002d94:	69fa      	ldr	r2, [r7, #28]
 8002d96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d9a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002d9e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d016      	beq.n	8002dd6 <HAL_PCD_IRQHandler+0x484>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002db2:	69fa      	ldr	r2, [r7, #28]
 8002db4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002db8:	f043 030b 	orr.w	r3, r3, #11
 8002dbc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc8:	69fa      	ldr	r2, [r7, #28]
 8002dca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002dce:	f043 030b 	orr.w	r3, r3, #11
 8002dd2:	6453      	str	r3, [r2, #68]	; 0x44
 8002dd4:	e015      	b.n	8002e02 <HAL_PCD_IRQHandler+0x4b0>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ddc:	695b      	ldr	r3, [r3, #20]
 8002dde:	69fa      	ldr	r2, [r7, #28]
 8002de0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002de4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002de8:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002dec:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	69fa      	ldr	r2, [r7, #28]
 8002df8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002dfc:	f043 030b 	orr.w	r3, r3, #11
 8002e00:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	69fa      	ldr	r2, [r7, #28]
 8002e0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e10:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002e14:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6818      	ldr	r0, [r3, #0]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002e26:	461a      	mov	r2, r3
 8002e28:	f004 ffa4 	bl	8007d74 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	695a      	ldr	r2, [r3, #20]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002e3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4618      	mov	r0, r3
 8002e42:	f004 fec8 	bl	8007bd6 <USB_ReadInterrupts>
 8002e46:	4603      	mov	r3, r0
 8002e48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e50:	d124      	bne.n	8002e9c <HAL_PCD_IRQHandler+0x54a>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f004 ff58 	bl	8007d0c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4618      	mov	r0, r3
 8002e62:	f004 f871 	bl	8006f48 <USB_GetDevSpeed>
 8002e66:	4603      	mov	r3, r0
 8002e68:	461a      	mov	r2, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681c      	ldr	r4, [r3, #0]
 8002e72:	f001 f9b9 	bl	80041e8 <HAL_RCC_GetHCLKFreq>
 8002e76:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	461a      	mov	r2, r3
 8002e80:	4620      	mov	r0, r4
 8002e82:	f003 fda7 	bl	80069d4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f00a f851 	bl	800cf2e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	695a      	ldr	r2, [r3, #20]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002e9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f004 fe98 	bl	8007bd6 <USB_ReadInterrupts>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	f003 0310 	and.w	r3, r3, #16
 8002eac:	2b10      	cmp	r3, #16
 8002eae:	d161      	bne.n	8002f74 <HAL_PCD_IRQHandler+0x622>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	699a      	ldr	r2, [r3, #24]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f022 0210 	bic.w	r2, r2, #16
 8002ebe:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002ec0:	6a3b      	ldr	r3, [r7, #32]
 8002ec2:	6a1b      	ldr	r3, [r3, #32]
 8002ec4:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	f003 020f 	and.w	r2, r3, #15
 8002ecc:	4613      	mov	r3, r2
 8002ece:	00db      	lsls	r3, r3, #3
 8002ed0:	1a9b      	subs	r3, r3, r2
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	4413      	add	r3, r2
 8002edc:	3304      	adds	r3, #4
 8002ede:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	0c5b      	lsrs	r3, r3, #17
 8002ee4:	f003 030f 	and.w	r3, r3, #15
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d124      	bne.n	8002f36 <HAL_PCD_IRQHandler+0x5e4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002eec:	693a      	ldr	r2, [r7, #16]
 8002eee:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d035      	beq.n	8002f64 <HAL_PCD_IRQHandler+0x612>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	091b      	lsrs	r3, r3, #4
 8002f00:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002f02:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	461a      	mov	r2, r3
 8002f0a:	6a38      	ldr	r0, [r7, #32]
 8002f0c:	f004 fd14 	bl	8007938 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	68da      	ldr	r2, [r3, #12]
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	091b      	lsrs	r3, r3, #4
 8002f18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f1c:	441a      	add	r2, r3
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	699a      	ldr	r2, [r3, #24]
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	091b      	lsrs	r3, r3, #4
 8002f2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f2e:	441a      	add	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	619a      	str	r2, [r3, #24]
 8002f34:	e016      	b.n	8002f64 <HAL_PCD_IRQHandler+0x612>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	0c5b      	lsrs	r3, r3, #17
 8002f3a:	f003 030f 	and.w	r3, r3, #15
 8002f3e:	2b06      	cmp	r3, #6
 8002f40:	d110      	bne.n	8002f64 <HAL_PCD_IRQHandler+0x612>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002f48:	2208      	movs	r2, #8
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	6a38      	ldr	r0, [r7, #32]
 8002f4e:	f004 fcf3 	bl	8007938 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	699a      	ldr	r2, [r3, #24]
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	091b      	lsrs	r3, r3, #4
 8002f5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f5e:	441a      	add	r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	699a      	ldr	r2, [r3, #24]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f042 0210 	orr.w	r2, r2, #16
 8002f72:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f004 fe2c 	bl	8007bd6 <USB_ReadInterrupts>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	f003 0308 	and.w	r3, r3, #8
 8002f84:	2b08      	cmp	r3, #8
 8002f86:	d10a      	bne.n	8002f9e <HAL_PCD_IRQHandler+0x64c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f009 ffc2 	bl	800cf12 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	695a      	ldr	r2, [r3, #20]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f002 0208 	and.w	r2, r2, #8
 8002f9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f004 fe17 	bl	8007bd6 <USB_ReadInterrupts>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fb2:	d10f      	bne.n	8002fd4 <HAL_PCD_IRQHandler+0x682>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f00a f824 	bl	800d00c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	695a      	ldr	r2, [r3, #20]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002fd2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f004 fdfc 	bl	8007bd6 <USB_ReadInterrupts>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fe4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002fe8:	d10f      	bne.n	800300a <HAL_PCD_IRQHandler+0x6b8>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002fea:	2300      	movs	r3, #0
 8002fec:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f009 fff7 	bl	800cfe8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	695a      	ldr	r2, [r3, #20]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003008:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4618      	mov	r0, r3
 8003010:	f004 fde1 	bl	8007bd6 <USB_ReadInterrupts>
 8003014:	4603      	mov	r3, r0
 8003016:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800301a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800301e:	d10a      	bne.n	8003036 <HAL_PCD_IRQHandler+0x6e4>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f00a f805 	bl	800d030 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	695a      	ldr	r2, [r3, #20]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003034:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4618      	mov	r0, r3
 800303c:	f004 fdcb 	bl	8007bd6 <USB_ReadInterrupts>
 8003040:	4603      	mov	r3, r0
 8003042:	f003 0304 	and.w	r3, r3, #4
 8003046:	2b04      	cmp	r3, #4
 8003048:	d115      	bne.n	8003076 <HAL_PCD_IRQHandler+0x724>
    {
      temp = hpcd->Instance->GOTGINT;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	f003 0304 	and.w	r3, r3, #4
 8003058:	2b00      	cmp	r3, #0
 800305a:	d002      	beq.n	8003062 <HAL_PCD_IRQHandler+0x710>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f009 fff5 	bl	800d04c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	6859      	ldr	r1, [r3, #4]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	693a      	ldr	r2, [r7, #16]
 800306e:	430a      	orrs	r2, r1
 8003070:	605a      	str	r2, [r3, #4]
 8003072:	e000      	b.n	8003076 <HAL_PCD_IRQHandler+0x724>
      return;
 8003074:	bf00      	nop
    }
  }
}
 8003076:	3734      	adds	r7, #52	; 0x34
 8003078:	46bd      	mov	sp, r7
 800307a:	bd90      	pop	{r4, r7, pc}

0800307c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	460b      	mov	r3, r1
 8003086:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800308e:	2b01      	cmp	r3, #1
 8003090:	d101      	bne.n	8003096 <HAL_PCD_SetAddress+0x1a>
 8003092:	2302      	movs	r3, #2
 8003094:	e013      	b.n	80030be <HAL_PCD_SetAddress+0x42>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2201      	movs	r2, #1
 800309a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	78fa      	ldrb	r2, [r7, #3]
 80030a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	78fa      	ldrb	r2, [r7, #3]
 80030ac:	4611      	mov	r1, r2
 80030ae:	4618      	mov	r0, r3
 80030b0:	f004 fd3c 	bl	8007b2c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3708      	adds	r7, #8
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b084      	sub	sp, #16
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
 80030ce:	4608      	mov	r0, r1
 80030d0:	4611      	mov	r1, r2
 80030d2:	461a      	mov	r2, r3
 80030d4:	4603      	mov	r3, r0
 80030d6:	70fb      	strb	r3, [r7, #3]
 80030d8:	460b      	mov	r3, r1
 80030da:	803b      	strh	r3, [r7, #0]
 80030dc:	4613      	mov	r3, r2
 80030de:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80030e0:	2300      	movs	r3, #0
 80030e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80030e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	da0f      	bge.n	800310c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030ec:	78fb      	ldrb	r3, [r7, #3]
 80030ee:	f003 020f 	and.w	r2, r3, #15
 80030f2:	4613      	mov	r3, r2
 80030f4:	00db      	lsls	r3, r3, #3
 80030f6:	1a9b      	subs	r3, r3, r2
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	3338      	adds	r3, #56	; 0x38
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	4413      	add	r3, r2
 8003100:	3304      	adds	r3, #4
 8003102:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2201      	movs	r2, #1
 8003108:	705a      	strb	r2, [r3, #1]
 800310a:	e00f      	b.n	800312c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800310c:	78fb      	ldrb	r3, [r7, #3]
 800310e:	f003 020f 	and.w	r2, r3, #15
 8003112:	4613      	mov	r3, r2
 8003114:	00db      	lsls	r3, r3, #3
 8003116:	1a9b      	subs	r3, r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	4413      	add	r3, r2
 8003122:	3304      	adds	r3, #4
 8003124:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2200      	movs	r2, #0
 800312a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800312c:	78fb      	ldrb	r3, [r7, #3]
 800312e:	f003 030f 	and.w	r3, r3, #15
 8003132:	b2da      	uxtb	r2, r3
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003138:	883a      	ldrh	r2, [r7, #0]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	78ba      	ldrb	r2, [r7, #2]
 8003142:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	785b      	ldrb	r3, [r3, #1]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d004      	beq.n	8003156 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	b29a      	uxth	r2, r3
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003156:	78bb      	ldrb	r3, [r7, #2]
 8003158:	2b02      	cmp	r3, #2
 800315a:	d102      	bne.n	8003162 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2200      	movs	r2, #0
 8003160:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003168:	2b01      	cmp	r3, #1
 800316a:	d101      	bne.n	8003170 <HAL_PCD_EP_Open+0xaa>
 800316c:	2302      	movs	r3, #2
 800316e:	e00e      	b.n	800318e <HAL_PCD_EP_Open+0xc8>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	68f9      	ldr	r1, [r7, #12]
 800317e:	4618      	mov	r0, r3
 8003180:	f003 ff06 	bl	8006f90 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800318c:	7afb      	ldrb	r3, [r7, #11]
}
 800318e:	4618      	mov	r0, r3
 8003190:	3710      	adds	r7, #16
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}

08003196 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003196:	b580      	push	{r7, lr}
 8003198:	b084      	sub	sp, #16
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
 800319e:	460b      	mov	r3, r1
 80031a0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80031a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	da0f      	bge.n	80031ca <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031aa:	78fb      	ldrb	r3, [r7, #3]
 80031ac:	f003 020f 	and.w	r2, r3, #15
 80031b0:	4613      	mov	r3, r2
 80031b2:	00db      	lsls	r3, r3, #3
 80031b4:	1a9b      	subs	r3, r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	3338      	adds	r3, #56	; 0x38
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	4413      	add	r3, r2
 80031be:	3304      	adds	r3, #4
 80031c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2201      	movs	r2, #1
 80031c6:	705a      	strb	r2, [r3, #1]
 80031c8:	e00f      	b.n	80031ea <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031ca:	78fb      	ldrb	r3, [r7, #3]
 80031cc:	f003 020f 	and.w	r2, r3, #15
 80031d0:	4613      	mov	r3, r2
 80031d2:	00db      	lsls	r3, r3, #3
 80031d4:	1a9b      	subs	r3, r3, r2
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	4413      	add	r3, r2
 80031e0:	3304      	adds	r3, #4
 80031e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2200      	movs	r2, #0
 80031e8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80031ea:	78fb      	ldrb	r3, [r7, #3]
 80031ec:	f003 030f 	and.w	r3, r3, #15
 80031f0:	b2da      	uxtb	r2, r3
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d101      	bne.n	8003204 <HAL_PCD_EP_Close+0x6e>
 8003200:	2302      	movs	r3, #2
 8003202:	e00e      	b.n	8003222 <HAL_PCD_EP_Close+0x8c>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68f9      	ldr	r1, [r7, #12]
 8003212:	4618      	mov	r0, r3
 8003214:	f003 ff42 	bl	800709c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	3710      	adds	r7, #16
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}

0800322a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800322a:	b580      	push	{r7, lr}
 800322c:	b086      	sub	sp, #24
 800322e:	af00      	add	r7, sp, #0
 8003230:	60f8      	str	r0, [r7, #12]
 8003232:	607a      	str	r2, [r7, #4]
 8003234:	603b      	str	r3, [r7, #0]
 8003236:	460b      	mov	r3, r1
 8003238:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800323a:	7afb      	ldrb	r3, [r7, #11]
 800323c:	f003 020f 	and.w	r2, r3, #15
 8003240:	4613      	mov	r3, r2
 8003242:	00db      	lsls	r3, r3, #3
 8003244:	1a9b      	subs	r3, r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800324c:	68fa      	ldr	r2, [r7, #12]
 800324e:	4413      	add	r3, r2
 8003250:	3304      	adds	r3, #4
 8003252:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	683a      	ldr	r2, [r7, #0]
 800325e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	2200      	movs	r2, #0
 8003264:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	2200      	movs	r2, #0
 800326a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800326c:	7afb      	ldrb	r3, [r7, #11]
 800326e:	f003 030f 	and.w	r3, r3, #15
 8003272:	b2da      	uxtb	r2, r3
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	691b      	ldr	r3, [r3, #16]
 800327c:	2b01      	cmp	r3, #1
 800327e:	d102      	bne.n	8003286 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003286:	7afb      	ldrb	r3, [r7, #11]
 8003288:	f003 030f 	and.w	r3, r3, #15
 800328c:	2b00      	cmp	r3, #0
 800328e:	d109      	bne.n	80032a4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6818      	ldr	r0, [r3, #0]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	691b      	ldr	r3, [r3, #16]
 8003298:	b2db      	uxtb	r3, r3
 800329a:	461a      	mov	r2, r3
 800329c:	6979      	ldr	r1, [r7, #20]
 800329e:	f004 f9c5 	bl	800762c <USB_EP0StartXfer>
 80032a2:	e008      	b.n	80032b6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6818      	ldr	r0, [r3, #0]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	691b      	ldr	r3, [r3, #16]
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	461a      	mov	r2, r3
 80032b0:	6979      	ldr	r1, [r7, #20]
 80032b2:	f003 ff77 	bl	80071a4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3718      	adds	r7, #24
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	460b      	mov	r3, r1
 80032ca:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80032cc:	78fb      	ldrb	r3, [r7, #3]
 80032ce:	f003 020f 	and.w	r2, r3, #15
 80032d2:	6879      	ldr	r1, [r7, #4]
 80032d4:	4613      	mov	r3, r2
 80032d6:	00db      	lsls	r3, r3, #3
 80032d8:	1a9b      	subs	r3, r3, r2
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	440b      	add	r3, r1
 80032de:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80032e2:	681b      	ldr	r3, [r3, #0]
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bc80      	pop	{r7}
 80032ec:	4770      	bx	lr

080032ee <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80032ee:	b580      	push	{r7, lr}
 80032f0:	b086      	sub	sp, #24
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	60f8      	str	r0, [r7, #12]
 80032f6:	607a      	str	r2, [r7, #4]
 80032f8:	603b      	str	r3, [r7, #0]
 80032fa:	460b      	mov	r3, r1
 80032fc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032fe:	7afb      	ldrb	r3, [r7, #11]
 8003300:	f003 020f 	and.w	r2, r3, #15
 8003304:	4613      	mov	r3, r2
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	1a9b      	subs	r3, r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	3338      	adds	r3, #56	; 0x38
 800330e:	68fa      	ldr	r2, [r7, #12]
 8003310:	4413      	add	r3, r2
 8003312:	3304      	adds	r3, #4
 8003314:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	683a      	ldr	r2, [r7, #0]
 8003320:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	2200      	movs	r2, #0
 8003326:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	2201      	movs	r2, #1
 800332c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800332e:	7afb      	ldrb	r3, [r7, #11]
 8003330:	f003 030f 	and.w	r3, r3, #15
 8003334:	b2da      	uxtb	r2, r3
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	2b01      	cmp	r3, #1
 8003340:	d102      	bne.n	8003348 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003348:	7afb      	ldrb	r3, [r7, #11]
 800334a:	f003 030f 	and.w	r3, r3, #15
 800334e:	2b00      	cmp	r3, #0
 8003350:	d109      	bne.n	8003366 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6818      	ldr	r0, [r3, #0]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	b2db      	uxtb	r3, r3
 800335c:	461a      	mov	r2, r3
 800335e:	6979      	ldr	r1, [r7, #20]
 8003360:	f004 f964 	bl	800762c <USB_EP0StartXfer>
 8003364:	e008      	b.n	8003378 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6818      	ldr	r0, [r3, #0]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	b2db      	uxtb	r3, r3
 8003370:	461a      	mov	r2, r3
 8003372:	6979      	ldr	r1, [r7, #20]
 8003374:	f003 ff16 	bl	80071a4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003378:	2300      	movs	r3, #0
}
 800337a:	4618      	mov	r0, r3
 800337c:	3718      	adds	r7, #24
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}

08003382 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003382:	b580      	push	{r7, lr}
 8003384:	b084      	sub	sp, #16
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
 800338a:	460b      	mov	r3, r1
 800338c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800338e:	78fb      	ldrb	r3, [r7, #3]
 8003390:	f003 020f 	and.w	r2, r3, #15
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	429a      	cmp	r2, r3
 800339a:	d901      	bls.n	80033a0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e050      	b.n	8003442 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80033a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	da0f      	bge.n	80033c8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033a8:	78fb      	ldrb	r3, [r7, #3]
 80033aa:	f003 020f 	and.w	r2, r3, #15
 80033ae:	4613      	mov	r3, r2
 80033b0:	00db      	lsls	r3, r3, #3
 80033b2:	1a9b      	subs	r3, r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	3338      	adds	r3, #56	; 0x38
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	4413      	add	r3, r2
 80033bc:	3304      	adds	r3, #4
 80033be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2201      	movs	r2, #1
 80033c4:	705a      	strb	r2, [r3, #1]
 80033c6:	e00d      	b.n	80033e4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80033c8:	78fa      	ldrb	r2, [r7, #3]
 80033ca:	4613      	mov	r3, r2
 80033cc:	00db      	lsls	r3, r3, #3
 80033ce:	1a9b      	subs	r3, r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	4413      	add	r3, r2
 80033da:	3304      	adds	r3, #4
 80033dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2200      	movs	r2, #0
 80033e2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2201      	movs	r2, #1
 80033e8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033ea:	78fb      	ldrb	r3, [r7, #3]
 80033ec:	f003 030f 	and.w	r3, r3, #15
 80033f0:	b2da      	uxtb	r2, r3
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d101      	bne.n	8003404 <HAL_PCD_EP_SetStall+0x82>
 8003400:	2302      	movs	r3, #2
 8003402:	e01e      	b.n	8003442 <HAL_PCD_EP_SetStall+0xc0>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68f9      	ldr	r1, [r7, #12]
 8003412:	4618      	mov	r0, r3
 8003414:	f004 fab8 	bl	8007988 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003418:	78fb      	ldrb	r3, [r7, #3]
 800341a:	f003 030f 	and.w	r3, r3, #15
 800341e:	2b00      	cmp	r3, #0
 8003420:	d10a      	bne.n	8003438 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6818      	ldr	r0, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	b2d9      	uxtb	r1, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003432:	461a      	mov	r2, r3
 8003434:	f004 fc9e 	bl	8007d74 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003440:	2300      	movs	r3, #0
}
 8003442:	4618      	mov	r0, r3
 8003444:	3710      	adds	r7, #16
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}

0800344a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800344a:	b580      	push	{r7, lr}
 800344c:	b084      	sub	sp, #16
 800344e:	af00      	add	r7, sp, #0
 8003450:	6078      	str	r0, [r7, #4]
 8003452:	460b      	mov	r3, r1
 8003454:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003456:	78fb      	ldrb	r3, [r7, #3]
 8003458:	f003 020f 	and.w	r2, r3, #15
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	429a      	cmp	r2, r3
 8003462:	d901      	bls.n	8003468 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e042      	b.n	80034ee <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003468:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800346c:	2b00      	cmp	r3, #0
 800346e:	da0f      	bge.n	8003490 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003470:	78fb      	ldrb	r3, [r7, #3]
 8003472:	f003 020f 	and.w	r2, r3, #15
 8003476:	4613      	mov	r3, r2
 8003478:	00db      	lsls	r3, r3, #3
 800347a:	1a9b      	subs	r3, r3, r2
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	3338      	adds	r3, #56	; 0x38
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	4413      	add	r3, r2
 8003484:	3304      	adds	r3, #4
 8003486:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2201      	movs	r2, #1
 800348c:	705a      	strb	r2, [r3, #1]
 800348e:	e00f      	b.n	80034b0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003490:	78fb      	ldrb	r3, [r7, #3]
 8003492:	f003 020f 	and.w	r2, r3, #15
 8003496:	4613      	mov	r3, r2
 8003498:	00db      	lsls	r3, r3, #3
 800349a:	1a9b      	subs	r3, r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	4413      	add	r3, r2
 80034a6:	3304      	adds	r3, #4
 80034a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2200      	movs	r2, #0
 80034ae:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2200      	movs	r2, #0
 80034b4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034b6:	78fb      	ldrb	r3, [r7, #3]
 80034b8:	f003 030f 	and.w	r3, r3, #15
 80034bc:	b2da      	uxtb	r2, r3
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d101      	bne.n	80034d0 <HAL_PCD_EP_ClrStall+0x86>
 80034cc:	2302      	movs	r3, #2
 80034ce:	e00e      	b.n	80034ee <HAL_PCD_EP_ClrStall+0xa4>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	68f9      	ldr	r1, [r7, #12]
 80034de:	4618      	mov	r0, r3
 80034e0:	f004 fabf 	bl	8007a62 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3710      	adds	r7, #16
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}

080034f6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80034f6:	b580      	push	{r7, lr}
 80034f8:	b08a      	sub	sp, #40	; 0x28
 80034fa:	af02      	add	r7, sp, #8
 80034fc:	6078      	str	r0, [r7, #4]
 80034fe:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800350a:	683a      	ldr	r2, [r7, #0]
 800350c:	4613      	mov	r3, r2
 800350e:	00db      	lsls	r3, r3, #3
 8003510:	1a9b      	subs	r3, r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	3338      	adds	r3, #56	; 0x38
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	4413      	add	r3, r2
 800351a:	3304      	adds	r3, #4
 800351c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	699a      	ldr	r2, [r3, #24]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	695b      	ldr	r3, [r3, #20]
 8003526:	429a      	cmp	r2, r3
 8003528:	d901      	bls.n	800352e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e06c      	b.n	8003608 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	695a      	ldr	r2, [r3, #20]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	699b      	ldr	r3, [r3, #24]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	69fa      	ldr	r2, [r7, #28]
 8003540:	429a      	cmp	r2, r3
 8003542:	d902      	bls.n	800354a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	3303      	adds	r3, #3
 800354e:	089b      	lsrs	r3, r3, #2
 8003550:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003552:	e02b      	b.n	80035ac <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	695a      	ldr	r2, [r3, #20]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	699b      	ldr	r3, [r3, #24]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	69fa      	ldr	r2, [r7, #28]
 8003566:	429a      	cmp	r2, r3
 8003568:	d902      	bls.n	8003570 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	3303      	adds	r3, #3
 8003574:	089b      	lsrs	r3, r3, #2
 8003576:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	68d9      	ldr	r1, [r3, #12]
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	b2da      	uxtb	r2, r3
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003588:	b2db      	uxtb	r3, r3
 800358a:	9300      	str	r3, [sp, #0]
 800358c:	4603      	mov	r3, r0
 800358e:	6978      	ldr	r0, [r7, #20]
 8003590:	f004 f99e 	bl	80078d0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	68da      	ldr	r2, [r3, #12]
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	441a      	add	r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	699a      	ldr	r2, [r3, #24]
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	441a      	add	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	015a      	lsls	r2, r3, #5
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	4413      	add	r3, r2
 80035b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	69ba      	ldr	r2, [r7, #24]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d809      	bhi.n	80035d6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	699a      	ldr	r2, [r3, #24]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d203      	bcs.n	80035d6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d1be      	bne.n	8003554 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	695a      	ldr	r2, [r3, #20]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	699b      	ldr	r3, [r3, #24]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d811      	bhi.n	8003606 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	f003 030f 	and.w	r3, r3, #15
 80035e8:	2201      	movs	r2, #1
 80035ea:	fa02 f303 	lsl.w	r3, r2, r3
 80035ee:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	43db      	mvns	r3, r3
 80035fc:	6939      	ldr	r1, [r7, #16]
 80035fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003602:	4013      	ands	r3, r2
 8003604:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003606:	2300      	movs	r3, #0
}
 8003608:	4618      	mov	r0, r3
 800360a:	3720      	adds	r7, #32
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b086      	sub	sp, #24
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	333c      	adds	r3, #60	; 0x3c
 8003628:	3304      	adds	r3, #4
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	015a      	lsls	r2, r3, #5
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	4413      	add	r3, r2
 8003636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	2b01      	cmp	r3, #1
 8003644:	f040 80b3 	bne.w	80037ae <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	f003 0308 	and.w	r3, r3, #8
 800364e:	2b00      	cmp	r3, #0
 8003650:	d028      	beq.n	80036a4 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	4a70      	ldr	r2, [pc, #448]	; (8003818 <PCD_EP_OutXfrComplete_int+0x208>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d90e      	bls.n	8003678 <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003660:	2b00      	cmp	r3, #0
 8003662:	d009      	beq.n	8003678 <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	015a      	lsls	r2, r3, #5
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	4413      	add	r3, r2
 800366c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003670:	461a      	mov	r2, r3
 8003672:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003676:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f009 fc03 	bl	800ce84 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6818      	ldr	r0, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003688:	461a      	mov	r2, r3
 800368a:	2101      	movs	r1, #1
 800368c:	f004 fb72 	bl	8007d74 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	015a      	lsls	r2, r3, #5
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	4413      	add	r3, r2
 8003698:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800369c:	461a      	mov	r2, r3
 800369e:	2308      	movs	r3, #8
 80036a0:	6093      	str	r3, [r2, #8]
 80036a2:	e0b3      	b.n	800380c <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	f003 0320 	and.w	r3, r3, #32
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d009      	beq.n	80036c2 <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	015a      	lsls	r2, r3, #5
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	4413      	add	r3, r2
 80036b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036ba:	461a      	mov	r2, r3
 80036bc:	2320      	movs	r3, #32
 80036be:	6093      	str	r3, [r2, #8]
 80036c0:	e0a4      	b.n	800380c <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	f040 809f 	bne.w	800380c <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	4a51      	ldr	r2, [pc, #324]	; (8003818 <PCD_EP_OutXfrComplete_int+0x208>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d90f      	bls.n	80036f6 <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d00a      	beq.n	80036f6 <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	015a      	lsls	r2, r3, #5
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	4413      	add	r3, r2
 80036e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036ec:	461a      	mov	r2, r3
 80036ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036f2:	6093      	str	r3, [r2, #8]
 80036f4:	e08a      	b.n	800380c <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80036f6:	6879      	ldr	r1, [r7, #4]
 80036f8:	683a      	ldr	r2, [r7, #0]
 80036fa:	4613      	mov	r3, r2
 80036fc:	00db      	lsls	r3, r3, #3
 80036fe:	1a9b      	subs	r3, r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	440b      	add	r3, r1
 8003704:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003708:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	0159      	lsls	r1, r3, #5
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	440b      	add	r3, r1
 8003712:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003716:	691b      	ldr	r3, [r3, #16]
 8003718:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800371c:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	683a      	ldr	r2, [r7, #0]
 8003722:	4613      	mov	r3, r2
 8003724:	00db      	lsls	r3, r3, #3
 8003726:	1a9b      	subs	r3, r3, r2
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	4403      	add	r3, r0
 800372c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003730:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003732:	6879      	ldr	r1, [r7, #4]
 8003734:	683a      	ldr	r2, [r7, #0]
 8003736:	4613      	mov	r3, r2
 8003738:	00db      	lsls	r3, r3, #3
 800373a:	1a9b      	subs	r3, r3, r2
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	440b      	add	r3, r1
 8003740:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003744:	6819      	ldr	r1, [r3, #0]
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	683a      	ldr	r2, [r7, #0]
 800374a:	4613      	mov	r3, r2
 800374c:	00db      	lsls	r3, r3, #3
 800374e:	1a9b      	subs	r3, r3, r2
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	4403      	add	r3, r0
 8003754:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4419      	add	r1, r3
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	683a      	ldr	r2, [r7, #0]
 8003760:	4613      	mov	r3, r2
 8003762:	00db      	lsls	r3, r3, #3
 8003764:	1a9b      	subs	r3, r3, r2
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	4403      	add	r3, r0
 800376a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800376e:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	b2db      	uxtb	r3, r3
 8003774:	4619      	mov	r1, r3
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f009 fb96 	bl	800cea8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d144      	bne.n	800380c <PCD_EP_OutXfrComplete_int+0x1fc>
 8003782:	6879      	ldr	r1, [r7, #4]
 8003784:	683a      	ldr	r2, [r7, #0]
 8003786:	4613      	mov	r3, r2
 8003788:	00db      	lsls	r3, r3, #3
 800378a:	1a9b      	subs	r3, r3, r2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	440b      	add	r3, r1
 8003790:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d138      	bne.n	800380c <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6818      	ldr	r0, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80037a4:	461a      	mov	r2, r3
 80037a6:	2101      	movs	r1, #1
 80037a8:	f004 fae4 	bl	8007d74 <USB_EP0_OutStart>
 80037ac:	e02e      	b.n	800380c <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	4a1a      	ldr	r2, [pc, #104]	; (800381c <PCD_EP_OutXfrComplete_int+0x20c>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d124      	bne.n	8003800 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d00a      	beq.n	80037d6 <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	015a      	lsls	r2, r3, #5
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	4413      	add	r3, r2
 80037c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037cc:	461a      	mov	r2, r3
 80037ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037d2:	6093      	str	r3, [r2, #8]
 80037d4:	e01a      	b.n	800380c <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	f003 0320 	and.w	r3, r3, #32
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d008      	beq.n	80037f2 <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	015a      	lsls	r2, r3, #5
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	4413      	add	r3, r2
 80037e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037ec:	461a      	mov	r2, r3
 80037ee:	2320      	movs	r3, #32
 80037f0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	4619      	mov	r1, r3
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f009 fb55 	bl	800cea8 <HAL_PCD_DataOutStageCallback>
 80037fe:	e005      	b.n	800380c <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	b2db      	uxtb	r3, r3
 8003804:	4619      	mov	r1, r3
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f009 fb4e 	bl	800cea8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3718      	adds	r7, #24
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	4f54300a 	.word	0x4f54300a
 800381c:	4f54310a 	.word	0x4f54310a

08003820 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b086      	sub	sp, #24
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	333c      	adds	r3, #60	; 0x3c
 8003838:	3304      	adds	r3, #4
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	015a      	lsls	r2, r3, #5
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	4413      	add	r3, r2
 8003846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	691b      	ldr	r3, [r3, #16]
 8003852:	2b01      	cmp	r3, #1
 8003854:	d113      	bne.n	800387e <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	4a1f      	ldr	r2, [pc, #124]	; (80038d8 <PCD_EP_OutSetupPacket_int+0xb8>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d922      	bls.n	80038a4 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003864:	2b00      	cmp	r3, #0
 8003866:	d01d      	beq.n	80038a4 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	015a      	lsls	r2, r3, #5
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	4413      	add	r3, r2
 8003870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003874:	461a      	mov	r2, r3
 8003876:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800387a:	6093      	str	r3, [r2, #8]
 800387c:	e012      	b.n	80038a4 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	4a16      	ldr	r2, [pc, #88]	; (80038dc <PCD_EP_OutSetupPacket_int+0xbc>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d10e      	bne.n	80038a4 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 800388c:	2b00      	cmp	r3, #0
 800388e:	d009      	beq.n	80038a4 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	015a      	lsls	r2, r3, #5
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	4413      	add	r3, r2
 8003898:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800389c:	461a      	mov	r2, r3
 800389e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038a2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f009 faed 	bl	800ce84 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	4a0a      	ldr	r2, [pc, #40]	; (80038d8 <PCD_EP_OutSetupPacket_int+0xb8>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d90c      	bls.n	80038cc <PCD_EP_OutSetupPacket_int+0xac>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d108      	bne.n	80038cc <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6818      	ldr	r0, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80038c4:	461a      	mov	r2, r3
 80038c6:	2101      	movs	r1, #1
 80038c8:	f004 fa54 	bl	8007d74 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3718      	adds	r7, #24
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	4f54300a 	.word	0x4f54300a
 80038dc:	4f54310a 	.word	0x4f54310a

080038e0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b085      	sub	sp, #20
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	460b      	mov	r3, r1
 80038ea:	70fb      	strb	r3, [r7, #3]
 80038ec:	4613      	mov	r3, r2
 80038ee:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80038f8:	78fb      	ldrb	r3, [r7, #3]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d107      	bne.n	800390e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80038fe:	883b      	ldrh	r3, [r7, #0]
 8003900:	0419      	lsls	r1, r3, #16
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	68ba      	ldr	r2, [r7, #8]
 8003908:	430a      	orrs	r2, r1
 800390a:	629a      	str	r2, [r3, #40]	; 0x28
 800390c:	e028      	b.n	8003960 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003914:	0c1b      	lsrs	r3, r3, #16
 8003916:	68ba      	ldr	r2, [r7, #8]
 8003918:	4413      	add	r3, r2
 800391a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800391c:	2300      	movs	r3, #0
 800391e:	73fb      	strb	r3, [r7, #15]
 8003920:	e00d      	b.n	800393e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	7bfb      	ldrb	r3, [r7, #15]
 8003928:	3340      	adds	r3, #64	; 0x40
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	4413      	add	r3, r2
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	0c1b      	lsrs	r3, r3, #16
 8003932:	68ba      	ldr	r2, [r7, #8]
 8003934:	4413      	add	r3, r2
 8003936:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003938:	7bfb      	ldrb	r3, [r7, #15]
 800393a:	3301      	adds	r3, #1
 800393c:	73fb      	strb	r3, [r7, #15]
 800393e:	7bfa      	ldrb	r2, [r7, #15]
 8003940:	78fb      	ldrb	r3, [r7, #3]
 8003942:	3b01      	subs	r3, #1
 8003944:	429a      	cmp	r2, r3
 8003946:	d3ec      	bcc.n	8003922 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003948:	883b      	ldrh	r3, [r7, #0]
 800394a:	0418      	lsls	r0, r3, #16
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6819      	ldr	r1, [r3, #0]
 8003950:	78fb      	ldrb	r3, [r7, #3]
 8003952:	3b01      	subs	r3, #1
 8003954:	68ba      	ldr	r2, [r7, #8]
 8003956:	4302      	orrs	r2, r0
 8003958:	3340      	adds	r3, #64	; 0x40
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	440b      	add	r3, r1
 800395e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3714      	adds	r7, #20
 8003966:	46bd      	mov	sp, r7
 8003968:	bc80      	pop	{r7}
 800396a:	4770      	bx	lr

0800396c <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	460b      	mov	r3, r1
 8003976:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	887a      	ldrh	r2, [r7, #2]
 800397e:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	370c      	adds	r7, #12
 8003986:	46bd      	mov	sp, r7
 8003988:	bc80      	pop	{r7}
 800398a:	4770      	bx	lr

0800398c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b090      	sub	sp, #64	; 0x40
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d101      	bne.n	800399e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e253      	b.n	8003e46 <HAL_RCC_OscConfig+0x4ba>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d050      	beq.n	8003a4c <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039aa:	4ba3      	ldr	r3, [pc, #652]	; (8003c38 <HAL_RCC_OscConfig+0x2ac>)
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f003 030c 	and.w	r3, r3, #12
 80039b2:	2b04      	cmp	r3, #4
 80039b4:	d00c      	beq.n	80039d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039b6:	4ba0      	ldr	r3, [pc, #640]	; (8003c38 <HAL_RCC_OscConfig+0x2ac>)
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039be:	2b08      	cmp	r3, #8
 80039c0:	d112      	bne.n	80039e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039c2:	4b9d      	ldr	r3, [pc, #628]	; (8003c38 <HAL_RCC_OscConfig+0x2ac>)
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039ce:	d10b      	bne.n	80039e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039d0:	4b99      	ldr	r3, [pc, #612]	; (8003c38 <HAL_RCC_OscConfig+0x2ac>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d036      	beq.n	8003a4a <HAL_RCC_OscConfig+0xbe>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d132      	bne.n	8003a4a <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e22e      	b.n	8003e46 <HAL_RCC_OscConfig+0x4ba>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685a      	ldr	r2, [r3, #4]
 80039ec:	4b93      	ldr	r3, [pc, #588]	; (8003c3c <HAL_RCC_OscConfig+0x2b0>)
 80039ee:	b2d2      	uxtb	r2, r2
 80039f0:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d013      	beq.n	8003a22 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039fa:	f7fd fbcf 	bl	800119c <HAL_GetTick>
 80039fe:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a00:	e008      	b.n	8003a14 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a02:	f7fd fbcb 	bl	800119c <HAL_GetTick>
 8003a06:	4602      	mov	r2, r0
 8003a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	2b64      	cmp	r3, #100	; 0x64
 8003a0e:	d901      	bls.n	8003a14 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	e218      	b.n	8003e46 <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a14:	4b88      	ldr	r3, [pc, #544]	; (8003c38 <HAL_RCC_OscConfig+0x2ac>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d0f0      	beq.n	8003a02 <HAL_RCC_OscConfig+0x76>
 8003a20:	e014      	b.n	8003a4c <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a22:	f7fd fbbb 	bl	800119c <HAL_GetTick>
 8003a26:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a28:	e008      	b.n	8003a3c <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a2a:	f7fd fbb7 	bl	800119c <HAL_GetTick>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	2b64      	cmp	r3, #100	; 0x64
 8003a36:	d901      	bls.n	8003a3c <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	e204      	b.n	8003e46 <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a3c:	4b7e      	ldr	r3, [pc, #504]	; (8003c38 <HAL_RCC_OscConfig+0x2ac>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d1f0      	bne.n	8003a2a <HAL_RCC_OscConfig+0x9e>
 8003a48:	e000      	b.n	8003a4c <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a4a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0302 	and.w	r3, r3, #2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d077      	beq.n	8003b48 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a58:	4b77      	ldr	r3, [pc, #476]	; (8003c38 <HAL_RCC_OscConfig+0x2ac>)
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	f003 030c 	and.w	r3, r3, #12
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d00b      	beq.n	8003a7c <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a64:	4b74      	ldr	r3, [pc, #464]	; (8003c38 <HAL_RCC_OscConfig+0x2ac>)
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a6c:	2b08      	cmp	r3, #8
 8003a6e:	d126      	bne.n	8003abe <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a70:	4b71      	ldr	r3, [pc, #452]	; (8003c38 <HAL_RCC_OscConfig+0x2ac>)
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d120      	bne.n	8003abe <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a7c:	4b6e      	ldr	r3, [pc, #440]	; (8003c38 <HAL_RCC_OscConfig+0x2ac>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0302 	and.w	r3, r3, #2
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d005      	beq.n	8003a94 <HAL_RCC_OscConfig+0x108>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d001      	beq.n	8003a94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e1d8      	b.n	8003e46 <HAL_RCC_OscConfig+0x4ba>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a94:	4b68      	ldr	r3, [pc, #416]	; (8003c38 <HAL_RCC_OscConfig+0x2ac>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	691b      	ldr	r3, [r3, #16]
 8003aa0:	21f8      	movs	r1, #248	; 0xf8
 8003aa2:	6339      	str	r1, [r7, #48]	; 0x30
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003aa6:	fa91 f1a1 	rbit	r1, r1
 8003aaa:	62f9      	str	r1, [r7, #44]	; 0x2c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003aac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003aae:	fab1 f181 	clz	r1, r1
 8003ab2:	b2c9      	uxtb	r1, r1
 8003ab4:	408b      	lsls	r3, r1
 8003ab6:	4960      	ldr	r1, [pc, #384]	; (8003c38 <HAL_RCC_OscConfig+0x2ac>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003abc:	e044      	b.n	8003b48 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d02a      	beq.n	8003b1c <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ac6:	4b5e      	ldr	r3, [pc, #376]	; (8003c40 <HAL_RCC_OscConfig+0x2b4>)
 8003ac8:	2201      	movs	r2, #1
 8003aca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003acc:	f7fd fb66 	bl	800119c <HAL_GetTick>
 8003ad0:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ad2:	e008      	b.n	8003ae6 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ad4:	f7fd fb62 	bl	800119c <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e1af      	b.n	8003e46 <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ae6:	4b54      	ldr	r3, [pc, #336]	; (8003c38 <HAL_RCC_OscConfig+0x2ac>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0302 	and.w	r3, r3, #2
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d0f0      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003af2:	4b51      	ldr	r3, [pc, #324]	; (8003c38 <HAL_RCC_OscConfig+0x2ac>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	21f8      	movs	r1, #248	; 0xf8
 8003b00:	62b9      	str	r1, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b04:	fa91 f1a1 	rbit	r1, r1
 8003b08:	6279      	str	r1, [r7, #36]	; 0x24
  return result;
 8003b0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b0c:	fab1 f181 	clz	r1, r1
 8003b10:	b2c9      	uxtb	r1, r1
 8003b12:	408b      	lsls	r3, r1
 8003b14:	4948      	ldr	r1, [pc, #288]	; (8003c38 <HAL_RCC_OscConfig+0x2ac>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	600b      	str	r3, [r1, #0]
 8003b1a:	e015      	b.n	8003b48 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b1c:	4b48      	ldr	r3, [pc, #288]	; (8003c40 <HAL_RCC_OscConfig+0x2b4>)
 8003b1e:	2200      	movs	r2, #0
 8003b20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b22:	f7fd fb3b 	bl	800119c <HAL_GetTick>
 8003b26:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b28:	e008      	b.n	8003b3c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b2a:	f7fd fb37 	bl	800119c <HAL_GetTick>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d901      	bls.n	8003b3c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	e184      	b.n	8003e46 <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b3c:	4b3e      	ldr	r3, [pc, #248]	; (8003c38 <HAL_RCC_OscConfig+0x2ac>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0302 	and.w	r3, r3, #2
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d1f0      	bne.n	8003b2a <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0308 	and.w	r3, r3, #8
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d030      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	695b      	ldr	r3, [r3, #20]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d016      	beq.n	8003b8a <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b5c:	4b39      	ldr	r3, [pc, #228]	; (8003c44 <HAL_RCC_OscConfig+0x2b8>)
 8003b5e:	2201      	movs	r2, #1
 8003b60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b62:	f7fd fb1b 	bl	800119c <HAL_GetTick>
 8003b66:	63b8      	str	r0, [r7, #56]	; 0x38

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b68:	e008      	b.n	8003b7c <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b6a:	f7fd fb17 	bl	800119c <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d901      	bls.n	8003b7c <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e164      	b.n	8003e46 <HAL_RCC_OscConfig+0x4ba>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b7c:	4b2e      	ldr	r3, [pc, #184]	; (8003c38 <HAL_RCC_OscConfig+0x2ac>)
 8003b7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b80:	f003 0302 	and.w	r3, r3, #2
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d0f0      	beq.n	8003b6a <HAL_RCC_OscConfig+0x1de>
 8003b88:	e015      	b.n	8003bb6 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b8a:	4b2e      	ldr	r3, [pc, #184]	; (8003c44 <HAL_RCC_OscConfig+0x2b8>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b90:	f7fd fb04 	bl	800119c <HAL_GetTick>
 8003b94:	63b8      	str	r0, [r7, #56]	; 0x38

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b96:	e008      	b.n	8003baa <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b98:	f7fd fb00 	bl	800119c <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	d901      	bls.n	8003baa <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e14d      	b.n	8003e46 <HAL_RCC_OscConfig+0x4ba>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003baa:	4b23      	ldr	r3, [pc, #140]	; (8003c38 <HAL_RCC_OscConfig+0x2ac>)
 8003bac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d1f0      	bne.n	8003b98 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0304 	and.w	r3, r3, #4
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	f000 8088 	beq.w	8003cd4 <HAL_RCC_OscConfig+0x348>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bca:	4b1b      	ldr	r3, [pc, #108]	; (8003c38 <HAL_RCC_OscConfig+0x2ac>)
 8003bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d110      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	60bb      	str	r3, [r7, #8]
 8003bda:	4b17      	ldr	r3, [pc, #92]	; (8003c38 <HAL_RCC_OscConfig+0x2ac>)
 8003bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bde:	4a16      	ldr	r2, [pc, #88]	; (8003c38 <HAL_RCC_OscConfig+0x2ac>)
 8003be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003be4:	6413      	str	r3, [r2, #64]	; 0x40
 8003be6:	4b14      	ldr	r3, [pc, #80]	; (8003c38 <HAL_RCC_OscConfig+0x2ac>)
 8003be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bee:	60bb      	str	r3, [r7, #8]
 8003bf0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003bf8:	4b13      	ldr	r3, [pc, #76]	; (8003c48 <HAL_RCC_OscConfig+0x2bc>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a12      	ldr	r2, [pc, #72]	; (8003c48 <HAL_RCC_OscConfig+0x2bc>)
 8003bfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c02:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c04:	4b10      	ldr	r3, [pc, #64]	; (8003c48 <HAL_RCC_OscConfig+0x2bc>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d123      	bne.n	8003c58 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c10:	4b0d      	ldr	r3, [pc, #52]	; (8003c48 <HAL_RCC_OscConfig+0x2bc>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a0c      	ldr	r2, [pc, #48]	; (8003c48 <HAL_RCC_OscConfig+0x2bc>)
 8003c16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c1a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c1c:	f7fd fabe 	bl	800119c <HAL_GetTick>
 8003c20:	63b8      	str	r0, [r7, #56]	; 0x38

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c22:	e013      	b.n	8003c4c <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c24:	f7fd faba 	bl	800119c <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d90c      	bls.n	8003c4c <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e107      	b.n	8003e46 <HAL_RCC_OscConfig+0x4ba>
 8003c36:	bf00      	nop
 8003c38:	40023800 	.word	0x40023800
 8003c3c:	40023802 	.word	0x40023802
 8003c40:	42470000 	.word	0x42470000
 8003c44:	42470e80 	.word	0x42470e80
 8003c48:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c4c:	4b80      	ldr	r3, [pc, #512]	; (8003e50 <HAL_RCC_OscConfig+0x4c4>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d0e5      	beq.n	8003c24 <HAL_RCC_OscConfig+0x298>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	689a      	ldr	r2, [r3, #8]
 8003c5c:	4b7d      	ldr	r3, [pc, #500]	; (8003e54 <HAL_RCC_OscConfig+0x4c8>)
 8003c5e:	b2d2      	uxtb	r2, r2
 8003c60:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d015      	beq.n	8003c96 <HAL_RCC_OscConfig+0x30a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c6a:	f7fd fa97 	bl	800119c <HAL_GetTick>
 8003c6e:	63b8      	str	r0, [r7, #56]	; 0x38

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c70:	e00a      	b.n	8003c88 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c72:	f7fd fa93 	bl	800119c <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d901      	bls.n	8003c88 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003c84:	2303      	movs	r3, #3
 8003c86:	e0de      	b.n	8003e46 <HAL_RCC_OscConfig+0x4ba>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c88:	4b73      	ldr	r3, [pc, #460]	; (8003e58 <HAL_RCC_OscConfig+0x4cc>)
 8003c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c8c:	f003 0302 	and.w	r3, r3, #2
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d0ee      	beq.n	8003c72 <HAL_RCC_OscConfig+0x2e6>
 8003c94:	e014      	b.n	8003cc0 <HAL_RCC_OscConfig+0x334>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c96:	f7fd fa81 	bl	800119c <HAL_GetTick>
 8003c9a:	63b8      	str	r0, [r7, #56]	; 0x38

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c9c:	e00a      	b.n	8003cb4 <HAL_RCC_OscConfig+0x328>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c9e:	f7fd fa7d 	bl	800119c <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d901      	bls.n	8003cb4 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	e0c8      	b.n	8003e46 <HAL_RCC_OscConfig+0x4ba>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cb4:	4b68      	ldr	r3, [pc, #416]	; (8003e58 <HAL_RCC_OscConfig+0x4cc>)
 8003cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb8:	f003 0302 	and.w	r3, r3, #2
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d1ee      	bne.n	8003c9e <HAL_RCC_OscConfig+0x312>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cc0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d105      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x348>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cc8:	4b63      	ldr	r3, [pc, #396]	; (8003e58 <HAL_RCC_OscConfig+0x4cc>)
 8003cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ccc:	4a62      	ldr	r2, [pc, #392]	; (8003e58 <HAL_RCC_OscConfig+0x4cc>)
 8003cce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cd2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	699b      	ldr	r3, [r3, #24]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	f000 80b3 	beq.w	8003e44 <HAL_RCC_OscConfig+0x4b8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003cde:	4b5e      	ldr	r3, [pc, #376]	; (8003e58 <HAL_RCC_OscConfig+0x4cc>)
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f003 030c 	and.w	r3, r3, #12
 8003ce6:	2b08      	cmp	r3, #8
 8003ce8:	d07d      	beq.n	8003de6 <HAL_RCC_OscConfig+0x45a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	699b      	ldr	r3, [r3, #24]
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d162      	bne.n	8003db8 <HAL_RCC_OscConfig+0x42c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cf2:	4b5a      	ldr	r3, [pc, #360]	; (8003e5c <HAL_RCC_OscConfig+0x4d0>)
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf8:	f7fd fa50 	bl	800119c <HAL_GetTick>
 8003cfc:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cfe:	e008      	b.n	8003d12 <HAL_RCC_OscConfig+0x386>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d00:	f7fd fa4c 	bl	800119c <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	2b64      	cmp	r3, #100	; 0x64
 8003d0c:	d901      	bls.n	8003d12 <HAL_RCC_OscConfig+0x386>
          {
            return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e099      	b.n	8003e46 <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d12:	4b51      	ldr	r3, [pc, #324]	; (8003e58 <HAL_RCC_OscConfig+0x4cc>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1f0      	bne.n	8003d00 <HAL_RCC_OscConfig+0x374>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                              | \
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	69da      	ldr	r2, [r3, #28]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a1b      	ldr	r3, [r3, #32]
 8003d26:	431a      	orrs	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2c:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8003d30:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d32:	6939      	ldr	r1, [r7, #16]
 8003d34:	fa91 f1a1 	rbit	r1, r1
 8003d38:	60f9      	str	r1, [r7, #12]
  return result;
 8003d3a:	68f9      	ldr	r1, [r7, #12]
 8003d3c:	fab1 f181 	clz	r1, r1
 8003d40:	b2c9      	uxtb	r1, r1
 8003d42:	408b      	lsls	r3, r1
 8003d44:	431a      	orrs	r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d4a:	085b      	lsrs	r3, r3, #1
 8003d4c:	3b01      	subs	r3, #1
 8003d4e:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8003d52:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d54:	69b9      	ldr	r1, [r7, #24]
 8003d56:	fa91 f1a1 	rbit	r1, r1
 8003d5a:	6179      	str	r1, [r7, #20]
  return result;
 8003d5c:	6979      	ldr	r1, [r7, #20]
 8003d5e:	fab1 f181 	clz	r1, r1
 8003d62:	b2c9      	uxtb	r1, r1
 8003d64:	408b      	lsls	r3, r1
 8003d66:	431a      	orrs	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d6c:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8003d70:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d72:	6a39      	ldr	r1, [r7, #32]
 8003d74:	fa91 f1a1 	rbit	r1, r1
 8003d78:	61f9      	str	r1, [r7, #28]
  return result;
 8003d7a:	69f9      	ldr	r1, [r7, #28]
 8003d7c:	fab1 f181 	clz	r1, r1
 8003d80:	b2c9      	uxtb	r1, r1
 8003d82:	408b      	lsls	r3, r1
 8003d84:	4934      	ldr	r1, [pc, #208]	; (8003e58 <HAL_RCC_OscConfig+0x4cc>)
 8003d86:	4313      	orrs	r3, r2
 8003d88:	604b      	str	r3, [r1, #4]
                                RCC_OscInitStruct->PLL.PLLM                                                    | \
                                (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))                | \
                                (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d8a:	4b34      	ldr	r3, [pc, #208]	; (8003e5c <HAL_RCC_OscConfig+0x4d0>)
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d90:	f7fd fa04 	bl	800119c <HAL_GetTick>
 8003d94:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d96:	e008      	b.n	8003daa <HAL_RCC_OscConfig+0x41e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d98:	f7fd fa00 	bl	800119c <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	2b64      	cmp	r3, #100	; 0x64
 8003da4:	d901      	bls.n	8003daa <HAL_RCC_OscConfig+0x41e>
          {
            return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e04d      	b.n	8003e46 <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003daa:	4b2b      	ldr	r3, [pc, #172]	; (8003e58 <HAL_RCC_OscConfig+0x4cc>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d0f0      	beq.n	8003d98 <HAL_RCC_OscConfig+0x40c>
 8003db6:	e045      	b.n	8003e44 <HAL_RCC_OscConfig+0x4b8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003db8:	4b28      	ldr	r3, [pc, #160]	; (8003e5c <HAL_RCC_OscConfig+0x4d0>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dbe:	f7fd f9ed 	bl	800119c <HAL_GetTick>
 8003dc2:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dc4:	e008      	b.n	8003dd8 <HAL_RCC_OscConfig+0x44c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dc6:	f7fd f9e9 	bl	800119c <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	2b64      	cmp	r3, #100	; 0x64
 8003dd2:	d901      	bls.n	8003dd8 <HAL_RCC_OscConfig+0x44c>
          {
            return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e036      	b.n	8003e46 <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dd8:	4b1f      	ldr	r3, [pc, #124]	; (8003e58 <HAL_RCC_OscConfig+0x4cc>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d1f0      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x43a>
 8003de4:	e02e      	b.n	8003e44 <HAL_RCC_OscConfig+0x4b8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d101      	bne.n	8003df2 <HAL_RCC_OscConfig+0x466>
      {
        return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e029      	b.n	8003e46 <HAL_RCC_OscConfig+0x4ba>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8003df2:	4b19      	ldr	r3, [pc, #100]	; (8003e58 <HAL_RCC_OscConfig+0x4cc>)
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	637b      	str	r3, [r7, #52]	; 0x34
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dfa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	69db      	ldr	r3, [r3, #28]
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d11c      	bne.n	8003e40 <HAL_RCC_OscConfig+0x4b4>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e08:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d115      	bne.n	8003e40 <HAL_RCC_OscConfig+0x4b4>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e16:	099b      	lsrs	r3, r3, #6
 8003e18:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d10d      	bne.n	8003e40 <HAL_RCC_OscConfig+0x4b4>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e26:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d106      	bne.n	8003e40 <HAL_RCC_OscConfig+0x4b4>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e34:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d001      	beq.n	8003e44 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e000      	b.n	8003e46 <HAL_RCC_OscConfig+0x4ba>
        }
      }
    }
  }
  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3740      	adds	r7, #64	; 0x40
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	40007000 	.word	0x40007000
 8003e54:	40023870 	.word	0x40023870
 8003e58:	40023800 	.word	0x40023800
 8003e5c:	42470060 	.word	0x42470060

08003e60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b086      	sub	sp, #24
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d101      	bne.n	8003e74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e0d2      	b.n	800401a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e74:	4b6b      	ldr	r3, [pc, #428]	; (8004024 <HAL_RCC_ClockConfig+0x1c4>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 030f 	and.w	r3, r3, #15
 8003e7c:	683a      	ldr	r2, [r7, #0]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d90c      	bls.n	8003e9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e82:	4b68      	ldr	r3, [pc, #416]	; (8004024 <HAL_RCC_ClockConfig+0x1c4>)
 8003e84:	683a      	ldr	r2, [r7, #0]
 8003e86:	b2d2      	uxtb	r2, r2
 8003e88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e8a:	4b66      	ldr	r3, [pc, #408]	; (8004024 <HAL_RCC_ClockConfig+0x1c4>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 030f 	and.w	r3, r3, #15
 8003e92:	683a      	ldr	r2, [r7, #0]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d001      	beq.n	8003e9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e0be      	b.n	800401a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0302 	and.w	r3, r3, #2
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d020      	beq.n	8003eea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0304 	and.w	r3, r3, #4
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d005      	beq.n	8003ec0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003eb4:	4b5c      	ldr	r3, [pc, #368]	; (8004028 <HAL_RCC_ClockConfig+0x1c8>)
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	4a5b      	ldr	r2, [pc, #364]	; (8004028 <HAL_RCC_ClockConfig+0x1c8>)
 8003eba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ebe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0308 	and.w	r3, r3, #8
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d005      	beq.n	8003ed8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8003ecc:	4b56      	ldr	r3, [pc, #344]	; (8004028 <HAL_RCC_ClockConfig+0x1c8>)
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	4a55      	ldr	r2, [pc, #340]	; (8004028 <HAL_RCC_ClockConfig+0x1c8>)
 8003ed2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ed6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ed8:	4b53      	ldr	r3, [pc, #332]	; (8004028 <HAL_RCC_ClockConfig+0x1c8>)
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	4950      	ldr	r1, [pc, #320]	; (8004028 <HAL_RCC_ClockConfig+0x1c8>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d040      	beq.n	8003f78 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d107      	bne.n	8003f0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003efe:	4b4a      	ldr	r3, [pc, #296]	; (8004028 <HAL_RCC_ClockConfig+0x1c8>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d115      	bne.n	8003f36 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e085      	b.n	800401a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d107      	bne.n	8003f26 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f16:	4b44      	ldr	r3, [pc, #272]	; (8004028 <HAL_RCC_ClockConfig+0x1c8>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d109      	bne.n	8003f36 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e079      	b.n	800401a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f26:	4b40      	ldr	r3, [pc, #256]	; (8004028 <HAL_RCC_ClockConfig+0x1c8>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0302 	and.w	r3, r3, #2
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d101      	bne.n	8003f36 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e071      	b.n	800401a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f36:	4b3c      	ldr	r3, [pc, #240]	; (8004028 <HAL_RCC_ClockConfig+0x1c8>)
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	f023 0203 	bic.w	r2, r3, #3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	4939      	ldr	r1, [pc, #228]	; (8004028 <HAL_RCC_ClockConfig+0x1c8>)
 8003f44:	4313      	orrs	r3, r2
 8003f46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f48:	f7fd f928 	bl	800119c <HAL_GetTick>
 8003f4c:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f4e:	e00a      	b.n	8003f66 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f50:	f7fd f924 	bl	800119c <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d901      	bls.n	8003f66 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e059      	b.n	800401a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f66:	4b30      	ldr	r3, [pc, #192]	; (8004028 <HAL_RCC_ClockConfig+0x1c8>)
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	f003 020c 	and.w	r2, r3, #12
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d1eb      	bne.n	8003f50 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f78:	4b2a      	ldr	r3, [pc, #168]	; (8004024 <HAL_RCC_ClockConfig+0x1c4>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 030f 	and.w	r3, r3, #15
 8003f80:	683a      	ldr	r2, [r7, #0]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d20c      	bcs.n	8003fa0 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f86:	4b27      	ldr	r3, [pc, #156]	; (8004024 <HAL_RCC_ClockConfig+0x1c4>)
 8003f88:	683a      	ldr	r2, [r7, #0]
 8003f8a:	b2d2      	uxtb	r2, r2
 8003f8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f8e:	4b25      	ldr	r3, [pc, #148]	; (8004024 <HAL_RCC_ClockConfig+0x1c4>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 030f 	and.w	r3, r3, #15
 8003f96:	683a      	ldr	r2, [r7, #0]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d001      	beq.n	8003fa0 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e03c      	b.n	800401a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0304 	and.w	r3, r3, #4
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d008      	beq.n	8003fbe <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fac:	4b1e      	ldr	r3, [pc, #120]	; (8004028 <HAL_RCC_ClockConfig+0x1c8>)
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	491b      	ldr	r1, [pc, #108]	; (8004028 <HAL_RCC_ClockConfig+0x1c8>)
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0308 	and.w	r3, r3, #8
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d009      	beq.n	8003fde <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fca:	4b17      	ldr	r3, [pc, #92]	; (8004028 <HAL_RCC_ClockConfig+0x1c8>)
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	00db      	lsls	r3, r3, #3
 8003fd8:	4913      	ldr	r1, [pc, #76]	; (8004028 <HAL_RCC_ClockConfig+0x1c8>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8003fde:	f000 f82b 	bl	8004038 <HAL_RCC_GetSysClockFreq>
 8003fe2:	4601      	mov	r1, r0
 8003fe4:	4b10      	ldr	r3, [pc, #64]	; (8004028 <HAL_RCC_ClockConfig+0x1c8>)
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fec:	22f0      	movs	r2, #240	; 0xf0
 8003fee:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ff0:	693a      	ldr	r2, [r7, #16]
 8003ff2:	fa92 f2a2 	rbit	r2, r2
 8003ff6:	60fa      	str	r2, [r7, #12]
  return result;
 8003ff8:	68fa      	ldr	r2, [r7, #12]
 8003ffa:	fab2 f282 	clz	r2, r2
 8003ffe:	b2d2      	uxtb	r2, r2
 8004000:	40d3      	lsrs	r3, r2
 8004002:	4a0a      	ldr	r2, [pc, #40]	; (800402c <HAL_RCC_ClockConfig+0x1cc>)
 8004004:	5cd3      	ldrb	r3, [r2, r3]
 8004006:	fa21 f303 	lsr.w	r3, r1, r3
 800400a:	4a09      	ldr	r2, [pc, #36]	; (8004030 <HAL_RCC_ClockConfig+0x1d0>)
 800400c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800400e:	4b09      	ldr	r3, [pc, #36]	; (8004034 <HAL_RCC_ClockConfig+0x1d4>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4618      	mov	r0, r3
 8004014:	f7fd f880 	bl	8001118 <HAL_InitTick>

  return HAL_OK;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3718      	adds	r7, #24
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	40023c00 	.word	0x40023c00
 8004028:	40023800 	.word	0x40023800
 800402c:	0800de50 	.word	0x0800de50
 8004030:	20000000 	.word	0x20000000
 8004034:	20000004 	.word	0x20000004

08004038 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800403a:	b085      	sub	sp, #20
 800403c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800403e:	2300      	movs	r3, #0
 8004040:	607b      	str	r3, [r7, #4]
 8004042:	2300      	movs	r3, #0
 8004044:	60fb      	str	r3, [r7, #12]
 8004046:	2300      	movs	r3, #0
 8004048:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800404a:	2300      	movs	r3, #0
 800404c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800404e:	4b63      	ldr	r3, [pc, #396]	; (80041dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f003 030c 	and.w	r3, r3, #12
 8004056:	2b04      	cmp	r3, #4
 8004058:	d007      	beq.n	800406a <HAL_RCC_GetSysClockFreq+0x32>
 800405a:	2b08      	cmp	r3, #8
 800405c:	d008      	beq.n	8004070 <HAL_RCC_GetSysClockFreq+0x38>
 800405e:	2b00      	cmp	r3, #0
 8004060:	f040 80b4 	bne.w	80041cc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004064:	4b5e      	ldr	r3, [pc, #376]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004066:	60bb      	str	r3, [r7, #8]
       break;
 8004068:	e0b3      	b.n	80041d2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800406a:	4b5e      	ldr	r3, [pc, #376]	; (80041e4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800406c:	60bb      	str	r3, [r7, #8]
      break;
 800406e:	e0b0      	b.n	80041d2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004070:	4b5a      	ldr	r3, [pc, #360]	; (80041dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004078:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800407a:	4b58      	ldr	r3, [pc, #352]	; (80041dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d04a      	beq.n	800411c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004086:	4b55      	ldr	r3, [pc, #340]	; (80041dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	099b      	lsrs	r3, r3, #6
 800408c:	f04f 0400 	mov.w	r4, #0
 8004090:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004094:	f04f 0200 	mov.w	r2, #0
 8004098:	ea03 0501 	and.w	r5, r3, r1
 800409c:	ea04 0602 	and.w	r6, r4, r2
 80040a0:	4629      	mov	r1, r5
 80040a2:	4632      	mov	r2, r6
 80040a4:	f04f 0300 	mov.w	r3, #0
 80040a8:	f04f 0400 	mov.w	r4, #0
 80040ac:	0154      	lsls	r4, r2, #5
 80040ae:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80040b2:	014b      	lsls	r3, r1, #5
 80040b4:	4619      	mov	r1, r3
 80040b6:	4622      	mov	r2, r4
 80040b8:	1b49      	subs	r1, r1, r5
 80040ba:	eb62 0206 	sbc.w	r2, r2, r6
 80040be:	f04f 0300 	mov.w	r3, #0
 80040c2:	f04f 0400 	mov.w	r4, #0
 80040c6:	0194      	lsls	r4, r2, #6
 80040c8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80040cc:	018b      	lsls	r3, r1, #6
 80040ce:	1a5b      	subs	r3, r3, r1
 80040d0:	eb64 0402 	sbc.w	r4, r4, r2
 80040d4:	f04f 0100 	mov.w	r1, #0
 80040d8:	f04f 0200 	mov.w	r2, #0
 80040dc:	00e2      	lsls	r2, r4, #3
 80040de:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80040e2:	00d9      	lsls	r1, r3, #3
 80040e4:	460b      	mov	r3, r1
 80040e6:	4614      	mov	r4, r2
 80040e8:	195b      	adds	r3, r3, r5
 80040ea:	eb44 0406 	adc.w	r4, r4, r6
 80040ee:	f04f 0100 	mov.w	r1, #0
 80040f2:	f04f 0200 	mov.w	r2, #0
 80040f6:	0262      	lsls	r2, r4, #9
 80040f8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80040fc:	0259      	lsls	r1, r3, #9
 80040fe:	460b      	mov	r3, r1
 8004100:	4614      	mov	r4, r2
 8004102:	4618      	mov	r0, r3
 8004104:	4621      	mov	r1, r4
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f04f 0400 	mov.w	r4, #0
 800410c:	461a      	mov	r2, r3
 800410e:	4623      	mov	r3, r4
 8004110:	f7fc f860 	bl	80001d4 <__aeabi_uldivmod>
 8004114:	4603      	mov	r3, r0
 8004116:	460c      	mov	r4, r1
 8004118:	60fb      	str	r3, [r7, #12]
 800411a:	e049      	b.n	80041b0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800411c:	4b2f      	ldr	r3, [pc, #188]	; (80041dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	099b      	lsrs	r3, r3, #6
 8004122:	f04f 0400 	mov.w	r4, #0
 8004126:	f240 11ff 	movw	r1, #511	; 0x1ff
 800412a:	f04f 0200 	mov.w	r2, #0
 800412e:	ea03 0501 	and.w	r5, r3, r1
 8004132:	ea04 0602 	and.w	r6, r4, r2
 8004136:	4629      	mov	r1, r5
 8004138:	4632      	mov	r2, r6
 800413a:	f04f 0300 	mov.w	r3, #0
 800413e:	f04f 0400 	mov.w	r4, #0
 8004142:	0154      	lsls	r4, r2, #5
 8004144:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004148:	014b      	lsls	r3, r1, #5
 800414a:	4619      	mov	r1, r3
 800414c:	4622      	mov	r2, r4
 800414e:	1b49      	subs	r1, r1, r5
 8004150:	eb62 0206 	sbc.w	r2, r2, r6
 8004154:	f04f 0300 	mov.w	r3, #0
 8004158:	f04f 0400 	mov.w	r4, #0
 800415c:	0194      	lsls	r4, r2, #6
 800415e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004162:	018b      	lsls	r3, r1, #6
 8004164:	1a5b      	subs	r3, r3, r1
 8004166:	eb64 0402 	sbc.w	r4, r4, r2
 800416a:	f04f 0100 	mov.w	r1, #0
 800416e:	f04f 0200 	mov.w	r2, #0
 8004172:	00e2      	lsls	r2, r4, #3
 8004174:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004178:	00d9      	lsls	r1, r3, #3
 800417a:	460b      	mov	r3, r1
 800417c:	4614      	mov	r4, r2
 800417e:	195b      	adds	r3, r3, r5
 8004180:	eb44 0406 	adc.w	r4, r4, r6
 8004184:	f04f 0100 	mov.w	r1, #0
 8004188:	f04f 0200 	mov.w	r2, #0
 800418c:	02a2      	lsls	r2, r4, #10
 800418e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004192:	0299      	lsls	r1, r3, #10
 8004194:	460b      	mov	r3, r1
 8004196:	4614      	mov	r4, r2
 8004198:	4618      	mov	r0, r3
 800419a:	4621      	mov	r1, r4
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f04f 0400 	mov.w	r4, #0
 80041a2:	461a      	mov	r2, r3
 80041a4:	4623      	mov	r3, r4
 80041a6:	f7fc f815 	bl	80001d4 <__aeabi_uldivmod>
 80041aa:	4603      	mov	r3, r0
 80041ac:	460c      	mov	r4, r1
 80041ae:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80041b0:	4b0a      	ldr	r3, [pc, #40]	; (80041dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	0c1b      	lsrs	r3, r3, #16
 80041b6:	f003 0303 	and.w	r3, r3, #3
 80041ba:	3301      	adds	r3, #1
 80041bc:	005b      	lsls	r3, r3, #1
 80041be:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80041c0:	68fa      	ldr	r2, [r7, #12]
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041c8:	60bb      	str	r3, [r7, #8]
      break;
 80041ca:	e002      	b.n	80041d2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041cc:	4b04      	ldr	r3, [pc, #16]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80041ce:	60bb      	str	r3, [r7, #8]
      break;
 80041d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041d2:	68bb      	ldr	r3, [r7, #8]
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3714      	adds	r7, #20
 80041d8:	46bd      	mov	sp, r7
 80041da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041dc:	40023800 	.word	0x40023800
 80041e0:	00f42400 	.word	0x00f42400
 80041e4:	007a1200 	.word	0x007a1200

080041e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041e8:	b480      	push	{r7}
 80041ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041ec:	4b02      	ldr	r3, [pc, #8]	; (80041f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80041ee:	681b      	ldr	r3, [r3, #0]
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bc80      	pop	{r7}
 80041f6:	4770      	bx	lr
 80041f8:	20000000 	.word	0x20000000

080041fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b082      	sub	sp, #8
 8004200:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8004202:	f7ff fff1 	bl	80041e8 <HAL_RCC_GetHCLKFreq>
 8004206:	4601      	mov	r1, r0
 8004208:	4b0b      	ldr	r3, [pc, #44]	; (8004238 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8004210:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8004214:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	fa92 f2a2 	rbit	r2, r2
 800421c:	603a      	str	r2, [r7, #0]
  return result;
 800421e:	683a      	ldr	r2, [r7, #0]
 8004220:	fab2 f282 	clz	r2, r2
 8004224:	b2d2      	uxtb	r2, r2
 8004226:	40d3      	lsrs	r3, r2
 8004228:	4a04      	ldr	r2, [pc, #16]	; (800423c <HAL_RCC_GetPCLK1Freq+0x40>)
 800422a:	5cd3      	ldrb	r3, [r2, r3]
 800422c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004230:	4618      	mov	r0, r3
 8004232:	3708      	adds	r7, #8
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}
 8004238:	40023800 	.word	0x40023800
 800423c:	0800de60 	.word	0x0800de60

08004240 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8004246:	f7ff ffcf 	bl	80041e8 <HAL_RCC_GetHCLKFreq>
 800424a:	4601      	mov	r1, r0
 800424c:	4b0b      	ldr	r3, [pc, #44]	; (800427c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004254:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8004258:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	fa92 f2a2 	rbit	r2, r2
 8004260:	603a      	str	r2, [r7, #0]
  return result;
 8004262:	683a      	ldr	r2, [r7, #0]
 8004264:	fab2 f282 	clz	r2, r2
 8004268:	b2d2      	uxtb	r2, r2
 800426a:	40d3      	lsrs	r3, r2
 800426c:	4a04      	ldr	r2, [pc, #16]	; (8004280 <HAL_RCC_GetPCLK2Freq+0x40>)
 800426e:	5cd3      	ldrb	r3, [r2, r3]
 8004270:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004274:	4618      	mov	r0, r3
 8004276:	3708      	adds	r7, #8
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	40023800 	.word	0x40023800
 8004280:	0800de60 	.word	0x0800de60

08004284 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b082      	sub	sp, #8
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d101      	bne.n	8004296 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e022      	b.n	80042dc <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d105      	bne.n	80042ae <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f7fc fcdd 	bl	8000c68 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2203      	movs	r2, #3
 80042b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 f814 	bl	80042e4 <HAL_SD_InitCard>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d001      	beq.n	80042c6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e00a      	b.n	80042dc <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80042da:	2300      	movs	r3, #0
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3708      	adds	r7, #8
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80042e4:	b5b0      	push	{r4, r5, r7, lr}
 80042e6:	b08e      	sub	sp, #56	; 0x38
 80042e8:	af04      	add	r7, sp, #16
 80042ea:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80042ec:	2300      	movs	r3, #0
 80042ee:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80042f0:	2300      	movs	r3, #0
 80042f2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80042f4:	2300      	movs	r3, #0
 80042f6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80042f8:	2300      	movs	r3, #0
 80042fa:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80042fc:	2300      	movs	r3, #0
 80042fe:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8004300:	2376      	movs	r3, #118	; 0x76
 8004302:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681d      	ldr	r5, [r3, #0]
 8004308:	466c      	mov	r4, sp
 800430a:	f107 0314 	add.w	r3, r7, #20
 800430e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004312:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004316:	f107 0308 	add.w	r3, r7, #8
 800431a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800431c:	4628      	mov	r0, r5
 800431e:	f001 fda5 	bl	8005e6c <SDIO_Init>
 8004322:	4603      	mov	r3, r0
 8004324:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8004328:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800432c:	2b00      	cmp	r3, #0
 800432e:	d001      	beq.n	8004334 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e031      	b.n	8004398 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8004334:	4b1a      	ldr	r3, [pc, #104]	; (80043a0 <HAL_SD_InitCard+0xbc>)
 8004336:	2200      	movs	r2, #0
 8004338:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4618      	mov	r0, r3
 8004340:	f001 fdda 	bl	8005ef8 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8004344:	4b16      	ldr	r3, [pc, #88]	; (80043a0 <HAL_SD_InitCard+0xbc>)
 8004346:	2201      	movs	r2, #1
 8004348:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f001 f8f0 	bl	8005530 <SD_PowerON>
 8004350:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004352:	6a3b      	ldr	r3, [r7, #32]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d00b      	beq.n	8004370 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004364:	6a3b      	ldr	r3, [r7, #32]
 8004366:	431a      	orrs	r2, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e013      	b.n	8004398 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f001 f80f 	bl	8005394 <SD_InitCard>
 8004376:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004378:	6a3b      	ldr	r3, [r7, #32]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d00b      	beq.n	8004396 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2201      	movs	r2, #1
 8004382:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800438a:	6a3b      	ldr	r3, [r7, #32]
 800438c:	431a      	orrs	r2, r3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e000      	b.n	8004398 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8004396:	2300      	movs	r3, #0
}
 8004398:	4618      	mov	r0, r3
 800439a:	3728      	adds	r7, #40	; 0x28
 800439c:	46bd      	mov	sp, r7
 800439e:	bdb0      	pop	{r4, r5, r7, pc}
 80043a0:	422580a0 	.word	0x422580a0

080043a4 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b092      	sub	sp, #72	; 0x48
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	607a      	str	r2, [r7, #4]
 80043b0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80043b2:	f7fc fef3 	bl	800119c <HAL_GetTick>
 80043b6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d107      	bne.n	80043d6 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ca:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e1d9      	b.n	800478a <HAL_SD_ReadBlocks+0x3e6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	2b01      	cmp	r3, #1
 80043e0:	f040 81cc 	bne.w	800477c <HAL_SD_ReadBlocks+0x3d8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2200      	movs	r2, #0
 80043e8:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80043ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	441a      	add	r2, r3
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d907      	bls.n	8004408 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043fc:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e1c0      	b.n	800478a <HAL_SD_ReadBlocks+0x3e6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2203      	movs	r2, #3
 800440c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2200      	movs	r2, #0
 8004416:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800441c:	2b01      	cmp	r3, #1
 800441e:	d002      	beq.n	8004426 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8004420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004422:	025b      	lsls	r3, r3, #9
 8004424:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800442e:	4618      	mov	r0, r3
 8004430:	f001 fdf0 	bl	8006014 <SDMMC_CmdBlockLength>
 8004434:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 8004436:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004438:	2b00      	cmp	r3, #0
 800443a:	d00f      	beq.n	800445c <HAL_SD_ReadBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a9b      	ldr	r2, [pc, #620]	; (80046b0 <HAL_SD_ReadBlocks+0x30c>)
 8004442:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004448:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800444a:	431a      	orrs	r2, r3
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e196      	b.n	800478a <HAL_SD_ReadBlocks+0x3e6>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800445c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004460:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	025b      	lsls	r3, r3, #9
 8004466:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004468:	2390      	movs	r3, #144	; 0x90
 800446a:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800446c:	2302      	movs	r3, #2
 800446e:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004470:	2300      	movs	r3, #0
 8004472:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8004474:	2301      	movs	r3, #1
 8004476:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f107 0214 	add.w	r2, r7, #20
 8004480:	4611      	mov	r1, r2
 8004482:	4618      	mov	r0, r3
 8004484:	f001 fd9b 	bl	8005fbe <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	2b01      	cmp	r3, #1
 800448c:	d90a      	bls.n	80044a4 <HAL_SD_ReadBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2202      	movs	r2, #2
 8004492:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800449a:	4618      	mov	r0, r3
 800449c:	f001 fdfe 	bl	800609c <SDMMC_CmdReadMultiBlock>
 80044a0:	6478      	str	r0, [r7, #68]	; 0x44
 80044a2:	e009      	b.n	80044b8 <HAL_SD_ReadBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2201      	movs	r2, #1
 80044a8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80044b0:	4618      	mov	r0, r3
 80044b2:	f001 fdd1 	bl	8006058 <SDMMC_CmdReadSingleBlock>
 80044b6:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80044b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d012      	beq.n	80044e4 <HAL_SD_ReadBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a7b      	ldr	r2, [pc, #492]	; (80046b0 <HAL_SD_ReadBlocks+0x30c>)
 80044c4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044cc:	431a      	orrs	r2, r3
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2201      	movs	r2, #1
 80044d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2200      	movs	r2, #0
 80044de:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e152      	b.n	800478a <HAL_SD_ReadBlocks+0x3e6>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80044e8:	e061      	b.n	80045ae <HAL_SD_ReadBlocks+0x20a>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d03c      	beq.n	8004572 <HAL_SD_ReadBlocks+0x1ce>
 80044f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d039      	beq.n	8004572 <HAL_SD_ReadBlocks+0x1ce>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80044fe:	2300      	movs	r3, #0
 8004500:	643b      	str	r3, [r7, #64]	; 0x40
 8004502:	e033      	b.n	800456c <HAL_SD_ReadBlocks+0x1c8>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4618      	mov	r0, r3
 800450a:	f001 fcd9 	bl	8005ec0 <SDIO_ReadFIFO>
 800450e:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8004510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004512:	b2da      	uxtb	r2, r3
 8004514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004516:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800451a:	3301      	adds	r3, #1
 800451c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800451e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004520:	3b01      	subs	r3, #1
 8004522:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8004524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004526:	0a1b      	lsrs	r3, r3, #8
 8004528:	b2da      	uxtb	r2, r3
 800452a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800452c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800452e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004530:	3301      	adds	r3, #1
 8004532:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004536:	3b01      	subs	r3, #1
 8004538:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800453a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800453c:	0c1b      	lsrs	r3, r3, #16
 800453e:	b2da      	uxtb	r2, r3
 8004540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004542:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004546:	3301      	adds	r3, #1
 8004548:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800454a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800454c:	3b01      	subs	r3, #1
 800454e:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8004550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004552:	0e1b      	lsrs	r3, r3, #24
 8004554:	b2da      	uxtb	r2, r3
 8004556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004558:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800455a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800455c:	3301      	adds	r3, #1
 800455e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004562:	3b01      	subs	r3, #1
 8004564:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8004566:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004568:	3301      	adds	r3, #1
 800456a:	643b      	str	r3, [r7, #64]	; 0x40
 800456c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800456e:	2b07      	cmp	r3, #7
 8004570:	d9c8      	bls.n	8004504 <HAL_SD_ReadBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8004572:	f7fc fe13 	bl	800119c <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800457e:	429a      	cmp	r2, r3
 8004580:	d902      	bls.n	8004588 <HAL_SD_ReadBlocks+0x1e4>
 8004582:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004584:	2b00      	cmp	r3, #0
 8004586:	d112      	bne.n	80045ae <HAL_SD_ReadBlocks+0x20a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a48      	ldr	r2, [pc, #288]	; (80046b0 <HAL_SD_ReadBlocks+0x30c>)
 800458e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004594:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2200      	movs	r2, #0
 80045a8:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e0ed      	b.n	800478a <HAL_SD_ReadBlocks+0x3e6>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045b4:	f240 332a 	movw	r3, #810	; 0x32a
 80045b8:	4013      	ands	r3, r2
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d095      	beq.n	80044ea <HAL_SD_ReadBlocks+0x146>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d022      	beq.n	8004612 <HAL_SD_ReadBlocks+0x26e>
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d91f      	bls.n	8004612 <HAL_SD_ReadBlocks+0x26e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045d6:	2b03      	cmp	r3, #3
 80045d8:	d01b      	beq.n	8004612 <HAL_SD_ReadBlocks+0x26e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4618      	mov	r0, r3
 80045e0:	f001 fdc2 	bl	8006168 <SDMMC_CmdStopTransfer>
 80045e4:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80045e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d012      	beq.n	8004612 <HAL_SD_ReadBlocks+0x26e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a2f      	ldr	r2, [pc, #188]	; (80046b0 <HAL_SD_ReadBlocks+0x30c>)
 80045f2:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045fa:	431a      	orrs	r2, r3
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2200      	movs	r2, #0
 800460c:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e0bb      	b.n	800478a <HAL_SD_ReadBlocks+0x3e6>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004618:	f003 0308 	and.w	r3, r3, #8
 800461c:	2b00      	cmp	r3, #0
 800461e:	d012      	beq.n	8004646 <HAL_SD_ReadBlocks+0x2a2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a22      	ldr	r2, [pc, #136]	; (80046b0 <HAL_SD_ReadBlocks+0x30c>)
 8004626:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462c:	f043 0208 	orr.w	r2, r3, #8
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2200      	movs	r2, #0
 8004640:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e0a1      	b.n	800478a <HAL_SD_ReadBlocks+0x3e6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800464c:	f003 0302 	and.w	r3, r3, #2
 8004650:	2b00      	cmp	r3, #0
 8004652:	d012      	beq.n	800467a <HAL_SD_ReadBlocks+0x2d6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a15      	ldr	r2, [pc, #84]	; (80046b0 <HAL_SD_ReadBlocks+0x30c>)
 800465a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004660:	f043 0202 	orr.w	r2, r3, #2
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2200      	movs	r2, #0
 8004674:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e087      	b.n	800478a <HAL_SD_ReadBlocks+0x3e6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004680:	f003 0320 	and.w	r3, r3, #32
 8004684:	2b00      	cmp	r3, #0
 8004686:	d064      	beq.n	8004752 <HAL_SD_ReadBlocks+0x3ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a08      	ldr	r2, [pc, #32]	; (80046b0 <HAL_SD_ReadBlocks+0x30c>)
 800468e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004694:	f043 0220 	orr.w	r2, r3, #32
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2200      	movs	r2, #0
 80046a8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e06d      	b.n	800478a <HAL_SD_ReadBlocks+0x3e6>
 80046ae:	bf00      	nop
 80046b0:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4618      	mov	r0, r3
 80046ba:	f001 fc01 	bl	8005ec0 <SDIO_ReadFIFO>
 80046be:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 80046c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046c2:	b2da      	uxtb	r2, r3
 80046c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046c6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80046c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046ca:	3301      	adds	r3, #1
 80046cc:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80046ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046d0:	3b01      	subs	r3, #1
 80046d2:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80046d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046d6:	0a1b      	lsrs	r3, r3, #8
 80046d8:	b2da      	uxtb	r2, r3
 80046da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046dc:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80046de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046e0:	3301      	adds	r3, #1
 80046e2:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80046e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046e6:	3b01      	subs	r3, #1
 80046e8:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80046ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ec:	0c1b      	lsrs	r3, r3, #16
 80046ee:	b2da      	uxtb	r2, r3
 80046f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046f2:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80046f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046f6:	3301      	adds	r3, #1
 80046f8:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80046fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046fc:	3b01      	subs	r3, #1
 80046fe:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8004700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004702:	0e1b      	lsrs	r3, r3, #24
 8004704:	b2da      	uxtb	r2, r3
 8004706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004708:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800470a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800470c:	3301      	adds	r3, #1
 800470e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8004710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004712:	3b01      	subs	r3, #1
 8004714:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8004716:	f7fc fd41 	bl	800119c <HAL_GetTick>
 800471a:	4602      	mov	r2, r0
 800471c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004722:	429a      	cmp	r2, r3
 8004724:	d902      	bls.n	800472c <HAL_SD_ReadBlocks+0x388>
 8004726:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004728:	2b00      	cmp	r3, #0
 800472a:	d112      	bne.n	8004752 <HAL_SD_ReadBlocks+0x3ae>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a18      	ldr	r2, [pc, #96]	; (8004794 <HAL_SD_ReadBlocks+0x3f0>)
 8004732:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004738:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2200      	movs	r2, #0
 800474c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e01b      	b.n	800478a <HAL_SD_ReadBlocks+0x3e6>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004758:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d002      	beq.n	8004766 <HAL_SD_ReadBlocks+0x3c2>
 8004760:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004762:	2b00      	cmp	r3, #0
 8004764:	d1a6      	bne.n	80046b4 <HAL_SD_ReadBlocks+0x310>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f240 523a 	movw	r2, #1338	; 0x53a
 800476e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8004778:	2300      	movs	r3, #0
 800477a:	e006      	b.n	800478a <HAL_SD_ReadBlocks+0x3e6>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004780:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
  }
}
 800478a:	4618      	mov	r0, r3
 800478c:	3748      	adds	r7, #72	; 0x48
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	004005ff 	.word	0x004005ff

08004798 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b092      	sub	sp, #72	; 0x48
 800479c:	af00      	add	r7, sp, #0
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	607a      	str	r2, [r7, #4]
 80047a4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80047a6:	f7fc fcf9 	bl	800119c <HAL_GetTick>
 80047aa:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d107      	bne.n	80047ca <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047be:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e184      	b.n	8004ad4 <HAL_SD_WriteBlocks+0x33c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	f040 8177 	bne.w	8004ac6 <HAL_SD_WriteBlocks+0x32e>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2200      	movs	r2, #0
 80047dc:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80047de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	441a      	add	r2, r3
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d907      	bls.n	80047fc <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e16b      	b.n	8004ad4 <HAL_SD_WriteBlocks+0x33c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2203      	movs	r2, #3
 8004800:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2200      	movs	r2, #0
 800480a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004810:	2b01      	cmp	r3, #1
 8004812:	d002      	beq.n	800481a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8004814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004816:	025b      	lsls	r3, r3, #9
 8004818:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004822:	4618      	mov	r0, r3
 8004824:	f001 fbf6 	bl	8006014 <SDMMC_CmdBlockLength>
 8004828:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 800482a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800482c:	2b00      	cmp	r3, #0
 800482e:	d00f      	beq.n	8004850 <HAL_SD_WriteBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a9d      	ldr	r2, [pc, #628]	; (8004aac <HAL_SD_WriteBlocks+0x314>)
 8004836:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800483c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800483e:	431a      	orrs	r2, r3
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e141      	b.n	8004ad4 <HAL_SD_WriteBlocks+0x33c>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004850:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004854:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	025b      	lsls	r3, r3, #9
 800485a:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800485c:	2390      	movs	r3, #144	; 0x90
 800485e:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8004860:	2300      	movs	r3, #0
 8004862:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004864:	2300      	movs	r3, #0
 8004866:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8004868:	2301      	movs	r3, #1
 800486a:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f107 0218 	add.w	r2, r7, #24
 8004874:	4611      	mov	r1, r2
 8004876:	4618      	mov	r0, r3
 8004878:	f001 fba1 	bl	8005fbe <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	2b01      	cmp	r3, #1
 8004880:	d90a      	bls.n	8004898 <HAL_SD_WriteBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2220      	movs	r2, #32
 8004886:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800488e:	4618      	mov	r0, r3
 8004890:	f001 fc48 	bl	8006124 <SDMMC_CmdWriteMultiBlock>
 8004894:	6478      	str	r0, [r7, #68]	; 0x44
 8004896:	e009      	b.n	80048ac <HAL_SD_WriteBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2210      	movs	r2, #16
 800489c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80048a4:	4618      	mov	r0, r3
 80048a6:	f001 fc1b 	bl	80060e0 <SDMMC_CmdWriteSingleBlock>
 80048aa:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80048ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d012      	beq.n	80048d8 <HAL_SD_WriteBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a7d      	ldr	r2, [pc, #500]	; (8004aac <HAL_SD_WriteBlocks+0x314>)
 80048b8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048c0:	431a      	orrs	r2, r3
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2201      	movs	r2, #1
 80048ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2200      	movs	r2, #0
 80048d2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e0fd      	b.n	8004ad4 <HAL_SD_WriteBlocks+0x33c>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80048dc:	e065      	b.n	80049aa <HAL_SD_WriteBlocks+0x212>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d040      	beq.n	800496e <HAL_SD_WriteBlocks+0x1d6>
 80048ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d03d      	beq.n	800496e <HAL_SD_WriteBlocks+0x1d6>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80048f2:	2300      	movs	r3, #0
 80048f4:	643b      	str	r3, [r7, #64]	; 0x40
 80048f6:	e037      	b.n	8004968 <HAL_SD_WriteBlocks+0x1d0>
        {
          data = (uint32_t)(*tempbuff);
 80048f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80048fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004900:	3301      	adds	r3, #1
 8004902:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004906:	3b01      	subs	r3, #1
 8004908:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800490a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	021a      	lsls	r2, r3, #8
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	4313      	orrs	r3, r2
 8004914:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004918:	3301      	adds	r3, #1
 800491a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800491c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800491e:	3b01      	subs	r3, #1
 8004920:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8004922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	041a      	lsls	r2, r3, #16
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	4313      	orrs	r3, r2
 800492c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800492e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004930:	3301      	adds	r3, #1
 8004932:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004934:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004936:	3b01      	subs	r3, #1
 8004938:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800493a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	061a      	lsls	r2, r3, #24
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	4313      	orrs	r3, r2
 8004944:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004948:	3301      	adds	r3, #1
 800494a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800494c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800494e:	3b01      	subs	r3, #1
 8004950:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f107 0214 	add.w	r2, r7, #20
 800495a:	4611      	mov	r1, r2
 800495c:	4618      	mov	r0, r3
 800495e:	f001 fabb 	bl	8005ed8 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8004962:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004964:	3301      	adds	r3, #1
 8004966:	643b      	str	r3, [r7, #64]	; 0x40
 8004968:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800496a:	2b07      	cmp	r3, #7
 800496c:	d9c4      	bls.n	80048f8 <HAL_SD_WriteBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800496e:	f7fc fc15 	bl	800119c <HAL_GetTick>
 8004972:	4602      	mov	r2, r0
 8004974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800497a:	429a      	cmp	r2, r3
 800497c:	d902      	bls.n	8004984 <HAL_SD_WriteBlocks+0x1ec>
 800497e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004980:	2b00      	cmp	r3, #0
 8004982:	d112      	bne.n	80049aa <HAL_SD_WriteBlocks+0x212>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a48      	ldr	r2, [pc, #288]	; (8004aac <HAL_SD_WriteBlocks+0x314>)
 800498a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004990:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004992:	431a      	orrs	r2, r3
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2200      	movs	r2, #0
 80049a4:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80049a6:	2303      	movs	r3, #3
 80049a8:	e094      	b.n	8004ad4 <HAL_SD_WriteBlocks+0x33c>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049b0:	f240 331a 	movw	r3, #794	; 0x31a
 80049b4:	4013      	ands	r3, r2
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d091      	beq.n	80048de <HAL_SD_WriteBlocks+0x146>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d022      	beq.n	8004a0e <HAL_SD_WriteBlocks+0x276>
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d91f      	bls.n	8004a0e <HAL_SD_WriteBlocks+0x276>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049d2:	2b03      	cmp	r3, #3
 80049d4:	d01b      	beq.n	8004a0e <HAL_SD_WriteBlocks+0x276>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4618      	mov	r0, r3
 80049dc:	f001 fbc4 	bl	8006168 <SDMMC_CmdStopTransfer>
 80049e0:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80049e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d012      	beq.n	8004a0e <HAL_SD_WriteBlocks+0x276>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a2f      	ldr	r2, [pc, #188]	; (8004aac <HAL_SD_WriteBlocks+0x314>)
 80049ee:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049f6:	431a      	orrs	r2, r3
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2200      	movs	r2, #0
 8004a08:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e062      	b.n	8004ad4 <HAL_SD_WriteBlocks+0x33c>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a14:	f003 0308 	and.w	r3, r3, #8
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d012      	beq.n	8004a42 <HAL_SD_WriteBlocks+0x2aa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a22      	ldr	r2, [pc, #136]	; (8004aac <HAL_SD_WriteBlocks+0x314>)
 8004a22:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a28:	f043 0208 	orr.w	r2, r3, #8
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e048      	b.n	8004ad4 <HAL_SD_WriteBlocks+0x33c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a48:	f003 0302 	and.w	r3, r3, #2
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d012      	beq.n	8004a76 <HAL_SD_WriteBlocks+0x2de>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a15      	ldr	r2, [pc, #84]	; (8004aac <HAL_SD_WriteBlocks+0x314>)
 8004a56:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a5c:	f043 0202 	orr.w	r2, r3, #2
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e02e      	b.n	8004ad4 <HAL_SD_WriteBlocks+0x33c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a7c:	f003 0310 	and.w	r3, r3, #16
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d015      	beq.n	8004ab0 <HAL_SD_WriteBlocks+0x318>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a08      	ldr	r2, [pc, #32]	; (8004aac <HAL_SD_WriteBlocks+0x314>)
 8004a8a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a90:	f043 0210 	orr.w	r2, r3, #16
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e014      	b.n	8004ad4 <HAL_SD_WriteBlocks+0x33c>
 8004aaa:	bf00      	nop
 8004aac:	004005ff 	.word	0x004005ff
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f240 523a 	movw	r2, #1338	; 0x53a
 8004ab8:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2201      	movs	r2, #1
 8004abe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	e006      	b.n	8004ad4 <HAL_SD_WriteBlocks+0x33c>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aca:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
  }
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3748      	adds	r7, #72	; 0x48
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}

08004adc <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae8:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004af0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d008      	beq.n	8004b0a <HAL_SD_IRQHandler+0x2e>
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f003 0308 	and.w	r3, r3, #8
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d003      	beq.n	8004b0a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 ff2a 	bl	800595c <SD_Read_IT>
 8004b08:	e157      	b.n	8004dba <HAL_SD_IRQHandler+0x2de>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	f000 808f 	beq.w	8004c38 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b22:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	6812      	ldr	r2, [r2, #0]
 8004b2e:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8004b32:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8004b36:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f022 0201 	bic.w	r2, r2, #1
 8004b46:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f003 0308 	and.w	r3, r3, #8
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d039      	beq.n	8004bc6 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f003 0302 	and.w	r3, r3, #2
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d104      	bne.n	8004b66 <HAL_SD_IRQHandler+0x8a>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f003 0320 	and.w	r3, r3, #32
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d011      	beq.n	8004b8a <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f001 fafc 	bl	8006168 <SDMMC_CmdStopTransfer>
 8004b70:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d008      	beq.n	8004b8a <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	431a      	orrs	r2, r3
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f000 f921 	bl	8004dcc <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f240 523a 	movw	r2, #1338	; 0x53a
 8004b92:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f003 0301 	and.w	r3, r3, #1
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d104      	bne.n	8004bb6 <HAL_SD_IRQHandler+0xda>
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f003 0302 	and.w	r3, r3, #2
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d003      	beq.n	8004bbe <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f003 fa18 	bl	8007fec <HAL_SD_RxCpltCallback>
 8004bbc:	e0fd      	b.n	8004dba <HAL_SD_IRQHandler+0x2de>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f003 fa0a 	bl	8007fd8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004bc4:	e0f9      	b.n	8004dba <HAL_SD_IRQHandler+0x2de>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	f000 80f4 	beq.w	8004dba <HAL_SD_IRQHandler+0x2de>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f003 0320 	and.w	r3, r3, #32
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d011      	beq.n	8004c00 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4618      	mov	r0, r3
 8004be2:	f001 fac1 	bl	8006168 <SDMMC_CmdStopTransfer>
 8004be6:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d008      	beq.n	8004c00 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	431a      	orrs	r2, r3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f000 f8e6 	bl	8004dcc <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f003 0301 	and.w	r3, r3, #1
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	f040 80d7 	bne.w	8004dba <HAL_SD_IRQHandler+0x2de>
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f003 0302 	and.w	r3, r3, #2
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	f040 80d1 	bne.w	8004dba <HAL_SD_IRQHandler+0x2de>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f022 0208 	bic.w	r2, r2, #8
 8004c26:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f003 f9d1 	bl	8007fd8 <HAL_SD_TxCpltCallback>
}
 8004c36:	e0c0      	b.n	8004dba <HAL_SD_IRQHandler+0x2de>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d008      	beq.n	8004c58 <HAL_SD_IRQHandler+0x17c>
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f003 0308 	and.w	r3, r3, #8
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d003      	beq.n	8004c58 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f000 fed4 	bl	80059fe <SD_Write_IT>
 8004c56:	e0b0      	b.n	8004dba <HAL_SD_IRQHandler+0x2de>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c5e:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	f000 80a9 	beq.w	8004dba <HAL_SD_IRQHandler+0x2de>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c6e:	f003 0302 	and.w	r3, r3, #2
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d005      	beq.n	8004c82 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c7a:	f043 0202 	orr.w	r2, r3, #2
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c88:	f003 0308 	and.w	r3, r3, #8
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d005      	beq.n	8004c9c <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c94:	f043 0208 	orr.w	r2, r3, #8
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ca2:	f003 0320 	and.w	r3, r3, #32
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d005      	beq.n	8004cb6 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cae:	f043 0220 	orr.w	r2, r3, #32
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cbc:	f003 0310 	and.w	r3, r3, #16
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d005      	beq.n	8004cd0 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc8:	f043 0210 	orr.w	r2, r3, #16
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f240 723a 	movw	r2, #1850	; 0x73a
 8004cd8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	6812      	ldr	r2, [r2, #0]
 8004ce4:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8004ce8:	f023 0302 	bic.w	r3, r3, #2
 8004cec:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f001 fa38 	bl	8006168 <SDMMC_CmdStopTransfer>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cfe:	431a      	orrs	r2, r3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f003 0308 	and.w	r3, r3, #8
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d00a      	beq.n	8004d24 <HAL_SD_IRQHandler+0x248>
      hsd->State = HAL_SD_STATE_READY;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2201      	movs	r2, #1
 8004d12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f000 f855 	bl	8004dcc <HAL_SD_ErrorCallback>
}
 8004d22:	e04a      	b.n	8004dba <HAL_SD_IRQHandler+0x2de>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d045      	beq.n	8004dba <HAL_SD_IRQHandler+0x2de>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f003 0310 	and.w	r3, r3, #16
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d104      	bne.n	8004d42 <HAL_SD_IRQHandler+0x266>
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f003 0320 	and.w	r3, r3, #32
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d011      	beq.n	8004d66 <HAL_SD_IRQHandler+0x28a>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d46:	4a1f      	ldr	r2, [pc, #124]	; (8004dc4 <HAL_SD_IRQHandler+0x2e8>)
 8004d48:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7fc fc0c 	bl	800156c <HAL_DMA_Abort_IT>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d02f      	beq.n	8004dba <HAL_SD_IRQHandler+0x2de>
          SD_DMATxAbort(hsd->hdmatx);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f000 faaa 	bl	80052b8 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004d64:	e029      	b.n	8004dba <HAL_SD_IRQHandler+0x2de>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f003 0301 	and.w	r3, r3, #1
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d104      	bne.n	8004d7a <HAL_SD_IRQHandler+0x29e>
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f003 0302 	and.w	r3, r3, #2
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d011      	beq.n	8004d9e <HAL_SD_IRQHandler+0x2c2>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7e:	4a12      	ldr	r2, [pc, #72]	; (8004dc8 <HAL_SD_IRQHandler+0x2ec>)
 8004d80:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d86:	4618      	mov	r0, r3
 8004d88:	f7fc fbf0 	bl	800156c <HAL_DMA_Abort_IT>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d013      	beq.n	8004dba <HAL_SD_IRQHandler+0x2de>
          SD_DMARxAbort(hsd->hdmarx);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d96:	4618      	mov	r0, r3
 8004d98:	f000 fac5 	bl	8005326 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004d9c:	e00d      	b.n	8004dba <HAL_SD_IRQHandler+0x2de>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f003 f906 	bl	8007fc4 <HAL_SD_AbortCallback>
}
 8004db8:	e7ff      	b.n	8004dba <HAL_SD_IRQHandler+0x2de>
 8004dba:	bf00      	nop
 8004dbc:	3710      	adds	r7, #16
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	080052b9 	.word	0x080052b9
 8004dc8:	08005327 	.word	0x08005327

08004dcc <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8004dd4:	bf00      	nop
 8004dd6:	370c      	adds	r7, #12
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bc80      	pop	{r7}
 8004ddc:	4770      	bx	lr
	...

08004de0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dee:	0f9b      	lsrs	r3, r3, #30
 8004df0:	b2da      	uxtb	r2, r3
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dfa:	0e9b      	lsrs	r3, r3, #26
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	f003 030f 	and.w	r3, r3, #15
 8004e02:	b2da      	uxtb	r2, r3
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e0c:	0e1b      	lsrs	r3, r3, #24
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	f003 0303 	and.w	r3, r3, #3
 8004e14:	b2da      	uxtb	r2, r3
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e1e:	0c1b      	lsrs	r3, r3, #16
 8004e20:	b2da      	uxtb	r2, r3
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e2a:	0a1b      	lsrs	r3, r3, #8
 8004e2c:	b2da      	uxtb	r2, r3
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e36:	b2da      	uxtb	r2, r3
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e40:	0d1b      	lsrs	r3, r3, #20
 8004e42:	b29a      	uxth	r2, r3
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e4c:	0c1b      	lsrs	r3, r3, #16
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	f003 030f 	and.w	r3, r3, #15
 8004e54:	b2da      	uxtb	r2, r3
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e5e:	0bdb      	lsrs	r3, r3, #15
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	f003 0301 	and.w	r3, r3, #1
 8004e66:	b2da      	uxtb	r2, r3
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e70:	0b9b      	lsrs	r3, r3, #14
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	f003 0301 	and.w	r3, r3, #1
 8004e78:	b2da      	uxtb	r2, r3
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e82:	0b5b      	lsrs	r3, r3, #13
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	f003 0301 	and.w	r3, r3, #1
 8004e8a:	b2da      	uxtb	r2, r3
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e94:	0b1b      	lsrs	r3, r3, #12
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	f003 0301 	and.w	r3, r3, #1
 8004e9c:	b2da      	uxtb	r2, r3
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d163      	bne.n	8004f78 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004eb4:	009a      	lsls	r2, r3, #2
 8004eb6:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004eba:	4013      	ands	r3, r2
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004ec0:	0f92      	lsrs	r2, r2, #30
 8004ec2:	431a      	orrs	r2, r3
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ecc:	0edb      	lsrs	r3, r3, #27
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	f003 0307 	and.w	r3, r3, #7
 8004ed4:	b2da      	uxtb	r2, r3
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ede:	0e1b      	lsrs	r3, r3, #24
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	f003 0307 	and.w	r3, r3, #7
 8004ee6:	b2da      	uxtb	r2, r3
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ef0:	0d5b      	lsrs	r3, r3, #21
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	f003 0307 	and.w	r3, r3, #7
 8004ef8:	b2da      	uxtb	r2, r3
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f02:	0c9b      	lsrs	r3, r3, #18
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	f003 0307 	and.w	r3, r3, #7
 8004f0a:	b2da      	uxtb	r2, r3
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f14:	0bdb      	lsrs	r3, r3, #15
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	f003 0307 	and.w	r3, r3, #7
 8004f1c:	b2da      	uxtb	r2, r3
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	1c5a      	adds	r2, r3, #1
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	7e1b      	ldrb	r3, [r3, #24]
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	f003 0307 	and.w	r3, r3, #7
 8004f36:	3302      	adds	r3, #2
 8004f38:	2201      	movs	r2, #1
 8004f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004f42:	fb02 f203 	mul.w	r2, r2, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	7a1b      	ldrb	r3, [r3, #8]
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	f003 030f 	and.w	r3, r3, #15
 8004f54:	2201      	movs	r2, #1
 8004f56:	409a      	lsls	r2, r3
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004f64:	0a52      	lsrs	r2, r2, #9
 8004f66:	fb02 f203 	mul.w	r2, r2, r3
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f74:	661a      	str	r2, [r3, #96]	; 0x60
 8004f76:	e031      	b.n	8004fdc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d11d      	bne.n	8004fbc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f84:	041b      	lsls	r3, r3, #16
 8004f86:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f8e:	0c1b      	lsrs	r3, r3, #16
 8004f90:	431a      	orrs	r2, r3
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	691b      	ldr	r3, [r3, #16]
 8004f9a:	3301      	adds	r3, #1
 8004f9c:	029a      	lsls	r2, r3, #10
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fb0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	661a      	str	r2, [r3, #96]	; 0x60
 8004fba:	e00f      	b.n	8004fdc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a58      	ldr	r2, [pc, #352]	; (8005124 <HAL_SD_GetCardCSD+0x344>)
 8004fc2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e09d      	b.n	8005118 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fe0:	0b9b      	lsrs	r3, r3, #14
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	f003 0301 	and.w	r3, r3, #1
 8004fe8:	b2da      	uxtb	r2, r3
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ff2:	09db      	lsrs	r3, r3, #7
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ffa:	b2da      	uxtb	r2, r3
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005004:	b2db      	uxtb	r3, r3
 8005006:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800500a:	b2da      	uxtb	r2, r3
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005014:	0fdb      	lsrs	r3, r3, #31
 8005016:	b2da      	uxtb	r2, r3
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005020:	0f5b      	lsrs	r3, r3, #29
 8005022:	b2db      	uxtb	r3, r3
 8005024:	f003 0303 	and.w	r3, r3, #3
 8005028:	b2da      	uxtb	r2, r3
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005032:	0e9b      	lsrs	r3, r3, #26
 8005034:	b2db      	uxtb	r3, r3
 8005036:	f003 0307 	and.w	r3, r3, #7
 800503a:	b2da      	uxtb	r2, r3
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005044:	0d9b      	lsrs	r3, r3, #22
 8005046:	b2db      	uxtb	r3, r3
 8005048:	f003 030f 	and.w	r3, r3, #15
 800504c:	b2da      	uxtb	r2, r3
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005056:	0d5b      	lsrs	r3, r3, #21
 8005058:	b2db      	uxtb	r3, r3
 800505a:	f003 0301 	and.w	r3, r3, #1
 800505e:	b2da      	uxtb	r2, r3
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	2200      	movs	r2, #0
 800506a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005072:	0c1b      	lsrs	r3, r3, #16
 8005074:	b2db      	uxtb	r3, r3
 8005076:	f003 0301 	and.w	r3, r3, #1
 800507a:	b2da      	uxtb	r2, r3
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005086:	0bdb      	lsrs	r3, r3, #15
 8005088:	b2db      	uxtb	r3, r3
 800508a:	f003 0301 	and.w	r3, r3, #1
 800508e:	b2da      	uxtb	r2, r3
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800509a:	0b9b      	lsrs	r3, r3, #14
 800509c:	b2db      	uxtb	r3, r3
 800509e:	f003 0301 	and.w	r3, r3, #1
 80050a2:	b2da      	uxtb	r2, r3
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ae:	0b5b      	lsrs	r3, r3, #13
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	f003 0301 	and.w	r3, r3, #1
 80050b6:	b2da      	uxtb	r2, r3
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050c2:	0b1b      	lsrs	r3, r3, #12
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	f003 0301 	and.w	r3, r3, #1
 80050ca:	b2da      	uxtb	r2, r3
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050d6:	0a9b      	lsrs	r3, r3, #10
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	f003 0303 	and.w	r3, r3, #3
 80050de:	b2da      	uxtb	r2, r3
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ea:	0a1b      	lsrs	r3, r3, #8
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	f003 0303 	and.w	r3, r3, #3
 80050f2:	b2da      	uxtb	r2, r3
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050fe:	085b      	lsrs	r3, r3, #1
 8005100:	b2db      	uxtb	r3, r3
 8005102:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005106:	b2da      	uxtb	r2, r3
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	2201      	movs	r2, #1
 8005112:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8005116:	2300      	movs	r3, #0
}
 8005118:	4618      	mov	r0, r3
 800511a:	370c      	adds	r7, #12
 800511c:	46bd      	mov	sp, r7
 800511e:	bc80      	pop	{r7}
 8005120:	4770      	bx	lr
 8005122:	bf00      	nop
 8005124:	004005ff 	.word	0x004005ff

08005128 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8005128:	b480      	push	{r7}
 800512a:	b083      	sub	sp, #12
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	370c      	adds	r7, #12
 8005178:	46bd      	mov	sp, r7
 800517a:	bc80      	pop	{r7}
 800517c:	4770      	bx	lr
	...

08005180 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8005180:	b5b0      	push	{r4, r5, r7, lr}
 8005182:	b08e      	sub	sp, #56	; 0x38
 8005184:	af04      	add	r7, sp, #16
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2203      	movs	r2, #3
 800518e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005196:	2b03      	cmp	r3, #3
 8005198:	d02e      	beq.n	80051f8 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051a0:	d106      	bne.n	80051b0 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	639a      	str	r2, [r3, #56]	; 0x38
 80051ae:	e029      	b.n	8005204 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051b6:	d10a      	bne.n	80051ce <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f000 fa6f 	bl	800569c <SD_WideBus_Enable>
 80051be:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c6:	431a      	orrs	r2, r3
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	639a      	str	r2, [r3, #56]	; 0x38
 80051cc:	e01a      	b.n	8005204 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d10a      	bne.n	80051ea <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f000 faac 	bl	8005732 <SD_WideBus_Disable>
 80051da:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e2:	431a      	orrs	r2, r3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	639a      	str	r2, [r3, #56]	; 0x38
 80051e8:	e00c      	b.n	8005204 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ee:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	639a      	str	r2, [r3, #56]	; 0x38
 80051f6:	e005      	b.n	8005204 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051fc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005208:	2b00      	cmp	r3, #0
 800520a:	d009      	beq.n	8005220 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a18      	ldr	r2, [pc, #96]	; (8005274 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8005212:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	e024      	b.n	800526a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	695b      	ldr	r3, [r3, #20]
 800523a:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	699b      	ldr	r3, [r3, #24]
 8005240:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681d      	ldr	r5, [r3, #0]
 8005246:	466c      	mov	r4, sp
 8005248:	f107 0318 	add.w	r3, r7, #24
 800524c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005250:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005254:	f107 030c 	add.w	r3, r7, #12
 8005258:	cb0e      	ldmia	r3, {r1, r2, r3}
 800525a:	4628      	mov	r0, r5
 800525c:	f000 fe06 	bl	8005e6c <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005268:	2300      	movs	r3, #0
}
 800526a:	4618      	mov	r0, r3
 800526c:	3728      	adds	r7, #40	; 0x28
 800526e:	46bd      	mov	sp, r7
 8005270:	bdb0      	pop	{r4, r5, r7, pc}
 8005272:	bf00      	nop
 8005274:	004005ff 	.word	0x004005ff

08005278 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b086      	sub	sp, #24
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005280:	2300      	movs	r3, #0
 8005282:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005284:	f107 030c 	add.w	r3, r7, #12
 8005288:	4619      	mov	r1, r3
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f000 f9de 	bl	800564c <SD_SendStatus>
 8005290:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d005      	beq.n	80052a4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	431a      	orrs	r2, r3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	0a5b      	lsrs	r3, r3, #9
 80052a8:	f003 030f 	and.w	r3, r3, #15
 80052ac:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80052ae:	693b      	ldr	r3, [r7, #16]
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3718      	adds	r7, #24
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}

080052b8 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c4:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f240 523a 	movw	r2, #1338	; 0x53a
 80052ce:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80052d0:	68f8      	ldr	r0, [r7, #12]
 80052d2:	f7ff ffd1 	bl	8005278 <HAL_SD_GetCardState>
 80052d6:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2201      	movs	r2, #1
 80052dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2200      	movs	r2, #0
 80052e4:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	2b06      	cmp	r3, #6
 80052ea:	d002      	beq.n	80052f2 <SD_DMATxAbort+0x3a>
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	2b05      	cmp	r3, #5
 80052f0:	d10a      	bne.n	8005308 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4618      	mov	r0, r3
 80052f8:	f000 ff36 	bl	8006168 <SDMMC_CmdStopTransfer>
 80052fc:	4602      	mov	r2, r0
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005302:	431a      	orrs	r2, r3
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800530c:	2b00      	cmp	r3, #0
 800530e:	d103      	bne.n	8005318 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8005310:	68f8      	ldr	r0, [r7, #12]
 8005312:	f002 fe57 	bl	8007fc4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8005316:	e002      	b.n	800531e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8005318:	68f8      	ldr	r0, [r7, #12]
 800531a:	f7ff fd57 	bl	8004dcc <HAL_SD_ErrorCallback>
}
 800531e:	bf00      	nop
 8005320:	3710      	adds	r7, #16
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}

08005326 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8005326:	b580      	push	{r7, lr}
 8005328:	b084      	sub	sp, #16
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005332:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f240 523a 	movw	r2, #1338	; 0x53a
 800533c:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800533e:	68f8      	ldr	r0, [r7, #12]
 8005340:	f7ff ff9a 	bl	8005278 <HAL_SD_GetCardState>
 8005344:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2201      	movs	r2, #1
 800534a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2200      	movs	r2, #0
 8005352:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	2b06      	cmp	r3, #6
 8005358:	d002      	beq.n	8005360 <SD_DMARxAbort+0x3a>
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	2b05      	cmp	r3, #5
 800535e:	d10a      	bne.n	8005376 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4618      	mov	r0, r3
 8005366:	f000 feff 	bl	8006168 <SDMMC_CmdStopTransfer>
 800536a:	4602      	mov	r2, r0
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005370:	431a      	orrs	r2, r3
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800537a:	2b00      	cmp	r3, #0
 800537c:	d103      	bne.n	8005386 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800537e:	68f8      	ldr	r0, [r7, #12]
 8005380:	f002 fe20 	bl	8007fc4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8005384:	e002      	b.n	800538c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8005386:	68f8      	ldr	r0, [r7, #12]
 8005388:	f7ff fd20 	bl	8004dcc <HAL_SD_ErrorCallback>
}
 800538c:	bf00      	nop
 800538e:	3710      	adds	r7, #16
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005394:	b5b0      	push	{r4, r5, r7, lr}
 8005396:	b094      	sub	sp, #80	; 0x50
 8005398:	af04      	add	r7, sp, #16
 800539a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800539c:	2301      	movs	r3, #1
 800539e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4618      	mov	r0, r3
 80053a6:	f000 fdb6 	bl	8005f16 <SDIO_GetPowerState>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d102      	bne.n	80053b6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80053b0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80053b4:	e0b7      	b.n	8005526 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ba:	2b03      	cmp	r3, #3
 80053bc:	d02f      	beq.n	800541e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4618      	mov	r0, r3
 80053c4:	f000 ffda 	bl	800637c <SDMMC_CmdSendCID>
 80053c8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80053ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d001      	beq.n	80053d4 <SD_InitCard+0x40>
    {
      return errorstate;
 80053d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053d2:	e0a8      	b.n	8005526 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2100      	movs	r1, #0
 80053da:	4618      	mov	r0, r3
 80053dc:	f000 fddd 	bl	8005f9a <SDIO_GetResponse>
 80053e0:	4602      	mov	r2, r0
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	2104      	movs	r1, #4
 80053ec:	4618      	mov	r0, r3
 80053ee:	f000 fdd4 	bl	8005f9a <SDIO_GetResponse>
 80053f2:	4602      	mov	r2, r0
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	2108      	movs	r1, #8
 80053fe:	4618      	mov	r0, r3
 8005400:	f000 fdcb 	bl	8005f9a <SDIO_GetResponse>
 8005404:	4602      	mov	r2, r0
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	210c      	movs	r1, #12
 8005410:	4618      	mov	r0, r3
 8005412:	f000 fdc2 	bl	8005f9a <SDIO_GetResponse>
 8005416:	4602      	mov	r2, r0
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005422:	2b03      	cmp	r3, #3
 8005424:	d00d      	beq.n	8005442 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f107 020e 	add.w	r2, r7, #14
 800542e:	4611      	mov	r1, r2
 8005430:	4618      	mov	r0, r3
 8005432:	f000 ffe0 	bl	80063f6 <SDMMC_CmdSetRelAdd>
 8005436:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800543a:	2b00      	cmp	r3, #0
 800543c:	d001      	beq.n	8005442 <SD_InitCard+0xae>
    {
      return errorstate;
 800543e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005440:	e071      	b.n	8005526 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005446:	2b03      	cmp	r3, #3
 8005448:	d036      	beq.n	80054b8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800544a:	89fb      	ldrh	r3, [r7, #14]
 800544c:	461a      	mov	r2, r3
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800545a:	041b      	lsls	r3, r3, #16
 800545c:	4619      	mov	r1, r3
 800545e:	4610      	mov	r0, r2
 8005460:	f000 ffaa 	bl	80063b8 <SDMMC_CmdSendCSD>
 8005464:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005468:	2b00      	cmp	r3, #0
 800546a:	d001      	beq.n	8005470 <SD_InitCard+0xdc>
    {
      return errorstate;
 800546c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800546e:	e05a      	b.n	8005526 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2100      	movs	r1, #0
 8005476:	4618      	mov	r0, r3
 8005478:	f000 fd8f 	bl	8005f9a <SDIO_GetResponse>
 800547c:	4602      	mov	r2, r0
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	2104      	movs	r1, #4
 8005488:	4618      	mov	r0, r3
 800548a:	f000 fd86 	bl	8005f9a <SDIO_GetResponse>
 800548e:	4602      	mov	r2, r0
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	2108      	movs	r1, #8
 800549a:	4618      	mov	r0, r3
 800549c:	f000 fd7d 	bl	8005f9a <SDIO_GetResponse>
 80054a0:	4602      	mov	r2, r0
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	210c      	movs	r1, #12
 80054ac:	4618      	mov	r0, r3
 80054ae:	f000 fd74 	bl	8005f9a <SDIO_GetResponse>
 80054b2:	4602      	mov	r2, r0
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	2104      	movs	r1, #4
 80054be:	4618      	mov	r0, r3
 80054c0:	f000 fd6b 	bl	8005f9a <SDIO_GetResponse>
 80054c4:	4603      	mov	r3, r0
 80054c6:	0d1a      	lsrs	r2, r3, #20
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80054cc:	f107 0310 	add.w	r3, r7, #16
 80054d0:	4619      	mov	r1, r3
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f7ff fc84 	bl	8004de0 <HAL_SD_GetCardCSD>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d002      	beq.n	80054e4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80054de:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80054e2:	e020      	b.n	8005526 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6819      	ldr	r1, [r3, #0]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054ec:	041b      	lsls	r3, r3, #16
 80054ee:	f04f 0400 	mov.w	r4, #0
 80054f2:	461a      	mov	r2, r3
 80054f4:	4623      	mov	r3, r4
 80054f6:	4608      	mov	r0, r1
 80054f8:	f000 fe58 	bl	80061ac <SDMMC_CmdSelDesel>
 80054fc:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80054fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005500:	2b00      	cmp	r3, #0
 8005502:	d001      	beq.n	8005508 <SD_InitCard+0x174>
  {
    return errorstate;
 8005504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005506:	e00e      	b.n	8005526 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681d      	ldr	r5, [r3, #0]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	466c      	mov	r4, sp
 8005510:	f103 0210 	add.w	r2, r3, #16
 8005514:	ca07      	ldmia	r2, {r0, r1, r2}
 8005516:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800551a:	3304      	adds	r3, #4
 800551c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800551e:	4628      	mov	r0, r5
 8005520:	f000 fca4 	bl	8005e6c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005524:	2300      	movs	r3, #0
}
 8005526:	4618      	mov	r0, r3
 8005528:	3740      	adds	r7, #64	; 0x40
 800552a:	46bd      	mov	sp, r7
 800552c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005530 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b086      	sub	sp, #24
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005538:	2300      	movs	r3, #0
 800553a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800553c:	2300      	movs	r3, #0
 800553e:	617b      	str	r3, [r7, #20]
 8005540:	2300      	movs	r3, #0
 8005542:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4618      	mov	r0, r3
 800554a:	f000 fe52 	bl	80061f2 <SDMMC_CmdGoIdleState>
 800554e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d001      	beq.n	800555a <SD_PowerON+0x2a>
  {
    return errorstate;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	e072      	b.n	8005640 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4618      	mov	r0, r3
 8005560:	f000 fe65 	bl	800622e <SDMMC_CmdOperCond>
 8005564:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d00d      	beq.n	8005588 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4618      	mov	r0, r3
 8005578:	f000 fe3b 	bl	80061f2 <SDMMC_CmdGoIdleState>
 800557c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d004      	beq.n	800558e <SD_PowerON+0x5e>
    {
      return errorstate;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	e05b      	b.n	8005640 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2201      	movs	r2, #1
 800558c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005592:	2b01      	cmp	r3, #1
 8005594:	d137      	bne.n	8005606 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	2100      	movs	r1, #0
 800559c:	4618      	mov	r0, r3
 800559e:	f000 fe65 	bl	800626c <SDMMC_CmdAppCommand>
 80055a2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d02d      	beq.n	8005606 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80055aa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80055ae:	e047      	b.n	8005640 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	2100      	movs	r1, #0
 80055b6:	4618      	mov	r0, r3
 80055b8:	f000 fe58 	bl	800626c <SDMMC_CmdAppCommand>
 80055bc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d001      	beq.n	80055c8 <SD_PowerON+0x98>
    {
      return errorstate;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	e03b      	b.n	8005640 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	491e      	ldr	r1, [pc, #120]	; (8005648 <SD_PowerON+0x118>)
 80055ce:	4618      	mov	r0, r3
 80055d0:	f000 fe6e 	bl	80062b0 <SDMMC_CmdAppOperCommand>
 80055d4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d002      	beq.n	80055e2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80055dc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80055e0:	e02e      	b.n	8005640 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	2100      	movs	r1, #0
 80055e8:	4618      	mov	r0, r3
 80055ea:	f000 fcd6 	bl	8005f9a <SDIO_GetResponse>
 80055ee:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	0fdb      	lsrs	r3, r3, #31
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d101      	bne.n	80055fc <SD_PowerON+0xcc>
 80055f8:	2301      	movs	r3, #1
 80055fa:	e000      	b.n	80055fe <SD_PowerON+0xce>
 80055fc:	2300      	movs	r3, #0
 80055fe:	613b      	str	r3, [r7, #16]

    count++;
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	3301      	adds	r3, #1
 8005604:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800560c:	4293      	cmp	r3, r2
 800560e:	d802      	bhi.n	8005616 <SD_PowerON+0xe6>
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d0cc      	beq.n	80055b0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800561c:	4293      	cmp	r3, r2
 800561e:	d902      	bls.n	8005626 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005620:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005624:	e00c      	b.n	8005640 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800562c:	2b00      	cmp	r3, #0
 800562e:	d003      	beq.n	8005638 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	645a      	str	r2, [r3, #68]	; 0x44
 8005636:	e002      	b.n	800563e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800563e:	2300      	movs	r3, #0
}
 8005640:	4618      	mov	r0, r3
 8005642:	3718      	adds	r7, #24
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}
 8005648:	c1100000 	.word	0xc1100000

0800564c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b084      	sub	sp, #16
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d102      	bne.n	8005662 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800565c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005660:	e018      	b.n	8005694 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800566a:	041b      	lsls	r3, r3, #16
 800566c:	4619      	mov	r1, r3
 800566e:	4610      	mov	r0, r2
 8005670:	f000 fee2 	bl	8006438 <SDMMC_CmdSendStatus>
 8005674:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d001      	beq.n	8005680 <SD_SendStatus+0x34>
  {
    return errorstate;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	e009      	b.n	8005694 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	2100      	movs	r1, #0
 8005686:	4618      	mov	r0, r3
 8005688:	f000 fc87 	bl	8005f9a <SDIO_GetResponse>
 800568c:	4602      	mov	r2, r0
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8005692:	2300      	movs	r3, #0
}
 8005694:	4618      	mov	r0, r3
 8005696:	3710      	adds	r7, #16
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b086      	sub	sp, #24
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80056a4:	2300      	movs	r3, #0
 80056a6:	60fb      	str	r3, [r7, #12]
 80056a8:	2300      	movs	r3, #0
 80056aa:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	2100      	movs	r1, #0
 80056b2:	4618      	mov	r0, r3
 80056b4:	f000 fc71 	bl	8005f9a <SDIO_GetResponse>
 80056b8:	4603      	mov	r3, r0
 80056ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80056c2:	d102      	bne.n	80056ca <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80056c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80056c8:	e02f      	b.n	800572a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80056ca:	f107 030c 	add.w	r3, r7, #12
 80056ce:	4619      	mov	r1, r3
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f000 f879 	bl	80057c8 <SD_FindSCR>
 80056d6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d001      	beq.n	80056e2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	e023      	b.n	800572a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d01c      	beq.n	8005726 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056f4:	041b      	lsls	r3, r3, #16
 80056f6:	4619      	mov	r1, r3
 80056f8:	4610      	mov	r0, r2
 80056fa:	f000 fdb7 	bl	800626c <SDMMC_CmdAppCommand>
 80056fe:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d001      	beq.n	800570a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	e00f      	b.n	800572a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	2102      	movs	r1, #2
 8005710:	4618      	mov	r0, r3
 8005712:	f000 fdf0 	bl	80062f6 <SDMMC_CmdBusWidth>
 8005716:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d001      	beq.n	8005722 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	e003      	b.n	800572a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005722:	2300      	movs	r3, #0
 8005724:	e001      	b.n	800572a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005726:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800572a:	4618      	mov	r0, r3
 800572c:	3718      	adds	r7, #24
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}

08005732 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8005732:	b580      	push	{r7, lr}
 8005734:	b086      	sub	sp, #24
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800573a:	2300      	movs	r3, #0
 800573c:	60fb      	str	r3, [r7, #12]
 800573e:	2300      	movs	r3, #0
 8005740:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	2100      	movs	r1, #0
 8005748:	4618      	mov	r0, r3
 800574a:	f000 fc26 	bl	8005f9a <SDIO_GetResponse>
 800574e:	4603      	mov	r3, r0
 8005750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005754:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005758:	d102      	bne.n	8005760 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800575a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800575e:	e02f      	b.n	80057c0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005760:	f107 030c 	add.w	r3, r7, #12
 8005764:	4619      	mov	r1, r3
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f000 f82e 	bl	80057c8 <SD_FindSCR>
 800576c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d001      	beq.n	8005778 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	e023      	b.n	80057c0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800577e:	2b00      	cmp	r3, #0
 8005780:	d01c      	beq.n	80057bc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800578a:	041b      	lsls	r3, r3, #16
 800578c:	4619      	mov	r1, r3
 800578e:	4610      	mov	r0, r2
 8005790:	f000 fd6c 	bl	800626c <SDMMC_CmdAppCommand>
 8005794:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d001      	beq.n	80057a0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	e00f      	b.n	80057c0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	2100      	movs	r1, #0
 80057a6:	4618      	mov	r0, r3
 80057a8:	f000 fda5 	bl	80062f6 <SDMMC_CmdBusWidth>
 80057ac:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d001      	beq.n	80057b8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	e003      	b.n	80057c0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80057b8:	2300      	movs	r3, #0
 80057ba:	e001      	b.n	80057c0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80057bc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3718      	adds	r7, #24
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80057c8:	b590      	push	{r4, r7, lr}
 80057ca:	b08f      	sub	sp, #60	; 0x3c
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80057d2:	f7fb fce3 	bl	800119c <HAL_GetTick>
 80057d6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80057d8:	2300      	movs	r3, #0
 80057da:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80057dc:	2300      	movs	r3, #0
 80057de:	60bb      	str	r3, [r7, #8]
 80057e0:	2300      	movs	r3, #0
 80057e2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	2108      	movs	r1, #8
 80057ee:	4618      	mov	r0, r3
 80057f0:	f000 fc10 	bl	8006014 <SDMMC_CmdBlockLength>
 80057f4:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80057f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d001      	beq.n	8005800 <SD_FindSCR+0x38>
  {
    return errorstate;
 80057fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057fe:	e0a9      	b.n	8005954 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005808:	041b      	lsls	r3, r3, #16
 800580a:	4619      	mov	r1, r3
 800580c:	4610      	mov	r0, r2
 800580e:	f000 fd2d 	bl	800626c <SDMMC_CmdAppCommand>
 8005812:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005816:	2b00      	cmp	r3, #0
 8005818:	d001      	beq.n	800581e <SD_FindSCR+0x56>
  {
    return errorstate;
 800581a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800581c:	e09a      	b.n	8005954 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800581e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005822:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8005824:	2308      	movs	r3, #8
 8005826:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8005828:	2330      	movs	r3, #48	; 0x30
 800582a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800582c:	2302      	movs	r3, #2
 800582e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005830:	2300      	movs	r3, #0
 8005832:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8005834:	2301      	movs	r3, #1
 8005836:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f107 0210 	add.w	r2, r7, #16
 8005840:	4611      	mov	r1, r2
 8005842:	4618      	mov	r0, r3
 8005844:	f000 fbbb 	bl	8005fbe <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4618      	mov	r0, r3
 800584e:	f000 fd74 	bl	800633a <SDMMC_CmdSendSCR>
 8005852:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005856:	2b00      	cmp	r3, #0
 8005858:	d022      	beq.n	80058a0 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800585a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800585c:	e07a      	b.n	8005954 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005864:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005868:	2b00      	cmp	r3, #0
 800586a:	d00e      	beq.n	800588a <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6819      	ldr	r1, [r3, #0]
 8005870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	f107 0208 	add.w	r2, r7, #8
 8005878:	18d4      	adds	r4, r2, r3
 800587a:	4608      	mov	r0, r1
 800587c:	f000 fb20 	bl	8005ec0 <SDIO_ReadFIFO>
 8005880:	4603      	mov	r3, r0
 8005882:	6023      	str	r3, [r4, #0]
      index++;
 8005884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005886:	3301      	adds	r3, #1
 8005888:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800588a:	f7fb fc87 	bl	800119c <HAL_GetTick>
 800588e:	4602      	mov	r2, r0
 8005890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005892:	1ad3      	subs	r3, r2, r3
 8005894:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005898:	d102      	bne.n	80058a0 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800589a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800589e:	e059      	b.n	8005954 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058a6:	f240 432a 	movw	r3, #1066	; 0x42a
 80058aa:	4013      	ands	r3, r2
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d0d6      	beq.n	800585e <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058b6:	f003 0308 	and.w	r3, r3, #8
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d005      	beq.n	80058ca <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2208      	movs	r2, #8
 80058c4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80058c6:	2308      	movs	r3, #8
 80058c8:	e044      	b.n	8005954 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058d0:	f003 0302 	and.w	r3, r3, #2
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d005      	beq.n	80058e4 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	2202      	movs	r2, #2
 80058de:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80058e0:	2302      	movs	r3, #2
 80058e2:	e037      	b.n	8005954 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ea:	f003 0320 	and.w	r3, r3, #32
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d005      	beq.n	80058fe <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	2220      	movs	r2, #32
 80058f8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80058fa:	2320      	movs	r3, #32
 80058fc:	e02a      	b.n	8005954 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f240 523a 	movw	r2, #1338	; 0x53a
 8005906:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	061a      	lsls	r2, r3, #24
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	021b      	lsls	r3, r3, #8
 8005910:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005914:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	0a1b      	lsrs	r3, r3, #8
 800591a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800591e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	0e1b      	lsrs	r3, r3, #24
 8005924:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005928:	601a      	str	r2, [r3, #0]
    scr++;
 800592a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800592c:	3304      	adds	r3, #4
 800592e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	061a      	lsls	r2, r3, #24
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	021b      	lsls	r3, r3, #8
 8005938:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800593c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	0a1b      	lsrs	r3, r3, #8
 8005942:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005946:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	0e1b      	lsrs	r3, r3, #24
 800594c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800594e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005950:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8005952:	2300      	movs	r3, #0
}
 8005954:	4618      	mov	r0, r3
 8005956:	373c      	adds	r7, #60	; 0x3c
 8005958:	46bd      	mov	sp, r7
 800595a:	bd90      	pop	{r4, r7, pc}

0800595c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b086      	sub	sp, #24
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005968:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800596e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d03f      	beq.n	80059f6 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8005976:	2300      	movs	r3, #0
 8005978:	617b      	str	r3, [r7, #20]
 800597a:	e033      	b.n	80059e4 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4618      	mov	r0, r3
 8005982:	f000 fa9d 	bl	8005ec0 <SDIO_ReadFIFO>
 8005986:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	b2da      	uxtb	r2, r3
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	3301      	adds	r3, #1
 8005994:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	3b01      	subs	r3, #1
 800599a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	0a1b      	lsrs	r3, r3, #8
 80059a0:	b2da      	uxtb	r2, r3
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	701a      	strb	r2, [r3, #0]
      tmp++;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	3301      	adds	r3, #1
 80059aa:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	3b01      	subs	r3, #1
 80059b0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	0c1b      	lsrs	r3, r3, #16
 80059b6:	b2da      	uxtb	r2, r3
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	701a      	strb	r2, [r3, #0]
      tmp++;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	3301      	adds	r3, #1
 80059c0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	3b01      	subs	r3, #1
 80059c6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	0e1b      	lsrs	r3, r3, #24
 80059cc:	b2da      	uxtb	r2, r3
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	701a      	strb	r2, [r3, #0]
      tmp++;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	3301      	adds	r3, #1
 80059d6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	3b01      	subs	r3, #1
 80059dc:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	3301      	adds	r3, #1
 80059e2:	617b      	str	r3, [r7, #20]
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	2b07      	cmp	r3, #7
 80059e8:	d9c8      	bls.n	800597c <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	68fa      	ldr	r2, [r7, #12]
 80059ee:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	693a      	ldr	r2, [r7, #16]
 80059f4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80059f6:	bf00      	nop
 80059f8:	3718      	adds	r7, #24
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}

080059fe <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80059fe:	b580      	push	{r7, lr}
 8005a00:	b086      	sub	sp, #24
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6a1b      	ldr	r3, [r3, #32]
 8005a0a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a10:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d043      	beq.n	8005aa0 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8005a18:	2300      	movs	r3, #0
 8005a1a:	617b      	str	r3, [r7, #20]
 8005a1c:	e037      	b.n	8005a8e <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	3301      	adds	r3, #1
 8005a28:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	3b01      	subs	r3, #1
 8005a2e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	021a      	lsls	r2, r3, #8
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	3301      	adds	r3, #1
 8005a40:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	3b01      	subs	r3, #1
 8005a46:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	041a      	lsls	r2, r3, #16
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	4313      	orrs	r3, r2
 8005a52:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	3301      	adds	r3, #1
 8005a58:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	3b01      	subs	r3, #1
 8005a5e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	061a      	lsls	r2, r3, #24
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	3301      	adds	r3, #1
 8005a70:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	3b01      	subs	r3, #1
 8005a76:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f107 0208 	add.w	r2, r7, #8
 8005a80:	4611      	mov	r1, r2
 8005a82:	4618      	mov	r0, r3
 8005a84:	f000 fa28 	bl	8005ed8 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	617b      	str	r3, [r7, #20]
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	2b07      	cmp	r3, #7
 8005a92:	d9c4      	bls.n	8005a1e <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	68fa      	ldr	r2, [r7, #12]
 8005a98:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	693a      	ldr	r2, [r7, #16]
 8005a9e:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8005aa0:	bf00      	nop
 8005aa2:	3718      	adds	r7, #24
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}

08005aa8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b082      	sub	sp, #8
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d101      	bne.n	8005aba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e03f      	b.n	8005b3a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005ac0:	b2db      	uxtb	r3, r3
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d106      	bne.n	8005ad4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f7fb f9ba 	bl	8000e48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2224      	movs	r2, #36	; 0x24
 8005ad8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	68da      	ldr	r2, [r3, #12]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005aea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f000 f829 	bl	8005b44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	691a      	ldr	r2, [r3, #16]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	695a      	ldr	r2, [r3, #20]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	68da      	ldr	r2, [r3, #12]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2200      	movs	r2, #0
 8005b26:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2220      	movs	r2, #32
 8005b2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2220      	movs	r2, #32
 8005b34:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005b38:	2300      	movs	r3, #0
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3708      	adds	r7, #8
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
	...

08005b44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b084      	sub	sp, #16
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	691b      	ldr	r3, [r3, #16]
 8005b52:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	68da      	ldr	r2, [r3, #12]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	430a      	orrs	r2, r1
 8005b60:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	689a      	ldr	r2, [r3, #8]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	691b      	ldr	r3, [r3, #16]
 8005b6a:	431a      	orrs	r2, r3
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	695b      	ldr	r3, [r3, #20]
 8005b70:	431a      	orrs	r2, r3
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	69db      	ldr	r3, [r3, #28]
 8005b76:	4313      	orrs	r3, r2
 8005b78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005b84:	f023 030c 	bic.w	r3, r3, #12
 8005b88:	687a      	ldr	r2, [r7, #4]
 8005b8a:	6812      	ldr	r2, [r2, #0]
 8005b8c:	68f9      	ldr	r1, [r7, #12]
 8005b8e:	430b      	orrs	r3, r1
 8005b90:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	695b      	ldr	r3, [r3, #20]
 8005b98:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	699a      	ldr	r2, [r3, #24]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	430a      	orrs	r2, r1
 8005ba6:	615a      	str	r2, [r3, #20]

/* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	69db      	ldr	r3, [r3, #28]
 8005bac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bb0:	f040 80aa 	bne.w	8005d08 <UART_SetConfig+0x1c4>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4aa9      	ldr	r2, [pc, #676]	; (8005e60 <UART_SetConfig+0x31c>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d004      	beq.n	8005bc8 <UART_SetConfig+0x84>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4aa8      	ldr	r2, [pc, #672]	; (8005e64 <UART_SetConfig+0x320>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d14f      	bne.n	8005c68 <UART_SetConfig+0x124>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005bc8:	f7fe fb3a 	bl	8004240 <HAL_RCC_GetPCLK2Freq>
 8005bcc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005bce:	68ba      	ldr	r2, [r7, #8]
 8005bd0:	4613      	mov	r3, r2
 8005bd2:	009b      	lsls	r3, r3, #2
 8005bd4:	4413      	add	r3, r2
 8005bd6:	009a      	lsls	r2, r3, #2
 8005bd8:	441a      	add	r2, r3
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	005b      	lsls	r3, r3, #1
 8005be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005be4:	4aa0      	ldr	r2, [pc, #640]	; (8005e68 <UART_SetConfig+0x324>)
 8005be6:	fba2 2303 	umull	r2, r3, r2, r3
 8005bea:	095b      	lsrs	r3, r3, #5
 8005bec:	0119      	lsls	r1, r3, #4
 8005bee:	68ba      	ldr	r2, [r7, #8]
 8005bf0:	4613      	mov	r3, r2
 8005bf2:	009b      	lsls	r3, r3, #2
 8005bf4:	4413      	add	r3, r2
 8005bf6:	009a      	lsls	r2, r3, #2
 8005bf8:	441a      	add	r2, r3
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	005b      	lsls	r3, r3, #1
 8005c00:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c04:	4b98      	ldr	r3, [pc, #608]	; (8005e68 <UART_SetConfig+0x324>)
 8005c06:	fba3 0302 	umull	r0, r3, r3, r2
 8005c0a:	095b      	lsrs	r3, r3, #5
 8005c0c:	2064      	movs	r0, #100	; 0x64
 8005c0e:	fb00 f303 	mul.w	r3, r0, r3
 8005c12:	1ad3      	subs	r3, r2, r3
 8005c14:	00db      	lsls	r3, r3, #3
 8005c16:	3332      	adds	r3, #50	; 0x32
 8005c18:	4a93      	ldr	r2, [pc, #588]	; (8005e68 <UART_SetConfig+0x324>)
 8005c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c1e:	095b      	lsrs	r3, r3, #5
 8005c20:	005b      	lsls	r3, r3, #1
 8005c22:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005c26:	4419      	add	r1, r3
 8005c28:	68ba      	ldr	r2, [r7, #8]
 8005c2a:	4613      	mov	r3, r2
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	4413      	add	r3, r2
 8005c30:	009a      	lsls	r2, r3, #2
 8005c32:	441a      	add	r2, r3
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	005b      	lsls	r3, r3, #1
 8005c3a:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c3e:	4b8a      	ldr	r3, [pc, #552]	; (8005e68 <UART_SetConfig+0x324>)
 8005c40:	fba3 0302 	umull	r0, r3, r3, r2
 8005c44:	095b      	lsrs	r3, r3, #5
 8005c46:	2064      	movs	r0, #100	; 0x64
 8005c48:	fb00 f303 	mul.w	r3, r0, r3
 8005c4c:	1ad3      	subs	r3, r2, r3
 8005c4e:	00db      	lsls	r3, r3, #3
 8005c50:	3332      	adds	r3, #50	; 0x32
 8005c52:	4a85      	ldr	r2, [pc, #532]	; (8005e68 <UART_SetConfig+0x324>)
 8005c54:	fba2 2303 	umull	r2, r3, r2, r3
 8005c58:	095b      	lsrs	r3, r3, #5
 8005c5a:	f003 0207 	and.w	r2, r3, #7
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	440a      	add	r2, r1
 8005c64:	609a      	str	r2, [r3, #8]
 8005c66:	e0f7      	b.n	8005e58 <UART_SetConfig+0x314>
    }
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005c68:	f7fe fac8 	bl	80041fc <HAL_RCC_GetPCLK1Freq>
 8005c6c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005c6e:	68ba      	ldr	r2, [r7, #8]
 8005c70:	4613      	mov	r3, r2
 8005c72:	009b      	lsls	r3, r3, #2
 8005c74:	4413      	add	r3, r2
 8005c76:	009a      	lsls	r2, r3, #2
 8005c78:	441a      	add	r2, r3
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	005b      	lsls	r3, r3, #1
 8005c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c84:	4a78      	ldr	r2, [pc, #480]	; (8005e68 <UART_SetConfig+0x324>)
 8005c86:	fba2 2303 	umull	r2, r3, r2, r3
 8005c8a:	095b      	lsrs	r3, r3, #5
 8005c8c:	0119      	lsls	r1, r3, #4
 8005c8e:	68ba      	ldr	r2, [r7, #8]
 8005c90:	4613      	mov	r3, r2
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	4413      	add	r3, r2
 8005c96:	009a      	lsls	r2, r3, #2
 8005c98:	441a      	add	r2, r3
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	005b      	lsls	r3, r3, #1
 8005ca0:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ca4:	4b70      	ldr	r3, [pc, #448]	; (8005e68 <UART_SetConfig+0x324>)
 8005ca6:	fba3 0302 	umull	r0, r3, r3, r2
 8005caa:	095b      	lsrs	r3, r3, #5
 8005cac:	2064      	movs	r0, #100	; 0x64
 8005cae:	fb00 f303 	mul.w	r3, r0, r3
 8005cb2:	1ad3      	subs	r3, r2, r3
 8005cb4:	00db      	lsls	r3, r3, #3
 8005cb6:	3332      	adds	r3, #50	; 0x32
 8005cb8:	4a6b      	ldr	r2, [pc, #428]	; (8005e68 <UART_SetConfig+0x324>)
 8005cba:	fba2 2303 	umull	r2, r3, r2, r3
 8005cbe:	095b      	lsrs	r3, r3, #5
 8005cc0:	005b      	lsls	r3, r3, #1
 8005cc2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005cc6:	4419      	add	r1, r3
 8005cc8:	68ba      	ldr	r2, [r7, #8]
 8005cca:	4613      	mov	r3, r2
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	4413      	add	r3, r2
 8005cd0:	009a      	lsls	r2, r3, #2
 8005cd2:	441a      	add	r2, r3
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	005b      	lsls	r3, r3, #1
 8005cda:	fbb2 f2f3 	udiv	r2, r2, r3
 8005cde:	4b62      	ldr	r3, [pc, #392]	; (8005e68 <UART_SetConfig+0x324>)
 8005ce0:	fba3 0302 	umull	r0, r3, r3, r2
 8005ce4:	095b      	lsrs	r3, r3, #5
 8005ce6:	2064      	movs	r0, #100	; 0x64
 8005ce8:	fb00 f303 	mul.w	r3, r0, r3
 8005cec:	1ad3      	subs	r3, r2, r3
 8005cee:	00db      	lsls	r3, r3, #3
 8005cf0:	3332      	adds	r3, #50	; 0x32
 8005cf2:	4a5d      	ldr	r2, [pc, #372]	; (8005e68 <UART_SetConfig+0x324>)
 8005cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8005cf8:	095b      	lsrs	r3, r3, #5
 8005cfa:	f003 0207 	and.w	r2, r3, #7
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	440a      	add	r2, r1
 8005d04:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005d06:	e0a7      	b.n	8005e58 <UART_SetConfig+0x314>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a54      	ldr	r2, [pc, #336]	; (8005e60 <UART_SetConfig+0x31c>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d004      	beq.n	8005d1c <UART_SetConfig+0x1d8>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a53      	ldr	r2, [pc, #332]	; (8005e64 <UART_SetConfig+0x320>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d14e      	bne.n	8005dba <UART_SetConfig+0x276>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005d1c:	f7fe fa90 	bl	8004240 <HAL_RCC_GetPCLK2Freq>
 8005d20:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d22:	68ba      	ldr	r2, [r7, #8]
 8005d24:	4613      	mov	r3, r2
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	4413      	add	r3, r2
 8005d2a:	009a      	lsls	r2, r3, #2
 8005d2c:	441a      	add	r2, r3
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d38:	4a4b      	ldr	r2, [pc, #300]	; (8005e68 <UART_SetConfig+0x324>)
 8005d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d3e:	095b      	lsrs	r3, r3, #5
 8005d40:	0119      	lsls	r1, r3, #4
 8005d42:	68ba      	ldr	r2, [r7, #8]
 8005d44:	4613      	mov	r3, r2
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	4413      	add	r3, r2
 8005d4a:	009a      	lsls	r2, r3, #2
 8005d4c:	441a      	add	r2, r3
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	009b      	lsls	r3, r3, #2
 8005d54:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d58:	4b43      	ldr	r3, [pc, #268]	; (8005e68 <UART_SetConfig+0x324>)
 8005d5a:	fba3 0302 	umull	r0, r3, r3, r2
 8005d5e:	095b      	lsrs	r3, r3, #5
 8005d60:	2064      	movs	r0, #100	; 0x64
 8005d62:	fb00 f303 	mul.w	r3, r0, r3
 8005d66:	1ad3      	subs	r3, r2, r3
 8005d68:	011b      	lsls	r3, r3, #4
 8005d6a:	3332      	adds	r3, #50	; 0x32
 8005d6c:	4a3e      	ldr	r2, [pc, #248]	; (8005e68 <UART_SetConfig+0x324>)
 8005d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d72:	095b      	lsrs	r3, r3, #5
 8005d74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d78:	4419      	add	r1, r3
 8005d7a:	68ba      	ldr	r2, [r7, #8]
 8005d7c:	4613      	mov	r3, r2
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	4413      	add	r3, r2
 8005d82:	009a      	lsls	r2, r3, #2
 8005d84:	441a      	add	r2, r3
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	009b      	lsls	r3, r3, #2
 8005d8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d90:	4b35      	ldr	r3, [pc, #212]	; (8005e68 <UART_SetConfig+0x324>)
 8005d92:	fba3 0302 	umull	r0, r3, r3, r2
 8005d96:	095b      	lsrs	r3, r3, #5
 8005d98:	2064      	movs	r0, #100	; 0x64
 8005d9a:	fb00 f303 	mul.w	r3, r0, r3
 8005d9e:	1ad3      	subs	r3, r2, r3
 8005da0:	011b      	lsls	r3, r3, #4
 8005da2:	3332      	adds	r3, #50	; 0x32
 8005da4:	4a30      	ldr	r2, [pc, #192]	; (8005e68 <UART_SetConfig+0x324>)
 8005da6:	fba2 2303 	umull	r2, r3, r2, r3
 8005daa:	095b      	lsrs	r3, r3, #5
 8005dac:	f003 020f 	and.w	r2, r3, #15
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	440a      	add	r2, r1
 8005db6:	609a      	str	r2, [r3, #8]
 8005db8:	e04e      	b.n	8005e58 <UART_SetConfig+0x314>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005dba:	f7fe fa1f 	bl	80041fc <HAL_RCC_GetPCLK1Freq>
 8005dbe:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005dc0:	68ba      	ldr	r2, [r7, #8]
 8005dc2:	4613      	mov	r3, r2
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	4413      	add	r3, r2
 8005dc8:	009a      	lsls	r2, r3, #2
 8005dca:	441a      	add	r2, r3
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	009b      	lsls	r3, r3, #2
 8005dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dd6:	4a24      	ldr	r2, [pc, #144]	; (8005e68 <UART_SetConfig+0x324>)
 8005dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8005ddc:	095b      	lsrs	r3, r3, #5
 8005dde:	0119      	lsls	r1, r3, #4
 8005de0:	68ba      	ldr	r2, [r7, #8]
 8005de2:	4613      	mov	r3, r2
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	4413      	add	r3, r2
 8005de8:	009a      	lsls	r2, r3, #2
 8005dea:	441a      	add	r2, r3
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	009b      	lsls	r3, r3, #2
 8005df2:	fbb2 f2f3 	udiv	r2, r2, r3
 8005df6:	4b1c      	ldr	r3, [pc, #112]	; (8005e68 <UART_SetConfig+0x324>)
 8005df8:	fba3 0302 	umull	r0, r3, r3, r2
 8005dfc:	095b      	lsrs	r3, r3, #5
 8005dfe:	2064      	movs	r0, #100	; 0x64
 8005e00:	fb00 f303 	mul.w	r3, r0, r3
 8005e04:	1ad3      	subs	r3, r2, r3
 8005e06:	011b      	lsls	r3, r3, #4
 8005e08:	3332      	adds	r3, #50	; 0x32
 8005e0a:	4a17      	ldr	r2, [pc, #92]	; (8005e68 <UART_SetConfig+0x324>)
 8005e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8005e10:	095b      	lsrs	r3, r3, #5
 8005e12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e16:	4419      	add	r1, r3
 8005e18:	68ba      	ldr	r2, [r7, #8]
 8005e1a:	4613      	mov	r3, r2
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	4413      	add	r3, r2
 8005e20:	009a      	lsls	r2, r3, #2
 8005e22:	441a      	add	r2, r3
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e2e:	4b0e      	ldr	r3, [pc, #56]	; (8005e68 <UART_SetConfig+0x324>)
 8005e30:	fba3 0302 	umull	r0, r3, r3, r2
 8005e34:	095b      	lsrs	r3, r3, #5
 8005e36:	2064      	movs	r0, #100	; 0x64
 8005e38:	fb00 f303 	mul.w	r3, r0, r3
 8005e3c:	1ad3      	subs	r3, r2, r3
 8005e3e:	011b      	lsls	r3, r3, #4
 8005e40:	3332      	adds	r3, #50	; 0x32
 8005e42:	4a09      	ldr	r2, [pc, #36]	; (8005e68 <UART_SetConfig+0x324>)
 8005e44:	fba2 2303 	umull	r2, r3, r2, r3
 8005e48:	095b      	lsrs	r3, r3, #5
 8005e4a:	f003 020f 	and.w	r2, r3, #15
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	440a      	add	r2, r1
 8005e54:	609a      	str	r2, [r3, #8]
}
 8005e56:	e7ff      	b.n	8005e58 <UART_SetConfig+0x314>
 8005e58:	bf00      	nop
 8005e5a:	3710      	adds	r7, #16
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}
 8005e60:	40011000 	.word	0x40011000
 8005e64:	40011400 	.word	0x40011400
 8005e68:	51eb851f 	.word	0x51eb851f

08005e6c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8005e6c:	b084      	sub	sp, #16
 8005e6e:	b480      	push	{r7}
 8005e70:	b085      	sub	sp, #20
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	6078      	str	r0, [r7, #4]
 8005e76:	f107 001c 	add.w	r0, r7, #28
 8005e7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8005e82:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8005e84:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8005e86:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8005e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8005e8a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8005e8e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8005e92:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8005e96:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005e98:	68fa      	ldr	r2, [r7, #12]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8005ea6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005eaa:	68fa      	ldr	r2, [r7, #12]
 8005eac:	431a      	orrs	r2, r3
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005eb2:	2300      	movs	r3, #0
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3714      	adds	r7, #20
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bc80      	pop	{r7}
 8005ebc:	b004      	add	sp, #16
 8005ebe:	4770      	bx	lr

08005ec0 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	370c      	adds	r7, #12
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bc80      	pop	{r7}
 8005ed6:	4770      	bx	lr

08005ed8 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005eec:	2300      	movs	r3, #0
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	370c      	adds	r7, #12
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bc80      	pop	{r7}
 8005ef6:	4770      	bx	lr

08005ef8 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b082      	sub	sp, #8
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2203      	movs	r2, #3
 8005f04:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8005f06:	2002      	movs	r0, #2
 8005f08:	f7fb f952 	bl	80011b0 <HAL_Delay>
  
  return HAL_OK;
 8005f0c:	2300      	movs	r3, #0
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3708      	adds	r7, #8
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}

08005f16 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8005f16:	b480      	push	{r7}
 8005f18:	b083      	sub	sp, #12
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f003 0303 	and.w	r3, r3, #3
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	370c      	adds	r7, #12
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bc80      	pop	{r7}
 8005f2e:	4770      	bx	lr

08005f30 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b085      	sub	sp, #20
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005f4e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005f54:	431a      	orrs	r2, r3
                       Command->CPSM);
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8005f5a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005f5c:	68fa      	ldr	r2, [r7, #12]
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	68db      	ldr	r3, [r3, #12]
 8005f66:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005f6a:	f023 030f 	bic.w	r3, r3, #15
 8005f6e:	68fa      	ldr	r2, [r7, #12]
 8005f70:	431a      	orrs	r2, r3
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8005f76:	2300      	movs	r3, #0
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3714      	adds	r7, #20
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bc80      	pop	{r7}
 8005f80:	4770      	bx	lr

08005f82 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8005f82:	b480      	push	{r7}
 8005f84:	b083      	sub	sp, #12
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	b2db      	uxtb	r3, r3
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	370c      	adds	r7, #12
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bc80      	pop	{r7}
 8005f98:	4770      	bx	lr

08005f9a <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8005f9a:	b480      	push	{r7}
 8005f9c:	b085      	sub	sp, #20
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	6078      	str	r0, [r7, #4]
 8005fa2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	3314      	adds	r3, #20
 8005fa8:	461a      	mov	r2, r3
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	4413      	add	r3, r2
 8005fae:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
}  
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3714      	adds	r7, #20
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bc80      	pop	{r7}
 8005fbc:	4770      	bx	lr

08005fbe <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8005fbe:	b480      	push	{r7}
 8005fc0:	b085      	sub	sp, #20
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	6078      	str	r0, [r7, #4]
 8005fc6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	685a      	ldr	r2, [r3, #4]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005fe4:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8005fea:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8005ff0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005ff2:	68fa      	ldr	r2, [r7, #12]
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ffc:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	431a      	orrs	r2, r3
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006008:	2300      	movs	r3, #0

}
 800600a:	4618      	mov	r0, r3
 800600c:	3714      	adds	r7, #20
 800600e:	46bd      	mov	sp, r7
 8006010:	bc80      	pop	{r7}
 8006012:	4770      	bx	lr

08006014 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b088      	sub	sp, #32
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8006022:	2310      	movs	r3, #16
 8006024:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006026:	2340      	movs	r3, #64	; 0x40
 8006028:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800602a:	2300      	movs	r3, #0
 800602c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800602e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006032:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006034:	f107 0308 	add.w	r3, r7, #8
 8006038:	4619      	mov	r1, r3
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f7ff ff78 	bl	8005f30 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8006040:	f241 3288 	movw	r2, #5000	; 0x1388
 8006044:	2110      	movs	r1, #16
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f000 fa40 	bl	80064cc <SDMMC_GetCmdResp1>
 800604c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800604e:	69fb      	ldr	r3, [r7, #28]
}
 8006050:	4618      	mov	r0, r3
 8006052:	3720      	adds	r7, #32
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b088      	sub	sp, #32
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8006066:	2311      	movs	r3, #17
 8006068:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800606a:	2340      	movs	r3, #64	; 0x40
 800606c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800606e:	2300      	movs	r3, #0
 8006070:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006072:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006076:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006078:	f107 0308 	add.w	r3, r7, #8
 800607c:	4619      	mov	r1, r3
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f7ff ff56 	bl	8005f30 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8006084:	f241 3288 	movw	r2, #5000	; 0x1388
 8006088:	2111      	movs	r1, #17
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 fa1e 	bl	80064cc <SDMMC_GetCmdResp1>
 8006090:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006092:	69fb      	ldr	r3, [r7, #28]
}
 8006094:	4618      	mov	r0, r3
 8006096:	3720      	adds	r7, #32
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}

0800609c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b088      	sub	sp, #32
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80060aa:	2312      	movs	r3, #18
 80060ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80060ae:	2340      	movs	r3, #64	; 0x40
 80060b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80060b2:	2300      	movs	r3, #0
 80060b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80060b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060ba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80060bc:	f107 0308 	add.w	r3, r7, #8
 80060c0:	4619      	mov	r1, r3
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f7ff ff34 	bl	8005f30 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80060c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80060cc:	2112      	movs	r1, #18
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f000 f9fc 	bl	80064cc <SDMMC_GetCmdResp1>
 80060d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80060d6:	69fb      	ldr	r3, [r7, #28]
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3720      	adds	r7, #32
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}

080060e0 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b088      	sub	sp, #32
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80060ee:	2318      	movs	r3, #24
 80060f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80060f2:	2340      	movs	r3, #64	; 0x40
 80060f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80060f6:	2300      	movs	r3, #0
 80060f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80060fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060fe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006100:	f107 0308 	add.w	r3, r7, #8
 8006104:	4619      	mov	r1, r3
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f7ff ff12 	bl	8005f30 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800610c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006110:	2118      	movs	r1, #24
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f000 f9da 	bl	80064cc <SDMMC_GetCmdResp1>
 8006118:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800611a:	69fb      	ldr	r3, [r7, #28]
}
 800611c:	4618      	mov	r0, r3
 800611e:	3720      	adds	r7, #32
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}

08006124 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b088      	sub	sp, #32
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8006132:	2319      	movs	r3, #25
 8006134:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006136:	2340      	movs	r3, #64	; 0x40
 8006138:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800613a:	2300      	movs	r3, #0
 800613c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800613e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006142:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006144:	f107 0308 	add.w	r3, r7, #8
 8006148:	4619      	mov	r1, r3
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f7ff fef0 	bl	8005f30 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8006150:	f241 3288 	movw	r2, #5000	; 0x1388
 8006154:	2119      	movs	r1, #25
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f000 f9b8 	bl	80064cc <SDMMC_GetCmdResp1>
 800615c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800615e:	69fb      	ldr	r3, [r7, #28]
}
 8006160:	4618      	mov	r0, r3
 8006162:	3720      	adds	r7, #32
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}

08006168 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b088      	sub	sp, #32
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8006170:	2300      	movs	r3, #0
 8006172:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8006174:	230c      	movs	r3, #12
 8006176:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006178:	2340      	movs	r3, #64	; 0x40
 800617a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800617c:	2300      	movs	r3, #0
 800617e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006180:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006184:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006186:	f107 0308 	add.w	r3, r7, #8
 800618a:	4619      	mov	r1, r3
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f7ff fecf 	bl	8005f30 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8006192:	4a05      	ldr	r2, [pc, #20]	; (80061a8 <SDMMC_CmdStopTransfer+0x40>)
 8006194:	210c      	movs	r1, #12
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 f998 	bl	80064cc <SDMMC_GetCmdResp1>
 800619c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800619e:	69fb      	ldr	r3, [r7, #28]
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3720      	adds	r7, #32
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	05f5e100 	.word	0x05f5e100

080061ac <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b08a      	sub	sp, #40	; 0x28
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80061bc:	2307      	movs	r3, #7
 80061be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80061c0:	2340      	movs	r3, #64	; 0x40
 80061c2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80061c4:	2300      	movs	r3, #0
 80061c6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80061c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061cc:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80061ce:	f107 0310 	add.w	r3, r7, #16
 80061d2:	4619      	mov	r1, r3
 80061d4:	68f8      	ldr	r0, [r7, #12]
 80061d6:	f7ff feab 	bl	8005f30 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80061da:	f241 3288 	movw	r2, #5000	; 0x1388
 80061de:	2107      	movs	r1, #7
 80061e0:	68f8      	ldr	r0, [r7, #12]
 80061e2:	f000 f973 	bl	80064cc <SDMMC_GetCmdResp1>
 80061e6:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80061e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3728      	adds	r7, #40	; 0x28
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}

080061f2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80061f2:	b580      	push	{r7, lr}
 80061f4:	b088      	sub	sp, #32
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80061fa:	2300      	movs	r3, #0
 80061fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80061fe:	2300      	movs	r3, #0
 8006200:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8006202:	2300      	movs	r3, #0
 8006204:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006206:	2300      	movs	r3, #0
 8006208:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800620a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800620e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006210:	f107 0308 	add.w	r3, r7, #8
 8006214:	4619      	mov	r1, r3
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f7ff fe8a 	bl	8005f30 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f000 f92d 	bl	800647c <SDMMC_GetCmdError>
 8006222:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006224:	69fb      	ldr	r3, [r7, #28]
}
 8006226:	4618      	mov	r0, r3
 8006228:	3720      	adds	r7, #32
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}

0800622e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800622e:	b580      	push	{r7, lr}
 8006230:	b088      	sub	sp, #32
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8006236:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800623a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800623c:	2308      	movs	r3, #8
 800623e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006240:	2340      	movs	r3, #64	; 0x40
 8006242:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006244:	2300      	movs	r3, #0
 8006246:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006248:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800624c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800624e:	f107 0308 	add.w	r3, r7, #8
 8006252:	4619      	mov	r1, r3
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f7ff fe6b 	bl	8005f30 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 fb16 	bl	800688c <SDMMC_GetCmdResp7>
 8006260:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006262:	69fb      	ldr	r3, [r7, #28]
}
 8006264:	4618      	mov	r0, r3
 8006266:	3720      	adds	r7, #32
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}

0800626c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b088      	sub	sp, #32
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800627a:	2337      	movs	r3, #55	; 0x37
 800627c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800627e:	2340      	movs	r3, #64	; 0x40
 8006280:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006282:	2300      	movs	r3, #0
 8006284:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006286:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800628a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800628c:	f107 0308 	add.w	r3, r7, #8
 8006290:	4619      	mov	r1, r3
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f7ff fe4c 	bl	8005f30 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8006298:	f241 3288 	movw	r2, #5000	; 0x1388
 800629c:	2137      	movs	r1, #55	; 0x37
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 f914 	bl	80064cc <SDMMC_GetCmdResp1>
 80062a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80062a6:	69fb      	ldr	r3, [r7, #28]
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3720      	adds	r7, #32
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}

080062b0 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b088      	sub	sp, #32
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80062c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80062c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80062c6:	2329      	movs	r3, #41	; 0x29
 80062c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80062ca:	2340      	movs	r3, #64	; 0x40
 80062cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80062ce:	2300      	movs	r3, #0
 80062d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80062d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062d6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80062d8:	f107 0308 	add.w	r3, r7, #8
 80062dc:	4619      	mov	r1, r3
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f7ff fe26 	bl	8005f30 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f000 fa23 	bl	8006730 <SDMMC_GetCmdResp3>
 80062ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80062ec:	69fb      	ldr	r3, [r7, #28]
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3720      	adds	r7, #32
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}

080062f6 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80062f6:	b580      	push	{r7, lr}
 80062f8:	b088      	sub	sp, #32
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
 80062fe:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8006304:	2306      	movs	r3, #6
 8006306:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006308:	2340      	movs	r3, #64	; 0x40
 800630a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800630c:	2300      	movs	r3, #0
 800630e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006310:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006314:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006316:	f107 0308 	add.w	r3, r7, #8
 800631a:	4619      	mov	r1, r3
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f7ff fe07 	bl	8005f30 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8006322:	f241 3288 	movw	r2, #5000	; 0x1388
 8006326:	2106      	movs	r1, #6
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f000 f8cf 	bl	80064cc <SDMMC_GetCmdResp1>
 800632e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006330:	69fb      	ldr	r3, [r7, #28]
}
 8006332:	4618      	mov	r0, r3
 8006334:	3720      	adds	r7, #32
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}

0800633a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800633a:	b580      	push	{r7, lr}
 800633c:	b088      	sub	sp, #32
 800633e:	af00      	add	r7, sp, #0
 8006340:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8006342:	2300      	movs	r3, #0
 8006344:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8006346:	2333      	movs	r3, #51	; 0x33
 8006348:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800634a:	2340      	movs	r3, #64	; 0x40
 800634c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800634e:	2300      	movs	r3, #0
 8006350:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006352:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006356:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006358:	f107 0308 	add.w	r3, r7, #8
 800635c:	4619      	mov	r1, r3
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f7ff fde6 	bl	8005f30 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8006364:	f241 3288 	movw	r2, #5000	; 0x1388
 8006368:	2133      	movs	r1, #51	; 0x33
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 f8ae 	bl	80064cc <SDMMC_GetCmdResp1>
 8006370:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006372:	69fb      	ldr	r3, [r7, #28]
}
 8006374:	4618      	mov	r0, r3
 8006376:	3720      	adds	r7, #32
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}

0800637c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b088      	sub	sp, #32
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8006384:	2300      	movs	r3, #0
 8006386:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006388:	2302      	movs	r3, #2
 800638a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800638c:	23c0      	movs	r3, #192	; 0xc0
 800638e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006390:	2300      	movs	r3, #0
 8006392:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006394:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006398:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800639a:	f107 0308 	add.w	r3, r7, #8
 800639e:	4619      	mov	r1, r3
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f7ff fdc5 	bl	8005f30 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 f97c 	bl	80066a4 <SDMMC_GetCmdResp2>
 80063ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80063ae:	69fb      	ldr	r3, [r7, #28]
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3720      	adds	r7, #32
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b088      	sub	sp, #32
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80063c6:	2309      	movs	r3, #9
 80063c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80063ca:	23c0      	movs	r3, #192	; 0xc0
 80063cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80063ce:	2300      	movs	r3, #0
 80063d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80063d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063d6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80063d8:	f107 0308 	add.w	r3, r7, #8
 80063dc:	4619      	mov	r1, r3
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f7ff fda6 	bl	8005f30 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f000 f95d 	bl	80066a4 <SDMMC_GetCmdResp2>
 80063ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80063ec:	69fb      	ldr	r3, [r7, #28]
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3720      	adds	r7, #32
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}

080063f6 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80063f6:	b580      	push	{r7, lr}
 80063f8:	b088      	sub	sp, #32
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
 80063fe:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8006400:	2300      	movs	r3, #0
 8006402:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8006404:	2303      	movs	r3, #3
 8006406:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006408:	2340      	movs	r3, #64	; 0x40
 800640a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800640c:	2300      	movs	r3, #0
 800640e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006410:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006414:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006416:	f107 0308 	add.w	r3, r7, #8
 800641a:	4619      	mov	r1, r3
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f7ff fd87 	bl	8005f30 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8006422:	683a      	ldr	r2, [r7, #0]
 8006424:	2103      	movs	r1, #3
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 f9bc 	bl	80067a4 <SDMMC_GetCmdResp6>
 800642c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800642e:	69fb      	ldr	r3, [r7, #28]
}
 8006430:	4618      	mov	r0, r3
 8006432:	3720      	adds	r7, #32
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}

08006438 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b088      	sub	sp, #32
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8006446:	230d      	movs	r3, #13
 8006448:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800644a:	2340      	movs	r3, #64	; 0x40
 800644c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800644e:	2300      	movs	r3, #0
 8006450:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006452:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006456:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006458:	f107 0308 	add.w	r3, r7, #8
 800645c:	4619      	mov	r1, r3
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f7ff fd66 	bl	8005f30 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8006464:	f241 3288 	movw	r2, #5000	; 0x1388
 8006468:	210d      	movs	r1, #13
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 f82e 	bl	80064cc <SDMMC_GetCmdResp1>
 8006470:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006472:	69fb      	ldr	r3, [r7, #28]
}
 8006474:	4618      	mov	r0, r3
 8006476:	3720      	adds	r7, #32
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}

0800647c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800647c:	b490      	push	{r4, r7}
 800647e:	b082      	sub	sp, #8
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006484:	4b0f      	ldr	r3, [pc, #60]	; (80064c4 <SDMMC_GetCmdError+0x48>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a0f      	ldr	r2, [pc, #60]	; (80064c8 <SDMMC_GetCmdError+0x4c>)
 800648a:	fba2 2303 	umull	r2, r3, r2, r3
 800648e:	0a5b      	lsrs	r3, r3, #9
 8006490:	f241 3288 	movw	r2, #5000	; 0x1388
 8006494:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006498:	4623      	mov	r3, r4
 800649a:	1e5c      	subs	r4, r3, #1
 800649c:	2b00      	cmp	r3, #0
 800649e:	d102      	bne.n	80064a6 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80064a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80064a4:	e009      	b.n	80064ba <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d0f2      	beq.n	8006498 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	22c5      	movs	r2, #197	; 0xc5
 80064b6:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80064b8:	2300      	movs	r3, #0
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3708      	adds	r7, #8
 80064be:	46bd      	mov	sp, r7
 80064c0:	bc90      	pop	{r4, r7}
 80064c2:	4770      	bx	lr
 80064c4:	20000000 	.word	0x20000000
 80064c8:	10624dd3 	.word	0x10624dd3

080064cc <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80064cc:	b590      	push	{r4, r7, lr}
 80064ce:	b087      	sub	sp, #28
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	60f8      	str	r0, [r7, #12]
 80064d4:	460b      	mov	r3, r1
 80064d6:	607a      	str	r2, [r7, #4]
 80064d8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80064da:	4b6f      	ldr	r3, [pc, #444]	; (8006698 <SDMMC_GetCmdResp1+0x1cc>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a6f      	ldr	r2, [pc, #444]	; (800669c <SDMMC_GetCmdResp1+0x1d0>)
 80064e0:	fba2 2303 	umull	r2, r3, r2, r3
 80064e4:	0a5b      	lsrs	r3, r3, #9
 80064e6:	687a      	ldr	r2, [r7, #4]
 80064e8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80064ec:	4623      	mov	r3, r4
 80064ee:	1e5c      	subs	r4, r3, #1
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d102      	bne.n	80064fa <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80064f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80064f8:	e0c9      	b.n	800668e <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064fe:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006506:	2b00      	cmp	r3, #0
 8006508:	d0f0      	beq.n	80064ec <SDMMC_GetCmdResp1+0x20>
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006510:	2b00      	cmp	r3, #0
 8006512:	d1eb      	bne.n	80064ec <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006518:	f003 0304 	and.w	r3, r3, #4
 800651c:	2b00      	cmp	r3, #0
 800651e:	d004      	beq.n	800652a <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2204      	movs	r2, #4
 8006524:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006526:	2304      	movs	r3, #4
 8006528:	e0b1      	b.n	800668e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800652e:	f003 0301 	and.w	r3, r3, #1
 8006532:	2b00      	cmp	r3, #0
 8006534:	d004      	beq.n	8006540 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2201      	movs	r2, #1
 800653a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800653c:	2301      	movs	r3, #1
 800653e:	e0a6      	b.n	800668e <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	22c5      	movs	r2, #197	; 0xc5
 8006544:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006546:	68f8      	ldr	r0, [r7, #12]
 8006548:	f7ff fd1b 	bl	8005f82 <SDIO_GetCommandResponse>
 800654c:	4603      	mov	r3, r0
 800654e:	461a      	mov	r2, r3
 8006550:	7afb      	ldrb	r3, [r7, #11]
 8006552:	4293      	cmp	r3, r2
 8006554:	d001      	beq.n	800655a <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006556:	2301      	movs	r3, #1
 8006558:	e099      	b.n	800668e <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800655a:	2100      	movs	r1, #0
 800655c:	68f8      	ldr	r0, [r7, #12]
 800655e:	f7ff fd1c 	bl	8005f9a <SDIO_GetResponse>
 8006562:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006564:	693a      	ldr	r2, [r7, #16]
 8006566:	4b4e      	ldr	r3, [pc, #312]	; (80066a0 <SDMMC_GetCmdResp1+0x1d4>)
 8006568:	4013      	ands	r3, r2
 800656a:	2b00      	cmp	r3, #0
 800656c:	d101      	bne.n	8006572 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800656e:	2300      	movs	r3, #0
 8006570:	e08d      	b.n	800668e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	2b00      	cmp	r3, #0
 8006576:	da02      	bge.n	800657e <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006578:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800657c:	e087      	b.n	800668e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006584:	2b00      	cmp	r3, #0
 8006586:	d001      	beq.n	800658c <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006588:	2340      	movs	r3, #64	; 0x40
 800658a:	e080      	b.n	800668e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006592:	2b00      	cmp	r3, #0
 8006594:	d001      	beq.n	800659a <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006596:	2380      	movs	r3, #128	; 0x80
 8006598:	e079      	b.n	800668e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d002      	beq.n	80065aa <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80065a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80065a8:	e071      	b.n	800668e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d002      	beq.n	80065ba <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80065b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065b8:	e069      	b.n	800668e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d002      	beq.n	80065ca <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80065c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80065c8:	e061      	b.n	800668e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d002      	beq.n	80065da <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80065d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80065d8:	e059      	b.n	800668e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d002      	beq.n	80065ea <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80065e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80065e8:	e051      	b.n	800668e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d002      	beq.n	80065fa <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80065f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80065f8:	e049      	b.n	800668e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006600:	2b00      	cmp	r3, #0
 8006602:	d002      	beq.n	800660a <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006604:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006608:	e041      	b.n	800668e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006610:	2b00      	cmp	r3, #0
 8006612:	d002      	beq.n	800661a <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8006614:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006618:	e039      	b.n	800668e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006620:	2b00      	cmp	r3, #0
 8006622:	d002      	beq.n	800662a <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006624:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006628:	e031      	b.n	800668e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006630:	2b00      	cmp	r3, #0
 8006632:	d002      	beq.n	800663a <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006634:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006638:	e029      	b.n	800668e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006640:	2b00      	cmp	r3, #0
 8006642:	d002      	beq.n	800664a <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006644:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006648:	e021      	b.n	800668e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006650:	2b00      	cmp	r3, #0
 8006652:	d002      	beq.n	800665a <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006654:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006658:	e019      	b.n	800668e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006660:	2b00      	cmp	r3, #0
 8006662:	d002      	beq.n	800666a <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006664:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006668:	e011      	b.n	800668e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006670:	2b00      	cmp	r3, #0
 8006672:	d002      	beq.n	800667a <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8006674:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006678:	e009      	b.n	800668e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	f003 0308 	and.w	r3, r3, #8
 8006680:	2b00      	cmp	r3, #0
 8006682:	d002      	beq.n	800668a <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8006684:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006688:	e001      	b.n	800668e <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800668a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800668e:	4618      	mov	r0, r3
 8006690:	371c      	adds	r7, #28
 8006692:	46bd      	mov	sp, r7
 8006694:	bd90      	pop	{r4, r7, pc}
 8006696:	bf00      	nop
 8006698:	20000000 	.word	0x20000000
 800669c:	10624dd3 	.word	0x10624dd3
 80066a0:	fdffe008 	.word	0xfdffe008

080066a4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80066a4:	b490      	push	{r4, r7}
 80066a6:	b084      	sub	sp, #16
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80066ac:	4b1e      	ldr	r3, [pc, #120]	; (8006728 <SDMMC_GetCmdResp2+0x84>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a1e      	ldr	r2, [pc, #120]	; (800672c <SDMMC_GetCmdResp2+0x88>)
 80066b2:	fba2 2303 	umull	r2, r3, r2, r3
 80066b6:	0a5b      	lsrs	r3, r3, #9
 80066b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80066bc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80066c0:	4623      	mov	r3, r4
 80066c2:	1e5c      	subs	r4, r3, #1
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d102      	bne.n	80066ce <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80066c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80066cc:	e026      	b.n	800671c <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066d2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d0f0      	beq.n	80066c0 <SDMMC_GetCmdResp2+0x1c>
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d1eb      	bne.n	80066c0 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066ec:	f003 0304 	and.w	r3, r3, #4
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d004      	beq.n	80066fe <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2204      	movs	r2, #4
 80066f8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80066fa:	2304      	movs	r3, #4
 80066fc:	e00e      	b.n	800671c <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006702:	f003 0301 	and.w	r3, r3, #1
 8006706:	2b00      	cmp	r3, #0
 8006708:	d004      	beq.n	8006714 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2201      	movs	r2, #1
 800670e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006710:	2301      	movs	r3, #1
 8006712:	e003      	b.n	800671c <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	22c5      	movs	r2, #197	; 0xc5
 8006718:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800671a:	2300      	movs	r3, #0
}
 800671c:	4618      	mov	r0, r3
 800671e:	3710      	adds	r7, #16
 8006720:	46bd      	mov	sp, r7
 8006722:	bc90      	pop	{r4, r7}
 8006724:	4770      	bx	lr
 8006726:	bf00      	nop
 8006728:	20000000 	.word	0x20000000
 800672c:	10624dd3 	.word	0x10624dd3

08006730 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8006730:	b490      	push	{r4, r7}
 8006732:	b084      	sub	sp, #16
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006738:	4b18      	ldr	r3, [pc, #96]	; (800679c <SDMMC_GetCmdResp3+0x6c>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a18      	ldr	r2, [pc, #96]	; (80067a0 <SDMMC_GetCmdResp3+0x70>)
 800673e:	fba2 2303 	umull	r2, r3, r2, r3
 8006742:	0a5b      	lsrs	r3, r3, #9
 8006744:	f241 3288 	movw	r2, #5000	; 0x1388
 8006748:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800674c:	4623      	mov	r3, r4
 800674e:	1e5c      	subs	r4, r3, #1
 8006750:	2b00      	cmp	r3, #0
 8006752:	d102      	bne.n	800675a <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006754:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006758:	e01b      	b.n	8006792 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800675e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006766:	2b00      	cmp	r3, #0
 8006768:	d0f0      	beq.n	800674c <SDMMC_GetCmdResp3+0x1c>
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006770:	2b00      	cmp	r3, #0
 8006772:	d1eb      	bne.n	800674c <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006778:	f003 0304 	and.w	r3, r3, #4
 800677c:	2b00      	cmp	r3, #0
 800677e:	d004      	beq.n	800678a <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2204      	movs	r2, #4
 8006784:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006786:	2304      	movs	r3, #4
 8006788:	e003      	b.n	8006792 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	22c5      	movs	r2, #197	; 0xc5
 800678e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006790:	2300      	movs	r3, #0
}
 8006792:	4618      	mov	r0, r3
 8006794:	3710      	adds	r7, #16
 8006796:	46bd      	mov	sp, r7
 8006798:	bc90      	pop	{r4, r7}
 800679a:	4770      	bx	lr
 800679c:	20000000 	.word	0x20000000
 80067a0:	10624dd3 	.word	0x10624dd3

080067a4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80067a4:	b590      	push	{r4, r7, lr}
 80067a6:	b087      	sub	sp, #28
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	60f8      	str	r0, [r7, #12]
 80067ac:	460b      	mov	r3, r1
 80067ae:	607a      	str	r2, [r7, #4]
 80067b0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80067b2:	4b34      	ldr	r3, [pc, #208]	; (8006884 <SDMMC_GetCmdResp6+0xe0>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a34      	ldr	r2, [pc, #208]	; (8006888 <SDMMC_GetCmdResp6+0xe4>)
 80067b8:	fba2 2303 	umull	r2, r3, r2, r3
 80067bc:	0a5b      	lsrs	r3, r3, #9
 80067be:	f241 3288 	movw	r2, #5000	; 0x1388
 80067c2:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80067c6:	4623      	mov	r3, r4
 80067c8:	1e5c      	subs	r4, r3, #1
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d102      	bne.n	80067d4 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 80067ce:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80067d2:	e052      	b.n	800687a <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067d8:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d0f0      	beq.n	80067c6 <SDMMC_GetCmdResp6+0x22>
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d1eb      	bne.n	80067c6 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067f2:	f003 0304 	and.w	r3, r3, #4
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d004      	beq.n	8006804 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2204      	movs	r2, #4
 80067fe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006800:	2304      	movs	r3, #4
 8006802:	e03a      	b.n	800687a <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006808:	f003 0301 	and.w	r3, r3, #1
 800680c:	2b00      	cmp	r3, #0
 800680e:	d004      	beq.n	800681a <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2201      	movs	r2, #1
 8006814:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006816:	2301      	movs	r3, #1
 8006818:	e02f      	b.n	800687a <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800681a:	68f8      	ldr	r0, [r7, #12]
 800681c:	f7ff fbb1 	bl	8005f82 <SDIO_GetCommandResponse>
 8006820:	4603      	mov	r3, r0
 8006822:	461a      	mov	r2, r3
 8006824:	7afb      	ldrb	r3, [r7, #11]
 8006826:	4293      	cmp	r3, r2
 8006828:	d001      	beq.n	800682e <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800682a:	2301      	movs	r3, #1
 800682c:	e025      	b.n	800687a <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	22c5      	movs	r2, #197	; 0xc5
 8006832:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006834:	2100      	movs	r1, #0
 8006836:	68f8      	ldr	r0, [r7, #12]
 8006838:	f7ff fbaf 	bl	8005f9a <SDIO_GetResponse>
 800683c:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006844:	2b00      	cmp	r3, #0
 8006846:	d106      	bne.n	8006856 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	0c1b      	lsrs	r3, r3, #16
 800684c:	b29a      	uxth	r2, r3
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8006852:	2300      	movs	r3, #0
 8006854:	e011      	b.n	800687a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800685c:	2b00      	cmp	r3, #0
 800685e:	d002      	beq.n	8006866 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006860:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006864:	e009      	b.n	800687a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800686c:	2b00      	cmp	r3, #0
 800686e:	d002      	beq.n	8006876 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006870:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006874:	e001      	b.n	800687a <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006876:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800687a:	4618      	mov	r0, r3
 800687c:	371c      	adds	r7, #28
 800687e:	46bd      	mov	sp, r7
 8006880:	bd90      	pop	{r4, r7, pc}
 8006882:	bf00      	nop
 8006884:	20000000 	.word	0x20000000
 8006888:	10624dd3 	.word	0x10624dd3

0800688c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800688c:	b490      	push	{r4, r7}
 800688e:	b084      	sub	sp, #16
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006894:	4b21      	ldr	r3, [pc, #132]	; (800691c <SDMMC_GetCmdResp7+0x90>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a21      	ldr	r2, [pc, #132]	; (8006920 <SDMMC_GetCmdResp7+0x94>)
 800689a:	fba2 2303 	umull	r2, r3, r2, r3
 800689e:	0a5b      	lsrs	r3, r3, #9
 80068a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80068a4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80068a8:	4623      	mov	r3, r4
 80068aa:	1e5c      	subs	r4, r3, #1
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d102      	bne.n	80068b6 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80068b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80068b4:	e02c      	b.n	8006910 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068ba:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d0f0      	beq.n	80068a8 <SDMMC_GetCmdResp7+0x1c>
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d1eb      	bne.n	80068a8 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068d4:	f003 0304 	and.w	r3, r3, #4
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d004      	beq.n	80068e6 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2204      	movs	r2, #4
 80068e0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80068e2:	2304      	movs	r3, #4
 80068e4:	e014      	b.n	8006910 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068ea:	f003 0301 	and.w	r3, r3, #1
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d004      	beq.n	80068fc <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2201      	movs	r2, #1
 80068f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80068f8:	2301      	movs	r3, #1
 80068fa:	e009      	b.n	8006910 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006904:	2b00      	cmp	r3, #0
 8006906:	d002      	beq.n	800690e <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2240      	movs	r2, #64	; 0x40
 800690c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800690e:	2300      	movs	r3, #0
  
}
 8006910:	4618      	mov	r0, r3
 8006912:	3710      	adds	r7, #16
 8006914:	46bd      	mov	sp, r7
 8006916:	bc90      	pop	{r4, r7}
 8006918:	4770      	bx	lr
 800691a:	bf00      	nop
 800691c:	20000000 	.word	0x20000000
 8006920:	10624dd3 	.word	0x10624dd3

08006924 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006924:	b084      	sub	sp, #16
 8006926:	b580      	push	{r7, lr}
 8006928:	b084      	sub	sp, #16
 800692a:	af00      	add	r7, sp, #0
 800692c:	6078      	str	r0, [r7, #4]
 800692e:	f107 001c 	add.w	r0, r7, #28
 8006932:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006938:	2b01      	cmp	r3, #1
 800693a:	d122      	bne.n	8006982 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006940:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	68db      	ldr	r3, [r3, #12]
 800694c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006950:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006964:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006966:	2b01      	cmp	r3, #1
 8006968:	d105      	bne.n	8006976 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	68db      	ldr	r3, [r3, #12]
 800696e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f001 fa58 	bl	8007e2c <USB_CoreReset>
 800697c:	4603      	mov	r3, r0
 800697e:	73fb      	strb	r3, [r7, #15]
 8006980:	e010      	b.n	80069a4 <USB_CoreInit+0x80>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	68db      	ldr	r3, [r3, #12]
 8006986:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f001 fa4c 	bl	8007e2c <USB_CoreReset>
 8006994:	4603      	mov	r3, r0
 8006996:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800699c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80069a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a6:	2b01      	cmp	r3, #1
 80069a8:	d10b      	bne.n	80069c2 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	689b      	ldr	r3, [r3, #8]
 80069ae:	f043 0206 	orr.w	r2, r3, #6
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	f043 0220 	orr.w	r2, r3, #32
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80069c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	3710      	adds	r7, #16
 80069c8:	46bd      	mov	sp, r7
 80069ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80069ce:	b004      	add	sp, #16
 80069d0:	4770      	bx	lr
	...

080069d4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b087      	sub	sp, #28
 80069d8:	af00      	add	r7, sp, #0
 80069da:	60f8      	str	r0, [r7, #12]
 80069dc:	60b9      	str	r1, [r7, #8]
 80069de:	4613      	mov	r3, r2
 80069e0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80069e2:	79fb      	ldrb	r3, [r7, #7]
 80069e4:	2b02      	cmp	r3, #2
 80069e6:	d165      	bne.n	8006ab4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	4a41      	ldr	r2, [pc, #260]	; (8006af0 <USB_SetTurnaroundTime+0x11c>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d906      	bls.n	80069fe <USB_SetTurnaroundTime+0x2a>
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	4a40      	ldr	r2, [pc, #256]	; (8006af4 <USB_SetTurnaroundTime+0x120>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d802      	bhi.n	80069fe <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80069f8:	230f      	movs	r3, #15
 80069fa:	617b      	str	r3, [r7, #20]
 80069fc:	e062      	b.n	8006ac4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	4a3c      	ldr	r2, [pc, #240]	; (8006af4 <USB_SetTurnaroundTime+0x120>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d906      	bls.n	8006a14 <USB_SetTurnaroundTime+0x40>
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	4a3b      	ldr	r2, [pc, #236]	; (8006af8 <USB_SetTurnaroundTime+0x124>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d802      	bhi.n	8006a14 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006a0e:	230e      	movs	r3, #14
 8006a10:	617b      	str	r3, [r7, #20]
 8006a12:	e057      	b.n	8006ac4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	4a38      	ldr	r2, [pc, #224]	; (8006af8 <USB_SetTurnaroundTime+0x124>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d906      	bls.n	8006a2a <USB_SetTurnaroundTime+0x56>
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	4a37      	ldr	r2, [pc, #220]	; (8006afc <USB_SetTurnaroundTime+0x128>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d802      	bhi.n	8006a2a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006a24:	230d      	movs	r3, #13
 8006a26:	617b      	str	r3, [r7, #20]
 8006a28:	e04c      	b.n	8006ac4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	4a33      	ldr	r2, [pc, #204]	; (8006afc <USB_SetTurnaroundTime+0x128>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d906      	bls.n	8006a40 <USB_SetTurnaroundTime+0x6c>
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	4a32      	ldr	r2, [pc, #200]	; (8006b00 <USB_SetTurnaroundTime+0x12c>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d802      	bhi.n	8006a40 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006a3a:	230c      	movs	r3, #12
 8006a3c:	617b      	str	r3, [r7, #20]
 8006a3e:	e041      	b.n	8006ac4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	4a2f      	ldr	r2, [pc, #188]	; (8006b00 <USB_SetTurnaroundTime+0x12c>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d906      	bls.n	8006a56 <USB_SetTurnaroundTime+0x82>
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	4a2e      	ldr	r2, [pc, #184]	; (8006b04 <USB_SetTurnaroundTime+0x130>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d802      	bhi.n	8006a56 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006a50:	230b      	movs	r3, #11
 8006a52:	617b      	str	r3, [r7, #20]
 8006a54:	e036      	b.n	8006ac4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	4a2a      	ldr	r2, [pc, #168]	; (8006b04 <USB_SetTurnaroundTime+0x130>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d906      	bls.n	8006a6c <USB_SetTurnaroundTime+0x98>
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	4a29      	ldr	r2, [pc, #164]	; (8006b08 <USB_SetTurnaroundTime+0x134>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d802      	bhi.n	8006a6c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006a66:	230a      	movs	r3, #10
 8006a68:	617b      	str	r3, [r7, #20]
 8006a6a:	e02b      	b.n	8006ac4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	4a26      	ldr	r2, [pc, #152]	; (8006b08 <USB_SetTurnaroundTime+0x134>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d906      	bls.n	8006a82 <USB_SetTurnaroundTime+0xae>
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	4a25      	ldr	r2, [pc, #148]	; (8006b0c <USB_SetTurnaroundTime+0x138>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d802      	bhi.n	8006a82 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006a7c:	2309      	movs	r3, #9
 8006a7e:	617b      	str	r3, [r7, #20]
 8006a80:	e020      	b.n	8006ac4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	4a21      	ldr	r2, [pc, #132]	; (8006b0c <USB_SetTurnaroundTime+0x138>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d906      	bls.n	8006a98 <USB_SetTurnaroundTime+0xc4>
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	4a20      	ldr	r2, [pc, #128]	; (8006b10 <USB_SetTurnaroundTime+0x13c>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d802      	bhi.n	8006a98 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006a92:	2308      	movs	r3, #8
 8006a94:	617b      	str	r3, [r7, #20]
 8006a96:	e015      	b.n	8006ac4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	4a1d      	ldr	r2, [pc, #116]	; (8006b10 <USB_SetTurnaroundTime+0x13c>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d906      	bls.n	8006aae <USB_SetTurnaroundTime+0xda>
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	4a1c      	ldr	r2, [pc, #112]	; (8006b14 <USB_SetTurnaroundTime+0x140>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d802      	bhi.n	8006aae <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006aa8:	2307      	movs	r3, #7
 8006aaa:	617b      	str	r3, [r7, #20]
 8006aac:	e00a      	b.n	8006ac4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006aae:	2306      	movs	r3, #6
 8006ab0:	617b      	str	r3, [r7, #20]
 8006ab2:	e007      	b.n	8006ac4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006ab4:	79fb      	ldrb	r3, [r7, #7]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d102      	bne.n	8006ac0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006aba:	2309      	movs	r3, #9
 8006abc:	617b      	str	r3, [r7, #20]
 8006abe:	e001      	b.n	8006ac4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006ac0:	2309      	movs	r3, #9
 8006ac2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	68db      	ldr	r3, [r3, #12]
 8006ac8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	68da      	ldr	r2, [r3, #12]
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	029b      	lsls	r3, r3, #10
 8006ad8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006adc:	431a      	orrs	r2, r3
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006ae2:	2300      	movs	r3, #0
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	371c      	adds	r7, #28
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bc80      	pop	{r7}
 8006aec:	4770      	bx	lr
 8006aee:	bf00      	nop
 8006af0:	00d8acbf 	.word	0x00d8acbf
 8006af4:	00e4e1bf 	.word	0x00e4e1bf
 8006af8:	00f423ff 	.word	0x00f423ff
 8006afc:	0106737f 	.word	0x0106737f
 8006b00:	011a499f 	.word	0x011a499f
 8006b04:	01312cff 	.word	0x01312cff
 8006b08:	014ca43f 	.word	0x014ca43f
 8006b0c:	016e35ff 	.word	0x016e35ff
 8006b10:	01a6ab1f 	.word	0x01a6ab1f
 8006b14:	01e847ff 	.word	0x01e847ff

08006b18 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b083      	sub	sp, #12
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	f043 0201 	orr.w	r2, r3, #1
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006b2c:	2300      	movs	r3, #0
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	370c      	adds	r7, #12
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bc80      	pop	{r7}
 8006b36:	4770      	bx	lr

08006b38 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b083      	sub	sp, #12
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	f023 0201 	bic.w	r2, r3, #1
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006b4c:	2300      	movs	r3, #0
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	370c      	adds	r7, #12
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bc80      	pop	{r7}
 8006b56:	4770      	bx	lr

08006b58 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b082      	sub	sp, #8
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	460b      	mov	r3, r1
 8006b62:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	68db      	ldr	r3, [r3, #12]
 8006b68:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006b70:	78fb      	ldrb	r3, [r7, #3]
 8006b72:	2b01      	cmp	r3, #1
 8006b74:	d106      	bne.n	8006b84 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	68db      	ldr	r3, [r3, #12]
 8006b7a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	60da      	str	r2, [r3, #12]
 8006b82:	e00b      	b.n	8006b9c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006b84:	78fb      	ldrb	r3, [r7, #3]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d106      	bne.n	8006b98 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	68db      	ldr	r3, [r3, #12]
 8006b8e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	60da      	str	r2, [r3, #12]
 8006b96:	e001      	b.n	8006b9c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	e003      	b.n	8006ba4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006b9c:	2032      	movs	r0, #50	; 0x32
 8006b9e:	f7fa fb07 	bl	80011b0 <HAL_Delay>

  return HAL_OK;
 8006ba2:	2300      	movs	r3, #0
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3708      	adds	r7, #8
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006bac:	b084      	sub	sp, #16
 8006bae:	b580      	push	{r7, lr}
 8006bb0:	b086      	sub	sp, #24
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]
 8006bb6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006bba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	613b      	str	r3, [r7, #16]
 8006bca:	e009      	b.n	8006be0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006bcc:	687a      	ldr	r2, [r7, #4]
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	3340      	adds	r3, #64	; 0x40
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	4413      	add	r3, r2
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	3301      	adds	r3, #1
 8006bde:	613b      	str	r3, [r7, #16]
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	2b0e      	cmp	r3, #14
 8006be4:	d9f2      	bls.n	8006bcc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006be6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d112      	bne.n	8006c12 <USB_DevInit+0x66>
  {
    /*
     * disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bfc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c08:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	639a      	str	r2, [r3, #56]	; 0x38
 8006c10:	e00b      	b.n	8006c2a <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c16:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c22:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006c30:	461a      	mov	r2, r3
 8006c32:	2300      	movs	r3, #0
 8006c34:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c3c:	4619      	mov	r1, r3
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c44:	461a      	mov	r2, r3
 8006c46:	680b      	ldr	r3, [r1, #0]
 8006c48:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d10c      	bne.n	8006c6a <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d104      	bne.n	8006c60 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006c56:	2100      	movs	r1, #0
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f000 f95d 	bl	8006f18 <USB_SetDevSpeed>
 8006c5e:	e008      	b.n	8006c72 <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006c60:	2101      	movs	r1, #1
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f000 f958 	bl	8006f18 <USB_SetDevSpeed>
 8006c68:	e003      	b.n	8006c72 <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006c6a:	2103      	movs	r1, #3
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f000 f953 	bl	8006f18 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006c72:	2110      	movs	r1, #16
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f000 f90b 	bl	8006e90 <USB_FlushTxFifo>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d001      	beq.n	8006c84 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 8006c80:	2301      	movs	r3, #1
 8006c82:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f000 f927 	bl	8006ed8 <USB_FlushRxFifo>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d001      	beq.n	8006c94 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 8006c90:	2301      	movs	r3, #1
 8006c92:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	2300      	movs	r3, #0
 8006caa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006cb8:	2300      	movs	r3, #0
 8006cba:	613b      	str	r3, [r7, #16]
 8006cbc:	e043      	b.n	8006d46 <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	015a      	lsls	r2, r3, #5
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	4413      	add	r3, r2
 8006cc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006cd0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006cd4:	d118      	bne.n	8006d08 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d10a      	bne.n	8006cf2 <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	015a      	lsls	r2, r3, #5
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	4413      	add	r3, r2
 8006ce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ce8:	461a      	mov	r2, r3
 8006cea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006cee:	6013      	str	r3, [r2, #0]
 8006cf0:	e013      	b.n	8006d1a <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	015a      	lsls	r2, r3, #5
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	4413      	add	r3, r2
 8006cfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cfe:	461a      	mov	r2, r3
 8006d00:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006d04:	6013      	str	r3, [r2, #0]
 8006d06:	e008      	b.n	8006d1a <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	015a      	lsls	r2, r3, #5
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	4413      	add	r3, r2
 8006d10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d14:	461a      	mov	r2, r3
 8006d16:	2300      	movs	r3, #0
 8006d18:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	015a      	lsls	r2, r3, #5
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	4413      	add	r3, r2
 8006d22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d26:	461a      	mov	r2, r3
 8006d28:	2300      	movs	r3, #0
 8006d2a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	015a      	lsls	r2, r3, #5
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	4413      	add	r3, r2
 8006d34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d38:	461a      	mov	r2, r3
 8006d3a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006d3e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	3301      	adds	r3, #1
 8006d44:	613b      	str	r3, [r7, #16]
 8006d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d48:	693a      	ldr	r2, [r7, #16]
 8006d4a:	429a      	cmp	r2, r3
 8006d4c:	d3b7      	bcc.n	8006cbe <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d4e:	2300      	movs	r3, #0
 8006d50:	613b      	str	r3, [r7, #16]
 8006d52:	e043      	b.n	8006ddc <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	015a      	lsls	r2, r3, #5
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	4413      	add	r3, r2
 8006d5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d6a:	d118      	bne.n	8006d9e <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d10a      	bne.n	8006d88 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	015a      	lsls	r2, r3, #5
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	4413      	add	r3, r2
 8006d7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d7e:	461a      	mov	r2, r3
 8006d80:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006d84:	6013      	str	r3, [r2, #0]
 8006d86:	e013      	b.n	8006db0 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	015a      	lsls	r2, r3, #5
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	4413      	add	r3, r2
 8006d90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d94:	461a      	mov	r2, r3
 8006d96:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006d9a:	6013      	str	r3, [r2, #0]
 8006d9c:	e008      	b.n	8006db0 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	015a      	lsls	r2, r3, #5
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	4413      	add	r3, r2
 8006da6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006daa:	461a      	mov	r2, r3
 8006dac:	2300      	movs	r3, #0
 8006dae:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	015a      	lsls	r2, r3, #5
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	4413      	add	r3, r2
 8006db8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	015a      	lsls	r2, r3, #5
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	4413      	add	r3, r2
 8006dca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dce:	461a      	mov	r2, r3
 8006dd0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006dd4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	3301      	adds	r3, #1
 8006dda:	613b      	str	r3, [r7, #16]
 8006ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dde:	693a      	ldr	r2, [r7, #16]
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d3b7      	bcc.n	8006d54 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dea:	691b      	ldr	r3, [r3, #16]
 8006dec:	68fa      	ldr	r2, [r7, #12]
 8006dee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006df2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006df6:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8006df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dfa:	2b01      	cmp	r3, #1
 8006dfc:	d111      	bne.n	8006e22 <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e04:	461a      	mov	r2, r3
 8006e06:	4b20      	ldr	r3, [pc, #128]	; (8006e88 <USB_DevInit+0x2dc>)
 8006e08:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e12:	68fa      	ldr	r2, [r7, #12]
 8006e14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e1c:	f043 0303 	orr.w	r3, r3, #3
 8006e20:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2200      	movs	r2, #0
 8006e26:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006e2e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d105      	bne.n	8006e42 <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	699b      	ldr	r3, [r3, #24]
 8006e3a:	f043 0210 	orr.w	r2, r3, #16
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	699a      	ldr	r2, [r3, #24]
 8006e46:	4b11      	ldr	r3, [pc, #68]	; (8006e8c <USB_DevInit+0x2e0>)
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	687a      	ldr	r2, [r7, #4]
 8006e4c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006e4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d005      	beq.n	8006e60 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	699b      	ldr	r3, [r3, #24]
 8006e58:	f043 0208 	orr.w	r2, r3, #8
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006e60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e62:	2b01      	cmp	r3, #1
 8006e64:	d107      	bne.n	8006e76 <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	699b      	ldr	r3, [r3, #24]
 8006e6a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e6e:	f043 0304 	orr.w	r3, r3, #4
 8006e72:	687a      	ldr	r2, [r7, #4]
 8006e74:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006e76:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3718      	adds	r7, #24
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e82:	b004      	add	sp, #16
 8006e84:	4770      	bx	lr
 8006e86:	bf00      	nop
 8006e88:	00800100 	.word	0x00800100
 8006e8c:	803c3800 	.word	0x803c3800

08006e90 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b085      	sub	sp, #20
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	019b      	lsls	r3, r3, #6
 8006ea2:	f043 0220 	orr.w	r2, r3, #32
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	3301      	adds	r3, #1
 8006eae:	60fb      	str	r3, [r7, #12]
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	4a08      	ldr	r2, [pc, #32]	; (8006ed4 <USB_FlushTxFifo+0x44>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d901      	bls.n	8006ebc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006eb8:	2303      	movs	r3, #3
 8006eba:	e006      	b.n	8006eca <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	691b      	ldr	r3, [r3, #16]
 8006ec0:	f003 0320 	and.w	r3, r3, #32
 8006ec4:	2b20      	cmp	r3, #32
 8006ec6:	d0f0      	beq.n	8006eaa <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006ec8:	2300      	movs	r3, #0
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3714      	adds	r7, #20
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bc80      	pop	{r7}
 8006ed2:	4770      	bx	lr
 8006ed4:	00030d40 	.word	0x00030d40

08006ed8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b085      	sub	sp, #20
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2210      	movs	r2, #16
 8006ee8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	3301      	adds	r3, #1
 8006eee:	60fb      	str	r3, [r7, #12]
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	4a08      	ldr	r2, [pc, #32]	; (8006f14 <USB_FlushRxFifo+0x3c>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d901      	bls.n	8006efc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006ef8:	2303      	movs	r3, #3
 8006efa:	e006      	b.n	8006f0a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	691b      	ldr	r3, [r3, #16]
 8006f00:	f003 0310 	and.w	r3, r3, #16
 8006f04:	2b10      	cmp	r3, #16
 8006f06:	d0f0      	beq.n	8006eea <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006f08:	2300      	movs	r3, #0
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3714      	adds	r7, #20
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bc80      	pop	{r7}
 8006f12:	4770      	bx	lr
 8006f14:	00030d40 	.word	0x00030d40

08006f18 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b085      	sub	sp, #20
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	460b      	mov	r3, r1
 8006f22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f2e:	681a      	ldr	r2, [r3, #0]
 8006f30:	78fb      	ldrb	r3, [r7, #3]
 8006f32:	68f9      	ldr	r1, [r7, #12]
 8006f34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006f3c:	2300      	movs	r3, #0
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3714      	adds	r7, #20
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bc80      	pop	{r7}
 8006f46:	4770      	bx	lr

08006f48 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b087      	sub	sp, #28
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f5a:	689b      	ldr	r3, [r3, #8]
 8006f5c:	f003 0306 	and.w	r3, r3, #6
 8006f60:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d102      	bne.n	8006f6e <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	75fb      	strb	r3, [r7, #23]
 8006f6c:	e00a      	b.n	8006f84 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2b02      	cmp	r3, #2
 8006f72:	d002      	beq.n	8006f7a <USB_GetDevSpeed+0x32>
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2b06      	cmp	r3, #6
 8006f78:	d102      	bne.n	8006f80 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006f7a:	2302      	movs	r3, #2
 8006f7c:	75fb      	strb	r3, [r7, #23]
 8006f7e:	e001      	b.n	8006f84 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006f80:	230f      	movs	r3, #15
 8006f82:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006f84:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	371c      	adds	r7, #28
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bc80      	pop	{r7}
 8006f8e:	4770      	bx	lr

08006f90 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b085      	sub	sp, #20
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	785b      	ldrb	r3, [r3, #1]
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	d13a      	bne.n	8007022 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fb2:	69da      	ldr	r2, [r3, #28]
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	781b      	ldrb	r3, [r3, #0]
 8006fb8:	f003 030f 	and.w	r3, r3, #15
 8006fbc:	2101      	movs	r1, #1
 8006fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	68f9      	ldr	r1, [r7, #12]
 8006fc6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	015a      	lsls	r2, r3, #5
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	4413      	add	r3, r2
 8006fd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d155      	bne.n	8007090 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	015a      	lsls	r2, r3, #5
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	4413      	add	r3, r2
 8006fec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ff0:	681a      	ldr	r2, [r3, #0]
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	78db      	ldrb	r3, [r3, #3]
 8006ffe:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007000:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	059b      	lsls	r3, r3, #22
 8007006:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007008:	4313      	orrs	r3, r2
 800700a:	68ba      	ldr	r2, [r7, #8]
 800700c:	0151      	lsls	r1, r2, #5
 800700e:	68fa      	ldr	r2, [r7, #12]
 8007010:	440a      	add	r2, r1
 8007012:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007016:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800701a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800701e:	6013      	str	r3, [r2, #0]
 8007020:	e036      	b.n	8007090 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007028:	69da      	ldr	r2, [r3, #28]
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	781b      	ldrb	r3, [r3, #0]
 800702e:	f003 030f 	and.w	r3, r3, #15
 8007032:	2101      	movs	r1, #1
 8007034:	fa01 f303 	lsl.w	r3, r1, r3
 8007038:	041b      	lsls	r3, r3, #16
 800703a:	68f9      	ldr	r1, [r7, #12]
 800703c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007040:	4313      	orrs	r3, r2
 8007042:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	015a      	lsls	r2, r3, #5
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	4413      	add	r3, r2
 800704c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007056:	2b00      	cmp	r3, #0
 8007058:	d11a      	bne.n	8007090 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	015a      	lsls	r2, r3, #5
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	4413      	add	r3, r2
 8007062:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007066:	681a      	ldr	r2, [r3, #0]
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	689b      	ldr	r3, [r3, #8]
 800706c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	78db      	ldrb	r3, [r3, #3]
 8007074:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007076:	430b      	orrs	r3, r1
 8007078:	4313      	orrs	r3, r2
 800707a:	68ba      	ldr	r2, [r7, #8]
 800707c:	0151      	lsls	r1, r2, #5
 800707e:	68fa      	ldr	r2, [r7, #12]
 8007080:	440a      	add	r2, r1
 8007082:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007086:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800708a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800708e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007090:	2300      	movs	r3, #0
}
 8007092:	4618      	mov	r0, r3
 8007094:	3714      	adds	r7, #20
 8007096:	46bd      	mov	sp, r7
 8007098:	bc80      	pop	{r7}
 800709a:	4770      	bx	lr

0800709c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800709c:	b480      	push	{r7}
 800709e:	b085      	sub	sp, #20
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	781b      	ldrb	r3, [r3, #0]
 80070ae:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	785b      	ldrb	r3, [r3, #1]
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d135      	bne.n	8007124 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	781b      	ldrb	r3, [r3, #0]
 80070c4:	f003 030f 	and.w	r3, r3, #15
 80070c8:	2101      	movs	r1, #1
 80070ca:	fa01 f303 	lsl.w	r3, r1, r3
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	43db      	mvns	r3, r3
 80070d2:	68f9      	ldr	r1, [r7, #12]
 80070d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070d8:	4013      	ands	r3, r2
 80070da:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070e2:	69da      	ldr	r2, [r3, #28]
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	781b      	ldrb	r3, [r3, #0]
 80070e8:	f003 030f 	and.w	r3, r3, #15
 80070ec:	2101      	movs	r1, #1
 80070ee:	fa01 f303 	lsl.w	r3, r1, r3
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	43db      	mvns	r3, r3
 80070f6:	68f9      	ldr	r1, [r7, #12]
 80070f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070fc:	4013      	ands	r3, r2
 80070fe:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	015a      	lsls	r2, r3, #5
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	4413      	add	r3, r2
 8007108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800710c:	681a      	ldr	r2, [r3, #0]
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	0159      	lsls	r1, r3, #5
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	440b      	add	r3, r1
 8007116:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800711a:	4619      	mov	r1, r3
 800711c:	4b1f      	ldr	r3, [pc, #124]	; (800719c <USB_DeactivateEndpoint+0x100>)
 800711e:	4013      	ands	r3, r2
 8007120:	600b      	str	r3, [r1, #0]
 8007122:	e034      	b.n	800718e <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800712a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	f003 030f 	and.w	r3, r3, #15
 8007134:	2101      	movs	r1, #1
 8007136:	fa01 f303 	lsl.w	r3, r1, r3
 800713a:	041b      	lsls	r3, r3, #16
 800713c:	43db      	mvns	r3, r3
 800713e:	68f9      	ldr	r1, [r7, #12]
 8007140:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007144:	4013      	ands	r3, r2
 8007146:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800714e:	69da      	ldr	r2, [r3, #28]
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	781b      	ldrb	r3, [r3, #0]
 8007154:	f003 030f 	and.w	r3, r3, #15
 8007158:	2101      	movs	r1, #1
 800715a:	fa01 f303 	lsl.w	r3, r1, r3
 800715e:	041b      	lsls	r3, r3, #16
 8007160:	43db      	mvns	r3, r3
 8007162:	68f9      	ldr	r1, [r7, #12]
 8007164:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007168:	4013      	ands	r3, r2
 800716a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	015a      	lsls	r2, r3, #5
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	4413      	add	r3, r2
 8007174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007178:	681a      	ldr	r2, [r3, #0]
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	0159      	lsls	r1, r3, #5
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	440b      	add	r3, r1
 8007182:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007186:	4619      	mov	r1, r3
 8007188:	4b05      	ldr	r3, [pc, #20]	; (80071a0 <USB_DeactivateEndpoint+0x104>)
 800718a:	4013      	ands	r3, r2
 800718c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800718e:	2300      	movs	r3, #0
}
 8007190:	4618      	mov	r0, r3
 8007192:	3714      	adds	r7, #20
 8007194:	46bd      	mov	sp, r7
 8007196:	bc80      	pop	{r7}
 8007198:	4770      	bx	lr
 800719a:	bf00      	nop
 800719c:	ec337800 	.word	0xec337800
 80071a0:	eff37800 	.word	0xeff37800

080071a4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b08a      	sub	sp, #40	; 0x28
 80071a8:	af02      	add	r7, sp, #8
 80071aa:	60f8      	str	r0, [r7, #12]
 80071ac:	60b9      	str	r1, [r7, #8]
 80071ae:	4613      	mov	r3, r2
 80071b0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	781b      	ldrb	r3, [r3, #0]
 80071ba:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	785b      	ldrb	r3, [r3, #1]
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	f040 815c 	bne.w	800747e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	695b      	ldr	r3, [r3, #20]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d132      	bne.n	8007234 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80071ce:	69bb      	ldr	r3, [r7, #24]
 80071d0:	015a      	lsls	r2, r3, #5
 80071d2:	69fb      	ldr	r3, [r7, #28]
 80071d4:	4413      	add	r3, r2
 80071d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071da:	691b      	ldr	r3, [r3, #16]
 80071dc:	69ba      	ldr	r2, [r7, #24]
 80071de:	0151      	lsls	r1, r2, #5
 80071e0:	69fa      	ldr	r2, [r7, #28]
 80071e2:	440a      	add	r2, r1
 80071e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071e8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80071ec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80071f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80071f2:	69bb      	ldr	r3, [r7, #24]
 80071f4:	015a      	lsls	r2, r3, #5
 80071f6:	69fb      	ldr	r3, [r7, #28]
 80071f8:	4413      	add	r3, r2
 80071fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071fe:	691b      	ldr	r3, [r3, #16]
 8007200:	69ba      	ldr	r2, [r7, #24]
 8007202:	0151      	lsls	r1, r2, #5
 8007204:	69fa      	ldr	r2, [r7, #28]
 8007206:	440a      	add	r2, r1
 8007208:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800720c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007210:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007212:	69bb      	ldr	r3, [r7, #24]
 8007214:	015a      	lsls	r2, r3, #5
 8007216:	69fb      	ldr	r3, [r7, #28]
 8007218:	4413      	add	r3, r2
 800721a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800721e:	691b      	ldr	r3, [r3, #16]
 8007220:	69ba      	ldr	r2, [r7, #24]
 8007222:	0151      	lsls	r1, r2, #5
 8007224:	69fa      	ldr	r2, [r7, #28]
 8007226:	440a      	add	r2, r1
 8007228:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800722c:	0cdb      	lsrs	r3, r3, #19
 800722e:	04db      	lsls	r3, r3, #19
 8007230:	6113      	str	r3, [r2, #16]
 8007232:	e074      	b.n	800731e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007234:	69bb      	ldr	r3, [r7, #24]
 8007236:	015a      	lsls	r2, r3, #5
 8007238:	69fb      	ldr	r3, [r7, #28]
 800723a:	4413      	add	r3, r2
 800723c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007240:	691b      	ldr	r3, [r3, #16]
 8007242:	69ba      	ldr	r2, [r7, #24]
 8007244:	0151      	lsls	r1, r2, #5
 8007246:	69fa      	ldr	r2, [r7, #28]
 8007248:	440a      	add	r2, r1
 800724a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800724e:	0cdb      	lsrs	r3, r3, #19
 8007250:	04db      	lsls	r3, r3, #19
 8007252:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007254:	69bb      	ldr	r3, [r7, #24]
 8007256:	015a      	lsls	r2, r3, #5
 8007258:	69fb      	ldr	r3, [r7, #28]
 800725a:	4413      	add	r3, r2
 800725c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007260:	691b      	ldr	r3, [r3, #16]
 8007262:	69ba      	ldr	r2, [r7, #24]
 8007264:	0151      	lsls	r1, r2, #5
 8007266:	69fa      	ldr	r2, [r7, #28]
 8007268:	440a      	add	r2, r1
 800726a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800726e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007272:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007276:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007278:	69bb      	ldr	r3, [r7, #24]
 800727a:	015a      	lsls	r2, r3, #5
 800727c:	69fb      	ldr	r3, [r7, #28]
 800727e:	4413      	add	r3, r2
 8007280:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007284:	691a      	ldr	r2, [r3, #16]
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	6959      	ldr	r1, [r3, #20]
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	689b      	ldr	r3, [r3, #8]
 800728e:	440b      	add	r3, r1
 8007290:	1e59      	subs	r1, r3, #1
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	689b      	ldr	r3, [r3, #8]
 8007296:	fbb1 f3f3 	udiv	r3, r1, r3
 800729a:	04d9      	lsls	r1, r3, #19
 800729c:	4b9d      	ldr	r3, [pc, #628]	; (8007514 <USB_EPStartXfer+0x370>)
 800729e:	400b      	ands	r3, r1
 80072a0:	69b9      	ldr	r1, [r7, #24]
 80072a2:	0148      	lsls	r0, r1, #5
 80072a4:	69f9      	ldr	r1, [r7, #28]
 80072a6:	4401      	add	r1, r0
 80072a8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80072ac:	4313      	orrs	r3, r2
 80072ae:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80072b0:	69bb      	ldr	r3, [r7, #24]
 80072b2:	015a      	lsls	r2, r3, #5
 80072b4:	69fb      	ldr	r3, [r7, #28]
 80072b6:	4413      	add	r3, r2
 80072b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072bc:	691a      	ldr	r2, [r3, #16]
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	695b      	ldr	r3, [r3, #20]
 80072c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072c6:	69b9      	ldr	r1, [r7, #24]
 80072c8:	0148      	lsls	r0, r1, #5
 80072ca:	69f9      	ldr	r1, [r7, #28]
 80072cc:	4401      	add	r1, r0
 80072ce:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80072d2:	4313      	orrs	r3, r2
 80072d4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	78db      	ldrb	r3, [r3, #3]
 80072da:	2b01      	cmp	r3, #1
 80072dc:	d11f      	bne.n	800731e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80072de:	69bb      	ldr	r3, [r7, #24]
 80072e0:	015a      	lsls	r2, r3, #5
 80072e2:	69fb      	ldr	r3, [r7, #28]
 80072e4:	4413      	add	r3, r2
 80072e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072ea:	691b      	ldr	r3, [r3, #16]
 80072ec:	69ba      	ldr	r2, [r7, #24]
 80072ee:	0151      	lsls	r1, r2, #5
 80072f0:	69fa      	ldr	r2, [r7, #28]
 80072f2:	440a      	add	r2, r1
 80072f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072f8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80072fc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80072fe:	69bb      	ldr	r3, [r7, #24]
 8007300:	015a      	lsls	r2, r3, #5
 8007302:	69fb      	ldr	r3, [r7, #28]
 8007304:	4413      	add	r3, r2
 8007306:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800730a:	691b      	ldr	r3, [r3, #16]
 800730c:	69ba      	ldr	r2, [r7, #24]
 800730e:	0151      	lsls	r1, r2, #5
 8007310:	69fa      	ldr	r2, [r7, #28]
 8007312:	440a      	add	r2, r1
 8007314:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007318:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800731c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800731e:	79fb      	ldrb	r3, [r7, #7]
 8007320:	2b01      	cmp	r3, #1
 8007322:	d14b      	bne.n	80073bc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	691b      	ldr	r3, [r3, #16]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d009      	beq.n	8007340 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800732c:	69bb      	ldr	r3, [r7, #24]
 800732e:	015a      	lsls	r2, r3, #5
 8007330:	69fb      	ldr	r3, [r7, #28]
 8007332:	4413      	add	r3, r2
 8007334:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007338:	461a      	mov	r2, r3
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	691b      	ldr	r3, [r3, #16]
 800733e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	78db      	ldrb	r3, [r3, #3]
 8007344:	2b01      	cmp	r3, #1
 8007346:	d128      	bne.n	800739a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007348:	69fb      	ldr	r3, [r7, #28]
 800734a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800734e:	689b      	ldr	r3, [r3, #8]
 8007350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007354:	2b00      	cmp	r3, #0
 8007356:	d110      	bne.n	800737a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007358:	69bb      	ldr	r3, [r7, #24]
 800735a:	015a      	lsls	r2, r3, #5
 800735c:	69fb      	ldr	r3, [r7, #28]
 800735e:	4413      	add	r3, r2
 8007360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	69ba      	ldr	r2, [r7, #24]
 8007368:	0151      	lsls	r1, r2, #5
 800736a:	69fa      	ldr	r2, [r7, #28]
 800736c:	440a      	add	r2, r1
 800736e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007372:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007376:	6013      	str	r3, [r2, #0]
 8007378:	e00f      	b.n	800739a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800737a:	69bb      	ldr	r3, [r7, #24]
 800737c:	015a      	lsls	r2, r3, #5
 800737e:	69fb      	ldr	r3, [r7, #28]
 8007380:	4413      	add	r3, r2
 8007382:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	69ba      	ldr	r2, [r7, #24]
 800738a:	0151      	lsls	r1, r2, #5
 800738c:	69fa      	ldr	r2, [r7, #28]
 800738e:	440a      	add	r2, r1
 8007390:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007394:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007398:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800739a:	69bb      	ldr	r3, [r7, #24]
 800739c:	015a      	lsls	r2, r3, #5
 800739e:	69fb      	ldr	r3, [r7, #28]
 80073a0:	4413      	add	r3, r2
 80073a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	69ba      	ldr	r2, [r7, #24]
 80073aa:	0151      	lsls	r1, r2, #5
 80073ac:	69fa      	ldr	r2, [r7, #28]
 80073ae:	440a      	add	r2, r1
 80073b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073b4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80073b8:	6013      	str	r3, [r2, #0]
 80073ba:	e12f      	b.n	800761c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80073bc:	69bb      	ldr	r3, [r7, #24]
 80073be:	015a      	lsls	r2, r3, #5
 80073c0:	69fb      	ldr	r3, [r7, #28]
 80073c2:	4413      	add	r3, r2
 80073c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	69ba      	ldr	r2, [r7, #24]
 80073cc:	0151      	lsls	r1, r2, #5
 80073ce:	69fa      	ldr	r2, [r7, #28]
 80073d0:	440a      	add	r2, r1
 80073d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80073da:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	78db      	ldrb	r3, [r3, #3]
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	d015      	beq.n	8007410 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	695b      	ldr	r3, [r3, #20]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	f000 8117 	beq.w	800761c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80073ee:	69fb      	ldr	r3, [r7, #28]
 80073f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	781b      	ldrb	r3, [r3, #0]
 80073fa:	f003 030f 	and.w	r3, r3, #15
 80073fe:	2101      	movs	r1, #1
 8007400:	fa01 f303 	lsl.w	r3, r1, r3
 8007404:	69f9      	ldr	r1, [r7, #28]
 8007406:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800740a:	4313      	orrs	r3, r2
 800740c:	634b      	str	r3, [r1, #52]	; 0x34
 800740e:	e105      	b.n	800761c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007410:	69fb      	ldr	r3, [r7, #28]
 8007412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007416:	689b      	ldr	r3, [r3, #8]
 8007418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800741c:	2b00      	cmp	r3, #0
 800741e:	d110      	bne.n	8007442 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007420:	69bb      	ldr	r3, [r7, #24]
 8007422:	015a      	lsls	r2, r3, #5
 8007424:	69fb      	ldr	r3, [r7, #28]
 8007426:	4413      	add	r3, r2
 8007428:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	69ba      	ldr	r2, [r7, #24]
 8007430:	0151      	lsls	r1, r2, #5
 8007432:	69fa      	ldr	r2, [r7, #28]
 8007434:	440a      	add	r2, r1
 8007436:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800743a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800743e:	6013      	str	r3, [r2, #0]
 8007440:	e00f      	b.n	8007462 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007442:	69bb      	ldr	r3, [r7, #24]
 8007444:	015a      	lsls	r2, r3, #5
 8007446:	69fb      	ldr	r3, [r7, #28]
 8007448:	4413      	add	r3, r2
 800744a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	69ba      	ldr	r2, [r7, #24]
 8007452:	0151      	lsls	r1, r2, #5
 8007454:	69fa      	ldr	r2, [r7, #28]
 8007456:	440a      	add	r2, r1
 8007458:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800745c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007460:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	68d9      	ldr	r1, [r3, #12]
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	781a      	ldrb	r2, [r3, #0]
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	695b      	ldr	r3, [r3, #20]
 800746e:	b298      	uxth	r0, r3
 8007470:	79fb      	ldrb	r3, [r7, #7]
 8007472:	9300      	str	r3, [sp, #0]
 8007474:	4603      	mov	r3, r0
 8007476:	68f8      	ldr	r0, [r7, #12]
 8007478:	f000 fa2a 	bl	80078d0 <USB_WritePacket>
 800747c:	e0ce      	b.n	800761c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800747e:	69bb      	ldr	r3, [r7, #24]
 8007480:	015a      	lsls	r2, r3, #5
 8007482:	69fb      	ldr	r3, [r7, #28]
 8007484:	4413      	add	r3, r2
 8007486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800748a:	691b      	ldr	r3, [r3, #16]
 800748c:	69ba      	ldr	r2, [r7, #24]
 800748e:	0151      	lsls	r1, r2, #5
 8007490:	69fa      	ldr	r2, [r7, #28]
 8007492:	440a      	add	r2, r1
 8007494:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007498:	0cdb      	lsrs	r3, r3, #19
 800749a:	04db      	lsls	r3, r3, #19
 800749c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800749e:	69bb      	ldr	r3, [r7, #24]
 80074a0:	015a      	lsls	r2, r3, #5
 80074a2:	69fb      	ldr	r3, [r7, #28]
 80074a4:	4413      	add	r3, r2
 80074a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074aa:	691b      	ldr	r3, [r3, #16]
 80074ac:	69ba      	ldr	r2, [r7, #24]
 80074ae:	0151      	lsls	r1, r2, #5
 80074b0:	69fa      	ldr	r2, [r7, #28]
 80074b2:	440a      	add	r2, r1
 80074b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80074bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80074c0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	695b      	ldr	r3, [r3, #20]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d126      	bne.n	8007518 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80074ca:	69bb      	ldr	r3, [r7, #24]
 80074cc:	015a      	lsls	r2, r3, #5
 80074ce:	69fb      	ldr	r3, [r7, #28]
 80074d0:	4413      	add	r3, r2
 80074d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074d6:	691a      	ldr	r2, [r3, #16]
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	689b      	ldr	r3, [r3, #8]
 80074dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074e0:	69b9      	ldr	r1, [r7, #24]
 80074e2:	0148      	lsls	r0, r1, #5
 80074e4:	69f9      	ldr	r1, [r7, #28]
 80074e6:	4401      	add	r1, r0
 80074e8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80074ec:	4313      	orrs	r3, r2
 80074ee:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80074f0:	69bb      	ldr	r3, [r7, #24]
 80074f2:	015a      	lsls	r2, r3, #5
 80074f4:	69fb      	ldr	r3, [r7, #28]
 80074f6:	4413      	add	r3, r2
 80074f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074fc:	691b      	ldr	r3, [r3, #16]
 80074fe:	69ba      	ldr	r2, [r7, #24]
 8007500:	0151      	lsls	r1, r2, #5
 8007502:	69fa      	ldr	r2, [r7, #28]
 8007504:	440a      	add	r2, r1
 8007506:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800750a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800750e:	6113      	str	r3, [r2, #16]
 8007510:	e036      	b.n	8007580 <USB_EPStartXfer+0x3dc>
 8007512:	bf00      	nop
 8007514:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	695a      	ldr	r2, [r3, #20]
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	4413      	add	r3, r2
 8007522:	1e5a      	subs	r2, r3, #1
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	689b      	ldr	r3, [r3, #8]
 8007528:	fbb2 f3f3 	udiv	r3, r2, r3
 800752c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800752e:	69bb      	ldr	r3, [r7, #24]
 8007530:	015a      	lsls	r2, r3, #5
 8007532:	69fb      	ldr	r3, [r7, #28]
 8007534:	4413      	add	r3, r2
 8007536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800753a:	691a      	ldr	r2, [r3, #16]
 800753c:	8afb      	ldrh	r3, [r7, #22]
 800753e:	04d9      	lsls	r1, r3, #19
 8007540:	4b39      	ldr	r3, [pc, #228]	; (8007628 <USB_EPStartXfer+0x484>)
 8007542:	400b      	ands	r3, r1
 8007544:	69b9      	ldr	r1, [r7, #24]
 8007546:	0148      	lsls	r0, r1, #5
 8007548:	69f9      	ldr	r1, [r7, #28]
 800754a:	4401      	add	r1, r0
 800754c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007550:	4313      	orrs	r3, r2
 8007552:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8007554:	69bb      	ldr	r3, [r7, #24]
 8007556:	015a      	lsls	r2, r3, #5
 8007558:	69fb      	ldr	r3, [r7, #28]
 800755a:	4413      	add	r3, r2
 800755c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007560:	691a      	ldr	r2, [r3, #16]
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	8af9      	ldrh	r1, [r7, #22]
 8007568:	fb01 f303 	mul.w	r3, r1, r3
 800756c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007570:	69b9      	ldr	r1, [r7, #24]
 8007572:	0148      	lsls	r0, r1, #5
 8007574:	69f9      	ldr	r1, [r7, #28]
 8007576:	4401      	add	r1, r0
 8007578:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800757c:	4313      	orrs	r3, r2
 800757e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007580:	79fb      	ldrb	r3, [r7, #7]
 8007582:	2b01      	cmp	r3, #1
 8007584:	d10d      	bne.n	80075a2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	68db      	ldr	r3, [r3, #12]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d009      	beq.n	80075a2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	68d9      	ldr	r1, [r3, #12]
 8007592:	69bb      	ldr	r3, [r7, #24]
 8007594:	015a      	lsls	r2, r3, #5
 8007596:	69fb      	ldr	r3, [r7, #28]
 8007598:	4413      	add	r3, r2
 800759a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800759e:	460a      	mov	r2, r1
 80075a0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	78db      	ldrb	r3, [r3, #3]
 80075a6:	2b01      	cmp	r3, #1
 80075a8:	d128      	bne.n	80075fc <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80075aa:	69fb      	ldr	r3, [r7, #28]
 80075ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075b0:	689b      	ldr	r3, [r3, #8]
 80075b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d110      	bne.n	80075dc <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80075ba:	69bb      	ldr	r3, [r7, #24]
 80075bc:	015a      	lsls	r2, r3, #5
 80075be:	69fb      	ldr	r3, [r7, #28]
 80075c0:	4413      	add	r3, r2
 80075c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	69ba      	ldr	r2, [r7, #24]
 80075ca:	0151      	lsls	r1, r2, #5
 80075cc:	69fa      	ldr	r2, [r7, #28]
 80075ce:	440a      	add	r2, r1
 80075d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80075d8:	6013      	str	r3, [r2, #0]
 80075da:	e00f      	b.n	80075fc <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80075dc:	69bb      	ldr	r3, [r7, #24]
 80075de:	015a      	lsls	r2, r3, #5
 80075e0:	69fb      	ldr	r3, [r7, #28]
 80075e2:	4413      	add	r3, r2
 80075e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	69ba      	ldr	r2, [r7, #24]
 80075ec:	0151      	lsls	r1, r2, #5
 80075ee:	69fa      	ldr	r2, [r7, #28]
 80075f0:	440a      	add	r2, r1
 80075f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075fa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80075fc:	69bb      	ldr	r3, [r7, #24]
 80075fe:	015a      	lsls	r2, r3, #5
 8007600:	69fb      	ldr	r3, [r7, #28]
 8007602:	4413      	add	r3, r2
 8007604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	69ba      	ldr	r2, [r7, #24]
 800760c:	0151      	lsls	r1, r2, #5
 800760e:	69fa      	ldr	r2, [r7, #28]
 8007610:	440a      	add	r2, r1
 8007612:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007616:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800761a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800761c:	2300      	movs	r3, #0
}
 800761e:	4618      	mov	r0, r3
 8007620:	3720      	adds	r7, #32
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}
 8007626:	bf00      	nop
 8007628:	1ff80000 	.word	0x1ff80000

0800762c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800762c:	b480      	push	{r7}
 800762e:	b087      	sub	sp, #28
 8007630:	af00      	add	r7, sp, #0
 8007632:	60f8      	str	r0, [r7, #12]
 8007634:	60b9      	str	r1, [r7, #8]
 8007636:	4613      	mov	r3, r2
 8007638:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	781b      	ldrb	r3, [r3, #0]
 8007642:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	785b      	ldrb	r3, [r3, #1]
 8007648:	2b01      	cmp	r3, #1
 800764a:	f040 80cd 	bne.w	80077e8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	695b      	ldr	r3, [r3, #20]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d132      	bne.n	80076bc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	015a      	lsls	r2, r3, #5
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	4413      	add	r3, r2
 800765e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007662:	691b      	ldr	r3, [r3, #16]
 8007664:	693a      	ldr	r2, [r7, #16]
 8007666:	0151      	lsls	r1, r2, #5
 8007668:	697a      	ldr	r2, [r7, #20]
 800766a:	440a      	add	r2, r1
 800766c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007670:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007674:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007678:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	015a      	lsls	r2, r3, #5
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	4413      	add	r3, r2
 8007682:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007686:	691b      	ldr	r3, [r3, #16]
 8007688:	693a      	ldr	r2, [r7, #16]
 800768a:	0151      	lsls	r1, r2, #5
 800768c:	697a      	ldr	r2, [r7, #20]
 800768e:	440a      	add	r2, r1
 8007690:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007694:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007698:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	015a      	lsls	r2, r3, #5
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	4413      	add	r3, r2
 80076a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076a6:	691b      	ldr	r3, [r3, #16]
 80076a8:	693a      	ldr	r2, [r7, #16]
 80076aa:	0151      	lsls	r1, r2, #5
 80076ac:	697a      	ldr	r2, [r7, #20]
 80076ae:	440a      	add	r2, r1
 80076b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076b4:	0cdb      	lsrs	r3, r3, #19
 80076b6:	04db      	lsls	r3, r3, #19
 80076b8:	6113      	str	r3, [r2, #16]
 80076ba:	e04e      	b.n	800775a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	015a      	lsls	r2, r3, #5
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	4413      	add	r3, r2
 80076c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076c8:	691b      	ldr	r3, [r3, #16]
 80076ca:	693a      	ldr	r2, [r7, #16]
 80076cc:	0151      	lsls	r1, r2, #5
 80076ce:	697a      	ldr	r2, [r7, #20]
 80076d0:	440a      	add	r2, r1
 80076d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076d6:	0cdb      	lsrs	r3, r3, #19
 80076d8:	04db      	lsls	r3, r3, #19
 80076da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	015a      	lsls	r2, r3, #5
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	4413      	add	r3, r2
 80076e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076e8:	691b      	ldr	r3, [r3, #16]
 80076ea:	693a      	ldr	r2, [r7, #16]
 80076ec:	0151      	lsls	r1, r2, #5
 80076ee:	697a      	ldr	r2, [r7, #20]
 80076f0:	440a      	add	r2, r1
 80076f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076f6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80076fa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80076fe:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	695a      	ldr	r2, [r3, #20]
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	689b      	ldr	r3, [r3, #8]
 8007708:	429a      	cmp	r2, r3
 800770a:	d903      	bls.n	8007714 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	689a      	ldr	r2, [r3, #8]
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	015a      	lsls	r2, r3, #5
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	4413      	add	r3, r2
 800771c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007720:	691b      	ldr	r3, [r3, #16]
 8007722:	693a      	ldr	r2, [r7, #16]
 8007724:	0151      	lsls	r1, r2, #5
 8007726:	697a      	ldr	r2, [r7, #20]
 8007728:	440a      	add	r2, r1
 800772a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800772e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007732:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	015a      	lsls	r2, r3, #5
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	4413      	add	r3, r2
 800773c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007740:	691a      	ldr	r2, [r3, #16]
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	695b      	ldr	r3, [r3, #20]
 8007746:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800774a:	6939      	ldr	r1, [r7, #16]
 800774c:	0148      	lsls	r0, r1, #5
 800774e:	6979      	ldr	r1, [r7, #20]
 8007750:	4401      	add	r1, r0
 8007752:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007756:	4313      	orrs	r3, r2
 8007758:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800775a:	79fb      	ldrb	r3, [r7, #7]
 800775c:	2b01      	cmp	r3, #1
 800775e:	d11e      	bne.n	800779e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	691b      	ldr	r3, [r3, #16]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d009      	beq.n	800777c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	015a      	lsls	r2, r3, #5
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	4413      	add	r3, r2
 8007770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007774:	461a      	mov	r2, r3
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	691b      	ldr	r3, [r3, #16]
 800777a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800777c:	693b      	ldr	r3, [r7, #16]
 800777e:	015a      	lsls	r2, r3, #5
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	4413      	add	r3, r2
 8007784:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	693a      	ldr	r2, [r7, #16]
 800778c:	0151      	lsls	r1, r2, #5
 800778e:	697a      	ldr	r2, [r7, #20]
 8007790:	440a      	add	r2, r1
 8007792:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007796:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800779a:	6013      	str	r3, [r2, #0]
 800779c:	e092      	b.n	80078c4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	015a      	lsls	r2, r3, #5
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	4413      	add	r3, r2
 80077a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	693a      	ldr	r2, [r7, #16]
 80077ae:	0151      	lsls	r1, r2, #5
 80077b0:	697a      	ldr	r2, [r7, #20]
 80077b2:	440a      	add	r2, r1
 80077b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077b8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80077bc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	695b      	ldr	r3, [r3, #20]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d07e      	beq.n	80078c4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	781b      	ldrb	r3, [r3, #0]
 80077d2:	f003 030f 	and.w	r3, r3, #15
 80077d6:	2101      	movs	r1, #1
 80077d8:	fa01 f303 	lsl.w	r3, r1, r3
 80077dc:	6979      	ldr	r1, [r7, #20]
 80077de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80077e2:	4313      	orrs	r3, r2
 80077e4:	634b      	str	r3, [r1, #52]	; 0x34
 80077e6:	e06d      	b.n	80078c4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	015a      	lsls	r2, r3, #5
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	4413      	add	r3, r2
 80077f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077f4:	691b      	ldr	r3, [r3, #16]
 80077f6:	693a      	ldr	r2, [r7, #16]
 80077f8:	0151      	lsls	r1, r2, #5
 80077fa:	697a      	ldr	r2, [r7, #20]
 80077fc:	440a      	add	r2, r1
 80077fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007802:	0cdb      	lsrs	r3, r3, #19
 8007804:	04db      	lsls	r3, r3, #19
 8007806:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	015a      	lsls	r2, r3, #5
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	4413      	add	r3, r2
 8007810:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007814:	691b      	ldr	r3, [r3, #16]
 8007816:	693a      	ldr	r2, [r7, #16]
 8007818:	0151      	lsls	r1, r2, #5
 800781a:	697a      	ldr	r2, [r7, #20]
 800781c:	440a      	add	r2, r1
 800781e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007822:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007826:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800782a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	695b      	ldr	r3, [r3, #20]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d003      	beq.n	800783c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	689a      	ldr	r2, [r3, #8]
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	015a      	lsls	r2, r3, #5
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	4413      	add	r3, r2
 8007844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007848:	691b      	ldr	r3, [r3, #16]
 800784a:	693a      	ldr	r2, [r7, #16]
 800784c:	0151      	lsls	r1, r2, #5
 800784e:	697a      	ldr	r2, [r7, #20]
 8007850:	440a      	add	r2, r1
 8007852:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007856:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800785a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	015a      	lsls	r2, r3, #5
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	4413      	add	r3, r2
 8007864:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007868:	691a      	ldr	r2, [r3, #16]
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	689b      	ldr	r3, [r3, #8]
 800786e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007872:	6939      	ldr	r1, [r7, #16]
 8007874:	0148      	lsls	r0, r1, #5
 8007876:	6979      	ldr	r1, [r7, #20]
 8007878:	4401      	add	r1, r0
 800787a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800787e:	4313      	orrs	r3, r2
 8007880:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007882:	79fb      	ldrb	r3, [r7, #7]
 8007884:	2b01      	cmp	r3, #1
 8007886:	d10d      	bne.n	80078a4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	68db      	ldr	r3, [r3, #12]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d009      	beq.n	80078a4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	68d9      	ldr	r1, [r3, #12]
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	015a      	lsls	r2, r3, #5
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	4413      	add	r3, r2
 800789c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078a0:	460a      	mov	r2, r1
 80078a2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	015a      	lsls	r2, r3, #5
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	4413      	add	r3, r2
 80078ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	693a      	ldr	r2, [r7, #16]
 80078b4:	0151      	lsls	r1, r2, #5
 80078b6:	697a      	ldr	r2, [r7, #20]
 80078b8:	440a      	add	r2, r1
 80078ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078be:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80078c2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80078c4:	2300      	movs	r3, #0
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	371c      	adds	r7, #28
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bc80      	pop	{r7}
 80078ce:	4770      	bx	lr

080078d0 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b089      	sub	sp, #36	; 0x24
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	60f8      	str	r0, [r7, #12]
 80078d8:	60b9      	str	r1, [r7, #8]
 80078da:	4611      	mov	r1, r2
 80078dc:	461a      	mov	r2, r3
 80078de:	460b      	mov	r3, r1
 80078e0:	71fb      	strb	r3, [r7, #7]
 80078e2:	4613      	mov	r3, r2
 80078e4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80078ee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d11a      	bne.n	800792c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80078f6:	88bb      	ldrh	r3, [r7, #4]
 80078f8:	3303      	adds	r3, #3
 80078fa:	089b      	lsrs	r3, r3, #2
 80078fc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80078fe:	2300      	movs	r3, #0
 8007900:	61bb      	str	r3, [r7, #24]
 8007902:	e00f      	b.n	8007924 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007904:	79fb      	ldrb	r3, [r7, #7]
 8007906:	031a      	lsls	r2, r3, #12
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	4413      	add	r3, r2
 800790c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007910:	461a      	mov	r2, r3
 8007912:	69fb      	ldr	r3, [r7, #28]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007918:	69fb      	ldr	r3, [r7, #28]
 800791a:	3304      	adds	r3, #4
 800791c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800791e:	69bb      	ldr	r3, [r7, #24]
 8007920:	3301      	adds	r3, #1
 8007922:	61bb      	str	r3, [r7, #24]
 8007924:	69ba      	ldr	r2, [r7, #24]
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	429a      	cmp	r2, r3
 800792a:	d3eb      	bcc.n	8007904 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800792c:	2300      	movs	r3, #0
}
 800792e:	4618      	mov	r0, r3
 8007930:	3724      	adds	r7, #36	; 0x24
 8007932:	46bd      	mov	sp, r7
 8007934:	bc80      	pop	{r7}
 8007936:	4770      	bx	lr

08007938 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007938:	b480      	push	{r7}
 800793a:	b089      	sub	sp, #36	; 0x24
 800793c:	af00      	add	r7, sp, #0
 800793e:	60f8      	str	r0, [r7, #12]
 8007940:	60b9      	str	r1, [r7, #8]
 8007942:	4613      	mov	r3, r2
 8007944:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800794e:	88fb      	ldrh	r3, [r7, #6]
 8007950:	3303      	adds	r3, #3
 8007952:	089b      	lsrs	r3, r3, #2
 8007954:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8007956:	2300      	movs	r3, #0
 8007958:	61bb      	str	r3, [r7, #24]
 800795a:	e00b      	b.n	8007974 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007962:	681a      	ldr	r2, [r3, #0]
 8007964:	69fb      	ldr	r3, [r7, #28]
 8007966:	601a      	str	r2, [r3, #0]
    pDest++;
 8007968:	69fb      	ldr	r3, [r7, #28]
 800796a:	3304      	adds	r3, #4
 800796c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800796e:	69bb      	ldr	r3, [r7, #24]
 8007970:	3301      	adds	r3, #1
 8007972:	61bb      	str	r3, [r7, #24]
 8007974:	69ba      	ldr	r2, [r7, #24]
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	429a      	cmp	r2, r3
 800797a:	d3ef      	bcc.n	800795c <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800797c:	69fb      	ldr	r3, [r7, #28]
}
 800797e:	4618      	mov	r0, r3
 8007980:	3724      	adds	r7, #36	; 0x24
 8007982:	46bd      	mov	sp, r7
 8007984:	bc80      	pop	{r7}
 8007986:	4770      	bx	lr

08007988 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007988:	b480      	push	{r7}
 800798a:	b085      	sub	sp, #20
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	781b      	ldrb	r3, [r3, #0]
 800799a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	785b      	ldrb	r3, [r3, #1]
 80079a0:	2b01      	cmp	r3, #1
 80079a2:	d12c      	bne.n	80079fe <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	015a      	lsls	r2, r3, #5
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	4413      	add	r3, r2
 80079ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	db12      	blt.n	80079dc <USB_EPSetStall+0x54>
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d00f      	beq.n	80079dc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	015a      	lsls	r2, r3, #5
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	4413      	add	r3, r2
 80079c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	68ba      	ldr	r2, [r7, #8]
 80079cc:	0151      	lsls	r1, r2, #5
 80079ce:	68fa      	ldr	r2, [r7, #12]
 80079d0:	440a      	add	r2, r1
 80079d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079d6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80079da:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	015a      	lsls	r2, r3, #5
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	4413      	add	r3, r2
 80079e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	68ba      	ldr	r2, [r7, #8]
 80079ec:	0151      	lsls	r1, r2, #5
 80079ee:	68fa      	ldr	r2, [r7, #12]
 80079f0:	440a      	add	r2, r1
 80079f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80079fa:	6013      	str	r3, [r2, #0]
 80079fc:	e02b      	b.n	8007a56 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	015a      	lsls	r2, r3, #5
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	4413      	add	r3, r2
 8007a06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	db12      	blt.n	8007a36 <USB_EPSetStall+0xae>
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d00f      	beq.n	8007a36 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	015a      	lsls	r2, r3, #5
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	4413      	add	r3, r2
 8007a1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	68ba      	ldr	r2, [r7, #8]
 8007a26:	0151      	lsls	r1, r2, #5
 8007a28:	68fa      	ldr	r2, [r7, #12]
 8007a2a:	440a      	add	r2, r1
 8007a2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a30:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007a34:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	015a      	lsls	r2, r3, #5
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	4413      	add	r3, r2
 8007a3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	68ba      	ldr	r2, [r7, #8]
 8007a46:	0151      	lsls	r1, r2, #5
 8007a48:	68fa      	ldr	r2, [r7, #12]
 8007a4a:	440a      	add	r2, r1
 8007a4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007a54:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007a56:	2300      	movs	r3, #0
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3714      	adds	r7, #20
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bc80      	pop	{r7}
 8007a60:	4770      	bx	lr

08007a62 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007a62:	b480      	push	{r7}
 8007a64:	b085      	sub	sp, #20
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	6078      	str	r0, [r7, #4]
 8007a6a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	785b      	ldrb	r3, [r3, #1]
 8007a7a:	2b01      	cmp	r3, #1
 8007a7c:	d128      	bne.n	8007ad0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	015a      	lsls	r2, r3, #5
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	4413      	add	r3, r2
 8007a86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	68ba      	ldr	r2, [r7, #8]
 8007a8e:	0151      	lsls	r1, r2, #5
 8007a90:	68fa      	ldr	r2, [r7, #12]
 8007a92:	440a      	add	r2, r1
 8007a94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a98:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007a9c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	78db      	ldrb	r3, [r3, #3]
 8007aa2:	2b03      	cmp	r3, #3
 8007aa4:	d003      	beq.n	8007aae <USB_EPClearStall+0x4c>
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	78db      	ldrb	r3, [r3, #3]
 8007aaa:	2b02      	cmp	r3, #2
 8007aac:	d138      	bne.n	8007b20 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	015a      	lsls	r2, r3, #5
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	4413      	add	r3, r2
 8007ab6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	68ba      	ldr	r2, [r7, #8]
 8007abe:	0151      	lsls	r1, r2, #5
 8007ac0:	68fa      	ldr	r2, [r7, #12]
 8007ac2:	440a      	add	r2, r1
 8007ac4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007acc:	6013      	str	r3, [r2, #0]
 8007ace:	e027      	b.n	8007b20 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	015a      	lsls	r2, r3, #5
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	4413      	add	r3, r2
 8007ad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	68ba      	ldr	r2, [r7, #8]
 8007ae0:	0151      	lsls	r1, r2, #5
 8007ae2:	68fa      	ldr	r2, [r7, #12]
 8007ae4:	440a      	add	r2, r1
 8007ae6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007aea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007aee:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	78db      	ldrb	r3, [r3, #3]
 8007af4:	2b03      	cmp	r3, #3
 8007af6:	d003      	beq.n	8007b00 <USB_EPClearStall+0x9e>
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	78db      	ldrb	r3, [r3, #3]
 8007afc:	2b02      	cmp	r3, #2
 8007afe:	d10f      	bne.n	8007b20 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	015a      	lsls	r2, r3, #5
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	4413      	add	r3, r2
 8007b08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	68ba      	ldr	r2, [r7, #8]
 8007b10:	0151      	lsls	r1, r2, #5
 8007b12:	68fa      	ldr	r2, [r7, #12]
 8007b14:	440a      	add	r2, r1
 8007b16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b1e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007b20:	2300      	movs	r3, #0
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	3714      	adds	r7, #20
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bc80      	pop	{r7}
 8007b2a:	4770      	bx	lr

08007b2c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b085      	sub	sp, #20
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	460b      	mov	r3, r1
 8007b36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	68fa      	ldr	r2, [r7, #12]
 8007b46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b4a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007b4e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b56:	681a      	ldr	r2, [r3, #0]
 8007b58:	78fb      	ldrb	r3, [r7, #3]
 8007b5a:	011b      	lsls	r3, r3, #4
 8007b5c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007b60:	68f9      	ldr	r1, [r7, #12]
 8007b62:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007b66:	4313      	orrs	r3, r2
 8007b68:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007b6a:	2300      	movs	r3, #0
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3714      	adds	r7, #20
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bc80      	pop	{r7}
 8007b74:	4770      	bx	lr

08007b76 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007b76:	b580      	push	{r7, lr}
 8007b78:	b084      	sub	sp, #16
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b88:	685b      	ldr	r3, [r3, #4]
 8007b8a:	68fa      	ldr	r2, [r7, #12]
 8007b8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b90:	f023 0302 	bic.w	r3, r3, #2
 8007b94:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8007b96:	2003      	movs	r0, #3
 8007b98:	f7f9 fb0a 	bl	80011b0 <HAL_Delay>

  return HAL_OK;
 8007b9c:	2300      	movs	r3, #0
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3710      	adds	r7, #16
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}

08007ba6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007ba6:	b580      	push	{r7, lr}
 8007ba8:	b084      	sub	sp, #16
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bb8:	685b      	ldr	r3, [r3, #4]
 8007bba:	68fa      	ldr	r2, [r7, #12]
 8007bbc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007bc0:	f043 0302 	orr.w	r3, r3, #2
 8007bc4:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8007bc6:	2003      	movs	r0, #3
 8007bc8:	f7f9 faf2 	bl	80011b0 <HAL_Delay>

  return HAL_OK;
 8007bcc:	2300      	movs	r3, #0
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3710      	adds	r7, #16
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}

08007bd6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007bd6:	b480      	push	{r7}
 8007bd8:	b085      	sub	sp, #20
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	695b      	ldr	r3, [r3, #20]
 8007be2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	699b      	ldr	r3, [r3, #24]
 8007be8:	68fa      	ldr	r2, [r7, #12]
 8007bea:	4013      	ands	r3, r2
 8007bec:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007bee:	68fb      	ldr	r3, [r7, #12]
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3714      	adds	r7, #20
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bc80      	pop	{r7}
 8007bf8:	4770      	bx	lr

08007bfa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007bfa:	b480      	push	{r7}
 8007bfc:	b085      	sub	sp, #20
 8007bfe:	af00      	add	r7, sp, #0
 8007c00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c0c:	699b      	ldr	r3, [r3, #24]
 8007c0e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c16:	69db      	ldr	r3, [r3, #28]
 8007c18:	68ba      	ldr	r2, [r7, #8]
 8007c1a:	4013      	ands	r3, r2
 8007c1c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	0c1b      	lsrs	r3, r3, #16
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3714      	adds	r7, #20
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bc80      	pop	{r7}
 8007c2a:	4770      	bx	lr

08007c2c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b085      	sub	sp, #20
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c3e:	699b      	ldr	r3, [r3, #24]
 8007c40:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c48:	69db      	ldr	r3, [r3, #28]
 8007c4a:	68ba      	ldr	r2, [r7, #8]
 8007c4c:	4013      	ands	r3, r2
 8007c4e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	b29b      	uxth	r3, r3
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3714      	adds	r7, #20
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bc80      	pop	{r7}
 8007c5c:	4770      	bx	lr

08007c5e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007c5e:	b480      	push	{r7}
 8007c60:	b085      	sub	sp, #20
 8007c62:	af00      	add	r7, sp, #0
 8007c64:	6078      	str	r0, [r7, #4]
 8007c66:	460b      	mov	r3, r1
 8007c68:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007c6e:	78fb      	ldrb	r3, [r7, #3]
 8007c70:	015a      	lsls	r2, r3, #5
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	4413      	add	r3, r2
 8007c76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c7a:	689b      	ldr	r3, [r3, #8]
 8007c7c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c84:	695b      	ldr	r3, [r3, #20]
 8007c86:	68ba      	ldr	r2, [r7, #8]
 8007c88:	4013      	ands	r3, r2
 8007c8a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007c8c:	68bb      	ldr	r3, [r7, #8]
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3714      	adds	r7, #20
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bc80      	pop	{r7}
 8007c96:	4770      	bx	lr

08007c98 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b087      	sub	sp, #28
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	460b      	mov	r3, r1
 8007ca2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cae:	691b      	ldr	r3, [r3, #16]
 8007cb0:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cba:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007cbc:	78fb      	ldrb	r3, [r7, #3]
 8007cbe:	f003 030f 	and.w	r3, r3, #15
 8007cc2:	68fa      	ldr	r2, [r7, #12]
 8007cc4:	fa22 f303 	lsr.w	r3, r2, r3
 8007cc8:	01db      	lsls	r3, r3, #7
 8007cca:	b2db      	uxtb	r3, r3
 8007ccc:	693a      	ldr	r2, [r7, #16]
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007cd2:	78fb      	ldrb	r3, [r7, #3]
 8007cd4:	015a      	lsls	r2, r3, #5
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	4413      	add	r3, r2
 8007cda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cde:	689b      	ldr	r3, [r3, #8]
 8007ce0:	693a      	ldr	r2, [r7, #16]
 8007ce2:	4013      	ands	r3, r2
 8007ce4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007ce6:	68bb      	ldr	r3, [r7, #8]
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	371c      	adds	r7, #28
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bc80      	pop	{r7}
 8007cf0:	4770      	bx	lr

08007cf2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007cf2:	b480      	push	{r7}
 8007cf4:	b083      	sub	sp, #12
 8007cf6:	af00      	add	r7, sp, #0
 8007cf8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	695b      	ldr	r3, [r3, #20]
 8007cfe:	f003 0301 	and.w	r3, r3, #1
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	370c      	adds	r7, #12
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bc80      	pop	{r7}
 8007d0a:	4770      	bx	lr

08007d0c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b085      	sub	sp, #20
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	68fa      	ldr	r2, [r7, #12]
 8007d22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d26:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007d2a:	f023 0307 	bic.w	r3, r3, #7
 8007d2e:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d36:	689b      	ldr	r3, [r3, #8]
 8007d38:	f003 0306 	and.w	r3, r3, #6
 8007d3c:	2b04      	cmp	r3, #4
 8007d3e:	d109      	bne.n	8007d54 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	68fa      	ldr	r2, [r7, #12]
 8007d4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d4e:	f043 0303 	orr.w	r3, r3, #3
 8007d52:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d5a:	685b      	ldr	r3, [r3, #4]
 8007d5c:	68fa      	ldr	r2, [r7, #12]
 8007d5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d66:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007d68:	2300      	movs	r3, #0
}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	3714      	adds	r7, #20
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bc80      	pop	{r7}
 8007d72:	4770      	bx	lr

08007d74 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007d74:	b480      	push	{r7}
 8007d76:	b087      	sub	sp, #28
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	60f8      	str	r0, [r7, #12]
 8007d7c:	460b      	mov	r3, r1
 8007d7e:	607a      	str	r2, [r7, #4]
 8007d80:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	333c      	adds	r3, #60	; 0x3c
 8007d8a:	3304      	adds	r3, #4
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	4a25      	ldr	r2, [pc, #148]	; (8007e28 <USB_EP0_OutStart+0xb4>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d90a      	bls.n	8007dae <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007da4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007da8:	d101      	bne.n	8007dae <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007daa:	2300      	movs	r3, #0
 8007dac:	e037      	b.n	8007e1e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007db4:	461a      	mov	r2, r3
 8007db6:	2300      	movs	r3, #0
 8007db8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dc0:	691b      	ldr	r3, [r3, #16]
 8007dc2:	697a      	ldr	r2, [r7, #20]
 8007dc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007dc8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007dcc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dd4:	691b      	ldr	r3, [r3, #16]
 8007dd6:	697a      	ldr	r2, [r7, #20]
 8007dd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ddc:	f043 0318 	orr.w	r3, r3, #24
 8007de0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007de8:	691b      	ldr	r3, [r3, #16]
 8007dea:	697a      	ldr	r2, [r7, #20]
 8007dec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007df0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007df4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007df6:	7afb      	ldrb	r3, [r7, #11]
 8007df8:	2b01      	cmp	r3, #1
 8007dfa:	d10f      	bne.n	8007e1c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e02:	461a      	mov	r2, r3
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	697a      	ldr	r2, [r7, #20]
 8007e12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e16:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007e1a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007e1c:	2300      	movs	r3, #0
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	371c      	adds	r7, #28
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bc80      	pop	{r7}
 8007e26:	4770      	bx	lr
 8007e28:	4f54300a 	.word	0x4f54300a

08007e2c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b085      	sub	sp, #20
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007e34:	2300      	movs	r3, #0
 8007e36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	3301      	adds	r3, #1
 8007e3c:	60fb      	str	r3, [r7, #12]
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	4a12      	ldr	r2, [pc, #72]	; (8007e8c <USB_CoreReset+0x60>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d901      	bls.n	8007e4a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007e46:	2303      	movs	r3, #3
 8007e48:	e01b      	b.n	8007e82 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	691b      	ldr	r3, [r3, #16]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	daf2      	bge.n	8007e38 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007e52:	2300      	movs	r3, #0
 8007e54:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	691b      	ldr	r3, [r3, #16]
 8007e5a:	f043 0201 	orr.w	r2, r3, #1
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	3301      	adds	r3, #1
 8007e66:	60fb      	str	r3, [r7, #12]
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	4a08      	ldr	r2, [pc, #32]	; (8007e8c <USB_CoreReset+0x60>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d901      	bls.n	8007e74 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007e70:	2303      	movs	r3, #3
 8007e72:	e006      	b.n	8007e82 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	691b      	ldr	r3, [r3, #16]
 8007e78:	f003 0301 	and.w	r3, r3, #1
 8007e7c:	2b01      	cmp	r3, #1
 8007e7e:	d0f0      	beq.n	8007e62 <USB_CoreReset+0x36>

  return HAL_OK;
 8007e80:	2300      	movs	r3, #0
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3714      	adds	r7, #20
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bc80      	pop	{r7}
 8007e8a:	4770      	bx	lr
 8007e8c:	00030d40 	.word	0x00030d40

08007e90 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8007e94:	4904      	ldr	r1, [pc, #16]	; (8007ea8 <MX_FATFS_Init+0x18>)
 8007e96:	4805      	ldr	r0, [pc, #20]	; (8007eac <MX_FATFS_Init+0x1c>)
 8007e98:	f004 fc3c 	bl	800c714 <FATFS_LinkDriver>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	461a      	mov	r2, r3
 8007ea0:	4b03      	ldr	r3, [pc, #12]	; (8007eb0 <MX_FATFS_Init+0x20>)
 8007ea2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007ea4:	bf00      	nop
 8007ea6:	bd80      	pop	{r7, pc}
 8007ea8:	2000060c 	.word	0x2000060c
 8007eac:	0800de80 	.word	0x0800de80
 8007eb0:	20000608 	.word	0x20000608

08007eb4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007eb8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bc80      	pop	{r7}
 8007ec0:	4770      	bx	lr
	...

08007ec4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b082      	sub	sp, #8
 8007ec8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8007ece:	f000 f8a9 	bl	8008024 <BSP_SD_IsDetected>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	d001      	beq.n	8007edc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8007ed8:	2301      	movs	r3, #1
 8007eda:	e012      	b.n	8007f02 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8007edc:	480b      	ldr	r0, [pc, #44]	; (8007f0c <BSP_SD_Init+0x48>)
 8007ede:	f7fc f9d1 	bl	8004284 <HAL_SD_Init>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8007ee6:	79fb      	ldrb	r3, [r7, #7]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d109      	bne.n	8007f00 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8007eec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007ef0:	4806      	ldr	r0, [pc, #24]	; (8007f0c <BSP_SD_Init+0x48>)
 8007ef2:	f7fd f945 	bl	8005180 <HAL_SD_ConfigWideBusOperation>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d001      	beq.n	8007f00 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8007efc:	2301      	movs	r3, #1
 8007efe:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8007f00:	79fb      	ldrb	r3, [r7, #7]
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3708      	adds	r7, #8
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}
 8007f0a:	bf00      	nop
 8007f0c:	20000538 	.word	0x20000538

08007f10 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b088      	sub	sp, #32
 8007f14:	af02      	add	r7, sp, #8
 8007f16:	60f8      	str	r0, [r7, #12]
 8007f18:	60b9      	str	r1, [r7, #8]
 8007f1a:	607a      	str	r2, [r7, #4]
 8007f1c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	9300      	str	r3, [sp, #0]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	68ba      	ldr	r2, [r7, #8]
 8007f2a:	68f9      	ldr	r1, [r7, #12]
 8007f2c:	4806      	ldr	r0, [pc, #24]	; (8007f48 <BSP_SD_ReadBlocks+0x38>)
 8007f2e:	f7fc fa39 	bl	80043a4 <HAL_SD_ReadBlocks>
 8007f32:	4603      	mov	r3, r0
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d001      	beq.n	8007f3c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8007f38:	2301      	movs	r3, #1
 8007f3a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007f3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3718      	adds	r7, #24
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}
 8007f46:	bf00      	nop
 8007f48:	20000538 	.word	0x20000538

08007f4c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b088      	sub	sp, #32
 8007f50:	af02      	add	r7, sp, #8
 8007f52:	60f8      	str	r0, [r7, #12]
 8007f54:	60b9      	str	r1, [r7, #8]
 8007f56:	607a      	str	r2, [r7, #4]
 8007f58:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	9300      	str	r3, [sp, #0]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	68ba      	ldr	r2, [r7, #8]
 8007f66:	68f9      	ldr	r1, [r7, #12]
 8007f68:	4806      	ldr	r0, [pc, #24]	; (8007f84 <BSP_SD_WriteBlocks+0x38>)
 8007f6a:	f7fc fc15 	bl	8004798 <HAL_SD_WriteBlocks>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d001      	beq.n	8007f78 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8007f74:	2301      	movs	r3, #1
 8007f76:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007f78:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3718      	adds	r7, #24
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}
 8007f82:	bf00      	nop
 8007f84:	20000538 	.word	0x20000538

08007f88 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8007f8c:	4805      	ldr	r0, [pc, #20]	; (8007fa4 <BSP_SD_GetCardState+0x1c>)
 8007f8e:	f7fd f973 	bl	8005278 <HAL_SD_GetCardState>
 8007f92:	4603      	mov	r3, r0
 8007f94:	2b04      	cmp	r3, #4
 8007f96:	bf14      	ite	ne
 8007f98:	2301      	movne	r3, #1
 8007f9a:	2300      	moveq	r3, #0
 8007f9c:	b2db      	uxtb	r3, r3
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	bd80      	pop	{r7, pc}
 8007fa2:	bf00      	nop
 8007fa4:	20000538 	.word	0x20000538

08007fa8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b082      	sub	sp, #8
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8007fb0:	6879      	ldr	r1, [r7, #4]
 8007fb2:	4803      	ldr	r0, [pc, #12]	; (8007fc0 <BSP_SD_GetCardInfo+0x18>)
 8007fb4:	f7fd f8b8 	bl	8005128 <HAL_SD_GetCardInfo>
}
 8007fb8:	bf00      	nop
 8007fba:	3708      	adds	r7, #8
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}
 8007fc0:	20000538 	.word	0x20000538

08007fc4 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b082      	sub	sp, #8
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8007fcc:	f000 f818 	bl	8008000 <BSP_SD_AbortCallback>
}
 8007fd0:	bf00      	nop
 8007fd2:	3708      	adds	r7, #8
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}

08007fd8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b082      	sub	sp, #8
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8007fe0:	f000 f814 	bl	800800c <BSP_SD_WriteCpltCallback>
}
 8007fe4:	bf00      	nop
 8007fe6:	3708      	adds	r7, #8
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}

08007fec <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b082      	sub	sp, #8
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8007ff4:	f000 f810 	bl	8008018 <BSP_SD_ReadCpltCallback>
}
 8007ff8:	bf00      	nop
 8007ffa:	3708      	adds	r7, #8
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}

08008000 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8008000:	b480      	push	{r7}
 8008002:	af00      	add	r7, sp, #0

}
 8008004:	bf00      	nop
 8008006:	46bd      	mov	sp, r7
 8008008:	bc80      	pop	{r7}
 800800a:	4770      	bx	lr

0800800c <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 800800c:	b480      	push	{r7}
 800800e:	af00      	add	r7, sp, #0

}
 8008010:	bf00      	nop
 8008012:	46bd      	mov	sp, r7
 8008014:	bc80      	pop	{r7}
 8008016:	4770      	bx	lr

08008018 <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 8008018:	b480      	push	{r7}
 800801a:	af00      	add	r7, sp, #0

}
 800801c:	bf00      	nop
 800801e:	46bd      	mov	sp, r7
 8008020:	bc80      	pop	{r7}
 8008022:	4770      	bx	lr

08008024 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b082      	sub	sp, #8
 8008028:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800802a:	2301      	movs	r3, #1
 800802c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800802e:	f000 f80b 	bl	8008048 <BSP_PlatformIsDetected>
 8008032:	4603      	mov	r3, r0
 8008034:	2b00      	cmp	r3, #0
 8008036:	d101      	bne.n	800803c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8008038:	2300      	movs	r3, #0
 800803a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800803c:	79fb      	ldrb	r3, [r7, #7]
 800803e:	b2db      	uxtb	r3, r3
}
 8008040:	4618      	mov	r0, r3
 8008042:	3708      	adds	r7, #8
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}

08008048 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8008048:	b580      	push	{r7, lr}
 800804a:	b082      	sub	sp, #8
 800804c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800804e:	2301      	movs	r3, #1
 8008050:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8008052:	2104      	movs	r1, #4
 8008054:	4806      	ldr	r0, [pc, #24]	; (8008070 <BSP_PlatformIsDetected+0x28>)
 8008056:	f7fa fadd 	bl	8002614 <HAL_GPIO_ReadPin>
 800805a:	4603      	mov	r3, r0
 800805c:	2b00      	cmp	r3, #0
 800805e:	d001      	beq.n	8008064 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8008060:	2300      	movs	r3, #0
 8008062:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8008064:	79fb      	ldrb	r3, [r7, #7]
}
 8008066:	4618      	mov	r0, r3
 8008068:	3708      	adds	r7, #8
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}
 800806e:	bf00      	nop
 8008070:	40021800 	.word	0x40021800

08008074 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b084      	sub	sp, #16
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
 800807c:	460b      	mov	r3, r1
 800807e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008080:	2300      	movs	r3, #0
 8008082:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	7c1b      	ldrb	r3, [r3, #16]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d115      	bne.n	80080b8 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800808c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008090:	2202      	movs	r2, #2
 8008092:	2181      	movs	r1, #129	; 0x81
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f005 f84c 	bl	800d132 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2201      	movs	r2, #1
 800809e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80080a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80080a4:	2202      	movs	r2, #2
 80080a6:	2101      	movs	r1, #1
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f005 f842 	bl	800d132 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2201      	movs	r2, #1
 80080b2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80080b6:	e012      	b.n	80080de <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80080b8:	2340      	movs	r3, #64	; 0x40
 80080ba:	2202      	movs	r2, #2
 80080bc:	2181      	movs	r1, #129	; 0x81
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f005 f837 	bl	800d132 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2201      	movs	r2, #1
 80080c8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80080ca:	2340      	movs	r3, #64	; 0x40
 80080cc:	2202      	movs	r2, #2
 80080ce:	2101      	movs	r1, #1
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f005 f82e 	bl	800d132 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2201      	movs	r2, #1
 80080da:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80080de:	2308      	movs	r3, #8
 80080e0:	2203      	movs	r2, #3
 80080e2:	2182      	movs	r1, #130	; 0x82
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f005 f824 	bl	800d132 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2201      	movs	r2, #1
 80080ee:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80080f0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80080f4:	f005 f99a 	bl	800d42c <malloc>
 80080f8:	4603      	mov	r3, r0
 80080fa:	461a      	mov	r2, r3
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008108:	2b00      	cmp	r3, #0
 800810a:	d102      	bne.n	8008112 <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 800810c:	2301      	movs	r3, #1
 800810e:	73fb      	strb	r3, [r7, #15]
 8008110:	e026      	b.n	8008160 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008118:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	2200      	movs	r2, #0
 8008128:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	2200      	movs	r2, #0
 8008130:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	7c1b      	ldrb	r3, [r3, #16]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d109      	bne.n	8008150 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008142:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008146:	2101      	movs	r1, #1
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f005 f8e2 	bl	800d312 <USBD_LL_PrepareReceive>
 800814e:	e007      	b.n	8008160 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008156:	2340      	movs	r3, #64	; 0x40
 8008158:	2101      	movs	r1, #1
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f005 f8d9 	bl	800d312 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008160:	7bfb      	ldrb	r3, [r7, #15]
}
 8008162:	4618      	mov	r0, r3
 8008164:	3710      	adds	r7, #16
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}

0800816a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800816a:	b580      	push	{r7, lr}
 800816c:	b084      	sub	sp, #16
 800816e:	af00      	add	r7, sp, #0
 8008170:	6078      	str	r0, [r7, #4]
 8008172:	460b      	mov	r3, r1
 8008174:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008176:	2300      	movs	r3, #0
 8008178:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800817a:	2181      	movs	r1, #129	; 0x81
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f004 fffe 	bl	800d17e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2200      	movs	r2, #0
 8008186:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008188:	2101      	movs	r1, #1
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f004 fff7 	bl	800d17e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2200      	movs	r2, #0
 8008194:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008198:	2182      	movs	r1, #130	; 0x82
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f004 ffef 	bl	800d17e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2200      	movs	r2, #0
 80081a4:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d00e      	beq.n	80081ce <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081c0:	4618      	mov	r0, r3
 80081c2:	f005 f93b 	bl	800d43c <free>
    pdev->pClassData = NULL;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2200      	movs	r2, #0
 80081ca:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80081ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3710      	adds	r7, #16
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}

080081d8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b086      	sub	sp, #24
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
 80081e0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081e8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80081ea:	2300      	movs	r3, #0
 80081ec:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80081ee:	2300      	movs	r3, #0
 80081f0:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80081f2:	2300      	movs	r3, #0
 80081f4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	781b      	ldrb	r3, [r3, #0]
 80081fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d039      	beq.n	8008276 <USBD_CDC_Setup+0x9e>
 8008202:	2b20      	cmp	r3, #32
 8008204:	d17c      	bne.n	8008300 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	88db      	ldrh	r3, [r3, #6]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d029      	beq.n	8008262 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	781b      	ldrb	r3, [r3, #0]
 8008212:	b25b      	sxtb	r3, r3
 8008214:	2b00      	cmp	r3, #0
 8008216:	da11      	bge.n	800823c <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800821e:	689b      	ldr	r3, [r3, #8]
 8008220:	683a      	ldr	r2, [r7, #0]
 8008222:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008224:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008226:	683a      	ldr	r2, [r7, #0]
 8008228:	88d2      	ldrh	r2, [r2, #6]
 800822a:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800822c:	6939      	ldr	r1, [r7, #16]
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	88db      	ldrh	r3, [r3, #6]
 8008232:	461a      	mov	r2, r3
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f001 fa03 	bl	8009640 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800823a:	e068      	b.n	800830e <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	785a      	ldrb	r2, [r3, #1]
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	88db      	ldrh	r3, [r3, #6]
 800824a:	b2da      	uxtb	r2, r3
 800824c:	693b      	ldr	r3, [r7, #16]
 800824e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008252:	6939      	ldr	r1, [r7, #16]
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	88db      	ldrh	r3, [r3, #6]
 8008258:	461a      	mov	r2, r3
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f001 fa1e 	bl	800969c <USBD_CtlPrepareRx>
      break;
 8008260:	e055      	b.n	800830e <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008268:	689b      	ldr	r3, [r3, #8]
 800826a:	683a      	ldr	r2, [r7, #0]
 800826c:	7850      	ldrb	r0, [r2, #1]
 800826e:	2200      	movs	r2, #0
 8008270:	6839      	ldr	r1, [r7, #0]
 8008272:	4798      	blx	r3
      break;
 8008274:	e04b      	b.n	800830e <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	785b      	ldrb	r3, [r3, #1]
 800827a:	2b0a      	cmp	r3, #10
 800827c:	d017      	beq.n	80082ae <USBD_CDC_Setup+0xd6>
 800827e:	2b0b      	cmp	r3, #11
 8008280:	d029      	beq.n	80082d6 <USBD_CDC_Setup+0xfe>
 8008282:	2b00      	cmp	r3, #0
 8008284:	d133      	bne.n	80082ee <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800828c:	2b03      	cmp	r3, #3
 800828e:	d107      	bne.n	80082a0 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008290:	f107 030c 	add.w	r3, r7, #12
 8008294:	2202      	movs	r2, #2
 8008296:	4619      	mov	r1, r3
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f001 f9d1 	bl	8009640 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800829e:	e02e      	b.n	80082fe <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80082a0:	6839      	ldr	r1, [r7, #0]
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f001 f962 	bl	800956c <USBD_CtlError>
            ret = USBD_FAIL;
 80082a8:	2302      	movs	r3, #2
 80082aa:	75fb      	strb	r3, [r7, #23]
          break;
 80082ac:	e027      	b.n	80082fe <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082b4:	2b03      	cmp	r3, #3
 80082b6:	d107      	bne.n	80082c8 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80082b8:	f107 030f 	add.w	r3, r7, #15
 80082bc:	2201      	movs	r2, #1
 80082be:	4619      	mov	r1, r3
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f001 f9bd 	bl	8009640 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80082c6:	e01a      	b.n	80082fe <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80082c8:	6839      	ldr	r1, [r7, #0]
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f001 f94e 	bl	800956c <USBD_CtlError>
            ret = USBD_FAIL;
 80082d0:	2302      	movs	r3, #2
 80082d2:	75fb      	strb	r3, [r7, #23]
          break;
 80082d4:	e013      	b.n	80082fe <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082dc:	2b03      	cmp	r3, #3
 80082de:	d00d      	beq.n	80082fc <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 80082e0:	6839      	ldr	r1, [r7, #0]
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f001 f942 	bl	800956c <USBD_CtlError>
            ret = USBD_FAIL;
 80082e8:	2302      	movs	r3, #2
 80082ea:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80082ec:	e006      	b.n	80082fc <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 80082ee:	6839      	ldr	r1, [r7, #0]
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f001 f93b 	bl	800956c <USBD_CtlError>
          ret = USBD_FAIL;
 80082f6:	2302      	movs	r3, #2
 80082f8:	75fb      	strb	r3, [r7, #23]
          break;
 80082fa:	e000      	b.n	80082fe <USBD_CDC_Setup+0x126>
          break;
 80082fc:	bf00      	nop
      }
      break;
 80082fe:	e006      	b.n	800830e <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8008300:	6839      	ldr	r1, [r7, #0]
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f001 f932 	bl	800956c <USBD_CtlError>
      ret = USBD_FAIL;
 8008308:	2302      	movs	r3, #2
 800830a:	75fb      	strb	r3, [r7, #23]
      break;
 800830c:	bf00      	nop
  }

  return ret;
 800830e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008310:	4618      	mov	r0, r3
 8008312:	3718      	adds	r7, #24
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}

08008318 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b084      	sub	sp, #16
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
 8008320:	460b      	mov	r3, r1
 8008322:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800832a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008332:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800833a:	2b00      	cmp	r3, #0
 800833c:	d03a      	beq.n	80083b4 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800833e:	78fa      	ldrb	r2, [r7, #3]
 8008340:	6879      	ldr	r1, [r7, #4]
 8008342:	4613      	mov	r3, r2
 8008344:	009b      	lsls	r3, r3, #2
 8008346:	4413      	add	r3, r2
 8008348:	009b      	lsls	r3, r3, #2
 800834a:	440b      	add	r3, r1
 800834c:	331c      	adds	r3, #28
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d029      	beq.n	80083a8 <USBD_CDC_DataIn+0x90>
 8008354:	78fa      	ldrb	r2, [r7, #3]
 8008356:	6879      	ldr	r1, [r7, #4]
 8008358:	4613      	mov	r3, r2
 800835a:	009b      	lsls	r3, r3, #2
 800835c:	4413      	add	r3, r2
 800835e:	009b      	lsls	r3, r3, #2
 8008360:	440b      	add	r3, r1
 8008362:	331c      	adds	r3, #28
 8008364:	681a      	ldr	r2, [r3, #0]
 8008366:	78f9      	ldrb	r1, [r7, #3]
 8008368:	68b8      	ldr	r0, [r7, #8]
 800836a:	460b      	mov	r3, r1
 800836c:	00db      	lsls	r3, r3, #3
 800836e:	1a5b      	subs	r3, r3, r1
 8008370:	009b      	lsls	r3, r3, #2
 8008372:	4403      	add	r3, r0
 8008374:	3344      	adds	r3, #68	; 0x44
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	fbb2 f1f3 	udiv	r1, r2, r3
 800837c:	fb03 f301 	mul.w	r3, r3, r1
 8008380:	1ad3      	subs	r3, r2, r3
 8008382:	2b00      	cmp	r3, #0
 8008384:	d110      	bne.n	80083a8 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008386:	78fa      	ldrb	r2, [r7, #3]
 8008388:	6879      	ldr	r1, [r7, #4]
 800838a:	4613      	mov	r3, r2
 800838c:	009b      	lsls	r3, r3, #2
 800838e:	4413      	add	r3, r2
 8008390:	009b      	lsls	r3, r3, #2
 8008392:	440b      	add	r3, r1
 8008394:	331c      	adds	r3, #28
 8008396:	2200      	movs	r2, #0
 8008398:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800839a:	78f9      	ldrb	r1, [r7, #3]
 800839c:	2300      	movs	r3, #0
 800839e:	2200      	movs	r2, #0
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f004 ff93 	bl	800d2cc <USBD_LL_Transmit>
 80083a6:	e003      	b.n	80083b0 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	2200      	movs	r2, #0
 80083ac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80083b0:	2300      	movs	r3, #0
 80083b2:	e000      	b.n	80083b6 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80083b4:	2302      	movs	r3, #2
  }
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3710      	adds	r7, #16
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}

080083be <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80083be:	b580      	push	{r7, lr}
 80083c0:	b084      	sub	sp, #16
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	6078      	str	r0, [r7, #4]
 80083c6:	460b      	mov	r3, r1
 80083c8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083d0:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80083d2:	78fb      	ldrb	r3, [r7, #3]
 80083d4:	4619      	mov	r1, r3
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f004 ffbe 	bl	800d358 <USBD_LL_GetRxDataSize>
 80083dc:	4602      	mov	r2, r0
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d00d      	beq.n	800840a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80083f4:	68db      	ldr	r3, [r3, #12]
 80083f6:	68fa      	ldr	r2, [r7, #12]
 80083f8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80083fc:	68fa      	ldr	r2, [r7, #12]
 80083fe:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008402:	4611      	mov	r1, r2
 8008404:	4798      	blx	r3

    return USBD_OK;
 8008406:	2300      	movs	r3, #0
 8008408:	e000      	b.n	800840c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800840a:	2302      	movs	r3, #2
  }
}
 800840c:	4618      	mov	r0, r3
 800840e:	3710      	adds	r7, #16
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}

08008414 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b084      	sub	sp, #16
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008422:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800842a:	2b00      	cmp	r3, #0
 800842c:	d015      	beq.n	800845a <USBD_CDC_EP0_RxReady+0x46>
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008434:	2bff      	cmp	r3, #255	; 0xff
 8008436:	d010      	beq.n	800845a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800843e:	689b      	ldr	r3, [r3, #8]
 8008440:	68fa      	ldr	r2, [r7, #12]
 8008442:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008446:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008448:	68fa      	ldr	r2, [r7, #12]
 800844a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800844e:	b292      	uxth	r2, r2
 8008450:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	22ff      	movs	r2, #255	; 0xff
 8008456:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800845a:	2300      	movs	r3, #0
}
 800845c:	4618      	mov	r0, r3
 800845e:	3710      	adds	r7, #16
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}

08008464 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008464:	b480      	push	{r7}
 8008466:	b083      	sub	sp, #12
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2243      	movs	r2, #67	; 0x43
 8008470:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008472:	4b03      	ldr	r3, [pc, #12]	; (8008480 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008474:	4618      	mov	r0, r3
 8008476:	370c      	adds	r7, #12
 8008478:	46bd      	mov	sp, r7
 800847a:	bc80      	pop	{r7}
 800847c:	4770      	bx	lr
 800847e:	bf00      	nop
 8008480:	20000094 	.word	0x20000094

08008484 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008484:	b480      	push	{r7}
 8008486:	b083      	sub	sp, #12
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2243      	movs	r2, #67	; 0x43
 8008490:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008492:	4b03      	ldr	r3, [pc, #12]	; (80084a0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008494:	4618      	mov	r0, r3
 8008496:	370c      	adds	r7, #12
 8008498:	46bd      	mov	sp, r7
 800849a:	bc80      	pop	{r7}
 800849c:	4770      	bx	lr
 800849e:	bf00      	nop
 80084a0:	20000050 	.word	0x20000050

080084a4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b083      	sub	sp, #12
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2243      	movs	r2, #67	; 0x43
 80084b0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80084b2:	4b03      	ldr	r3, [pc, #12]	; (80084c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	370c      	adds	r7, #12
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bc80      	pop	{r7}
 80084bc:	4770      	bx	lr
 80084be:	bf00      	nop
 80084c0:	200000d8 	.word	0x200000d8

080084c4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b083      	sub	sp, #12
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	220a      	movs	r2, #10
 80084d0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80084d2:	4b03      	ldr	r3, [pc, #12]	; (80084e0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	370c      	adds	r7, #12
 80084d8:	46bd      	mov	sp, r7
 80084da:	bc80      	pop	{r7}
 80084dc:	4770      	bx	lr
 80084de:	bf00      	nop
 80084e0:	2000000c 	.word	0x2000000c

080084e4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b085      	sub	sp, #20
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
 80084ec:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80084ee:	2302      	movs	r3, #2
 80084f0:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d005      	beq.n	8008504 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	683a      	ldr	r2, [r7, #0]
 80084fc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8008500:	2300      	movs	r3, #0
 8008502:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008504:	7bfb      	ldrb	r3, [r7, #15]
}
 8008506:	4618      	mov	r0, r3
 8008508:	3714      	adds	r7, #20
 800850a:	46bd      	mov	sp, r7
 800850c:	bc80      	pop	{r7}
 800850e:	4770      	bx	lr

08008510 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008510:	b480      	push	{r7}
 8008512:	b087      	sub	sp, #28
 8008514:	af00      	add	r7, sp, #0
 8008516:	60f8      	str	r0, [r7, #12]
 8008518:	60b9      	str	r1, [r7, #8]
 800851a:	4613      	mov	r3, r2
 800851c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008524:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	68ba      	ldr	r2, [r7, #8]
 800852a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800852e:	88fa      	ldrh	r2, [r7, #6]
 8008530:	697b      	ldr	r3, [r7, #20]
 8008532:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8008536:	2300      	movs	r3, #0
}
 8008538:	4618      	mov	r0, r3
 800853a:	371c      	adds	r7, #28
 800853c:	46bd      	mov	sp, r7
 800853e:	bc80      	pop	{r7}
 8008540:	4770      	bx	lr

08008542 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008542:	b480      	push	{r7}
 8008544:	b085      	sub	sp, #20
 8008546:	af00      	add	r7, sp, #0
 8008548:	6078      	str	r0, [r7, #4]
 800854a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008552:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	683a      	ldr	r2, [r7, #0]
 8008558:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800855c:	2300      	movs	r3, #0
}
 800855e:	4618      	mov	r0, r3
 8008560:	3714      	adds	r7, #20
 8008562:	46bd      	mov	sp, r7
 8008564:	bc80      	pop	{r7}
 8008566:	4770      	bx	lr

08008568 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b084      	sub	sp, #16
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008576:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800857e:	2b00      	cmp	r3, #0
 8008580:	d017      	beq.n	80085b2 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	7c1b      	ldrb	r3, [r3, #16]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d109      	bne.n	800859e <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008590:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008594:	2101      	movs	r1, #1
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f004 febb 	bl	800d312 <USBD_LL_PrepareReceive>
 800859c:	e007      	b.n	80085ae <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80085a4:	2340      	movs	r3, #64	; 0x40
 80085a6:	2101      	movs	r1, #1
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f004 feb2 	bl	800d312 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80085ae:	2300      	movs	r3, #0
 80085b0:	e000      	b.n	80085b4 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80085b2:	2302      	movs	r3, #2
  }
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3710      	adds	r7, #16
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}

080085bc <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b084      	sub	sp, #16
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	60f8      	str	r0, [r7, #12]
 80085c4:	60b9      	str	r1, [r7, #8]
 80085c6:	4613      	mov	r3, r2
 80085c8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d101      	bne.n	80085d4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80085d0:	2302      	movs	r3, #2
 80085d2:	e01a      	b.n	800860a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d003      	beq.n	80085e6 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	2200      	movs	r2, #0
 80085e2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d003      	beq.n	80085f4 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	68ba      	ldr	r2, [r7, #8]
 80085f0:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	2201      	movs	r2, #1
 80085f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	79fa      	ldrb	r2, [r7, #7]
 8008600:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008602:	68f8      	ldr	r0, [r7, #12]
 8008604:	f004 fd30 	bl	800d068 <USBD_LL_Init>

  return USBD_OK;
 8008608:	2300      	movs	r3, #0
}
 800860a:	4618      	mov	r0, r3
 800860c:	3710      	adds	r7, #16
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}

08008612 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008612:	b480      	push	{r7}
 8008614:	b085      	sub	sp, #20
 8008616:	af00      	add	r7, sp, #0
 8008618:	6078      	str	r0, [r7, #4]
 800861a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800861c:	2300      	movs	r3, #0
 800861e:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d006      	beq.n	8008634 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	683a      	ldr	r2, [r7, #0]
 800862a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800862e:	2300      	movs	r3, #0
 8008630:	73fb      	strb	r3, [r7, #15]
 8008632:	e001      	b.n	8008638 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008634:	2302      	movs	r3, #2
 8008636:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008638:	7bfb      	ldrb	r3, [r7, #15]
}
 800863a:	4618      	mov	r0, r3
 800863c:	3714      	adds	r7, #20
 800863e:	46bd      	mov	sp, r7
 8008640:	bc80      	pop	{r7}
 8008642:	4770      	bx	lr

08008644 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b082      	sub	sp, #8
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f004 fd55 	bl	800d0fc <USBD_LL_Start>

  return USBD_OK;
 8008652:	2300      	movs	r3, #0
}
 8008654:	4618      	mov	r0, r3
 8008656:	3708      	adds	r7, #8
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}

0800865c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800865c:	b480      	push	{r7}
 800865e:	b083      	sub	sp, #12
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008664:	2300      	movs	r3, #0
}
 8008666:	4618      	mov	r0, r3
 8008668:	370c      	adds	r7, #12
 800866a:	46bd      	mov	sp, r7
 800866c:	bc80      	pop	{r7}
 800866e:	4770      	bx	lr

08008670 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b084      	sub	sp, #16
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
 8008678:	460b      	mov	r3, r1
 800867a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800867c:	2302      	movs	r3, #2
 800867e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008686:	2b00      	cmp	r3, #0
 8008688:	d00c      	beq.n	80086a4 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	78fa      	ldrb	r2, [r7, #3]
 8008694:	4611      	mov	r1, r2
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	4798      	blx	r3
 800869a:	4603      	mov	r3, r0
 800869c:	2b00      	cmp	r3, #0
 800869e:	d101      	bne.n	80086a4 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80086a0:	2300      	movs	r3, #0
 80086a2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80086a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3710      	adds	r7, #16
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}

080086ae <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80086ae:	b580      	push	{r7, lr}
 80086b0:	b082      	sub	sp, #8
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	6078      	str	r0, [r7, #4]
 80086b6:	460b      	mov	r3, r1
 80086b8:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086c0:	685b      	ldr	r3, [r3, #4]
 80086c2:	78fa      	ldrb	r2, [r7, #3]
 80086c4:	4611      	mov	r1, r2
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	4798      	blx	r3

  return USBD_OK;
 80086ca:	2300      	movs	r3, #0
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	3708      	adds	r7, #8
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}

080086d4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b082      	sub	sp, #8
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
 80086dc:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80086e4:	6839      	ldr	r1, [r7, #0]
 80086e6:	4618      	mov	r0, r3
 80086e8:	f000 ff04 	bl	80094f4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2201      	movs	r2, #1
 80086f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80086fa:	461a      	mov	r2, r3
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008708:	f003 031f 	and.w	r3, r3, #31
 800870c:	2b01      	cmp	r3, #1
 800870e:	d00c      	beq.n	800872a <USBD_LL_SetupStage+0x56>
 8008710:	2b01      	cmp	r3, #1
 8008712:	d302      	bcc.n	800871a <USBD_LL_SetupStage+0x46>
 8008714:	2b02      	cmp	r3, #2
 8008716:	d010      	beq.n	800873a <USBD_LL_SetupStage+0x66>
 8008718:	e017      	b.n	800874a <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008720:	4619      	mov	r1, r3
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f000 fa04 	bl	8008b30 <USBD_StdDevReq>
      break;
 8008728:	e01a      	b.n	8008760 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008730:	4619      	mov	r1, r3
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f000 fa66 	bl	8008c04 <USBD_StdItfReq>
      break;
 8008738:	e012      	b.n	8008760 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008740:	4619      	mov	r1, r3
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f000 faa4 	bl	8008c90 <USBD_StdEPReq>
      break;
 8008748:	e00a      	b.n	8008760 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008750:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008754:	b2db      	uxtb	r3, r3
 8008756:	4619      	mov	r1, r3
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f004 fd2f 	bl	800d1bc <USBD_LL_StallEP>
      break;
 800875e:	bf00      	nop
  }

  return USBD_OK;
 8008760:	2300      	movs	r3, #0
}
 8008762:	4618      	mov	r0, r3
 8008764:	3708      	adds	r7, #8
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}

0800876a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800876a:	b580      	push	{r7, lr}
 800876c:	b086      	sub	sp, #24
 800876e:	af00      	add	r7, sp, #0
 8008770:	60f8      	str	r0, [r7, #12]
 8008772:	460b      	mov	r3, r1
 8008774:	607a      	str	r2, [r7, #4]
 8008776:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008778:	7afb      	ldrb	r3, [r7, #11]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d14b      	bne.n	8008816 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008784:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800878c:	2b03      	cmp	r3, #3
 800878e:	d134      	bne.n	80087fa <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	68da      	ldr	r2, [r3, #12]
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	691b      	ldr	r3, [r3, #16]
 8008798:	429a      	cmp	r2, r3
 800879a:	d919      	bls.n	80087d0 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	68da      	ldr	r2, [r3, #12]
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	691b      	ldr	r3, [r3, #16]
 80087a4:	1ad2      	subs	r2, r2, r3
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	68da      	ldr	r2, [r3, #12]
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80087b2:	429a      	cmp	r2, r3
 80087b4:	d203      	bcs.n	80087be <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80087ba:	b29b      	uxth	r3, r3
 80087bc:	e002      	b.n	80087c4 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80087c2:	b29b      	uxth	r3, r3
 80087c4:	461a      	mov	r2, r3
 80087c6:	6879      	ldr	r1, [r7, #4]
 80087c8:	68f8      	ldr	r0, [r7, #12]
 80087ca:	f000 ff85 	bl	80096d8 <USBD_CtlContinueRx>
 80087ce:	e038      	b.n	8008842 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087d6:	691b      	ldr	r3, [r3, #16]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d00a      	beq.n	80087f2 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80087e2:	2b03      	cmp	r3, #3
 80087e4:	d105      	bne.n	80087f2 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087ec:	691b      	ldr	r3, [r3, #16]
 80087ee:	68f8      	ldr	r0, [r7, #12]
 80087f0:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80087f2:	68f8      	ldr	r0, [r7, #12]
 80087f4:	f000 ff82 	bl	80096fc <USBD_CtlSendStatus>
 80087f8:	e023      	b.n	8008842 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008800:	2b05      	cmp	r3, #5
 8008802:	d11e      	bne.n	8008842 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	2200      	movs	r2, #0
 8008808:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800880c:	2100      	movs	r1, #0
 800880e:	68f8      	ldr	r0, [r7, #12]
 8008810:	f004 fcd4 	bl	800d1bc <USBD_LL_StallEP>
 8008814:	e015      	b.n	8008842 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800881c:	699b      	ldr	r3, [r3, #24]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d00d      	beq.n	800883e <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008828:	2b03      	cmp	r3, #3
 800882a:	d108      	bne.n	800883e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008832:	699b      	ldr	r3, [r3, #24]
 8008834:	7afa      	ldrb	r2, [r7, #11]
 8008836:	4611      	mov	r1, r2
 8008838:	68f8      	ldr	r0, [r7, #12]
 800883a:	4798      	blx	r3
 800883c:	e001      	b.n	8008842 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800883e:	2302      	movs	r3, #2
 8008840:	e000      	b.n	8008844 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008842:	2300      	movs	r3, #0
}
 8008844:	4618      	mov	r0, r3
 8008846:	3718      	adds	r7, #24
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}

0800884c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b086      	sub	sp, #24
 8008850:	af00      	add	r7, sp, #0
 8008852:	60f8      	str	r0, [r7, #12]
 8008854:	460b      	mov	r3, r1
 8008856:	607a      	str	r2, [r7, #4]
 8008858:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800885a:	7afb      	ldrb	r3, [r7, #11]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d17f      	bne.n	8008960 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	3314      	adds	r3, #20
 8008864:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800886c:	2b02      	cmp	r3, #2
 800886e:	d15c      	bne.n	800892a <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	68da      	ldr	r2, [r3, #12]
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	691b      	ldr	r3, [r3, #16]
 8008878:	429a      	cmp	r2, r3
 800887a:	d915      	bls.n	80088a8 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	68da      	ldr	r2, [r3, #12]
 8008880:	697b      	ldr	r3, [r7, #20]
 8008882:	691b      	ldr	r3, [r3, #16]
 8008884:	1ad2      	subs	r2, r2, r3
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	68db      	ldr	r3, [r3, #12]
 800888e:	b29b      	uxth	r3, r3
 8008890:	461a      	mov	r2, r3
 8008892:	6879      	ldr	r1, [r7, #4]
 8008894:	68f8      	ldr	r0, [r7, #12]
 8008896:	f000 feef 	bl	8009678 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800889a:	2300      	movs	r3, #0
 800889c:	2200      	movs	r2, #0
 800889e:	2100      	movs	r1, #0
 80088a0:	68f8      	ldr	r0, [r7, #12]
 80088a2:	f004 fd36 	bl	800d312 <USBD_LL_PrepareReceive>
 80088a6:	e04e      	b.n	8008946 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	689b      	ldr	r3, [r3, #8]
 80088ac:	697a      	ldr	r2, [r7, #20]
 80088ae:	6912      	ldr	r2, [r2, #16]
 80088b0:	fbb3 f1f2 	udiv	r1, r3, r2
 80088b4:	fb02 f201 	mul.w	r2, r2, r1
 80088b8:	1a9b      	subs	r3, r3, r2
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d11c      	bne.n	80088f8 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	689a      	ldr	r2, [r3, #8]
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80088c6:	429a      	cmp	r2, r3
 80088c8:	d316      	bcc.n	80088f8 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	689a      	ldr	r2, [r3, #8]
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80088d4:	429a      	cmp	r2, r3
 80088d6:	d20f      	bcs.n	80088f8 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80088d8:	2200      	movs	r2, #0
 80088da:	2100      	movs	r1, #0
 80088dc:	68f8      	ldr	r0, [r7, #12]
 80088de:	f000 fecb 	bl	8009678 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	2200      	movs	r2, #0
 80088e6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80088ea:	2300      	movs	r3, #0
 80088ec:	2200      	movs	r2, #0
 80088ee:	2100      	movs	r1, #0
 80088f0:	68f8      	ldr	r0, [r7, #12]
 80088f2:	f004 fd0e 	bl	800d312 <USBD_LL_PrepareReceive>
 80088f6:	e026      	b.n	8008946 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088fe:	68db      	ldr	r3, [r3, #12]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d00a      	beq.n	800891a <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800890a:	2b03      	cmp	r3, #3
 800890c:	d105      	bne.n	800891a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008914:	68db      	ldr	r3, [r3, #12]
 8008916:	68f8      	ldr	r0, [r7, #12]
 8008918:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800891a:	2180      	movs	r1, #128	; 0x80
 800891c:	68f8      	ldr	r0, [r7, #12]
 800891e:	f004 fc4d 	bl	800d1bc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008922:	68f8      	ldr	r0, [r7, #12]
 8008924:	f000 fefd 	bl	8009722 <USBD_CtlReceiveStatus>
 8008928:	e00d      	b.n	8008946 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008930:	2b04      	cmp	r3, #4
 8008932:	d004      	beq.n	800893e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800893a:	2b00      	cmp	r3, #0
 800893c:	d103      	bne.n	8008946 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800893e:	2180      	movs	r1, #128	; 0x80
 8008940:	68f8      	ldr	r0, [r7, #12]
 8008942:	f004 fc3b 	bl	800d1bc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800894c:	2b01      	cmp	r3, #1
 800894e:	d11d      	bne.n	800898c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008950:	68f8      	ldr	r0, [r7, #12]
 8008952:	f7ff fe83 	bl	800865c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	2200      	movs	r2, #0
 800895a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800895e:	e015      	b.n	800898c <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008966:	695b      	ldr	r3, [r3, #20]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d00d      	beq.n	8008988 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008972:	2b03      	cmp	r3, #3
 8008974:	d108      	bne.n	8008988 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800897c:	695b      	ldr	r3, [r3, #20]
 800897e:	7afa      	ldrb	r2, [r7, #11]
 8008980:	4611      	mov	r1, r2
 8008982:	68f8      	ldr	r0, [r7, #12]
 8008984:	4798      	blx	r3
 8008986:	e001      	b.n	800898c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008988:	2302      	movs	r3, #2
 800898a:	e000      	b.n	800898e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800898c:	2300      	movs	r3, #0
}
 800898e:	4618      	mov	r0, r3
 8008990:	3718      	adds	r7, #24
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}

08008996 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008996:	b580      	push	{r7, lr}
 8008998:	b082      	sub	sp, #8
 800899a:	af00      	add	r7, sp, #0
 800899c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800899e:	2340      	movs	r3, #64	; 0x40
 80089a0:	2200      	movs	r2, #0
 80089a2:	2100      	movs	r1, #0
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f004 fbc4 	bl	800d132 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2201      	movs	r2, #1
 80089ae:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2240      	movs	r2, #64	; 0x40
 80089b6:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80089ba:	2340      	movs	r3, #64	; 0x40
 80089bc:	2200      	movs	r2, #0
 80089be:	2180      	movs	r1, #128	; 0x80
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f004 fbb6 	bl	800d132 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2201      	movs	r2, #1
 80089ca:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2240      	movs	r2, #64	; 0x40
 80089d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2201      	movs	r2, #1
 80089d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2200      	movs	r2, #0
 80089de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2200      	movs	r2, #0
 80089e6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2200      	movs	r2, #0
 80089ec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d009      	beq.n	8008a0e <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a00:	685b      	ldr	r3, [r3, #4]
 8008a02:	687a      	ldr	r2, [r7, #4]
 8008a04:	6852      	ldr	r2, [r2, #4]
 8008a06:	b2d2      	uxtb	r2, r2
 8008a08:	4611      	mov	r1, r2
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	4798      	blx	r3
  }

  return USBD_OK;
 8008a0e:	2300      	movs	r3, #0
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	3708      	adds	r7, #8
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}

08008a18 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b083      	sub	sp, #12
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
 8008a20:	460b      	mov	r3, r1
 8008a22:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	78fa      	ldrb	r2, [r7, #3]
 8008a28:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008a2a:	2300      	movs	r3, #0
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	370c      	adds	r7, #12
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bc80      	pop	{r7}
 8008a34:	4770      	bx	lr

08008a36 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008a36:	b480      	push	{r7}
 8008a38:	b083      	sub	sp, #12
 8008a3a:	af00      	add	r7, sp, #0
 8008a3c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2204      	movs	r2, #4
 8008a4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008a52:	2300      	movs	r3, #0
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	370c      	adds	r7, #12
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bc80      	pop	{r7}
 8008a5c:	4770      	bx	lr

08008a5e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008a5e:	b480      	push	{r7}
 8008a60:	b083      	sub	sp, #12
 8008a62:	af00      	add	r7, sp, #0
 8008a64:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a6c:	2b04      	cmp	r3, #4
 8008a6e:	d105      	bne.n	8008a7c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008a7c:	2300      	movs	r3, #0
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	370c      	adds	r7, #12
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bc80      	pop	{r7}
 8008a86:	4770      	bx	lr

08008a88 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b082      	sub	sp, #8
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a96:	2b03      	cmp	r3, #3
 8008a98:	d10b      	bne.n	8008ab2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008aa0:	69db      	ldr	r3, [r3, #28]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d005      	beq.n	8008ab2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008aac:	69db      	ldr	r3, [r3, #28]
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008ab2:	2300      	movs	r3, #0
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3708      	adds	r7, #8
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}

08008abc <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008abc:	b480      	push	{r7}
 8008abe:	b083      	sub	sp, #12
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
 8008ac4:	460b      	mov	r3, r1
 8008ac6:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008ac8:	2300      	movs	r3, #0
}
 8008aca:	4618      	mov	r0, r3
 8008acc:	370c      	adds	r7, #12
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bc80      	pop	{r7}
 8008ad2:	4770      	bx	lr

08008ad4 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b083      	sub	sp, #12
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	460b      	mov	r3, r1
 8008ade:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008ae0:	2300      	movs	r3, #0
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	370c      	adds	r7, #12
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bc80      	pop	{r7}
 8008aea:	4770      	bx	lr

08008aec <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008aec:	b480      	push	{r7}
 8008aee:	b083      	sub	sp, #12
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008af4:	2300      	movs	r3, #0
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	370c      	adds	r7, #12
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bc80      	pop	{r7}
 8008afe:	4770      	bx	lr

08008b00 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b082      	sub	sp, #8
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2201      	movs	r2, #1
 8008b0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b16:	685b      	ldr	r3, [r3, #4]
 8008b18:	687a      	ldr	r2, [r7, #4]
 8008b1a:	6852      	ldr	r2, [r2, #4]
 8008b1c:	b2d2      	uxtb	r2, r2
 8008b1e:	4611      	mov	r1, r2
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	4798      	blx	r3

  return USBD_OK;
 8008b24:	2300      	movs	r3, #0
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	3708      	adds	r7, #8
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}
	...

08008b30 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b084      	sub	sp, #16
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
 8008b38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	781b      	ldrb	r3, [r3, #0]
 8008b42:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008b46:	2b20      	cmp	r3, #32
 8008b48:	d004      	beq.n	8008b54 <USBD_StdDevReq+0x24>
 8008b4a:	2b40      	cmp	r3, #64	; 0x40
 8008b4c:	d002      	beq.n	8008b54 <USBD_StdDevReq+0x24>
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d008      	beq.n	8008b64 <USBD_StdDevReq+0x34>
 8008b52:	e04c      	b.n	8008bee <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b5a:	689b      	ldr	r3, [r3, #8]
 8008b5c:	6839      	ldr	r1, [r7, #0]
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	4798      	blx	r3
      break;
 8008b62:	e049      	b.n	8008bf8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	785b      	ldrb	r3, [r3, #1]
 8008b68:	2b09      	cmp	r3, #9
 8008b6a:	d83a      	bhi.n	8008be2 <USBD_StdDevReq+0xb2>
 8008b6c:	a201      	add	r2, pc, #4	; (adr r2, 8008b74 <USBD_StdDevReq+0x44>)
 8008b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b72:	bf00      	nop
 8008b74:	08008bc5 	.word	0x08008bc5
 8008b78:	08008bd9 	.word	0x08008bd9
 8008b7c:	08008be3 	.word	0x08008be3
 8008b80:	08008bcf 	.word	0x08008bcf
 8008b84:	08008be3 	.word	0x08008be3
 8008b88:	08008ba7 	.word	0x08008ba7
 8008b8c:	08008b9d 	.word	0x08008b9d
 8008b90:	08008be3 	.word	0x08008be3
 8008b94:	08008bbb 	.word	0x08008bbb
 8008b98:	08008bb1 	.word	0x08008bb1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008b9c:	6839      	ldr	r1, [r7, #0]
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f000 f9d4 	bl	8008f4c <USBD_GetDescriptor>
          break;
 8008ba4:	e022      	b.n	8008bec <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008ba6:	6839      	ldr	r1, [r7, #0]
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f000 fb37 	bl	800921c <USBD_SetAddress>
          break;
 8008bae:	e01d      	b.n	8008bec <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008bb0:	6839      	ldr	r1, [r7, #0]
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f000 fb74 	bl	80092a0 <USBD_SetConfig>
          break;
 8008bb8:	e018      	b.n	8008bec <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008bba:	6839      	ldr	r1, [r7, #0]
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f000 fbfd 	bl	80093bc <USBD_GetConfig>
          break;
 8008bc2:	e013      	b.n	8008bec <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008bc4:	6839      	ldr	r1, [r7, #0]
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f000 fc2c 	bl	8009424 <USBD_GetStatus>
          break;
 8008bcc:	e00e      	b.n	8008bec <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008bce:	6839      	ldr	r1, [r7, #0]
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f000 fc5a 	bl	800948a <USBD_SetFeature>
          break;
 8008bd6:	e009      	b.n	8008bec <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008bd8:	6839      	ldr	r1, [r7, #0]
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f000 fc69 	bl	80094b2 <USBD_ClrFeature>
          break;
 8008be0:	e004      	b.n	8008bec <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008be2:	6839      	ldr	r1, [r7, #0]
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f000 fcc1 	bl	800956c <USBD_CtlError>
          break;
 8008bea:	bf00      	nop
      }
      break;
 8008bec:	e004      	b.n	8008bf8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008bee:	6839      	ldr	r1, [r7, #0]
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	f000 fcbb 	bl	800956c <USBD_CtlError>
      break;
 8008bf6:	bf00      	nop
  }

  return ret;
 8008bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	3710      	adds	r7, #16
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}
 8008c02:	bf00      	nop

08008c04 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b084      	sub	sp, #16
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	781b      	ldrb	r3, [r3, #0]
 8008c16:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008c1a:	2b20      	cmp	r3, #32
 8008c1c:	d003      	beq.n	8008c26 <USBD_StdItfReq+0x22>
 8008c1e:	2b40      	cmp	r3, #64	; 0x40
 8008c20:	d001      	beq.n	8008c26 <USBD_StdItfReq+0x22>
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d12a      	bne.n	8008c7c <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c2c:	3b01      	subs	r3, #1
 8008c2e:	2b02      	cmp	r3, #2
 8008c30:	d81d      	bhi.n	8008c6e <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	889b      	ldrh	r3, [r3, #4]
 8008c36:	b2db      	uxtb	r3, r3
 8008c38:	2b01      	cmp	r3, #1
 8008c3a:	d813      	bhi.n	8008c64 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c42:	689b      	ldr	r3, [r3, #8]
 8008c44:	6839      	ldr	r1, [r7, #0]
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	4798      	blx	r3
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	88db      	ldrh	r3, [r3, #6]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d110      	bne.n	8008c78 <USBD_StdItfReq+0x74>
 8008c56:	7bfb      	ldrb	r3, [r7, #15]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d10d      	bne.n	8008c78 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f000 fd4d 	bl	80096fc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008c62:	e009      	b.n	8008c78 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8008c64:	6839      	ldr	r1, [r7, #0]
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f000 fc80 	bl	800956c <USBD_CtlError>
          break;
 8008c6c:	e004      	b.n	8008c78 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8008c6e:	6839      	ldr	r1, [r7, #0]
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f000 fc7b 	bl	800956c <USBD_CtlError>
          break;
 8008c76:	e000      	b.n	8008c7a <USBD_StdItfReq+0x76>
          break;
 8008c78:	bf00      	nop
      }
      break;
 8008c7a:	e004      	b.n	8008c86 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8008c7c:	6839      	ldr	r1, [r7, #0]
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f000 fc74 	bl	800956c <USBD_CtlError>
      break;
 8008c84:	bf00      	nop
  }

  return USBD_OK;
 8008c86:	2300      	movs	r3, #0
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	3710      	adds	r7, #16
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}

08008c90 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b084      	sub	sp, #16
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
 8008c98:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	889b      	ldrh	r3, [r3, #4]
 8008ca2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	781b      	ldrb	r3, [r3, #0]
 8008ca8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008cac:	2b20      	cmp	r3, #32
 8008cae:	d004      	beq.n	8008cba <USBD_StdEPReq+0x2a>
 8008cb0:	2b40      	cmp	r3, #64	; 0x40
 8008cb2:	d002      	beq.n	8008cba <USBD_StdEPReq+0x2a>
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d008      	beq.n	8008cca <USBD_StdEPReq+0x3a>
 8008cb8:	e13d      	b.n	8008f36 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cc0:	689b      	ldr	r3, [r3, #8]
 8008cc2:	6839      	ldr	r1, [r7, #0]
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	4798      	blx	r3
      break;
 8008cc8:	e13a      	b.n	8008f40 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	781b      	ldrb	r3, [r3, #0]
 8008cce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008cd2:	2b20      	cmp	r3, #32
 8008cd4:	d10a      	bne.n	8008cec <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cdc:	689b      	ldr	r3, [r3, #8]
 8008cde:	6839      	ldr	r1, [r7, #0]
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	4798      	blx	r3
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008ce8:	7bfb      	ldrb	r3, [r7, #15]
 8008cea:	e12a      	b.n	8008f42 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	785b      	ldrb	r3, [r3, #1]
 8008cf0:	2b01      	cmp	r3, #1
 8008cf2:	d03e      	beq.n	8008d72 <USBD_StdEPReq+0xe2>
 8008cf4:	2b03      	cmp	r3, #3
 8008cf6:	d002      	beq.n	8008cfe <USBD_StdEPReq+0x6e>
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d070      	beq.n	8008dde <USBD_StdEPReq+0x14e>
 8008cfc:	e115      	b.n	8008f2a <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d04:	2b02      	cmp	r3, #2
 8008d06:	d002      	beq.n	8008d0e <USBD_StdEPReq+0x7e>
 8008d08:	2b03      	cmp	r3, #3
 8008d0a:	d015      	beq.n	8008d38 <USBD_StdEPReq+0xa8>
 8008d0c:	e02b      	b.n	8008d66 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008d0e:	7bbb      	ldrb	r3, [r7, #14]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d00c      	beq.n	8008d2e <USBD_StdEPReq+0x9e>
 8008d14:	7bbb      	ldrb	r3, [r7, #14]
 8008d16:	2b80      	cmp	r3, #128	; 0x80
 8008d18:	d009      	beq.n	8008d2e <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008d1a:	7bbb      	ldrb	r3, [r7, #14]
 8008d1c:	4619      	mov	r1, r3
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f004 fa4c 	bl	800d1bc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008d24:	2180      	movs	r1, #128	; 0x80
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f004 fa48 	bl	800d1bc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008d2c:	e020      	b.n	8008d70 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8008d2e:	6839      	ldr	r1, [r7, #0]
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f000 fc1b 	bl	800956c <USBD_CtlError>
              break;
 8008d36:	e01b      	b.n	8008d70 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	885b      	ldrh	r3, [r3, #2]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d10e      	bne.n	8008d5e <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8008d40:	7bbb      	ldrb	r3, [r7, #14]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d00b      	beq.n	8008d5e <USBD_StdEPReq+0xce>
 8008d46:	7bbb      	ldrb	r3, [r7, #14]
 8008d48:	2b80      	cmp	r3, #128	; 0x80
 8008d4a:	d008      	beq.n	8008d5e <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	88db      	ldrh	r3, [r3, #6]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d104      	bne.n	8008d5e <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008d54:	7bbb      	ldrb	r3, [r7, #14]
 8008d56:	4619      	mov	r1, r3
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f004 fa2f 	bl	800d1bc <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f000 fccc 	bl	80096fc <USBD_CtlSendStatus>

              break;
 8008d64:	e004      	b.n	8008d70 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8008d66:	6839      	ldr	r1, [r7, #0]
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f000 fbff 	bl	800956c <USBD_CtlError>
              break;
 8008d6e:	bf00      	nop
          }
          break;
 8008d70:	e0e0      	b.n	8008f34 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d78:	2b02      	cmp	r3, #2
 8008d7a:	d002      	beq.n	8008d82 <USBD_StdEPReq+0xf2>
 8008d7c:	2b03      	cmp	r3, #3
 8008d7e:	d015      	beq.n	8008dac <USBD_StdEPReq+0x11c>
 8008d80:	e026      	b.n	8008dd0 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008d82:	7bbb      	ldrb	r3, [r7, #14]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d00c      	beq.n	8008da2 <USBD_StdEPReq+0x112>
 8008d88:	7bbb      	ldrb	r3, [r7, #14]
 8008d8a:	2b80      	cmp	r3, #128	; 0x80
 8008d8c:	d009      	beq.n	8008da2 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008d8e:	7bbb      	ldrb	r3, [r7, #14]
 8008d90:	4619      	mov	r1, r3
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f004 fa12 	bl	800d1bc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008d98:	2180      	movs	r1, #128	; 0x80
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f004 fa0e 	bl	800d1bc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008da0:	e01c      	b.n	8008ddc <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8008da2:	6839      	ldr	r1, [r7, #0]
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f000 fbe1 	bl	800956c <USBD_CtlError>
              break;
 8008daa:	e017      	b.n	8008ddc <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	885b      	ldrh	r3, [r3, #2]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d112      	bne.n	8008dda <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008db4:	7bbb      	ldrb	r3, [r7, #14]
 8008db6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d004      	beq.n	8008dc8 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008dbe:	7bbb      	ldrb	r3, [r7, #14]
 8008dc0:	4619      	mov	r1, r3
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f004 fa19 	bl	800d1fa <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f000 fc97 	bl	80096fc <USBD_CtlSendStatus>
              }
              break;
 8008dce:	e004      	b.n	8008dda <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8008dd0:	6839      	ldr	r1, [r7, #0]
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f000 fbca 	bl	800956c <USBD_CtlError>
              break;
 8008dd8:	e000      	b.n	8008ddc <USBD_StdEPReq+0x14c>
              break;
 8008dda:	bf00      	nop
          }
          break;
 8008ddc:	e0aa      	b.n	8008f34 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008de4:	2b02      	cmp	r3, #2
 8008de6:	d002      	beq.n	8008dee <USBD_StdEPReq+0x15e>
 8008de8:	2b03      	cmp	r3, #3
 8008dea:	d032      	beq.n	8008e52 <USBD_StdEPReq+0x1c2>
 8008dec:	e097      	b.n	8008f1e <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008dee:	7bbb      	ldrb	r3, [r7, #14]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d007      	beq.n	8008e04 <USBD_StdEPReq+0x174>
 8008df4:	7bbb      	ldrb	r3, [r7, #14]
 8008df6:	2b80      	cmp	r3, #128	; 0x80
 8008df8:	d004      	beq.n	8008e04 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8008dfa:	6839      	ldr	r1, [r7, #0]
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f000 fbb5 	bl	800956c <USBD_CtlError>
                break;
 8008e02:	e091      	b.n	8008f28 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	da0b      	bge.n	8008e24 <USBD_StdEPReq+0x194>
 8008e0c:	7bbb      	ldrb	r3, [r7, #14]
 8008e0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e12:	4613      	mov	r3, r2
 8008e14:	009b      	lsls	r3, r3, #2
 8008e16:	4413      	add	r3, r2
 8008e18:	009b      	lsls	r3, r3, #2
 8008e1a:	3310      	adds	r3, #16
 8008e1c:	687a      	ldr	r2, [r7, #4]
 8008e1e:	4413      	add	r3, r2
 8008e20:	3304      	adds	r3, #4
 8008e22:	e00b      	b.n	8008e3c <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008e24:	7bbb      	ldrb	r3, [r7, #14]
 8008e26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e2a:	4613      	mov	r3, r2
 8008e2c:	009b      	lsls	r3, r3, #2
 8008e2e:	4413      	add	r3, r2
 8008e30:	009b      	lsls	r3, r3, #2
 8008e32:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008e36:	687a      	ldr	r2, [r7, #4]
 8008e38:	4413      	add	r3, r2
 8008e3a:	3304      	adds	r3, #4
 8008e3c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	2200      	movs	r2, #0
 8008e42:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	2202      	movs	r2, #2
 8008e48:	4619      	mov	r1, r3
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f000 fbf8 	bl	8009640 <USBD_CtlSendData>
              break;
 8008e50:	e06a      	b.n	8008f28 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008e52:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	da11      	bge.n	8008e7e <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008e5a:	7bbb      	ldrb	r3, [r7, #14]
 8008e5c:	f003 020f 	and.w	r2, r3, #15
 8008e60:	6879      	ldr	r1, [r7, #4]
 8008e62:	4613      	mov	r3, r2
 8008e64:	009b      	lsls	r3, r3, #2
 8008e66:	4413      	add	r3, r2
 8008e68:	009b      	lsls	r3, r3, #2
 8008e6a:	440b      	add	r3, r1
 8008e6c:	3318      	adds	r3, #24
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d117      	bne.n	8008ea4 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8008e74:	6839      	ldr	r1, [r7, #0]
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f000 fb78 	bl	800956c <USBD_CtlError>
                  break;
 8008e7c:	e054      	b.n	8008f28 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008e7e:	7bbb      	ldrb	r3, [r7, #14]
 8008e80:	f003 020f 	and.w	r2, r3, #15
 8008e84:	6879      	ldr	r1, [r7, #4]
 8008e86:	4613      	mov	r3, r2
 8008e88:	009b      	lsls	r3, r3, #2
 8008e8a:	4413      	add	r3, r2
 8008e8c:	009b      	lsls	r3, r3, #2
 8008e8e:	440b      	add	r3, r1
 8008e90:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d104      	bne.n	8008ea4 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8008e9a:	6839      	ldr	r1, [r7, #0]
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f000 fb65 	bl	800956c <USBD_CtlError>
                  break;
 8008ea2:	e041      	b.n	8008f28 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ea4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	da0b      	bge.n	8008ec4 <USBD_StdEPReq+0x234>
 8008eac:	7bbb      	ldrb	r3, [r7, #14]
 8008eae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008eb2:	4613      	mov	r3, r2
 8008eb4:	009b      	lsls	r3, r3, #2
 8008eb6:	4413      	add	r3, r2
 8008eb8:	009b      	lsls	r3, r3, #2
 8008eba:	3310      	adds	r3, #16
 8008ebc:	687a      	ldr	r2, [r7, #4]
 8008ebe:	4413      	add	r3, r2
 8008ec0:	3304      	adds	r3, #4
 8008ec2:	e00b      	b.n	8008edc <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008ec4:	7bbb      	ldrb	r3, [r7, #14]
 8008ec6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008eca:	4613      	mov	r3, r2
 8008ecc:	009b      	lsls	r3, r3, #2
 8008ece:	4413      	add	r3, r2
 8008ed0:	009b      	lsls	r3, r3, #2
 8008ed2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008ed6:	687a      	ldr	r2, [r7, #4]
 8008ed8:	4413      	add	r3, r2
 8008eda:	3304      	adds	r3, #4
 8008edc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008ede:	7bbb      	ldrb	r3, [r7, #14]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d002      	beq.n	8008eea <USBD_StdEPReq+0x25a>
 8008ee4:	7bbb      	ldrb	r3, [r7, #14]
 8008ee6:	2b80      	cmp	r3, #128	; 0x80
 8008ee8:	d103      	bne.n	8008ef2 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	2200      	movs	r2, #0
 8008eee:	601a      	str	r2, [r3, #0]
 8008ef0:	e00e      	b.n	8008f10 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008ef2:	7bbb      	ldrb	r3, [r7, #14]
 8008ef4:	4619      	mov	r1, r3
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f004 f99e 	bl	800d238 <USBD_LL_IsStallEP>
 8008efc:	4603      	mov	r3, r0
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d003      	beq.n	8008f0a <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	2201      	movs	r2, #1
 8008f06:	601a      	str	r2, [r3, #0]
 8008f08:	e002      	b.n	8008f10 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	2202      	movs	r2, #2
 8008f14:	4619      	mov	r1, r3
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f000 fb92 	bl	8009640 <USBD_CtlSendData>
              break;
 8008f1c:	e004      	b.n	8008f28 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8008f1e:	6839      	ldr	r1, [r7, #0]
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f000 fb23 	bl	800956c <USBD_CtlError>
              break;
 8008f26:	bf00      	nop
          }
          break;
 8008f28:	e004      	b.n	8008f34 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8008f2a:	6839      	ldr	r1, [r7, #0]
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f000 fb1d 	bl	800956c <USBD_CtlError>
          break;
 8008f32:	bf00      	nop
      }
      break;
 8008f34:	e004      	b.n	8008f40 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8008f36:	6839      	ldr	r1, [r7, #0]
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f000 fb17 	bl	800956c <USBD_CtlError>
      break;
 8008f3e:	bf00      	nop
  }

  return ret;
 8008f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	3710      	adds	r7, #16
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}
	...

08008f4c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b084      	sub	sp, #16
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
 8008f54:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008f56:	2300      	movs	r3, #0
 8008f58:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	885b      	ldrh	r3, [r3, #2]
 8008f66:	0a1b      	lsrs	r3, r3, #8
 8008f68:	b29b      	uxth	r3, r3
 8008f6a:	3b01      	subs	r3, #1
 8008f6c:	2b06      	cmp	r3, #6
 8008f6e:	f200 8128 	bhi.w	80091c2 <USBD_GetDescriptor+0x276>
 8008f72:	a201      	add	r2, pc, #4	; (adr r2, 8008f78 <USBD_GetDescriptor+0x2c>)
 8008f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f78:	08008f95 	.word	0x08008f95
 8008f7c:	08008fad 	.word	0x08008fad
 8008f80:	08008fed 	.word	0x08008fed
 8008f84:	080091c3 	.word	0x080091c3
 8008f88:	080091c3 	.word	0x080091c3
 8008f8c:	08009163 	.word	0x08009163
 8008f90:	0800918f 	.word	0x0800918f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	687a      	ldr	r2, [r7, #4]
 8008f9e:	7c12      	ldrb	r2, [r2, #16]
 8008fa0:	f107 0108 	add.w	r1, r7, #8
 8008fa4:	4610      	mov	r0, r2
 8008fa6:	4798      	blx	r3
 8008fa8:	60f8      	str	r0, [r7, #12]
      break;
 8008faa:	e112      	b.n	80091d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	7c1b      	ldrb	r3, [r3, #16]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d10d      	bne.n	8008fd0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fbc:	f107 0208 	add.w	r2, r7, #8
 8008fc0:	4610      	mov	r0, r2
 8008fc2:	4798      	blx	r3
 8008fc4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	3301      	adds	r3, #1
 8008fca:	2202      	movs	r2, #2
 8008fcc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008fce:	e100      	b.n	80091d2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fd8:	f107 0208 	add.w	r2, r7, #8
 8008fdc:	4610      	mov	r0, r2
 8008fde:	4798      	blx	r3
 8008fe0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	3301      	adds	r3, #1
 8008fe6:	2202      	movs	r2, #2
 8008fe8:	701a      	strb	r2, [r3, #0]
      break;
 8008fea:	e0f2      	b.n	80091d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	885b      	ldrh	r3, [r3, #2]
 8008ff0:	b2db      	uxtb	r3, r3
 8008ff2:	2b05      	cmp	r3, #5
 8008ff4:	f200 80ac 	bhi.w	8009150 <USBD_GetDescriptor+0x204>
 8008ff8:	a201      	add	r2, pc, #4	; (adr r2, 8009000 <USBD_GetDescriptor+0xb4>)
 8008ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ffe:	bf00      	nop
 8009000:	08009019 	.word	0x08009019
 8009004:	0800904d 	.word	0x0800904d
 8009008:	08009081 	.word	0x08009081
 800900c:	080090b5 	.word	0x080090b5
 8009010:	080090e9 	.word	0x080090e9
 8009014:	0800911d 	.word	0x0800911d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800901e:	685b      	ldr	r3, [r3, #4]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d00b      	beq.n	800903c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800902a:	685b      	ldr	r3, [r3, #4]
 800902c:	687a      	ldr	r2, [r7, #4]
 800902e:	7c12      	ldrb	r2, [r2, #16]
 8009030:	f107 0108 	add.w	r1, r7, #8
 8009034:	4610      	mov	r0, r2
 8009036:	4798      	blx	r3
 8009038:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800903a:	e091      	b.n	8009160 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800903c:	6839      	ldr	r1, [r7, #0]
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f000 fa94 	bl	800956c <USBD_CtlError>
            err++;
 8009044:	7afb      	ldrb	r3, [r7, #11]
 8009046:	3301      	adds	r3, #1
 8009048:	72fb      	strb	r3, [r7, #11]
          break;
 800904a:	e089      	b.n	8009160 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009052:	689b      	ldr	r3, [r3, #8]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d00b      	beq.n	8009070 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800905e:	689b      	ldr	r3, [r3, #8]
 8009060:	687a      	ldr	r2, [r7, #4]
 8009062:	7c12      	ldrb	r2, [r2, #16]
 8009064:	f107 0108 	add.w	r1, r7, #8
 8009068:	4610      	mov	r0, r2
 800906a:	4798      	blx	r3
 800906c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800906e:	e077      	b.n	8009160 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009070:	6839      	ldr	r1, [r7, #0]
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	f000 fa7a 	bl	800956c <USBD_CtlError>
            err++;
 8009078:	7afb      	ldrb	r3, [r7, #11]
 800907a:	3301      	adds	r3, #1
 800907c:	72fb      	strb	r3, [r7, #11]
          break;
 800907e:	e06f      	b.n	8009160 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009086:	68db      	ldr	r3, [r3, #12]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d00b      	beq.n	80090a4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009092:	68db      	ldr	r3, [r3, #12]
 8009094:	687a      	ldr	r2, [r7, #4]
 8009096:	7c12      	ldrb	r2, [r2, #16]
 8009098:	f107 0108 	add.w	r1, r7, #8
 800909c:	4610      	mov	r0, r2
 800909e:	4798      	blx	r3
 80090a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80090a2:	e05d      	b.n	8009160 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80090a4:	6839      	ldr	r1, [r7, #0]
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f000 fa60 	bl	800956c <USBD_CtlError>
            err++;
 80090ac:	7afb      	ldrb	r3, [r7, #11]
 80090ae:	3301      	adds	r3, #1
 80090b0:	72fb      	strb	r3, [r7, #11]
          break;
 80090b2:	e055      	b.n	8009160 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80090ba:	691b      	ldr	r3, [r3, #16]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d00b      	beq.n	80090d8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80090c6:	691b      	ldr	r3, [r3, #16]
 80090c8:	687a      	ldr	r2, [r7, #4]
 80090ca:	7c12      	ldrb	r2, [r2, #16]
 80090cc:	f107 0108 	add.w	r1, r7, #8
 80090d0:	4610      	mov	r0, r2
 80090d2:	4798      	blx	r3
 80090d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80090d6:	e043      	b.n	8009160 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80090d8:	6839      	ldr	r1, [r7, #0]
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f000 fa46 	bl	800956c <USBD_CtlError>
            err++;
 80090e0:	7afb      	ldrb	r3, [r7, #11]
 80090e2:	3301      	adds	r3, #1
 80090e4:	72fb      	strb	r3, [r7, #11]
          break;
 80090e6:	e03b      	b.n	8009160 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80090ee:	695b      	ldr	r3, [r3, #20]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d00b      	beq.n	800910c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80090fa:	695b      	ldr	r3, [r3, #20]
 80090fc:	687a      	ldr	r2, [r7, #4]
 80090fe:	7c12      	ldrb	r2, [r2, #16]
 8009100:	f107 0108 	add.w	r1, r7, #8
 8009104:	4610      	mov	r0, r2
 8009106:	4798      	blx	r3
 8009108:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800910a:	e029      	b.n	8009160 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800910c:	6839      	ldr	r1, [r7, #0]
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f000 fa2c 	bl	800956c <USBD_CtlError>
            err++;
 8009114:	7afb      	ldrb	r3, [r7, #11]
 8009116:	3301      	adds	r3, #1
 8009118:	72fb      	strb	r3, [r7, #11]
          break;
 800911a:	e021      	b.n	8009160 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009122:	699b      	ldr	r3, [r3, #24]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d00b      	beq.n	8009140 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800912e:	699b      	ldr	r3, [r3, #24]
 8009130:	687a      	ldr	r2, [r7, #4]
 8009132:	7c12      	ldrb	r2, [r2, #16]
 8009134:	f107 0108 	add.w	r1, r7, #8
 8009138:	4610      	mov	r0, r2
 800913a:	4798      	blx	r3
 800913c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800913e:	e00f      	b.n	8009160 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009140:	6839      	ldr	r1, [r7, #0]
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f000 fa12 	bl	800956c <USBD_CtlError>
            err++;
 8009148:	7afb      	ldrb	r3, [r7, #11]
 800914a:	3301      	adds	r3, #1
 800914c:	72fb      	strb	r3, [r7, #11]
          break;
 800914e:	e007      	b.n	8009160 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009150:	6839      	ldr	r1, [r7, #0]
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f000 fa0a 	bl	800956c <USBD_CtlError>
          err++;
 8009158:	7afb      	ldrb	r3, [r7, #11]
 800915a:	3301      	adds	r3, #1
 800915c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800915e:	e038      	b.n	80091d2 <USBD_GetDescriptor+0x286>
 8009160:	e037      	b.n	80091d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	7c1b      	ldrb	r3, [r3, #16]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d109      	bne.n	800917e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009172:	f107 0208 	add.w	r2, r7, #8
 8009176:	4610      	mov	r0, r2
 8009178:	4798      	blx	r3
 800917a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800917c:	e029      	b.n	80091d2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800917e:	6839      	ldr	r1, [r7, #0]
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f000 f9f3 	bl	800956c <USBD_CtlError>
        err++;
 8009186:	7afb      	ldrb	r3, [r7, #11]
 8009188:	3301      	adds	r3, #1
 800918a:	72fb      	strb	r3, [r7, #11]
      break;
 800918c:	e021      	b.n	80091d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	7c1b      	ldrb	r3, [r3, #16]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d10d      	bne.n	80091b2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800919c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800919e:	f107 0208 	add.w	r2, r7, #8
 80091a2:	4610      	mov	r0, r2
 80091a4:	4798      	blx	r3
 80091a6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	3301      	adds	r3, #1
 80091ac:	2207      	movs	r2, #7
 80091ae:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80091b0:	e00f      	b.n	80091d2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80091b2:	6839      	ldr	r1, [r7, #0]
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f000 f9d9 	bl	800956c <USBD_CtlError>
        err++;
 80091ba:	7afb      	ldrb	r3, [r7, #11]
 80091bc:	3301      	adds	r3, #1
 80091be:	72fb      	strb	r3, [r7, #11]
      break;
 80091c0:	e007      	b.n	80091d2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80091c2:	6839      	ldr	r1, [r7, #0]
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f000 f9d1 	bl	800956c <USBD_CtlError>
      err++;
 80091ca:	7afb      	ldrb	r3, [r7, #11]
 80091cc:	3301      	adds	r3, #1
 80091ce:	72fb      	strb	r3, [r7, #11]
      break;
 80091d0:	bf00      	nop
  }

  if (err != 0U)
 80091d2:	7afb      	ldrb	r3, [r7, #11]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d11c      	bne.n	8009212 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80091d8:	893b      	ldrh	r3, [r7, #8]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d011      	beq.n	8009202 <USBD_GetDescriptor+0x2b6>
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	88db      	ldrh	r3, [r3, #6]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d00d      	beq.n	8009202 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	88da      	ldrh	r2, [r3, #6]
 80091ea:	893b      	ldrh	r3, [r7, #8]
 80091ec:	4293      	cmp	r3, r2
 80091ee:	bf28      	it	cs
 80091f0:	4613      	movcs	r3, r2
 80091f2:	b29b      	uxth	r3, r3
 80091f4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80091f6:	893b      	ldrh	r3, [r7, #8]
 80091f8:	461a      	mov	r2, r3
 80091fa:	68f9      	ldr	r1, [r7, #12]
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f000 fa1f 	bl	8009640 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	88db      	ldrh	r3, [r3, #6]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d104      	bne.n	8009214 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f000 fa76 	bl	80096fc <USBD_CtlSendStatus>
 8009210:	e000      	b.n	8009214 <USBD_GetDescriptor+0x2c8>
    return;
 8009212:	bf00      	nop
    }
  }
}
 8009214:	3710      	adds	r7, #16
 8009216:	46bd      	mov	sp, r7
 8009218:	bd80      	pop	{r7, pc}
 800921a:	bf00      	nop

0800921c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b084      	sub	sp, #16
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
 8009224:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	889b      	ldrh	r3, [r3, #4]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d130      	bne.n	8009290 <USBD_SetAddress+0x74>
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	88db      	ldrh	r3, [r3, #6]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d12c      	bne.n	8009290 <USBD_SetAddress+0x74>
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	885b      	ldrh	r3, [r3, #2]
 800923a:	2b7f      	cmp	r3, #127	; 0x7f
 800923c:	d828      	bhi.n	8009290 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	885b      	ldrh	r3, [r3, #2]
 8009242:	b2db      	uxtb	r3, r3
 8009244:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009248:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009250:	2b03      	cmp	r3, #3
 8009252:	d104      	bne.n	800925e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009254:	6839      	ldr	r1, [r7, #0]
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f000 f988 	bl	800956c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800925c:	e01c      	b.n	8009298 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	7bfa      	ldrb	r2, [r7, #15]
 8009262:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009266:	7bfb      	ldrb	r3, [r7, #15]
 8009268:	4619      	mov	r1, r3
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f004 f80f 	bl	800d28e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f000 fa43 	bl	80096fc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009276:	7bfb      	ldrb	r3, [r7, #15]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d004      	beq.n	8009286 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2202      	movs	r2, #2
 8009280:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009284:	e008      	b.n	8009298 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2201      	movs	r2, #1
 800928a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800928e:	e003      	b.n	8009298 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009290:	6839      	ldr	r1, [r7, #0]
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	f000 f96a 	bl	800956c <USBD_CtlError>
  }
}
 8009298:	bf00      	nop
 800929a:	3710      	adds	r7, #16
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}

080092a0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b082      	sub	sp, #8
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
 80092a8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	885b      	ldrh	r3, [r3, #2]
 80092ae:	b2da      	uxtb	r2, r3
 80092b0:	4b41      	ldr	r3, [pc, #260]	; (80093b8 <USBD_SetConfig+0x118>)
 80092b2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80092b4:	4b40      	ldr	r3, [pc, #256]	; (80093b8 <USBD_SetConfig+0x118>)
 80092b6:	781b      	ldrb	r3, [r3, #0]
 80092b8:	2b01      	cmp	r3, #1
 80092ba:	d904      	bls.n	80092c6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80092bc:	6839      	ldr	r1, [r7, #0]
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f000 f954 	bl	800956c <USBD_CtlError>
 80092c4:	e075      	b.n	80093b2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092cc:	2b02      	cmp	r3, #2
 80092ce:	d002      	beq.n	80092d6 <USBD_SetConfig+0x36>
 80092d0:	2b03      	cmp	r3, #3
 80092d2:	d023      	beq.n	800931c <USBD_SetConfig+0x7c>
 80092d4:	e062      	b.n	800939c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80092d6:	4b38      	ldr	r3, [pc, #224]	; (80093b8 <USBD_SetConfig+0x118>)
 80092d8:	781b      	ldrb	r3, [r3, #0]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d01a      	beq.n	8009314 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80092de:	4b36      	ldr	r3, [pc, #216]	; (80093b8 <USBD_SetConfig+0x118>)
 80092e0:	781b      	ldrb	r3, [r3, #0]
 80092e2:	461a      	mov	r2, r3
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2203      	movs	r2, #3
 80092ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80092f0:	4b31      	ldr	r3, [pc, #196]	; (80093b8 <USBD_SetConfig+0x118>)
 80092f2:	781b      	ldrb	r3, [r3, #0]
 80092f4:	4619      	mov	r1, r3
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	f7ff f9ba 	bl	8008670 <USBD_SetClassConfig>
 80092fc:	4603      	mov	r3, r0
 80092fe:	2b02      	cmp	r3, #2
 8009300:	d104      	bne.n	800930c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009302:	6839      	ldr	r1, [r7, #0]
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f000 f931 	bl	800956c <USBD_CtlError>
            return;
 800930a:	e052      	b.n	80093b2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f000 f9f5 	bl	80096fc <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009312:	e04e      	b.n	80093b2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f000 f9f1 	bl	80096fc <USBD_CtlSendStatus>
        break;
 800931a:	e04a      	b.n	80093b2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800931c:	4b26      	ldr	r3, [pc, #152]	; (80093b8 <USBD_SetConfig+0x118>)
 800931e:	781b      	ldrb	r3, [r3, #0]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d112      	bne.n	800934a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2202      	movs	r2, #2
 8009328:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800932c:	4b22      	ldr	r3, [pc, #136]	; (80093b8 <USBD_SetConfig+0x118>)
 800932e:	781b      	ldrb	r3, [r3, #0]
 8009330:	461a      	mov	r2, r3
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009336:	4b20      	ldr	r3, [pc, #128]	; (80093b8 <USBD_SetConfig+0x118>)
 8009338:	781b      	ldrb	r3, [r3, #0]
 800933a:	4619      	mov	r1, r3
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f7ff f9b6 	bl	80086ae <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f000 f9da 	bl	80096fc <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009348:	e033      	b.n	80093b2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800934a:	4b1b      	ldr	r3, [pc, #108]	; (80093b8 <USBD_SetConfig+0x118>)
 800934c:	781b      	ldrb	r3, [r3, #0]
 800934e:	461a      	mov	r2, r3
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	685b      	ldr	r3, [r3, #4]
 8009354:	429a      	cmp	r2, r3
 8009356:	d01d      	beq.n	8009394 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	685b      	ldr	r3, [r3, #4]
 800935c:	b2db      	uxtb	r3, r3
 800935e:	4619      	mov	r1, r3
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	f7ff f9a4 	bl	80086ae <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009366:	4b14      	ldr	r3, [pc, #80]	; (80093b8 <USBD_SetConfig+0x118>)
 8009368:	781b      	ldrb	r3, [r3, #0]
 800936a:	461a      	mov	r2, r3
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009370:	4b11      	ldr	r3, [pc, #68]	; (80093b8 <USBD_SetConfig+0x118>)
 8009372:	781b      	ldrb	r3, [r3, #0]
 8009374:	4619      	mov	r1, r3
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f7ff f97a 	bl	8008670 <USBD_SetClassConfig>
 800937c:	4603      	mov	r3, r0
 800937e:	2b02      	cmp	r3, #2
 8009380:	d104      	bne.n	800938c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009382:	6839      	ldr	r1, [r7, #0]
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f000 f8f1 	bl	800956c <USBD_CtlError>
            return;
 800938a:	e012      	b.n	80093b2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	f000 f9b5 	bl	80096fc <USBD_CtlSendStatus>
        break;
 8009392:	e00e      	b.n	80093b2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f000 f9b1 	bl	80096fc <USBD_CtlSendStatus>
        break;
 800939a:	e00a      	b.n	80093b2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800939c:	6839      	ldr	r1, [r7, #0]
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f000 f8e4 	bl	800956c <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80093a4:	4b04      	ldr	r3, [pc, #16]	; (80093b8 <USBD_SetConfig+0x118>)
 80093a6:	781b      	ldrb	r3, [r3, #0]
 80093a8:	4619      	mov	r1, r3
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f7ff f97f 	bl	80086ae <USBD_ClrClassConfig>
        break;
 80093b0:	bf00      	nop
    }
  }
}
 80093b2:	3708      	adds	r7, #8
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}
 80093b8:	20000200 	.word	0x20000200

080093bc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b082      	sub	sp, #8
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
 80093c4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	88db      	ldrh	r3, [r3, #6]
 80093ca:	2b01      	cmp	r3, #1
 80093cc:	d004      	beq.n	80093d8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80093ce:	6839      	ldr	r1, [r7, #0]
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f000 f8cb 	bl	800956c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80093d6:	e021      	b.n	800941c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093de:	2b01      	cmp	r3, #1
 80093e0:	db17      	blt.n	8009412 <USBD_GetConfig+0x56>
 80093e2:	2b02      	cmp	r3, #2
 80093e4:	dd02      	ble.n	80093ec <USBD_GetConfig+0x30>
 80093e6:	2b03      	cmp	r3, #3
 80093e8:	d00b      	beq.n	8009402 <USBD_GetConfig+0x46>
 80093ea:	e012      	b.n	8009412 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2200      	movs	r2, #0
 80093f0:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	3308      	adds	r3, #8
 80093f6:	2201      	movs	r2, #1
 80093f8:	4619      	mov	r1, r3
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f000 f920 	bl	8009640 <USBD_CtlSendData>
        break;
 8009400:	e00c      	b.n	800941c <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	3304      	adds	r3, #4
 8009406:	2201      	movs	r2, #1
 8009408:	4619      	mov	r1, r3
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f000 f918 	bl	8009640 <USBD_CtlSendData>
        break;
 8009410:	e004      	b.n	800941c <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8009412:	6839      	ldr	r1, [r7, #0]
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f000 f8a9 	bl	800956c <USBD_CtlError>
        break;
 800941a:	bf00      	nop
}
 800941c:	bf00      	nop
 800941e:	3708      	adds	r7, #8
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}

08009424 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b082      	sub	sp, #8
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
 800942c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009434:	3b01      	subs	r3, #1
 8009436:	2b02      	cmp	r3, #2
 8009438:	d81e      	bhi.n	8009478 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	88db      	ldrh	r3, [r3, #6]
 800943e:	2b02      	cmp	r3, #2
 8009440:	d004      	beq.n	800944c <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009442:	6839      	ldr	r1, [r7, #0]
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f000 f891 	bl	800956c <USBD_CtlError>
        break;
 800944a:	e01a      	b.n	8009482 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
      pdev->dev_config_status = 0U;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2200      	movs	r2, #0
 8009450:	60da      	str	r2, [r3, #12]
#endif

      if (pdev->dev_remote_wakeup)
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009458:	2b00      	cmp	r3, #0
 800945a:	d005      	beq.n	8009468 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	68db      	ldr	r3, [r3, #12]
 8009460:	f043 0202 	orr.w	r2, r3, #2
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	330c      	adds	r3, #12
 800946c:	2202      	movs	r2, #2
 800946e:	4619      	mov	r1, r3
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f000 f8e5 	bl	8009640 <USBD_CtlSendData>
      break;
 8009476:	e004      	b.n	8009482 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009478:	6839      	ldr	r1, [r7, #0]
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f000 f876 	bl	800956c <USBD_CtlError>
      break;
 8009480:	bf00      	nop
  }
}
 8009482:	bf00      	nop
 8009484:	3708      	adds	r7, #8
 8009486:	46bd      	mov	sp, r7
 8009488:	bd80      	pop	{r7, pc}

0800948a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800948a:	b580      	push	{r7, lr}
 800948c:	b082      	sub	sp, #8
 800948e:	af00      	add	r7, sp, #0
 8009490:	6078      	str	r0, [r7, #4]
 8009492:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	885b      	ldrh	r3, [r3, #2]
 8009498:	2b01      	cmp	r3, #1
 800949a:	d106      	bne.n	80094aa <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2201      	movs	r2, #1
 80094a0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f000 f929 	bl	80096fc <USBD_CtlSendStatus>
  }
}
 80094aa:	bf00      	nop
 80094ac:	3708      	adds	r7, #8
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}

080094b2 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80094b2:	b580      	push	{r7, lr}
 80094b4:	b082      	sub	sp, #8
 80094b6:	af00      	add	r7, sp, #0
 80094b8:	6078      	str	r0, [r7, #4]
 80094ba:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094c2:	3b01      	subs	r3, #1
 80094c4:	2b02      	cmp	r3, #2
 80094c6:	d80b      	bhi.n	80094e0 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	885b      	ldrh	r3, [r3, #2]
 80094cc:	2b01      	cmp	r3, #1
 80094ce:	d10c      	bne.n	80094ea <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2200      	movs	r2, #0
 80094d4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f000 f90f 	bl	80096fc <USBD_CtlSendStatus>
      }
      break;
 80094de:	e004      	b.n	80094ea <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80094e0:	6839      	ldr	r1, [r7, #0]
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f000 f842 	bl	800956c <USBD_CtlError>
      break;
 80094e8:	e000      	b.n	80094ec <USBD_ClrFeature+0x3a>
      break;
 80094ea:	bf00      	nop
  }
}
 80094ec:	bf00      	nop
 80094ee:	3708      	adds	r7, #8
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bd80      	pop	{r7, pc}

080094f4 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80094f4:	b480      	push	{r7}
 80094f6:	b083      	sub	sp, #12
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
 80094fc:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	781a      	ldrb	r2, [r3, #0]
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	785a      	ldrb	r2, [r3, #1]
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	3302      	adds	r3, #2
 8009512:	781b      	ldrb	r3, [r3, #0]
 8009514:	b29a      	uxth	r2, r3
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	3303      	adds	r3, #3
 800951a:	781b      	ldrb	r3, [r3, #0]
 800951c:	b29b      	uxth	r3, r3
 800951e:	021b      	lsls	r3, r3, #8
 8009520:	b29b      	uxth	r3, r3
 8009522:	4413      	add	r3, r2
 8009524:	b29a      	uxth	r2, r3
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	3304      	adds	r3, #4
 800952e:	781b      	ldrb	r3, [r3, #0]
 8009530:	b29a      	uxth	r2, r3
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	3305      	adds	r3, #5
 8009536:	781b      	ldrb	r3, [r3, #0]
 8009538:	b29b      	uxth	r3, r3
 800953a:	021b      	lsls	r3, r3, #8
 800953c:	b29b      	uxth	r3, r3
 800953e:	4413      	add	r3, r2
 8009540:	b29a      	uxth	r2, r3
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	3306      	adds	r3, #6
 800954a:	781b      	ldrb	r3, [r3, #0]
 800954c:	b29a      	uxth	r2, r3
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	3307      	adds	r3, #7
 8009552:	781b      	ldrb	r3, [r3, #0]
 8009554:	b29b      	uxth	r3, r3
 8009556:	021b      	lsls	r3, r3, #8
 8009558:	b29b      	uxth	r3, r3
 800955a:	4413      	add	r3, r2
 800955c:	b29a      	uxth	r2, r3
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	80da      	strh	r2, [r3, #6]

}
 8009562:	bf00      	nop
 8009564:	370c      	adds	r7, #12
 8009566:	46bd      	mov	sp, r7
 8009568:	bc80      	pop	{r7}
 800956a:	4770      	bx	lr

0800956c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b082      	sub	sp, #8
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
 8009574:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009576:	2180      	movs	r1, #128	; 0x80
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f003 fe1f 	bl	800d1bc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800957e:	2100      	movs	r1, #0
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f003 fe1b 	bl	800d1bc <USBD_LL_StallEP>
}
 8009586:	bf00      	nop
 8009588:	3708      	adds	r7, #8
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}

0800958e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800958e:	b580      	push	{r7, lr}
 8009590:	b086      	sub	sp, #24
 8009592:	af00      	add	r7, sp, #0
 8009594:	60f8      	str	r0, [r7, #12]
 8009596:	60b9      	str	r1, [r7, #8]
 8009598:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800959a:	2300      	movs	r3, #0
 800959c:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d032      	beq.n	800960a <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80095a4:	68f8      	ldr	r0, [r7, #12]
 80095a6:	f000 f834 	bl	8009612 <USBD_GetLen>
 80095aa:	4603      	mov	r3, r0
 80095ac:	3301      	adds	r3, #1
 80095ae:	b29b      	uxth	r3, r3
 80095b0:	005b      	lsls	r3, r3, #1
 80095b2:	b29a      	uxth	r2, r3
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80095b8:	7dfb      	ldrb	r3, [r7, #23]
 80095ba:	1c5a      	adds	r2, r3, #1
 80095bc:	75fa      	strb	r2, [r7, #23]
 80095be:	461a      	mov	r2, r3
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	4413      	add	r3, r2
 80095c4:	687a      	ldr	r2, [r7, #4]
 80095c6:	7812      	ldrb	r2, [r2, #0]
 80095c8:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80095ca:	7dfb      	ldrb	r3, [r7, #23]
 80095cc:	1c5a      	adds	r2, r3, #1
 80095ce:	75fa      	strb	r2, [r7, #23]
 80095d0:	461a      	mov	r2, r3
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	4413      	add	r3, r2
 80095d6:	2203      	movs	r2, #3
 80095d8:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80095da:	e012      	b.n	8009602 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	1c5a      	adds	r2, r3, #1
 80095e0:	60fa      	str	r2, [r7, #12]
 80095e2:	7dfa      	ldrb	r2, [r7, #23]
 80095e4:	1c51      	adds	r1, r2, #1
 80095e6:	75f9      	strb	r1, [r7, #23]
 80095e8:	4611      	mov	r1, r2
 80095ea:	68ba      	ldr	r2, [r7, #8]
 80095ec:	440a      	add	r2, r1
 80095ee:	781b      	ldrb	r3, [r3, #0]
 80095f0:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80095f2:	7dfb      	ldrb	r3, [r7, #23]
 80095f4:	1c5a      	adds	r2, r3, #1
 80095f6:	75fa      	strb	r2, [r7, #23]
 80095f8:	461a      	mov	r2, r3
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	4413      	add	r3, r2
 80095fe:	2200      	movs	r2, #0
 8009600:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	781b      	ldrb	r3, [r3, #0]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d1e8      	bne.n	80095dc <USBD_GetString+0x4e>
    }
  }
}
 800960a:	bf00      	nop
 800960c:	3718      	adds	r7, #24
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}

08009612 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009612:	b480      	push	{r7}
 8009614:	b085      	sub	sp, #20
 8009616:	af00      	add	r7, sp, #0
 8009618:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800961a:	2300      	movs	r3, #0
 800961c:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800961e:	e005      	b.n	800962c <USBD_GetLen+0x1a>
  {
    len++;
 8009620:	7bfb      	ldrb	r3, [r7, #15]
 8009622:	3301      	adds	r3, #1
 8009624:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	3301      	adds	r3, #1
 800962a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	781b      	ldrb	r3, [r3, #0]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d1f5      	bne.n	8009620 <USBD_GetLen+0xe>
  }

  return len;
 8009634:	7bfb      	ldrb	r3, [r7, #15]
}
 8009636:	4618      	mov	r0, r3
 8009638:	3714      	adds	r7, #20
 800963a:	46bd      	mov	sp, r7
 800963c:	bc80      	pop	{r7}
 800963e:	4770      	bx	lr

08009640 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b084      	sub	sp, #16
 8009644:	af00      	add	r7, sp, #0
 8009646:	60f8      	str	r0, [r7, #12]
 8009648:	60b9      	str	r1, [r7, #8]
 800964a:	4613      	mov	r3, r2
 800964c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	2202      	movs	r2, #2
 8009652:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009656:	88fa      	ldrh	r2, [r7, #6]
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800965c:	88fa      	ldrh	r2, [r7, #6]
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009662:	88fb      	ldrh	r3, [r7, #6]
 8009664:	68ba      	ldr	r2, [r7, #8]
 8009666:	2100      	movs	r1, #0
 8009668:	68f8      	ldr	r0, [r7, #12]
 800966a:	f003 fe2f 	bl	800d2cc <USBD_LL_Transmit>

  return USBD_OK;
 800966e:	2300      	movs	r3, #0
}
 8009670:	4618      	mov	r0, r3
 8009672:	3710      	adds	r7, #16
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}

08009678 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b084      	sub	sp, #16
 800967c:	af00      	add	r7, sp, #0
 800967e:	60f8      	str	r0, [r7, #12]
 8009680:	60b9      	str	r1, [r7, #8]
 8009682:	4613      	mov	r3, r2
 8009684:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009686:	88fb      	ldrh	r3, [r7, #6]
 8009688:	68ba      	ldr	r2, [r7, #8]
 800968a:	2100      	movs	r1, #0
 800968c:	68f8      	ldr	r0, [r7, #12]
 800968e:	f003 fe1d 	bl	800d2cc <USBD_LL_Transmit>

  return USBD_OK;
 8009692:	2300      	movs	r3, #0
}
 8009694:	4618      	mov	r0, r3
 8009696:	3710      	adds	r7, #16
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}

0800969c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b084      	sub	sp, #16
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	60f8      	str	r0, [r7, #12]
 80096a4:	60b9      	str	r1, [r7, #8]
 80096a6:	4613      	mov	r3, r2
 80096a8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	2203      	movs	r2, #3
 80096ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80096b2:	88fa      	ldrh	r2, [r7, #6]
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80096ba:	88fa      	ldrh	r2, [r7, #6]
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80096c2:	88fb      	ldrh	r3, [r7, #6]
 80096c4:	68ba      	ldr	r2, [r7, #8]
 80096c6:	2100      	movs	r1, #0
 80096c8:	68f8      	ldr	r0, [r7, #12]
 80096ca:	f003 fe22 	bl	800d312 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80096ce:	2300      	movs	r3, #0
}
 80096d0:	4618      	mov	r0, r3
 80096d2:	3710      	adds	r7, #16
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd80      	pop	{r7, pc}

080096d8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b084      	sub	sp, #16
 80096dc:	af00      	add	r7, sp, #0
 80096de:	60f8      	str	r0, [r7, #12]
 80096e0:	60b9      	str	r1, [r7, #8]
 80096e2:	4613      	mov	r3, r2
 80096e4:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80096e6:	88fb      	ldrh	r3, [r7, #6]
 80096e8:	68ba      	ldr	r2, [r7, #8]
 80096ea:	2100      	movs	r1, #0
 80096ec:	68f8      	ldr	r0, [r7, #12]
 80096ee:	f003 fe10 	bl	800d312 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80096f2:	2300      	movs	r3, #0
}
 80096f4:	4618      	mov	r0, r3
 80096f6:	3710      	adds	r7, #16
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd80      	pop	{r7, pc}

080096fc <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b082      	sub	sp, #8
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2204      	movs	r2, #4
 8009708:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800970c:	2300      	movs	r3, #0
 800970e:	2200      	movs	r2, #0
 8009710:	2100      	movs	r1, #0
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f003 fdda 	bl	800d2cc <USBD_LL_Transmit>

  return USBD_OK;
 8009718:	2300      	movs	r3, #0
}
 800971a:	4618      	mov	r0, r3
 800971c:	3708      	adds	r7, #8
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}

08009722 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009722:	b580      	push	{r7, lr}
 8009724:	b082      	sub	sp, #8
 8009726:	af00      	add	r7, sp, #0
 8009728:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2205      	movs	r2, #5
 800972e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009732:	2300      	movs	r3, #0
 8009734:	2200      	movs	r2, #0
 8009736:	2100      	movs	r1, #0
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f003 fdea 	bl	800d312 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800973e:	2300      	movs	r3, #0
}
 8009740:	4618      	mov	r0, r3
 8009742:	3708      	adds	r7, #8
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}

08009748 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b084      	sub	sp, #16
 800974c:	af00      	add	r7, sp, #0
 800974e:	4603      	mov	r3, r0
 8009750:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009752:	79fb      	ldrb	r3, [r7, #7]
 8009754:	4a08      	ldr	r2, [pc, #32]	; (8009778 <disk_status+0x30>)
 8009756:	009b      	lsls	r3, r3, #2
 8009758:	4413      	add	r3, r2
 800975a:	685b      	ldr	r3, [r3, #4]
 800975c:	685b      	ldr	r3, [r3, #4]
 800975e:	79fa      	ldrb	r2, [r7, #7]
 8009760:	4905      	ldr	r1, [pc, #20]	; (8009778 <disk_status+0x30>)
 8009762:	440a      	add	r2, r1
 8009764:	7a12      	ldrb	r2, [r2, #8]
 8009766:	4610      	mov	r0, r2
 8009768:	4798      	blx	r3
 800976a:	4603      	mov	r3, r0
 800976c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800976e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009770:	4618      	mov	r0, r3
 8009772:	3710      	adds	r7, #16
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}
 8009778:	20000424 	.word	0x20000424

0800977c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b084      	sub	sp, #16
 8009780:	af00      	add	r7, sp, #0
 8009782:	4603      	mov	r3, r0
 8009784:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009786:	2300      	movs	r3, #0
 8009788:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 800978a:	79fb      	ldrb	r3, [r7, #7]
 800978c:	4a0d      	ldr	r2, [pc, #52]	; (80097c4 <disk_initialize+0x48>)
 800978e:	5cd3      	ldrb	r3, [r2, r3]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d111      	bne.n	80097b8 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8009794:	79fb      	ldrb	r3, [r7, #7]
 8009796:	4a0b      	ldr	r2, [pc, #44]	; (80097c4 <disk_initialize+0x48>)
 8009798:	2101      	movs	r1, #1
 800979a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800979c:	79fb      	ldrb	r3, [r7, #7]
 800979e:	4a09      	ldr	r2, [pc, #36]	; (80097c4 <disk_initialize+0x48>)
 80097a0:	009b      	lsls	r3, r3, #2
 80097a2:	4413      	add	r3, r2
 80097a4:	685b      	ldr	r3, [r3, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	79fa      	ldrb	r2, [r7, #7]
 80097aa:	4906      	ldr	r1, [pc, #24]	; (80097c4 <disk_initialize+0x48>)
 80097ac:	440a      	add	r2, r1
 80097ae:	7a12      	ldrb	r2, [r2, #8]
 80097b0:	4610      	mov	r0, r2
 80097b2:	4798      	blx	r3
 80097b4:	4603      	mov	r3, r0
 80097b6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80097b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80097ba:	4618      	mov	r0, r3
 80097bc:	3710      	adds	r7, #16
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}
 80097c2:	bf00      	nop
 80097c4:	20000424 	.word	0x20000424

080097c8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80097c8:	b590      	push	{r4, r7, lr}
 80097ca:	b087      	sub	sp, #28
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	60b9      	str	r1, [r7, #8]
 80097d0:	607a      	str	r2, [r7, #4]
 80097d2:	603b      	str	r3, [r7, #0]
 80097d4:	4603      	mov	r3, r0
 80097d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80097d8:	7bfb      	ldrb	r3, [r7, #15]
 80097da:	4a0a      	ldr	r2, [pc, #40]	; (8009804 <disk_read+0x3c>)
 80097dc:	009b      	lsls	r3, r3, #2
 80097de:	4413      	add	r3, r2
 80097e0:	685b      	ldr	r3, [r3, #4]
 80097e2:	689c      	ldr	r4, [r3, #8]
 80097e4:	7bfb      	ldrb	r3, [r7, #15]
 80097e6:	4a07      	ldr	r2, [pc, #28]	; (8009804 <disk_read+0x3c>)
 80097e8:	4413      	add	r3, r2
 80097ea:	7a18      	ldrb	r0, [r3, #8]
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	687a      	ldr	r2, [r7, #4]
 80097f0:	68b9      	ldr	r1, [r7, #8]
 80097f2:	47a0      	blx	r4
 80097f4:	4603      	mov	r3, r0
 80097f6:	75fb      	strb	r3, [r7, #23]
  return res;
 80097f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	371c      	adds	r7, #28
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd90      	pop	{r4, r7, pc}
 8009802:	bf00      	nop
 8009804:	20000424 	.word	0x20000424

08009808 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009808:	b590      	push	{r4, r7, lr}
 800980a:	b087      	sub	sp, #28
 800980c:	af00      	add	r7, sp, #0
 800980e:	60b9      	str	r1, [r7, #8]
 8009810:	607a      	str	r2, [r7, #4]
 8009812:	603b      	str	r3, [r7, #0]
 8009814:	4603      	mov	r3, r0
 8009816:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009818:	7bfb      	ldrb	r3, [r7, #15]
 800981a:	4a0a      	ldr	r2, [pc, #40]	; (8009844 <disk_write+0x3c>)
 800981c:	009b      	lsls	r3, r3, #2
 800981e:	4413      	add	r3, r2
 8009820:	685b      	ldr	r3, [r3, #4]
 8009822:	68dc      	ldr	r4, [r3, #12]
 8009824:	7bfb      	ldrb	r3, [r7, #15]
 8009826:	4a07      	ldr	r2, [pc, #28]	; (8009844 <disk_write+0x3c>)
 8009828:	4413      	add	r3, r2
 800982a:	7a18      	ldrb	r0, [r3, #8]
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	687a      	ldr	r2, [r7, #4]
 8009830:	68b9      	ldr	r1, [r7, #8]
 8009832:	47a0      	blx	r4
 8009834:	4603      	mov	r3, r0
 8009836:	75fb      	strb	r3, [r7, #23]
  return res;
 8009838:	7dfb      	ldrb	r3, [r7, #23]
}
 800983a:	4618      	mov	r0, r3
 800983c:	371c      	adds	r7, #28
 800983e:	46bd      	mov	sp, r7
 8009840:	bd90      	pop	{r4, r7, pc}
 8009842:	bf00      	nop
 8009844:	20000424 	.word	0x20000424

08009848 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b084      	sub	sp, #16
 800984c:	af00      	add	r7, sp, #0
 800984e:	4603      	mov	r3, r0
 8009850:	603a      	str	r2, [r7, #0]
 8009852:	71fb      	strb	r3, [r7, #7]
 8009854:	460b      	mov	r3, r1
 8009856:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009858:	79fb      	ldrb	r3, [r7, #7]
 800985a:	4a09      	ldr	r2, [pc, #36]	; (8009880 <disk_ioctl+0x38>)
 800985c:	009b      	lsls	r3, r3, #2
 800985e:	4413      	add	r3, r2
 8009860:	685b      	ldr	r3, [r3, #4]
 8009862:	691b      	ldr	r3, [r3, #16]
 8009864:	79fa      	ldrb	r2, [r7, #7]
 8009866:	4906      	ldr	r1, [pc, #24]	; (8009880 <disk_ioctl+0x38>)
 8009868:	440a      	add	r2, r1
 800986a:	7a10      	ldrb	r0, [r2, #8]
 800986c:	79b9      	ldrb	r1, [r7, #6]
 800986e:	683a      	ldr	r2, [r7, #0]
 8009870:	4798      	blx	r3
 8009872:	4603      	mov	r3, r0
 8009874:	73fb      	strb	r3, [r7, #15]
  return res;
 8009876:	7bfb      	ldrb	r3, [r7, #15]
}
 8009878:	4618      	mov	r0, r3
 800987a:	3710      	adds	r7, #16
 800987c:	46bd      	mov	sp, r7
 800987e:	bd80      	pop	{r7, pc}
 8009880:	20000424 	.word	0x20000424

08009884 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009884:	b480      	push	{r7}
 8009886:	b087      	sub	sp, #28
 8009888:	af00      	add	r7, sp, #0
 800988a:	60f8      	str	r0, [r7, #12]
 800988c:	60b9      	str	r1, [r7, #8]
 800988e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8009898:	e007      	b.n	80098aa <mem_cpy+0x26>
		*d++ = *s++;
 800989a:	693a      	ldr	r2, [r7, #16]
 800989c:	1c53      	adds	r3, r2, #1
 800989e:	613b      	str	r3, [r7, #16]
 80098a0:	697b      	ldr	r3, [r7, #20]
 80098a2:	1c59      	adds	r1, r3, #1
 80098a4:	6179      	str	r1, [r7, #20]
 80098a6:	7812      	ldrb	r2, [r2, #0]
 80098a8:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	1e5a      	subs	r2, r3, #1
 80098ae:	607a      	str	r2, [r7, #4]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d1f2      	bne.n	800989a <mem_cpy+0x16>
}
 80098b4:	bf00      	nop
 80098b6:	371c      	adds	r7, #28
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bc80      	pop	{r7}
 80098bc:	4770      	bx	lr

080098be <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 80098be:	b480      	push	{r7}
 80098c0:	b087      	sub	sp, #28
 80098c2:	af00      	add	r7, sp, #0
 80098c4:	60f8      	str	r0, [r7, #12]
 80098c6:	60b9      	str	r1, [r7, #8]
 80098c8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	617b      	str	r3, [r7, #20]

	while (cnt--)
 80098ce:	e005      	b.n	80098dc <mem_set+0x1e>
		*d++ = (BYTE)val;
 80098d0:	697b      	ldr	r3, [r7, #20]
 80098d2:	1c5a      	adds	r2, r3, #1
 80098d4:	617a      	str	r2, [r7, #20]
 80098d6:	68ba      	ldr	r2, [r7, #8]
 80098d8:	b2d2      	uxtb	r2, r2
 80098da:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	1e5a      	subs	r2, r3, #1
 80098e0:	607a      	str	r2, [r7, #4]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d1f4      	bne.n	80098d0 <mem_set+0x12>
}
 80098e6:	bf00      	nop
 80098e8:	371c      	adds	r7, #28
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bc80      	pop	{r7}
 80098ee:	4770      	bx	lr

080098f0 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 80098f0:	b480      	push	{r7}
 80098f2:	b089      	sub	sp, #36	; 0x24
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	60f8      	str	r0, [r7, #12]
 80098f8:	60b9      	str	r1, [r7, #8]
 80098fa:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	61fb      	str	r3, [r7, #28]
 8009900:	68bb      	ldr	r3, [r7, #8]
 8009902:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009904:	2300      	movs	r3, #0
 8009906:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8009908:	bf00      	nop
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	1e5a      	subs	r2, r3, #1
 800990e:	607a      	str	r2, [r7, #4]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d00d      	beq.n	8009930 <mem_cmp+0x40>
 8009914:	69fb      	ldr	r3, [r7, #28]
 8009916:	1c5a      	adds	r2, r3, #1
 8009918:	61fa      	str	r2, [r7, #28]
 800991a:	781b      	ldrb	r3, [r3, #0]
 800991c:	4619      	mov	r1, r3
 800991e:	69bb      	ldr	r3, [r7, #24]
 8009920:	1c5a      	adds	r2, r3, #1
 8009922:	61ba      	str	r2, [r7, #24]
 8009924:	781b      	ldrb	r3, [r3, #0]
 8009926:	1acb      	subs	r3, r1, r3
 8009928:	617b      	str	r3, [r7, #20]
 800992a:	697b      	ldr	r3, [r7, #20]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d0ec      	beq.n	800990a <mem_cmp+0x1a>
	return r;
 8009930:	697b      	ldr	r3, [r7, #20]
}
 8009932:	4618      	mov	r0, r3
 8009934:	3724      	adds	r7, #36	; 0x24
 8009936:	46bd      	mov	sp, r7
 8009938:	bc80      	pop	{r7}
 800993a:	4770      	bx	lr

0800993c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 800993c:	b480      	push	{r7}
 800993e:	b083      	sub	sp, #12
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
 8009944:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009946:	e002      	b.n	800994e <chk_chr+0x12>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	3301      	adds	r3, #1
 800994c:	607b      	str	r3, [r7, #4]
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	781b      	ldrb	r3, [r3, #0]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d005      	beq.n	8009962 <chk_chr+0x26>
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	781b      	ldrb	r3, [r3, #0]
 800995a:	461a      	mov	r2, r3
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	4293      	cmp	r3, r2
 8009960:	d1f2      	bne.n	8009948 <chk_chr+0xc>
	return *str;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	781b      	ldrb	r3, [r3, #0]
}
 8009966:	4618      	mov	r0, r3
 8009968:	370c      	adds	r7, #12
 800996a:	46bd      	mov	sp, r7
 800996c:	bc80      	pop	{r7}
 800996e:	4770      	bx	lr

08009970 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009970:	b480      	push	{r7}
 8009972:	b085      	sub	sp, #20
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
 8009978:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800997a:	2300      	movs	r3, #0
 800997c:	60bb      	str	r3, [r7, #8]
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	60fb      	str	r3, [r7, #12]
 8009982:	e038      	b.n	80099f6 <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 8009984:	492f      	ldr	r1, [pc, #188]	; (8009a44 <chk_lock+0xd4>)
 8009986:	68fa      	ldr	r2, [r7, #12]
 8009988:	4613      	mov	r3, r2
 800998a:	005b      	lsls	r3, r3, #1
 800998c:	4413      	add	r3, r2
 800998e:	009b      	lsls	r3, r3, #2
 8009990:	440b      	add	r3, r1
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d029      	beq.n	80099ec <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8009998:	492a      	ldr	r1, [pc, #168]	; (8009a44 <chk_lock+0xd4>)
 800999a:	68fa      	ldr	r2, [r7, #12]
 800999c:	4613      	mov	r3, r2
 800999e:	005b      	lsls	r3, r3, #1
 80099a0:	4413      	add	r3, r2
 80099a2:	009b      	lsls	r3, r3, #2
 80099a4:	440b      	add	r3, r1
 80099a6:	681a      	ldr	r2, [r3, #0]
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80099ae:	429a      	cmp	r2, r3
 80099b0:	d11e      	bne.n	80099f0 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 80099b2:	4924      	ldr	r1, [pc, #144]	; (8009a44 <chk_lock+0xd4>)
 80099b4:	68fa      	ldr	r2, [r7, #12]
 80099b6:	4613      	mov	r3, r2
 80099b8:	005b      	lsls	r3, r3, #1
 80099ba:	4413      	add	r3, r2
 80099bc:	009b      	lsls	r3, r3, #2
 80099be:	440b      	add	r3, r1
 80099c0:	3304      	adds	r3, #4
 80099c2:	681a      	ldr	r2, [r3, #0]
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80099ca:	429a      	cmp	r2, r3
 80099cc:	d110      	bne.n	80099f0 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 80099ce:	491d      	ldr	r1, [pc, #116]	; (8009a44 <chk_lock+0xd4>)
 80099d0:	68fa      	ldr	r2, [r7, #12]
 80099d2:	4613      	mov	r3, r2
 80099d4:	005b      	lsls	r3, r3, #1
 80099d6:	4413      	add	r3, r2
 80099d8:	009b      	lsls	r3, r3, #2
 80099da:	440b      	add	r3, r1
 80099dc:	3308      	adds	r3, #8
 80099de:	881a      	ldrh	r2, [r3, #0]
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
				Files[i].clu == dp->sclust &&
 80099e6:	429a      	cmp	r2, r3
 80099e8:	d102      	bne.n	80099f0 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 80099ea:	e007      	b.n	80099fc <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 80099ec:	2301      	movs	r3, #1
 80099ee:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	3301      	adds	r3, #1
 80099f4:	60fb      	str	r3, [r7, #12]
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	2b01      	cmp	r3, #1
 80099fa:	d9c3      	bls.n	8009984 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	2b02      	cmp	r3, #2
 8009a00:	d109      	bne.n	8009a16 <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009a02:	68bb      	ldr	r3, [r7, #8]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d102      	bne.n	8009a0e <chk_lock+0x9e>
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	2b02      	cmp	r3, #2
 8009a0c:	d101      	bne.n	8009a12 <chk_lock+0xa2>
 8009a0e:	2300      	movs	r3, #0
 8009a10:	e013      	b.n	8009a3a <chk_lock+0xca>
 8009a12:	2312      	movs	r3, #18
 8009a14:	e011      	b.n	8009a3a <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d10b      	bne.n	8009a34 <chk_lock+0xc4>
 8009a1c:	4909      	ldr	r1, [pc, #36]	; (8009a44 <chk_lock+0xd4>)
 8009a1e:	68fa      	ldr	r2, [r7, #12]
 8009a20:	4613      	mov	r3, r2
 8009a22:	005b      	lsls	r3, r3, #1
 8009a24:	4413      	add	r3, r2
 8009a26:	009b      	lsls	r3, r3, #2
 8009a28:	440b      	add	r3, r1
 8009a2a:	330a      	adds	r3, #10
 8009a2c:	881b      	ldrh	r3, [r3, #0]
 8009a2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a32:	d101      	bne.n	8009a38 <chk_lock+0xc8>
 8009a34:	2310      	movs	r3, #16
 8009a36:	e000      	b.n	8009a3a <chk_lock+0xca>
 8009a38:	2300      	movs	r3, #0
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3714      	adds	r7, #20
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bc80      	pop	{r7}
 8009a42:	4770      	bx	lr
 8009a44:	2000020c 	.word	0x2000020c

08009a48 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009a48:	b480      	push	{r7}
 8009a4a:	b083      	sub	sp, #12
 8009a4c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009a4e:	2300      	movs	r3, #0
 8009a50:	607b      	str	r3, [r7, #4]
 8009a52:	e002      	b.n	8009a5a <enq_lock+0x12>
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	3301      	adds	r3, #1
 8009a58:	607b      	str	r3, [r7, #4]
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2b01      	cmp	r3, #1
 8009a5e:	d809      	bhi.n	8009a74 <enq_lock+0x2c>
 8009a60:	490a      	ldr	r1, [pc, #40]	; (8009a8c <enq_lock+0x44>)
 8009a62:	687a      	ldr	r2, [r7, #4]
 8009a64:	4613      	mov	r3, r2
 8009a66:	005b      	lsls	r3, r3, #1
 8009a68:	4413      	add	r3, r2
 8009a6a:	009b      	lsls	r3, r3, #2
 8009a6c:	440b      	add	r3, r1
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d1ef      	bne.n	8009a54 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2b02      	cmp	r3, #2
 8009a78:	bf14      	ite	ne
 8009a7a:	2301      	movne	r3, #1
 8009a7c:	2300      	moveq	r3, #0
 8009a7e:	b2db      	uxtb	r3, r3
}
 8009a80:	4618      	mov	r0, r3
 8009a82:	370c      	adds	r7, #12
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bc80      	pop	{r7}
 8009a88:	4770      	bx	lr
 8009a8a:	bf00      	nop
 8009a8c:	2000020c 	.word	0x2000020c

08009a90 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009a90:	b480      	push	{r7}
 8009a92:	b085      	sub	sp, #20
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
 8009a98:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	60fb      	str	r3, [r7, #12]
 8009a9e:	e02b      	b.n	8009af8 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 8009aa0:	4955      	ldr	r1, [pc, #340]	; (8009bf8 <inc_lock+0x168>)
 8009aa2:	68fa      	ldr	r2, [r7, #12]
 8009aa4:	4613      	mov	r3, r2
 8009aa6:	005b      	lsls	r3, r3, #1
 8009aa8:	4413      	add	r3, r2
 8009aaa:	009b      	lsls	r3, r3, #2
 8009aac:	440b      	add	r3, r1
 8009aae:	681a      	ldr	r2, [r3, #0]
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009ab6:	429a      	cmp	r2, r3
 8009ab8:	d11b      	bne.n	8009af2 <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 8009aba:	494f      	ldr	r1, [pc, #316]	; (8009bf8 <inc_lock+0x168>)
 8009abc:	68fa      	ldr	r2, [r7, #12]
 8009abe:	4613      	mov	r3, r2
 8009ac0:	005b      	lsls	r3, r3, #1
 8009ac2:	4413      	add	r3, r2
 8009ac4:	009b      	lsls	r3, r3, #2
 8009ac6:	440b      	add	r3, r1
 8009ac8:	3304      	adds	r3, #4
 8009aca:	681a      	ldr	r2, [r3, #0]
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 8009ad2:	429a      	cmp	r2, r3
 8009ad4:	d10d      	bne.n	8009af2 <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 8009ad6:	4948      	ldr	r1, [pc, #288]	; (8009bf8 <inc_lock+0x168>)
 8009ad8:	68fa      	ldr	r2, [r7, #12]
 8009ada:	4613      	mov	r3, r2
 8009adc:	005b      	lsls	r3, r3, #1
 8009ade:	4413      	add	r3, r2
 8009ae0:	009b      	lsls	r3, r3, #2
 8009ae2:	440b      	add	r3, r1
 8009ae4:	3308      	adds	r3, #8
 8009ae6:	881a      	ldrh	r2, [r3, #0]
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 8009aee:	429a      	cmp	r2, r3
 8009af0:	d006      	beq.n	8009b00 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	3301      	adds	r3, #1
 8009af6:	60fb      	str	r3, [r7, #12]
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	2b01      	cmp	r3, #1
 8009afc:	d9d0      	bls.n	8009aa0 <inc_lock+0x10>
 8009afe:	e000      	b.n	8009b02 <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 8009b00:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	2b02      	cmp	r3, #2
 8009b06:	d145      	bne.n	8009b94 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009b08:	2300      	movs	r3, #0
 8009b0a:	60fb      	str	r3, [r7, #12]
 8009b0c:	e002      	b.n	8009b14 <inc_lock+0x84>
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	3301      	adds	r3, #1
 8009b12:	60fb      	str	r3, [r7, #12]
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	2b01      	cmp	r3, #1
 8009b18:	d809      	bhi.n	8009b2e <inc_lock+0x9e>
 8009b1a:	4937      	ldr	r1, [pc, #220]	; (8009bf8 <inc_lock+0x168>)
 8009b1c:	68fa      	ldr	r2, [r7, #12]
 8009b1e:	4613      	mov	r3, r2
 8009b20:	005b      	lsls	r3, r3, #1
 8009b22:	4413      	add	r3, r2
 8009b24:	009b      	lsls	r3, r3, #2
 8009b26:	440b      	add	r3, r1
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d1ef      	bne.n	8009b0e <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	2b02      	cmp	r3, #2
 8009b32:	d101      	bne.n	8009b38 <inc_lock+0xa8>
 8009b34:	2300      	movs	r3, #0
 8009b36:	e05a      	b.n	8009bee <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 8009b3e:	482e      	ldr	r0, [pc, #184]	; (8009bf8 <inc_lock+0x168>)
 8009b40:	68fa      	ldr	r2, [r7, #12]
 8009b42:	4613      	mov	r3, r2
 8009b44:	005b      	lsls	r3, r3, #1
 8009b46:	4413      	add	r3, r2
 8009b48:	009b      	lsls	r3, r3, #2
 8009b4a:	4403      	add	r3, r0
 8009b4c:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 8009b54:	4828      	ldr	r0, [pc, #160]	; (8009bf8 <inc_lock+0x168>)
 8009b56:	68fa      	ldr	r2, [r7, #12]
 8009b58:	4613      	mov	r3, r2
 8009b5a:	005b      	lsls	r3, r3, #1
 8009b5c:	4413      	add	r3, r2
 8009b5e:	009b      	lsls	r3, r3, #2
 8009b60:	4403      	add	r3, r0
 8009b62:	3304      	adds	r3, #4
 8009b64:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 8009b6c:	4922      	ldr	r1, [pc, #136]	; (8009bf8 <inc_lock+0x168>)
 8009b6e:	68fa      	ldr	r2, [r7, #12]
 8009b70:	4613      	mov	r3, r2
 8009b72:	005b      	lsls	r3, r3, #1
 8009b74:	4413      	add	r3, r2
 8009b76:	009b      	lsls	r3, r3, #2
 8009b78:	440b      	add	r3, r1
 8009b7a:	3308      	adds	r3, #8
 8009b7c:	4602      	mov	r2, r0
 8009b7e:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8009b80:	491d      	ldr	r1, [pc, #116]	; (8009bf8 <inc_lock+0x168>)
 8009b82:	68fa      	ldr	r2, [r7, #12]
 8009b84:	4613      	mov	r3, r2
 8009b86:	005b      	lsls	r3, r3, #1
 8009b88:	4413      	add	r3, r2
 8009b8a:	009b      	lsls	r3, r3, #2
 8009b8c:	440b      	add	r3, r1
 8009b8e:	330a      	adds	r3, #10
 8009b90:	2200      	movs	r2, #0
 8009b92:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d00c      	beq.n	8009bb4 <inc_lock+0x124>
 8009b9a:	4917      	ldr	r1, [pc, #92]	; (8009bf8 <inc_lock+0x168>)
 8009b9c:	68fa      	ldr	r2, [r7, #12]
 8009b9e:	4613      	mov	r3, r2
 8009ba0:	005b      	lsls	r3, r3, #1
 8009ba2:	4413      	add	r3, r2
 8009ba4:	009b      	lsls	r3, r3, #2
 8009ba6:	440b      	add	r3, r1
 8009ba8:	330a      	adds	r3, #10
 8009baa:	881b      	ldrh	r3, [r3, #0]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d001      	beq.n	8009bb4 <inc_lock+0x124>
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	e01c      	b.n	8009bee <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d10b      	bne.n	8009bd2 <inc_lock+0x142>
 8009bba:	490f      	ldr	r1, [pc, #60]	; (8009bf8 <inc_lock+0x168>)
 8009bbc:	68fa      	ldr	r2, [r7, #12]
 8009bbe:	4613      	mov	r3, r2
 8009bc0:	005b      	lsls	r3, r3, #1
 8009bc2:	4413      	add	r3, r2
 8009bc4:	009b      	lsls	r3, r3, #2
 8009bc6:	440b      	add	r3, r1
 8009bc8:	330a      	adds	r3, #10
 8009bca:	881b      	ldrh	r3, [r3, #0]
 8009bcc:	3301      	adds	r3, #1
 8009bce:	b299      	uxth	r1, r3
 8009bd0:	e001      	b.n	8009bd6 <inc_lock+0x146>
 8009bd2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009bd6:	4808      	ldr	r0, [pc, #32]	; (8009bf8 <inc_lock+0x168>)
 8009bd8:	68fa      	ldr	r2, [r7, #12]
 8009bda:	4613      	mov	r3, r2
 8009bdc:	005b      	lsls	r3, r3, #1
 8009bde:	4413      	add	r3, r2
 8009be0:	009b      	lsls	r3, r3, #2
 8009be2:	4403      	add	r3, r0
 8009be4:	330a      	adds	r3, #10
 8009be6:	460a      	mov	r2, r1
 8009be8:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	3301      	adds	r3, #1
}
 8009bee:	4618      	mov	r0, r3
 8009bf0:	3714      	adds	r7, #20
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bc80      	pop	{r7}
 8009bf6:	4770      	bx	lr
 8009bf8:	2000020c 	.word	0x2000020c

08009bfc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009bfc:	b480      	push	{r7}
 8009bfe:	b085      	sub	sp, #20
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	3b01      	subs	r3, #1
 8009c08:	607b      	str	r3, [r7, #4]
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2b01      	cmp	r3, #1
 8009c0e:	d82e      	bhi.n	8009c6e <dec_lock+0x72>
		n = Files[i].ctr;
 8009c10:	491b      	ldr	r1, [pc, #108]	; (8009c80 <dec_lock+0x84>)
 8009c12:	687a      	ldr	r2, [r7, #4]
 8009c14:	4613      	mov	r3, r2
 8009c16:	005b      	lsls	r3, r3, #1
 8009c18:	4413      	add	r3, r2
 8009c1a:	009b      	lsls	r3, r3, #2
 8009c1c:	440b      	add	r3, r1
 8009c1e:	330a      	adds	r3, #10
 8009c20:	881b      	ldrh	r3, [r3, #0]
 8009c22:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009c24:	89fb      	ldrh	r3, [r7, #14]
 8009c26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c2a:	d101      	bne.n	8009c30 <dec_lock+0x34>
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8009c30:	89fb      	ldrh	r3, [r7, #14]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d002      	beq.n	8009c3c <dec_lock+0x40>
 8009c36:	89fb      	ldrh	r3, [r7, #14]
 8009c38:	3b01      	subs	r3, #1
 8009c3a:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009c3c:	4910      	ldr	r1, [pc, #64]	; (8009c80 <dec_lock+0x84>)
 8009c3e:	687a      	ldr	r2, [r7, #4]
 8009c40:	4613      	mov	r3, r2
 8009c42:	005b      	lsls	r3, r3, #1
 8009c44:	4413      	add	r3, r2
 8009c46:	009b      	lsls	r3, r3, #2
 8009c48:	440b      	add	r3, r1
 8009c4a:	330a      	adds	r3, #10
 8009c4c:	89fa      	ldrh	r2, [r7, #14]
 8009c4e:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009c50:	89fb      	ldrh	r3, [r7, #14]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d108      	bne.n	8009c68 <dec_lock+0x6c>
 8009c56:	490a      	ldr	r1, [pc, #40]	; (8009c80 <dec_lock+0x84>)
 8009c58:	687a      	ldr	r2, [r7, #4]
 8009c5a:	4613      	mov	r3, r2
 8009c5c:	005b      	lsls	r3, r3, #1
 8009c5e:	4413      	add	r3, r2
 8009c60:	009b      	lsls	r3, r3, #2
 8009c62:	440b      	add	r3, r1
 8009c64:	2200      	movs	r2, #0
 8009c66:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009c68:	2300      	movs	r3, #0
 8009c6a:	737b      	strb	r3, [r7, #13]
 8009c6c:	e001      	b.n	8009c72 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009c6e:	2302      	movs	r3, #2
 8009c70:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009c72:	7b7b      	ldrb	r3, [r7, #13]
}
 8009c74:	4618      	mov	r0, r3
 8009c76:	3714      	adds	r7, #20
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bc80      	pop	{r7}
 8009c7c:	4770      	bx	lr
 8009c7e:	bf00      	nop
 8009c80:	2000020c 	.word	0x2000020c

08009c84 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009c84:	b480      	push	{r7}
 8009c86:	b085      	sub	sp, #20
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	60fb      	str	r3, [r7, #12]
 8009c90:	e016      	b.n	8009cc0 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009c92:	490f      	ldr	r1, [pc, #60]	; (8009cd0 <clear_lock+0x4c>)
 8009c94:	68fa      	ldr	r2, [r7, #12]
 8009c96:	4613      	mov	r3, r2
 8009c98:	005b      	lsls	r3, r3, #1
 8009c9a:	4413      	add	r3, r2
 8009c9c:	009b      	lsls	r3, r3, #2
 8009c9e:	440b      	add	r3, r1
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	687a      	ldr	r2, [r7, #4]
 8009ca4:	429a      	cmp	r2, r3
 8009ca6:	d108      	bne.n	8009cba <clear_lock+0x36>
 8009ca8:	4909      	ldr	r1, [pc, #36]	; (8009cd0 <clear_lock+0x4c>)
 8009caa:	68fa      	ldr	r2, [r7, #12]
 8009cac:	4613      	mov	r3, r2
 8009cae:	005b      	lsls	r3, r3, #1
 8009cb0:	4413      	add	r3, r2
 8009cb2:	009b      	lsls	r3, r3, #2
 8009cb4:	440b      	add	r3, r1
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	3301      	adds	r3, #1
 8009cbe:	60fb      	str	r3, [r7, #12]
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	2b01      	cmp	r3, #1
 8009cc4:	d9e5      	bls.n	8009c92 <clear_lock+0xe>
	}
}
 8009cc6:	bf00      	nop
 8009cc8:	3714      	adds	r7, #20
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bc80      	pop	{r7}
 8009cce:	4770      	bx	lr
 8009cd0:	2000020c 	.word	0x2000020c

08009cd4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b086      	sub	sp, #24
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009cdc:	2300      	movs	r3, #0
 8009cde:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d038      	beq.n	8009d5c <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8009cf0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8009cf8:	6879      	ldr	r1, [r7, #4]
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	697a      	ldr	r2, [r7, #20]
 8009cfe:	f7ff fd83 	bl	8009808 <disk_write>
 8009d02:	4603      	mov	r3, r0
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d002      	beq.n	8009d0e <sync_window+0x3a>
			res = FR_DISK_ERR;
 8009d08:	2301      	movs	r3, #1
 8009d0a:	73fb      	strb	r3, [r7, #15]
 8009d0c:	e026      	b.n	8009d5c <sync_window+0x88>
		} else {
			fs->wflag = 0;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2200      	movs	r2, #0
 8009d12:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8009d1c:	697a      	ldr	r2, [r7, #20]
 8009d1e:	1ad2      	subs	r2, r2, r3
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8009d26:	429a      	cmp	r2, r3
 8009d28:	d218      	bcs.n	8009d5c <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8009d30:	613b      	str	r3, [r7, #16]
 8009d32:	e010      	b.n	8009d56 <sync_window+0x82>
					wsect += fs->fsize;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8009d3a:	697a      	ldr	r2, [r7, #20]
 8009d3c:	4413      	add	r3, r2
 8009d3e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8009d46:	6879      	ldr	r1, [r7, #4]
 8009d48:	2301      	movs	r3, #1
 8009d4a:	697a      	ldr	r2, [r7, #20]
 8009d4c:	f7ff fd5c 	bl	8009808 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009d50:	693b      	ldr	r3, [r7, #16]
 8009d52:	3b01      	subs	r3, #1
 8009d54:	613b      	str	r3, [r7, #16]
 8009d56:	693b      	ldr	r3, [r7, #16]
 8009d58:	2b01      	cmp	r3, #1
 8009d5a:	d8eb      	bhi.n	8009d34 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 8009d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d5e:	4618      	mov	r0, r3
 8009d60:	3718      	adds	r7, #24
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bd80      	pop	{r7, pc}

08009d66 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8009d66:	b580      	push	{r7, lr}
 8009d68:	b084      	sub	sp, #16
 8009d6a:	af00      	add	r7, sp, #0
 8009d6c:	6078      	str	r0, [r7, #4]
 8009d6e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009d70:	2300      	movs	r3, #0
 8009d72:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8009d7a:	683a      	ldr	r2, [r7, #0]
 8009d7c:	429a      	cmp	r2, r3
 8009d7e:	d01b      	beq.n	8009db8 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009d80:	6878      	ldr	r0, [r7, #4]
 8009d82:	f7ff ffa7 	bl	8009cd4 <sync_window>
 8009d86:	4603      	mov	r3, r0
 8009d88:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009d8a:	7bfb      	ldrb	r3, [r7, #15]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d113      	bne.n	8009db8 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8009d96:	6879      	ldr	r1, [r7, #4]
 8009d98:	2301      	movs	r3, #1
 8009d9a:	683a      	ldr	r2, [r7, #0]
 8009d9c:	f7ff fd14 	bl	80097c8 <disk_read>
 8009da0:	4603      	mov	r3, r0
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d004      	beq.n	8009db0 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009da6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009daa:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009dac:	2301      	movs	r3, #1
 8009dae:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	683a      	ldr	r2, [r7, #0]
 8009db4:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
		}
	}
	return res;
 8009db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dba:	4618      	mov	r0, r3
 8009dbc:	3710      	adds	r7, #16
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd80      	pop	{r7, pc}

08009dc2 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8009dc2:	b580      	push	{r7, lr}
 8009dc4:	b084      	sub	sp, #16
 8009dc6:	af00      	add	r7, sp, #0
 8009dc8:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	f7ff ff82 	bl	8009cd4 <sync_window>
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009dd4:	7bfb      	ldrb	r3, [r7, #15]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	f040 809b 	bne.w	8009f12 <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009de2:	2b03      	cmp	r3, #3
 8009de4:	f040 8088 	bne.w	8009ef8 <sync_fs+0x136>
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8009dee:	2b01      	cmp	r3, #1
 8009df0:	f040 8082 	bne.w	8009ef8 <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009dfa:	2100      	movs	r1, #0
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	f7ff fd5e 	bl	80098be <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2255      	movs	r2, #85	; 0x55
 8009e06:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	22aa      	movs	r2, #170	; 0xaa
 8009e0e:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2252      	movs	r2, #82	; 0x52
 8009e16:	701a      	strb	r2, [r3, #0]
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2252      	movs	r2, #82	; 0x52
 8009e1c:	705a      	strb	r2, [r3, #1]
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2261      	movs	r2, #97	; 0x61
 8009e22:	709a      	strb	r2, [r3, #2]
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2241      	movs	r2, #65	; 0x41
 8009e28:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2272      	movs	r2, #114	; 0x72
 8009e2e:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2272      	movs	r2, #114	; 0x72
 8009e36:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2241      	movs	r2, #65	; 0x41
 8009e3e:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2261      	movs	r2, #97	; 0x61
 8009e46:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009e50:	b2da      	uxtb	r2, r3
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009e5e:	b29b      	uxth	r3, r3
 8009e60:	0a1b      	lsrs	r3, r3, #8
 8009e62:	b29b      	uxth	r3, r3
 8009e64:	b2da      	uxtb	r2, r3
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009e72:	0c1b      	lsrs	r3, r3, #16
 8009e74:	b2da      	uxtb	r2, r3
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009e82:	0e1b      	lsrs	r3, r3, #24
 8009e84:	b2da      	uxtb	r2, r3
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8009e92:	b2da      	uxtb	r2, r3
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8009ea0:	b29b      	uxth	r3, r3
 8009ea2:	0a1b      	lsrs	r3, r3, #8
 8009ea4:	b29b      	uxth	r3, r3
 8009ea6:	b2da      	uxtb	r2, r3
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8009eb4:	0c1b      	lsrs	r3, r3, #16
 8009eb6:	b2da      	uxtb	r2, r3
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8009ec4:	0e1b      	lsrs	r3, r3, #24
 8009ec6:	b2da      	uxtb	r2, r3
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8009ed4:	1c5a      	adds	r2, r3, #1
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8009ee2:	6879      	ldr	r1, [r7, #4]
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8009eea:	2301      	movs	r3, #1
 8009eec:	f7ff fc8c 	bl	8009808 <disk_write>
			fs->fsi_flag = 0;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8009efe:	2200      	movs	r2, #0
 8009f00:	2100      	movs	r1, #0
 8009f02:	4618      	mov	r0, r3
 8009f04:	f7ff fca0 	bl	8009848 <disk_ioctl>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d001      	beq.n	8009f12 <sync_fs+0x150>
			res = FR_DISK_ERR;
 8009f0e:	2301      	movs	r3, #1
 8009f10:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f14:	4618      	mov	r0, r3
 8009f16:	3710      	adds	r7, #16
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	bd80      	pop	{r7, pc}

08009f1c <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009f1c:	b480      	push	{r7}
 8009f1e:	b083      	sub	sp, #12
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
 8009f24:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	3b02      	subs	r3, #2
 8009f2a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009f32:	3b02      	subs	r3, #2
 8009f34:	683a      	ldr	r2, [r7, #0]
 8009f36:	429a      	cmp	r2, r3
 8009f38:	d301      	bcc.n	8009f3e <clust2sect+0x22>
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	e00a      	b.n	8009f54 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8009f44:	461a      	mov	r2, r3
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	fb03 f202 	mul.w	r2, r3, r2
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8009f52:	4413      	add	r3, r2
}
 8009f54:	4618      	mov	r0, r3
 8009f56:	370c      	adds	r7, #12
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bc80      	pop	{r7}
 8009f5c:	4770      	bx	lr

08009f5e <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8009f5e:	b580      	push	{r7, lr}
 8009f60:	b086      	sub	sp, #24
 8009f62:	af00      	add	r7, sp, #0
 8009f64:	6078      	str	r0, [r7, #4]
 8009f66:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	2b01      	cmp	r3, #1
 8009f6c:	d905      	bls.n	8009f7a <get_fat+0x1c>
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009f74:	683a      	ldr	r2, [r7, #0]
 8009f76:	429a      	cmp	r2, r3
 8009f78:	d302      	bcc.n	8009f80 <get_fat+0x22>
		val = 1;	/* Internal error */
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	617b      	str	r3, [r7, #20]
 8009f7e:	e0a0      	b.n	800a0c2 <get_fat+0x164>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009f80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009f84:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009f8c:	2b02      	cmp	r3, #2
 8009f8e:	d044      	beq.n	800a01a <get_fat+0xbc>
 8009f90:	2b03      	cmp	r3, #3
 8009f92:	d063      	beq.n	800a05c <get_fat+0xfe>
 8009f94:	2b01      	cmp	r3, #1
 8009f96:	f040 808a 	bne.w	800a0ae <get_fat+0x150>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	60fb      	str	r3, [r7, #12]
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	085b      	lsrs	r3, r3, #1
 8009fa2:	68fa      	ldr	r2, [r7, #12]
 8009fa4:	4413      	add	r3, r2
 8009fa6:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	0a5b      	lsrs	r3, r3, #9
 8009fb2:	4413      	add	r3, r2
 8009fb4:	4619      	mov	r1, r3
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	f7ff fed5 	bl	8009d66 <move_window>
 8009fbc:	4603      	mov	r3, r0
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d178      	bne.n	800a0b4 <get_fat+0x156>
			wc = fs->win.d8[bc++ % SS(fs)];
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	1c5a      	adds	r2, r3, #1
 8009fc6:	60fa      	str	r2, [r7, #12]
 8009fc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fcc:	687a      	ldr	r2, [r7, #4]
 8009fce:	5cd3      	ldrb	r3, [r2, r3]
 8009fd0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	0a5b      	lsrs	r3, r3, #9
 8009fdc:	4413      	add	r3, r2
 8009fde:	4619      	mov	r1, r3
 8009fe0:	6878      	ldr	r0, [r7, #4]
 8009fe2:	f7ff fec0 	bl	8009d66 <move_window>
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d165      	bne.n	800a0b8 <get_fat+0x15a>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ff2:	687a      	ldr	r2, [r7, #4]
 8009ff4:	5cd3      	ldrb	r3, [r2, r3]
 8009ff6:	021b      	lsls	r3, r3, #8
 8009ff8:	461a      	mov	r2, r3
 8009ffa:	68bb      	ldr	r3, [r7, #8]
 8009ffc:	4313      	orrs	r3, r2
 8009ffe:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	f003 0301 	and.w	r3, r3, #1
 800a006:	2b00      	cmp	r3, #0
 800a008:	d002      	beq.n	800a010 <get_fat+0xb2>
 800a00a:	68bb      	ldr	r3, [r7, #8]
 800a00c:	091b      	lsrs	r3, r3, #4
 800a00e:	e002      	b.n	800a016 <get_fat+0xb8>
 800a010:	68bb      	ldr	r3, [r7, #8]
 800a012:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a016:	617b      	str	r3, [r7, #20]
			break;
 800a018:	e053      	b.n	800a0c2 <get_fat+0x164>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	0a1b      	lsrs	r3, r3, #8
 800a024:	4413      	add	r3, r2
 800a026:	4619      	mov	r1, r3
 800a028:	6878      	ldr	r0, [r7, #4]
 800a02a:	f7ff fe9c 	bl	8009d66 <move_window>
 800a02e:	4603      	mov	r3, r0
 800a030:	2b00      	cmp	r3, #0
 800a032:	d143      	bne.n	800a0bc <get_fat+0x15e>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	005b      	lsls	r3, r3, #1
 800a038:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a03c:	687a      	ldr	r2, [r7, #4]
 800a03e:	4413      	add	r3, r2
 800a040:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 800a042:	693b      	ldr	r3, [r7, #16]
 800a044:	3301      	adds	r3, #1
 800a046:	781b      	ldrb	r3, [r3, #0]
 800a048:	021b      	lsls	r3, r3, #8
 800a04a:	b21a      	sxth	r2, r3
 800a04c:	693b      	ldr	r3, [r7, #16]
 800a04e:	781b      	ldrb	r3, [r3, #0]
 800a050:	b21b      	sxth	r3, r3
 800a052:	4313      	orrs	r3, r2
 800a054:	b21b      	sxth	r3, r3
 800a056:	b29b      	uxth	r3, r3
 800a058:	617b      	str	r3, [r7, #20]
			break;
 800a05a:	e032      	b.n	800a0c2 <get_fat+0x164>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	09db      	lsrs	r3, r3, #7
 800a066:	4413      	add	r3, r2
 800a068:	4619      	mov	r1, r3
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f7ff fe7b 	bl	8009d66 <move_window>
 800a070:	4603      	mov	r3, r0
 800a072:	2b00      	cmp	r3, #0
 800a074:	d124      	bne.n	800a0c0 <get_fat+0x162>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	009b      	lsls	r3, r3, #2
 800a07a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a07e:	687a      	ldr	r2, [r7, #4]
 800a080:	4413      	add	r3, r2
 800a082:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 800a084:	693b      	ldr	r3, [r7, #16]
 800a086:	3303      	adds	r3, #3
 800a088:	781b      	ldrb	r3, [r3, #0]
 800a08a:	061a      	lsls	r2, r3, #24
 800a08c:	693b      	ldr	r3, [r7, #16]
 800a08e:	3302      	adds	r3, #2
 800a090:	781b      	ldrb	r3, [r3, #0]
 800a092:	041b      	lsls	r3, r3, #16
 800a094:	4313      	orrs	r3, r2
 800a096:	693a      	ldr	r2, [r7, #16]
 800a098:	3201      	adds	r2, #1
 800a09a:	7812      	ldrb	r2, [r2, #0]
 800a09c:	0212      	lsls	r2, r2, #8
 800a09e:	4313      	orrs	r3, r2
 800a0a0:	693a      	ldr	r2, [r7, #16]
 800a0a2:	7812      	ldrb	r2, [r2, #0]
 800a0a4:	4313      	orrs	r3, r2
 800a0a6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a0aa:	617b      	str	r3, [r7, #20]
			break;
 800a0ac:	e009      	b.n	800a0c2 <get_fat+0x164>

		default:
			val = 1;	/* Internal error */
 800a0ae:	2301      	movs	r3, #1
 800a0b0:	617b      	str	r3, [r7, #20]
 800a0b2:	e006      	b.n	800a0c2 <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a0b4:	bf00      	nop
 800a0b6:	e004      	b.n	800a0c2 <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a0b8:	bf00      	nop
 800a0ba:	e002      	b.n	800a0c2 <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a0bc:	bf00      	nop
 800a0be:	e000      	b.n	800a0c2 <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a0c0:	bf00      	nop
		}
	}

	return val;
 800a0c2:	697b      	ldr	r3, [r7, #20]
}
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	3718      	adds	r7, #24
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd80      	pop	{r7, pc}

0800a0cc <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b088      	sub	sp, #32
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	60f8      	str	r0, [r7, #12]
 800a0d4:	60b9      	str	r1, [r7, #8]
 800a0d6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800a0d8:	68bb      	ldr	r3, [r7, #8]
 800a0da:	2b01      	cmp	r3, #1
 800a0dc:	d905      	bls.n	800a0ea <put_fat+0x1e>
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a0e4:	68ba      	ldr	r2, [r7, #8]
 800a0e6:	429a      	cmp	r2, r3
 800a0e8:	d302      	bcc.n	800a0f0 <put_fat+0x24>
		res = FR_INT_ERR;
 800a0ea:	2302      	movs	r3, #2
 800a0ec:	77fb      	strb	r3, [r7, #31]
 800a0ee:	e0f3      	b.n	800a2d8 <put_fat+0x20c>

	} else {
		switch (fs->fs_type) {
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a0f6:	2b02      	cmp	r3, #2
 800a0f8:	d074      	beq.n	800a1e4 <put_fat+0x118>
 800a0fa:	2b03      	cmp	r3, #3
 800a0fc:	f000 8099 	beq.w	800a232 <put_fat+0x166>
 800a100:	2b01      	cmp	r3, #1
 800a102:	f040 80df 	bne.w	800a2c4 <put_fat+0x1f8>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a106:	68bb      	ldr	r3, [r7, #8]
 800a108:	617b      	str	r3, [r7, #20]
 800a10a:	697b      	ldr	r3, [r7, #20]
 800a10c:	085b      	lsrs	r3, r3, #1
 800a10e:	697a      	ldr	r2, [r7, #20]
 800a110:	4413      	add	r3, r2
 800a112:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800a11a:	697b      	ldr	r3, [r7, #20]
 800a11c:	0a5b      	lsrs	r3, r3, #9
 800a11e:	4413      	add	r3, r2
 800a120:	4619      	mov	r1, r3
 800a122:	68f8      	ldr	r0, [r7, #12]
 800a124:	f7ff fe1f 	bl	8009d66 <move_window>
 800a128:	4603      	mov	r3, r0
 800a12a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a12c:	7ffb      	ldrb	r3, [r7, #31]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	f040 80cb 	bne.w	800a2ca <put_fat+0x1fe>
			p = &fs->win.d8[bc++ % SS(fs)];
 800a134:	697b      	ldr	r3, [r7, #20]
 800a136:	1c5a      	adds	r2, r3, #1
 800a138:	617a      	str	r2, [r7, #20]
 800a13a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a13e:	68fa      	ldr	r2, [r7, #12]
 800a140:	4413      	add	r3, r2
 800a142:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	f003 0301 	and.w	r3, r3, #1
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d00d      	beq.n	800a16a <put_fat+0x9e>
 800a14e:	69bb      	ldr	r3, [r7, #24]
 800a150:	781b      	ldrb	r3, [r3, #0]
 800a152:	b25b      	sxtb	r3, r3
 800a154:	f003 030f 	and.w	r3, r3, #15
 800a158:	b25a      	sxtb	r2, r3
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	b2db      	uxtb	r3, r3
 800a15e:	011b      	lsls	r3, r3, #4
 800a160:	b25b      	sxtb	r3, r3
 800a162:	4313      	orrs	r3, r2
 800a164:	b25b      	sxtb	r3, r3
 800a166:	b2db      	uxtb	r3, r3
 800a168:	e001      	b.n	800a16e <put_fat+0xa2>
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	b2db      	uxtb	r3, r3
 800a16e:	69ba      	ldr	r2, [r7, #24]
 800a170:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	2201      	movs	r2, #1
 800a176:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800a180:	697b      	ldr	r3, [r7, #20]
 800a182:	0a5b      	lsrs	r3, r3, #9
 800a184:	4413      	add	r3, r2
 800a186:	4619      	mov	r1, r3
 800a188:	68f8      	ldr	r0, [r7, #12]
 800a18a:	f7ff fdec 	bl	8009d66 <move_window>
 800a18e:	4603      	mov	r3, r0
 800a190:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a192:	7ffb      	ldrb	r3, [r7, #31]
 800a194:	2b00      	cmp	r3, #0
 800a196:	f040 809a 	bne.w	800a2ce <put_fat+0x202>
			p = &fs->win.d8[bc % SS(fs)];
 800a19a:	697b      	ldr	r3, [r7, #20]
 800a19c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1a0:	68fa      	ldr	r2, [r7, #12]
 800a1a2:	4413      	add	r3, r2
 800a1a4:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a1a6:	68bb      	ldr	r3, [r7, #8]
 800a1a8:	f003 0301 	and.w	r3, r3, #1
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d003      	beq.n	800a1b8 <put_fat+0xec>
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	091b      	lsrs	r3, r3, #4
 800a1b4:	b2db      	uxtb	r3, r3
 800a1b6:	e00e      	b.n	800a1d6 <put_fat+0x10a>
 800a1b8:	69bb      	ldr	r3, [r7, #24]
 800a1ba:	781b      	ldrb	r3, [r3, #0]
 800a1bc:	b25b      	sxtb	r3, r3
 800a1be:	f023 030f 	bic.w	r3, r3, #15
 800a1c2:	b25a      	sxtb	r2, r3
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	0a1b      	lsrs	r3, r3, #8
 800a1c8:	b25b      	sxtb	r3, r3
 800a1ca:	f003 030f 	and.w	r3, r3, #15
 800a1ce:	b25b      	sxtb	r3, r3
 800a1d0:	4313      	orrs	r3, r2
 800a1d2:	b25b      	sxtb	r3, r3
 800a1d4:	b2db      	uxtb	r3, r3
 800a1d6:	69ba      	ldr	r2, [r7, #24]
 800a1d8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	2201      	movs	r2, #1
 800a1de:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800a1e2:	e079      	b.n	800a2d8 <put_fat+0x20c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	0a1b      	lsrs	r3, r3, #8
 800a1ee:	4413      	add	r3, r2
 800a1f0:	4619      	mov	r1, r3
 800a1f2:	68f8      	ldr	r0, [r7, #12]
 800a1f4:	f7ff fdb7 	bl	8009d66 <move_window>
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a1fc:	7ffb      	ldrb	r3, [r7, #31]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d167      	bne.n	800a2d2 <put_fat+0x206>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800a202:	68bb      	ldr	r3, [r7, #8]
 800a204:	005b      	lsls	r3, r3, #1
 800a206:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a20a:	68fa      	ldr	r2, [r7, #12]
 800a20c:	4413      	add	r3, r2
 800a20e:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	b2da      	uxtb	r2, r3
 800a214:	69bb      	ldr	r3, [r7, #24]
 800a216:	701a      	strb	r2, [r3, #0]
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	b29b      	uxth	r3, r3
 800a21c:	0a1b      	lsrs	r3, r3, #8
 800a21e:	b29a      	uxth	r2, r3
 800a220:	69bb      	ldr	r3, [r7, #24]
 800a222:	3301      	adds	r3, #1
 800a224:	b2d2      	uxtb	r2, r2
 800a226:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	2201      	movs	r2, #1
 800a22c:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800a230:	e052      	b.n	800a2d8 <put_fat+0x20c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800a238:	68bb      	ldr	r3, [r7, #8]
 800a23a:	09db      	lsrs	r3, r3, #7
 800a23c:	4413      	add	r3, r2
 800a23e:	4619      	mov	r1, r3
 800a240:	68f8      	ldr	r0, [r7, #12]
 800a242:	f7ff fd90 	bl	8009d66 <move_window>
 800a246:	4603      	mov	r3, r0
 800a248:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a24a:	7ffb      	ldrb	r3, [r7, #31]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d142      	bne.n	800a2d6 <put_fat+0x20a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	009b      	lsls	r3, r3, #2
 800a254:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a258:	68fa      	ldr	r2, [r7, #12]
 800a25a:	4413      	add	r3, r2
 800a25c:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800a25e:	69bb      	ldr	r3, [r7, #24]
 800a260:	3303      	adds	r3, #3
 800a262:	781b      	ldrb	r3, [r3, #0]
 800a264:	061a      	lsls	r2, r3, #24
 800a266:	69bb      	ldr	r3, [r7, #24]
 800a268:	3302      	adds	r3, #2
 800a26a:	781b      	ldrb	r3, [r3, #0]
 800a26c:	041b      	lsls	r3, r3, #16
 800a26e:	4313      	orrs	r3, r2
 800a270:	69ba      	ldr	r2, [r7, #24]
 800a272:	3201      	adds	r2, #1
 800a274:	7812      	ldrb	r2, [r2, #0]
 800a276:	0212      	lsls	r2, r2, #8
 800a278:	4313      	orrs	r3, r2
 800a27a:	69ba      	ldr	r2, [r7, #24]
 800a27c:	7812      	ldrb	r2, [r2, #0]
 800a27e:	4313      	orrs	r3, r2
 800a280:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a284:	687a      	ldr	r2, [r7, #4]
 800a286:	4313      	orrs	r3, r2
 800a288:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	b2da      	uxtb	r2, r3
 800a28e:	69bb      	ldr	r3, [r7, #24]
 800a290:	701a      	strb	r2, [r3, #0]
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	b29b      	uxth	r3, r3
 800a296:	0a1b      	lsrs	r3, r3, #8
 800a298:	b29a      	uxth	r2, r3
 800a29a:	69bb      	ldr	r3, [r7, #24]
 800a29c:	3301      	adds	r3, #1
 800a29e:	b2d2      	uxtb	r2, r2
 800a2a0:	701a      	strb	r2, [r3, #0]
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	0c1a      	lsrs	r2, r3, #16
 800a2a6:	69bb      	ldr	r3, [r7, #24]
 800a2a8:	3302      	adds	r3, #2
 800a2aa:	b2d2      	uxtb	r2, r2
 800a2ac:	701a      	strb	r2, [r3, #0]
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	0e1a      	lsrs	r2, r3, #24
 800a2b2:	69bb      	ldr	r3, [r7, #24]
 800a2b4:	3303      	adds	r3, #3
 800a2b6:	b2d2      	uxtb	r2, r2
 800a2b8:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	2201      	movs	r2, #1
 800a2be:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800a2c2:	e009      	b.n	800a2d8 <put_fat+0x20c>

		default :
			res = FR_INT_ERR;
 800a2c4:	2302      	movs	r3, #2
 800a2c6:	77fb      	strb	r3, [r7, #31]
 800a2c8:	e006      	b.n	800a2d8 <put_fat+0x20c>
			if (res != FR_OK) break;
 800a2ca:	bf00      	nop
 800a2cc:	e004      	b.n	800a2d8 <put_fat+0x20c>
			if (res != FR_OK) break;
 800a2ce:	bf00      	nop
 800a2d0:	e002      	b.n	800a2d8 <put_fat+0x20c>
			if (res != FR_OK) break;
 800a2d2:	bf00      	nop
 800a2d4:	e000      	b.n	800a2d8 <put_fat+0x20c>
			if (res != FR_OK) break;
 800a2d6:	bf00      	nop
		}
	}

	return res;
 800a2d8:	7ffb      	ldrb	r3, [r7, #31]
}
 800a2da:	4618      	mov	r0, r3
 800a2dc:	3720      	adds	r7, #32
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	bd80      	pop	{r7, pc}

0800a2e2 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 800a2e2:	b580      	push	{r7, lr}
 800a2e4:	b084      	sub	sp, #16
 800a2e6:	af00      	add	r7, sp, #0
 800a2e8:	6078      	str	r0, [r7, #4]
 800a2ea:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	2b01      	cmp	r3, #1
 800a2f0:	d905      	bls.n	800a2fe <remove_chain+0x1c>
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a2f8:	683a      	ldr	r2, [r7, #0]
 800a2fa:	429a      	cmp	r2, r3
 800a2fc:	d302      	bcc.n	800a304 <remove_chain+0x22>
		res = FR_INT_ERR;
 800a2fe:	2302      	movs	r3, #2
 800a300:	73fb      	strb	r3, [r7, #15]
 800a302:	e043      	b.n	800a38c <remove_chain+0xaa>

	} else {
		res = FR_OK;
 800a304:	2300      	movs	r3, #0
 800a306:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800a308:	e036      	b.n	800a378 <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800a30a:	6839      	ldr	r1, [r7, #0]
 800a30c:	6878      	ldr	r0, [r7, #4]
 800a30e:	f7ff fe26 	bl	8009f5e <get_fat>
 800a312:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d035      	beq.n	800a386 <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800a31a:	68bb      	ldr	r3, [r7, #8]
 800a31c:	2b01      	cmp	r3, #1
 800a31e:	d102      	bne.n	800a326 <remove_chain+0x44>
 800a320:	2302      	movs	r3, #2
 800a322:	73fb      	strb	r3, [r7, #15]
 800a324:	e032      	b.n	800a38c <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800a326:	68bb      	ldr	r3, [r7, #8]
 800a328:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a32c:	d102      	bne.n	800a334 <remove_chain+0x52>
 800a32e:	2301      	movs	r3, #1
 800a330:	73fb      	strb	r3, [r7, #15]
 800a332:	e02b      	b.n	800a38c <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800a334:	2200      	movs	r2, #0
 800a336:	6839      	ldr	r1, [r7, #0]
 800a338:	6878      	ldr	r0, [r7, #4]
 800a33a:	f7ff fec7 	bl	800a0cc <put_fat>
 800a33e:	4603      	mov	r3, r0
 800a340:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800a342:	7bfb      	ldrb	r3, [r7, #15]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d120      	bne.n	800a38a <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a34e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a352:	d00f      	beq.n	800a374 <remove_chain+0x92>
				fs->free_clust++;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a35a:	1c5a      	adds	r2, r3, #1
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				fs->fsi_flag |= 1;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800a368:	f043 0301 	orr.w	r3, r3, #1
 800a36c:	b2da      	uxtb	r2, r3
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 800a374:	68bb      	ldr	r3, [r7, #8]
 800a376:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a37e:	683a      	ldr	r2, [r7, #0]
 800a380:	429a      	cmp	r2, r3
 800a382:	d3c2      	bcc.n	800a30a <remove_chain+0x28>
 800a384:	e002      	b.n	800a38c <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 800a386:	bf00      	nop
 800a388:	e000      	b.n	800a38c <remove_chain+0xaa>
			if (res != FR_OK) break;
 800a38a:	bf00      	nop
		}
	}

	return res;
 800a38c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a38e:	4618      	mov	r0, r3
 800a390:	3710      	adds	r7, #16
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}

0800a396 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 800a396:	b580      	push	{r7, lr}
 800a398:	b086      	sub	sp, #24
 800a39a:	af00      	add	r7, sp, #0
 800a39c:	6078      	str	r0, [r7, #4]
 800a39e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d10f      	bne.n	800a3c6 <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800a3ac:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800a3ae:	693b      	ldr	r3, [r7, #16]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d005      	beq.n	800a3c0 <create_chain+0x2a>
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a3ba:	693a      	ldr	r2, [r7, #16]
 800a3bc:	429a      	cmp	r2, r3
 800a3be:	d31c      	bcc.n	800a3fa <create_chain+0x64>
 800a3c0:	2301      	movs	r3, #1
 800a3c2:	613b      	str	r3, [r7, #16]
 800a3c4:	e019      	b.n	800a3fa <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800a3c6:	6839      	ldr	r1, [r7, #0]
 800a3c8:	6878      	ldr	r0, [r7, #4]
 800a3ca:	f7ff fdc8 	bl	8009f5e <get_fat>
 800a3ce:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	2b01      	cmp	r3, #1
 800a3d4:	d801      	bhi.n	800a3da <create_chain+0x44>
 800a3d6:	2301      	movs	r3, #1
 800a3d8:	e076      	b.n	800a4c8 <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a3e0:	d101      	bne.n	800a3e6 <create_chain+0x50>
 800a3e2:	68bb      	ldr	r3, [r7, #8]
 800a3e4:	e070      	b.n	800a4c8 <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a3ec:	68ba      	ldr	r2, [r7, #8]
 800a3ee:	429a      	cmp	r2, r3
 800a3f0:	d201      	bcs.n	800a3f6 <create_chain+0x60>
 800a3f2:	68bb      	ldr	r3, [r7, #8]
 800a3f4:	e068      	b.n	800a4c8 <create_chain+0x132>
		scl = clst;
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 800a3fa:	693b      	ldr	r3, [r7, #16]
 800a3fc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800a3fe:	697b      	ldr	r3, [r7, #20]
 800a400:	3301      	adds	r3, #1
 800a402:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a40a:	697a      	ldr	r2, [r7, #20]
 800a40c:	429a      	cmp	r2, r3
 800a40e:	d307      	bcc.n	800a420 <create_chain+0x8a>
			ncl = 2;
 800a410:	2302      	movs	r3, #2
 800a412:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 800a414:	697a      	ldr	r2, [r7, #20]
 800a416:	693b      	ldr	r3, [r7, #16]
 800a418:	429a      	cmp	r2, r3
 800a41a:	d901      	bls.n	800a420 <create_chain+0x8a>
 800a41c:	2300      	movs	r3, #0
 800a41e:	e053      	b.n	800a4c8 <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800a420:	6979      	ldr	r1, [r7, #20]
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	f7ff fd9b 	bl	8009f5e <get_fat>
 800a428:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800a42a:	68bb      	ldr	r3, [r7, #8]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d00e      	beq.n	800a44e <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800a430:	68bb      	ldr	r3, [r7, #8]
 800a432:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a436:	d002      	beq.n	800a43e <create_chain+0xa8>
 800a438:	68bb      	ldr	r3, [r7, #8]
 800a43a:	2b01      	cmp	r3, #1
 800a43c:	d101      	bne.n	800a442 <create_chain+0xac>
			return cs;
 800a43e:	68bb      	ldr	r3, [r7, #8]
 800a440:	e042      	b.n	800a4c8 <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 800a442:	697a      	ldr	r2, [r7, #20]
 800a444:	693b      	ldr	r3, [r7, #16]
 800a446:	429a      	cmp	r2, r3
 800a448:	d1d9      	bne.n	800a3fe <create_chain+0x68>
 800a44a:	2300      	movs	r3, #0
 800a44c:	e03c      	b.n	800a4c8 <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 800a44e:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800a450:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800a454:	6979      	ldr	r1, [r7, #20]
 800a456:	6878      	ldr	r0, [r7, #4]
 800a458:	f7ff fe38 	bl	800a0cc <put_fat>
 800a45c:	4603      	mov	r3, r0
 800a45e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 800a460:	7bfb      	ldrb	r3, [r7, #15]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d109      	bne.n	800a47a <create_chain+0xe4>
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d006      	beq.n	800a47a <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800a46c:	697a      	ldr	r2, [r7, #20]
 800a46e:	6839      	ldr	r1, [r7, #0]
 800a470:	6878      	ldr	r0, [r7, #4]
 800a472:	f7ff fe2b 	bl	800a0cc <put_fat>
 800a476:	4603      	mov	r3, r0
 800a478:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800a47a:	7bfb      	ldrb	r3, [r7, #15]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d11a      	bne.n	800a4b6 <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	697a      	ldr	r2, [r7, #20]
 800a484:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a48e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a492:	d018      	beq.n	800a4c6 <create_chain+0x130>
			fs->free_clust--;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a49a:	1e5a      	subs	r2, r3, #1
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800a4a8:	f043 0301 	orr.w	r3, r3, #1
 800a4ac:	b2da      	uxtb	r2, r3
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 800a4b4:	e007      	b.n	800a4c6 <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800a4b6:	7bfb      	ldrb	r3, [r7, #15]
 800a4b8:	2b01      	cmp	r3, #1
 800a4ba:	d102      	bne.n	800a4c2 <create_chain+0x12c>
 800a4bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a4c0:	e000      	b.n	800a4c4 <create_chain+0x12e>
 800a4c2:	2301      	movs	r3, #1
 800a4c4:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 800a4c6:	697b      	ldr	r3, [r7, #20]
}
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	3718      	adds	r7, #24
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	bd80      	pop	{r7, pc}

0800a4d0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 800a4d0:	b480      	push	{r7}
 800a4d2:	b087      	sub	sp, #28
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
 800a4d8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800a4e0:	3304      	adds	r3, #4
 800a4e2:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	0a5b      	lsrs	r3, r3, #9
 800a4e8:	687a      	ldr	r2, [r7, #4]
 800a4ea:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800a4ee:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800a4f2:	fbb3 f3f2 	udiv	r3, r3, r2
 800a4f6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a4f8:	693b      	ldr	r3, [r7, #16]
 800a4fa:	1d1a      	adds	r2, r3, #4
 800a4fc:	613a      	str	r2, [r7, #16]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d101      	bne.n	800a50c <clmt_clust+0x3c>
 800a508:	2300      	movs	r3, #0
 800a50a:	e010      	b.n	800a52e <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 800a50c:	697a      	ldr	r2, [r7, #20]
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	429a      	cmp	r2, r3
 800a512:	d307      	bcc.n	800a524 <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 800a514:	697a      	ldr	r2, [r7, #20]
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	1ad3      	subs	r3, r2, r3
 800a51a:	617b      	str	r3, [r7, #20]
 800a51c:	693b      	ldr	r3, [r7, #16]
 800a51e:	3304      	adds	r3, #4
 800a520:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a522:	e7e9      	b.n	800a4f8 <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 800a524:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a526:	693b      	ldr	r3, [r7, #16]
 800a528:	681a      	ldr	r2, [r3, #0]
 800a52a:	697b      	ldr	r3, [r7, #20]
 800a52c:	4413      	add	r3, r2
}
 800a52e:	4618      	mov	r0, r3
 800a530:	371c      	adds	r7, #28
 800a532:	46bd      	mov	sp, r7
 800a534:	bc80      	pop	{r7}
 800a536:	4770      	bx	lr

0800a538 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b086      	sub	sp, #24
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
 800a540:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	b29a      	uxth	r2, r3
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800a552:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800a554:	697b      	ldr	r3, [r7, #20]
 800a556:	2b01      	cmp	r3, #1
 800a558:	d007      	beq.n	800a56a <dir_sdi+0x32>
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a560:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a564:	697a      	ldr	r2, [r7, #20]
 800a566:	429a      	cmp	r2, r3
 800a568:	d301      	bcc.n	800a56e <dir_sdi+0x36>
		return FR_INT_ERR;
 800a56a:	2302      	movs	r3, #2
 800a56c:	e074      	b.n	800a658 <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800a56e:	697b      	ldr	r3, [r7, #20]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d10c      	bne.n	800a58e <dir_sdi+0x56>
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a57a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a57e:	2b03      	cmp	r3, #3
 800a580:	d105      	bne.n	800a58e <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a588:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800a58c:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a58e:	697b      	ldr	r3, [r7, #20]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d111      	bne.n	800a5b8 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a59a:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800a59e:	461a      	mov	r2, r3
 800a5a0:	683b      	ldr	r3, [r7, #0]
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	d301      	bcc.n	800a5aa <dir_sdi+0x72>
			return FR_INT_ERR;
 800a5a6:	2302      	movs	r3, #2
 800a5a8:	e056      	b.n	800a658 <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a5b0:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800a5b4:	613b      	str	r3, [r7, #16]
 800a5b6:	e032      	b.n	800a61e <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a5be:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800a5c2:	011b      	lsls	r3, r3, #4
 800a5c4:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800a5c6:	e01e      	b.n	800a606 <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a5ce:	6979      	ldr	r1, [r7, #20]
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	f7ff fcc4 	bl	8009f5e <get_fat>
 800a5d6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a5d8:	697b      	ldr	r3, [r7, #20]
 800a5da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a5de:	d101      	bne.n	800a5e4 <dir_sdi+0xac>
 800a5e0:	2301      	movs	r3, #1
 800a5e2:	e039      	b.n	800a658 <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800a5e4:	697b      	ldr	r3, [r7, #20]
 800a5e6:	2b01      	cmp	r3, #1
 800a5e8:	d907      	bls.n	800a5fa <dir_sdi+0xc2>
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a5f0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a5f4:	697a      	ldr	r2, [r7, #20]
 800a5f6:	429a      	cmp	r2, r3
 800a5f8:	d301      	bcc.n	800a5fe <dir_sdi+0xc6>
				return FR_INT_ERR;
 800a5fa:	2302      	movs	r3, #2
 800a5fc:	e02c      	b.n	800a658 <dir_sdi+0x120>
			idx -= ic;
 800a5fe:	683a      	ldr	r2, [r7, #0]
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	1ad3      	subs	r3, r2, r3
 800a604:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 800a606:	683a      	ldr	r2, [r7, #0]
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	429a      	cmp	r2, r3
 800a60c:	d2dc      	bcs.n	800a5c8 <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a614:	6979      	ldr	r1, [r7, #20]
 800a616:	4618      	mov	r0, r3
 800a618:	f7ff fc80 	bl	8009f1c <clust2sect>
 800a61c:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	697a      	ldr	r2, [r7, #20]
 800a622:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 800a626:	693b      	ldr	r3, [r7, #16]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d101      	bne.n	800a630 <dir_sdi+0xf8>
 800a62c:	2302      	movs	r3, #2
 800a62e:	e013      	b.n	800a658 <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	091a      	lsrs	r2, r3, #4
 800a634:	693b      	ldr	r3, [r7, #16]
 800a636:	441a      	add	r2, r3
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a644:	461a      	mov	r2, r3
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	f003 030f 	and.w	r3, r3, #15
 800a64c:	015b      	lsls	r3, r3, #5
 800a64e:	441a      	add	r2, r3
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 800a656:	2300      	movs	r3, #0
}
 800a658:	4618      	mov	r0, r3
 800a65a:	3718      	adds	r7, #24
 800a65c:	46bd      	mov	sp, r7
 800a65e:	bd80      	pop	{r7, pc}

0800a660 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a660:	b590      	push	{r4, r7, lr}
 800a662:	b087      	sub	sp, #28
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
 800a668:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 800a670:	3301      	adds	r3, #1
 800a672:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	b29b      	uxth	r3, r3
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d004      	beq.n	800a686 <dir_next+0x26>
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a682:	2b00      	cmp	r3, #0
 800a684:	d101      	bne.n	800a68a <dir_next+0x2a>
		return FR_NO_FILE;
 800a686:	2304      	movs	r3, #4
 800a688:	e0dd      	b.n	800a846 <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	f003 030f 	and.w	r3, r3, #15
 800a690:	2b00      	cmp	r3, #0
 800a692:	f040 80c6 	bne.w	800a822 <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a69c:	1c5a      	adds	r2, r3, #1
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d10b      	bne.n	800a6c6 <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a6b4:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800a6b8:	461a      	mov	r2, r3
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	4293      	cmp	r3, r2
 800a6be:	f0c0 80b0 	bcc.w	800a822 <dir_next+0x1c2>
				return FR_NO_FILE;
 800a6c2:	2304      	movs	r3, #4
 800a6c4:	e0bf      	b.n	800a846 <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	091b      	lsrs	r3, r3, #4
 800a6ca:	687a      	ldr	r2, [r7, #4]
 800a6cc:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800a6d0:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800a6d4:	3a01      	subs	r2, #1
 800a6d6:	4013      	ands	r3, r2
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	f040 80a2 	bne.w	800a822 <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800a6ea:	4619      	mov	r1, r3
 800a6ec:	4610      	mov	r0, r2
 800a6ee:	f7ff fc36 	bl	8009f5e <get_fat>
 800a6f2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 800a6f4:	697b      	ldr	r3, [r7, #20]
 800a6f6:	2b01      	cmp	r3, #1
 800a6f8:	d801      	bhi.n	800a6fe <dir_next+0x9e>
 800a6fa:	2302      	movs	r3, #2
 800a6fc:	e0a3      	b.n	800a846 <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800a6fe:	697b      	ldr	r3, [r7, #20]
 800a700:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a704:	d101      	bne.n	800a70a <dir_next+0xaa>
 800a706:	2301      	movs	r3, #1
 800a708:	e09d      	b.n	800a846 <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a710:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a714:	697a      	ldr	r2, [r7, #20]
 800a716:	429a      	cmp	r2, r3
 800a718:	d374      	bcc.n	800a804 <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d101      	bne.n	800a724 <dir_next+0xc4>
 800a720:	2304      	movs	r3, #4
 800a722:	e090      	b.n	800a846 <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800a730:	4619      	mov	r1, r3
 800a732:	4610      	mov	r0, r2
 800a734:	f7ff fe2f 	bl	800a396 <create_chain>
 800a738:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a73a:	697b      	ldr	r3, [r7, #20]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d101      	bne.n	800a744 <dir_next+0xe4>
 800a740:	2307      	movs	r3, #7
 800a742:	e080      	b.n	800a846 <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 800a744:	697b      	ldr	r3, [r7, #20]
 800a746:	2b01      	cmp	r3, #1
 800a748:	d101      	bne.n	800a74e <dir_next+0xee>
 800a74a:	2302      	movs	r3, #2
 800a74c:	e07b      	b.n	800a846 <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800a74e:	697b      	ldr	r3, [r7, #20]
 800a750:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a754:	d101      	bne.n	800a75a <dir_next+0xfa>
 800a756:	2301      	movs	r3, #1
 800a758:	e075      	b.n	800a846 <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a760:	4618      	mov	r0, r3
 800a762:	f7ff fab7 	bl	8009cd4 <sync_window>
 800a766:	4603      	mov	r3, r0
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d001      	beq.n	800a770 <dir_next+0x110>
 800a76c:	2301      	movs	r3, #1
 800a76e:	e06a      	b.n	800a846 <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a776:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a77a:	2100      	movs	r1, #0
 800a77c:	4618      	mov	r0, r3
 800a77e:	f7ff f89e 	bl	80098be <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 800a78e:	6979      	ldr	r1, [r7, #20]
 800a790:	4610      	mov	r0, r2
 800a792:	f7ff fbc3 	bl	8009f1c <clust2sect>
 800a796:	4603      	mov	r3, r0
 800a798:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800a79c:	2300      	movs	r3, #0
 800a79e:	613b      	str	r3, [r7, #16]
 800a7a0:	e01b      	b.n	800a7da <dir_next+0x17a>
						dp->fs->wflag = 1;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a7a8:	2201      	movs	r2, #1
 800a7aa:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	f7ff fa8d 	bl	8009cd4 <sync_window>
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d001      	beq.n	800a7c4 <dir_next+0x164>
 800a7c0:	2301      	movs	r3, #1
 800a7c2:	e040      	b.n	800a846 <dir_next+0x1e6>
						dp->fs->winsect++;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a7ca:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 800a7ce:	3201      	adds	r2, #1
 800a7d0:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800a7d4:	693b      	ldr	r3, [r7, #16]
 800a7d6:	3301      	adds	r3, #1
 800a7d8:	613b      	str	r3, [r7, #16]
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a7e0:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800a7e4:	461a      	mov	r2, r3
 800a7e6:	693b      	ldr	r3, [r7, #16]
 800a7e8:	4293      	cmp	r3, r2
 800a7ea:	d3da      	bcc.n	800a7a2 <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a7f2:	f8d3 122c 	ldr.w	r1, [r3, #556]	; 0x22c
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a7fc:	693a      	ldr	r2, [r7, #16]
 800a7fe:	1a8a      	subs	r2, r1, r2
 800a800:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	697a      	ldr	r2, [r7, #20]
 800a808:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a812:	6979      	ldr	r1, [r7, #20]
 800a814:	4618      	mov	r0, r3
 800a816:	f7ff fb81 	bl	8009f1c <clust2sect>
 800a81a:	4602      	mov	r2, r0
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	b29a      	uxth	r2, r3
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a832:	461a      	mov	r2, r3
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	f003 030f 	and.w	r3, r3, #15
 800a83a:	015b      	lsls	r3, r3, #5
 800a83c:	441a      	add	r2, r3
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 800a844:	2300      	movs	r3, #0
}
 800a846:	4618      	mov	r0, r3
 800a848:	371c      	adds	r7, #28
 800a84a:	46bd      	mov	sp, r7
 800a84c:	bd90      	pop	{r4, r7, pc}

0800a84e <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800a84e:	b580      	push	{r7, lr}
 800a850:	b084      	sub	sp, #16
 800a852:	af00      	add	r7, sp, #0
 800a854:	6078      	str	r0, [r7, #4]
 800a856:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800a858:	2100      	movs	r1, #0
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	f7ff fe6c 	bl	800a538 <dir_sdi>
 800a860:	4603      	mov	r3, r0
 800a862:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a864:	7bfb      	ldrb	r3, [r7, #15]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d131      	bne.n	800a8ce <dir_alloc+0x80>
		n = 0;
 800a86a:	2300      	movs	r3, #0
 800a86c:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a87a:	4619      	mov	r1, r3
 800a87c:	4610      	mov	r0, r2
 800a87e:	f7ff fa72 	bl	8009d66 <move_window>
 800a882:	4603      	mov	r3, r0
 800a884:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800a886:	7bfb      	ldrb	r3, [r7, #15]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d11f      	bne.n	800a8cc <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a892:	781b      	ldrb	r3, [r3, #0]
 800a894:	2be5      	cmp	r3, #229	; 0xe5
 800a896:	d005      	beq.n	800a8a4 <dir_alloc+0x56>
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a89e:	781b      	ldrb	r3, [r3, #0]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d107      	bne.n	800a8b4 <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a8a4:	68bb      	ldr	r3, [r7, #8]
 800a8a6:	3301      	adds	r3, #1
 800a8a8:	60bb      	str	r3, [r7, #8]
 800a8aa:	68ba      	ldr	r2, [r7, #8]
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	429a      	cmp	r2, r3
 800a8b0:	d102      	bne.n	800a8b8 <dir_alloc+0x6a>
 800a8b2:	e00c      	b.n	800a8ce <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800a8b8:	2101      	movs	r1, #1
 800a8ba:	6878      	ldr	r0, [r7, #4]
 800a8bc:	f7ff fed0 	bl	800a660 <dir_next>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 800a8c4:	7bfb      	ldrb	r3, [r7, #15]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d0d1      	beq.n	800a86e <dir_alloc+0x20>
 800a8ca:	e000      	b.n	800a8ce <dir_alloc+0x80>
			if (res != FR_OK) break;
 800a8cc:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a8ce:	7bfb      	ldrb	r3, [r7, #15]
 800a8d0:	2b04      	cmp	r3, #4
 800a8d2:	d101      	bne.n	800a8d8 <dir_alloc+0x8a>
 800a8d4:	2307      	movs	r3, #7
 800a8d6:	73fb      	strb	r3, [r7, #15]
	return res;
 800a8d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	3710      	adds	r7, #16
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bd80      	pop	{r7, pc}

0800a8e2 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 800a8e2:	b480      	push	{r7}
 800a8e4:	b085      	sub	sp, #20
 800a8e6:	af00      	add	r7, sp, #0
 800a8e8:	6078      	str	r0, [r7, #4]
 800a8ea:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	331b      	adds	r3, #27
 800a8f0:	781b      	ldrb	r3, [r3, #0]
 800a8f2:	021b      	lsls	r3, r3, #8
 800a8f4:	b21a      	sxth	r2, r3
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	331a      	adds	r3, #26
 800a8fa:	781b      	ldrb	r3, [r3, #0]
 800a8fc:	b21b      	sxth	r3, r3
 800a8fe:	4313      	orrs	r3, r2
 800a900:	b21b      	sxth	r3, r3
 800a902:	b29b      	uxth	r3, r3
 800a904:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a90c:	2b03      	cmp	r3, #3
 800a90e:	d10f      	bne.n	800a930 <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	3315      	adds	r3, #21
 800a914:	781b      	ldrb	r3, [r3, #0]
 800a916:	021b      	lsls	r3, r3, #8
 800a918:	b21a      	sxth	r2, r3
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	3314      	adds	r3, #20
 800a91e:	781b      	ldrb	r3, [r3, #0]
 800a920:	b21b      	sxth	r3, r3
 800a922:	4313      	orrs	r3, r2
 800a924:	b21b      	sxth	r3, r3
 800a926:	b29b      	uxth	r3, r3
 800a928:	041b      	lsls	r3, r3, #16
 800a92a:	68fa      	ldr	r2, [r7, #12]
 800a92c:	4313      	orrs	r3, r2
 800a92e:	60fb      	str	r3, [r7, #12]

	return cl;
 800a930:	68fb      	ldr	r3, [r7, #12]
}
 800a932:	4618      	mov	r0, r3
 800a934:	3714      	adds	r7, #20
 800a936:	46bd      	mov	sp, r7
 800a938:	bc80      	pop	{r7}
 800a93a:	4770      	bx	lr

0800a93c <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800a93c:	b480      	push	{r7}
 800a93e:	b083      	sub	sp, #12
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
 800a944:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	331a      	adds	r3, #26
 800a94a:	683a      	ldr	r2, [r7, #0]
 800a94c:	b2d2      	uxtb	r2, r2
 800a94e:	701a      	strb	r2, [r3, #0]
 800a950:	683b      	ldr	r3, [r7, #0]
 800a952:	b29b      	uxth	r3, r3
 800a954:	0a1b      	lsrs	r3, r3, #8
 800a956:	b29a      	uxth	r2, r3
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	331b      	adds	r3, #27
 800a95c:	b2d2      	uxtb	r2, r2
 800a95e:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	0c1a      	lsrs	r2, r3, #16
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	3314      	adds	r3, #20
 800a968:	b2d2      	uxtb	r2, r2
 800a96a:	701a      	strb	r2, [r3, #0]
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	0c1b      	lsrs	r3, r3, #16
 800a970:	b29b      	uxth	r3, r3
 800a972:	0a1b      	lsrs	r3, r3, #8
 800a974:	b29a      	uxth	r2, r3
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	3315      	adds	r3, #21
 800a97a:	b2d2      	uxtb	r2, r2
 800a97c:	701a      	strb	r2, [r3, #0]
}
 800a97e:	bf00      	nop
 800a980:	370c      	adds	r7, #12
 800a982:	46bd      	mov	sp, r7
 800a984:	bc80      	pop	{r7}
 800a986:	4770      	bx	lr

0800a988 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b086      	sub	sp, #24
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
 800a990:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	781b      	ldrb	r3, [r3, #0]
 800a996:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a99a:	1e5a      	subs	r2, r3, #1
 800a99c:	4613      	mov	r3, r2
 800a99e:	005b      	lsls	r3, r3, #1
 800a9a0:	4413      	add	r3, r2
 800a9a2:	009b      	lsls	r3, r3, #2
 800a9a4:	4413      	add	r3, r2
 800a9a6:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	613b      	str	r3, [r7, #16]
 800a9ac:	2301      	movs	r3, #1
 800a9ae:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 800a9b0:	4a2b      	ldr	r2, [pc, #172]	; (800aa60 <cmp_lfn+0xd8>)
 800a9b2:	693b      	ldr	r3, [r7, #16]
 800a9b4:	4413      	add	r3, r2
 800a9b6:	781b      	ldrb	r3, [r3, #0]
 800a9b8:	3301      	adds	r3, #1
 800a9ba:	683a      	ldr	r2, [r7, #0]
 800a9bc:	4413      	add	r3, r2
 800a9be:	781b      	ldrb	r3, [r3, #0]
 800a9c0:	021b      	lsls	r3, r3, #8
 800a9c2:	b21a      	sxth	r2, r3
 800a9c4:	4926      	ldr	r1, [pc, #152]	; (800aa60 <cmp_lfn+0xd8>)
 800a9c6:	693b      	ldr	r3, [r7, #16]
 800a9c8:	440b      	add	r3, r1
 800a9ca:	781b      	ldrb	r3, [r3, #0]
 800a9cc:	4619      	mov	r1, r3
 800a9ce:	683b      	ldr	r3, [r7, #0]
 800a9d0:	440b      	add	r3, r1
 800a9d2:	781b      	ldrb	r3, [r3, #0]
 800a9d4:	b21b      	sxth	r3, r3
 800a9d6:	4313      	orrs	r3, r2
 800a9d8:	b21b      	sxth	r3, r3
 800a9da:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 800a9dc:	89fb      	ldrh	r3, [r7, #14]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d019      	beq.n	800aa16 <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 800a9e2:	89bb      	ldrh	r3, [r7, #12]
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	f001 fff1 	bl	800c9cc <ff_wtoupper>
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 800a9ee:	697b      	ldr	r3, [r7, #20]
 800a9f0:	2bfe      	cmp	r3, #254	; 0xfe
 800a9f2:	d80e      	bhi.n	800aa12 <cmp_lfn+0x8a>
 800a9f4:	697b      	ldr	r3, [r7, #20]
 800a9f6:	1c5a      	adds	r2, r3, #1
 800a9f8:	617a      	str	r2, [r7, #20]
 800a9fa:	005b      	lsls	r3, r3, #1
 800a9fc:	687a      	ldr	r2, [r7, #4]
 800a9fe:	4413      	add	r3, r2
 800aa00:	881b      	ldrh	r3, [r3, #0]
 800aa02:	4618      	mov	r0, r3
 800aa04:	f001 ffe2 	bl	800c9cc <ff_wtoupper>
 800aa08:	4603      	mov	r3, r0
 800aa0a:	461a      	mov	r2, r3
 800aa0c:	89fb      	ldrh	r3, [r7, #14]
 800aa0e:	4293      	cmp	r3, r2
 800aa10:	d008      	beq.n	800aa24 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 800aa12:	2300      	movs	r3, #0
 800aa14:	e01f      	b.n	800aa56 <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 800aa16:	89bb      	ldrh	r3, [r7, #12]
 800aa18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aa1c:	4293      	cmp	r3, r2
 800aa1e:	d001      	beq.n	800aa24 <cmp_lfn+0x9c>
 800aa20:	2300      	movs	r3, #0
 800aa22:	e018      	b.n	800aa56 <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 800aa24:	693b      	ldr	r3, [r7, #16]
 800aa26:	3301      	adds	r3, #1
 800aa28:	613b      	str	r3, [r7, #16]
 800aa2a:	693b      	ldr	r3, [r7, #16]
 800aa2c:	2b0c      	cmp	r3, #12
 800aa2e:	d9bf      	bls.n	800a9b0 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 800aa30:	683b      	ldr	r3, [r7, #0]
 800aa32:	781b      	ldrb	r3, [r3, #0]
 800aa34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d00b      	beq.n	800aa54 <cmp_lfn+0xcc>
 800aa3c:	89fb      	ldrh	r3, [r7, #14]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d008      	beq.n	800aa54 <cmp_lfn+0xcc>
 800aa42:	697b      	ldr	r3, [r7, #20]
 800aa44:	005b      	lsls	r3, r3, #1
 800aa46:	687a      	ldr	r2, [r7, #4]
 800aa48:	4413      	add	r3, r2
 800aa4a:	881b      	ldrh	r3, [r3, #0]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d001      	beq.n	800aa54 <cmp_lfn+0xcc>
		return 0;
 800aa50:	2300      	movs	r3, #0
 800aa52:	e000      	b.n	800aa56 <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 800aa54:	2301      	movs	r3, #1
}
 800aa56:	4618      	mov	r0, r3
 800aa58:	3718      	adds	r7, #24
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	bd80      	pop	{r7, pc}
 800aa5e:	bf00      	nop
 800aa60:	0800de70 	.word	0x0800de70

0800aa64 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 800aa64:	b480      	push	{r7}
 800aa66:	b089      	sub	sp, #36	; 0x24
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	60f8      	str	r0, [r7, #12]
 800aa6c:	60b9      	str	r1, [r7, #8]
 800aa6e:	4611      	mov	r1, r2
 800aa70:	461a      	mov	r2, r3
 800aa72:	460b      	mov	r3, r1
 800aa74:	71fb      	strb	r3, [r7, #7]
 800aa76:	4613      	mov	r3, r2
 800aa78:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 800aa7a:	68bb      	ldr	r3, [r7, #8]
 800aa7c:	330d      	adds	r3, #13
 800aa7e:	79ba      	ldrb	r2, [r7, #6]
 800aa80:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800aa82:	68bb      	ldr	r3, [r7, #8]
 800aa84:	330b      	adds	r3, #11
 800aa86:	220f      	movs	r2, #15
 800aa88:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800aa8a:	68bb      	ldr	r3, [r7, #8]
 800aa8c:	330c      	adds	r3, #12
 800aa8e:	2200      	movs	r2, #0
 800aa90:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 800aa92:	68bb      	ldr	r3, [r7, #8]
 800aa94:	331a      	adds	r3, #26
 800aa96:	2200      	movs	r2, #0
 800aa98:	701a      	strb	r2, [r3, #0]
 800aa9a:	68bb      	ldr	r3, [r7, #8]
 800aa9c:	331b      	adds	r3, #27
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 800aaa2:	79fb      	ldrb	r3, [r7, #7]
 800aaa4:	1e5a      	subs	r2, r3, #1
 800aaa6:	4613      	mov	r3, r2
 800aaa8:	005b      	lsls	r3, r3, #1
 800aaaa:	4413      	add	r3, r2
 800aaac:	009b      	lsls	r3, r3, #2
 800aaae:	4413      	add	r3, r2
 800aab0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800aab2:	2300      	movs	r3, #0
 800aab4:	82fb      	strh	r3, [r7, #22]
 800aab6:	2300      	movs	r3, #0
 800aab8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 800aaba:	8afb      	ldrh	r3, [r7, #22]
 800aabc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aac0:	4293      	cmp	r3, r2
 800aac2:	d007      	beq.n	800aad4 <fit_lfn+0x70>
 800aac4:	69fb      	ldr	r3, [r7, #28]
 800aac6:	1c5a      	adds	r2, r3, #1
 800aac8:	61fa      	str	r2, [r7, #28]
 800aaca:	005b      	lsls	r3, r3, #1
 800aacc:	68fa      	ldr	r2, [r7, #12]
 800aace:	4413      	add	r3, r2
 800aad0:	881b      	ldrh	r3, [r3, #0]
 800aad2:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 800aad4:	4a1c      	ldr	r2, [pc, #112]	; (800ab48 <fit_lfn+0xe4>)
 800aad6:	69bb      	ldr	r3, [r7, #24]
 800aad8:	4413      	add	r3, r2
 800aada:	781b      	ldrb	r3, [r3, #0]
 800aadc:	461a      	mov	r2, r3
 800aade:	68bb      	ldr	r3, [r7, #8]
 800aae0:	4413      	add	r3, r2
 800aae2:	8afa      	ldrh	r2, [r7, #22]
 800aae4:	b2d2      	uxtb	r2, r2
 800aae6:	701a      	strb	r2, [r3, #0]
 800aae8:	8afb      	ldrh	r3, [r7, #22]
 800aaea:	0a1b      	lsrs	r3, r3, #8
 800aaec:	b299      	uxth	r1, r3
 800aaee:	4a16      	ldr	r2, [pc, #88]	; (800ab48 <fit_lfn+0xe4>)
 800aaf0:	69bb      	ldr	r3, [r7, #24]
 800aaf2:	4413      	add	r3, r2
 800aaf4:	781b      	ldrb	r3, [r3, #0]
 800aaf6:	3301      	adds	r3, #1
 800aaf8:	68ba      	ldr	r2, [r7, #8]
 800aafa:	4413      	add	r3, r2
 800aafc:	b2ca      	uxtb	r2, r1
 800aafe:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 800ab00:	8afb      	ldrh	r3, [r7, #22]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d102      	bne.n	800ab0c <fit_lfn+0xa8>
 800ab06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ab0a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800ab0c:	69bb      	ldr	r3, [r7, #24]
 800ab0e:	3301      	adds	r3, #1
 800ab10:	61bb      	str	r3, [r7, #24]
 800ab12:	69bb      	ldr	r3, [r7, #24]
 800ab14:	2b0c      	cmp	r3, #12
 800ab16:	d9d0      	bls.n	800aaba <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 800ab18:	8afb      	ldrh	r3, [r7, #22]
 800ab1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ab1e:	4293      	cmp	r3, r2
 800ab20:	d006      	beq.n	800ab30 <fit_lfn+0xcc>
 800ab22:	69fb      	ldr	r3, [r7, #28]
 800ab24:	005b      	lsls	r3, r3, #1
 800ab26:	68fa      	ldr	r2, [r7, #12]
 800ab28:	4413      	add	r3, r2
 800ab2a:	881b      	ldrh	r3, [r3, #0]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d103      	bne.n	800ab38 <fit_lfn+0xd4>
 800ab30:	79fb      	ldrb	r3, [r7, #7]
 800ab32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab36:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800ab38:	68bb      	ldr	r3, [r7, #8]
 800ab3a:	79fa      	ldrb	r2, [r7, #7]
 800ab3c:	701a      	strb	r2, [r3, #0]
}
 800ab3e:	bf00      	nop
 800ab40:	3724      	adds	r7, #36	; 0x24
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bc80      	pop	{r7}
 800ab46:	4770      	bx	lr
 800ab48:	0800de70 	.word	0x0800de70

0800ab4c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b08c      	sub	sp, #48	; 0x30
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	60f8      	str	r0, [r7, #12]
 800ab54:	60b9      	str	r1, [r7, #8]
 800ab56:	607a      	str	r2, [r7, #4]
 800ab58:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800ab5a:	220b      	movs	r2, #11
 800ab5c:	68b9      	ldr	r1, [r7, #8]
 800ab5e:	68f8      	ldr	r0, [r7, #12]
 800ab60:	f7fe fe90 	bl	8009884 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	2b05      	cmp	r3, #5
 800ab68:	d92b      	bls.n	800abc2 <gen_numname+0x76>
		sr = seq;
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800ab6e:	e022      	b.n	800abb6 <gen_numname+0x6a>
			wc = *lfn++;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	1c9a      	adds	r2, r3, #2
 800ab74:	607a      	str	r2, [r7, #4]
 800ab76:	881b      	ldrh	r3, [r3, #0]
 800ab78:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	62bb      	str	r3, [r7, #40]	; 0x28
 800ab7e:	e017      	b.n	800abb0 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800ab80:	69fb      	ldr	r3, [r7, #28]
 800ab82:	005a      	lsls	r2, r3, #1
 800ab84:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ab86:	f003 0301 	and.w	r3, r3, #1
 800ab8a:	4413      	add	r3, r2
 800ab8c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800ab8e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ab90:	085b      	lsrs	r3, r3, #1
 800ab92:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800ab94:	69fb      	ldr	r3, [r7, #28]
 800ab96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d005      	beq.n	800abaa <gen_numname+0x5e>
 800ab9e:	69fb      	ldr	r3, [r7, #28]
 800aba0:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800aba4:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800aba8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800abaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abac:	3301      	adds	r3, #1
 800abae:	62bb      	str	r3, [r7, #40]	; 0x28
 800abb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abb2:	2b0f      	cmp	r3, #15
 800abb4:	d9e4      	bls.n	800ab80 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	881b      	ldrh	r3, [r3, #0]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d1d8      	bne.n	800ab70 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800abbe:	69fb      	ldr	r3, [r7, #28]
 800abc0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800abc2:	2307      	movs	r3, #7
 800abc4:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	b2db      	uxtb	r3, r3
 800abca:	f003 030f 	and.w	r3, r3, #15
 800abce:	b2db      	uxtb	r3, r3
 800abd0:	3330      	adds	r3, #48	; 0x30
 800abd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800abd6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800abda:	2b39      	cmp	r3, #57	; 0x39
 800abdc:	d904      	bls.n	800abe8 <gen_numname+0x9c>
 800abde:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800abe2:	3307      	adds	r3, #7
 800abe4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800abe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abea:	1e5a      	subs	r2, r3, #1
 800abec:	62ba      	str	r2, [r7, #40]	; 0x28
 800abee:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800abf2:	4413      	add	r3, r2
 800abf4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800abf8:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	091b      	lsrs	r3, r3, #4
 800ac00:	603b      	str	r3, [r7, #0]
	} while (seq);
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d1de      	bne.n	800abc6 <gen_numname+0x7a>
	ns[i] = '~';
 800ac08:	f107 0214 	add.w	r2, r7, #20
 800ac0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac0e:	4413      	add	r3, r2
 800ac10:	227e      	movs	r2, #126	; 0x7e
 800ac12:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800ac14:	2300      	movs	r3, #0
 800ac16:	627b      	str	r3, [r7, #36]	; 0x24
 800ac18:	e016      	b.n	800ac48 <gen_numname+0xfc>
		if (IsDBCS1(dst[j])) {
 800ac1a:	68fa      	ldr	r2, [r7, #12]
 800ac1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac1e:	4413      	add	r3, r2
 800ac20:	781b      	ldrb	r3, [r3, #0]
 800ac22:	2b80      	cmp	r3, #128	; 0x80
 800ac24:	d90d      	bls.n	800ac42 <gen_numname+0xf6>
 800ac26:	68fa      	ldr	r2, [r7, #12]
 800ac28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac2a:	4413      	add	r3, r2
 800ac2c:	781b      	ldrb	r3, [r3, #0]
 800ac2e:	2bff      	cmp	r3, #255	; 0xff
 800ac30:	d007      	beq.n	800ac42 <gen_numname+0xf6>
			if (j == i - 1) break;
 800ac32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac34:	3b01      	subs	r3, #1
 800ac36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac38:	429a      	cmp	r2, r3
 800ac3a:	d010      	beq.n	800ac5e <gen_numname+0x112>
			j++;
 800ac3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac3e:	3301      	adds	r3, #1
 800ac40:	627b      	str	r3, [r7, #36]	; 0x24
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800ac42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac44:	3301      	adds	r3, #1
 800ac46:	627b      	str	r3, [r7, #36]	; 0x24
 800ac48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac4c:	429a      	cmp	r2, r3
 800ac4e:	d207      	bcs.n	800ac60 <gen_numname+0x114>
 800ac50:	68fa      	ldr	r2, [r7, #12]
 800ac52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac54:	4413      	add	r3, r2
 800ac56:	781b      	ldrb	r3, [r3, #0]
 800ac58:	2b20      	cmp	r3, #32
 800ac5a:	d1de      	bne.n	800ac1a <gen_numname+0xce>
 800ac5c:	e000      	b.n	800ac60 <gen_numname+0x114>
			if (j == i - 1) break;
 800ac5e:	bf00      	nop
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ac60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac62:	2b07      	cmp	r3, #7
 800ac64:	d808      	bhi.n	800ac78 <gen_numname+0x12c>
 800ac66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac68:	1c5a      	adds	r2, r3, #1
 800ac6a:	62ba      	str	r2, [r7, #40]	; 0x28
 800ac6c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800ac70:	4413      	add	r3, r2
 800ac72:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800ac76:	e000      	b.n	800ac7a <gen_numname+0x12e>
 800ac78:	2120      	movs	r1, #32
 800ac7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac7c:	1c5a      	adds	r2, r3, #1
 800ac7e:	627a      	str	r2, [r7, #36]	; 0x24
 800ac80:	68fa      	ldr	r2, [r7, #12]
 800ac82:	4413      	add	r3, r2
 800ac84:	460a      	mov	r2, r1
 800ac86:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800ac88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac8a:	2b07      	cmp	r3, #7
 800ac8c:	d9e8      	bls.n	800ac60 <gen_numname+0x114>
}
 800ac8e:	bf00      	nop
 800ac90:	3730      	adds	r7, #48	; 0x30
 800ac92:	46bd      	mov	sp, r7
 800ac94:	bd80      	pop	{r7, pc}

0800ac96 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800ac96:	b480      	push	{r7}
 800ac98:	b085      	sub	sp, #20
 800ac9a:	af00      	add	r7, sp, #0
 800ac9c:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800ac9e:	2300      	movs	r3, #0
 800aca0:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800aca2:	230b      	movs	r3, #11
 800aca4:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 800aca6:	7bfb      	ldrb	r3, [r7, #15]
 800aca8:	b2da      	uxtb	r2, r3
 800acaa:	0852      	lsrs	r2, r2, #1
 800acac:	01db      	lsls	r3, r3, #7
 800acae:	4313      	orrs	r3, r2
 800acb0:	b2da      	uxtb	r2, r3
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	1c59      	adds	r1, r3, #1
 800acb6:	6079      	str	r1, [r7, #4]
 800acb8:	781b      	ldrb	r3, [r3, #0]
 800acba:	4413      	add	r3, r2
 800acbc:	73fb      	strb	r3, [r7, #15]
 800acbe:	68bb      	ldr	r3, [r7, #8]
 800acc0:	3b01      	subs	r3, #1
 800acc2:	60bb      	str	r3, [r7, #8]
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d1ed      	bne.n	800aca6 <sum_sfn+0x10>
	return sum;
 800acca:	7bfb      	ldrb	r3, [r7, #15]
}
 800accc:	4618      	mov	r0, r3
 800acce:	3714      	adds	r7, #20
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bc80      	pop	{r7}
 800acd4:	4770      	bx	lr

0800acd6 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800acd6:	b580      	push	{r7, lr}
 800acd8:	b086      	sub	sp, #24
 800acda:	af00      	add	r7, sp, #0
 800acdc:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800acde:	2100      	movs	r1, #0
 800ace0:	6878      	ldr	r0, [r7, #4]
 800ace2:	f7ff fc29 	bl	800a538 <dir_sdi>
 800ace6:	4603      	mov	r3, r0
 800ace8:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800acea:	7dfb      	ldrb	r3, [r7, #23]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d001      	beq.n	800acf4 <dir_find+0x1e>
 800acf0:	7dfb      	ldrb	r3, [r7, #23]
 800acf2:	e0ac      	b.n	800ae4e <dir_find+0x178>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800acf4:	23ff      	movs	r3, #255	; 0xff
 800acf6:	753b      	strb	r3, [r7, #20]
 800acf8:	7d3b      	ldrb	r3, [r7, #20]
 800acfa:	757b      	strb	r3, [r7, #21]
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ad02:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ad12:	4619      	mov	r1, r3
 800ad14:	4610      	mov	r0, r2
 800ad16:	f7ff f826 	bl	8009d66 <move_window>
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ad1e:	7dfb      	ldrb	r3, [r7, #23]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	f040 808e 	bne.w	800ae42 <dir_find+0x16c>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ad2c:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800ad2e:	693b      	ldr	r3, [r7, #16]
 800ad30:	781b      	ldrb	r3, [r3, #0]
 800ad32:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ad34:	7dbb      	ldrb	r3, [r7, #22]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d102      	bne.n	800ad40 <dir_find+0x6a>
 800ad3a:	2304      	movs	r3, #4
 800ad3c:	75fb      	strb	r3, [r7, #23]
 800ad3e:	e085      	b.n	800ae4c <dir_find+0x176>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 800ad40:	693b      	ldr	r3, [r7, #16]
 800ad42:	330b      	adds	r3, #11
 800ad44:	781b      	ldrb	r3, [r3, #0]
 800ad46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ad4a:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800ad4c:	7dbb      	ldrb	r3, [r7, #22]
 800ad4e:	2be5      	cmp	r3, #229	; 0xe5
 800ad50:	d007      	beq.n	800ad62 <dir_find+0x8c>
 800ad52:	7bfb      	ldrb	r3, [r7, #15]
 800ad54:	f003 0308 	and.w	r3, r3, #8
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d00a      	beq.n	800ad72 <dir_find+0x9c>
 800ad5c:	7bfb      	ldrb	r3, [r7, #15]
 800ad5e:	2b0f      	cmp	r3, #15
 800ad60:	d007      	beq.n	800ad72 <dir_find+0x9c>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800ad62:	23ff      	movs	r3, #255	; 0xff
 800ad64:	757b      	strb	r3, [r7, #21]
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ad6c:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224
 800ad70:	e05c      	b.n	800ae2c <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800ad72:	7bfb      	ldrb	r3, [r7, #15]
 800ad74:	2b0f      	cmp	r3, #15
 800ad76:	d133      	bne.n	800ade0 <dir_find+0x10a>
				if (dp->lfn) {
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d054      	beq.n	800ae2c <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800ad82:	7dbb      	ldrb	r3, [r7, #22]
 800ad84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d00e      	beq.n	800adaa <dir_find+0xd4>
						sum = dir[LDIR_Chksum];
 800ad8c:	693b      	ldr	r3, [r7, #16]
 800ad8e:	7b5b      	ldrb	r3, [r3, #13]
 800ad90:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 800ad92:	7dbb      	ldrb	r3, [r7, #22]
 800ad94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad98:	75bb      	strb	r3, [r7, #22]
 800ad9a:	7dbb      	ldrb	r3, [r7, #22]
 800ad9c:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 800adaa:	7dba      	ldrb	r2, [r7, #22]
 800adac:	7d7b      	ldrb	r3, [r7, #21]
 800adae:	429a      	cmp	r2, r3
 800adb0:	d113      	bne.n	800adda <dir_find+0x104>
 800adb2:	693b      	ldr	r3, [r7, #16]
 800adb4:	330d      	adds	r3, #13
 800adb6:	781b      	ldrb	r3, [r3, #0]
 800adb8:	7d3a      	ldrb	r2, [r7, #20]
 800adba:	429a      	cmp	r2, r3
 800adbc:	d10d      	bne.n	800adda <dir_find+0x104>
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800adc4:	6939      	ldr	r1, [r7, #16]
 800adc6:	4618      	mov	r0, r3
 800adc8:	f7ff fdde 	bl	800a988 <cmp_lfn>
 800adcc:	4603      	mov	r3, r0
 800adce:	2b00      	cmp	r3, #0
 800add0:	d003      	beq.n	800adda <dir_find+0x104>
 800add2:	7d7b      	ldrb	r3, [r7, #21]
 800add4:	3b01      	subs	r3, #1
 800add6:	b2db      	uxtb	r3, r3
 800add8:	e000      	b.n	800addc <dir_find+0x106>
 800adda:	23ff      	movs	r3, #255	; 0xff
 800addc:	757b      	strb	r3, [r7, #21]
 800adde:	e025      	b.n	800ae2c <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800ade0:	7d7b      	ldrb	r3, [r7, #21]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d107      	bne.n	800adf6 <dir_find+0x120>
 800ade6:	6938      	ldr	r0, [r7, #16]
 800ade8:	f7ff ff55 	bl	800ac96 <sum_sfn>
 800adec:	4603      	mov	r3, r0
 800adee:	461a      	mov	r2, r3
 800adf0:	7d3b      	ldrb	r3, [r7, #20]
 800adf2:	4293      	cmp	r3, r2
 800adf4:	d027      	beq.n	800ae46 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800adfc:	330b      	adds	r3, #11
 800adfe:	781b      	ldrb	r3, [r3, #0]
 800ae00:	f003 0301 	and.w	r3, r3, #1
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d10a      	bne.n	800ae1e <dir_find+0x148>
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800ae0e:	220b      	movs	r2, #11
 800ae10:	4619      	mov	r1, r3
 800ae12:	6938      	ldr	r0, [r7, #16]
 800ae14:	f7fe fd6c 	bl	80098f0 <mem_cmp>
 800ae18:	4603      	mov	r3, r0
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d015      	beq.n	800ae4a <dir_find+0x174>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800ae1e:	23ff      	movs	r3, #255	; 0xff
 800ae20:	757b      	strb	r3, [r7, #21]
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ae28:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800ae2c:	2100      	movs	r1, #0
 800ae2e:	6878      	ldr	r0, [r7, #4]
 800ae30:	f7ff fc16 	bl	800a660 <dir_next>
 800ae34:	4603      	mov	r3, r0
 800ae36:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800ae38:	7dfb      	ldrb	r3, [r7, #23]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	f43f af63 	beq.w	800ad06 <dir_find+0x30>
 800ae40:	e004      	b.n	800ae4c <dir_find+0x176>
		if (res != FR_OK) break;
 800ae42:	bf00      	nop
 800ae44:	e002      	b.n	800ae4c <dir_find+0x176>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800ae46:	bf00      	nop
 800ae48:	e000      	b.n	800ae4c <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800ae4a:	bf00      	nop

	return res;
 800ae4c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae4e:	4618      	mov	r0, r3
 800ae50:	3718      	adds	r7, #24
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bd80      	pop	{r7, pc}
	...

0800ae58 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b08c      	sub	sp, #48	; 0x30
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800ae66:	623b      	str	r3, [r7, #32]
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800ae6e:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 800ae70:	f107 030c 	add.w	r3, r7, #12
 800ae74:	220c      	movs	r2, #12
 800ae76:	6a39      	ldr	r1, [r7, #32]
 800ae78:	4618      	mov	r0, r3
 800ae7a:	f7fe fd03 	bl	8009884 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800ae7e:	7dfb      	ldrb	r3, [r7, #23]
 800ae80:	f003 0301 	and.w	r3, r3, #1
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d037      	beq.n	800aef8 <dir_register+0xa0>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 800ae88:	6a3b      	ldr	r3, [r7, #32]
 800ae8a:	330b      	adds	r3, #11
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	701a      	strb	r2, [r3, #0]
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2200      	movs	r2, #0
 800ae94:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
		for (n = 1; n < 100; n++) {
 800ae98:	2301      	movs	r3, #1
 800ae9a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ae9c:	e013      	b.n	800aec6 <dir_register+0x6e>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 800ae9e:	f107 010c 	add.w	r1, r7, #12
 800aea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aea4:	69fa      	ldr	r2, [r7, #28]
 800aea6:	6a38      	ldr	r0, [r7, #32]
 800aea8:	f7ff fe50 	bl	800ab4c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	f7ff ff12 	bl	800acd6 <dir_find>
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800aeb8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d106      	bne.n	800aece <dir_register+0x76>
		for (n = 1; n < 100; n++) {
 800aec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aec2:	3301      	adds	r3, #1
 800aec4:	62bb      	str	r3, [r7, #40]	; 0x28
 800aec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aec8:	2b63      	cmp	r3, #99	; 0x63
 800aeca:	d9e8      	bls.n	800ae9e <dir_register+0x46>
 800aecc:	e000      	b.n	800aed0 <dir_register+0x78>
			if (res != FR_OK) break;
 800aece:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800aed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aed2:	2b64      	cmp	r3, #100	; 0x64
 800aed4:	d101      	bne.n	800aeda <dir_register+0x82>
 800aed6:	2307      	movs	r3, #7
 800aed8:	e0c5      	b.n	800b066 <dir_register+0x20e>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800aeda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aede:	2b04      	cmp	r3, #4
 800aee0:	d002      	beq.n	800aee8 <dir_register+0x90>
 800aee2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aee6:	e0be      	b.n	800b066 <dir_register+0x20e>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 800aee8:	6a3b      	ldr	r3, [r7, #32]
 800aeea:	330b      	adds	r3, #11
 800aeec:	7dfa      	ldrb	r2, [r7, #23]
 800aeee:	701a      	strb	r2, [r3, #0]
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	69fa      	ldr	r2, [r7, #28]
 800aef4:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 800aef8:	7dfb      	ldrb	r3, [r7, #23]
 800aefa:	f003 0302 	and.w	r3, r3, #2
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d014      	beq.n	800af2c <dir_register+0xd4>
		for (n = 0; lfn[n]; n++) ;
 800af02:	2300      	movs	r3, #0
 800af04:	62bb      	str	r3, [r7, #40]	; 0x28
 800af06:	e002      	b.n	800af0e <dir_register+0xb6>
 800af08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af0a:	3301      	adds	r3, #1
 800af0c:	62bb      	str	r3, [r7, #40]	; 0x28
 800af0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af10:	005b      	lsls	r3, r3, #1
 800af12:	69fa      	ldr	r2, [r7, #28]
 800af14:	4413      	add	r3, r2
 800af16:	881b      	ldrh	r3, [r3, #0]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d1f5      	bne.n	800af08 <dir_register+0xb0>
		nent = (n + 25) / 13;
 800af1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af1e:	3319      	adds	r3, #25
 800af20:	4a53      	ldr	r2, [pc, #332]	; (800b070 <dir_register+0x218>)
 800af22:	fba2 2303 	umull	r2, r3, r2, r3
 800af26:	089b      	lsrs	r3, r3, #2
 800af28:	627b      	str	r3, [r7, #36]	; 0x24
 800af2a:	e001      	b.n	800af30 <dir_register+0xd8>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 800af2c:	2301      	movs	r3, #1
 800af2e:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800af30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800af32:	6878      	ldr	r0, [r7, #4]
 800af34:	f7ff fc8b 	bl	800a84e <dir_alloc>
 800af38:	4603      	mov	r3, r0
 800af3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800af3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800af42:	2b00      	cmp	r3, #0
 800af44:	d153      	bne.n	800afee <dir_register+0x196>
 800af46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af48:	3b01      	subs	r3, #1
 800af4a:	627b      	str	r3, [r7, #36]	; 0x24
 800af4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d04d      	beq.n	800afee <dir_register+0x196>
		res = dir_sdi(dp, dp->index - nent);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 800af58:	461a      	mov	r2, r3
 800af5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af5c:	1ad3      	subs	r3, r2, r3
 800af5e:	4619      	mov	r1, r3
 800af60:	6878      	ldr	r0, [r7, #4]
 800af62:	f7ff fae9 	bl	800a538 <dir_sdi>
 800af66:	4603      	mov	r3, r0
 800af68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800af6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800af70:	2b00      	cmp	r3, #0
 800af72:	d13c      	bne.n	800afee <dir_register+0x196>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800af7a:	4618      	mov	r0, r3
 800af7c:	f7ff fe8b 	bl	800ac96 <sum_sfn>
 800af80:	4603      	mov	r3, r0
 800af82:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800af90:	4619      	mov	r1, r3
 800af92:	4610      	mov	r0, r2
 800af94:	f7fe fee7 	bl	8009d66 <move_window>
 800af98:	4603      	mov	r3, r0
 800af9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800af9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d122      	bne.n	800afec <dir_register+0x194>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	f8d3 1214 	ldr.w	r1, [r3, #532]	; 0x214
 800afb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afb4:	b2da      	uxtb	r2, r3
 800afb6:	7efb      	ldrb	r3, [r7, #27]
 800afb8:	f7ff fd54 	bl	800aa64 <fit_lfn>
				dp->fs->wflag = 1;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800afc2:	2201      	movs	r2, #1
 800afc4:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = dir_next(dp, 0);	/* Next entry */
 800afc8:	2100      	movs	r1, #0
 800afca:	6878      	ldr	r0, [r7, #4]
 800afcc:	f7ff fb48 	bl	800a660 <dir_next>
 800afd0:	4603      	mov	r3, r0
 800afd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800afd6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d107      	bne.n	800afee <dir_register+0x196>
 800afde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afe0:	3b01      	subs	r3, #1
 800afe2:	627b      	str	r3, [r7, #36]	; 0x24
 800afe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d1cc      	bne.n	800af84 <dir_register+0x12c>
 800afea:	e000      	b.n	800afee <dir_register+0x196>
				if (res != FR_OK) break;
 800afec:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800afee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d135      	bne.n	800b062 <dir_register+0x20a>
		res = move_window(dp->fs, dp->sect);
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b002:	4619      	mov	r1, r3
 800b004:	4610      	mov	r0, r2
 800b006:	f7fe feae 	bl	8009d66 <move_window>
 800b00a:	4603      	mov	r3, r0
 800b00c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800b010:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b014:	2b00      	cmp	r3, #0
 800b016:	d124      	bne.n	800b062 <dir_register+0x20a>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b01e:	2220      	movs	r2, #32
 800b020:	2100      	movs	r1, #0
 800b022:	4618      	mov	r0, r3
 800b024:	f7fe fc4b 	bl	80098be <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b034:	220b      	movs	r2, #11
 800b036:	4619      	mov	r1, r3
 800b038:	f7fe fc24 	bl	8009884 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b042:	330b      	adds	r3, #11
 800b044:	781a      	ldrb	r2, [r3, #0]
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b04c:	330c      	adds	r3, #12
 800b04e:	f002 0218 	and.w	r2, r2, #24
 800b052:	b2d2      	uxtb	r2, r2
 800b054:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b05c:	2201      	movs	r2, #1
 800b05e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 800b062:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b066:	4618      	mov	r0, r3
 800b068:	3730      	adds	r7, #48	; 0x30
 800b06a:	46bd      	mov	sp, r7
 800b06c:	bd80      	pop	{r7, pc}
 800b06e:	bf00      	nop
 800b070:	4ec4ec4f 	.word	0x4ec4ec4f

0800b074 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b08a      	sub	sp, #40	; 0x28
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
 800b07c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800b07e:	683b      	ldr	r3, [r7, #0]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	613b      	str	r3, [r7, #16]
 800b084:	e002      	b.n	800b08c <create_name+0x18>
 800b086:	693b      	ldr	r3, [r7, #16]
 800b088:	3301      	adds	r3, #1
 800b08a:	613b      	str	r3, [r7, #16]
 800b08c:	693b      	ldr	r3, [r7, #16]
 800b08e:	781b      	ldrb	r3, [r3, #0]
 800b090:	2b2f      	cmp	r3, #47	; 0x2f
 800b092:	d0f8      	beq.n	800b086 <create_name+0x12>
 800b094:	693b      	ldr	r3, [r7, #16]
 800b096:	781b      	ldrb	r3, [r3, #0]
 800b098:	2b5c      	cmp	r3, #92	; 0x5c
 800b09a:	d0f4      	beq.n	800b086 <create_name+0x12>
	lfn = dp->lfn;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800b0a2:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	617b      	str	r3, [r7, #20]
 800b0a8:	697b      	ldr	r3, [r7, #20]
 800b0aa:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800b0ac:	69bb      	ldr	r3, [r7, #24]
 800b0ae:	1c5a      	adds	r2, r3, #1
 800b0b0:	61ba      	str	r2, [r7, #24]
 800b0b2:	693a      	ldr	r2, [r7, #16]
 800b0b4:	4413      	add	r3, r2
 800b0b6:	781b      	ldrb	r3, [r3, #0]
 800b0b8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 800b0ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b0bc:	2b1f      	cmp	r3, #31
 800b0be:	d961      	bls.n	800b184 <create_name+0x110>
 800b0c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b0c2:	2b2f      	cmp	r3, #47	; 0x2f
 800b0c4:	d05e      	beq.n	800b184 <create_name+0x110>
 800b0c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b0c8:	2b5c      	cmp	r3, #92	; 0x5c
 800b0ca:	d05b      	beq.n	800b184 <create_name+0x110>
		if (di >= _MAX_LFN)				/* Reject too long name */
 800b0cc:	697b      	ldr	r3, [r7, #20]
 800b0ce:	2bfe      	cmp	r3, #254	; 0xfe
 800b0d0:	d901      	bls.n	800b0d6 <create_name+0x62>
			return FR_INVALID_NAME;
 800b0d2:	2306      	movs	r3, #6
 800b0d4:	e1cc      	b.n	800b470 <create_name+0x3fc>
#if !_LFN_UNICODE
		w &= 0xFF;
 800b0d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b0d8:	b2db      	uxtb	r3, r3
 800b0da:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
 800b0dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b0de:	b2db      	uxtb	r3, r3
 800b0e0:	2b80      	cmp	r3, #128	; 0x80
 800b0e2:	d92d      	bls.n	800b140 <create_name+0xcc>
 800b0e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b0e6:	b2db      	uxtb	r3, r3
 800b0e8:	2bff      	cmp	r3, #255	; 0xff
 800b0ea:	d029      	beq.n	800b140 <create_name+0xcc>
#if _DF1S
			b = (BYTE)p[si++];			/* Get 2nd byte */
 800b0ec:	69bb      	ldr	r3, [r7, #24]
 800b0ee:	1c5a      	adds	r2, r3, #1
 800b0f0:	61ba      	str	r2, [r7, #24]
 800b0f2:	693a      	ldr	r2, [r7, #16]
 800b0f4:	4413      	add	r3, r2
 800b0f6:	781b      	ldrb	r3, [r3, #0]
 800b0f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			w = (w << 8) + b;			/* Create a DBC */
 800b0fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b0fe:	021b      	lsls	r3, r3, #8
 800b100:	b29a      	uxth	r2, r3
 800b102:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b106:	b29b      	uxth	r3, r3
 800b108:	4413      	add	r3, r2
 800b10a:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (!IsDBCS2(b))
 800b10c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b110:	2b40      	cmp	r3, #64	; 0x40
 800b112:	d903      	bls.n	800b11c <create_name+0xa8>
 800b114:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b118:	2b5a      	cmp	r3, #90	; 0x5a
 800b11a:	d911      	bls.n	800b140 <create_name+0xcc>
 800b11c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b120:	2b60      	cmp	r3, #96	; 0x60
 800b122:	d903      	bls.n	800b12c <create_name+0xb8>
 800b124:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b128:	2b7a      	cmp	r3, #122	; 0x7a
 800b12a:	d909      	bls.n	800b140 <create_name+0xcc>
 800b12c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b130:	2b80      	cmp	r3, #128	; 0x80
 800b132:	d903      	bls.n	800b13c <create_name+0xc8>
 800b134:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b138:	2bff      	cmp	r3, #255	; 0xff
 800b13a:	d101      	bne.n	800b140 <create_name+0xcc>
				return FR_INVALID_NAME;	/* Reject invalid sequence */
 800b13c:	2306      	movs	r3, #6
 800b13e:	e197      	b.n	800b470 <create_name+0x3fc>
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800b140:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b142:	2101      	movs	r1, #1
 800b144:	4618      	mov	r0, r3
 800b146:	f001 fbe3 	bl	800c910 <ff_convert>
 800b14a:	4603      	mov	r3, r0
 800b14c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800b14e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b150:	2b00      	cmp	r3, #0
 800b152:	d101      	bne.n	800b158 <create_name+0xe4>
 800b154:	2306      	movs	r3, #6
 800b156:	e18b      	b.n	800b470 <create_name+0x3fc>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 800b158:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b15a:	2b7f      	cmp	r3, #127	; 0x7f
 800b15c:	d809      	bhi.n	800b172 <create_name+0xfe>
 800b15e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b160:	4619      	mov	r1, r3
 800b162:	489b      	ldr	r0, [pc, #620]	; (800b3d0 <create_name+0x35c>)
 800b164:	f7fe fbea 	bl	800993c <chk_chr>
 800b168:	4603      	mov	r3, r0
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d001      	beq.n	800b172 <create_name+0xfe>
			return FR_INVALID_NAME;
 800b16e:	2306      	movs	r3, #6
 800b170:	e17e      	b.n	800b470 <create_name+0x3fc>
		lfn[di++] = w;					/* Store the Unicode character */
 800b172:	697b      	ldr	r3, [r7, #20]
 800b174:	1c5a      	adds	r2, r3, #1
 800b176:	617a      	str	r2, [r7, #20]
 800b178:	005b      	lsls	r3, r3, #1
 800b17a:	68fa      	ldr	r2, [r7, #12]
 800b17c:	4413      	add	r3, r2
 800b17e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b180:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800b182:	e793      	b.n	800b0ac <create_name+0x38>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800b184:	693a      	ldr	r2, [r7, #16]
 800b186:	69bb      	ldr	r3, [r7, #24]
 800b188:	441a      	add	r2, r3
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800b18e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b190:	2b1f      	cmp	r3, #31
 800b192:	d801      	bhi.n	800b198 <create_name+0x124>
 800b194:	2304      	movs	r3, #4
 800b196:	e000      	b.n	800b19a <create_name+0x126>
 800b198:	2300      	movs	r3, #0
 800b19a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 800b19e:	e011      	b.n	800b1c4 <create_name+0x150>
		w = lfn[di - 1];
 800b1a0:	697b      	ldr	r3, [r7, #20]
 800b1a2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b1a6:	3b01      	subs	r3, #1
 800b1a8:	005b      	lsls	r3, r3, #1
 800b1aa:	68fa      	ldr	r2, [r7, #12]
 800b1ac:	4413      	add	r3, r2
 800b1ae:	881b      	ldrh	r3, [r3, #0]
 800b1b0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800b1b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b1b4:	2b20      	cmp	r3, #32
 800b1b6:	d002      	beq.n	800b1be <create_name+0x14a>
 800b1b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b1ba:	2b2e      	cmp	r3, #46	; 0x2e
 800b1bc:	d106      	bne.n	800b1cc <create_name+0x158>
		di--;
 800b1be:	697b      	ldr	r3, [r7, #20]
 800b1c0:	3b01      	subs	r3, #1
 800b1c2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 800b1c4:	697b      	ldr	r3, [r7, #20]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d1ea      	bne.n	800b1a0 <create_name+0x12c>
 800b1ca:	e000      	b.n	800b1ce <create_name+0x15a>
		if (w != ' ' && w != '.') break;
 800b1cc:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 800b1ce:	697b      	ldr	r3, [r7, #20]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d101      	bne.n	800b1d8 <create_name+0x164>
 800b1d4:	2306      	movs	r3, #6
 800b1d6:	e14b      	b.n	800b470 <create_name+0x3fc>

	lfn[di] = 0;						/* LFN is created */
 800b1d8:	697b      	ldr	r3, [r7, #20]
 800b1da:	005b      	lsls	r3, r3, #1
 800b1dc:	68fa      	ldr	r2, [r7, #12]
 800b1de:	4413      	add	r3, r2
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b1ea:	220b      	movs	r2, #11
 800b1ec:	2120      	movs	r1, #32
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	f7fe fb65 	bl	80098be <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	61bb      	str	r3, [r7, #24]
 800b1f8:	e002      	b.n	800b200 <create_name+0x18c>
 800b1fa:	69bb      	ldr	r3, [r7, #24]
 800b1fc:	3301      	adds	r3, #1
 800b1fe:	61bb      	str	r3, [r7, #24]
 800b200:	69bb      	ldr	r3, [r7, #24]
 800b202:	005b      	lsls	r3, r3, #1
 800b204:	68fa      	ldr	r2, [r7, #12]
 800b206:	4413      	add	r3, r2
 800b208:	881b      	ldrh	r3, [r3, #0]
 800b20a:	2b20      	cmp	r3, #32
 800b20c:	d0f5      	beq.n	800b1fa <create_name+0x186>
 800b20e:	69bb      	ldr	r3, [r7, #24]
 800b210:	005b      	lsls	r3, r3, #1
 800b212:	68fa      	ldr	r2, [r7, #12]
 800b214:	4413      	add	r3, r2
 800b216:	881b      	ldrh	r3, [r3, #0]
 800b218:	2b2e      	cmp	r3, #46	; 0x2e
 800b21a:	d0ee      	beq.n	800b1fa <create_name+0x186>
	if (si) cf |= NS_LOSS | NS_LFN;
 800b21c:	69bb      	ldr	r3, [r7, #24]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d009      	beq.n	800b236 <create_name+0x1c2>
 800b222:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b226:	f043 0303 	orr.w	r3, r3, #3
 800b22a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800b22e:	e002      	b.n	800b236 <create_name+0x1c2>
 800b230:	697b      	ldr	r3, [r7, #20]
 800b232:	3b01      	subs	r3, #1
 800b234:	617b      	str	r3, [r7, #20]
 800b236:	697b      	ldr	r3, [r7, #20]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d009      	beq.n	800b250 <create_name+0x1dc>
 800b23c:	697b      	ldr	r3, [r7, #20]
 800b23e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b242:	3b01      	subs	r3, #1
 800b244:	005b      	lsls	r3, r3, #1
 800b246:	68fa      	ldr	r2, [r7, #12]
 800b248:	4413      	add	r3, r2
 800b24a:	881b      	ldrh	r3, [r3, #0]
 800b24c:	2b2e      	cmp	r3, #46	; 0x2e
 800b24e:	d1ef      	bne.n	800b230 <create_name+0x1bc>

	b = i = 0; ni = 8;
 800b250:	2300      	movs	r3, #0
 800b252:	623b      	str	r3, [r7, #32]
 800b254:	2300      	movs	r3, #0
 800b256:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b25a:	2308      	movs	r3, #8
 800b25c:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800b25e:	69bb      	ldr	r3, [r7, #24]
 800b260:	1c5a      	adds	r2, r3, #1
 800b262:	61ba      	str	r2, [r7, #24]
 800b264:	005b      	lsls	r3, r3, #1
 800b266:	68fa      	ldr	r2, [r7, #12]
 800b268:	4413      	add	r3, r2
 800b26a:	881b      	ldrh	r3, [r3, #0]
 800b26c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800b26e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b270:	2b00      	cmp	r3, #0
 800b272:	f000 80aa 	beq.w	800b3ca <create_name+0x356>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800b276:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b278:	2b20      	cmp	r3, #32
 800b27a:	d006      	beq.n	800b28a <create_name+0x216>
 800b27c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b27e:	2b2e      	cmp	r3, #46	; 0x2e
 800b280:	d10a      	bne.n	800b298 <create_name+0x224>
 800b282:	69ba      	ldr	r2, [r7, #24]
 800b284:	697b      	ldr	r3, [r7, #20]
 800b286:	429a      	cmp	r2, r3
 800b288:	d006      	beq.n	800b298 <create_name+0x224>
			cf |= NS_LOSS | NS_LFN; continue;
 800b28a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b28e:	f043 0303 	orr.w	r3, r3, #3
 800b292:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b296:	e097      	b.n	800b3c8 <create_name+0x354>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800b298:	6a3a      	ldr	r2, [r7, #32]
 800b29a:	69fb      	ldr	r3, [r7, #28]
 800b29c:	429a      	cmp	r2, r3
 800b29e:	d203      	bcs.n	800b2a8 <create_name+0x234>
 800b2a0:	69ba      	ldr	r2, [r7, #24]
 800b2a2:	697b      	ldr	r3, [r7, #20]
 800b2a4:	429a      	cmp	r2, r3
 800b2a6:	d123      	bne.n	800b2f0 <create_name+0x27c>
			if (ni == 11) {				/* Long extension */
 800b2a8:	69fb      	ldr	r3, [r7, #28]
 800b2aa:	2b0b      	cmp	r3, #11
 800b2ac:	d106      	bne.n	800b2bc <create_name+0x248>
				cf |= NS_LOSS | NS_LFN; break;
 800b2ae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b2b2:	f043 0303 	orr.w	r3, r3, #3
 800b2b6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b2ba:	e08e      	b.n	800b3da <create_name+0x366>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800b2bc:	69ba      	ldr	r2, [r7, #24]
 800b2be:	697b      	ldr	r3, [r7, #20]
 800b2c0:	429a      	cmp	r2, r3
 800b2c2:	d005      	beq.n	800b2d0 <create_name+0x25c>
 800b2c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b2c8:	f043 0303 	orr.w	r3, r3, #3
 800b2cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (si > di) break;			/* No extension */
 800b2d0:	69ba      	ldr	r2, [r7, #24]
 800b2d2:	697b      	ldr	r3, [r7, #20]
 800b2d4:	429a      	cmp	r2, r3
 800b2d6:	d87f      	bhi.n	800b3d8 <create_name+0x364>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800b2d8:	697b      	ldr	r3, [r7, #20]
 800b2da:	61bb      	str	r3, [r7, #24]
 800b2dc:	2308      	movs	r3, #8
 800b2de:	623b      	str	r3, [r7, #32]
 800b2e0:	230b      	movs	r3, #11
 800b2e2:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800b2e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b2e8:	009b      	lsls	r3, r3, #2
 800b2ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b2ee:	e06b      	b.n	800b3c8 <create_name+0x354>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800b2f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b2f2:	2b7f      	cmp	r3, #127	; 0x7f
 800b2f4:	d910      	bls.n	800b318 <create_name+0x2a4>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
 800b2f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	f001 fb67 	bl	800c9cc <ff_wtoupper>
 800b2fe:	4603      	mov	r3, r0
 800b300:	2100      	movs	r1, #0
 800b302:	4618      	mov	r0, r3
 800b304:	f001 fb04 	bl	800c910 <ff_convert>
 800b308:	4603      	mov	r3, r0
 800b30a:	84bb      	strh	r3, [r7, #36]	; 0x24
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800b30c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b310:	f043 0302 	orr.w	r3, r3, #2
 800b314:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		}

		if (_DF1S && w >= 0x100) {		/* DBC (always false at SBCS cfg) */
 800b318:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b31a:	2bff      	cmp	r3, #255	; 0xff
 800b31c:	d91a      	bls.n	800b354 <create_name+0x2e0>
			if (i >= ni - 1) {
 800b31e:	69fb      	ldr	r3, [r7, #28]
 800b320:	3b01      	subs	r3, #1
 800b322:	6a3a      	ldr	r2, [r7, #32]
 800b324:	429a      	cmp	r2, r3
 800b326:	d308      	bcc.n	800b33a <create_name+0x2c6>
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
 800b328:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b32c:	f043 0303 	orr.w	r3, r3, #3
 800b330:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b334:	69fb      	ldr	r3, [r7, #28]
 800b336:	623b      	str	r3, [r7, #32]
 800b338:	e046      	b.n	800b3c8 <create_name+0x354>
			}
			dp->fn[i++] = (BYTE)(w >> 8);
 800b33a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b33c:	0a1b      	lsrs	r3, r3, #8
 800b33e:	b298      	uxth	r0, r3
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800b346:	6a3b      	ldr	r3, [r7, #32]
 800b348:	1c59      	adds	r1, r3, #1
 800b34a:	6239      	str	r1, [r7, #32]
 800b34c:	4413      	add	r3, r2
 800b34e:	b2c2      	uxtb	r2, r0
 800b350:	701a      	strb	r2, [r3, #0]
 800b352:	e02f      	b.n	800b3b4 <create_name+0x340>
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800b354:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b356:	2b00      	cmp	r3, #0
 800b358:	d007      	beq.n	800b36a <create_name+0x2f6>
 800b35a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b35c:	4619      	mov	r1, r3
 800b35e:	481d      	ldr	r0, [pc, #116]	; (800b3d4 <create_name+0x360>)
 800b360:	f7fe faec 	bl	800993c <chk_chr>
 800b364:	4603      	mov	r3, r0
 800b366:	2b00      	cmp	r3, #0
 800b368:	d008      	beq.n	800b37c <create_name+0x308>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800b36a:	235f      	movs	r3, #95	; 0x5f
 800b36c:	84bb      	strh	r3, [r7, #36]	; 0x24
 800b36e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b372:	f043 0303 	orr.w	r3, r3, #3
 800b376:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b37a:	e01b      	b.n	800b3b4 <create_name+0x340>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800b37c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b37e:	2b40      	cmp	r3, #64	; 0x40
 800b380:	d909      	bls.n	800b396 <create_name+0x322>
 800b382:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b384:	2b5a      	cmp	r3, #90	; 0x5a
 800b386:	d806      	bhi.n	800b396 <create_name+0x322>
					b |= 2;
 800b388:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b38c:	f043 0302 	orr.w	r3, r3, #2
 800b390:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b394:	e00e      	b.n	800b3b4 <create_name+0x340>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800b396:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b398:	2b60      	cmp	r3, #96	; 0x60
 800b39a:	d90b      	bls.n	800b3b4 <create_name+0x340>
 800b39c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b39e:	2b7a      	cmp	r3, #122	; 0x7a
 800b3a0:	d808      	bhi.n	800b3b4 <create_name+0x340>
						b |= 1; w -= 0x20;
 800b3a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b3a6:	f043 0301 	orr.w	r3, r3, #1
 800b3aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b3ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b3b0:	3b20      	subs	r3, #32
 800b3b2:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800b3ba:	6a3b      	ldr	r3, [r7, #32]
 800b3bc:	1c59      	adds	r1, r3, #1
 800b3be:	6239      	str	r1, [r7, #32]
 800b3c0:	4413      	add	r3, r2
 800b3c2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b3c4:	b2d2      	uxtb	r2, r2
 800b3c6:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 800b3c8:	e749      	b.n	800b25e <create_name+0x1ea>
		if (!w) break;					/* Break on end of the LFN */
 800b3ca:	bf00      	nop
 800b3cc:	e005      	b.n	800b3da <create_name+0x366>
 800b3ce:	bf00      	nop
 800b3d0:	0800ddc0 	.word	0x0800ddc0
 800b3d4:	0800ddcc 	.word	0x0800ddcc
			if (si > di) break;			/* No extension */
 800b3d8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b3e0:	781b      	ldrb	r3, [r3, #0]
 800b3e2:	2be5      	cmp	r3, #229	; 0xe5
 800b3e4:	d104      	bne.n	800b3f0 <create_name+0x37c>
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b3ec:	2205      	movs	r2, #5
 800b3ee:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 800b3f0:	69fb      	ldr	r3, [r7, #28]
 800b3f2:	2b08      	cmp	r3, #8
 800b3f4:	d104      	bne.n	800b400 <create_name+0x38c>
 800b3f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b3fa:	009b      	lsls	r3, r3, #2
 800b3fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 800b400:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b404:	f003 030c 	and.w	r3, r3, #12
 800b408:	2b0c      	cmp	r3, #12
 800b40a:	d005      	beq.n	800b418 <create_name+0x3a4>
 800b40c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b410:	f003 0303 	and.w	r3, r3, #3
 800b414:	2b03      	cmp	r3, #3
 800b416:	d105      	bne.n	800b424 <create_name+0x3b0>
		cf |= NS_LFN;
 800b418:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b41c:	f043 0302 	orr.w	r3, r3, #2
 800b420:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800b424:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b428:	f003 0302 	and.w	r3, r3, #2
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d117      	bne.n	800b460 <create_name+0x3ec>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800b430:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b434:	f003 0303 	and.w	r3, r3, #3
 800b438:	2b01      	cmp	r3, #1
 800b43a:	d105      	bne.n	800b448 <create_name+0x3d4>
 800b43c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b440:	f043 0310 	orr.w	r3, r3, #16
 800b444:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800b448:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b44c:	f003 030c 	and.w	r3, r3, #12
 800b450:	2b04      	cmp	r3, #4
 800b452:	d105      	bne.n	800b460 <create_name+0x3ec>
 800b454:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b458:	f043 0308 	orr.w	r3, r3, #8
 800b45c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b466:	330b      	adds	r3, #11
 800b468:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b46c:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800b46e:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 800b470:	4618      	mov	r0, r3
 800b472:	3728      	adds	r7, #40	; 0x28
 800b474:	46bd      	mov	sp, r7
 800b476:	bd80      	pop	{r7, pc}

0800b478 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b478:	b580      	push	{r7, lr}
 800b47a:	b084      	sub	sp, #16
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
 800b480:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800b482:	683b      	ldr	r3, [r7, #0]
 800b484:	781b      	ldrb	r3, [r3, #0]
 800b486:	2b2f      	cmp	r3, #47	; 0x2f
 800b488:	d003      	beq.n	800b492 <follow_path+0x1a>
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	781b      	ldrb	r3, [r3, #0]
 800b48e:	2b5c      	cmp	r3, #92	; 0x5c
 800b490:	d102      	bne.n	800b498 <follow_path+0x20>
		path++;
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	3301      	adds	r3, #1
 800b496:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	2200      	movs	r2, #0
 800b49c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b4a0:	683b      	ldr	r3, [r7, #0]
 800b4a2:	781b      	ldrb	r3, [r3, #0]
 800b4a4:	2b1f      	cmp	r3, #31
 800b4a6:	d80a      	bhi.n	800b4be <follow_path+0x46>
		res = dir_sdi(dp, 0);
 800b4a8:	2100      	movs	r1, #0
 800b4aa:	6878      	ldr	r0, [r7, #4]
 800b4ac:	f7ff f844 	bl	800a538 <dir_sdi>
 800b4b0:	4603      	mov	r3, r0
 800b4b2:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800b4bc:	e045      	b.n	800b54a <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b4be:	463b      	mov	r3, r7
 800b4c0:	4619      	mov	r1, r3
 800b4c2:	6878      	ldr	r0, [r7, #4]
 800b4c4:	f7ff fdd6 	bl	800b074 <create_name>
 800b4c8:	4603      	mov	r3, r0
 800b4ca:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800b4cc:	7bfb      	ldrb	r3, [r7, #15]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d136      	bne.n	800b540 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800b4d2:	6878      	ldr	r0, [r7, #4]
 800b4d4:	f7ff fbff 	bl	800acd6 <dir_find>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b4e2:	7adb      	ldrb	r3, [r3, #11]
 800b4e4:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800b4e6:	7bfb      	ldrb	r3, [r7, #15]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d00a      	beq.n	800b502 <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b4ec:	7bfb      	ldrb	r3, [r7, #15]
 800b4ee:	2b04      	cmp	r3, #4
 800b4f0:	d128      	bne.n	800b544 <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b4f2:	7bbb      	ldrb	r3, [r7, #14]
 800b4f4:	f003 0304 	and.w	r3, r3, #4
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d123      	bne.n	800b544 <follow_path+0xcc>
 800b4fc:	2305      	movs	r3, #5
 800b4fe:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 800b500:	e020      	b.n	800b544 <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b502:	7bbb      	ldrb	r3, [r7, #14]
 800b504:	f003 0304 	and.w	r3, r3, #4
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d11d      	bne.n	800b548 <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b512:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800b514:	68bb      	ldr	r3, [r7, #8]
 800b516:	330b      	adds	r3, #11
 800b518:	781b      	ldrb	r3, [r3, #0]
 800b51a:	f003 0310 	and.w	r3, r3, #16
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d102      	bne.n	800b528 <follow_path+0xb0>
				res = FR_NO_PATH; break;
 800b522:	2305      	movs	r3, #5
 800b524:	73fb      	strb	r3, [r7, #15]
 800b526:	e010      	b.n	800b54a <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b52e:	68b9      	ldr	r1, [r7, #8]
 800b530:	4618      	mov	r0, r3
 800b532:	f7ff f9d6 	bl	800a8e2 <ld_clust>
 800b536:	4602      	mov	r2, r0
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b53e:	e7be      	b.n	800b4be <follow_path+0x46>
			if (res != FR_OK) break;
 800b540:	bf00      	nop
 800b542:	e002      	b.n	800b54a <follow_path+0xd2>
				break;
 800b544:	bf00      	nop
 800b546:	e000      	b.n	800b54a <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b548:	bf00      	nop
		}
	}

	return res;
 800b54a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b54c:	4618      	mov	r0, r3
 800b54e:	3710      	adds	r7, #16
 800b550:	46bd      	mov	sp, r7
 800b552:	bd80      	pop	{r7, pc}

0800b554 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b554:	b480      	push	{r7}
 800b556:	b087      	sub	sp, #28
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b55c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b560:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d031      	beq.n	800b5ce <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	617b      	str	r3, [r7, #20]
 800b570:	e002      	b.n	800b578 <get_ldnumber+0x24>
 800b572:	697b      	ldr	r3, [r7, #20]
 800b574:	3301      	adds	r3, #1
 800b576:	617b      	str	r3, [r7, #20]
 800b578:	697b      	ldr	r3, [r7, #20]
 800b57a:	781b      	ldrb	r3, [r3, #0]
 800b57c:	2b1f      	cmp	r3, #31
 800b57e:	d903      	bls.n	800b588 <get_ldnumber+0x34>
 800b580:	697b      	ldr	r3, [r7, #20]
 800b582:	781b      	ldrb	r3, [r3, #0]
 800b584:	2b3a      	cmp	r3, #58	; 0x3a
 800b586:	d1f4      	bne.n	800b572 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b588:	697b      	ldr	r3, [r7, #20]
 800b58a:	781b      	ldrb	r3, [r3, #0]
 800b58c:	2b3a      	cmp	r3, #58	; 0x3a
 800b58e:	d11c      	bne.n	800b5ca <get_ldnumber+0x76>
			tp = *path;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	1c5a      	adds	r2, r3, #1
 800b59a:	60fa      	str	r2, [r7, #12]
 800b59c:	781b      	ldrb	r3, [r3, #0]
 800b59e:	3b30      	subs	r3, #48	; 0x30
 800b5a0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b5a2:	68bb      	ldr	r3, [r7, #8]
 800b5a4:	2b09      	cmp	r3, #9
 800b5a6:	d80e      	bhi.n	800b5c6 <get_ldnumber+0x72>
 800b5a8:	68fa      	ldr	r2, [r7, #12]
 800b5aa:	697b      	ldr	r3, [r7, #20]
 800b5ac:	429a      	cmp	r2, r3
 800b5ae:	d10a      	bne.n	800b5c6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b5b0:	68bb      	ldr	r3, [r7, #8]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d107      	bne.n	800b5c6 <get_ldnumber+0x72>
					vol = (int)i;
 800b5b6:	68bb      	ldr	r3, [r7, #8]
 800b5b8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b5ba:	697b      	ldr	r3, [r7, #20]
 800b5bc:	3301      	adds	r3, #1
 800b5be:	617b      	str	r3, [r7, #20]
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	697a      	ldr	r2, [r7, #20]
 800b5c4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b5c6:	693b      	ldr	r3, [r7, #16]
 800b5c8:	e002      	b.n	800b5d0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b5ce:	693b      	ldr	r3, [r7, #16]
}
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	371c      	adds	r7, #28
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	bc80      	pop	{r7}
 800b5d8:	4770      	bx	lr
	...

0800b5dc <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b082      	sub	sp, #8
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
 800b5e4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b5f4:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800b5f8:	6839      	ldr	r1, [r7, #0]
 800b5fa:	6878      	ldr	r0, [r7, #4]
 800b5fc:	f7fe fbb3 	bl	8009d66 <move_window>
 800b600:	4603      	mov	r3, r0
 800b602:	2b00      	cmp	r3, #0
 800b604:	d001      	beq.n	800b60a <check_fs+0x2e>
		return 3;
 800b606:	2303      	movs	r3, #3
 800b608:	e04a      	b.n	800b6a0 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b610:	3301      	adds	r3, #1
 800b612:	781b      	ldrb	r3, [r3, #0]
 800b614:	021b      	lsls	r3, r3, #8
 800b616:	b21a      	sxth	r2, r3
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800b61e:	b21b      	sxth	r3, r3
 800b620:	4313      	orrs	r3, r2
 800b622:	b21b      	sxth	r3, r3
 800b624:	4a20      	ldr	r2, [pc, #128]	; (800b6a8 <check_fs+0xcc>)
 800b626:	4293      	cmp	r3, r2
 800b628:	d001      	beq.n	800b62e <check_fs+0x52>
		return 2;
 800b62a:	2302      	movs	r3, #2
 800b62c:	e038      	b.n	800b6a0 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	3336      	adds	r3, #54	; 0x36
 800b632:	3303      	adds	r3, #3
 800b634:	781b      	ldrb	r3, [r3, #0]
 800b636:	061a      	lsls	r2, r3, #24
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	3336      	adds	r3, #54	; 0x36
 800b63c:	3302      	adds	r3, #2
 800b63e:	781b      	ldrb	r3, [r3, #0]
 800b640:	041b      	lsls	r3, r3, #16
 800b642:	4313      	orrs	r3, r2
 800b644:	687a      	ldr	r2, [r7, #4]
 800b646:	3236      	adds	r2, #54	; 0x36
 800b648:	3201      	adds	r2, #1
 800b64a:	7812      	ldrb	r2, [r2, #0]
 800b64c:	0212      	lsls	r2, r2, #8
 800b64e:	4313      	orrs	r3, r2
 800b650:	687a      	ldr	r2, [r7, #4]
 800b652:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 800b656:	4313      	orrs	r3, r2
 800b658:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b65c:	4a13      	ldr	r2, [pc, #76]	; (800b6ac <check_fs+0xd0>)
 800b65e:	4293      	cmp	r3, r2
 800b660:	d101      	bne.n	800b666 <check_fs+0x8a>
		return 0;
 800b662:	2300      	movs	r3, #0
 800b664:	e01c      	b.n	800b6a0 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	3352      	adds	r3, #82	; 0x52
 800b66a:	3303      	adds	r3, #3
 800b66c:	781b      	ldrb	r3, [r3, #0]
 800b66e:	061a      	lsls	r2, r3, #24
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	3352      	adds	r3, #82	; 0x52
 800b674:	3302      	adds	r3, #2
 800b676:	781b      	ldrb	r3, [r3, #0]
 800b678:	041b      	lsls	r3, r3, #16
 800b67a:	4313      	orrs	r3, r2
 800b67c:	687a      	ldr	r2, [r7, #4]
 800b67e:	3252      	adds	r2, #82	; 0x52
 800b680:	3201      	adds	r2, #1
 800b682:	7812      	ldrb	r2, [r2, #0]
 800b684:	0212      	lsls	r2, r2, #8
 800b686:	4313      	orrs	r3, r2
 800b688:	687a      	ldr	r2, [r7, #4]
 800b68a:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 800b68e:	4313      	orrs	r3, r2
 800b690:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b694:	4a05      	ldr	r2, [pc, #20]	; (800b6ac <check_fs+0xd0>)
 800b696:	4293      	cmp	r3, r2
 800b698:	d101      	bne.n	800b69e <check_fs+0xc2>
		return 0;
 800b69a:	2300      	movs	r3, #0
 800b69c:	e000      	b.n	800b6a0 <check_fs+0xc4>

	return 1;
 800b69e:	2301      	movs	r3, #1
}
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	3708      	adds	r7, #8
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	bd80      	pop	{r7, pc}
 800b6a8:	ffffaa55 	.word	0xffffaa55
 800b6ac:	00544146 	.word	0x00544146

0800b6b0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b096      	sub	sp, #88	; 0x58
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	60f8      	str	r0, [r7, #12]
 800b6b8:	60b9      	str	r1, [r7, #8]
 800b6ba:	4613      	mov	r3, r2
 800b6bc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b6c4:	68b8      	ldr	r0, [r7, #8]
 800b6c6:	f7ff ff45 	bl	800b554 <get_ldnumber>
 800b6ca:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b6cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	da01      	bge.n	800b6d6 <find_volume+0x26>
 800b6d2:	230b      	movs	r3, #11
 800b6d4:	e2aa      	b.n	800bc2c <find_volume+0x57c>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b6d6:	4a9e      	ldr	r2, [pc, #632]	; (800b950 <find_volume+0x2a0>)
 800b6d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b6de:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b6e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d101      	bne.n	800b6ea <find_volume+0x3a>
 800b6e6:	230c      	movs	r3, #12
 800b6e8:	e2a0      	b.n	800bc2c <find_volume+0x57c>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b6ee:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 800b6f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6f2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d01b      	beq.n	800b732 <find_volume+0x82>
		stat = disk_status(fs->drv);
 800b6fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6fc:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800b700:	4618      	mov	r0, r3
 800b702:	f7fe f821 	bl	8009748 <disk_status>
 800b706:	4603      	mov	r3, r0
 800b708:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b70c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b710:	f003 0301 	and.w	r3, r3, #1
 800b714:	2b00      	cmp	r3, #0
 800b716:	d10c      	bne.n	800b732 <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800b718:	79fb      	ldrb	r3, [r7, #7]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d007      	beq.n	800b72e <find_volume+0x7e>
 800b71e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b722:	f003 0304 	and.w	r3, r3, #4
 800b726:	2b00      	cmp	r3, #0
 800b728:	d001      	beq.n	800b72e <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 800b72a:	230a      	movs	r3, #10
 800b72c:	e27e      	b.n	800bc2c <find_volume+0x57c>
			return FR_OK;				/* The file system object is valid */
 800b72e:	2300      	movs	r3, #0
 800b730:	e27c      	b.n	800bc2c <find_volume+0x57c>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b734:	2200      	movs	r2, #0
 800b736:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b73a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b73c:	b2da      	uxtb	r2, r3
 800b73e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b740:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b746:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800b74a:	4618      	mov	r0, r3
 800b74c:	f7fe f816 	bl	800977c <disk_initialize>
 800b750:	4603      	mov	r3, r0
 800b752:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800b756:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b75a:	f003 0301 	and.w	r3, r3, #1
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d001      	beq.n	800b766 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b762:	2303      	movs	r3, #3
 800b764:	e262      	b.n	800bc2c <find_volume+0x57c>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800b766:	79fb      	ldrb	r3, [r7, #7]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d007      	beq.n	800b77c <find_volume+0xcc>
 800b76c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b770:	f003 0304 	and.w	r3, r3, #4
 800b774:	2b00      	cmp	r3, #0
 800b776:	d001      	beq.n	800b77c <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 800b778:	230a      	movs	r3, #10
 800b77a:	e257      	b.n	800bc2c <find_volume+0x57c>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 800b77c:	2300      	movs	r3, #0
 800b77e:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800b780:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b782:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b784:	f7ff ff2a 	bl	800b5dc <check_fs>
 800b788:	4603      	mov	r3, r0
 800b78a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800b78e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b792:	2b01      	cmp	r3, #1
 800b794:	d155      	bne.n	800b842 <find_volume+0x192>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800b796:	2300      	movs	r3, #0
 800b798:	643b      	str	r3, [r7, #64]	; 0x40
 800b79a:	e029      	b.n	800b7f0 <find_volume+0x140>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800b79c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b79e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7a0:	011b      	lsls	r3, r3, #4
 800b7a2:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800b7a6:	4413      	add	r3, r2
 800b7a8:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800b7aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ac:	3304      	adds	r3, #4
 800b7ae:	781b      	ldrb	r3, [r3, #0]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d012      	beq.n	800b7da <find_volume+0x12a>
 800b7b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7b6:	330b      	adds	r3, #11
 800b7b8:	781b      	ldrb	r3, [r3, #0]
 800b7ba:	061a      	lsls	r2, r3, #24
 800b7bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7be:	330a      	adds	r3, #10
 800b7c0:	781b      	ldrb	r3, [r3, #0]
 800b7c2:	041b      	lsls	r3, r3, #16
 800b7c4:	4313      	orrs	r3, r2
 800b7c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b7c8:	3209      	adds	r2, #9
 800b7ca:	7812      	ldrb	r2, [r2, #0]
 800b7cc:	0212      	lsls	r2, r2, #8
 800b7ce:	4313      	orrs	r3, r2
 800b7d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b7d2:	3208      	adds	r2, #8
 800b7d4:	7812      	ldrb	r2, [r2, #0]
 800b7d6:	431a      	orrs	r2, r3
 800b7d8:	e000      	b.n	800b7dc <find_volume+0x12c>
 800b7da:	2200      	movs	r2, #0
 800b7dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7de:	009b      	lsls	r3, r3, #2
 800b7e0:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800b7e4:	440b      	add	r3, r1
 800b7e6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800b7ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7ec:	3301      	adds	r3, #1
 800b7ee:	643b      	str	r3, [r7, #64]	; 0x40
 800b7f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7f2:	2b03      	cmp	r3, #3
 800b7f4:	d9d2      	bls.n	800b79c <find_volume+0xec>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800b7fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d002      	beq.n	800b806 <find_volume+0x156>
 800b800:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b802:	3b01      	subs	r3, #1
 800b804:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800b806:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b808:	009b      	lsls	r3, r3, #2
 800b80a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b80e:	4413      	add	r3, r2
 800b810:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b814:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800b816:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d005      	beq.n	800b828 <find_volume+0x178>
 800b81c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b81e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b820:	f7ff fedc 	bl	800b5dc <check_fs>
 800b824:	4603      	mov	r3, r0
 800b826:	e000      	b.n	800b82a <find_volume+0x17a>
 800b828:	2302      	movs	r3, #2
 800b82a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800b82e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b832:	2b00      	cmp	r3, #0
 800b834:	d005      	beq.n	800b842 <find_volume+0x192>
 800b836:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b838:	3301      	adds	r3, #1
 800b83a:	643b      	str	r3, [r7, #64]	; 0x40
 800b83c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b83e:	2b03      	cmp	r3, #3
 800b840:	d9e1      	bls.n	800b806 <find_volume+0x156>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b842:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b846:	2b03      	cmp	r3, #3
 800b848:	d101      	bne.n	800b84e <find_volume+0x19e>
 800b84a:	2301      	movs	r3, #1
 800b84c:	e1ee      	b.n	800bc2c <find_volume+0x57c>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800b84e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b852:	2b00      	cmp	r3, #0
 800b854:	d001      	beq.n	800b85a <find_volume+0x1aa>
 800b856:	230d      	movs	r3, #13
 800b858:	e1e8      	b.n	800bc2c <find_volume+0x57c>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b85a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b85c:	7b1b      	ldrb	r3, [r3, #12]
 800b85e:	021b      	lsls	r3, r3, #8
 800b860:	b21a      	sxth	r2, r3
 800b862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b864:	7adb      	ldrb	r3, [r3, #11]
 800b866:	b21b      	sxth	r3, r3
 800b868:	4313      	orrs	r3, r2
 800b86a:	b21b      	sxth	r3, r3
 800b86c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b870:	d001      	beq.n	800b876 <find_volume+0x1c6>
		return FR_NO_FILESYSTEM;
 800b872:	230d      	movs	r3, #13
 800b874:	e1da      	b.n	800bc2c <find_volume+0x57c>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800b876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b878:	7ddb      	ldrb	r3, [r3, #23]
 800b87a:	021b      	lsls	r3, r3, #8
 800b87c:	b21a      	sxth	r2, r3
 800b87e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b880:	7d9b      	ldrb	r3, [r3, #22]
 800b882:	b21b      	sxth	r3, r3
 800b884:	4313      	orrs	r3, r2
 800b886:	b21b      	sxth	r3, r3
 800b888:	b29b      	uxth	r3, r3
 800b88a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800b88c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d112      	bne.n	800b8b8 <find_volume+0x208>
 800b892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b894:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800b898:	061a      	lsls	r2, r3, #24
 800b89a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b89c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800b8a0:	041b      	lsls	r3, r3, #16
 800b8a2:	4313      	orrs	r3, r2
 800b8a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b8a6:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800b8aa:	0212      	lsls	r2, r2, #8
 800b8ac:	4313      	orrs	r3, r2
 800b8ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b8b0:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800b8b4:	4313      	orrs	r3, r2
 800b8b6:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 800b8b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b8bc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800b8c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8c2:	7c1a      	ldrb	r2, [r3, #16]
 800b8c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8c6:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800b8ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8cc:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800b8d0:	2b01      	cmp	r3, #1
 800b8d2:	d006      	beq.n	800b8e2 <find_volume+0x232>
 800b8d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8d6:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800b8da:	2b02      	cmp	r3, #2
 800b8dc:	d001      	beq.n	800b8e2 <find_volume+0x232>
		return FR_NO_FILESYSTEM;
 800b8de:	230d      	movs	r3, #13
 800b8e0:	e1a4      	b.n	800bc2c <find_volume+0x57c>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800b8e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8e4:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800b8e8:	461a      	mov	r2, r3
 800b8ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8ec:	fb02 f303 	mul.w	r3, r2, r3
 800b8f0:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800b8f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8f4:	7b5a      	ldrb	r2, [r3, #13]
 800b8f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8f8:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800b8fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8fe:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800b902:	2b00      	cmp	r3, #0
 800b904:	d00a      	beq.n	800b91c <find_volume+0x26c>
 800b906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b908:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800b90c:	461a      	mov	r2, r3
 800b90e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b910:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800b914:	3b01      	subs	r3, #1
 800b916:	4013      	ands	r3, r2
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d001      	beq.n	800b920 <find_volume+0x270>
		return FR_NO_FILESYSTEM;
 800b91c:	230d      	movs	r3, #13
 800b91e:	e185      	b.n	800bc2c <find_volume+0x57c>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800b920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b922:	7c9b      	ldrb	r3, [r3, #18]
 800b924:	021b      	lsls	r3, r3, #8
 800b926:	b21a      	sxth	r2, r3
 800b928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b92a:	7c5b      	ldrb	r3, [r3, #17]
 800b92c:	b21b      	sxth	r3, r3
 800b92e:	4313      	orrs	r3, r2
 800b930:	b21b      	sxth	r3, r3
 800b932:	b29a      	uxth	r2, r3
 800b934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b936:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800b93a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b93c:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800b940:	f003 030f 	and.w	r3, r3, #15
 800b944:	b29b      	uxth	r3, r3
 800b946:	2b00      	cmp	r3, #0
 800b948:	d004      	beq.n	800b954 <find_volume+0x2a4>
		return FR_NO_FILESYSTEM;
 800b94a:	230d      	movs	r3, #13
 800b94c:	e16e      	b.n	800bc2c <find_volume+0x57c>
 800b94e:	bf00      	nop
 800b950:	20000204 	.word	0x20000204

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800b954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b956:	7d1b      	ldrb	r3, [r3, #20]
 800b958:	021b      	lsls	r3, r3, #8
 800b95a:	b21a      	sxth	r2, r3
 800b95c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b95e:	7cdb      	ldrb	r3, [r3, #19]
 800b960:	b21b      	sxth	r3, r3
 800b962:	4313      	orrs	r3, r2
 800b964:	b21b      	sxth	r3, r3
 800b966:	b29b      	uxth	r3, r3
 800b968:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800b96a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d112      	bne.n	800b996 <find_volume+0x2e6>
 800b970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b972:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800b976:	061a      	lsls	r2, r3, #24
 800b978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b97a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800b97e:	041b      	lsls	r3, r3, #16
 800b980:	4313      	orrs	r3, r2
 800b982:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b984:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800b988:	0212      	lsls	r2, r2, #8
 800b98a:	4313      	orrs	r3, r2
 800b98c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b98e:	f892 2020 	ldrb.w	r2, [r2, #32]
 800b992:	4313      	orrs	r3, r2
 800b994:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800b996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b998:	7bdb      	ldrb	r3, [r3, #15]
 800b99a:	021b      	lsls	r3, r3, #8
 800b99c:	b21a      	sxth	r2, r3
 800b99e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9a0:	7b9b      	ldrb	r3, [r3, #14]
 800b9a2:	b21b      	sxth	r3, r3
 800b9a4:	4313      	orrs	r3, r2
 800b9a6:	b21b      	sxth	r3, r3
 800b9a8:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800b9aa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d101      	bne.n	800b9b4 <find_volume+0x304>
 800b9b0:	230d      	movs	r3, #13
 800b9b2:	e13b      	b.n	800bc2c <find_volume+0x57c>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800b9b4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b9b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9b8:	4413      	add	r3, r2
 800b9ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b9bc:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 800b9c0:	0912      	lsrs	r2, r2, #4
 800b9c2:	b292      	uxth	r2, r2
 800b9c4:	4413      	add	r3, r2
 800b9c6:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b9c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b9ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9cc:	429a      	cmp	r2, r3
 800b9ce:	d201      	bcs.n	800b9d4 <find_volume+0x324>
 800b9d0:	230d      	movs	r3, #13
 800b9d2:	e12b      	b.n	800bc2c <find_volume+0x57c>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800b9d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b9d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9d8:	1ad3      	subs	r3, r2, r3
 800b9da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b9dc:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800b9e0:	fbb3 f3f2 	udiv	r3, r3, r2
 800b9e4:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800b9e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d101      	bne.n	800b9f0 <find_volume+0x340>
 800b9ec:	230d      	movs	r3, #13
 800b9ee:	e11d      	b.n	800bc2c <find_volume+0x57c>
	fmt = FS_FAT12;
 800b9f0:	2301      	movs	r3, #1
 800b9f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800b9f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9f8:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b9fc:	4293      	cmp	r3, r2
 800b9fe:	d902      	bls.n	800ba06 <find_volume+0x356>
 800ba00:	2302      	movs	r3, #2
 800ba02:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800ba06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba08:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ba0c:	4293      	cmp	r3, r2
 800ba0e:	d902      	bls.n	800ba16 <find_volume+0x366>
 800ba10:	2303      	movs	r3, #3
 800ba12:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800ba16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba18:	1c9a      	adds	r2, r3, #2
 800ba1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba1c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 800ba20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba22:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ba24:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800ba28:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ba2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba2c:	441a      	add	r2, r3
 800ba2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba30:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 800ba34:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ba36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba38:	441a      	add	r2, r3
 800ba3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba3c:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	if (fmt == FS_FAT32) {
 800ba40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ba44:	2b03      	cmp	r3, #3
 800ba46:	d121      	bne.n	800ba8c <find_volume+0x3dc>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800ba48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba4a:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d001      	beq.n	800ba56 <find_volume+0x3a6>
 800ba52:	230d      	movs	r3, #13
 800ba54:	e0ea      	b.n	800bc2c <find_volume+0x57c>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800ba56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba58:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ba5c:	061a      	lsls	r2, r3, #24
 800ba5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba60:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800ba64:	041b      	lsls	r3, r3, #16
 800ba66:	4313      	orrs	r3, r2
 800ba68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba6a:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800ba6e:	0212      	lsls	r2, r2, #8
 800ba70:	4313      	orrs	r3, r2
 800ba72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba74:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800ba78:	431a      	orrs	r2, r3
 800ba7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba7c:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 800ba80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba82:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ba86:	009b      	lsls	r3, r3, #2
 800ba88:	647b      	str	r3, [r7, #68]	; 0x44
 800ba8a:	e025      	b.n	800bad8 <find_volume+0x428>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800ba8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba8e:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d101      	bne.n	800ba9a <find_volume+0x3ea>
 800ba96:	230d      	movs	r3, #13
 800ba98:	e0c8      	b.n	800bc2c <find_volume+0x57c>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800ba9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba9c:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800baa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800baa2:	441a      	add	r2, r3
 800baa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baa6:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800baaa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800baae:	2b02      	cmp	r3, #2
 800bab0:	d104      	bne.n	800babc <find_volume+0x40c>
 800bab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bab4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bab8:	005b      	lsls	r3, r3, #1
 800baba:	e00c      	b.n	800bad6 <find_volume+0x426>
 800babc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800babe:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800bac2:	4613      	mov	r3, r2
 800bac4:	005b      	lsls	r3, r3, #1
 800bac6:	4413      	add	r3, r2
 800bac8:	085a      	lsrs	r2, r3, #1
 800baca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bacc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bad0:	f003 0301 	and.w	r3, r3, #1
 800bad4:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800bad6:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800bad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bada:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800bade:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bae0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800bae4:	0a5b      	lsrs	r3, r3, #9
 800bae6:	429a      	cmp	r2, r3
 800bae8:	d201      	bcs.n	800baee <find_volume+0x43e>
		return FR_NO_FILESYSTEM;
 800baea:	230d      	movs	r3, #13
 800baec:	e09e      	b.n	800bc2c <find_volume+0x57c>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800baee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baf0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800baf4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 800baf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bafa:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800bafe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb00:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800bb04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb06:	2280      	movs	r2, #128	; 0x80
 800bb08:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800bb0c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bb10:	2b03      	cmp	r3, #3
 800bb12:	d177      	bne.n	800bc04 <find_volume+0x554>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800bb14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb16:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bb1a:	021b      	lsls	r3, r3, #8
 800bb1c:	b21a      	sxth	r2, r3
 800bb1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb20:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bb24:	b21b      	sxth	r3, r3
 800bb26:	4313      	orrs	r3, r2
 800bb28:	b21b      	sxth	r3, r3
 800bb2a:	2b01      	cmp	r3, #1
 800bb2c:	d16a      	bne.n	800bc04 <find_volume+0x554>
		&& move_window(fs, bsect + 1) == FR_OK)
 800bb2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb30:	3301      	adds	r3, #1
 800bb32:	4619      	mov	r1, r3
 800bb34:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bb36:	f7fe f916 	bl	8009d66 <move_window>
 800bb3a:	4603      	mov	r3, r0
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d161      	bne.n	800bc04 <find_volume+0x554>
	{
		fs->fsi_flag = 0;
 800bb40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb42:	2200      	movs	r2, #0
 800bb44:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800bb48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb4a:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 800bb4e:	021b      	lsls	r3, r3, #8
 800bb50:	b21a      	sxth	r2, r3
 800bb52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb54:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800bb58:	b21b      	sxth	r3, r3
 800bb5a:	4313      	orrs	r3, r2
 800bb5c:	b21b      	sxth	r3, r3
 800bb5e:	4a35      	ldr	r2, [pc, #212]	; (800bc34 <find_volume+0x584>)
 800bb60:	4293      	cmp	r3, r2
 800bb62:	d14f      	bne.n	800bc04 <find_volume+0x554>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800bb64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb66:	78db      	ldrb	r3, [r3, #3]
 800bb68:	061a      	lsls	r2, r3, #24
 800bb6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb6c:	789b      	ldrb	r3, [r3, #2]
 800bb6e:	041b      	lsls	r3, r3, #16
 800bb70:	4313      	orrs	r3, r2
 800bb72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bb74:	7852      	ldrb	r2, [r2, #1]
 800bb76:	0212      	lsls	r2, r2, #8
 800bb78:	4313      	orrs	r3, r2
 800bb7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bb7c:	7812      	ldrb	r2, [r2, #0]
 800bb7e:	4313      	orrs	r3, r2
 800bb80:	4a2d      	ldr	r2, [pc, #180]	; (800bc38 <find_volume+0x588>)
 800bb82:	4293      	cmp	r3, r2
 800bb84:	d13e      	bne.n	800bc04 <find_volume+0x554>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800bb86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb88:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 800bb8c:	061a      	lsls	r2, r3, #24
 800bb8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb90:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 800bb94:	041b      	lsls	r3, r3, #16
 800bb96:	4313      	orrs	r3, r2
 800bb98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bb9a:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 800bb9e:	0212      	lsls	r2, r2, #8
 800bba0:	4313      	orrs	r3, r2
 800bba2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bba4:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 800bba8:	4313      	orrs	r3, r2
 800bbaa:	4a24      	ldr	r2, [pc, #144]	; (800bc3c <find_volume+0x58c>)
 800bbac:	4293      	cmp	r3, r2
 800bbae:	d129      	bne.n	800bc04 <find_volume+0x554>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800bbb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbb2:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800bbb6:	061a      	lsls	r2, r3, #24
 800bbb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbba:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 800bbbe:	041b      	lsls	r3, r3, #16
 800bbc0:	4313      	orrs	r3, r2
 800bbc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bbc4:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 800bbc8:	0212      	lsls	r2, r2, #8
 800bbca:	4313      	orrs	r3, r2
 800bbcc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bbce:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 800bbd2:	431a      	orrs	r2, r3
 800bbd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbd6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800bbda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbdc:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 800bbe0:	061a      	lsls	r2, r3, #24
 800bbe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbe4:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 800bbe8:	041b      	lsls	r3, r3, #16
 800bbea:	4313      	orrs	r3, r2
 800bbec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bbee:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 800bbf2:	0212      	lsls	r2, r2, #8
 800bbf4:	4313      	orrs	r3, r2
 800bbf6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bbf8:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 800bbfc:	431a      	orrs	r2, r3
 800bbfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc00:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800bc04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc06:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800bc0a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 800bc0e:	4b0c      	ldr	r3, [pc, #48]	; (800bc40 <find_volume+0x590>)
 800bc10:	881b      	ldrh	r3, [r3, #0]
 800bc12:	3301      	adds	r3, #1
 800bc14:	b29a      	uxth	r2, r3
 800bc16:	4b0a      	ldr	r3, [pc, #40]	; (800bc40 <find_volume+0x590>)
 800bc18:	801a      	strh	r2, [r3, #0]
 800bc1a:	4b09      	ldr	r3, [pc, #36]	; (800bc40 <find_volume+0x590>)
 800bc1c:	881a      	ldrh	r2, [r3, #0]
 800bc1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc20:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800bc24:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bc26:	f7fe f82d 	bl	8009c84 <clear_lock>
#endif

	return FR_OK;
 800bc2a:	2300      	movs	r3, #0
}
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	3758      	adds	r7, #88	; 0x58
 800bc30:	46bd      	mov	sp, r7
 800bc32:	bd80      	pop	{r7, pc}
 800bc34:	ffffaa55 	.word	0xffffaa55
 800bc38:	41615252 	.word	0x41615252
 800bc3c:	61417272 	.word	0x61417272
 800bc40:	20000208 	.word	0x20000208

0800bc44 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b084      	sub	sp, #16
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d022      	beq.n	800bc9c <validate+0x58>
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d01d      	beq.n	800bc9c <validate+0x58>
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bc66:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d016      	beq.n	800bc9c <validate+0x58>
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bc74:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 800bc7e:	429a      	cmp	r2, r3
 800bc80:	d10c      	bne.n	800bc9c <validate+0x58>
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bc88:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	f7fd fd5b 	bl	8009748 <disk_status>
 800bc92:	4603      	mov	r3, r0
 800bc94:	f003 0301 	and.w	r3, r3, #1
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d001      	beq.n	800bca0 <validate+0x5c>
		return FR_INVALID_OBJECT;
 800bc9c:	2309      	movs	r3, #9
 800bc9e:	e000      	b.n	800bca2 <validate+0x5e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 800bca0:	2300      	movs	r3, #0
}
 800bca2:	4618      	mov	r0, r3
 800bca4:	3710      	adds	r7, #16
 800bca6:	46bd      	mov	sp, r7
 800bca8:	bd80      	pop	{r7, pc}
	...

0800bcac <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b088      	sub	sp, #32
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	60f8      	str	r0, [r7, #12]
 800bcb4:	60b9      	str	r1, [r7, #8]
 800bcb6:	4613      	mov	r3, r2
 800bcb8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800bcba:	68bb      	ldr	r3, [r7, #8]
 800bcbc:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800bcbe:	f107 0310 	add.w	r3, r7, #16
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	f7ff fc46 	bl	800b554 <get_ldnumber>
 800bcc8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800bcca:	69fb      	ldr	r3, [r7, #28]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	da01      	bge.n	800bcd4 <f_mount+0x28>
 800bcd0:	230b      	movs	r3, #11
 800bcd2:	e02d      	b.n	800bd30 <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800bcd4:	4a18      	ldr	r2, [pc, #96]	; (800bd38 <f_mount+0x8c>)
 800bcd6:	69fb      	ldr	r3, [r7, #28]
 800bcd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bcdc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800bcde:	69bb      	ldr	r3, [r7, #24]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d006      	beq.n	800bcf2 <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 800bce4:	69b8      	ldr	r0, [r7, #24]
 800bce6:	f7fd ffcd 	bl	8009c84 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800bcea:	69bb      	ldr	r3, [r7, #24]
 800bcec:	2200      	movs	r2, #0
 800bcee:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d003      	beq.n	800bd00 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800bd00:	68fa      	ldr	r2, [r7, #12]
 800bd02:	490d      	ldr	r1, [pc, #52]	; (800bd38 <f_mount+0x8c>)
 800bd04:	69fb      	ldr	r3, [r7, #28]
 800bd06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d002      	beq.n	800bd16 <f_mount+0x6a>
 800bd10:	79fb      	ldrb	r3, [r7, #7]
 800bd12:	2b01      	cmp	r3, #1
 800bd14:	d001      	beq.n	800bd1a <f_mount+0x6e>
 800bd16:	2300      	movs	r3, #0
 800bd18:	e00a      	b.n	800bd30 <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800bd1a:	f107 0108 	add.w	r1, r7, #8
 800bd1e:	f107 030c 	add.w	r3, r7, #12
 800bd22:	2200      	movs	r2, #0
 800bd24:	4618      	mov	r0, r3
 800bd26:	f7ff fcc3 	bl	800b6b0 <find_volume>
 800bd2a:	4603      	mov	r3, r0
 800bd2c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800bd2e:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd30:	4618      	mov	r0, r3
 800bd32:	3720      	adds	r7, #32
 800bd34:	46bd      	mov	sp, r7
 800bd36:	bd80      	pop	{r7, pc}
 800bd38:	20000204 	.word	0x20000204

0800bd3c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 800bd42:	af00      	add	r7, sp, #0
 800bd44:	f107 030c 	add.w	r3, r7, #12
 800bd48:	6018      	str	r0, [r3, #0]
 800bd4a:	f107 0308 	add.w	r3, r7, #8
 800bd4e:	6019      	str	r1, [r3, #0]
 800bd50:	1dfb      	adds	r3, r7, #7
 800bd52:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800bd54:	f107 030c 	add.w	r3, r7, #12
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d101      	bne.n	800bd62 <f_open+0x26>
 800bd5e:	2309      	movs	r3, #9
 800bd60:	e1f9      	b.n	800c156 <f_open+0x41a>
	fp->fs = 0;			/* Clear file object */
 800bd62:	f107 030c 	add.w	r3, r7, #12
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	2200      	movs	r2, #0
 800bd6a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800bd6e:	1dfb      	adds	r3, r7, #7
 800bd70:	1dfa      	adds	r2, r7, #7
 800bd72:	7812      	ldrb	r2, [r2, #0]
 800bd74:	f002 021f 	and.w	r2, r2, #31
 800bd78:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800bd7a:	1dfb      	adds	r3, r7, #7
 800bd7c:	781b      	ldrb	r3, [r3, #0]
 800bd7e:	f023 0301 	bic.w	r3, r3, #1
 800bd82:	b2da      	uxtb	r2, r3
 800bd84:	f107 0108 	add.w	r1, r7, #8
 800bd88:	f107 0320 	add.w	r3, r7, #32
 800bd8c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800bd90:	4618      	mov	r0, r3
 800bd92:	f7ff fc8d 	bl	800b6b0 <find_volume>
 800bd96:	4603      	mov	r3, r0
 800bd98:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800bd9c:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	f040 81d6 	bne.w	800c152 <f_open+0x416>
		INIT_BUF(dj);
 800bda6:	f107 0320 	add.w	r3, r7, #32
 800bdaa:	f107 0214 	add.w	r2, r7, #20
 800bdae:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
 800bdb2:	f107 0320 	add.w	r3, r7, #32
 800bdb6:	4a8b      	ldr	r2, [pc, #556]	; (800bfe4 <f_open+0x2a8>)
 800bdb8:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
		res = follow_path(&dj, path);	/* Follow the file path */
 800bdbc:	f107 0308 	add.w	r3, r7, #8
 800bdc0:	681a      	ldr	r2, [r3, #0]
 800bdc2:	f107 0320 	add.w	r3, r7, #32
 800bdc6:	4611      	mov	r1, r2
 800bdc8:	4618      	mov	r0, r3
 800bdca:	f7ff fb55 	bl	800b478 <follow_path>
 800bdce:	4603      	mov	r3, r0
 800bdd0:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
		dir = dj.dir;
 800bdd4:	f107 0320 	add.w	r3, r7, #32
 800bdd8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bddc:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800bde0:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d11a      	bne.n	800be1e <f_open+0xe2>
			if (!dir)	/* Default directory itself */
 800bde8:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d103      	bne.n	800bdf8 <f_open+0xbc>
				res = FR_INVALID_NAME;
 800bdf0:	2306      	movs	r3, #6
 800bdf2:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
 800bdf6:	e012      	b.n	800be1e <f_open+0xe2>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bdf8:	1dfb      	adds	r3, r7, #7
 800bdfa:	781b      	ldrb	r3, [r3, #0]
 800bdfc:	f023 0301 	bic.w	r3, r3, #1
 800be00:	2b00      	cmp	r3, #0
 800be02:	bf14      	ite	ne
 800be04:	2301      	movne	r3, #1
 800be06:	2300      	moveq	r3, #0
 800be08:	b2db      	uxtb	r3, r3
 800be0a:	461a      	mov	r2, r3
 800be0c:	f107 0320 	add.w	r3, r7, #32
 800be10:	4611      	mov	r1, r2
 800be12:	4618      	mov	r0, r3
 800be14:	f7fd fdac 	bl	8009970 <chk_lock>
 800be18:	4603      	mov	r3, r0
 800be1a:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800be1e:	1dfb      	adds	r3, r7, #7
 800be20:	781b      	ldrb	r3, [r3, #0]
 800be22:	f003 031c 	and.w	r3, r3, #28
 800be26:	2b00      	cmp	r3, #0
 800be28:	f000 80cc 	beq.w	800bfc4 <f_open+0x288>
			if (res != FR_OK) {					/* No file, create new */
 800be2c:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 800be30:	2b00      	cmp	r3, #0
 800be32:	d01f      	beq.n	800be74 <f_open+0x138>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800be34:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 800be38:	2b04      	cmp	r3, #4
 800be3a:	d10e      	bne.n	800be5a <f_open+0x11e>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800be3c:	f7fd fe04 	bl	8009a48 <enq_lock>
 800be40:	4603      	mov	r3, r0
 800be42:	2b00      	cmp	r3, #0
 800be44:	d006      	beq.n	800be54 <f_open+0x118>
 800be46:	f107 0320 	add.w	r3, r7, #32
 800be4a:	4618      	mov	r0, r3
 800be4c:	f7ff f804 	bl	800ae58 <dir_register>
 800be50:	4603      	mov	r3, r0
 800be52:	e000      	b.n	800be56 <f_open+0x11a>
 800be54:	2312      	movs	r3, #18
 800be56:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800be5a:	1dfb      	adds	r3, r7, #7
 800be5c:	1dfa      	adds	r2, r7, #7
 800be5e:	7812      	ldrb	r2, [r2, #0]
 800be60:	f042 0208 	orr.w	r2, r2, #8
 800be64:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 800be66:	f107 0320 	add.w	r3, r7, #32
 800be6a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800be6e:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 800be72:	e014      	b.n	800be9e <f_open+0x162>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800be74:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800be78:	330b      	adds	r3, #11
 800be7a:	781b      	ldrb	r3, [r3, #0]
 800be7c:	f003 0311 	and.w	r3, r3, #17
 800be80:	2b00      	cmp	r3, #0
 800be82:	d003      	beq.n	800be8c <f_open+0x150>
					res = FR_DENIED;
 800be84:	2307      	movs	r3, #7
 800be86:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
 800be8a:	e008      	b.n	800be9e <f_open+0x162>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800be8c:	1dfb      	adds	r3, r7, #7
 800be8e:	781b      	ldrb	r3, [r3, #0]
 800be90:	f003 0304 	and.w	r3, r3, #4
 800be94:	2b00      	cmp	r3, #0
 800be96:	d002      	beq.n	800be9e <f_open+0x162>
						res = FR_EXIST;
 800be98:	2308      	movs	r3, #8
 800be9a:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800be9e:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	f040 80b1 	bne.w	800c00a <f_open+0x2ce>
 800bea8:	1dfb      	adds	r3, r7, #7
 800beaa:	781b      	ldrb	r3, [r3, #0]
 800beac:	f003 0308 	and.w	r3, r3, #8
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	f000 80aa 	beq.w	800c00a <f_open+0x2ce>
				dw = GET_FATTIME();				/* Created time */
 800beb6:	f7fb fffd 	bl	8007eb4 <get_fattime>
 800beba:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
				ST_DWORD(dir + DIR_CrtTime, dw);
 800bebe:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800bec2:	330e      	adds	r3, #14
 800bec4:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 800bec8:	b2d2      	uxtb	r2, r2
 800beca:	701a      	strb	r2, [r3, #0]
 800becc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800bed0:	b29b      	uxth	r3, r3
 800bed2:	0a1b      	lsrs	r3, r3, #8
 800bed4:	b29a      	uxth	r2, r3
 800bed6:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800beda:	330f      	adds	r3, #15
 800bedc:	b2d2      	uxtb	r2, r2
 800bede:	701a      	strb	r2, [r3, #0]
 800bee0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800bee4:	0c1a      	lsrs	r2, r3, #16
 800bee6:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800beea:	3310      	adds	r3, #16
 800beec:	b2d2      	uxtb	r2, r2
 800beee:	701a      	strb	r2, [r3, #0]
 800bef0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800bef4:	0e1a      	lsrs	r2, r3, #24
 800bef6:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800befa:	3311      	adds	r3, #17
 800befc:	b2d2      	uxtb	r2, r2
 800befe:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800bf00:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800bf04:	330b      	adds	r3, #11
 800bf06:	2200      	movs	r2, #0
 800bf08:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800bf0a:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800bf0e:	331c      	adds	r3, #28
 800bf10:	2200      	movs	r2, #0
 800bf12:	701a      	strb	r2, [r3, #0]
 800bf14:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800bf18:	331d      	adds	r3, #29
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	701a      	strb	r2, [r3, #0]
 800bf1e:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800bf22:	331e      	adds	r3, #30
 800bf24:	2200      	movs	r2, #0
 800bf26:	701a      	strb	r2, [r3, #0]
 800bf28:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800bf2c:	331f      	adds	r3, #31
 800bf2e:	2200      	movs	r2, #0
 800bf30:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800bf32:	f107 0320 	add.w	r3, r7, #32
 800bf36:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bf3a:	f8d7 1250 	ldr.w	r1, [r7, #592]	; 0x250
 800bf3e:	4618      	mov	r0, r3
 800bf40:	f7fe fccf 	bl	800a8e2 <ld_clust>
 800bf44:	f8c7 0248 	str.w	r0, [r7, #584]	; 0x248
				st_clust(dir, 0);				/* cluster = 0 */
 800bf48:	2100      	movs	r1, #0
 800bf4a:	f8d7 0250 	ldr.w	r0, [r7, #592]	; 0x250
 800bf4e:	f7fe fcf5 	bl	800a93c <st_clust>
				dj.fs->wflag = 1;
 800bf52:	f107 0320 	add.w	r3, r7, #32
 800bf56:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bf5a:	2201      	movs	r2, #1
 800bf5c:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 800bf60:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d050      	beq.n	800c00a <f_open+0x2ce>
					dw = dj.fs->winsect;
 800bf68:	f107 0320 	add.w	r3, r7, #32
 800bf6c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bf70:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800bf74:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
					res = remove_chain(dj.fs, cl);
 800bf78:	f107 0320 	add.w	r3, r7, #32
 800bf7c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bf80:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 800bf84:	4618      	mov	r0, r3
 800bf86:	f7fe f9ac 	bl	800a2e2 <remove_chain>
 800bf8a:	4603      	mov	r3, r0
 800bf8c:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
					if (res == FR_OK) {
 800bf90:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d138      	bne.n	800c00a <f_open+0x2ce>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800bf98:	f107 0320 	add.w	r3, r7, #32
 800bf9c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bfa0:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 800bfa4:	3a01      	subs	r2, #1
 800bfa6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
						res = move_window(dj.fs, dw);
 800bfaa:	f107 0320 	add.w	r3, r7, #32
 800bfae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bfb2:	f8d7 124c 	ldr.w	r1, [r7, #588]	; 0x24c
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	f7fd fed5 	bl	8009d66 <move_window>
 800bfbc:	4603      	mov	r3, r0
 800bfbe:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
 800bfc2:	e022      	b.n	800c00a <f_open+0x2ce>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800bfc4:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d11e      	bne.n	800c00a <f_open+0x2ce>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800bfcc:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800bfd0:	330b      	adds	r3, #11
 800bfd2:	781b      	ldrb	r3, [r3, #0]
 800bfd4:	f003 0310 	and.w	r3, r3, #16
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d005      	beq.n	800bfe8 <f_open+0x2ac>
					res = FR_NO_FILE;
 800bfdc:	2304      	movs	r3, #4
 800bfde:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
 800bfe2:	e012      	b.n	800c00a <f_open+0x2ce>
 800bfe4:	20000224 	.word	0x20000224
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800bfe8:	1dfb      	adds	r3, r7, #7
 800bfea:	781b      	ldrb	r3, [r3, #0]
 800bfec:	f003 0302 	and.w	r3, r3, #2
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d00a      	beq.n	800c00a <f_open+0x2ce>
 800bff4:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800bff8:	330b      	adds	r3, #11
 800bffa:	781b      	ldrb	r3, [r3, #0]
 800bffc:	f003 0301 	and.w	r3, r3, #1
 800c000:	2b00      	cmp	r3, #0
 800c002:	d002      	beq.n	800c00a <f_open+0x2ce>
						res = FR_DENIED;
 800c004:	2307      	movs	r3, #7
 800c006:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
				}
			}
		}
		if (res == FR_OK) {
 800c00a:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d13d      	bne.n	800c08e <f_open+0x352>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c012:	1dfb      	adds	r3, r7, #7
 800c014:	781b      	ldrb	r3, [r3, #0]
 800c016:	f003 0308 	and.w	r3, r3, #8
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d005      	beq.n	800c02a <f_open+0x2ee>
				mode |= FA__WRITTEN;
 800c01e:	1dfb      	adds	r3, r7, #7
 800c020:	1dfa      	adds	r2, r7, #7
 800c022:	7812      	ldrb	r2, [r2, #0]
 800c024:	f042 0220 	orr.w	r2, r2, #32
 800c028:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800c02a:	f107 0320 	add.w	r3, r7, #32
 800c02e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c032:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 800c036:	f107 030c 	add.w	r3, r7, #12
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			fp->dir_ptr = dir;
 800c040:	f107 030c 	add.w	r3, r7, #12
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 800c04a:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c04e:	1dfb      	adds	r3, r7, #7
 800c050:	781b      	ldrb	r3, [r3, #0]
 800c052:	f023 0301 	bic.w	r3, r3, #1
 800c056:	2b00      	cmp	r3, #0
 800c058:	bf14      	ite	ne
 800c05a:	2301      	movne	r3, #1
 800c05c:	2300      	moveq	r3, #0
 800c05e:	b2db      	uxtb	r3, r3
 800c060:	461a      	mov	r2, r3
 800c062:	f107 0320 	add.w	r3, r7, #32
 800c066:	4611      	mov	r1, r2
 800c068:	4618      	mov	r0, r3
 800c06a:	f7fd fd11 	bl	8009a90 <inc_lock>
 800c06e:	4602      	mov	r2, r0
 800c070:	f107 030c 	add.w	r3, r7, #12
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 800c07a:	f107 030c 	add.w	r3, r7, #12
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800c084:	2b00      	cmp	r3, #0
 800c086:	d102      	bne.n	800c08e <f_open+0x352>
 800c088:	2302      	movs	r3, #2
 800c08a:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 800c08e:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 800c092:	2b00      	cmp	r3, #0
 800c094:	d15d      	bne.n	800c152 <f_open+0x416>
			fp->flag = mode;					/* File access mode */
 800c096:	f107 030c 	add.w	r3, r7, #12
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	1dfa      	adds	r2, r7, #7
 800c09e:	7812      	ldrb	r2, [r2, #0]
 800c0a0:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 800c0a4:	f107 030c 	add.w	r3, r7, #12
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800c0b0:	f107 0320 	add.w	r3, r7, #32
 800c0b4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c0b8:	f8d7 1250 	ldr.w	r1, [r7, #592]	; 0x250
 800c0bc:	4618      	mov	r0, r3
 800c0be:	f7fe fc10 	bl	800a8e2 <ld_clust>
 800c0c2:	4602      	mov	r2, r0
 800c0c4:	f107 030c 	add.w	r3, r7, #12
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800c0ce:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800c0d2:	331f      	adds	r3, #31
 800c0d4:	781b      	ldrb	r3, [r3, #0]
 800c0d6:	061a      	lsls	r2, r3, #24
 800c0d8:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800c0dc:	331e      	adds	r3, #30
 800c0de:	781b      	ldrb	r3, [r3, #0]
 800c0e0:	041b      	lsls	r3, r3, #16
 800c0e2:	4313      	orrs	r3, r2
 800c0e4:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 800c0e8:	321d      	adds	r2, #29
 800c0ea:	7812      	ldrb	r2, [r2, #0]
 800c0ec:	0212      	lsls	r2, r2, #8
 800c0ee:	4313      	orrs	r3, r2
 800c0f0:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 800c0f4:	321c      	adds	r2, #28
 800c0f6:	7812      	ldrb	r2, [r2, #0]
 800c0f8:	431a      	orrs	r2, r3
 800c0fa:	f107 030c 	add.w	r3, r7, #12
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->fptr = 0;						/* File pointer */
 800c104:	f107 030c 	add.w	r3, r7, #12
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	2200      	movs	r2, #0
 800c10c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			fp->dsect = 0;
 800c110:	f107 030c 	add.w	r3, r7, #12
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	2200      	movs	r2, #0
 800c118:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 800c11c:	f107 030c 	add.w	r3, r7, #12
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	2200      	movs	r2, #0
 800c124:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 800c128:	f107 0320 	add.w	r3, r7, #32
 800c12c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800c130:	f107 030c 	add.w	r3, r7, #12
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			fp->id = fp->fs->id;
 800c13a:	f107 030c 	add.w	r3, r7, #12
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c144:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 800c148:	f107 030c 	add.w	r3, r7, #12
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 800c152:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
}
 800c156:	4618      	mov	r0, r3
 800c158:	f507 7716 	add.w	r7, r7, #600	; 0x258
 800c15c:	46bd      	mov	sp, r7
 800c15e:	bd80      	pop	{r7, pc}

0800c160 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800c160:	b580      	push	{r7, lr}
 800c162:	b08a      	sub	sp, #40	; 0x28
 800c164:	af00      	add	r7, sp, #0
 800c166:	60f8      	str	r0, [r7, #12]
 800c168:	60b9      	str	r1, [r7, #8]
 800c16a:	607a      	str	r2, [r7, #4]
 800c16c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 800c16e:	68bb      	ldr	r3, [r7, #8]
 800c170:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800c172:	683b      	ldr	r3, [r7, #0]
 800c174:	2200      	movs	r2, #0
 800c176:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 800c178:	68f8      	ldr	r0, [r7, #12]
 800c17a:	f7ff fd63 	bl	800bc44 <validate>
 800c17e:	4603      	mov	r3, r0
 800c180:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800c182:	7dfb      	ldrb	r3, [r7, #23]
 800c184:	2b00      	cmp	r3, #0
 800c186:	d001      	beq.n	800c18c <f_write+0x2c>
 800c188:	7dfb      	ldrb	r3, [r7, #23]
 800c18a:	e192      	b.n	800c4b2 <f_write+0x352>
	if (fp->err)							/* Check error */
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800c192:	2b00      	cmp	r3, #0
 800c194:	d003      	beq.n	800c19e <f_write+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800c19c:	e189      	b.n	800c4b2 <f_write+0x352>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800c1a4:	f003 0302 	and.w	r3, r3, #2
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d101      	bne.n	800c1b0 <f_write+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 800c1ac:	2307      	movs	r3, #7
 800c1ae:	e180      	b.n	800c4b2 <f_write+0x352>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	441a      	add	r2, r3
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800c1c0:	429a      	cmp	r2, r3
 800c1c2:	f080 8158 	bcs.w	800c476 <f_write+0x316>
 800c1c6:	2300      	movs	r3, #0
 800c1c8:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 800c1ca:	e154      	b.n	800c476 <f_write+0x316>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800c1d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	f040 8114 	bne.w	800c404 <f_write+0x2a4>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800c1e2:	0a5b      	lsrs	r3, r3, #9
 800c1e4:	b2da      	uxtb	r2, r3
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c1ec:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800c1f0:	3b01      	subs	r3, #1
 800c1f2:	b2db      	uxtb	r3, r3
 800c1f4:	4013      	ands	r3, r2
 800c1f6:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 800c1f8:	7dbb      	ldrb	r3, [r7, #22]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d151      	bne.n	800c2a2 <f_write+0x142>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800c204:	2b00      	cmp	r3, #0
 800c206:	d10f      	bne.n	800c228 <f_write+0xc8>
					clst = fp->sclust;		/* Follow from the origin */
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c20e:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 800c210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c212:	2b00      	cmp	r3, #0
 800c214:	d121      	bne.n	800c25a <f_write+0xfa>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c21c:	2100      	movs	r1, #0
 800c21e:	4618      	mov	r0, r3
 800c220:	f7fe f8b9 	bl	800a396 <create_chain>
 800c224:	6278      	str	r0, [r7, #36]	; 0x24
 800c226:	e018      	b.n	800c25a <f_write+0xfa>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d008      	beq.n	800c244 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800c238:	4619      	mov	r1, r3
 800c23a:	68f8      	ldr	r0, [r7, #12]
 800c23c:	f7fe f948 	bl	800a4d0 <clmt_clust>
 800c240:	6278      	str	r0, [r7, #36]	; 0x24
 800c242:	e00a      	b.n	800c25a <f_write+0xfa>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c250:	4619      	mov	r1, r3
 800c252:	4610      	mov	r0, r2
 800c254:	f7fe f89f 	bl	800a396 <create_chain>
 800c258:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c25a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	f000 810f 	beq.w	800c480 <f_write+0x320>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800c262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c264:	2b01      	cmp	r3, #1
 800c266:	d105      	bne.n	800c274 <f_write+0x114>
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	2202      	movs	r2, #2
 800c26c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800c270:	2302      	movs	r3, #2
 800c272:	e11e      	b.n	800c4b2 <f_write+0x352>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800c274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c276:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c27a:	d105      	bne.n	800c288 <f_write+0x128>
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	2201      	movs	r2, #1
 800c280:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800c284:	2301      	movs	r3, #1
 800c286:	e114      	b.n	800c4b2 <f_write+0x352>
				fp->clust = clst;			/* Update current cluster */
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c28c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c296:	2b00      	cmp	r3, #0
 800c298:	d103      	bne.n	800c2a2 <f_write+0x142>
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c29e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800c2a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d01d      	beq.n	800c2ec <f_write+0x18c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c2b6:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800c2ba:	68f9      	ldr	r1, [r7, #12]
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800c2c2:	2301      	movs	r3, #1
 800c2c4:	f7fd faa0 	bl	8009808 <disk_write>
 800c2c8:	4603      	mov	r3, r0
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d005      	beq.n	800c2da <f_write+0x17a>
					ABORT(fp->fs, FR_DISK_ERR);
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	2201      	movs	r2, #1
 800c2d2:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800c2d6:	2301      	movs	r3, #1
 800c2d8:	e0eb      	b.n	800c4b2 <f_write+0x352>
				fp->flag &= ~FA__DIRTY;
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800c2e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c2e4:	b2da      	uxtb	r2, r3
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c2f8:	4619      	mov	r1, r3
 800c2fa:	4610      	mov	r0, r2
 800c2fc:	f7fd fe0e 	bl	8009f1c <clust2sect>
 800c300:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800c302:	693b      	ldr	r3, [r7, #16]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d105      	bne.n	800c314 <f_write+0x1b4>
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	2202      	movs	r2, #2
 800c30c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800c310:	2302      	movs	r3, #2
 800c312:	e0ce      	b.n	800c4b2 <f_write+0x352>
			sect += csect;
 800c314:	7dbb      	ldrb	r3, [r7, #22]
 800c316:	693a      	ldr	r2, [r7, #16]
 800c318:	4413      	add	r3, r2
 800c31a:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	0a5b      	lsrs	r3, r3, #9
 800c320:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800c322:	69fb      	ldr	r3, [r7, #28]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d048      	beq.n	800c3ba <f_write+0x25a>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800c328:	7dba      	ldrb	r2, [r7, #22]
 800c32a:	69fb      	ldr	r3, [r7, #28]
 800c32c:	4413      	add	r3, r2
 800c32e:	68fa      	ldr	r2, [r7, #12]
 800c330:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800c334:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800c338:	4293      	cmp	r3, r2
 800c33a:	d908      	bls.n	800c34e <f_write+0x1ee>
					cc = fp->fs->csize - csect;
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c342:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800c346:	461a      	mov	r2, r3
 800c348:	7dbb      	ldrb	r3, [r7, #22]
 800c34a:	1ad3      	subs	r3, r2, r3
 800c34c:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c354:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800c358:	69fb      	ldr	r3, [r7, #28]
 800c35a:	693a      	ldr	r2, [r7, #16]
 800c35c:	69b9      	ldr	r1, [r7, #24]
 800c35e:	f7fd fa53 	bl	8009808 <disk_write>
 800c362:	4603      	mov	r3, r0
 800c364:	2b00      	cmp	r3, #0
 800c366:	d005      	beq.n	800c374 <f_write+0x214>
					ABORT(fp->fs, FR_DISK_ERR);
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	2201      	movs	r2, #1
 800c36c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800c370:	2301      	movs	r3, #1
 800c372:	e09e      	b.n	800c4b2 <f_write+0x352>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800c37a:	693b      	ldr	r3, [r7, #16]
 800c37c:	1ad3      	subs	r3, r2, r3
 800c37e:	69fa      	ldr	r2, [r7, #28]
 800c380:	429a      	cmp	r2, r3
 800c382:	d916      	bls.n	800c3b2 <f_write+0x252>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 800c384:	68f8      	ldr	r0, [r7, #12]
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800c38c:	693b      	ldr	r3, [r7, #16]
 800c38e:	1ad3      	subs	r3, r2, r3
 800c390:	025b      	lsls	r3, r3, #9
 800c392:	69ba      	ldr	r2, [r7, #24]
 800c394:	4413      	add	r3, r2
 800c396:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c39a:	4619      	mov	r1, r3
 800c39c:	f7fd fa72 	bl	8009884 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800c3a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c3aa:	b2da      	uxtb	r2, r3
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800c3b2:	69fb      	ldr	r3, [r7, #28]
 800c3b4:	025b      	lsls	r3, r3, #9
 800c3b6:	623b      	str	r3, [r7, #32]
				continue;
 800c3b8:	e047      	b.n	800c44a <f_write+0x2ea>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c3c0:	693a      	ldr	r2, [r7, #16]
 800c3c2:	429a      	cmp	r2, r3
 800c3c4:	d01a      	beq.n	800c3fc <f_write+0x29c>
				if (fp->fptr < fp->fsize &&
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800c3d2:	429a      	cmp	r2, r3
 800c3d4:	d212      	bcs.n	800c3fc <f_write+0x29c>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c3dc:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800c3e0:	68f9      	ldr	r1, [r7, #12]
 800c3e2:	2301      	movs	r3, #1
 800c3e4:	693a      	ldr	r2, [r7, #16]
 800c3e6:	f7fd f9ef 	bl	80097c8 <disk_read>
 800c3ea:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d005      	beq.n	800c3fc <f_write+0x29c>
						ABORT(fp->fs, FR_DISK_ERR);
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	2201      	movs	r2, #1
 800c3f4:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800c3f8:	2301      	movs	r3, #1
 800c3fa:	e05a      	b.n	800c4b2 <f_write+0x352>
			}
#endif
			fp->dsect = sect;
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	693a      	ldr	r2, [r7, #16]
 800c400:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800c40a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c40e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800c412:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 800c414:	6a3a      	ldr	r2, [r7, #32]
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	429a      	cmp	r2, r3
 800c41a:	d901      	bls.n	800c420 <f_write+0x2c0>
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800c426:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c42a:	68fa      	ldr	r2, [r7, #12]
 800c42c:	4413      	add	r3, r2
 800c42e:	6a3a      	ldr	r2, [r7, #32]
 800c430:	69b9      	ldr	r1, [r7, #24]
 800c432:	4618      	mov	r0, r3
 800c434:	f7fd fa26 	bl	8009884 <mem_cpy>
		fp->flag |= FA__DIRTY;
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800c43e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c442:	b2da      	uxtb	r2, r3
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800c44a:	69ba      	ldr	r2, [r7, #24]
 800c44c:	6a3b      	ldr	r3, [r7, #32]
 800c44e:	4413      	add	r3, r2
 800c450:	61bb      	str	r3, [r7, #24]
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c458:	6a3b      	ldr	r3, [r7, #32]
 800c45a:	441a      	add	r2, r3
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 800c462:	683b      	ldr	r3, [r7, #0]
 800c464:	681a      	ldr	r2, [r3, #0]
 800c466:	6a3b      	ldr	r3, [r7, #32]
 800c468:	441a      	add	r2, r3
 800c46a:	683b      	ldr	r3, [r7, #0]
 800c46c:	601a      	str	r2, [r3, #0]
 800c46e:	687a      	ldr	r2, [r7, #4]
 800c470:	6a3b      	ldr	r3, [r7, #32]
 800c472:	1ad3      	subs	r3, r2, r3
 800c474:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	f47f aea7 	bne.w	800c1cc <f_write+0x6c>
 800c47e:	e000      	b.n	800c482 <f_write+0x322>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c480:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800c48e:	429a      	cmp	r2, r3
 800c490:	d905      	bls.n	800c49e <f_write+0x33e>
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800c4a4:	f043 0320 	orr.w	r3, r3, #32
 800c4a8:	b2da      	uxtb	r2, r3
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206

	LEAVE_FF(fp->fs, FR_OK);
 800c4b0:	2300      	movs	r3, #0
}
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	3728      	adds	r7, #40	; 0x28
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	bd80      	pop	{r7, pc}

0800c4ba <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c4ba:	b580      	push	{r7, lr}
 800c4bc:	b086      	sub	sp, #24
 800c4be:	af00      	add	r7, sp, #0
 800c4c0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800c4c2:	6878      	ldr	r0, [r7, #4]
 800c4c4:	f7ff fbbe 	bl	800bc44 <validate>
 800c4c8:	4603      	mov	r3, r0
 800c4ca:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c4cc:	7dfb      	ldrb	r3, [r7, #23]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	f040 80a8 	bne.w	800c624 <f_sync+0x16a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800c4da:	f003 0320 	and.w	r3, r3, #32
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	f000 80a0 	beq.w	800c624 <f_sync+0x16a>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800c4ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d019      	beq.n	800c526 <f_sync+0x6c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c4f8:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800c4fc:	6879      	ldr	r1, [r7, #4]
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800c504:	2301      	movs	r3, #1
 800c506:	f7fd f97f 	bl	8009808 <disk_write>
 800c50a:	4603      	mov	r3, r0
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d001      	beq.n	800c514 <f_sync+0x5a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800c510:	2301      	movs	r3, #1
 800c512:	e088      	b.n	800c626 <f_sync+0x16c>
				fp->flag &= ~FA__DIRTY;
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800c51a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c51e:	b2da      	uxtb	r2, r3
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800c532:	4619      	mov	r1, r3
 800c534:	4610      	mov	r0, r2
 800c536:	f7fd fc16 	bl	8009d66 <move_window>
 800c53a:	4603      	mov	r3, r0
 800c53c:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 800c53e:	7dfb      	ldrb	r3, [r7, #23]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d16f      	bne.n	800c624 <f_sync+0x16a>
				dir = fp->dir_ptr;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800c54a:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800c54c:	693b      	ldr	r3, [r7, #16]
 800c54e:	330b      	adds	r3, #11
 800c550:	781a      	ldrb	r2, [r3, #0]
 800c552:	693b      	ldr	r3, [r7, #16]
 800c554:	330b      	adds	r3, #11
 800c556:	f042 0220 	orr.w	r2, r2, #32
 800c55a:	b2d2      	uxtb	r2, r2
 800c55c:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800c564:	693b      	ldr	r3, [r7, #16]
 800c566:	331c      	adds	r3, #28
 800c568:	b2d2      	uxtb	r2, r2
 800c56a:	701a      	strb	r2, [r3, #0]
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800c572:	b29b      	uxth	r3, r3
 800c574:	0a1b      	lsrs	r3, r3, #8
 800c576:	b29a      	uxth	r2, r3
 800c578:	693b      	ldr	r3, [r7, #16]
 800c57a:	331d      	adds	r3, #29
 800c57c:	b2d2      	uxtb	r2, r2
 800c57e:	701a      	strb	r2, [r3, #0]
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800c586:	0c1a      	lsrs	r2, r3, #16
 800c588:	693b      	ldr	r3, [r7, #16]
 800c58a:	331e      	adds	r3, #30
 800c58c:	b2d2      	uxtb	r2, r2
 800c58e:	701a      	strb	r2, [r3, #0]
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800c596:	0e1a      	lsrs	r2, r3, #24
 800c598:	693b      	ldr	r3, [r7, #16]
 800c59a:	331f      	adds	r3, #31
 800c59c:	b2d2      	uxtb	r2, r2
 800c59e:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c5a6:	4619      	mov	r1, r3
 800c5a8:	6938      	ldr	r0, [r7, #16]
 800c5aa:	f7fe f9c7 	bl	800a93c <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 800c5ae:	f7fb fc81 	bl	8007eb4 <get_fattime>
 800c5b2:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 800c5b4:	693b      	ldr	r3, [r7, #16]
 800c5b6:	3316      	adds	r3, #22
 800c5b8:	68fa      	ldr	r2, [r7, #12]
 800c5ba:	b2d2      	uxtb	r2, r2
 800c5bc:	701a      	strb	r2, [r3, #0]
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	b29b      	uxth	r3, r3
 800c5c2:	0a1b      	lsrs	r3, r3, #8
 800c5c4:	b29a      	uxth	r2, r3
 800c5c6:	693b      	ldr	r3, [r7, #16]
 800c5c8:	3317      	adds	r3, #23
 800c5ca:	b2d2      	uxtb	r2, r2
 800c5cc:	701a      	strb	r2, [r3, #0]
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	0c1a      	lsrs	r2, r3, #16
 800c5d2:	693b      	ldr	r3, [r7, #16]
 800c5d4:	3318      	adds	r3, #24
 800c5d6:	b2d2      	uxtb	r2, r2
 800c5d8:	701a      	strb	r2, [r3, #0]
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	0e1a      	lsrs	r2, r3, #24
 800c5de:	693b      	ldr	r3, [r7, #16]
 800c5e0:	3319      	adds	r3, #25
 800c5e2:	b2d2      	uxtb	r2, r2
 800c5e4:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800c5e6:	693b      	ldr	r3, [r7, #16]
 800c5e8:	3312      	adds	r3, #18
 800c5ea:	2200      	movs	r2, #0
 800c5ec:	701a      	strb	r2, [r3, #0]
 800c5ee:	693b      	ldr	r3, [r7, #16]
 800c5f0:	3313      	adds	r3, #19
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800c5fc:	f023 0320 	bic.w	r3, r3, #32
 800c600:	b2da      	uxtb	r2, r3
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				fp->fs->wflag = 1;
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c60e:	2201      	movs	r2, #1
 800c610:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c61a:	4618      	mov	r0, r3
 800c61c:	f7fd fbd1 	bl	8009dc2 <sync_fs>
 800c620:	4603      	mov	r3, r0
 800c622:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 800c624:	7dfb      	ldrb	r3, [r7, #23]
}
 800c626:	4618      	mov	r0, r3
 800c628:	3718      	adds	r7, #24
 800c62a:	46bd      	mov	sp, r7
 800c62c:	bd80      	pop	{r7, pc}

0800c62e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800c62e:	b580      	push	{r7, lr}
 800c630:	b084      	sub	sp, #16
 800c632:	af00      	add	r7, sp, #0
 800c634:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800c636:	6878      	ldr	r0, [r7, #4]
 800c638:	f7ff ff3f 	bl	800c4ba <f_sync>
 800c63c:	4603      	mov	r3, r0
 800c63e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800c640:	7bfb      	ldrb	r3, [r7, #15]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d116      	bne.n	800c674 <f_close+0x46>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800c646:	6878      	ldr	r0, [r7, #4]
 800c648:	f7ff fafc 	bl	800bc44 <validate>
 800c64c:	4603      	mov	r3, r0
 800c64e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c650:	7bfb      	ldrb	r3, [r7, #15]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d10e      	bne.n	800c674 <f_close+0x46>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800c65c:	4618      	mov	r0, r3
 800c65e:	f7fd facd 	bl	8009bfc <dec_lock>
 800c662:	4603      	mov	r3, r0
 800c664:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800c666:	7bfb      	ldrb	r3, [r7, #15]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d103      	bne.n	800c674 <f_close+0x46>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	2200      	movs	r2, #0
 800c670:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800c674:	7bfb      	ldrb	r3, [r7, #15]
}
 800c676:	4618      	mov	r0, r3
 800c678:	3710      	adds	r7, #16
 800c67a:	46bd      	mov	sp, r7
 800c67c:	bd80      	pop	{r7, pc}
	...

0800c680 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c680:	b480      	push	{r7}
 800c682:	b087      	sub	sp, #28
 800c684:	af00      	add	r7, sp, #0
 800c686:	60f8      	str	r0, [r7, #12]
 800c688:	60b9      	str	r1, [r7, #8]
 800c68a:	4613      	mov	r3, r2
 800c68c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c68e:	2301      	movs	r3, #1
 800c690:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c692:	2300      	movs	r3, #0
 800c694:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800c696:	4b1e      	ldr	r3, [pc, #120]	; (800c710 <FATFS_LinkDriverEx+0x90>)
 800c698:	7a5b      	ldrb	r3, [r3, #9]
 800c69a:	b2db      	uxtb	r3, r3
 800c69c:	2b01      	cmp	r3, #1
 800c69e:	d831      	bhi.n	800c704 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c6a0:	4b1b      	ldr	r3, [pc, #108]	; (800c710 <FATFS_LinkDriverEx+0x90>)
 800c6a2:	7a5b      	ldrb	r3, [r3, #9]
 800c6a4:	b2db      	uxtb	r3, r3
 800c6a6:	461a      	mov	r2, r3
 800c6a8:	4b19      	ldr	r3, [pc, #100]	; (800c710 <FATFS_LinkDriverEx+0x90>)
 800c6aa:	2100      	movs	r1, #0
 800c6ac:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800c6ae:	4b18      	ldr	r3, [pc, #96]	; (800c710 <FATFS_LinkDriverEx+0x90>)
 800c6b0:	7a5b      	ldrb	r3, [r3, #9]
 800c6b2:	b2db      	uxtb	r3, r3
 800c6b4:	4a16      	ldr	r2, [pc, #88]	; (800c710 <FATFS_LinkDriverEx+0x90>)
 800c6b6:	009b      	lsls	r3, r3, #2
 800c6b8:	4413      	add	r3, r2
 800c6ba:	68fa      	ldr	r2, [r7, #12]
 800c6bc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800c6be:	4b14      	ldr	r3, [pc, #80]	; (800c710 <FATFS_LinkDriverEx+0x90>)
 800c6c0:	7a5b      	ldrb	r3, [r3, #9]
 800c6c2:	b2db      	uxtb	r3, r3
 800c6c4:	461a      	mov	r2, r3
 800c6c6:	4b12      	ldr	r3, [pc, #72]	; (800c710 <FATFS_LinkDriverEx+0x90>)
 800c6c8:	4413      	add	r3, r2
 800c6ca:	79fa      	ldrb	r2, [r7, #7]
 800c6cc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c6ce:	4b10      	ldr	r3, [pc, #64]	; (800c710 <FATFS_LinkDriverEx+0x90>)
 800c6d0:	7a5b      	ldrb	r3, [r3, #9]
 800c6d2:	b2db      	uxtb	r3, r3
 800c6d4:	1c5a      	adds	r2, r3, #1
 800c6d6:	b2d1      	uxtb	r1, r2
 800c6d8:	4a0d      	ldr	r2, [pc, #52]	; (800c710 <FATFS_LinkDriverEx+0x90>)
 800c6da:	7251      	strb	r1, [r2, #9]
 800c6dc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c6de:	7dbb      	ldrb	r3, [r7, #22]
 800c6e0:	3330      	adds	r3, #48	; 0x30
 800c6e2:	b2da      	uxtb	r2, r3
 800c6e4:	68bb      	ldr	r3, [r7, #8]
 800c6e6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c6e8:	68bb      	ldr	r3, [r7, #8]
 800c6ea:	3301      	adds	r3, #1
 800c6ec:	223a      	movs	r2, #58	; 0x3a
 800c6ee:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c6f0:	68bb      	ldr	r3, [r7, #8]
 800c6f2:	3302      	adds	r3, #2
 800c6f4:	222f      	movs	r2, #47	; 0x2f
 800c6f6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c6f8:	68bb      	ldr	r3, [r7, #8]
 800c6fa:	3303      	adds	r3, #3
 800c6fc:	2200      	movs	r2, #0
 800c6fe:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c700:	2300      	movs	r3, #0
 800c702:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800c704:	7dfb      	ldrb	r3, [r7, #23]
}
 800c706:	4618      	mov	r0, r3
 800c708:	371c      	adds	r7, #28
 800c70a:	46bd      	mov	sp, r7
 800c70c:	bc80      	pop	{r7}
 800c70e:	4770      	bx	lr
 800c710:	20000424 	.word	0x20000424

0800c714 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800c714:	b580      	push	{r7, lr}
 800c716:	b082      	sub	sp, #8
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
 800c71c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c71e:	2200      	movs	r2, #0
 800c720:	6839      	ldr	r1, [r7, #0]
 800c722:	6878      	ldr	r0, [r7, #4]
 800c724:	f7ff ffac 	bl	800c680 <FATFS_LinkDriverEx>
 800c728:	4603      	mov	r3, r0
}
 800c72a:	4618      	mov	r0, r3
 800c72c:	3708      	adds	r7, #8
 800c72e:	46bd      	mov	sp, r7
 800c730:	bd80      	pop	{r7, pc}
	...

0800c734 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800c734:	b580      	push	{r7, lr}
 800c736:	b082      	sub	sp, #8
 800c738:	af00      	add	r7, sp, #0
 800c73a:	4603      	mov	r3, r0
 800c73c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800c73e:	4b0b      	ldr	r3, [pc, #44]	; (800c76c <SD_initialize+0x38>)
 800c740:	2201      	movs	r2, #1
 800c742:	701a      	strb	r2, [r3, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 800c744:	f7fb fbbe 	bl	8007ec4 <BSP_SD_Init>
 800c748:	4603      	mov	r3, r0
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d107      	bne.n	800c75e <SD_initialize+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800c74e:	4b07      	ldr	r3, [pc, #28]	; (800c76c <SD_initialize+0x38>)
 800c750:	781b      	ldrb	r3, [r3, #0]
 800c752:	b2db      	uxtb	r3, r3
 800c754:	f023 0301 	bic.w	r3, r3, #1
 800c758:	b2da      	uxtb	r2, r3
 800c75a:	4b04      	ldr	r3, [pc, #16]	; (800c76c <SD_initialize+0x38>)
 800c75c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800c75e:	4b03      	ldr	r3, [pc, #12]	; (800c76c <SD_initialize+0x38>)
 800c760:	781b      	ldrb	r3, [r3, #0]
 800c762:	b2db      	uxtb	r3, r3
}
 800c764:	4618      	mov	r0, r3
 800c766:	3708      	adds	r7, #8
 800c768:	46bd      	mov	sp, r7
 800c76a:	bd80      	pop	{r7, pc}
 800c76c:	2000011b 	.word	0x2000011b

0800c770 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800c770:	b580      	push	{r7, lr}
 800c772:	b082      	sub	sp, #8
 800c774:	af00      	add	r7, sp, #0
 800c776:	4603      	mov	r3, r0
 800c778:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800c77a:	4b0b      	ldr	r3, [pc, #44]	; (800c7a8 <SD_status+0x38>)
 800c77c:	2201      	movs	r2, #1
 800c77e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800c780:	f7fb fc02 	bl	8007f88 <BSP_SD_GetCardState>
 800c784:	4603      	mov	r3, r0
 800c786:	2b00      	cmp	r3, #0
 800c788:	d107      	bne.n	800c79a <SD_status+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800c78a:	4b07      	ldr	r3, [pc, #28]	; (800c7a8 <SD_status+0x38>)
 800c78c:	781b      	ldrb	r3, [r3, #0]
 800c78e:	b2db      	uxtb	r3, r3
 800c790:	f023 0301 	bic.w	r3, r3, #1
 800c794:	b2da      	uxtb	r2, r3
 800c796:	4b04      	ldr	r3, [pc, #16]	; (800c7a8 <SD_status+0x38>)
 800c798:	701a      	strb	r2, [r3, #0]
  }
  
  return Stat;
 800c79a:	4b03      	ldr	r3, [pc, #12]	; (800c7a8 <SD_status+0x38>)
 800c79c:	781b      	ldrb	r3, [r3, #0]
 800c79e:	b2db      	uxtb	r3, r3
}
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	3708      	adds	r7, #8
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	bd80      	pop	{r7, pc}
 800c7a8:	2000011b 	.word	0x2000011b

0800c7ac <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b086      	sub	sp, #24
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	60b9      	str	r1, [r7, #8]
 800c7b4:	607a      	str	r2, [r7, #4]
 800c7b6:	603b      	str	r3, [r7, #0]
 800c7b8:	4603      	mov	r3, r0
 800c7ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c7bc:	2301      	movs	r3, #1
 800c7be:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 800c7c0:	4b0f      	ldr	r3, [pc, #60]	; (800c800 <SD_read+0x54>)
 800c7c2:	613b      	str	r3, [r7, #16]

  if(BSP_SD_ReadBlocks((uint32_t*)buff, 
 800c7c4:	4b0f      	ldr	r3, [pc, #60]	; (800c804 <SD_read+0x58>)
 800c7c6:	683a      	ldr	r2, [r7, #0]
 800c7c8:	6879      	ldr	r1, [r7, #4]
 800c7ca:	68b8      	ldr	r0, [r7, #8]
 800c7cc:	f7fb fba0 	bl	8007f10 <BSP_SD_ReadBlocks>
 800c7d0:	4603      	mov	r3, r0
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d10e      	bne.n	800c7f4 <SD_read+0x48>
                       (uint32_t) (sector), 
                       count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 800c7d6:	e006      	b.n	800c7e6 <SD_read+0x3a>
    {
      if (timeout-- == 0)
 800c7d8:	693b      	ldr	r3, [r7, #16]
 800c7da:	1e5a      	subs	r2, r3, #1
 800c7dc:	613a      	str	r2, [r7, #16]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d101      	bne.n	800c7e6 <SD_read+0x3a>
      {
        return RES_ERROR;
 800c7e2:	2301      	movs	r3, #1
 800c7e4:	e007      	b.n	800c7f6 <SD_read+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 800c7e6:	f7fb fbcf 	bl	8007f88 <BSP_SD_GetCardState>
 800c7ea:	4603      	mov	r3, r0
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d1f3      	bne.n	800c7d8 <SD_read+0x2c>
      }
    }
    res = RES_OK;
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 800c7f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	3718      	adds	r7, #24
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	bd80      	pop	{r7, pc}
 800c7fe:	bf00      	nop
 800c800:	000186a0 	.word	0x000186a0
 800c804:	05f5e100 	.word	0x05f5e100

0800c808 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800c808:	b580      	push	{r7, lr}
 800c80a:	b086      	sub	sp, #24
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	60b9      	str	r1, [r7, #8]
 800c810:	607a      	str	r2, [r7, #4]
 800c812:	603b      	str	r3, [r7, #0]
 800c814:	4603      	mov	r3, r0
 800c816:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c818:	2301      	movs	r3, #1
 800c81a:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 800c81c:	4b0f      	ldr	r3, [pc, #60]	; (800c85c <SD_write+0x54>)
 800c81e:	613b      	str	r3, [r7, #16]

  if(BSP_SD_WriteBlocks((uint32_t*)buff, 
 800c820:	4b0f      	ldr	r3, [pc, #60]	; (800c860 <SD_write+0x58>)
 800c822:	683a      	ldr	r2, [r7, #0]
 800c824:	6879      	ldr	r1, [r7, #4]
 800c826:	68b8      	ldr	r0, [r7, #8]
 800c828:	f7fb fb90 	bl	8007f4c <BSP_SD_WriteBlocks>
 800c82c:	4603      	mov	r3, r0
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d10e      	bne.n	800c850 <SD_write+0x48>
                        (uint32_t)(sector), 
                        count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 800c832:	e006      	b.n	800c842 <SD_write+0x3a>
    {
      if (timeout-- == 0)
 800c834:	693b      	ldr	r3, [r7, #16]
 800c836:	1e5a      	subs	r2, r3, #1
 800c838:	613a      	str	r2, [r7, #16]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d101      	bne.n	800c842 <SD_write+0x3a>
      {
        return RES_ERROR;
 800c83e:	2301      	movs	r3, #1
 800c840:	e007      	b.n	800c852 <SD_write+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 800c842:	f7fb fba1 	bl	8007f88 <BSP_SD_GetCardState>
 800c846:	4603      	mov	r3, r0
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d1f3      	bne.n	800c834 <SD_write+0x2c>
      }
    }    
    res = RES_OK;
 800c84c:	2300      	movs	r3, #0
 800c84e:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 800c850:	7dfb      	ldrb	r3, [r7, #23]
}
 800c852:	4618      	mov	r0, r3
 800c854:	3718      	adds	r7, #24
 800c856:	46bd      	mov	sp, r7
 800c858:	bd80      	pop	{r7, pc}
 800c85a:	bf00      	nop
 800c85c:	000186a0 	.word	0x000186a0
 800c860:	05f5e100 	.word	0x05f5e100

0800c864 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b08c      	sub	sp, #48	; 0x30
 800c868:	af00      	add	r7, sp, #0
 800c86a:	4603      	mov	r3, r0
 800c86c:	603a      	str	r2, [r7, #0]
 800c86e:	71fb      	strb	r3, [r7, #7]
 800c870:	460b      	mov	r3, r1
 800c872:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800c874:	2301      	movs	r3, #1
 800c876:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c87a:	4b24      	ldr	r3, [pc, #144]	; (800c90c <SD_ioctl+0xa8>)
 800c87c:	781b      	ldrb	r3, [r3, #0]
 800c87e:	b2db      	uxtb	r3, r3
 800c880:	f003 0301 	and.w	r3, r3, #1
 800c884:	2b00      	cmp	r3, #0
 800c886:	d001      	beq.n	800c88c <SD_ioctl+0x28>
 800c888:	2303      	movs	r3, #3
 800c88a:	e03b      	b.n	800c904 <SD_ioctl+0xa0>
  
  switch (cmd)
 800c88c:	79bb      	ldrb	r3, [r7, #6]
 800c88e:	2b03      	cmp	r3, #3
 800c890:	d833      	bhi.n	800c8fa <SD_ioctl+0x96>
 800c892:	a201      	add	r2, pc, #4	; (adr r2, 800c898 <SD_ioctl+0x34>)
 800c894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c898:	0800c8a9 	.word	0x0800c8a9
 800c89c:	0800c8b1 	.word	0x0800c8b1
 800c8a0:	0800c8c9 	.word	0x0800c8c9
 800c8a4:	0800c8e3 	.word	0x0800c8e3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800c8a8:	2300      	movs	r3, #0
 800c8aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c8ae:	e027      	b.n	800c900 <SD_ioctl+0x9c>
  
  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800c8b0:	f107 030c 	add.w	r3, r7, #12
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	f7fb fb77 	bl	8007fa8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c8ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c8bc:	683b      	ldr	r3, [r7, #0]
 800c8be:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c8c6:	e01b      	b.n	800c900 <SD_ioctl+0x9c>
  
  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c8c8:	f107 030c 	add.w	r3, r7, #12
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	f7fb fb6b 	bl	8007fa8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c8d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8d4:	b29a      	uxth	r2, r3
 800c8d6:	683b      	ldr	r3, [r7, #0]
 800c8d8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800c8da:	2300      	movs	r3, #0
 800c8dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c8e0:	e00e      	b.n	800c900 <SD_ioctl+0x9c>
  
  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c8e2:	f107 030c 	add.w	r3, r7, #12
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	f7fb fb5e 	bl	8007fa8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize;
 800c8ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c8ee:	683b      	ldr	r3, [r7, #0]
 800c8f0:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c8f8:	e002      	b.n	800c900 <SD_ioctl+0x9c>
  
  default:
    res = RES_PARERR;
 800c8fa:	2304      	movs	r3, #4
 800c8fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }
  
  return res;
 800c900:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c904:	4618      	mov	r0, r3
 800c906:	3730      	adds	r7, #48	; 0x30
 800c908:	46bd      	mov	sp, r7
 800c90a:	bd80      	pop	{r7, pc}
 800c90c:	2000011b 	.word	0x2000011b

0800c910 <ff_convert>:

WCHAR ff_convert (	/* Converted code, 0 means conversion error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 800c910:	b480      	push	{r7}
 800c912:	b089      	sub	sp, #36	; 0x24
 800c914:	af00      	add	r7, sp, #0
 800c916:	4603      	mov	r3, r0
 800c918:	6039      	str	r1, [r7, #0]
 800c91a:	80fb      	strh	r3, [r7, #6]
	const WCHAR *p;
	WCHAR c;
	int i, n, li, hi;


	if (chr < 0x80) {	/* ASCII */
 800c91c:	88fb      	ldrh	r3, [r7, #6]
 800c91e:	2b7f      	cmp	r3, #127	; 0x7f
 800c920:	d802      	bhi.n	800c928 <ff_convert+0x18>
		c = chr;
 800c922:	88fb      	ldrh	r3, [r7, #6]
 800c924:	837b      	strh	r3, [r7, #26]
 800c926:	e047      	b.n	800c9b8 <ff_convert+0xa8>
	} else {
		if (dir) {		/* OEMCP to unicode */
 800c928:	683b      	ldr	r3, [r7, #0]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d005      	beq.n	800c93a <ff_convert+0x2a>
			p = oem2uni;
 800c92e:	4b25      	ldr	r3, [pc, #148]	; (800c9c4 <ff_convert+0xb4>)
 800c930:	61fb      	str	r3, [r7, #28]
			hi = sizeof oem2uni / 4 - 1;
 800c932:	f244 2398 	movw	r3, #17048	; 0x4298
 800c936:	60bb      	str	r3, [r7, #8]
 800c938:	e004      	b.n	800c944 <ff_convert+0x34>
		} else {		/* Unicode to OEMCP */
			p = uni2oem;
 800c93a:	4b23      	ldr	r3, [pc, #140]	; (800c9c8 <ff_convert+0xb8>)
 800c93c:	61fb      	str	r3, [r7, #28]
			hi = sizeof uni2oem / 4 - 1;
 800c93e:	f244 2398 	movw	r3, #17048	; 0x4298
 800c942:	60bb      	str	r3, [r7, #8]
		}
		li = 0;
 800c944:	2300      	movs	r3, #0
 800c946:	60fb      	str	r3, [r7, #12]
		for (n = 16; n; n--) {
 800c948:	2310      	movs	r3, #16
 800c94a:	613b      	str	r3, [r7, #16]
 800c94c:	e023      	b.n	800c996 <ff_convert+0x86>
			i = li + (hi - li) / 2;
 800c94e:	68ba      	ldr	r2, [r7, #8]
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	1ad3      	subs	r3, r2, r3
 800c954:	0fda      	lsrs	r2, r3, #31
 800c956:	4413      	add	r3, r2
 800c958:	105b      	asrs	r3, r3, #1
 800c95a:	461a      	mov	r2, r3
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	4413      	add	r3, r2
 800c960:	617b      	str	r3, [r7, #20]
			if (chr == p[i * 2]) break;
 800c962:	697b      	ldr	r3, [r7, #20]
 800c964:	009b      	lsls	r3, r3, #2
 800c966:	461a      	mov	r2, r3
 800c968:	69fb      	ldr	r3, [r7, #28]
 800c96a:	4413      	add	r3, r2
 800c96c:	881b      	ldrh	r3, [r3, #0]
 800c96e:	88fa      	ldrh	r2, [r7, #6]
 800c970:	429a      	cmp	r2, r3
 800c972:	d014      	beq.n	800c99e <ff_convert+0x8e>
			if (chr > p[i * 2])
 800c974:	697b      	ldr	r3, [r7, #20]
 800c976:	009b      	lsls	r3, r3, #2
 800c978:	461a      	mov	r2, r3
 800c97a:	69fb      	ldr	r3, [r7, #28]
 800c97c:	4413      	add	r3, r2
 800c97e:	881b      	ldrh	r3, [r3, #0]
 800c980:	88fa      	ldrh	r2, [r7, #6]
 800c982:	429a      	cmp	r2, r3
 800c984:	d902      	bls.n	800c98c <ff_convert+0x7c>
				li = i;
 800c986:	697b      	ldr	r3, [r7, #20]
 800c988:	60fb      	str	r3, [r7, #12]
 800c98a:	e001      	b.n	800c990 <ff_convert+0x80>
			else
				hi = i;
 800c98c:	697b      	ldr	r3, [r7, #20]
 800c98e:	60bb      	str	r3, [r7, #8]
		for (n = 16; n; n--) {
 800c990:	693b      	ldr	r3, [r7, #16]
 800c992:	3b01      	subs	r3, #1
 800c994:	613b      	str	r3, [r7, #16]
 800c996:	693b      	ldr	r3, [r7, #16]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d1d8      	bne.n	800c94e <ff_convert+0x3e>
 800c99c:	e000      	b.n	800c9a0 <ff_convert+0x90>
			if (chr == p[i * 2]) break;
 800c99e:	bf00      	nop
		}
		c = n ? p[i * 2 + 1] : 0;
 800c9a0:	693b      	ldr	r3, [r7, #16]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d006      	beq.n	800c9b4 <ff_convert+0xa4>
 800c9a6:	697b      	ldr	r3, [r7, #20]
 800c9a8:	009b      	lsls	r3, r3, #2
 800c9aa:	3302      	adds	r3, #2
 800c9ac:	69fa      	ldr	r2, [r7, #28]
 800c9ae:	4413      	add	r3, r2
 800c9b0:	881b      	ldrh	r3, [r3, #0]
 800c9b2:	e000      	b.n	800c9b6 <ff_convert+0xa6>
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	837b      	strh	r3, [r7, #26]
	}

	return c;
 800c9b8:	8b7b      	ldrh	r3, [r7, #26]
}
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	3724      	adds	r7, #36	; 0x24
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	bc80      	pop	{r7}
 800c9c2:	4770      	bx	lr
 800c9c4:	0801e8f8 	.word	0x0801e8f8
 800c9c8:	0800de94 	.word	0x0800de94

0800c9cc <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 800c9cc:	b480      	push	{r7}
 800c9ce:	b085      	sub	sp, #20
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	4603      	mov	r3, r0
 800c9d4:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	60fb      	str	r3, [r7, #12]
 800c9da:	e002      	b.n	800c9e2 <ff_wtoupper+0x16>
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	3301      	adds	r3, #1
 800c9e0:	60fb      	str	r3, [r7, #12]
 800c9e2:	4a0f      	ldr	r2, [pc, #60]	; (800ca20 <ff_wtoupper+0x54>)
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d006      	beq.n	800c9fc <ff_wtoupper+0x30>
 800c9ee:	4a0c      	ldr	r2, [pc, #48]	; (800ca20 <ff_wtoupper+0x54>)
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c9f6:	88fa      	ldrh	r2, [r7, #6]
 800c9f8:	429a      	cmp	r2, r3
 800c9fa:	d1ef      	bne.n	800c9dc <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 800c9fc:	4a08      	ldr	r2, [pc, #32]	; (800ca20 <ff_wtoupper+0x54>)
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d004      	beq.n	800ca12 <ff_wtoupper+0x46>
 800ca08:	4a06      	ldr	r2, [pc, #24]	; (800ca24 <ff_wtoupper+0x58>)
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ca10:	e000      	b.n	800ca14 <ff_wtoupper+0x48>
 800ca12:	88fb      	ldrh	r3, [r7, #6]
}
 800ca14:	4618      	mov	r0, r3
 800ca16:	3714      	adds	r7, #20
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	bc80      	pop	{r7}
 800ca1c:	4770      	bx	lr
 800ca1e:	bf00      	nop
 800ca20:	0802f35c 	.word	0x0802f35c
 800ca24:	0802f53c 	.word	0x0802f53c

0800ca28 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ca2c:	2200      	movs	r2, #0
 800ca2e:	4912      	ldr	r1, [pc, #72]	; (800ca78 <MX_USB_DEVICE_Init+0x50>)
 800ca30:	4812      	ldr	r0, [pc, #72]	; (800ca7c <MX_USB_DEVICE_Init+0x54>)
 800ca32:	f7fb fdc3 	bl	80085bc <USBD_Init>
 800ca36:	4603      	mov	r3, r0
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d001      	beq.n	800ca40 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ca3c:	f7f4 f822 	bl	8000a84 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ca40:	490f      	ldr	r1, [pc, #60]	; (800ca80 <MX_USB_DEVICE_Init+0x58>)
 800ca42:	480e      	ldr	r0, [pc, #56]	; (800ca7c <MX_USB_DEVICE_Init+0x54>)
 800ca44:	f7fb fde5 	bl	8008612 <USBD_RegisterClass>
 800ca48:	4603      	mov	r3, r0
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d001      	beq.n	800ca52 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ca4e:	f7f4 f819 	bl	8000a84 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ca52:	490c      	ldr	r1, [pc, #48]	; (800ca84 <MX_USB_DEVICE_Init+0x5c>)
 800ca54:	4809      	ldr	r0, [pc, #36]	; (800ca7c <MX_USB_DEVICE_Init+0x54>)
 800ca56:	f7fb fd45 	bl	80084e4 <USBD_CDC_RegisterInterface>
 800ca5a:	4603      	mov	r3, r0
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d001      	beq.n	800ca64 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ca60:	f7f4 f810 	bl	8000a84 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ca64:	4805      	ldr	r0, [pc, #20]	; (800ca7c <MX_USB_DEVICE_Init+0x54>)
 800ca66:	f7fb fded 	bl	8008644 <USBD_Start>
 800ca6a:	4603      	mov	r3, r0
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d001      	beq.n	800ca74 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ca70:	f7f4 f808 	bl	8000a84 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ca74:	bf00      	nop
 800ca76:	bd80      	pop	{r7, pc}
 800ca78:	2000012c 	.word	0x2000012c
 800ca7c:	20000a6c 	.word	0x20000a6c
 800ca80:	20000018 	.word	0x20000018
 800ca84:	2000011c 	.word	0x2000011c

0800ca88 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ca8c:	2200      	movs	r2, #0
 800ca8e:	4905      	ldr	r1, [pc, #20]	; (800caa4 <CDC_Init_FS+0x1c>)
 800ca90:	4805      	ldr	r0, [pc, #20]	; (800caa8 <CDC_Init_FS+0x20>)
 800ca92:	f7fb fd3d 	bl	8008510 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ca96:	4905      	ldr	r1, [pc, #20]	; (800caac <CDC_Init_FS+0x24>)
 800ca98:	4803      	ldr	r0, [pc, #12]	; (800caa8 <CDC_Init_FS+0x20>)
 800ca9a:	f7fb fd52 	bl	8008542 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ca9e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800caa0:	4618      	mov	r0, r3
 800caa2:	bd80      	pop	{r7, pc}
 800caa4:	20001530 	.word	0x20001530
 800caa8:	20000a6c 	.word	0x20000a6c
 800caac:	20000d30 	.word	0x20000d30

0800cab0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800cab0:	b480      	push	{r7}
 800cab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cab4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cab6:	4618      	mov	r0, r3
 800cab8:	46bd      	mov	sp, r7
 800caba:	bc80      	pop	{r7}
 800cabc:	4770      	bx	lr
	...

0800cac0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cac0:	b480      	push	{r7}
 800cac2:	b083      	sub	sp, #12
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	4603      	mov	r3, r0
 800cac8:	6039      	str	r1, [r7, #0]
 800caca:	71fb      	strb	r3, [r7, #7]
 800cacc:	4613      	mov	r3, r2
 800cace:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800cad0:	79fb      	ldrb	r3, [r7, #7]
 800cad2:	2b23      	cmp	r3, #35	; 0x23
 800cad4:	d84a      	bhi.n	800cb6c <CDC_Control_FS+0xac>
 800cad6:	a201      	add	r2, pc, #4	; (adr r2, 800cadc <CDC_Control_FS+0x1c>)
 800cad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cadc:	0800cb6d 	.word	0x0800cb6d
 800cae0:	0800cb6d 	.word	0x0800cb6d
 800cae4:	0800cb6d 	.word	0x0800cb6d
 800cae8:	0800cb6d 	.word	0x0800cb6d
 800caec:	0800cb6d 	.word	0x0800cb6d
 800caf0:	0800cb6d 	.word	0x0800cb6d
 800caf4:	0800cb6d 	.word	0x0800cb6d
 800caf8:	0800cb6d 	.word	0x0800cb6d
 800cafc:	0800cb6d 	.word	0x0800cb6d
 800cb00:	0800cb6d 	.word	0x0800cb6d
 800cb04:	0800cb6d 	.word	0x0800cb6d
 800cb08:	0800cb6d 	.word	0x0800cb6d
 800cb0c:	0800cb6d 	.word	0x0800cb6d
 800cb10:	0800cb6d 	.word	0x0800cb6d
 800cb14:	0800cb6d 	.word	0x0800cb6d
 800cb18:	0800cb6d 	.word	0x0800cb6d
 800cb1c:	0800cb6d 	.word	0x0800cb6d
 800cb20:	0800cb6d 	.word	0x0800cb6d
 800cb24:	0800cb6d 	.word	0x0800cb6d
 800cb28:	0800cb6d 	.word	0x0800cb6d
 800cb2c:	0800cb6d 	.word	0x0800cb6d
 800cb30:	0800cb6d 	.word	0x0800cb6d
 800cb34:	0800cb6d 	.word	0x0800cb6d
 800cb38:	0800cb6d 	.word	0x0800cb6d
 800cb3c:	0800cb6d 	.word	0x0800cb6d
 800cb40:	0800cb6d 	.word	0x0800cb6d
 800cb44:	0800cb6d 	.word	0x0800cb6d
 800cb48:	0800cb6d 	.word	0x0800cb6d
 800cb4c:	0800cb6d 	.word	0x0800cb6d
 800cb50:	0800cb6d 	.word	0x0800cb6d
 800cb54:	0800cb6d 	.word	0x0800cb6d
 800cb58:	0800cb6d 	.word	0x0800cb6d
 800cb5c:	0800cb6d 	.word	0x0800cb6d
 800cb60:	0800cb6d 	.word	0x0800cb6d
 800cb64:	0800cb6d 	.word	0x0800cb6d
 800cb68:	0800cb6d 	.word	0x0800cb6d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cb6c:	bf00      	nop
  }

  return (USBD_OK);
 800cb6e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cb70:	4618      	mov	r0, r3
 800cb72:	370c      	adds	r7, #12
 800cb74:	46bd      	mov	sp, r7
 800cb76:	bc80      	pop	{r7}
 800cb78:	4770      	bx	lr
 800cb7a:	bf00      	nop

0800cb7c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	b082      	sub	sp, #8
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]
 800cb84:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cb86:	6879      	ldr	r1, [r7, #4]
 800cb88:	4805      	ldr	r0, [pc, #20]	; (800cba0 <CDC_Receive_FS+0x24>)
 800cb8a:	f7fb fcda 	bl	8008542 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800cb8e:	4804      	ldr	r0, [pc, #16]	; (800cba0 <CDC_Receive_FS+0x24>)
 800cb90:	f7fb fcea 	bl	8008568 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800cb94:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cb96:	4618      	mov	r0, r3
 800cb98:	3708      	adds	r7, #8
 800cb9a:	46bd      	mov	sp, r7
 800cb9c:	bd80      	pop	{r7, pc}
 800cb9e:	bf00      	nop
 800cba0:	20000a6c 	.word	0x20000a6c

0800cba4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cba4:	b480      	push	{r7}
 800cba6:	b083      	sub	sp, #12
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	4603      	mov	r3, r0
 800cbac:	6039      	str	r1, [r7, #0]
 800cbae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cbb0:	683b      	ldr	r3, [r7, #0]
 800cbb2:	2212      	movs	r2, #18
 800cbb4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cbb6:	4b03      	ldr	r3, [pc, #12]	; (800cbc4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800cbb8:	4618      	mov	r0, r3
 800cbba:	370c      	adds	r7, #12
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	bc80      	pop	{r7}
 800cbc0:	4770      	bx	lr
 800cbc2:	bf00      	nop
 800cbc4:	20000148 	.word	0x20000148

0800cbc8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cbc8:	b480      	push	{r7}
 800cbca:	b083      	sub	sp, #12
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	4603      	mov	r3, r0
 800cbd0:	6039      	str	r1, [r7, #0]
 800cbd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cbd4:	683b      	ldr	r3, [r7, #0]
 800cbd6:	2204      	movs	r2, #4
 800cbd8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cbda:	4b03      	ldr	r3, [pc, #12]	; (800cbe8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cbdc:	4618      	mov	r0, r3
 800cbde:	370c      	adds	r7, #12
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	bc80      	pop	{r7}
 800cbe4:	4770      	bx	lr
 800cbe6:	bf00      	nop
 800cbe8:	2000015c 	.word	0x2000015c

0800cbec <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cbec:	b580      	push	{r7, lr}
 800cbee:	b082      	sub	sp, #8
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	4603      	mov	r3, r0
 800cbf4:	6039      	str	r1, [r7, #0]
 800cbf6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cbf8:	79fb      	ldrb	r3, [r7, #7]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d105      	bne.n	800cc0a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cbfe:	683a      	ldr	r2, [r7, #0]
 800cc00:	4907      	ldr	r1, [pc, #28]	; (800cc20 <USBD_FS_ProductStrDescriptor+0x34>)
 800cc02:	4808      	ldr	r0, [pc, #32]	; (800cc24 <USBD_FS_ProductStrDescriptor+0x38>)
 800cc04:	f7fc fcc3 	bl	800958e <USBD_GetString>
 800cc08:	e004      	b.n	800cc14 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cc0a:	683a      	ldr	r2, [r7, #0]
 800cc0c:	4904      	ldr	r1, [pc, #16]	; (800cc20 <USBD_FS_ProductStrDescriptor+0x34>)
 800cc0e:	4805      	ldr	r0, [pc, #20]	; (800cc24 <USBD_FS_ProductStrDescriptor+0x38>)
 800cc10:	f7fc fcbd 	bl	800958e <USBD_GetString>
  }
  return USBD_StrDesc;
 800cc14:	4b02      	ldr	r3, [pc, #8]	; (800cc20 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cc16:	4618      	mov	r0, r3
 800cc18:	3708      	adds	r7, #8
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	bd80      	pop	{r7, pc}
 800cc1e:	bf00      	nop
 800cc20:	20001d30 	.word	0x20001d30
 800cc24:	0800de08 	.word	0x0800de08

0800cc28 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b082      	sub	sp, #8
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	4603      	mov	r3, r0
 800cc30:	6039      	str	r1, [r7, #0]
 800cc32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cc34:	683a      	ldr	r2, [r7, #0]
 800cc36:	4904      	ldr	r1, [pc, #16]	; (800cc48 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800cc38:	4804      	ldr	r0, [pc, #16]	; (800cc4c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cc3a:	f7fc fca8 	bl	800958e <USBD_GetString>
  return USBD_StrDesc;
 800cc3e:	4b02      	ldr	r3, [pc, #8]	; (800cc48 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800cc40:	4618      	mov	r0, r3
 800cc42:	3708      	adds	r7, #8
 800cc44:	46bd      	mov	sp, r7
 800cc46:	bd80      	pop	{r7, pc}
 800cc48:	20001d30 	.word	0x20001d30
 800cc4c:	0800de20 	.word	0x0800de20

0800cc50 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc50:	b580      	push	{r7, lr}
 800cc52:	b082      	sub	sp, #8
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	4603      	mov	r3, r0
 800cc58:	6039      	str	r1, [r7, #0]
 800cc5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cc5c:	683b      	ldr	r3, [r7, #0]
 800cc5e:	221a      	movs	r2, #26
 800cc60:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cc62:	f000 f843 	bl	800ccec <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cc66:	4b02      	ldr	r3, [pc, #8]	; (800cc70 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cc68:	4618      	mov	r0, r3
 800cc6a:	3708      	adds	r7, #8
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	bd80      	pop	{r7, pc}
 800cc70:	20000160 	.word	0x20000160

0800cc74 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b082      	sub	sp, #8
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	4603      	mov	r3, r0
 800cc7c:	6039      	str	r1, [r7, #0]
 800cc7e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cc80:	79fb      	ldrb	r3, [r7, #7]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d105      	bne.n	800cc92 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cc86:	683a      	ldr	r2, [r7, #0]
 800cc88:	4907      	ldr	r1, [pc, #28]	; (800cca8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cc8a:	4808      	ldr	r0, [pc, #32]	; (800ccac <USBD_FS_ConfigStrDescriptor+0x38>)
 800cc8c:	f7fc fc7f 	bl	800958e <USBD_GetString>
 800cc90:	e004      	b.n	800cc9c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cc92:	683a      	ldr	r2, [r7, #0]
 800cc94:	4904      	ldr	r1, [pc, #16]	; (800cca8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cc96:	4805      	ldr	r0, [pc, #20]	; (800ccac <USBD_FS_ConfigStrDescriptor+0x38>)
 800cc98:	f7fc fc79 	bl	800958e <USBD_GetString>
  }
  return USBD_StrDesc;
 800cc9c:	4b02      	ldr	r3, [pc, #8]	; (800cca8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800cc9e:	4618      	mov	r0, r3
 800cca0:	3708      	adds	r7, #8
 800cca2:	46bd      	mov	sp, r7
 800cca4:	bd80      	pop	{r7, pc}
 800cca6:	bf00      	nop
 800cca8:	20001d30 	.word	0x20001d30
 800ccac:	0800de34 	.word	0x0800de34

0800ccb0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	b082      	sub	sp, #8
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	4603      	mov	r3, r0
 800ccb8:	6039      	str	r1, [r7, #0]
 800ccba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ccbc:	79fb      	ldrb	r3, [r7, #7]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d105      	bne.n	800ccce <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ccc2:	683a      	ldr	r2, [r7, #0]
 800ccc4:	4907      	ldr	r1, [pc, #28]	; (800cce4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ccc6:	4808      	ldr	r0, [pc, #32]	; (800cce8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ccc8:	f7fc fc61 	bl	800958e <USBD_GetString>
 800cccc:	e004      	b.n	800ccd8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ccce:	683a      	ldr	r2, [r7, #0]
 800ccd0:	4904      	ldr	r1, [pc, #16]	; (800cce4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ccd2:	4805      	ldr	r0, [pc, #20]	; (800cce8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ccd4:	f7fc fc5b 	bl	800958e <USBD_GetString>
  }
  return USBD_StrDesc;
 800ccd8:	4b02      	ldr	r3, [pc, #8]	; (800cce4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ccda:	4618      	mov	r0, r3
 800ccdc:	3708      	adds	r7, #8
 800ccde:	46bd      	mov	sp, r7
 800cce0:	bd80      	pop	{r7, pc}
 800cce2:	bf00      	nop
 800cce4:	20001d30 	.word	0x20001d30
 800cce8:	0800de40 	.word	0x0800de40

0800ccec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ccec:	b580      	push	{r7, lr}
 800ccee:	b084      	sub	sp, #16
 800ccf0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ccf2:	4b0f      	ldr	r3, [pc, #60]	; (800cd30 <Get_SerialNum+0x44>)
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ccf8:	4b0e      	ldr	r3, [pc, #56]	; (800cd34 <Get_SerialNum+0x48>)
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ccfe:	4b0e      	ldr	r3, [pc, #56]	; (800cd38 <Get_SerialNum+0x4c>)
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cd04:	68fa      	ldr	r2, [r7, #12]
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	4413      	add	r3, r2
 800cd0a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d009      	beq.n	800cd26 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cd12:	2208      	movs	r2, #8
 800cd14:	4909      	ldr	r1, [pc, #36]	; (800cd3c <Get_SerialNum+0x50>)
 800cd16:	68f8      	ldr	r0, [r7, #12]
 800cd18:	f000 f814 	bl	800cd44 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cd1c:	2204      	movs	r2, #4
 800cd1e:	4908      	ldr	r1, [pc, #32]	; (800cd40 <Get_SerialNum+0x54>)
 800cd20:	68b8      	ldr	r0, [r7, #8]
 800cd22:	f000 f80f 	bl	800cd44 <IntToUnicode>
  }
}
 800cd26:	bf00      	nop
 800cd28:	3710      	adds	r7, #16
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	bd80      	pop	{r7, pc}
 800cd2e:	bf00      	nop
 800cd30:	1fff7a10 	.word	0x1fff7a10
 800cd34:	1fff7a14 	.word	0x1fff7a14
 800cd38:	1fff7a18 	.word	0x1fff7a18
 800cd3c:	20000162 	.word	0x20000162
 800cd40:	20000172 	.word	0x20000172

0800cd44 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cd44:	b480      	push	{r7}
 800cd46:	b087      	sub	sp, #28
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	60f8      	str	r0, [r7, #12]
 800cd4c:	60b9      	str	r1, [r7, #8]
 800cd4e:	4613      	mov	r3, r2
 800cd50:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cd52:	2300      	movs	r3, #0
 800cd54:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cd56:	2300      	movs	r3, #0
 800cd58:	75fb      	strb	r3, [r7, #23]
 800cd5a:	e027      	b.n	800cdac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	0f1b      	lsrs	r3, r3, #28
 800cd60:	2b09      	cmp	r3, #9
 800cd62:	d80b      	bhi.n	800cd7c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	0f1b      	lsrs	r3, r3, #28
 800cd68:	b2da      	uxtb	r2, r3
 800cd6a:	7dfb      	ldrb	r3, [r7, #23]
 800cd6c:	005b      	lsls	r3, r3, #1
 800cd6e:	4619      	mov	r1, r3
 800cd70:	68bb      	ldr	r3, [r7, #8]
 800cd72:	440b      	add	r3, r1
 800cd74:	3230      	adds	r2, #48	; 0x30
 800cd76:	b2d2      	uxtb	r2, r2
 800cd78:	701a      	strb	r2, [r3, #0]
 800cd7a:	e00a      	b.n	800cd92 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	0f1b      	lsrs	r3, r3, #28
 800cd80:	b2da      	uxtb	r2, r3
 800cd82:	7dfb      	ldrb	r3, [r7, #23]
 800cd84:	005b      	lsls	r3, r3, #1
 800cd86:	4619      	mov	r1, r3
 800cd88:	68bb      	ldr	r3, [r7, #8]
 800cd8a:	440b      	add	r3, r1
 800cd8c:	3237      	adds	r2, #55	; 0x37
 800cd8e:	b2d2      	uxtb	r2, r2
 800cd90:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	011b      	lsls	r3, r3, #4
 800cd96:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cd98:	7dfb      	ldrb	r3, [r7, #23]
 800cd9a:	005b      	lsls	r3, r3, #1
 800cd9c:	3301      	adds	r3, #1
 800cd9e:	68ba      	ldr	r2, [r7, #8]
 800cda0:	4413      	add	r3, r2
 800cda2:	2200      	movs	r2, #0
 800cda4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cda6:	7dfb      	ldrb	r3, [r7, #23]
 800cda8:	3301      	adds	r3, #1
 800cdaa:	75fb      	strb	r3, [r7, #23]
 800cdac:	7dfa      	ldrb	r2, [r7, #23]
 800cdae:	79fb      	ldrb	r3, [r7, #7]
 800cdb0:	429a      	cmp	r2, r3
 800cdb2:	d3d3      	bcc.n	800cd5c <IntToUnicode+0x18>
  }
}
 800cdb4:	bf00      	nop
 800cdb6:	371c      	adds	r7, #28
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	bc80      	pop	{r7}
 800cdbc:	4770      	bx	lr
	...

0800cdc0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b08a      	sub	sp, #40	; 0x28
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cdc8:	f107 0314 	add.w	r3, r7, #20
 800cdcc:	2200      	movs	r2, #0
 800cdce:	601a      	str	r2, [r3, #0]
 800cdd0:	605a      	str	r2, [r3, #4]
 800cdd2:	609a      	str	r2, [r3, #8]
 800cdd4:	60da      	str	r2, [r3, #12]
 800cdd6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cde0:	d147      	bne.n	800ce72 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cde2:	2300      	movs	r3, #0
 800cde4:	613b      	str	r3, [r7, #16]
 800cde6:	4b25      	ldr	r3, [pc, #148]	; (800ce7c <HAL_PCD_MspInit+0xbc>)
 800cde8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdea:	4a24      	ldr	r2, [pc, #144]	; (800ce7c <HAL_PCD_MspInit+0xbc>)
 800cdec:	f043 0301 	orr.w	r3, r3, #1
 800cdf0:	6313      	str	r3, [r2, #48]	; 0x30
 800cdf2:	4b22      	ldr	r3, [pc, #136]	; (800ce7c <HAL_PCD_MspInit+0xbc>)
 800cdf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdf6:	f003 0301 	and.w	r3, r3, #1
 800cdfa:	613b      	str	r3, [r7, #16]
 800cdfc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800cdfe:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800ce02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ce04:	2302      	movs	r3, #2
 800ce06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ce08:	2300      	movs	r3, #0
 800ce0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ce0c:	2303      	movs	r3, #3
 800ce0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ce10:	230a      	movs	r3, #10
 800ce12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ce14:	f107 0314 	add.w	r3, r7, #20
 800ce18:	4619      	mov	r1, r3
 800ce1a:	4819      	ldr	r0, [pc, #100]	; (800ce80 <HAL_PCD_MspInit+0xc0>)
 800ce1c:	f7f5 fa5c 	bl	80022d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800ce20:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ce24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ce26:	2300      	movs	r3, #0
 800ce28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800ce2e:	f107 0314 	add.w	r3, r7, #20
 800ce32:	4619      	mov	r1, r3
 800ce34:	4812      	ldr	r0, [pc, #72]	; (800ce80 <HAL_PCD_MspInit+0xc0>)
 800ce36:	f7f5 fa4f 	bl	80022d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ce3a:	4b10      	ldr	r3, [pc, #64]	; (800ce7c <HAL_PCD_MspInit+0xbc>)
 800ce3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce3e:	4a0f      	ldr	r2, [pc, #60]	; (800ce7c <HAL_PCD_MspInit+0xbc>)
 800ce40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce44:	6353      	str	r3, [r2, #52]	; 0x34
 800ce46:	2300      	movs	r3, #0
 800ce48:	60fb      	str	r3, [r7, #12]
 800ce4a:	4b0c      	ldr	r3, [pc, #48]	; (800ce7c <HAL_PCD_MspInit+0xbc>)
 800ce4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce4e:	4a0b      	ldr	r2, [pc, #44]	; (800ce7c <HAL_PCD_MspInit+0xbc>)
 800ce50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ce54:	6453      	str	r3, [r2, #68]	; 0x44
 800ce56:	4b09      	ldr	r3, [pc, #36]	; (800ce7c <HAL_PCD_MspInit+0xbc>)
 800ce58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ce5e:	60fb      	str	r3, [r7, #12]
 800ce60:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ce62:	2200      	movs	r2, #0
 800ce64:	2100      	movs	r1, #0
 800ce66:	2043      	movs	r0, #67	; 0x43
 800ce68:	f7f4 fa9b 	bl	80013a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ce6c:	2043      	movs	r0, #67	; 0x43
 800ce6e:	f7f4 fab4 	bl	80013da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ce72:	bf00      	nop
 800ce74:	3728      	adds	r7, #40	; 0x28
 800ce76:	46bd      	mov	sp, r7
 800ce78:	bd80      	pop	{r7, pc}
 800ce7a:	bf00      	nop
 800ce7c:	40023800 	.word	0x40023800
 800ce80:	40020000 	.word	0x40020000

0800ce84 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce84:	b580      	push	{r7, lr}
 800ce86:	b082      	sub	sp, #8
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	f8d3 23fc 	ldr.w	r2, [r3, #1020]	; 0x3fc
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800ce98:	4619      	mov	r1, r3
 800ce9a:	4610      	mov	r0, r2
 800ce9c:	f7fb fc1a 	bl	80086d4 <USBD_LL_SetupStage>
}
 800cea0:	bf00      	nop
 800cea2:	3708      	adds	r7, #8
 800cea4:	46bd      	mov	sp, r7
 800cea6:	bd80      	pop	{r7, pc}

0800cea8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	b082      	sub	sp, #8
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	6078      	str	r0, [r7, #4]
 800ceb0:	460b      	mov	r3, r1
 800ceb2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 800ceba:	78fa      	ldrb	r2, [r7, #3]
 800cebc:	6879      	ldr	r1, [r7, #4]
 800cebe:	4613      	mov	r3, r2
 800cec0:	00db      	lsls	r3, r3, #3
 800cec2:	1a9b      	subs	r3, r3, r2
 800cec4:	009b      	lsls	r3, r3, #2
 800cec6:	440b      	add	r3, r1
 800cec8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800cecc:	681a      	ldr	r2, [r3, #0]
 800cece:	78fb      	ldrb	r3, [r7, #3]
 800ced0:	4619      	mov	r1, r3
 800ced2:	f7fb fc4a 	bl	800876a <USBD_LL_DataOutStage>
}
 800ced6:	bf00      	nop
 800ced8:	3708      	adds	r7, #8
 800ceda:	46bd      	mov	sp, r7
 800cedc:	bd80      	pop	{r7, pc}

0800cede <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cede:	b580      	push	{r7, lr}
 800cee0:	b082      	sub	sp, #8
 800cee2:	af00      	add	r7, sp, #0
 800cee4:	6078      	str	r0, [r7, #4]
 800cee6:	460b      	mov	r3, r1
 800cee8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 800cef0:	78fa      	ldrb	r2, [r7, #3]
 800cef2:	6879      	ldr	r1, [r7, #4]
 800cef4:	4613      	mov	r3, r2
 800cef6:	00db      	lsls	r3, r3, #3
 800cef8:	1a9b      	subs	r3, r3, r2
 800cefa:	009b      	lsls	r3, r3, #2
 800cefc:	440b      	add	r3, r1
 800cefe:	3348      	adds	r3, #72	; 0x48
 800cf00:	681a      	ldr	r2, [r3, #0]
 800cf02:	78fb      	ldrb	r3, [r7, #3]
 800cf04:	4619      	mov	r1, r3
 800cf06:	f7fb fca1 	bl	800884c <USBD_LL_DataInStage>
}
 800cf0a:	bf00      	nop
 800cf0c:	3708      	adds	r7, #8
 800cf0e:	46bd      	mov	sp, r7
 800cf10:	bd80      	pop	{r7, pc}

0800cf12 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf12:	b580      	push	{r7, lr}
 800cf14:	b082      	sub	sp, #8
 800cf16:	af00      	add	r7, sp, #0
 800cf18:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800cf20:	4618      	mov	r0, r3
 800cf22:	f7fb fdb1 	bl	8008a88 <USBD_LL_SOF>
}
 800cf26:	bf00      	nop
 800cf28:	3708      	adds	r7, #8
 800cf2a:	46bd      	mov	sp, r7
 800cf2c:	bd80      	pop	{r7, pc}

0800cf2e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf2e:	b580      	push	{r7, lr}
 800cf30:	b084      	sub	sp, #16
 800cf32:	af00      	add	r7, sp, #0
 800cf34:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cf36:	2301      	movs	r3, #1
 800cf38:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	68db      	ldr	r3, [r3, #12]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d102      	bne.n	800cf48 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800cf42:	2300      	movs	r3, #0
 800cf44:	73fb      	strb	r3, [r7, #15]
 800cf46:	e008      	b.n	800cf5a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	68db      	ldr	r3, [r3, #12]
 800cf4c:	2b02      	cmp	r3, #2
 800cf4e:	d102      	bne.n	800cf56 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800cf50:	2301      	movs	r3, #1
 800cf52:	73fb      	strb	r3, [r7, #15]
 800cf54:	e001      	b.n	800cf5a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800cf56:	f7f3 fd95 	bl	8000a84 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800cf60:	7bfa      	ldrb	r2, [r7, #15]
 800cf62:	4611      	mov	r1, r2
 800cf64:	4618      	mov	r0, r3
 800cf66:	f7fb fd57 	bl	8008a18 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800cf70:	4618      	mov	r0, r3
 800cf72:	f7fb fd10 	bl	8008996 <USBD_LL_Reset>
}
 800cf76:	bf00      	nop
 800cf78:	3710      	adds	r7, #16
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	bd80      	pop	{r7, pc}
	...

0800cf80 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b082      	sub	sp, #8
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800cf8e:	4618      	mov	r0, r3
 800cf90:	f7fb fd51 	bl	8008a36 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	687a      	ldr	r2, [r7, #4]
 800cfa0:	6812      	ldr	r2, [r2, #0]
 800cfa2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cfa6:	f043 0301 	orr.w	r3, r3, #1
 800cfaa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	6a1b      	ldr	r3, [r3, #32]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d005      	beq.n	800cfc0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cfb4:	4b04      	ldr	r3, [pc, #16]	; (800cfc8 <HAL_PCD_SuspendCallback+0x48>)
 800cfb6:	691b      	ldr	r3, [r3, #16]
 800cfb8:	4a03      	ldr	r2, [pc, #12]	; (800cfc8 <HAL_PCD_SuspendCallback+0x48>)
 800cfba:	f043 0306 	orr.w	r3, r3, #6
 800cfbe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800cfc0:	bf00      	nop
 800cfc2:	3708      	adds	r7, #8
 800cfc4:	46bd      	mov	sp, r7
 800cfc6:	bd80      	pop	{r7, pc}
 800cfc8:	e000ed00 	.word	0xe000ed00

0800cfcc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	b082      	sub	sp, #8
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800cfda:	4618      	mov	r0, r3
 800cfdc:	f7fb fd3f 	bl	8008a5e <USBD_LL_Resume>
}
 800cfe0:	bf00      	nop
 800cfe2:	3708      	adds	r7, #8
 800cfe4:	46bd      	mov	sp, r7
 800cfe6:	bd80      	pop	{r7, pc}

0800cfe8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfe8:	b580      	push	{r7, lr}
 800cfea:	b082      	sub	sp, #8
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	6078      	str	r0, [r7, #4]
 800cff0:	460b      	mov	r3, r1
 800cff2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800cffa:	78fa      	ldrb	r2, [r7, #3]
 800cffc:	4611      	mov	r1, r2
 800cffe:	4618      	mov	r0, r3
 800d000:	f7fb fd68 	bl	8008ad4 <USBD_LL_IsoOUTIncomplete>
}
 800d004:	bf00      	nop
 800d006:	3708      	adds	r7, #8
 800d008:	46bd      	mov	sp, r7
 800d00a:	bd80      	pop	{r7, pc}

0800d00c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d00c:	b580      	push	{r7, lr}
 800d00e:	b082      	sub	sp, #8
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
 800d014:	460b      	mov	r3, r1
 800d016:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800d01e:	78fa      	ldrb	r2, [r7, #3]
 800d020:	4611      	mov	r1, r2
 800d022:	4618      	mov	r0, r3
 800d024:	f7fb fd4a 	bl	8008abc <USBD_LL_IsoINIncomplete>
}
 800d028:	bf00      	nop
 800d02a:	3708      	adds	r7, #8
 800d02c:	46bd      	mov	sp, r7
 800d02e:	bd80      	pop	{r7, pc}

0800d030 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d030:	b580      	push	{r7, lr}
 800d032:	b082      	sub	sp, #8
 800d034:	af00      	add	r7, sp, #0
 800d036:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800d03e:	4618      	mov	r0, r3
 800d040:	f7fb fd54 	bl	8008aec <USBD_LL_DevConnected>
}
 800d044:	bf00      	nop
 800d046:	3708      	adds	r7, #8
 800d048:	46bd      	mov	sp, r7
 800d04a:	bd80      	pop	{r7, pc}

0800d04c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d04c:	b580      	push	{r7, lr}
 800d04e:	b082      	sub	sp, #8
 800d050:	af00      	add	r7, sp, #0
 800d052:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800d05a:	4618      	mov	r0, r3
 800d05c:	f7fb fd50 	bl	8008b00 <USBD_LL_DevDisconnected>
}
 800d060:	bf00      	nop
 800d062:	3708      	adds	r7, #8
 800d064:	46bd      	mov	sp, r7
 800d066:	bd80      	pop	{r7, pc}

0800d068 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d068:	b580      	push	{r7, lr}
 800d06a:	b082      	sub	sp, #8
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	781b      	ldrb	r3, [r3, #0]
 800d074:	2b00      	cmp	r3, #0
 800d076:	d139      	bne.n	800d0ec <USBD_LL_Init+0x84>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d078:	4a1f      	ldr	r2, [pc, #124]	; (800d0f8 <USBD_LL_Init+0x90>)
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	f8c2 33fc 	str.w	r3, [r2, #1020]	; 0x3fc
  pdev->pData = &hpcd_USB_OTG_FS;
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	4a1d      	ldr	r2, [pc, #116]	; (800d0f8 <USBD_LL_Init+0x90>)
 800d084:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d088:	4b1b      	ldr	r3, [pc, #108]	; (800d0f8 <USBD_LL_Init+0x90>)
 800d08a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d08e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800d090:	4b19      	ldr	r3, [pc, #100]	; (800d0f8 <USBD_LL_Init+0x90>)
 800d092:	2204      	movs	r2, #4
 800d094:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d096:	4b18      	ldr	r3, [pc, #96]	; (800d0f8 <USBD_LL_Init+0x90>)
 800d098:	2202      	movs	r2, #2
 800d09a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d09c:	4b16      	ldr	r3, [pc, #88]	; (800d0f8 <USBD_LL_Init+0x90>)
 800d09e:	2200      	movs	r2, #0
 800d0a0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d0a2:	4b15      	ldr	r3, [pc, #84]	; (800d0f8 <USBD_LL_Init+0x90>)
 800d0a4:	2202      	movs	r2, #2
 800d0a6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d0a8:	4b13      	ldr	r3, [pc, #76]	; (800d0f8 <USBD_LL_Init+0x90>)
 800d0aa:	2200      	movs	r2, #0
 800d0ac:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d0ae:	4b12      	ldr	r3, [pc, #72]	; (800d0f8 <USBD_LL_Init+0x90>)
 800d0b0:	2200      	movs	r2, #0
 800d0b2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800d0b4:	4b10      	ldr	r3, [pc, #64]	; (800d0f8 <USBD_LL_Init+0x90>)
 800d0b6:	2201      	movs	r2, #1
 800d0b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d0ba:	4b0f      	ldr	r3, [pc, #60]	; (800d0f8 <USBD_LL_Init+0x90>)
 800d0bc:	2200      	movs	r2, #0
 800d0be:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d0c0:	480d      	ldr	r0, [pc, #52]	; (800d0f8 <USBD_LL_Init+0x90>)
 800d0c2:	f7f5 fb07 	bl	80026d4 <HAL_PCD_Init>
 800d0c6:	4603      	mov	r3, r0
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d001      	beq.n	800d0d0 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 800d0cc:	f7f3 fcda 	bl	8000a84 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d0d0:	2180      	movs	r1, #128	; 0x80
 800d0d2:	4809      	ldr	r0, [pc, #36]	; (800d0f8 <USBD_LL_Init+0x90>)
 800d0d4:	f7f6 fc4a 	bl	800396c <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d0d8:	2240      	movs	r2, #64	; 0x40
 800d0da:	2100      	movs	r1, #0
 800d0dc:	4806      	ldr	r0, [pc, #24]	; (800d0f8 <USBD_LL_Init+0x90>)
 800d0de:	f7f6 fbff 	bl	80038e0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d0e2:	2280      	movs	r2, #128	; 0x80
 800d0e4:	2101      	movs	r1, #1
 800d0e6:	4804      	ldr	r0, [pc, #16]	; (800d0f8 <USBD_LL_Init+0x90>)
 800d0e8:	f7f6 fbfa 	bl	80038e0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d0ec:	2300      	movs	r3, #0
}
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	3708      	adds	r7, #8
 800d0f2:	46bd      	mov	sp, r7
 800d0f4:	bd80      	pop	{r7, pc}
 800d0f6:	bf00      	nop
 800d0f8:	20001f30 	.word	0x20001f30

0800d0fc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d0fc:	b580      	push	{r7, lr}
 800d0fe:	b084      	sub	sp, #16
 800d100:	af00      	add	r7, sp, #0
 800d102:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d104:	2300      	movs	r3, #0
 800d106:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d108:	2300      	movs	r3, #0
 800d10a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d112:	4618      	mov	r0, r3
 800d114:	f7f5 fbfb 	bl	800290e <HAL_PCD_Start>
 800d118:	4603      	mov	r3, r0
 800d11a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d11c:	7bfb      	ldrb	r3, [r7, #15]
 800d11e:	4618      	mov	r0, r3
 800d120:	f000 f92e 	bl	800d380 <USBD_Get_USB_Status>
 800d124:	4603      	mov	r3, r0
 800d126:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d128:	7bbb      	ldrb	r3, [r7, #14]
}
 800d12a:	4618      	mov	r0, r3
 800d12c:	3710      	adds	r7, #16
 800d12e:	46bd      	mov	sp, r7
 800d130:	bd80      	pop	{r7, pc}

0800d132 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d132:	b580      	push	{r7, lr}
 800d134:	b084      	sub	sp, #16
 800d136:	af00      	add	r7, sp, #0
 800d138:	6078      	str	r0, [r7, #4]
 800d13a:	4608      	mov	r0, r1
 800d13c:	4611      	mov	r1, r2
 800d13e:	461a      	mov	r2, r3
 800d140:	4603      	mov	r3, r0
 800d142:	70fb      	strb	r3, [r7, #3]
 800d144:	460b      	mov	r3, r1
 800d146:	70bb      	strb	r3, [r7, #2]
 800d148:	4613      	mov	r3, r2
 800d14a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d14c:	2300      	movs	r3, #0
 800d14e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d150:	2300      	movs	r3, #0
 800d152:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d15a:	78bb      	ldrb	r3, [r7, #2]
 800d15c:	883a      	ldrh	r2, [r7, #0]
 800d15e:	78f9      	ldrb	r1, [r7, #3]
 800d160:	f7f5 ffb1 	bl	80030c6 <HAL_PCD_EP_Open>
 800d164:	4603      	mov	r3, r0
 800d166:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d168:	7bfb      	ldrb	r3, [r7, #15]
 800d16a:	4618      	mov	r0, r3
 800d16c:	f000 f908 	bl	800d380 <USBD_Get_USB_Status>
 800d170:	4603      	mov	r3, r0
 800d172:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d174:	7bbb      	ldrb	r3, [r7, #14]
}
 800d176:	4618      	mov	r0, r3
 800d178:	3710      	adds	r7, #16
 800d17a:	46bd      	mov	sp, r7
 800d17c:	bd80      	pop	{r7, pc}

0800d17e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d17e:	b580      	push	{r7, lr}
 800d180:	b084      	sub	sp, #16
 800d182:	af00      	add	r7, sp, #0
 800d184:	6078      	str	r0, [r7, #4]
 800d186:	460b      	mov	r3, r1
 800d188:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d18a:	2300      	movs	r3, #0
 800d18c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d18e:	2300      	movs	r3, #0
 800d190:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d198:	78fa      	ldrb	r2, [r7, #3]
 800d19a:	4611      	mov	r1, r2
 800d19c:	4618      	mov	r0, r3
 800d19e:	f7f5 fffa 	bl	8003196 <HAL_PCD_EP_Close>
 800d1a2:	4603      	mov	r3, r0
 800d1a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d1a6:	7bfb      	ldrb	r3, [r7, #15]
 800d1a8:	4618      	mov	r0, r3
 800d1aa:	f000 f8e9 	bl	800d380 <USBD_Get_USB_Status>
 800d1ae:	4603      	mov	r3, r0
 800d1b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d1b2:	7bbb      	ldrb	r3, [r7, #14]
}
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	3710      	adds	r7, #16
 800d1b8:	46bd      	mov	sp, r7
 800d1ba:	bd80      	pop	{r7, pc}

0800d1bc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d1bc:	b580      	push	{r7, lr}
 800d1be:	b084      	sub	sp, #16
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	6078      	str	r0, [r7, #4]
 800d1c4:	460b      	mov	r3, r1
 800d1c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1c8:	2300      	movs	r3, #0
 800d1ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d1d6:	78fa      	ldrb	r2, [r7, #3]
 800d1d8:	4611      	mov	r1, r2
 800d1da:	4618      	mov	r0, r3
 800d1dc:	f7f6 f8d1 	bl	8003382 <HAL_PCD_EP_SetStall>
 800d1e0:	4603      	mov	r3, r0
 800d1e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d1e4:	7bfb      	ldrb	r3, [r7, #15]
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	f000 f8ca 	bl	800d380 <USBD_Get_USB_Status>
 800d1ec:	4603      	mov	r3, r0
 800d1ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d1f0:	7bbb      	ldrb	r3, [r7, #14]
}
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	3710      	adds	r7, #16
 800d1f6:	46bd      	mov	sp, r7
 800d1f8:	bd80      	pop	{r7, pc}

0800d1fa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d1fa:	b580      	push	{r7, lr}
 800d1fc:	b084      	sub	sp, #16
 800d1fe:	af00      	add	r7, sp, #0
 800d200:	6078      	str	r0, [r7, #4]
 800d202:	460b      	mov	r3, r1
 800d204:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d206:	2300      	movs	r3, #0
 800d208:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d20a:	2300      	movs	r3, #0
 800d20c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d214:	78fa      	ldrb	r2, [r7, #3]
 800d216:	4611      	mov	r1, r2
 800d218:	4618      	mov	r0, r3
 800d21a:	f7f6 f916 	bl	800344a <HAL_PCD_EP_ClrStall>
 800d21e:	4603      	mov	r3, r0
 800d220:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d222:	7bfb      	ldrb	r3, [r7, #15]
 800d224:	4618      	mov	r0, r3
 800d226:	f000 f8ab 	bl	800d380 <USBD_Get_USB_Status>
 800d22a:	4603      	mov	r3, r0
 800d22c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d22e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d230:	4618      	mov	r0, r3
 800d232:	3710      	adds	r7, #16
 800d234:	46bd      	mov	sp, r7
 800d236:	bd80      	pop	{r7, pc}

0800d238 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d238:	b480      	push	{r7}
 800d23a:	b085      	sub	sp, #20
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	6078      	str	r0, [r7, #4]
 800d240:	460b      	mov	r3, r1
 800d242:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d24a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d24c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d250:	2b00      	cmp	r3, #0
 800d252:	da0b      	bge.n	800d26c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d254:	78fb      	ldrb	r3, [r7, #3]
 800d256:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d25a:	68f9      	ldr	r1, [r7, #12]
 800d25c:	4613      	mov	r3, r2
 800d25e:	00db      	lsls	r3, r3, #3
 800d260:	1a9b      	subs	r3, r3, r2
 800d262:	009b      	lsls	r3, r3, #2
 800d264:	440b      	add	r3, r1
 800d266:	333e      	adds	r3, #62	; 0x3e
 800d268:	781b      	ldrb	r3, [r3, #0]
 800d26a:	e00b      	b.n	800d284 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d26c:	78fb      	ldrb	r3, [r7, #3]
 800d26e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d272:	68f9      	ldr	r1, [r7, #12]
 800d274:	4613      	mov	r3, r2
 800d276:	00db      	lsls	r3, r3, #3
 800d278:	1a9b      	subs	r3, r3, r2
 800d27a:	009b      	lsls	r3, r3, #2
 800d27c:	440b      	add	r3, r1
 800d27e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d282:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d284:	4618      	mov	r0, r3
 800d286:	3714      	adds	r7, #20
 800d288:	46bd      	mov	sp, r7
 800d28a:	bc80      	pop	{r7}
 800d28c:	4770      	bx	lr

0800d28e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d28e:	b580      	push	{r7, lr}
 800d290:	b084      	sub	sp, #16
 800d292:	af00      	add	r7, sp, #0
 800d294:	6078      	str	r0, [r7, #4]
 800d296:	460b      	mov	r3, r1
 800d298:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d29a:	2300      	movs	r3, #0
 800d29c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d29e:	2300      	movs	r3, #0
 800d2a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d2a8:	78fa      	ldrb	r2, [r7, #3]
 800d2aa:	4611      	mov	r1, r2
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	f7f5 fee5 	bl	800307c <HAL_PCD_SetAddress>
 800d2b2:	4603      	mov	r3, r0
 800d2b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d2b6:	7bfb      	ldrb	r3, [r7, #15]
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	f000 f861 	bl	800d380 <USBD_Get_USB_Status>
 800d2be:	4603      	mov	r3, r0
 800d2c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d2c2:	7bbb      	ldrb	r3, [r7, #14]
}
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	3710      	adds	r7, #16
 800d2c8:	46bd      	mov	sp, r7
 800d2ca:	bd80      	pop	{r7, pc}

0800d2cc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d2cc:	b580      	push	{r7, lr}
 800d2ce:	b086      	sub	sp, #24
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	60f8      	str	r0, [r7, #12]
 800d2d4:	607a      	str	r2, [r7, #4]
 800d2d6:	461a      	mov	r2, r3
 800d2d8:	460b      	mov	r3, r1
 800d2da:	72fb      	strb	r3, [r7, #11]
 800d2dc:	4613      	mov	r3, r2
 800d2de:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2e0:	2300      	movs	r3, #0
 800d2e2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d2ee:	893b      	ldrh	r3, [r7, #8]
 800d2f0:	7af9      	ldrb	r1, [r7, #11]
 800d2f2:	687a      	ldr	r2, [r7, #4]
 800d2f4:	f7f5 fffb 	bl	80032ee <HAL_PCD_EP_Transmit>
 800d2f8:	4603      	mov	r3, r0
 800d2fa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d2fc:	7dfb      	ldrb	r3, [r7, #23]
 800d2fe:	4618      	mov	r0, r3
 800d300:	f000 f83e 	bl	800d380 <USBD_Get_USB_Status>
 800d304:	4603      	mov	r3, r0
 800d306:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d308:	7dbb      	ldrb	r3, [r7, #22]
}
 800d30a:	4618      	mov	r0, r3
 800d30c:	3718      	adds	r7, #24
 800d30e:	46bd      	mov	sp, r7
 800d310:	bd80      	pop	{r7, pc}

0800d312 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d312:	b580      	push	{r7, lr}
 800d314:	b086      	sub	sp, #24
 800d316:	af00      	add	r7, sp, #0
 800d318:	60f8      	str	r0, [r7, #12]
 800d31a:	607a      	str	r2, [r7, #4]
 800d31c:	461a      	mov	r2, r3
 800d31e:	460b      	mov	r3, r1
 800d320:	72fb      	strb	r3, [r7, #11]
 800d322:	4613      	mov	r3, r2
 800d324:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d326:	2300      	movs	r3, #0
 800d328:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d32a:	2300      	movs	r3, #0
 800d32c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d334:	893b      	ldrh	r3, [r7, #8]
 800d336:	7af9      	ldrb	r1, [r7, #11]
 800d338:	687a      	ldr	r2, [r7, #4]
 800d33a:	f7f5 ff76 	bl	800322a <HAL_PCD_EP_Receive>
 800d33e:	4603      	mov	r3, r0
 800d340:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d342:	7dfb      	ldrb	r3, [r7, #23]
 800d344:	4618      	mov	r0, r3
 800d346:	f000 f81b 	bl	800d380 <USBD_Get_USB_Status>
 800d34a:	4603      	mov	r3, r0
 800d34c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d34e:	7dbb      	ldrb	r3, [r7, #22]
}
 800d350:	4618      	mov	r0, r3
 800d352:	3718      	adds	r7, #24
 800d354:	46bd      	mov	sp, r7
 800d356:	bd80      	pop	{r7, pc}

0800d358 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d358:	b580      	push	{r7, lr}
 800d35a:	b082      	sub	sp, #8
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]
 800d360:	460b      	mov	r3, r1
 800d362:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d36a:	78fa      	ldrb	r2, [r7, #3]
 800d36c:	4611      	mov	r1, r2
 800d36e:	4618      	mov	r0, r3
 800d370:	f7f5 ffa6 	bl	80032c0 <HAL_PCD_EP_GetRxCount>
 800d374:	4603      	mov	r3, r0
}
 800d376:	4618      	mov	r0, r3
 800d378:	3708      	adds	r7, #8
 800d37a:	46bd      	mov	sp, r7
 800d37c:	bd80      	pop	{r7, pc}
	...

0800d380 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d380:	b480      	push	{r7}
 800d382:	b085      	sub	sp, #20
 800d384:	af00      	add	r7, sp, #0
 800d386:	4603      	mov	r3, r0
 800d388:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d38a:	2300      	movs	r3, #0
 800d38c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d38e:	79fb      	ldrb	r3, [r7, #7]
 800d390:	2b03      	cmp	r3, #3
 800d392:	d817      	bhi.n	800d3c4 <USBD_Get_USB_Status+0x44>
 800d394:	a201      	add	r2, pc, #4	; (adr r2, 800d39c <USBD_Get_USB_Status+0x1c>)
 800d396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d39a:	bf00      	nop
 800d39c:	0800d3ad 	.word	0x0800d3ad
 800d3a0:	0800d3b3 	.word	0x0800d3b3
 800d3a4:	0800d3b9 	.word	0x0800d3b9
 800d3a8:	0800d3bf 	.word	0x0800d3bf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	73fb      	strb	r3, [r7, #15]
    break;
 800d3b0:	e00b      	b.n	800d3ca <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d3b2:	2302      	movs	r3, #2
 800d3b4:	73fb      	strb	r3, [r7, #15]
    break;
 800d3b6:	e008      	b.n	800d3ca <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d3b8:	2301      	movs	r3, #1
 800d3ba:	73fb      	strb	r3, [r7, #15]
    break;
 800d3bc:	e005      	b.n	800d3ca <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d3be:	2302      	movs	r3, #2
 800d3c0:	73fb      	strb	r3, [r7, #15]
    break;
 800d3c2:	e002      	b.n	800d3ca <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d3c4:	2302      	movs	r3, #2
 800d3c6:	73fb      	strb	r3, [r7, #15]
    break;
 800d3c8:	bf00      	nop
  }
  return usb_status;
 800d3ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	3714      	adds	r7, #20
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	bc80      	pop	{r7}
 800d3d4:	4770      	bx	lr
 800d3d6:	bf00      	nop

0800d3d8 <__errno>:
 800d3d8:	4b01      	ldr	r3, [pc, #4]	; (800d3e0 <__errno+0x8>)
 800d3da:	6818      	ldr	r0, [r3, #0]
 800d3dc:	4770      	bx	lr
 800d3de:	bf00      	nop
 800d3e0:	2000017c 	.word	0x2000017c

0800d3e4 <__libc_init_array>:
 800d3e4:	b570      	push	{r4, r5, r6, lr}
 800d3e6:	2500      	movs	r5, #0
 800d3e8:	4e0c      	ldr	r6, [pc, #48]	; (800d41c <__libc_init_array+0x38>)
 800d3ea:	4c0d      	ldr	r4, [pc, #52]	; (800d420 <__libc_init_array+0x3c>)
 800d3ec:	1ba4      	subs	r4, r4, r6
 800d3ee:	10a4      	asrs	r4, r4, #2
 800d3f0:	42a5      	cmp	r5, r4
 800d3f2:	d109      	bne.n	800d408 <__libc_init_array+0x24>
 800d3f4:	f000 fc46 	bl	800dc84 <_init>
 800d3f8:	2500      	movs	r5, #0
 800d3fa:	4e0a      	ldr	r6, [pc, #40]	; (800d424 <__libc_init_array+0x40>)
 800d3fc:	4c0a      	ldr	r4, [pc, #40]	; (800d428 <__libc_init_array+0x44>)
 800d3fe:	1ba4      	subs	r4, r4, r6
 800d400:	10a4      	asrs	r4, r4, #2
 800d402:	42a5      	cmp	r5, r4
 800d404:	d105      	bne.n	800d412 <__libc_init_array+0x2e>
 800d406:	bd70      	pop	{r4, r5, r6, pc}
 800d408:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d40c:	4798      	blx	r3
 800d40e:	3501      	adds	r5, #1
 800d410:	e7ee      	b.n	800d3f0 <__libc_init_array+0xc>
 800d412:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d416:	4798      	blx	r3
 800d418:	3501      	adds	r5, #1
 800d41a:	e7f2      	b.n	800d402 <__libc_init_array+0x1e>
 800d41c:	0802f758 	.word	0x0802f758
 800d420:	0802f758 	.word	0x0802f758
 800d424:	0802f758 	.word	0x0802f758
 800d428:	0802f75c 	.word	0x0802f75c

0800d42c <malloc>:
 800d42c:	4b02      	ldr	r3, [pc, #8]	; (800d438 <malloc+0xc>)
 800d42e:	4601      	mov	r1, r0
 800d430:	6818      	ldr	r0, [r3, #0]
 800d432:	f000 b86b 	b.w	800d50c <_malloc_r>
 800d436:	bf00      	nop
 800d438:	2000017c 	.word	0x2000017c

0800d43c <free>:
 800d43c:	4b02      	ldr	r3, [pc, #8]	; (800d448 <free+0xc>)
 800d43e:	4601      	mov	r1, r0
 800d440:	6818      	ldr	r0, [r3, #0]
 800d442:	f000 b817 	b.w	800d474 <_free_r>
 800d446:	bf00      	nop
 800d448:	2000017c 	.word	0x2000017c

0800d44c <memcpy>:
 800d44c:	b510      	push	{r4, lr}
 800d44e:	1e43      	subs	r3, r0, #1
 800d450:	440a      	add	r2, r1
 800d452:	4291      	cmp	r1, r2
 800d454:	d100      	bne.n	800d458 <memcpy+0xc>
 800d456:	bd10      	pop	{r4, pc}
 800d458:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d45c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d460:	e7f7      	b.n	800d452 <memcpy+0x6>

0800d462 <memset>:
 800d462:	4603      	mov	r3, r0
 800d464:	4402      	add	r2, r0
 800d466:	4293      	cmp	r3, r2
 800d468:	d100      	bne.n	800d46c <memset+0xa>
 800d46a:	4770      	bx	lr
 800d46c:	f803 1b01 	strb.w	r1, [r3], #1
 800d470:	e7f9      	b.n	800d466 <memset+0x4>
	...

0800d474 <_free_r>:
 800d474:	b538      	push	{r3, r4, r5, lr}
 800d476:	4605      	mov	r5, r0
 800d478:	2900      	cmp	r1, #0
 800d47a:	d043      	beq.n	800d504 <_free_r+0x90>
 800d47c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d480:	1f0c      	subs	r4, r1, #4
 800d482:	2b00      	cmp	r3, #0
 800d484:	bfb8      	it	lt
 800d486:	18e4      	addlt	r4, r4, r3
 800d488:	f000 f8ca 	bl	800d620 <__malloc_lock>
 800d48c:	4a1e      	ldr	r2, [pc, #120]	; (800d508 <_free_r+0x94>)
 800d48e:	6813      	ldr	r3, [r2, #0]
 800d490:	4610      	mov	r0, r2
 800d492:	b933      	cbnz	r3, 800d4a2 <_free_r+0x2e>
 800d494:	6063      	str	r3, [r4, #4]
 800d496:	6014      	str	r4, [r2, #0]
 800d498:	4628      	mov	r0, r5
 800d49a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d49e:	f000 b8c0 	b.w	800d622 <__malloc_unlock>
 800d4a2:	42a3      	cmp	r3, r4
 800d4a4:	d90b      	bls.n	800d4be <_free_r+0x4a>
 800d4a6:	6821      	ldr	r1, [r4, #0]
 800d4a8:	1862      	adds	r2, r4, r1
 800d4aa:	4293      	cmp	r3, r2
 800d4ac:	bf01      	itttt	eq
 800d4ae:	681a      	ldreq	r2, [r3, #0]
 800d4b0:	685b      	ldreq	r3, [r3, #4]
 800d4b2:	1852      	addeq	r2, r2, r1
 800d4b4:	6022      	streq	r2, [r4, #0]
 800d4b6:	6063      	str	r3, [r4, #4]
 800d4b8:	6004      	str	r4, [r0, #0]
 800d4ba:	e7ed      	b.n	800d498 <_free_r+0x24>
 800d4bc:	4613      	mov	r3, r2
 800d4be:	685a      	ldr	r2, [r3, #4]
 800d4c0:	b10a      	cbz	r2, 800d4c6 <_free_r+0x52>
 800d4c2:	42a2      	cmp	r2, r4
 800d4c4:	d9fa      	bls.n	800d4bc <_free_r+0x48>
 800d4c6:	6819      	ldr	r1, [r3, #0]
 800d4c8:	1858      	adds	r0, r3, r1
 800d4ca:	42a0      	cmp	r0, r4
 800d4cc:	d10b      	bne.n	800d4e6 <_free_r+0x72>
 800d4ce:	6820      	ldr	r0, [r4, #0]
 800d4d0:	4401      	add	r1, r0
 800d4d2:	1858      	adds	r0, r3, r1
 800d4d4:	4282      	cmp	r2, r0
 800d4d6:	6019      	str	r1, [r3, #0]
 800d4d8:	d1de      	bne.n	800d498 <_free_r+0x24>
 800d4da:	6810      	ldr	r0, [r2, #0]
 800d4dc:	6852      	ldr	r2, [r2, #4]
 800d4de:	4401      	add	r1, r0
 800d4e0:	6019      	str	r1, [r3, #0]
 800d4e2:	605a      	str	r2, [r3, #4]
 800d4e4:	e7d8      	b.n	800d498 <_free_r+0x24>
 800d4e6:	d902      	bls.n	800d4ee <_free_r+0x7a>
 800d4e8:	230c      	movs	r3, #12
 800d4ea:	602b      	str	r3, [r5, #0]
 800d4ec:	e7d4      	b.n	800d498 <_free_r+0x24>
 800d4ee:	6820      	ldr	r0, [r4, #0]
 800d4f0:	1821      	adds	r1, r4, r0
 800d4f2:	428a      	cmp	r2, r1
 800d4f4:	bf01      	itttt	eq
 800d4f6:	6811      	ldreq	r1, [r2, #0]
 800d4f8:	6852      	ldreq	r2, [r2, #4]
 800d4fa:	1809      	addeq	r1, r1, r0
 800d4fc:	6021      	streq	r1, [r4, #0]
 800d4fe:	6062      	str	r2, [r4, #4]
 800d500:	605c      	str	r4, [r3, #4]
 800d502:	e7c9      	b.n	800d498 <_free_r+0x24>
 800d504:	bd38      	pop	{r3, r4, r5, pc}
 800d506:	bf00      	nop
 800d508:	20000430 	.word	0x20000430

0800d50c <_malloc_r>:
 800d50c:	b570      	push	{r4, r5, r6, lr}
 800d50e:	1ccd      	adds	r5, r1, #3
 800d510:	f025 0503 	bic.w	r5, r5, #3
 800d514:	3508      	adds	r5, #8
 800d516:	2d0c      	cmp	r5, #12
 800d518:	bf38      	it	cc
 800d51a:	250c      	movcc	r5, #12
 800d51c:	2d00      	cmp	r5, #0
 800d51e:	4606      	mov	r6, r0
 800d520:	db01      	blt.n	800d526 <_malloc_r+0x1a>
 800d522:	42a9      	cmp	r1, r5
 800d524:	d903      	bls.n	800d52e <_malloc_r+0x22>
 800d526:	230c      	movs	r3, #12
 800d528:	6033      	str	r3, [r6, #0]
 800d52a:	2000      	movs	r0, #0
 800d52c:	bd70      	pop	{r4, r5, r6, pc}
 800d52e:	f000 f877 	bl	800d620 <__malloc_lock>
 800d532:	4a21      	ldr	r2, [pc, #132]	; (800d5b8 <_malloc_r+0xac>)
 800d534:	6814      	ldr	r4, [r2, #0]
 800d536:	4621      	mov	r1, r4
 800d538:	b991      	cbnz	r1, 800d560 <_malloc_r+0x54>
 800d53a:	4c20      	ldr	r4, [pc, #128]	; (800d5bc <_malloc_r+0xb0>)
 800d53c:	6823      	ldr	r3, [r4, #0]
 800d53e:	b91b      	cbnz	r3, 800d548 <_malloc_r+0x3c>
 800d540:	4630      	mov	r0, r6
 800d542:	f000 f83d 	bl	800d5c0 <_sbrk_r>
 800d546:	6020      	str	r0, [r4, #0]
 800d548:	4629      	mov	r1, r5
 800d54a:	4630      	mov	r0, r6
 800d54c:	f000 f838 	bl	800d5c0 <_sbrk_r>
 800d550:	1c43      	adds	r3, r0, #1
 800d552:	d124      	bne.n	800d59e <_malloc_r+0x92>
 800d554:	230c      	movs	r3, #12
 800d556:	4630      	mov	r0, r6
 800d558:	6033      	str	r3, [r6, #0]
 800d55a:	f000 f862 	bl	800d622 <__malloc_unlock>
 800d55e:	e7e4      	b.n	800d52a <_malloc_r+0x1e>
 800d560:	680b      	ldr	r3, [r1, #0]
 800d562:	1b5b      	subs	r3, r3, r5
 800d564:	d418      	bmi.n	800d598 <_malloc_r+0x8c>
 800d566:	2b0b      	cmp	r3, #11
 800d568:	d90f      	bls.n	800d58a <_malloc_r+0x7e>
 800d56a:	600b      	str	r3, [r1, #0]
 800d56c:	18cc      	adds	r4, r1, r3
 800d56e:	50cd      	str	r5, [r1, r3]
 800d570:	4630      	mov	r0, r6
 800d572:	f000 f856 	bl	800d622 <__malloc_unlock>
 800d576:	f104 000b 	add.w	r0, r4, #11
 800d57a:	1d23      	adds	r3, r4, #4
 800d57c:	f020 0007 	bic.w	r0, r0, #7
 800d580:	1ac3      	subs	r3, r0, r3
 800d582:	d0d3      	beq.n	800d52c <_malloc_r+0x20>
 800d584:	425a      	negs	r2, r3
 800d586:	50e2      	str	r2, [r4, r3]
 800d588:	e7d0      	b.n	800d52c <_malloc_r+0x20>
 800d58a:	684b      	ldr	r3, [r1, #4]
 800d58c:	428c      	cmp	r4, r1
 800d58e:	bf16      	itet	ne
 800d590:	6063      	strne	r3, [r4, #4]
 800d592:	6013      	streq	r3, [r2, #0]
 800d594:	460c      	movne	r4, r1
 800d596:	e7eb      	b.n	800d570 <_malloc_r+0x64>
 800d598:	460c      	mov	r4, r1
 800d59a:	6849      	ldr	r1, [r1, #4]
 800d59c:	e7cc      	b.n	800d538 <_malloc_r+0x2c>
 800d59e:	1cc4      	adds	r4, r0, #3
 800d5a0:	f024 0403 	bic.w	r4, r4, #3
 800d5a4:	42a0      	cmp	r0, r4
 800d5a6:	d005      	beq.n	800d5b4 <_malloc_r+0xa8>
 800d5a8:	1a21      	subs	r1, r4, r0
 800d5aa:	4630      	mov	r0, r6
 800d5ac:	f000 f808 	bl	800d5c0 <_sbrk_r>
 800d5b0:	3001      	adds	r0, #1
 800d5b2:	d0cf      	beq.n	800d554 <_malloc_r+0x48>
 800d5b4:	6025      	str	r5, [r4, #0]
 800d5b6:	e7db      	b.n	800d570 <_malloc_r+0x64>
 800d5b8:	20000430 	.word	0x20000430
 800d5bc:	20000434 	.word	0x20000434

0800d5c0 <_sbrk_r>:
 800d5c0:	b538      	push	{r3, r4, r5, lr}
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	4c05      	ldr	r4, [pc, #20]	; (800d5dc <_sbrk_r+0x1c>)
 800d5c6:	4605      	mov	r5, r0
 800d5c8:	4608      	mov	r0, r1
 800d5ca:	6023      	str	r3, [r4, #0]
 800d5cc:	f7f3 fcf4 	bl	8000fb8 <_sbrk>
 800d5d0:	1c43      	adds	r3, r0, #1
 800d5d2:	d102      	bne.n	800d5da <_sbrk_r+0x1a>
 800d5d4:	6823      	ldr	r3, [r4, #0]
 800d5d6:	b103      	cbz	r3, 800d5da <_sbrk_r+0x1a>
 800d5d8:	602b      	str	r3, [r5, #0]
 800d5da:	bd38      	pop	{r3, r4, r5, pc}
 800d5dc:	20002330 	.word	0x20002330

0800d5e0 <siprintf>:
 800d5e0:	b40e      	push	{r1, r2, r3}
 800d5e2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d5e6:	b500      	push	{lr}
 800d5e8:	b09c      	sub	sp, #112	; 0x70
 800d5ea:	ab1d      	add	r3, sp, #116	; 0x74
 800d5ec:	9002      	str	r0, [sp, #8]
 800d5ee:	9006      	str	r0, [sp, #24]
 800d5f0:	9107      	str	r1, [sp, #28]
 800d5f2:	9104      	str	r1, [sp, #16]
 800d5f4:	4808      	ldr	r0, [pc, #32]	; (800d618 <siprintf+0x38>)
 800d5f6:	4909      	ldr	r1, [pc, #36]	; (800d61c <siprintf+0x3c>)
 800d5f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d5fc:	9105      	str	r1, [sp, #20]
 800d5fe:	6800      	ldr	r0, [r0, #0]
 800d600:	a902      	add	r1, sp, #8
 800d602:	9301      	str	r3, [sp, #4]
 800d604:	f000 f868 	bl	800d6d8 <_svfiprintf_r>
 800d608:	2200      	movs	r2, #0
 800d60a:	9b02      	ldr	r3, [sp, #8]
 800d60c:	701a      	strb	r2, [r3, #0]
 800d60e:	b01c      	add	sp, #112	; 0x70
 800d610:	f85d eb04 	ldr.w	lr, [sp], #4
 800d614:	b003      	add	sp, #12
 800d616:	4770      	bx	lr
 800d618:	2000017c 	.word	0x2000017c
 800d61c:	ffff0208 	.word	0xffff0208

0800d620 <__malloc_lock>:
 800d620:	4770      	bx	lr

0800d622 <__malloc_unlock>:
 800d622:	4770      	bx	lr

0800d624 <__ssputs_r>:
 800d624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d628:	688e      	ldr	r6, [r1, #8]
 800d62a:	4682      	mov	sl, r0
 800d62c:	429e      	cmp	r6, r3
 800d62e:	460c      	mov	r4, r1
 800d630:	4690      	mov	r8, r2
 800d632:	4699      	mov	r9, r3
 800d634:	d837      	bhi.n	800d6a6 <__ssputs_r+0x82>
 800d636:	898a      	ldrh	r2, [r1, #12]
 800d638:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d63c:	d031      	beq.n	800d6a2 <__ssputs_r+0x7e>
 800d63e:	2302      	movs	r3, #2
 800d640:	6825      	ldr	r5, [r4, #0]
 800d642:	6909      	ldr	r1, [r1, #16]
 800d644:	1a6f      	subs	r7, r5, r1
 800d646:	6965      	ldr	r5, [r4, #20]
 800d648:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d64c:	fb95 f5f3 	sdiv	r5, r5, r3
 800d650:	f109 0301 	add.w	r3, r9, #1
 800d654:	443b      	add	r3, r7
 800d656:	429d      	cmp	r5, r3
 800d658:	bf38      	it	cc
 800d65a:	461d      	movcc	r5, r3
 800d65c:	0553      	lsls	r3, r2, #21
 800d65e:	d530      	bpl.n	800d6c2 <__ssputs_r+0x9e>
 800d660:	4629      	mov	r1, r5
 800d662:	f7ff ff53 	bl	800d50c <_malloc_r>
 800d666:	4606      	mov	r6, r0
 800d668:	b950      	cbnz	r0, 800d680 <__ssputs_r+0x5c>
 800d66a:	230c      	movs	r3, #12
 800d66c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d670:	f8ca 3000 	str.w	r3, [sl]
 800d674:	89a3      	ldrh	r3, [r4, #12]
 800d676:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d67a:	81a3      	strh	r3, [r4, #12]
 800d67c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d680:	463a      	mov	r2, r7
 800d682:	6921      	ldr	r1, [r4, #16]
 800d684:	f7ff fee2 	bl	800d44c <memcpy>
 800d688:	89a3      	ldrh	r3, [r4, #12]
 800d68a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d68e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d692:	81a3      	strh	r3, [r4, #12]
 800d694:	6126      	str	r6, [r4, #16]
 800d696:	443e      	add	r6, r7
 800d698:	6026      	str	r6, [r4, #0]
 800d69a:	464e      	mov	r6, r9
 800d69c:	6165      	str	r5, [r4, #20]
 800d69e:	1bed      	subs	r5, r5, r7
 800d6a0:	60a5      	str	r5, [r4, #8]
 800d6a2:	454e      	cmp	r6, r9
 800d6a4:	d900      	bls.n	800d6a8 <__ssputs_r+0x84>
 800d6a6:	464e      	mov	r6, r9
 800d6a8:	4632      	mov	r2, r6
 800d6aa:	4641      	mov	r1, r8
 800d6ac:	6820      	ldr	r0, [r4, #0]
 800d6ae:	f000 faa1 	bl	800dbf4 <memmove>
 800d6b2:	68a3      	ldr	r3, [r4, #8]
 800d6b4:	2000      	movs	r0, #0
 800d6b6:	1b9b      	subs	r3, r3, r6
 800d6b8:	60a3      	str	r3, [r4, #8]
 800d6ba:	6823      	ldr	r3, [r4, #0]
 800d6bc:	441e      	add	r6, r3
 800d6be:	6026      	str	r6, [r4, #0]
 800d6c0:	e7dc      	b.n	800d67c <__ssputs_r+0x58>
 800d6c2:	462a      	mov	r2, r5
 800d6c4:	f000 faaf 	bl	800dc26 <_realloc_r>
 800d6c8:	4606      	mov	r6, r0
 800d6ca:	2800      	cmp	r0, #0
 800d6cc:	d1e2      	bne.n	800d694 <__ssputs_r+0x70>
 800d6ce:	6921      	ldr	r1, [r4, #16]
 800d6d0:	4650      	mov	r0, sl
 800d6d2:	f7ff fecf 	bl	800d474 <_free_r>
 800d6d6:	e7c8      	b.n	800d66a <__ssputs_r+0x46>

0800d6d8 <_svfiprintf_r>:
 800d6d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6dc:	461d      	mov	r5, r3
 800d6de:	898b      	ldrh	r3, [r1, #12]
 800d6e0:	b09d      	sub	sp, #116	; 0x74
 800d6e2:	061f      	lsls	r7, r3, #24
 800d6e4:	4680      	mov	r8, r0
 800d6e6:	460c      	mov	r4, r1
 800d6e8:	4616      	mov	r6, r2
 800d6ea:	d50f      	bpl.n	800d70c <_svfiprintf_r+0x34>
 800d6ec:	690b      	ldr	r3, [r1, #16]
 800d6ee:	b96b      	cbnz	r3, 800d70c <_svfiprintf_r+0x34>
 800d6f0:	2140      	movs	r1, #64	; 0x40
 800d6f2:	f7ff ff0b 	bl	800d50c <_malloc_r>
 800d6f6:	6020      	str	r0, [r4, #0]
 800d6f8:	6120      	str	r0, [r4, #16]
 800d6fa:	b928      	cbnz	r0, 800d708 <_svfiprintf_r+0x30>
 800d6fc:	230c      	movs	r3, #12
 800d6fe:	f8c8 3000 	str.w	r3, [r8]
 800d702:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d706:	e0c8      	b.n	800d89a <_svfiprintf_r+0x1c2>
 800d708:	2340      	movs	r3, #64	; 0x40
 800d70a:	6163      	str	r3, [r4, #20]
 800d70c:	2300      	movs	r3, #0
 800d70e:	9309      	str	r3, [sp, #36]	; 0x24
 800d710:	2320      	movs	r3, #32
 800d712:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d716:	2330      	movs	r3, #48	; 0x30
 800d718:	f04f 0b01 	mov.w	fp, #1
 800d71c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d720:	9503      	str	r5, [sp, #12]
 800d722:	4637      	mov	r7, r6
 800d724:	463d      	mov	r5, r7
 800d726:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d72a:	b10b      	cbz	r3, 800d730 <_svfiprintf_r+0x58>
 800d72c:	2b25      	cmp	r3, #37	; 0x25
 800d72e:	d13e      	bne.n	800d7ae <_svfiprintf_r+0xd6>
 800d730:	ebb7 0a06 	subs.w	sl, r7, r6
 800d734:	d00b      	beq.n	800d74e <_svfiprintf_r+0x76>
 800d736:	4653      	mov	r3, sl
 800d738:	4632      	mov	r2, r6
 800d73a:	4621      	mov	r1, r4
 800d73c:	4640      	mov	r0, r8
 800d73e:	f7ff ff71 	bl	800d624 <__ssputs_r>
 800d742:	3001      	adds	r0, #1
 800d744:	f000 80a4 	beq.w	800d890 <_svfiprintf_r+0x1b8>
 800d748:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d74a:	4453      	add	r3, sl
 800d74c:	9309      	str	r3, [sp, #36]	; 0x24
 800d74e:	783b      	ldrb	r3, [r7, #0]
 800d750:	2b00      	cmp	r3, #0
 800d752:	f000 809d 	beq.w	800d890 <_svfiprintf_r+0x1b8>
 800d756:	2300      	movs	r3, #0
 800d758:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d75c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d760:	9304      	str	r3, [sp, #16]
 800d762:	9307      	str	r3, [sp, #28]
 800d764:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d768:	931a      	str	r3, [sp, #104]	; 0x68
 800d76a:	462f      	mov	r7, r5
 800d76c:	2205      	movs	r2, #5
 800d76e:	f817 1b01 	ldrb.w	r1, [r7], #1
 800d772:	4850      	ldr	r0, [pc, #320]	; (800d8b4 <_svfiprintf_r+0x1dc>)
 800d774:	f000 fa30 	bl	800dbd8 <memchr>
 800d778:	9b04      	ldr	r3, [sp, #16]
 800d77a:	b9d0      	cbnz	r0, 800d7b2 <_svfiprintf_r+0xda>
 800d77c:	06d9      	lsls	r1, r3, #27
 800d77e:	bf44      	itt	mi
 800d780:	2220      	movmi	r2, #32
 800d782:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d786:	071a      	lsls	r2, r3, #28
 800d788:	bf44      	itt	mi
 800d78a:	222b      	movmi	r2, #43	; 0x2b
 800d78c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d790:	782a      	ldrb	r2, [r5, #0]
 800d792:	2a2a      	cmp	r2, #42	; 0x2a
 800d794:	d015      	beq.n	800d7c2 <_svfiprintf_r+0xea>
 800d796:	462f      	mov	r7, r5
 800d798:	2000      	movs	r0, #0
 800d79a:	250a      	movs	r5, #10
 800d79c:	9a07      	ldr	r2, [sp, #28]
 800d79e:	4639      	mov	r1, r7
 800d7a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d7a4:	3b30      	subs	r3, #48	; 0x30
 800d7a6:	2b09      	cmp	r3, #9
 800d7a8:	d94d      	bls.n	800d846 <_svfiprintf_r+0x16e>
 800d7aa:	b1b8      	cbz	r0, 800d7dc <_svfiprintf_r+0x104>
 800d7ac:	e00f      	b.n	800d7ce <_svfiprintf_r+0xf6>
 800d7ae:	462f      	mov	r7, r5
 800d7b0:	e7b8      	b.n	800d724 <_svfiprintf_r+0x4c>
 800d7b2:	4a40      	ldr	r2, [pc, #256]	; (800d8b4 <_svfiprintf_r+0x1dc>)
 800d7b4:	463d      	mov	r5, r7
 800d7b6:	1a80      	subs	r0, r0, r2
 800d7b8:	fa0b f000 	lsl.w	r0, fp, r0
 800d7bc:	4318      	orrs	r0, r3
 800d7be:	9004      	str	r0, [sp, #16]
 800d7c0:	e7d3      	b.n	800d76a <_svfiprintf_r+0x92>
 800d7c2:	9a03      	ldr	r2, [sp, #12]
 800d7c4:	1d11      	adds	r1, r2, #4
 800d7c6:	6812      	ldr	r2, [r2, #0]
 800d7c8:	9103      	str	r1, [sp, #12]
 800d7ca:	2a00      	cmp	r2, #0
 800d7cc:	db01      	blt.n	800d7d2 <_svfiprintf_r+0xfa>
 800d7ce:	9207      	str	r2, [sp, #28]
 800d7d0:	e004      	b.n	800d7dc <_svfiprintf_r+0x104>
 800d7d2:	4252      	negs	r2, r2
 800d7d4:	f043 0302 	orr.w	r3, r3, #2
 800d7d8:	9207      	str	r2, [sp, #28]
 800d7da:	9304      	str	r3, [sp, #16]
 800d7dc:	783b      	ldrb	r3, [r7, #0]
 800d7de:	2b2e      	cmp	r3, #46	; 0x2e
 800d7e0:	d10c      	bne.n	800d7fc <_svfiprintf_r+0x124>
 800d7e2:	787b      	ldrb	r3, [r7, #1]
 800d7e4:	2b2a      	cmp	r3, #42	; 0x2a
 800d7e6:	d133      	bne.n	800d850 <_svfiprintf_r+0x178>
 800d7e8:	9b03      	ldr	r3, [sp, #12]
 800d7ea:	3702      	adds	r7, #2
 800d7ec:	1d1a      	adds	r2, r3, #4
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	9203      	str	r2, [sp, #12]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	bfb8      	it	lt
 800d7f6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d7fa:	9305      	str	r3, [sp, #20]
 800d7fc:	4d2e      	ldr	r5, [pc, #184]	; (800d8b8 <_svfiprintf_r+0x1e0>)
 800d7fe:	2203      	movs	r2, #3
 800d800:	7839      	ldrb	r1, [r7, #0]
 800d802:	4628      	mov	r0, r5
 800d804:	f000 f9e8 	bl	800dbd8 <memchr>
 800d808:	b138      	cbz	r0, 800d81a <_svfiprintf_r+0x142>
 800d80a:	2340      	movs	r3, #64	; 0x40
 800d80c:	1b40      	subs	r0, r0, r5
 800d80e:	fa03 f000 	lsl.w	r0, r3, r0
 800d812:	9b04      	ldr	r3, [sp, #16]
 800d814:	3701      	adds	r7, #1
 800d816:	4303      	orrs	r3, r0
 800d818:	9304      	str	r3, [sp, #16]
 800d81a:	7839      	ldrb	r1, [r7, #0]
 800d81c:	2206      	movs	r2, #6
 800d81e:	4827      	ldr	r0, [pc, #156]	; (800d8bc <_svfiprintf_r+0x1e4>)
 800d820:	1c7e      	adds	r6, r7, #1
 800d822:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d826:	f000 f9d7 	bl	800dbd8 <memchr>
 800d82a:	2800      	cmp	r0, #0
 800d82c:	d038      	beq.n	800d8a0 <_svfiprintf_r+0x1c8>
 800d82e:	4b24      	ldr	r3, [pc, #144]	; (800d8c0 <_svfiprintf_r+0x1e8>)
 800d830:	bb13      	cbnz	r3, 800d878 <_svfiprintf_r+0x1a0>
 800d832:	9b03      	ldr	r3, [sp, #12]
 800d834:	3307      	adds	r3, #7
 800d836:	f023 0307 	bic.w	r3, r3, #7
 800d83a:	3308      	adds	r3, #8
 800d83c:	9303      	str	r3, [sp, #12]
 800d83e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d840:	444b      	add	r3, r9
 800d842:	9309      	str	r3, [sp, #36]	; 0x24
 800d844:	e76d      	b.n	800d722 <_svfiprintf_r+0x4a>
 800d846:	fb05 3202 	mla	r2, r5, r2, r3
 800d84a:	2001      	movs	r0, #1
 800d84c:	460f      	mov	r7, r1
 800d84e:	e7a6      	b.n	800d79e <_svfiprintf_r+0xc6>
 800d850:	2300      	movs	r3, #0
 800d852:	250a      	movs	r5, #10
 800d854:	4619      	mov	r1, r3
 800d856:	3701      	adds	r7, #1
 800d858:	9305      	str	r3, [sp, #20]
 800d85a:	4638      	mov	r0, r7
 800d85c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d860:	3a30      	subs	r2, #48	; 0x30
 800d862:	2a09      	cmp	r2, #9
 800d864:	d903      	bls.n	800d86e <_svfiprintf_r+0x196>
 800d866:	2b00      	cmp	r3, #0
 800d868:	d0c8      	beq.n	800d7fc <_svfiprintf_r+0x124>
 800d86a:	9105      	str	r1, [sp, #20]
 800d86c:	e7c6      	b.n	800d7fc <_svfiprintf_r+0x124>
 800d86e:	fb05 2101 	mla	r1, r5, r1, r2
 800d872:	2301      	movs	r3, #1
 800d874:	4607      	mov	r7, r0
 800d876:	e7f0      	b.n	800d85a <_svfiprintf_r+0x182>
 800d878:	ab03      	add	r3, sp, #12
 800d87a:	9300      	str	r3, [sp, #0]
 800d87c:	4622      	mov	r2, r4
 800d87e:	4b11      	ldr	r3, [pc, #68]	; (800d8c4 <_svfiprintf_r+0x1ec>)
 800d880:	a904      	add	r1, sp, #16
 800d882:	4640      	mov	r0, r8
 800d884:	f3af 8000 	nop.w
 800d888:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800d88c:	4681      	mov	r9, r0
 800d88e:	d1d6      	bne.n	800d83e <_svfiprintf_r+0x166>
 800d890:	89a3      	ldrh	r3, [r4, #12]
 800d892:	065b      	lsls	r3, r3, #25
 800d894:	f53f af35 	bmi.w	800d702 <_svfiprintf_r+0x2a>
 800d898:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d89a:	b01d      	add	sp, #116	; 0x74
 800d89c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8a0:	ab03      	add	r3, sp, #12
 800d8a2:	9300      	str	r3, [sp, #0]
 800d8a4:	4622      	mov	r2, r4
 800d8a6:	4b07      	ldr	r3, [pc, #28]	; (800d8c4 <_svfiprintf_r+0x1ec>)
 800d8a8:	a904      	add	r1, sp, #16
 800d8aa:	4640      	mov	r0, r8
 800d8ac:	f000 f882 	bl	800d9b4 <_printf_i>
 800d8b0:	e7ea      	b.n	800d888 <_svfiprintf_r+0x1b0>
 800d8b2:	bf00      	nop
 800d8b4:	0802f71c 	.word	0x0802f71c
 800d8b8:	0802f722 	.word	0x0802f722
 800d8bc:	0802f726 	.word	0x0802f726
 800d8c0:	00000000 	.word	0x00000000
 800d8c4:	0800d625 	.word	0x0800d625

0800d8c8 <_printf_common>:
 800d8c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d8cc:	4691      	mov	r9, r2
 800d8ce:	461f      	mov	r7, r3
 800d8d0:	688a      	ldr	r2, [r1, #8]
 800d8d2:	690b      	ldr	r3, [r1, #16]
 800d8d4:	4606      	mov	r6, r0
 800d8d6:	4293      	cmp	r3, r2
 800d8d8:	bfb8      	it	lt
 800d8da:	4613      	movlt	r3, r2
 800d8dc:	f8c9 3000 	str.w	r3, [r9]
 800d8e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d8e4:	460c      	mov	r4, r1
 800d8e6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d8ea:	b112      	cbz	r2, 800d8f2 <_printf_common+0x2a>
 800d8ec:	3301      	adds	r3, #1
 800d8ee:	f8c9 3000 	str.w	r3, [r9]
 800d8f2:	6823      	ldr	r3, [r4, #0]
 800d8f4:	0699      	lsls	r1, r3, #26
 800d8f6:	bf42      	ittt	mi
 800d8f8:	f8d9 3000 	ldrmi.w	r3, [r9]
 800d8fc:	3302      	addmi	r3, #2
 800d8fe:	f8c9 3000 	strmi.w	r3, [r9]
 800d902:	6825      	ldr	r5, [r4, #0]
 800d904:	f015 0506 	ands.w	r5, r5, #6
 800d908:	d107      	bne.n	800d91a <_printf_common+0x52>
 800d90a:	f104 0a19 	add.w	sl, r4, #25
 800d90e:	68e3      	ldr	r3, [r4, #12]
 800d910:	f8d9 2000 	ldr.w	r2, [r9]
 800d914:	1a9b      	subs	r3, r3, r2
 800d916:	42ab      	cmp	r3, r5
 800d918:	dc29      	bgt.n	800d96e <_printf_common+0xa6>
 800d91a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800d91e:	6822      	ldr	r2, [r4, #0]
 800d920:	3300      	adds	r3, #0
 800d922:	bf18      	it	ne
 800d924:	2301      	movne	r3, #1
 800d926:	0692      	lsls	r2, r2, #26
 800d928:	d42e      	bmi.n	800d988 <_printf_common+0xc0>
 800d92a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d92e:	4639      	mov	r1, r7
 800d930:	4630      	mov	r0, r6
 800d932:	47c0      	blx	r8
 800d934:	3001      	adds	r0, #1
 800d936:	d021      	beq.n	800d97c <_printf_common+0xb4>
 800d938:	6823      	ldr	r3, [r4, #0]
 800d93a:	68e5      	ldr	r5, [r4, #12]
 800d93c:	f003 0306 	and.w	r3, r3, #6
 800d940:	2b04      	cmp	r3, #4
 800d942:	bf18      	it	ne
 800d944:	2500      	movne	r5, #0
 800d946:	f8d9 2000 	ldr.w	r2, [r9]
 800d94a:	f04f 0900 	mov.w	r9, #0
 800d94e:	bf08      	it	eq
 800d950:	1aad      	subeq	r5, r5, r2
 800d952:	68a3      	ldr	r3, [r4, #8]
 800d954:	6922      	ldr	r2, [r4, #16]
 800d956:	bf08      	it	eq
 800d958:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d95c:	4293      	cmp	r3, r2
 800d95e:	bfc4      	itt	gt
 800d960:	1a9b      	subgt	r3, r3, r2
 800d962:	18ed      	addgt	r5, r5, r3
 800d964:	341a      	adds	r4, #26
 800d966:	454d      	cmp	r5, r9
 800d968:	d11a      	bne.n	800d9a0 <_printf_common+0xd8>
 800d96a:	2000      	movs	r0, #0
 800d96c:	e008      	b.n	800d980 <_printf_common+0xb8>
 800d96e:	2301      	movs	r3, #1
 800d970:	4652      	mov	r2, sl
 800d972:	4639      	mov	r1, r7
 800d974:	4630      	mov	r0, r6
 800d976:	47c0      	blx	r8
 800d978:	3001      	adds	r0, #1
 800d97a:	d103      	bne.n	800d984 <_printf_common+0xbc>
 800d97c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d984:	3501      	adds	r5, #1
 800d986:	e7c2      	b.n	800d90e <_printf_common+0x46>
 800d988:	2030      	movs	r0, #48	; 0x30
 800d98a:	18e1      	adds	r1, r4, r3
 800d98c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d990:	1c5a      	adds	r2, r3, #1
 800d992:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d996:	4422      	add	r2, r4
 800d998:	3302      	adds	r3, #2
 800d99a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d99e:	e7c4      	b.n	800d92a <_printf_common+0x62>
 800d9a0:	2301      	movs	r3, #1
 800d9a2:	4622      	mov	r2, r4
 800d9a4:	4639      	mov	r1, r7
 800d9a6:	4630      	mov	r0, r6
 800d9a8:	47c0      	blx	r8
 800d9aa:	3001      	adds	r0, #1
 800d9ac:	d0e6      	beq.n	800d97c <_printf_common+0xb4>
 800d9ae:	f109 0901 	add.w	r9, r9, #1
 800d9b2:	e7d8      	b.n	800d966 <_printf_common+0x9e>

0800d9b4 <_printf_i>:
 800d9b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d9b8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800d9bc:	460c      	mov	r4, r1
 800d9be:	7e09      	ldrb	r1, [r1, #24]
 800d9c0:	b085      	sub	sp, #20
 800d9c2:	296e      	cmp	r1, #110	; 0x6e
 800d9c4:	4617      	mov	r7, r2
 800d9c6:	4606      	mov	r6, r0
 800d9c8:	4698      	mov	r8, r3
 800d9ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d9cc:	f000 80b3 	beq.w	800db36 <_printf_i+0x182>
 800d9d0:	d822      	bhi.n	800da18 <_printf_i+0x64>
 800d9d2:	2963      	cmp	r1, #99	; 0x63
 800d9d4:	d036      	beq.n	800da44 <_printf_i+0x90>
 800d9d6:	d80a      	bhi.n	800d9ee <_printf_i+0x3a>
 800d9d8:	2900      	cmp	r1, #0
 800d9da:	f000 80b9 	beq.w	800db50 <_printf_i+0x19c>
 800d9de:	2958      	cmp	r1, #88	; 0x58
 800d9e0:	f000 8083 	beq.w	800daea <_printf_i+0x136>
 800d9e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d9e8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800d9ec:	e032      	b.n	800da54 <_printf_i+0xa0>
 800d9ee:	2964      	cmp	r1, #100	; 0x64
 800d9f0:	d001      	beq.n	800d9f6 <_printf_i+0x42>
 800d9f2:	2969      	cmp	r1, #105	; 0x69
 800d9f4:	d1f6      	bne.n	800d9e4 <_printf_i+0x30>
 800d9f6:	6820      	ldr	r0, [r4, #0]
 800d9f8:	6813      	ldr	r3, [r2, #0]
 800d9fa:	0605      	lsls	r5, r0, #24
 800d9fc:	f103 0104 	add.w	r1, r3, #4
 800da00:	d52a      	bpl.n	800da58 <_printf_i+0xa4>
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	6011      	str	r1, [r2, #0]
 800da06:	2b00      	cmp	r3, #0
 800da08:	da03      	bge.n	800da12 <_printf_i+0x5e>
 800da0a:	222d      	movs	r2, #45	; 0x2d
 800da0c:	425b      	negs	r3, r3
 800da0e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800da12:	486f      	ldr	r0, [pc, #444]	; (800dbd0 <_printf_i+0x21c>)
 800da14:	220a      	movs	r2, #10
 800da16:	e039      	b.n	800da8c <_printf_i+0xd8>
 800da18:	2973      	cmp	r1, #115	; 0x73
 800da1a:	f000 809d 	beq.w	800db58 <_printf_i+0x1a4>
 800da1e:	d808      	bhi.n	800da32 <_printf_i+0x7e>
 800da20:	296f      	cmp	r1, #111	; 0x6f
 800da22:	d020      	beq.n	800da66 <_printf_i+0xb2>
 800da24:	2970      	cmp	r1, #112	; 0x70
 800da26:	d1dd      	bne.n	800d9e4 <_printf_i+0x30>
 800da28:	6823      	ldr	r3, [r4, #0]
 800da2a:	f043 0320 	orr.w	r3, r3, #32
 800da2e:	6023      	str	r3, [r4, #0]
 800da30:	e003      	b.n	800da3a <_printf_i+0x86>
 800da32:	2975      	cmp	r1, #117	; 0x75
 800da34:	d017      	beq.n	800da66 <_printf_i+0xb2>
 800da36:	2978      	cmp	r1, #120	; 0x78
 800da38:	d1d4      	bne.n	800d9e4 <_printf_i+0x30>
 800da3a:	2378      	movs	r3, #120	; 0x78
 800da3c:	4865      	ldr	r0, [pc, #404]	; (800dbd4 <_printf_i+0x220>)
 800da3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800da42:	e055      	b.n	800daf0 <_printf_i+0x13c>
 800da44:	6813      	ldr	r3, [r2, #0]
 800da46:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800da4a:	1d19      	adds	r1, r3, #4
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	6011      	str	r1, [r2, #0]
 800da50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800da54:	2301      	movs	r3, #1
 800da56:	e08c      	b.n	800db72 <_printf_i+0x1be>
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800da5e:	6011      	str	r1, [r2, #0]
 800da60:	bf18      	it	ne
 800da62:	b21b      	sxthne	r3, r3
 800da64:	e7cf      	b.n	800da06 <_printf_i+0x52>
 800da66:	6813      	ldr	r3, [r2, #0]
 800da68:	6825      	ldr	r5, [r4, #0]
 800da6a:	1d18      	adds	r0, r3, #4
 800da6c:	6010      	str	r0, [r2, #0]
 800da6e:	0628      	lsls	r0, r5, #24
 800da70:	d501      	bpl.n	800da76 <_printf_i+0xc2>
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	e002      	b.n	800da7c <_printf_i+0xc8>
 800da76:	0668      	lsls	r0, r5, #25
 800da78:	d5fb      	bpl.n	800da72 <_printf_i+0xbe>
 800da7a:	881b      	ldrh	r3, [r3, #0]
 800da7c:	296f      	cmp	r1, #111	; 0x6f
 800da7e:	bf14      	ite	ne
 800da80:	220a      	movne	r2, #10
 800da82:	2208      	moveq	r2, #8
 800da84:	4852      	ldr	r0, [pc, #328]	; (800dbd0 <_printf_i+0x21c>)
 800da86:	2100      	movs	r1, #0
 800da88:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800da8c:	6865      	ldr	r5, [r4, #4]
 800da8e:	2d00      	cmp	r5, #0
 800da90:	60a5      	str	r5, [r4, #8]
 800da92:	f2c0 8095 	blt.w	800dbc0 <_printf_i+0x20c>
 800da96:	6821      	ldr	r1, [r4, #0]
 800da98:	f021 0104 	bic.w	r1, r1, #4
 800da9c:	6021      	str	r1, [r4, #0]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d13d      	bne.n	800db1e <_printf_i+0x16a>
 800daa2:	2d00      	cmp	r5, #0
 800daa4:	f040 808e 	bne.w	800dbc4 <_printf_i+0x210>
 800daa8:	4665      	mov	r5, ip
 800daaa:	2a08      	cmp	r2, #8
 800daac:	d10b      	bne.n	800dac6 <_printf_i+0x112>
 800daae:	6823      	ldr	r3, [r4, #0]
 800dab0:	07db      	lsls	r3, r3, #31
 800dab2:	d508      	bpl.n	800dac6 <_printf_i+0x112>
 800dab4:	6923      	ldr	r3, [r4, #16]
 800dab6:	6862      	ldr	r2, [r4, #4]
 800dab8:	429a      	cmp	r2, r3
 800daba:	bfde      	ittt	le
 800dabc:	2330      	movle	r3, #48	; 0x30
 800dabe:	f805 3c01 	strble.w	r3, [r5, #-1]
 800dac2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800dac6:	ebac 0305 	sub.w	r3, ip, r5
 800daca:	6123      	str	r3, [r4, #16]
 800dacc:	f8cd 8000 	str.w	r8, [sp]
 800dad0:	463b      	mov	r3, r7
 800dad2:	aa03      	add	r2, sp, #12
 800dad4:	4621      	mov	r1, r4
 800dad6:	4630      	mov	r0, r6
 800dad8:	f7ff fef6 	bl	800d8c8 <_printf_common>
 800dadc:	3001      	adds	r0, #1
 800dade:	d14d      	bne.n	800db7c <_printf_i+0x1c8>
 800dae0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dae4:	b005      	add	sp, #20
 800dae6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800daea:	4839      	ldr	r0, [pc, #228]	; (800dbd0 <_printf_i+0x21c>)
 800daec:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800daf0:	6813      	ldr	r3, [r2, #0]
 800daf2:	6821      	ldr	r1, [r4, #0]
 800daf4:	1d1d      	adds	r5, r3, #4
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	6015      	str	r5, [r2, #0]
 800dafa:	060a      	lsls	r2, r1, #24
 800dafc:	d50b      	bpl.n	800db16 <_printf_i+0x162>
 800dafe:	07ca      	lsls	r2, r1, #31
 800db00:	bf44      	itt	mi
 800db02:	f041 0120 	orrmi.w	r1, r1, #32
 800db06:	6021      	strmi	r1, [r4, #0]
 800db08:	b91b      	cbnz	r3, 800db12 <_printf_i+0x15e>
 800db0a:	6822      	ldr	r2, [r4, #0]
 800db0c:	f022 0220 	bic.w	r2, r2, #32
 800db10:	6022      	str	r2, [r4, #0]
 800db12:	2210      	movs	r2, #16
 800db14:	e7b7      	b.n	800da86 <_printf_i+0xd2>
 800db16:	064d      	lsls	r5, r1, #25
 800db18:	bf48      	it	mi
 800db1a:	b29b      	uxthmi	r3, r3
 800db1c:	e7ef      	b.n	800dafe <_printf_i+0x14a>
 800db1e:	4665      	mov	r5, ip
 800db20:	fbb3 f1f2 	udiv	r1, r3, r2
 800db24:	fb02 3311 	mls	r3, r2, r1, r3
 800db28:	5cc3      	ldrb	r3, [r0, r3]
 800db2a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800db2e:	460b      	mov	r3, r1
 800db30:	2900      	cmp	r1, #0
 800db32:	d1f5      	bne.n	800db20 <_printf_i+0x16c>
 800db34:	e7b9      	b.n	800daaa <_printf_i+0xf6>
 800db36:	6813      	ldr	r3, [r2, #0]
 800db38:	6825      	ldr	r5, [r4, #0]
 800db3a:	1d18      	adds	r0, r3, #4
 800db3c:	6961      	ldr	r1, [r4, #20]
 800db3e:	6010      	str	r0, [r2, #0]
 800db40:	0628      	lsls	r0, r5, #24
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	d501      	bpl.n	800db4a <_printf_i+0x196>
 800db46:	6019      	str	r1, [r3, #0]
 800db48:	e002      	b.n	800db50 <_printf_i+0x19c>
 800db4a:	066a      	lsls	r2, r5, #25
 800db4c:	d5fb      	bpl.n	800db46 <_printf_i+0x192>
 800db4e:	8019      	strh	r1, [r3, #0]
 800db50:	2300      	movs	r3, #0
 800db52:	4665      	mov	r5, ip
 800db54:	6123      	str	r3, [r4, #16]
 800db56:	e7b9      	b.n	800dacc <_printf_i+0x118>
 800db58:	6813      	ldr	r3, [r2, #0]
 800db5a:	1d19      	adds	r1, r3, #4
 800db5c:	6011      	str	r1, [r2, #0]
 800db5e:	681d      	ldr	r5, [r3, #0]
 800db60:	6862      	ldr	r2, [r4, #4]
 800db62:	2100      	movs	r1, #0
 800db64:	4628      	mov	r0, r5
 800db66:	f000 f837 	bl	800dbd8 <memchr>
 800db6a:	b108      	cbz	r0, 800db70 <_printf_i+0x1bc>
 800db6c:	1b40      	subs	r0, r0, r5
 800db6e:	6060      	str	r0, [r4, #4]
 800db70:	6863      	ldr	r3, [r4, #4]
 800db72:	6123      	str	r3, [r4, #16]
 800db74:	2300      	movs	r3, #0
 800db76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800db7a:	e7a7      	b.n	800dacc <_printf_i+0x118>
 800db7c:	6923      	ldr	r3, [r4, #16]
 800db7e:	462a      	mov	r2, r5
 800db80:	4639      	mov	r1, r7
 800db82:	4630      	mov	r0, r6
 800db84:	47c0      	blx	r8
 800db86:	3001      	adds	r0, #1
 800db88:	d0aa      	beq.n	800dae0 <_printf_i+0x12c>
 800db8a:	6823      	ldr	r3, [r4, #0]
 800db8c:	079b      	lsls	r3, r3, #30
 800db8e:	d413      	bmi.n	800dbb8 <_printf_i+0x204>
 800db90:	68e0      	ldr	r0, [r4, #12]
 800db92:	9b03      	ldr	r3, [sp, #12]
 800db94:	4298      	cmp	r0, r3
 800db96:	bfb8      	it	lt
 800db98:	4618      	movlt	r0, r3
 800db9a:	e7a3      	b.n	800dae4 <_printf_i+0x130>
 800db9c:	2301      	movs	r3, #1
 800db9e:	464a      	mov	r2, r9
 800dba0:	4639      	mov	r1, r7
 800dba2:	4630      	mov	r0, r6
 800dba4:	47c0      	blx	r8
 800dba6:	3001      	adds	r0, #1
 800dba8:	d09a      	beq.n	800dae0 <_printf_i+0x12c>
 800dbaa:	3501      	adds	r5, #1
 800dbac:	68e3      	ldr	r3, [r4, #12]
 800dbae:	9a03      	ldr	r2, [sp, #12]
 800dbb0:	1a9b      	subs	r3, r3, r2
 800dbb2:	42ab      	cmp	r3, r5
 800dbb4:	dcf2      	bgt.n	800db9c <_printf_i+0x1e8>
 800dbb6:	e7eb      	b.n	800db90 <_printf_i+0x1dc>
 800dbb8:	2500      	movs	r5, #0
 800dbba:	f104 0919 	add.w	r9, r4, #25
 800dbbe:	e7f5      	b.n	800dbac <_printf_i+0x1f8>
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d1ac      	bne.n	800db1e <_printf_i+0x16a>
 800dbc4:	7803      	ldrb	r3, [r0, #0]
 800dbc6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dbca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dbce:	e76c      	b.n	800daaa <_printf_i+0xf6>
 800dbd0:	0802f72d 	.word	0x0802f72d
 800dbd4:	0802f73e 	.word	0x0802f73e

0800dbd8 <memchr>:
 800dbd8:	b510      	push	{r4, lr}
 800dbda:	b2c9      	uxtb	r1, r1
 800dbdc:	4402      	add	r2, r0
 800dbde:	4290      	cmp	r0, r2
 800dbe0:	4603      	mov	r3, r0
 800dbe2:	d101      	bne.n	800dbe8 <memchr+0x10>
 800dbe4:	2300      	movs	r3, #0
 800dbe6:	e003      	b.n	800dbf0 <memchr+0x18>
 800dbe8:	781c      	ldrb	r4, [r3, #0]
 800dbea:	3001      	adds	r0, #1
 800dbec:	428c      	cmp	r4, r1
 800dbee:	d1f6      	bne.n	800dbde <memchr+0x6>
 800dbf0:	4618      	mov	r0, r3
 800dbf2:	bd10      	pop	{r4, pc}

0800dbf4 <memmove>:
 800dbf4:	4288      	cmp	r0, r1
 800dbf6:	b510      	push	{r4, lr}
 800dbf8:	eb01 0302 	add.w	r3, r1, r2
 800dbfc:	d807      	bhi.n	800dc0e <memmove+0x1a>
 800dbfe:	1e42      	subs	r2, r0, #1
 800dc00:	4299      	cmp	r1, r3
 800dc02:	d00a      	beq.n	800dc1a <memmove+0x26>
 800dc04:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dc08:	f802 4f01 	strb.w	r4, [r2, #1]!
 800dc0c:	e7f8      	b.n	800dc00 <memmove+0xc>
 800dc0e:	4283      	cmp	r3, r0
 800dc10:	d9f5      	bls.n	800dbfe <memmove+0xa>
 800dc12:	1881      	adds	r1, r0, r2
 800dc14:	1ad2      	subs	r2, r2, r3
 800dc16:	42d3      	cmn	r3, r2
 800dc18:	d100      	bne.n	800dc1c <memmove+0x28>
 800dc1a:	bd10      	pop	{r4, pc}
 800dc1c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dc20:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800dc24:	e7f7      	b.n	800dc16 <memmove+0x22>

0800dc26 <_realloc_r>:
 800dc26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc28:	4607      	mov	r7, r0
 800dc2a:	4614      	mov	r4, r2
 800dc2c:	460e      	mov	r6, r1
 800dc2e:	b921      	cbnz	r1, 800dc3a <_realloc_r+0x14>
 800dc30:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800dc34:	4611      	mov	r1, r2
 800dc36:	f7ff bc69 	b.w	800d50c <_malloc_r>
 800dc3a:	b922      	cbnz	r2, 800dc46 <_realloc_r+0x20>
 800dc3c:	f7ff fc1a 	bl	800d474 <_free_r>
 800dc40:	4625      	mov	r5, r4
 800dc42:	4628      	mov	r0, r5
 800dc44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc46:	f000 f814 	bl	800dc72 <_malloc_usable_size_r>
 800dc4a:	42a0      	cmp	r0, r4
 800dc4c:	d20f      	bcs.n	800dc6e <_realloc_r+0x48>
 800dc4e:	4621      	mov	r1, r4
 800dc50:	4638      	mov	r0, r7
 800dc52:	f7ff fc5b 	bl	800d50c <_malloc_r>
 800dc56:	4605      	mov	r5, r0
 800dc58:	2800      	cmp	r0, #0
 800dc5a:	d0f2      	beq.n	800dc42 <_realloc_r+0x1c>
 800dc5c:	4631      	mov	r1, r6
 800dc5e:	4622      	mov	r2, r4
 800dc60:	f7ff fbf4 	bl	800d44c <memcpy>
 800dc64:	4631      	mov	r1, r6
 800dc66:	4638      	mov	r0, r7
 800dc68:	f7ff fc04 	bl	800d474 <_free_r>
 800dc6c:	e7e9      	b.n	800dc42 <_realloc_r+0x1c>
 800dc6e:	4635      	mov	r5, r6
 800dc70:	e7e7      	b.n	800dc42 <_realloc_r+0x1c>

0800dc72 <_malloc_usable_size_r>:
 800dc72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc76:	1f18      	subs	r0, r3, #4
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	bfbc      	itt	lt
 800dc7c:	580b      	ldrlt	r3, [r1, r0]
 800dc7e:	18c0      	addlt	r0, r0, r3
 800dc80:	4770      	bx	lr
	...

0800dc84 <_init>:
 800dc84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc86:	bf00      	nop
 800dc88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc8a:	bc08      	pop	{r3}
 800dc8c:	469e      	mov	lr, r3
 800dc8e:	4770      	bx	lr

0800dc90 <_fini>:
 800dc90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc92:	bf00      	nop
 800dc94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc96:	bc08      	pop	{r3}
 800dc98:	469e      	mov	lr, r3
 800dc9a:	4770      	bx	lr
