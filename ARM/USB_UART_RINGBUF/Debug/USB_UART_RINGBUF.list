
USB_UART_RINGBUF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007618  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  0800779c  0800779c  0001779c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007870  08007870  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08007870  08007870  00017870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007878  08007878  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007878  08007878  00017878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800787c  0800787c  0001787c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08007880  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d44  200001e0  08007a60  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001f24  08007a60  00021f24  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015526  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000032b0  00000000  00000000  0003572f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e48  00000000  00000000  000389e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cd0  00000000  00000000  00039828  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022fd9  00000000  00000000  0003a4f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e326  00000000  00000000  0005d4d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000bf3a0  00000000  00000000  0006b7f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012ab97  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f30  00000000  00000000  0012ac14  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	200001e0 	.word	0x200001e0
 80001a0:	00000000 	.word	0x00000000
 80001a4:	08007784 	.word	0x08007784

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	200001e4 	.word	0x200001e4
 80001c0:	08007784 	.word	0x08007784

080001c4 <__aeabi_uldivmod>:
 80001c4:	b953      	cbnz	r3, 80001dc <__aeabi_uldivmod+0x18>
 80001c6:	b94a      	cbnz	r2, 80001dc <__aeabi_uldivmod+0x18>
 80001c8:	2900      	cmp	r1, #0
 80001ca:	bf08      	it	eq
 80001cc:	2800      	cmpeq	r0, #0
 80001ce:	bf1c      	itt	ne
 80001d0:	f04f 31ff 	movne.w	r1, #4294967295
 80001d4:	f04f 30ff 	movne.w	r0, #4294967295
 80001d8:	f000 b974 	b.w	80004c4 <__aeabi_idiv0>
 80001dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e4:	f000 f806 	bl	80001f4 <__udivmoddi4>
 80001e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f0:	b004      	add	sp, #16
 80001f2:	4770      	bx	lr

080001f4 <__udivmoddi4>:
 80001f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001f8:	468c      	mov	ip, r1
 80001fa:	4604      	mov	r4, r0
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d14b      	bne.n	800029a <__udivmoddi4+0xa6>
 8000202:	428a      	cmp	r2, r1
 8000204:	4615      	mov	r5, r2
 8000206:	d967      	bls.n	80002d8 <__udivmoddi4+0xe4>
 8000208:	fab2 f282 	clz	r2, r2
 800020c:	b14a      	cbz	r2, 8000222 <__udivmoddi4+0x2e>
 800020e:	f1c2 0720 	rsb	r7, r2, #32
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	fa20 f707 	lsr.w	r7, r0, r7
 800021a:	4095      	lsls	r5, r2
 800021c:	ea47 0c03 	orr.w	ip, r7, r3
 8000220:	4094      	lsls	r4, r2
 8000222:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000226:	fbbc f7fe 	udiv	r7, ip, lr
 800022a:	fa1f f885 	uxth.w	r8, r5
 800022e:	fb0e c317 	mls	r3, lr, r7, ip
 8000232:	fb07 f908 	mul.w	r9, r7, r8
 8000236:	0c21      	lsrs	r1, r4, #16
 8000238:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023c:	4599      	cmp	r9, r3
 800023e:	d909      	bls.n	8000254 <__udivmoddi4+0x60>
 8000240:	18eb      	adds	r3, r5, r3
 8000242:	f107 31ff 	add.w	r1, r7, #4294967295
 8000246:	f080 811c 	bcs.w	8000482 <__udivmoddi4+0x28e>
 800024a:	4599      	cmp	r9, r3
 800024c:	f240 8119 	bls.w	8000482 <__udivmoddi4+0x28e>
 8000250:	3f02      	subs	r7, #2
 8000252:	442b      	add	r3, r5
 8000254:	eba3 0309 	sub.w	r3, r3, r9
 8000258:	fbb3 f0fe 	udiv	r0, r3, lr
 800025c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000260:	fb00 f108 	mul.w	r1, r0, r8
 8000264:	b2a4      	uxth	r4, r4
 8000266:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026a:	42a1      	cmp	r1, r4
 800026c:	d909      	bls.n	8000282 <__udivmoddi4+0x8e>
 800026e:	192c      	adds	r4, r5, r4
 8000270:	f100 33ff 	add.w	r3, r0, #4294967295
 8000274:	f080 8107 	bcs.w	8000486 <__udivmoddi4+0x292>
 8000278:	42a1      	cmp	r1, r4
 800027a:	f240 8104 	bls.w	8000486 <__udivmoddi4+0x292>
 800027e:	3802      	subs	r0, #2
 8000280:	442c      	add	r4, r5
 8000282:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000286:	2700      	movs	r7, #0
 8000288:	1a64      	subs	r4, r4, r1
 800028a:	b11e      	cbz	r6, 8000294 <__udivmoddi4+0xa0>
 800028c:	2300      	movs	r3, #0
 800028e:	40d4      	lsrs	r4, r2
 8000290:	e9c6 4300 	strd	r4, r3, [r6]
 8000294:	4639      	mov	r1, r7
 8000296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029a:	428b      	cmp	r3, r1
 800029c:	d909      	bls.n	80002b2 <__udivmoddi4+0xbe>
 800029e:	2e00      	cmp	r6, #0
 80002a0:	f000 80ec 	beq.w	800047c <__udivmoddi4+0x288>
 80002a4:	2700      	movs	r7, #0
 80002a6:	e9c6 0100 	strd	r0, r1, [r6]
 80002aa:	4638      	mov	r0, r7
 80002ac:	4639      	mov	r1, r7
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	fab3 f783 	clz	r7, r3
 80002b6:	2f00      	cmp	r7, #0
 80002b8:	d148      	bne.n	800034c <__udivmoddi4+0x158>
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xd0>
 80002be:	4282      	cmp	r2, r0
 80002c0:	f200 80fb 	bhi.w	80004ba <__udivmoddi4+0x2c6>
 80002c4:	1a84      	subs	r4, r0, r2
 80002c6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	469c      	mov	ip, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d0e0      	beq.n	8000294 <__udivmoddi4+0xa0>
 80002d2:	e9c6 4c00 	strd	r4, ip, [r6]
 80002d6:	e7dd      	b.n	8000294 <__udivmoddi4+0xa0>
 80002d8:	b902      	cbnz	r2, 80002dc <__udivmoddi4+0xe8>
 80002da:	deff      	udf	#255	; 0xff
 80002dc:	fab2 f282 	clz	r2, r2
 80002e0:	2a00      	cmp	r2, #0
 80002e2:	f040 808f 	bne.w	8000404 <__udivmoddi4+0x210>
 80002e6:	2701      	movs	r7, #1
 80002e8:	1b49      	subs	r1, r1, r5
 80002ea:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80002ee:	fa1f f985 	uxth.w	r9, r5
 80002f2:	fbb1 fef8 	udiv	lr, r1, r8
 80002f6:	fb08 111e 	mls	r1, r8, lr, r1
 80002fa:	fb09 f00e 	mul.w	r0, r9, lr
 80002fe:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000302:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000306:	4298      	cmp	r0, r3
 8000308:	d907      	bls.n	800031a <__udivmoddi4+0x126>
 800030a:	18eb      	adds	r3, r5, r3
 800030c:	f10e 31ff 	add.w	r1, lr, #4294967295
 8000310:	d202      	bcs.n	8000318 <__udivmoddi4+0x124>
 8000312:	4298      	cmp	r0, r3
 8000314:	f200 80cd 	bhi.w	80004b2 <__udivmoddi4+0x2be>
 8000318:	468e      	mov	lr, r1
 800031a:	1a1b      	subs	r3, r3, r0
 800031c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000320:	fb08 3310 	mls	r3, r8, r0, r3
 8000324:	fb09 f900 	mul.w	r9, r9, r0
 8000328:	b2a4      	uxth	r4, r4
 800032a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800032e:	45a1      	cmp	r9, r4
 8000330:	d907      	bls.n	8000342 <__udivmoddi4+0x14e>
 8000332:	192c      	adds	r4, r5, r4
 8000334:	f100 33ff 	add.w	r3, r0, #4294967295
 8000338:	d202      	bcs.n	8000340 <__udivmoddi4+0x14c>
 800033a:	45a1      	cmp	r9, r4
 800033c:	f200 80b6 	bhi.w	80004ac <__udivmoddi4+0x2b8>
 8000340:	4618      	mov	r0, r3
 8000342:	eba4 0409 	sub.w	r4, r4, r9
 8000346:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 800034a:	e79e      	b.n	800028a <__udivmoddi4+0x96>
 800034c:	f1c7 0520 	rsb	r5, r7, #32
 8000350:	40bb      	lsls	r3, r7
 8000352:	fa22 fc05 	lsr.w	ip, r2, r5
 8000356:	ea4c 0c03 	orr.w	ip, ip, r3
 800035a:	fa21 f405 	lsr.w	r4, r1, r5
 800035e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000362:	fbb4 f9fe 	udiv	r9, r4, lr
 8000366:	fa1f f88c 	uxth.w	r8, ip
 800036a:	fb0e 4419 	mls	r4, lr, r9, r4
 800036e:	fa20 f305 	lsr.w	r3, r0, r5
 8000372:	40b9      	lsls	r1, r7
 8000374:	fb09 fa08 	mul.w	sl, r9, r8
 8000378:	4319      	orrs	r1, r3
 800037a:	0c0b      	lsrs	r3, r1, #16
 800037c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000380:	45a2      	cmp	sl, r4
 8000382:	fa02 f207 	lsl.w	r2, r2, r7
 8000386:	fa00 f307 	lsl.w	r3, r0, r7
 800038a:	d90b      	bls.n	80003a4 <__udivmoddi4+0x1b0>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f109 30ff 	add.w	r0, r9, #4294967295
 8000394:	f080 8088 	bcs.w	80004a8 <__udivmoddi4+0x2b4>
 8000398:	45a2      	cmp	sl, r4
 800039a:	f240 8085 	bls.w	80004a8 <__udivmoddi4+0x2b4>
 800039e:	f1a9 0902 	sub.w	r9, r9, #2
 80003a2:	4464      	add	r4, ip
 80003a4:	eba4 040a 	sub.w	r4, r4, sl
 80003a8:	fbb4 f0fe 	udiv	r0, r4, lr
 80003ac:	fb0e 4410 	mls	r4, lr, r0, r4
 80003b0:	fb00 fa08 	mul.w	sl, r0, r8
 80003b4:	b289      	uxth	r1, r1
 80003b6:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 80003ba:	45a2      	cmp	sl, r4
 80003bc:	d908      	bls.n	80003d0 <__udivmoddi4+0x1dc>
 80003be:	eb1c 0404 	adds.w	r4, ip, r4
 80003c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c6:	d26b      	bcs.n	80004a0 <__udivmoddi4+0x2ac>
 80003c8:	45a2      	cmp	sl, r4
 80003ca:	d969      	bls.n	80004a0 <__udivmoddi4+0x2ac>
 80003cc:	3802      	subs	r0, #2
 80003ce:	4464      	add	r4, ip
 80003d0:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d4:	fba0 8902 	umull	r8, r9, r0, r2
 80003d8:	eba4 040a 	sub.w	r4, r4, sl
 80003dc:	454c      	cmp	r4, r9
 80003de:	4641      	mov	r1, r8
 80003e0:	46ce      	mov	lr, r9
 80003e2:	d354      	bcc.n	800048e <__udivmoddi4+0x29a>
 80003e4:	d051      	beq.n	800048a <__udivmoddi4+0x296>
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d069      	beq.n	80004be <__udivmoddi4+0x2ca>
 80003ea:	1a5a      	subs	r2, r3, r1
 80003ec:	eb64 040e 	sbc.w	r4, r4, lr
 80003f0:	fa04 f505 	lsl.w	r5, r4, r5
 80003f4:	fa22 f307 	lsr.w	r3, r2, r7
 80003f8:	40fc      	lsrs	r4, r7
 80003fa:	431d      	orrs	r5, r3
 80003fc:	e9c6 5400 	strd	r5, r4, [r6]
 8000400:	2700      	movs	r7, #0
 8000402:	e747      	b.n	8000294 <__udivmoddi4+0xa0>
 8000404:	4095      	lsls	r5, r2
 8000406:	f1c2 0320 	rsb	r3, r2, #32
 800040a:	fa21 f003 	lsr.w	r0, r1, r3
 800040e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000412:	fbb0 f7f8 	udiv	r7, r0, r8
 8000416:	fa1f f985 	uxth.w	r9, r5
 800041a:	fb08 0017 	mls	r0, r8, r7, r0
 800041e:	fa24 f303 	lsr.w	r3, r4, r3
 8000422:	4091      	lsls	r1, r2
 8000424:	fb07 fc09 	mul.w	ip, r7, r9
 8000428:	430b      	orrs	r3, r1
 800042a:	0c19      	lsrs	r1, r3, #16
 800042c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000430:	458c      	cmp	ip, r1
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d907      	bls.n	8000448 <__udivmoddi4+0x254>
 8000438:	1869      	adds	r1, r5, r1
 800043a:	f107 30ff 	add.w	r0, r7, #4294967295
 800043e:	d231      	bcs.n	80004a4 <__udivmoddi4+0x2b0>
 8000440:	458c      	cmp	ip, r1
 8000442:	d92f      	bls.n	80004a4 <__udivmoddi4+0x2b0>
 8000444:	3f02      	subs	r7, #2
 8000446:	4429      	add	r1, r5
 8000448:	eba1 010c 	sub.w	r1, r1, ip
 800044c:	fbb1 f0f8 	udiv	r0, r1, r8
 8000450:	fb08 1c10 	mls	ip, r8, r0, r1
 8000454:	fb00 fe09 	mul.w	lr, r0, r9
 8000458:	b299      	uxth	r1, r3
 800045a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800045e:	458e      	cmp	lr, r1
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x27e>
 8000462:	1869      	adds	r1, r5, r1
 8000464:	f100 33ff 	add.w	r3, r0, #4294967295
 8000468:	d218      	bcs.n	800049c <__udivmoddi4+0x2a8>
 800046a:	458e      	cmp	lr, r1
 800046c:	d916      	bls.n	800049c <__udivmoddi4+0x2a8>
 800046e:	3802      	subs	r0, #2
 8000470:	4429      	add	r1, r5
 8000472:	eba1 010e 	sub.w	r1, r1, lr
 8000476:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047a:	e73a      	b.n	80002f2 <__udivmoddi4+0xfe>
 800047c:	4637      	mov	r7, r6
 800047e:	4630      	mov	r0, r6
 8000480:	e708      	b.n	8000294 <__udivmoddi4+0xa0>
 8000482:	460f      	mov	r7, r1
 8000484:	e6e6      	b.n	8000254 <__udivmoddi4+0x60>
 8000486:	4618      	mov	r0, r3
 8000488:	e6fb      	b.n	8000282 <__udivmoddi4+0x8e>
 800048a:	4543      	cmp	r3, r8
 800048c:	d2ab      	bcs.n	80003e6 <__udivmoddi4+0x1f2>
 800048e:	ebb8 0102 	subs.w	r1, r8, r2
 8000492:	eb69 020c 	sbc.w	r2, r9, ip
 8000496:	3801      	subs	r0, #1
 8000498:	4696      	mov	lr, r2
 800049a:	e7a4      	b.n	80003e6 <__udivmoddi4+0x1f2>
 800049c:	4618      	mov	r0, r3
 800049e:	e7e8      	b.n	8000472 <__udivmoddi4+0x27e>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e795      	b.n	80003d0 <__udivmoddi4+0x1dc>
 80004a4:	4607      	mov	r7, r0
 80004a6:	e7cf      	b.n	8000448 <__udivmoddi4+0x254>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e77b      	b.n	80003a4 <__udivmoddi4+0x1b0>
 80004ac:	3802      	subs	r0, #2
 80004ae:	442c      	add	r4, r5
 80004b0:	e747      	b.n	8000342 <__udivmoddi4+0x14e>
 80004b2:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b6:	442b      	add	r3, r5
 80004b8:	e72f      	b.n	800031a <__udivmoddi4+0x126>
 80004ba:	4638      	mov	r0, r7
 80004bc:	e707      	b.n	80002ce <__udivmoddi4+0xda>
 80004be:	4637      	mov	r7, r6
 80004c0:	e6e8      	b.n	8000294 <__udivmoddi4+0xa0>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart3.Instance)
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	681a      	ldr	r2, [r3, #0]
 80004d4:	4b13      	ldr	r3, [pc, #76]	; (8000524 <HAL_UART_RxCpltCallback+0x5c>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	429a      	cmp	r2, r3
 80004da:	d11e      	bne.n	800051a <HAL_UART_RxCpltCallback+0x52>
	{
		HAL_UART_Receive_IT(&huart3, &tmpbuf, 1);
 80004dc:	2201      	movs	r2, #1
 80004de:	4912      	ldr	r1, [pc, #72]	; (8000528 <HAL_UART_RxCpltCallback+0x60>)
 80004e0:	4810      	ldr	r0, [pc, #64]	; (8000524 <HAL_UART_RxCpltCallback+0x5c>)
 80004e2:	f002 fdb4 	bl	800304e <HAL_UART_Receive_IT>
		buf[bufTail] = huart->pRxBuffPtr[0];
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80004ea:	4b10      	ldr	r3, [pc, #64]	; (800052c <HAL_UART_RxCpltCallback+0x64>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	7811      	ldrb	r1, [r2, #0]
 80004f0:	4a0f      	ldr	r2, [pc, #60]	; (8000530 <HAL_UART_RxCpltCallback+0x68>)
 80004f2:	54d1      	strb	r1, [r2, r3]
		bufTail++;
 80004f4:	4b0d      	ldr	r3, [pc, #52]	; (800052c <HAL_UART_RxCpltCallback+0x64>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	3301      	adds	r3, #1
 80004fa:	4a0c      	ldr	r2, [pc, #48]	; (800052c <HAL_UART_RxCpltCallback+0x64>)
 80004fc:	6013      	str	r3, [r2, #0]
		bufTail %= 200;
 80004fe:	4b0b      	ldr	r3, [pc, #44]	; (800052c <HAL_UART_RxCpltCallback+0x64>)
 8000500:	681a      	ldr	r2, [r3, #0]
 8000502:	4b0c      	ldr	r3, [pc, #48]	; (8000534 <HAL_UART_RxCpltCallback+0x6c>)
 8000504:	fb83 1302 	smull	r1, r3, r3, r2
 8000508:	1199      	asrs	r1, r3, #6
 800050a:	17d3      	asrs	r3, r2, #31
 800050c:	1acb      	subs	r3, r1, r3
 800050e:	21c8      	movs	r1, #200	; 0xc8
 8000510:	fb01 f303 	mul.w	r3, r1, r3
 8000514:	1ad3      	subs	r3, r2, r3
 8000516:	4a05      	ldr	r2, [pc, #20]	; (800052c <HAL_UART_RxCpltCallback+0x64>)
 8000518:	6013      	str	r3, [r2, #0]
	}
}
 800051a:	bf00      	nop
 800051c:	3708      	adds	r7, #8
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	20000214 	.word	0x20000214
 8000528:	20000254 	.word	0x20000254
 800052c:	20000200 	.word	0x20000200
 8000530:	20000258 	.word	0x20000258
 8000534:	51eb851f 	.word	0x51eb851f

08000538 <__io_putchar>:

int __io_putchar(int ch)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b084      	sub	sp, #16
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
	uint8_t *tr = (uint8_t*) &ch;
 8000540:	1d3b      	adds	r3, r7, #4
 8000542:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit(&huart3, &tr[0], 1, -1);
 8000544:	f04f 33ff 	mov.w	r3, #4294967295
 8000548:	2201      	movs	r2, #1
 800054a:	68f9      	ldr	r1, [r7, #12]
 800054c:	4803      	ldr	r0, [pc, #12]	; (800055c <__io_putchar+0x24>)
 800054e:	f002 fcec 	bl	8002f2a <HAL_UART_Transmit>
	return ch;
 8000552:	687b      	ldr	r3, [r7, #4]
}
 8000554:	4618      	mov	r0, r3
 8000556:	3710      	adds	r7, #16
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	20000214 	.word	0x20000214

08000560 <__io_getchar>:
int __io_getchar()
{
 8000560:	b490      	push	{r4, r7}
 8000562:	af00      	add	r7, sp, #0
	register int ret;

	__retry: if (bufHead != bufTail)
 8000564:	4b11      	ldr	r3, [pc, #68]	; (80005ac <__io_getchar+0x4c>)
 8000566:	681a      	ldr	r2, [r3, #0]
 8000568:	4b11      	ldr	r3, [pc, #68]	; (80005b0 <__io_getchar+0x50>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	429a      	cmp	r2, r3
 800056e:	d0f9      	beq.n	8000564 <__io_getchar+0x4>
	{
		ret = buf[bufHead];
 8000570:	4b0e      	ldr	r3, [pc, #56]	; (80005ac <__io_getchar+0x4c>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a0f      	ldr	r2, [pc, #60]	; (80005b4 <__io_getchar+0x54>)
 8000576:	5cd3      	ldrb	r3, [r2, r3]
 8000578:	461c      	mov	r4, r3
		if (ret == '\r')
 800057a:	2c0d      	cmp	r4, #13
 800057c:	d100      	bne.n	8000580 <__io_getchar+0x20>
		{
			ret = '\n';
 800057e:	240a      	movs	r4, #10
		}
		bufHead++;
 8000580:	4b0a      	ldr	r3, [pc, #40]	; (80005ac <__io_getchar+0x4c>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	3301      	adds	r3, #1
 8000586:	4a09      	ldr	r2, [pc, #36]	; (80005ac <__io_getchar+0x4c>)
 8000588:	6013      	str	r3, [r2, #0]
		bufHead %= MAX_BUFLEN;
 800058a:	4b08      	ldr	r3, [pc, #32]	; (80005ac <__io_getchar+0x4c>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	425a      	negs	r2, r3
 8000590:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000594:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8000598:	bf58      	it	pl
 800059a:	4253      	negpl	r3, r2
 800059c:	4a03      	ldr	r2, [pc, #12]	; (80005ac <__io_getchar+0x4c>)
 800059e:	6013      	str	r3, [r2, #0]
	}
	else
	{
		goto __retry;
	}
	return ret;
 80005a0:	4623      	mov	r3, r4
}
 80005a2:	4618      	mov	r0, r3
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bc90      	pop	{r4, r7}
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	200001fc 	.word	0x200001fc
 80005b0:	20000200 	.word	0x20000200
 80005b4:	20000258 	.word	0x20000258

080005b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005bc:	f000 fb1a 	bl	8000bf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c0:	f000 f81e 	bl	8000600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c4:	f000 f88e 	bl	80006e4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005c8:	f000 f862 	bl	8000690 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 80005cc:	f005 ff5a 	bl	8006484 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

	HAL_UART_Receive_IT(&huart3, &tmpbuf, 1);
 80005d0:	2201      	movs	r2, #1
 80005d2:	4907      	ldr	r1, [pc, #28]	; (80005f0 <main+0x38>)
 80005d4:	4807      	ldr	r0, [pc, #28]	; (80005f4 <main+0x3c>)
 80005d6:	f002 fd3a 	bl	800304e <HAL_UART_Receive_IT>
	puts("Hello World!\r\n");
 80005da:	4807      	ldr	r0, [pc, #28]	; (80005f8 <main+0x40>)
 80005dc:	f006 fd6e 	bl	80070bc <puts>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		//gets(mainBuf);
		puts("\r\nREcved: ");
 80005e0:	4806      	ldr	r0, [pc, #24]	; (80005fc <main+0x44>)
 80005e2:	f006 fd6b 	bl	80070bc <puts>
		//puts(mainBuf);
		HAL_Delay(1000);
 80005e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005ea:	f000 fb71 	bl	8000cd0 <HAL_Delay>
		puts("\r\nREcved: ");
 80005ee:	e7f7      	b.n	80005e0 <main+0x28>
 80005f0:	20000254 	.word	0x20000254
 80005f4:	20000214 	.word	0x20000214
 80005f8:	0800779c 	.word	0x0800779c
 80005fc:	080077ac 	.word	0x080077ac

08000600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b092      	sub	sp, #72	; 0x48
 8000604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000606:	f107 0318 	add.w	r3, r7, #24
 800060a:	2230      	movs	r2, #48	; 0x30
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f006 fc4a 	bl	8006ea8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000614:	1d3b      	adds	r3, r7, #4
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	605a      	str	r2, [r3, #4]
 800061c:	609a      	str	r2, [r3, #8]
 800061e:	60da      	str	r2, [r3, #12]
 8000620:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000622:	2302      	movs	r3, #2
 8000624:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000626:	2301      	movs	r3, #1
 8000628:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800062a:	2310      	movs	r3, #16
 800062c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062e:	2302      	movs	r3, #2
 8000630:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000632:	2300      	movs	r3, #0
 8000634:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 13;
 8000636:	230d      	movs	r3, #13
 8000638:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 195;
 800063a:	23c3      	movs	r3, #195	; 0xc3
 800063c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800063e:	2302      	movs	r3, #2
 8000640:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000642:	2305      	movs	r3, #5
 8000644:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000646:	f107 0318 	add.w	r3, r7, #24
 800064a:	4618      	mov	r0, r3
 800064c:	f001 ffbe 	bl	80025cc <HAL_RCC_OscConfig>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8000656:	f000 f93f 	bl	80008d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065a:	230f      	movs	r3, #15
 800065c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065e:	2302      	movs	r3, #2
 8000660:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000662:	2300      	movs	r3, #0
 8000664:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000666:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800066a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800066c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000670:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000672:	1d3b      	adds	r3, r7, #4
 8000674:	2103      	movs	r1, #3
 8000676:	4618      	mov	r0, r3
 8000678:	f002 f9f8 	bl	8002a6c <HAL_RCC_ClockConfig>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000682:	f000 f929 	bl	80008d8 <Error_Handler>
  }
}
 8000686:	bf00      	nop
 8000688:	3748      	adds	r7, #72	; 0x48
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
	...

08000690 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <MX_USART3_UART_Init+0x4c>)
 8000696:	4a12      	ldr	r2, [pc, #72]	; (80006e0 <MX_USART3_UART_Init+0x50>)
 8000698:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800069a:	4b10      	ldr	r3, [pc, #64]	; (80006dc <MX_USART3_UART_Init+0x4c>)
 800069c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006a0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006a2:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <MX_USART3_UART_Init+0x4c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006a8:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <MX_USART3_UART_Init+0x4c>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006ae:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <MX_USART3_UART_Init+0x4c>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006b4:	4b09      	ldr	r3, [pc, #36]	; (80006dc <MX_USART3_UART_Init+0x4c>)
 80006b6:	220c      	movs	r2, #12
 80006b8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ba:	4b08      	ldr	r3, [pc, #32]	; (80006dc <MX_USART3_UART_Init+0x4c>)
 80006bc:	2200      	movs	r2, #0
 80006be:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006c0:	4b06      	ldr	r3, [pc, #24]	; (80006dc <MX_USART3_UART_Init+0x4c>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80006c6:	4805      	ldr	r0, [pc, #20]	; (80006dc <MX_USART3_UART_Init+0x4c>)
 80006c8:	f002 fbe2 	bl	8002e90 <HAL_UART_Init>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80006d2:	f000 f901 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80006d6:	bf00      	nop
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	20000214 	.word	0x20000214
 80006e0:	40004800 	.word	0x40004800

080006e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b08c      	sub	sp, #48	; 0x30
 80006e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ea:	f107 031c 	add.w	r3, r7, #28
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]
 80006f4:	609a      	str	r2, [r3, #8]
 80006f6:	60da      	str	r2, [r3, #12]
 80006f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	61bb      	str	r3, [r7, #24]
 80006fe:	4b70      	ldr	r3, [pc, #448]	; (80008c0 <MX_GPIO_Init+0x1dc>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	4a6f      	ldr	r2, [pc, #444]	; (80008c0 <MX_GPIO_Init+0x1dc>)
 8000704:	f043 0304 	orr.w	r3, r3, #4
 8000708:	6313      	str	r3, [r2, #48]	; 0x30
 800070a:	4b6d      	ldr	r3, [pc, #436]	; (80008c0 <MX_GPIO_Init+0x1dc>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	f003 0304 	and.w	r3, r3, #4
 8000712:	61bb      	str	r3, [r7, #24]
 8000714:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	617b      	str	r3, [r7, #20]
 800071a:	4b69      	ldr	r3, [pc, #420]	; (80008c0 <MX_GPIO_Init+0x1dc>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4a68      	ldr	r2, [pc, #416]	; (80008c0 <MX_GPIO_Init+0x1dc>)
 8000720:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
 8000726:	4b66      	ldr	r3, [pc, #408]	; (80008c0 <MX_GPIO_Init+0x1dc>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800072e:	617b      	str	r3, [r7, #20]
 8000730:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	613b      	str	r3, [r7, #16]
 8000736:	4b62      	ldr	r3, [pc, #392]	; (80008c0 <MX_GPIO_Init+0x1dc>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a61      	ldr	r2, [pc, #388]	; (80008c0 <MX_GPIO_Init+0x1dc>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b5f      	ldr	r3, [pc, #380]	; (80008c0 <MX_GPIO_Init+0x1dc>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	613b      	str	r3, [r7, #16]
 800074c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	60fb      	str	r3, [r7, #12]
 8000752:	4b5b      	ldr	r3, [pc, #364]	; (80008c0 <MX_GPIO_Init+0x1dc>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4a5a      	ldr	r2, [pc, #360]	; (80008c0 <MX_GPIO_Init+0x1dc>)
 8000758:	f043 0302 	orr.w	r3, r3, #2
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
 800075e:	4b58      	ldr	r3, [pc, #352]	; (80008c0 <MX_GPIO_Init+0x1dc>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f003 0302 	and.w	r3, r3, #2
 8000766:	60fb      	str	r3, [r7, #12]
 8000768:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	60bb      	str	r3, [r7, #8]
 800076e:	4b54      	ldr	r3, [pc, #336]	; (80008c0 <MX_GPIO_Init+0x1dc>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a53      	ldr	r2, [pc, #332]	; (80008c0 <MX_GPIO_Init+0x1dc>)
 8000774:	f043 0308 	orr.w	r3, r3, #8
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b51      	ldr	r3, [pc, #324]	; (80008c0 <MX_GPIO_Init+0x1dc>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0308 	and.w	r3, r3, #8
 8000782:	60bb      	str	r3, [r7, #8]
 8000784:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	4b4d      	ldr	r3, [pc, #308]	; (80008c0 <MX_GPIO_Init+0x1dc>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a4c      	ldr	r2, [pc, #304]	; (80008c0 <MX_GPIO_Init+0x1dc>)
 8000790:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b4a      	ldr	r3, [pc, #296]	; (80008c0 <MX_GPIO_Init+0x1dc>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007a2:	2200      	movs	r2, #0
 80007a4:	f244 0181 	movw	r1, #16513	; 0x4081
 80007a8:	4846      	ldr	r0, [pc, #280]	; (80008c4 <MX_GPIO_Init+0x1e0>)
 80007aa:	f000 fd7f 	bl	80012ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	2140      	movs	r1, #64	; 0x40
 80007b2:	4845      	ldr	r0, [pc, #276]	; (80008c8 <MX_GPIO_Init+0x1e4>)
 80007b4:	f000 fd7a 	bl	80012ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80007b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007be:	4b43      	ldr	r3, [pc, #268]	; (80008cc <MX_GPIO_Init+0x1e8>)
 80007c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80007c6:	f107 031c 	add.w	r3, r7, #28
 80007ca:	4619      	mov	r1, r3
 80007cc:	4840      	ldr	r0, [pc, #256]	; (80008d0 <MX_GPIO_Init+0x1ec>)
 80007ce:	f000 fbcf 	bl	8000f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80007d2:	2332      	movs	r3, #50	; 0x32
 80007d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d6:	2302      	movs	r3, #2
 80007d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007de:	2303      	movs	r3, #3
 80007e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007e2:	230b      	movs	r3, #11
 80007e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007e6:	f107 031c 	add.w	r3, r7, #28
 80007ea:	4619      	mov	r1, r3
 80007ec:	4838      	ldr	r0, [pc, #224]	; (80008d0 <MX_GPIO_Init+0x1ec>)
 80007ee:	f000 fbbf 	bl	8000f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80007f2:	2386      	movs	r3, #134	; 0x86
 80007f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f6:	2302      	movs	r3, #2
 80007f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007fe:	2303      	movs	r3, #3
 8000800:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000802:	230b      	movs	r3, #11
 8000804:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000806:	f107 031c 	add.w	r3, r7, #28
 800080a:	4619      	mov	r1, r3
 800080c:	4831      	ldr	r0, [pc, #196]	; (80008d4 <MX_GPIO_Init+0x1f0>)
 800080e:	f000 fbaf 	bl	8000f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000812:	f244 0381 	movw	r3, #16513	; 0x4081
 8000816:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000818:	2301      	movs	r3, #1
 800081a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000820:	2300      	movs	r3, #0
 8000822:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000824:	f107 031c 	add.w	r3, r7, #28
 8000828:	4619      	mov	r1, r3
 800082a:	4826      	ldr	r0, [pc, #152]	; (80008c4 <MX_GPIO_Init+0x1e0>)
 800082c:	f000 fba0 	bl	8000f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000830:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000834:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000836:	2302      	movs	r3, #2
 8000838:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800083e:	2303      	movs	r3, #3
 8000840:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000842:	230b      	movs	r3, #11
 8000844:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000846:	f107 031c 	add.w	r3, r7, #28
 800084a:	4619      	mov	r1, r3
 800084c:	481d      	ldr	r0, [pc, #116]	; (80008c4 <MX_GPIO_Init+0x1e0>)
 800084e:	f000 fb8f 	bl	8000f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000852:	2340      	movs	r3, #64	; 0x40
 8000854:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000856:	2301      	movs	r3, #1
 8000858:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085e:	2300      	movs	r3, #0
 8000860:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000862:	f107 031c 	add.w	r3, r7, #28
 8000866:	4619      	mov	r1, r3
 8000868:	4817      	ldr	r0, [pc, #92]	; (80008c8 <MX_GPIO_Init+0x1e4>)
 800086a:	f000 fb81 	bl	8000f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800086e:	2380      	movs	r3, #128	; 0x80
 8000870:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000872:	2300      	movs	r3, #0
 8000874:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800087a:	f107 031c 	add.w	r3, r7, #28
 800087e:	4619      	mov	r1, r3
 8000880:	4811      	ldr	r0, [pc, #68]	; (80008c8 <MX_GPIO_Init+0x1e4>)
 8000882:	f000 fb75 	bl	8000f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000886:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800088a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088c:	2302      	movs	r3, #2
 800088e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000894:	2303      	movs	r3, #3
 8000896:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000898:	230b      	movs	r3, #11
 800089a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800089c:	f107 031c 	add.w	r3, r7, #28
 80008a0:	4619      	mov	r1, r3
 80008a2:	4809      	ldr	r0, [pc, #36]	; (80008c8 <MX_GPIO_Init+0x1e4>)
 80008a4:	f000 fb64 	bl	8000f70 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80008a8:	2200      	movs	r2, #0
 80008aa:	2100      	movs	r1, #0
 80008ac:	2028      	movs	r0, #40	; 0x28
 80008ae:	f000 fb08 	bl	8000ec2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008b2:	2028      	movs	r0, #40	; 0x28
 80008b4:	f000 fb21 	bl	8000efa <HAL_NVIC_EnableIRQ>

}
 80008b8:	bf00      	nop
 80008ba:	3730      	adds	r7, #48	; 0x30
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	40023800 	.word	0x40023800
 80008c4:	40020400 	.word	0x40020400
 80008c8:	40021800 	.word	0x40021800
 80008cc:	10110000 	.word	0x10110000
 80008d0:	40020800 	.word	0x40020800
 80008d4:	40020000 	.word	0x40020000

080008d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008dc:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80008de:	e7fe      	b.n	80008de <Error_Handler+0x6>

080008e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	607b      	str	r3, [r7, #4]
 80008ea:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <HAL_MspInit+0x48>)
 80008ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ee:	4a0e      	ldr	r2, [pc, #56]	; (8000928 <HAL_MspInit+0x48>)
 80008f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008f4:	6453      	str	r3, [r2, #68]	; 0x44
 80008f6:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <HAL_MspInit+0x48>)
 80008f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	603b      	str	r3, [r7, #0]
 8000906:	4b08      	ldr	r3, [pc, #32]	; (8000928 <HAL_MspInit+0x48>)
 8000908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090a:	4a07      	ldr	r2, [pc, #28]	; (8000928 <HAL_MspInit+0x48>)
 800090c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000910:	6413      	str	r3, [r2, #64]	; 0x40
 8000912:	4b05      	ldr	r3, [pc, #20]	; (8000928 <HAL_MspInit+0x48>)
 8000914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800091a:	603b      	str	r3, [r7, #0]
 800091c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800091e:	bf00      	nop
 8000920:	370c      	adds	r7, #12
 8000922:	46bd      	mov	sp, r7
 8000924:	bc80      	pop	{r7}
 8000926:	4770      	bx	lr
 8000928:	40023800 	.word	0x40023800

0800092c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b08a      	sub	sp, #40	; 0x28
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000934:	f107 0314 	add.w	r3, r7, #20
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]
 8000942:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a1d      	ldr	r2, [pc, #116]	; (80009c0 <HAL_UART_MspInit+0x94>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d134      	bne.n	80009b8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	613b      	str	r3, [r7, #16]
 8000952:	4b1c      	ldr	r3, [pc, #112]	; (80009c4 <HAL_UART_MspInit+0x98>)
 8000954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000956:	4a1b      	ldr	r2, [pc, #108]	; (80009c4 <HAL_UART_MspInit+0x98>)
 8000958:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800095c:	6413      	str	r3, [r2, #64]	; 0x40
 800095e:	4b19      	ldr	r3, [pc, #100]	; (80009c4 <HAL_UART_MspInit+0x98>)
 8000960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000962:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000966:	613b      	str	r3, [r7, #16]
 8000968:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	60fb      	str	r3, [r7, #12]
 800096e:	4b15      	ldr	r3, [pc, #84]	; (80009c4 <HAL_UART_MspInit+0x98>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	4a14      	ldr	r2, [pc, #80]	; (80009c4 <HAL_UART_MspInit+0x98>)
 8000974:	f043 0308 	orr.w	r3, r3, #8
 8000978:	6313      	str	r3, [r2, #48]	; 0x30
 800097a:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <HAL_UART_MspInit+0x98>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	f003 0308 	and.w	r3, r3, #8
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000986:	f44f 7340 	mov.w	r3, #768	; 0x300
 800098a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098c:	2302      	movs	r3, #2
 800098e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000994:	2303      	movs	r3, #3
 8000996:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000998:	2307      	movs	r3, #7
 800099a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800099c:	f107 0314 	add.w	r3, r7, #20
 80009a0:	4619      	mov	r1, r3
 80009a2:	4809      	ldr	r0, [pc, #36]	; (80009c8 <HAL_UART_MspInit+0x9c>)
 80009a4:	f000 fae4 	bl	8000f70 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80009a8:	2200      	movs	r2, #0
 80009aa:	2100      	movs	r1, #0
 80009ac:	2027      	movs	r0, #39	; 0x27
 80009ae:	f000 fa88 	bl	8000ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80009b2:	2027      	movs	r0, #39	; 0x27
 80009b4:	f000 faa1 	bl	8000efa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80009b8:	bf00      	nop
 80009ba:	3728      	adds	r7, #40	; 0x28
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	40004800 	.word	0x40004800
 80009c4:	40023800 	.word	0x40023800
 80009c8:	40020c00 	.word	0x40020c00

080009cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009d0:	e7fe      	b.n	80009d0 <NMI_Handler+0x4>

080009d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d2:	b480      	push	{r7}
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009d6:	e7fe      	b.n	80009d6 <HardFault_Handler+0x4>

080009d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009dc:	e7fe      	b.n	80009dc <MemManage_Handler+0x4>

080009de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009e2:	e7fe      	b.n	80009e2 <BusFault_Handler+0x4>

080009e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009e8:	e7fe      	b.n	80009e8 <UsageFault_Handler+0x4>

080009ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ea:	b480      	push	{r7}
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ee:	bf00      	nop
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bc80      	pop	{r7}
 80009f4:	4770      	bx	lr

080009f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009f6:	b480      	push	{r7}
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bc80      	pop	{r7}
 8000a00:	4770      	bx	lr

08000a02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a02:	b480      	push	{r7}
 8000a04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a06:	bf00      	nop
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bc80      	pop	{r7}
 8000a0c:	4770      	bx	lr

08000a0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a0e:	b580      	push	{r7, lr}
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a12:	f000 f941 	bl	8000c98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
	...

08000a1c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000a20:	4802      	ldr	r0, [pc, #8]	; (8000a2c <USART3_IRQHandler+0x10>)
 8000a22:	f002 fb69 	bl	80030f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	20000214 	.word	0x20000214

08000a30 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000a34:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000a38:	f000 fc50 	bl	80012dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a3c:	bf00      	nop
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000a44:	4802      	ldr	r0, [pc, #8]	; (8000a50 <OTG_FS_IRQHandler+0x10>)
 8000a46:	f000 fdaa 	bl	800159e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	20001b20 	.word	0x20001b20

08000a54 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b086      	sub	sp, #24
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	60f8      	str	r0, [r7, #12]
 8000a5c:	60b9      	str	r1, [r7, #8]
 8000a5e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a60:	2300      	movs	r3, #0
 8000a62:	617b      	str	r3, [r7, #20]
 8000a64:	e00a      	b.n	8000a7c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a66:	f7ff fd7b 	bl	8000560 <__io_getchar>
 8000a6a:	4601      	mov	r1, r0
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	1c5a      	adds	r2, r3, #1
 8000a70:	60ba      	str	r2, [r7, #8]
 8000a72:	b2ca      	uxtb	r2, r1
 8000a74:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	3301      	adds	r3, #1
 8000a7a:	617b      	str	r3, [r7, #20]
 8000a7c:	697a      	ldr	r2, [r7, #20]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	429a      	cmp	r2, r3
 8000a82:	dbf0      	blt.n	8000a66 <_read+0x12>
	}

return len;
 8000a84:	687b      	ldr	r3, [r7, #4]
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3718      	adds	r7, #24
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b086      	sub	sp, #24
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	60f8      	str	r0, [r7, #12]
 8000a96:	60b9      	str	r1, [r7, #8]
 8000a98:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	617b      	str	r3, [r7, #20]
 8000a9e:	e009      	b.n	8000ab4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	1c5a      	adds	r2, r3, #1
 8000aa4:	60ba      	str	r2, [r7, #8]
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f7ff fd45 	bl	8000538 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	617b      	str	r3, [r7, #20]
 8000ab4:	697a      	ldr	r2, [r7, #20]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	dbf1      	blt.n	8000aa0 <_write+0x12>
	}
	return len;
 8000abc:	687b      	ldr	r3, [r7, #4]
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3718      	adds	r7, #24
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <_close>:

int _close(int file)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	b083      	sub	sp, #12
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
	return -1;
 8000ace:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bc80      	pop	{r7}
 8000ada:	4770      	bx	lr

08000adc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
 8000ae4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000aec:	605a      	str	r2, [r3, #4]
	return 0;
 8000aee:	2300      	movs	r3, #0
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	370c      	adds	r7, #12
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bc80      	pop	{r7}
 8000af8:	4770      	bx	lr

08000afa <_isatty>:

int _isatty(int file)
{
 8000afa:	b480      	push	{r7}
 8000afc:	b083      	sub	sp, #12
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
	return 1;
 8000b02:	2301      	movs	r3, #1
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	370c      	adds	r7, #12
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bc80      	pop	{r7}
 8000b0c:	4770      	bx	lr

08000b0e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	b085      	sub	sp, #20
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	60f8      	str	r0, [r7, #12]
 8000b16:	60b9      	str	r1, [r7, #8]
 8000b18:	607a      	str	r2, [r7, #4]
	return 0;
 8000b1a:	2300      	movs	r3, #0
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	3714      	adds	r7, #20
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bc80      	pop	{r7}
 8000b24:	4770      	bx	lr
	...

08000b28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b086      	sub	sp, #24
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b30:	4a14      	ldr	r2, [pc, #80]	; (8000b84 <_sbrk+0x5c>)
 8000b32:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <_sbrk+0x60>)
 8000b34:	1ad3      	subs	r3, r2, r3
 8000b36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b3c:	4b13      	ldr	r3, [pc, #76]	; (8000b8c <_sbrk+0x64>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d102      	bne.n	8000b4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b44:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <_sbrk+0x64>)
 8000b46:	4a12      	ldr	r2, [pc, #72]	; (8000b90 <_sbrk+0x68>)
 8000b48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b4a:	4b10      	ldr	r3, [pc, #64]	; (8000b8c <_sbrk+0x64>)
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	4413      	add	r3, r2
 8000b52:	693a      	ldr	r2, [r7, #16]
 8000b54:	429a      	cmp	r2, r3
 8000b56:	d207      	bcs.n	8000b68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b58:	f006 f96c 	bl	8006e34 <__errno>
 8000b5c:	4602      	mov	r2, r0
 8000b5e:	230c      	movs	r3, #12
 8000b60:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000b62:	f04f 33ff 	mov.w	r3, #4294967295
 8000b66:	e009      	b.n	8000b7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b68:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <_sbrk+0x64>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b6e:	4b07      	ldr	r3, [pc, #28]	; (8000b8c <_sbrk+0x64>)
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4413      	add	r3, r2
 8000b76:	4a05      	ldr	r2, [pc, #20]	; (8000b8c <_sbrk+0x64>)
 8000b78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b7a:	68fb      	ldr	r3, [r7, #12]
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3718      	adds	r7, #24
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	20020000 	.word	0x20020000
 8000b88:	00000400 	.word	0x00000400
 8000b8c:	20000204 	.word	0x20000204
 8000b90:	20001f28 	.word	0x20001f28

08000b94 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bc80      	pop	{r7}
 8000b9e:	4770      	bx	lr

08000ba0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ba0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bd8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8000ba4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000ba6:	e003      	b.n	8000bb0 <LoopCopyDataInit>

08000ba8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ba8:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000baa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000bac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000bae:	3104      	adds	r1, #4

08000bb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8000bb0:	480b      	ldr	r0, [pc, #44]	; (8000be0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000bb2:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000bb4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000bb6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000bb8:	d3f6      	bcc.n	8000ba8 <CopyDataInit>
  ldr  r2, =_sbss
 8000bba:	4a0b      	ldr	r2, [pc, #44]	; (8000be8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000bbc:	e002      	b.n	8000bc4 <LoopFillZerobss>

08000bbe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8000bbe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000bc0:	f842 3b04 	str.w	r3, [r2], #4

08000bc4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr  r3, = _ebss
 8000bc4:	4b09      	ldr	r3, [pc, #36]	; (8000bec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000bc6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000bc8:	d3f9      	bcc.n	8000bbe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bca:	f7ff ffe3 	bl	8000b94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bce:	f006 f937 	bl	8006e40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bd2:	f7ff fcf1 	bl	80005b8 <main>
  bx  lr
 8000bd6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000bd8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000bdc:	08007880 	.word	0x08007880
  ldr  r0, =_sdata
 8000be0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000be4:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8000be8:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8000bec:	20001f24 	.word	0x20001f24

08000bf0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bf0:	e7fe      	b.n	8000bf0 <ADC_IRQHandler>
	...

08000bf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bf8:	4b0e      	ldr	r3, [pc, #56]	; (8000c34 <HAL_Init+0x40>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a0d      	ldr	r2, [pc, #52]	; (8000c34 <HAL_Init+0x40>)
 8000bfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c04:	4b0b      	ldr	r3, [pc, #44]	; (8000c34 <HAL_Init+0x40>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a0a      	ldr	r2, [pc, #40]	; (8000c34 <HAL_Init+0x40>)
 8000c0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c10:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <HAL_Init+0x40>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a07      	ldr	r2, [pc, #28]	; (8000c34 <HAL_Init+0x40>)
 8000c16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c1c:	2003      	movs	r0, #3
 8000c1e:	f000 f945 	bl	8000eac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c22:	2000      	movs	r0, #0
 8000c24:	f000 f808 	bl	8000c38 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000c28:	f7ff fe5a 	bl	80008e0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000c2c:	2300      	movs	r3, #0
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40023c00 	.word	0x40023c00

08000c38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c40:	4b12      	ldr	r3, [pc, #72]	; (8000c8c <HAL_InitTick+0x54>)
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	4b12      	ldr	r3, [pc, #72]	; (8000c90 <HAL_InitTick+0x58>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	4619      	mov	r1, r3
 8000c4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c56:	4618      	mov	r0, r3
 8000c58:	f000 f95d 	bl	8000f16 <HAL_SYSTICK_Config>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
 8000c64:	e00e      	b.n	8000c84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2b0f      	cmp	r3, #15
 8000c6a:	d80a      	bhi.n	8000c82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	6879      	ldr	r1, [r7, #4]
 8000c70:	f04f 30ff 	mov.w	r0, #4294967295
 8000c74:	f000 f925 	bl	8000ec2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c78:	4a06      	ldr	r2, [pc, #24]	; (8000c94 <HAL_InitTick+0x5c>)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	e000      	b.n	8000c84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c82:	2301      	movs	r3, #1
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20000000 	.word	0x20000000
 8000c90:	20000008 	.word	0x20000008
 8000c94:	20000004 	.word	0x20000004

08000c98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c9c:	4b05      	ldr	r3, [pc, #20]	; (8000cb4 <HAL_IncTick+0x1c>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	4b05      	ldr	r3, [pc, #20]	; (8000cb8 <HAL_IncTick+0x20>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	4a03      	ldr	r2, [pc, #12]	; (8000cb8 <HAL_IncTick+0x20>)
 8000caa:	6013      	str	r3, [r2, #0]
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bc80      	pop	{r7}
 8000cb2:	4770      	bx	lr
 8000cb4:	20000008 	.word	0x20000008
 8000cb8:	20000658 	.word	0x20000658

08000cbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000cc0:	4b02      	ldr	r3, [pc, #8]	; (8000ccc <HAL_GetTick+0x10>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bc80      	pop	{r7}
 8000cca:	4770      	bx	lr
 8000ccc:	20000658 	.word	0x20000658

08000cd0 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cd8:	f7ff fff0 	bl	8000cbc <HAL_GetTick>
 8000cdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ce8:	d005      	beq.n	8000cf6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cea:	4b09      	ldr	r3, [pc, #36]	; (8000d10 <HAL_Delay+0x40>)
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	461a      	mov	r2, r3
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cf6:	bf00      	nop
 8000cf8:	f7ff ffe0 	bl	8000cbc <HAL_GetTick>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	68bb      	ldr	r3, [r7, #8]
 8000d00:	1ad3      	subs	r3, r2, r3
 8000d02:	68fa      	ldr	r2, [r7, #12]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d8f7      	bhi.n	8000cf8 <HAL_Delay+0x28>
  {
  }
}
 8000d08:	bf00      	nop
 8000d0a:	3710      	adds	r7, #16
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	20000008 	.word	0x20000008

08000d14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	f003 0307 	and.w	r3, r3, #7
 8000d22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d24:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <__NVIC_SetPriorityGrouping+0x44>)
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d2a:	68ba      	ldr	r2, [r7, #8]
 8000d2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d30:	4013      	ands	r3, r2
 8000d32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d46:	4a04      	ldr	r2, [pc, #16]	; (8000d58 <__NVIC_SetPriorityGrouping+0x44>)
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	60d3      	str	r3, [r2, #12]
}
 8000d4c:	bf00      	nop
 8000d4e:	3714      	adds	r7, #20
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bc80      	pop	{r7}
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d60:	4b04      	ldr	r3, [pc, #16]	; (8000d74 <__NVIC_GetPriorityGrouping+0x18>)
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	0a1b      	lsrs	r3, r3, #8
 8000d66:	f003 0307 	and.w	r3, r3, #7
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bc80      	pop	{r7}
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	db0b      	blt.n	8000da2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	f003 021f 	and.w	r2, r3, #31
 8000d90:	4906      	ldr	r1, [pc, #24]	; (8000dac <__NVIC_EnableIRQ+0x34>)
 8000d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d96:	095b      	lsrs	r3, r3, #5
 8000d98:	2001      	movs	r0, #1
 8000d9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000da2:	bf00      	nop
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bc80      	pop	{r7}
 8000daa:	4770      	bx	lr
 8000dac:	e000e100 	.word	0xe000e100

08000db0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	6039      	str	r1, [r7, #0]
 8000dba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	db0a      	blt.n	8000dda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	b2da      	uxtb	r2, r3
 8000dc8:	490c      	ldr	r1, [pc, #48]	; (8000dfc <__NVIC_SetPriority+0x4c>)
 8000dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dce:	0112      	lsls	r2, r2, #4
 8000dd0:	b2d2      	uxtb	r2, r2
 8000dd2:	440b      	add	r3, r1
 8000dd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dd8:	e00a      	b.n	8000df0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	b2da      	uxtb	r2, r3
 8000dde:	4908      	ldr	r1, [pc, #32]	; (8000e00 <__NVIC_SetPriority+0x50>)
 8000de0:	79fb      	ldrb	r3, [r7, #7]
 8000de2:	f003 030f 	and.w	r3, r3, #15
 8000de6:	3b04      	subs	r3, #4
 8000de8:	0112      	lsls	r2, r2, #4
 8000dea:	b2d2      	uxtb	r2, r2
 8000dec:	440b      	add	r3, r1
 8000dee:	761a      	strb	r2, [r3, #24]
}
 8000df0:	bf00      	nop
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bc80      	pop	{r7}
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	e000e100 	.word	0xe000e100
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b089      	sub	sp, #36	; 0x24
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	60f8      	str	r0, [r7, #12]
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	f003 0307 	and.w	r3, r3, #7
 8000e16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	f1c3 0307 	rsb	r3, r3, #7
 8000e1e:	2b04      	cmp	r3, #4
 8000e20:	bf28      	it	cs
 8000e22:	2304      	movcs	r3, #4
 8000e24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	3304      	adds	r3, #4
 8000e2a:	2b06      	cmp	r3, #6
 8000e2c:	d902      	bls.n	8000e34 <NVIC_EncodePriority+0x30>
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	3b03      	subs	r3, #3
 8000e32:	e000      	b.n	8000e36 <NVIC_EncodePriority+0x32>
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e38:	f04f 32ff 	mov.w	r2, #4294967295
 8000e3c:	69bb      	ldr	r3, [r7, #24]
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	43da      	mvns	r2, r3
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	401a      	ands	r2, r3
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	fa01 f303 	lsl.w	r3, r1, r3
 8000e56:	43d9      	mvns	r1, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e5c:	4313      	orrs	r3, r2
         );
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3724      	adds	r7, #36	; 0x24
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bc80      	pop	{r7}
 8000e66:	4770      	bx	lr

08000e68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	3b01      	subs	r3, #1
 8000e74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e78:	d301      	bcc.n	8000e7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e00f      	b.n	8000e9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ea8 <SysTick_Config+0x40>)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	3b01      	subs	r3, #1
 8000e84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e86:	210f      	movs	r1, #15
 8000e88:	f04f 30ff 	mov.w	r0, #4294967295
 8000e8c:	f7ff ff90 	bl	8000db0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e90:	4b05      	ldr	r3, [pc, #20]	; (8000ea8 <SysTick_Config+0x40>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e96:	4b04      	ldr	r3, [pc, #16]	; (8000ea8 <SysTick_Config+0x40>)
 8000e98:	2207      	movs	r2, #7
 8000e9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e9c:	2300      	movs	r3, #0
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	e000e010 	.word	0xe000e010

08000eac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f7ff ff2d 	bl	8000d14 <__NVIC_SetPriorityGrouping>
}
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b086      	sub	sp, #24
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	4603      	mov	r3, r0
 8000eca:	60b9      	str	r1, [r7, #8]
 8000ecc:	607a      	str	r2, [r7, #4]
 8000ece:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ed4:	f7ff ff42 	bl	8000d5c <__NVIC_GetPriorityGrouping>
 8000ed8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eda:	687a      	ldr	r2, [r7, #4]
 8000edc:	68b9      	ldr	r1, [r7, #8]
 8000ede:	6978      	ldr	r0, [r7, #20]
 8000ee0:	f7ff ff90 	bl	8000e04 <NVIC_EncodePriority>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eea:	4611      	mov	r1, r2
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff ff5f 	bl	8000db0 <__NVIC_SetPriority>
}
 8000ef2:	bf00      	nop
 8000ef4:	3718      	adds	r7, #24
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b082      	sub	sp, #8
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	4603      	mov	r3, r0
 8000f02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff ff35 	bl	8000d78 <__NVIC_EnableIRQ>
}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b082      	sub	sp, #8
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	f7ff ffa2 	bl	8000e68 <SysTick_Config>
 8000f24:	4603      	mov	r3, r0
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	b083      	sub	sp, #12
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	2b02      	cmp	r3, #2
 8000f40:	d004      	beq.n	8000f4c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2280      	movs	r2, #128	; 0x80
 8000f46:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	e00c      	b.n	8000f66 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2205      	movs	r2, #5
 8000f50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f022 0201 	bic.w	r2, r2, #1
 8000f62:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000f64:	2300      	movs	r3, #0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bc80      	pop	{r7}
 8000f6e:	4770      	bx	lr

08000f70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b087      	sub	sp, #28
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f7e:	e16f      	b.n	8001260 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	2101      	movs	r1, #1
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	f000 8161 	beq.w	800125a <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d00b      	beq.n	8000fb8 <HAL_GPIO_Init+0x48>
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	2b02      	cmp	r3, #2
 8000fa6:	d007      	beq.n	8000fb8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fac:	2b11      	cmp	r3, #17
 8000fae:	d003      	beq.n	8000fb8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	2b12      	cmp	r3, #18
 8000fb6:	d130      	bne.n	800101a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	2203      	movs	r2, #3
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	68da      	ldr	r2, [r3, #12]
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	693a      	ldr	r2, [r7, #16]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fee:	2201      	movs	r2, #1
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	43db      	mvns	r3, r3
 8000ff8:	693a      	ldr	r2, [r7, #16]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	091b      	lsrs	r3, r3, #4
 8001004:	f003 0201 	and.w	r2, r3, #1
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	4313      	orrs	r3, r2
 8001012:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	68db      	ldr	r3, [r3, #12]
 800101e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	2203      	movs	r2, #3
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	43db      	mvns	r3, r3
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	4013      	ands	r3, r2
 8001030:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	689a      	ldr	r2, [r3, #8]
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	4313      	orrs	r3, r2
 8001042:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	60da      	str	r2, [r3, #12]

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	2b02      	cmp	r3, #2
 8001050:	d003      	beq.n	800105a <HAL_GPIO_Init+0xea>
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	2b12      	cmp	r3, #18
 8001058:	d123      	bne.n	80010a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	08da      	lsrs	r2, r3, #3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	3208      	adds	r2, #8
 8001062:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001066:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	f003 0307 	and.w	r3, r3, #7
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	220f      	movs	r2, #15
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	43db      	mvns	r3, r3
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	4013      	ands	r3, r2
 800107c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	691a      	ldr	r2, [r3, #16]
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	f003 0307 	and.w	r3, r3, #7
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	fa02 f303 	lsl.w	r3, r2, r3
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	4313      	orrs	r3, r2
 8001092:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	08da      	lsrs	r2, r3, #3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3208      	adds	r2, #8
 800109c:	6939      	ldr	r1, [r7, #16]
 800109e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	2203      	movs	r2, #3
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	43db      	mvns	r3, r3
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	4013      	ands	r3, r2
 80010b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f003 0203 	and.w	r2, r3, #3
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	f000 80bb 	beq.w	800125a <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010e4:	2300      	movs	r3, #0
 80010e6:	60bb      	str	r3, [r7, #8]
 80010e8:	4b64      	ldr	r3, [pc, #400]	; (800127c <HAL_GPIO_Init+0x30c>)
 80010ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ec:	4a63      	ldr	r2, [pc, #396]	; (800127c <HAL_GPIO_Init+0x30c>)
 80010ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010f2:	6453      	str	r3, [r2, #68]	; 0x44
 80010f4:	4b61      	ldr	r3, [pc, #388]	; (800127c <HAL_GPIO_Init+0x30c>)
 80010f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010fc:	60bb      	str	r3, [r7, #8]
 80010fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001100:	4a5f      	ldr	r2, [pc, #380]	; (8001280 <HAL_GPIO_Init+0x310>)
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	089b      	lsrs	r3, r3, #2
 8001106:	3302      	adds	r3, #2
 8001108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800110c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	f003 0303 	and.w	r3, r3, #3
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	220f      	movs	r2, #15
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	43db      	mvns	r3, r3
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	4013      	ands	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4a57      	ldr	r2, [pc, #348]	; (8001284 <HAL_GPIO_Init+0x314>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d031      	beq.n	8001190 <HAL_GPIO_Init+0x220>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	4a56      	ldr	r2, [pc, #344]	; (8001288 <HAL_GPIO_Init+0x318>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d02b      	beq.n	800118c <HAL_GPIO_Init+0x21c>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	4a55      	ldr	r2, [pc, #340]	; (800128c <HAL_GPIO_Init+0x31c>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d025      	beq.n	8001188 <HAL_GPIO_Init+0x218>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	4a54      	ldr	r2, [pc, #336]	; (8001290 <HAL_GPIO_Init+0x320>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d01f      	beq.n	8001184 <HAL_GPIO_Init+0x214>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	4a53      	ldr	r2, [pc, #332]	; (8001294 <HAL_GPIO_Init+0x324>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d019      	beq.n	8001180 <HAL_GPIO_Init+0x210>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	4a52      	ldr	r2, [pc, #328]	; (8001298 <HAL_GPIO_Init+0x328>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d013      	beq.n	800117c <HAL_GPIO_Init+0x20c>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	4a51      	ldr	r2, [pc, #324]	; (800129c <HAL_GPIO_Init+0x32c>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d00d      	beq.n	8001178 <HAL_GPIO_Init+0x208>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4a50      	ldr	r2, [pc, #320]	; (80012a0 <HAL_GPIO_Init+0x330>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d007      	beq.n	8001174 <HAL_GPIO_Init+0x204>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4a4f      	ldr	r2, [pc, #316]	; (80012a4 <HAL_GPIO_Init+0x334>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d101      	bne.n	8001170 <HAL_GPIO_Init+0x200>
 800116c:	2308      	movs	r3, #8
 800116e:	e010      	b.n	8001192 <HAL_GPIO_Init+0x222>
 8001170:	2309      	movs	r3, #9
 8001172:	e00e      	b.n	8001192 <HAL_GPIO_Init+0x222>
 8001174:	2307      	movs	r3, #7
 8001176:	e00c      	b.n	8001192 <HAL_GPIO_Init+0x222>
 8001178:	2306      	movs	r3, #6
 800117a:	e00a      	b.n	8001192 <HAL_GPIO_Init+0x222>
 800117c:	2305      	movs	r3, #5
 800117e:	e008      	b.n	8001192 <HAL_GPIO_Init+0x222>
 8001180:	2304      	movs	r3, #4
 8001182:	e006      	b.n	8001192 <HAL_GPIO_Init+0x222>
 8001184:	2303      	movs	r3, #3
 8001186:	e004      	b.n	8001192 <HAL_GPIO_Init+0x222>
 8001188:	2302      	movs	r3, #2
 800118a:	e002      	b.n	8001192 <HAL_GPIO_Init+0x222>
 800118c:	2301      	movs	r3, #1
 800118e:	e000      	b.n	8001192 <HAL_GPIO_Init+0x222>
 8001190:	2300      	movs	r3, #0
 8001192:	697a      	ldr	r2, [r7, #20]
 8001194:	f002 0203 	and.w	r2, r2, #3
 8001198:	0092      	lsls	r2, r2, #2
 800119a:	4093      	lsls	r3, r2
 800119c:	461a      	mov	r2, r3
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011a4:	4936      	ldr	r1, [pc, #216]	; (8001280 <HAL_GPIO_Init+0x310>)
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	089b      	lsrs	r3, r3, #2
 80011aa:	3302      	adds	r3, #2
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011b2:	4b3d      	ldr	r3, [pc, #244]	; (80012a8 <HAL_GPIO_Init+0x338>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	43db      	mvns	r3, r3
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	4013      	ands	r3, r2
 80011c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d003      	beq.n	80011d6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80011d6:	4a34      	ldr	r2, [pc, #208]	; (80012a8 <HAL_GPIO_Init+0x338>)
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80011dc:	4b32      	ldr	r3, [pc, #200]	; (80012a8 <HAL_GPIO_Init+0x338>)
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	43db      	mvns	r3, r3
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	4013      	ands	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d003      	beq.n	8001200 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80011f8:	693a      	ldr	r2, [r7, #16]
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001200:	4a29      	ldr	r2, [pc, #164]	; (80012a8 <HAL_GPIO_Init+0x338>)
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001206:	4b28      	ldr	r3, [pc, #160]	; (80012a8 <HAL_GPIO_Init+0x338>)
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	43db      	mvns	r3, r3
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	4013      	ands	r3, r2
 8001214:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d003      	beq.n	800122a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	4313      	orrs	r3, r2
 8001228:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800122a:	4a1f      	ldr	r2, [pc, #124]	; (80012a8 <HAL_GPIO_Init+0x338>)
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001230:	4b1d      	ldr	r3, [pc, #116]	; (80012a8 <HAL_GPIO_Init+0x338>)
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	43db      	mvns	r3, r3
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	4013      	ands	r3, r2
 800123e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001248:	2b00      	cmp	r3, #0
 800124a:	d003      	beq.n	8001254 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 800124c:	693a      	ldr	r2, [r7, #16]
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	4313      	orrs	r3, r2
 8001252:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001254:	4a14      	ldr	r2, [pc, #80]	; (80012a8 <HAL_GPIO_Init+0x338>)
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	3301      	adds	r3, #1
 800125e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	fa22 f303 	lsr.w	r3, r2, r3
 800126a:	2b00      	cmp	r3, #0
 800126c:	f47f ae88 	bne.w	8000f80 <HAL_GPIO_Init+0x10>
  }
}
 8001270:	bf00      	nop
 8001272:	371c      	adds	r7, #28
 8001274:	46bd      	mov	sp, r7
 8001276:	bc80      	pop	{r7}
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	40023800 	.word	0x40023800
 8001280:	40013800 	.word	0x40013800
 8001284:	40020000 	.word	0x40020000
 8001288:	40020400 	.word	0x40020400
 800128c:	40020800 	.word	0x40020800
 8001290:	40020c00 	.word	0x40020c00
 8001294:	40021000 	.word	0x40021000
 8001298:	40021400 	.word	0x40021400
 800129c:	40021800 	.word	0x40021800
 80012a0:	40021c00 	.word	0x40021c00
 80012a4:	40022000 	.word	0x40022000
 80012a8:	40013c00 	.word	0x40013c00

080012ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	460b      	mov	r3, r1
 80012b6:	807b      	strh	r3, [r7, #2]
 80012b8:	4613      	mov	r3, r2
 80012ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012bc:	787b      	ldrb	r3, [r7, #1]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d003      	beq.n	80012ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012c2:	887a      	ldrh	r2, [r7, #2]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012c8:	e003      	b.n	80012d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012ca:	887b      	ldrh	r3, [r7, #2]
 80012cc:	041a      	lsls	r2, r3, #16
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	619a      	str	r2, [r3, #24]
}
 80012d2:	bf00      	nop
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bc80      	pop	{r7}
 80012da:	4770      	bx	lr

080012dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80012e6:	4b08      	ldr	r3, [pc, #32]	; (8001308 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012e8:	695a      	ldr	r2, [r3, #20]
 80012ea:	88fb      	ldrh	r3, [r7, #6]
 80012ec:	4013      	ands	r3, r2
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d006      	beq.n	8001300 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80012f2:	4a05      	ldr	r2, [pc, #20]	; (8001308 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012f4:	88fb      	ldrh	r3, [r7, #6]
 80012f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80012f8:	88fb      	ldrh	r3, [r7, #6]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f000 f806 	bl	800130c <HAL_GPIO_EXTI_Callback>
  }
}
 8001300:	bf00      	nop
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40013c00 	.word	0x40013c00

0800130c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001316:	bf00      	nop
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	bc80      	pop	{r7}
 800131e:	4770      	bx	lr

08001320 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001320:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001322:	b08f      	sub	sp, #60	; 0x3c
 8001324:	af0a      	add	r7, sp, #40	; 0x28
 8001326:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d101      	bne.n	8001332 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e10f      	b.n	8001552 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800133e:	b2db      	uxtb	r3, r3
 8001340:	2b00      	cmp	r3, #0
 8001342:	d106      	bne.n	8001352 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2200      	movs	r2, #0
 8001348:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f005 fa65 	bl	800681c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2203      	movs	r2, #3
 8001356:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800135e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001362:	2b00      	cmp	r3, #0
 8001364:	d102      	bne.n	800136c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2200      	movs	r2, #0
 800136a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4618      	mov	r0, r3
 8001372:	f002 fb29 	bl	80039c8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	603b      	str	r3, [r7, #0]
 800137c:	687e      	ldr	r6, [r7, #4]
 800137e:	466d      	mov	r5, sp
 8001380:	f106 0410 	add.w	r4, r6, #16
 8001384:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001386:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001388:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800138a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800138c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001390:	e885 0003 	stmia.w	r5, {r0, r1}
 8001394:	1d33      	adds	r3, r6, #4
 8001396:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001398:	6838      	ldr	r0, [r7, #0]
 800139a:	f002 fa0b 	bl	80037b4 <USB_CoreInit>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d005      	beq.n	80013b0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2202      	movs	r2, #2
 80013a8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	e0d0      	b.n	8001552 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2100      	movs	r1, #0
 80013b6:	4618      	mov	r0, r3
 80013b8:	f002 fb16 	bl	80039e8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013bc:	2300      	movs	r3, #0
 80013be:	73fb      	strb	r3, [r7, #15]
 80013c0:	e04a      	b.n	8001458 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80013c2:	7bfa      	ldrb	r2, [r7, #15]
 80013c4:	6879      	ldr	r1, [r7, #4]
 80013c6:	4613      	mov	r3, r2
 80013c8:	00db      	lsls	r3, r3, #3
 80013ca:	1a9b      	subs	r3, r3, r2
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	440b      	add	r3, r1
 80013d0:	333d      	adds	r3, #61	; 0x3d
 80013d2:	2201      	movs	r2, #1
 80013d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80013d6:	7bfa      	ldrb	r2, [r7, #15]
 80013d8:	6879      	ldr	r1, [r7, #4]
 80013da:	4613      	mov	r3, r2
 80013dc:	00db      	lsls	r3, r3, #3
 80013de:	1a9b      	subs	r3, r3, r2
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	440b      	add	r3, r1
 80013e4:	333c      	adds	r3, #60	; 0x3c
 80013e6:	7bfa      	ldrb	r2, [r7, #15]
 80013e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80013ea:	7bfa      	ldrb	r2, [r7, #15]
 80013ec:	7bfb      	ldrb	r3, [r7, #15]
 80013ee:	b298      	uxth	r0, r3
 80013f0:	6879      	ldr	r1, [r7, #4]
 80013f2:	4613      	mov	r3, r2
 80013f4:	00db      	lsls	r3, r3, #3
 80013f6:	1a9b      	subs	r3, r3, r2
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	440b      	add	r3, r1
 80013fc:	3342      	adds	r3, #66	; 0x42
 80013fe:	4602      	mov	r2, r0
 8001400:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001402:	7bfa      	ldrb	r2, [r7, #15]
 8001404:	6879      	ldr	r1, [r7, #4]
 8001406:	4613      	mov	r3, r2
 8001408:	00db      	lsls	r3, r3, #3
 800140a:	1a9b      	subs	r3, r3, r2
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	440b      	add	r3, r1
 8001410:	333f      	adds	r3, #63	; 0x3f
 8001412:	2200      	movs	r2, #0
 8001414:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001416:	7bfa      	ldrb	r2, [r7, #15]
 8001418:	6879      	ldr	r1, [r7, #4]
 800141a:	4613      	mov	r3, r2
 800141c:	00db      	lsls	r3, r3, #3
 800141e:	1a9b      	subs	r3, r3, r2
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	440b      	add	r3, r1
 8001424:	3344      	adds	r3, #68	; 0x44
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800142a:	7bfa      	ldrb	r2, [r7, #15]
 800142c:	6879      	ldr	r1, [r7, #4]
 800142e:	4613      	mov	r3, r2
 8001430:	00db      	lsls	r3, r3, #3
 8001432:	1a9b      	subs	r3, r3, r2
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	440b      	add	r3, r1
 8001438:	3348      	adds	r3, #72	; 0x48
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800143e:	7bfa      	ldrb	r2, [r7, #15]
 8001440:	6879      	ldr	r1, [r7, #4]
 8001442:	4613      	mov	r3, r2
 8001444:	00db      	lsls	r3, r3, #3
 8001446:	1a9b      	subs	r3, r3, r2
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	440b      	add	r3, r1
 800144c:	3350      	adds	r3, #80	; 0x50
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001452:	7bfb      	ldrb	r3, [r7, #15]
 8001454:	3301      	adds	r3, #1
 8001456:	73fb      	strb	r3, [r7, #15]
 8001458:	7bfa      	ldrb	r2, [r7, #15]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	429a      	cmp	r2, r3
 8001460:	d3af      	bcc.n	80013c2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001462:	2300      	movs	r3, #0
 8001464:	73fb      	strb	r3, [r7, #15]
 8001466:	e044      	b.n	80014f2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001468:	7bfa      	ldrb	r2, [r7, #15]
 800146a:	6879      	ldr	r1, [r7, #4]
 800146c:	4613      	mov	r3, r2
 800146e:	00db      	lsls	r3, r3, #3
 8001470:	1a9b      	subs	r3, r3, r2
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	440b      	add	r3, r1
 8001476:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800147a:	2200      	movs	r2, #0
 800147c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800147e:	7bfa      	ldrb	r2, [r7, #15]
 8001480:	6879      	ldr	r1, [r7, #4]
 8001482:	4613      	mov	r3, r2
 8001484:	00db      	lsls	r3, r3, #3
 8001486:	1a9b      	subs	r3, r3, r2
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	440b      	add	r3, r1
 800148c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001490:	7bfa      	ldrb	r2, [r7, #15]
 8001492:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001494:	7bfa      	ldrb	r2, [r7, #15]
 8001496:	6879      	ldr	r1, [r7, #4]
 8001498:	4613      	mov	r3, r2
 800149a:	00db      	lsls	r3, r3, #3
 800149c:	1a9b      	subs	r3, r3, r2
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	440b      	add	r3, r1
 80014a2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80014a6:	2200      	movs	r2, #0
 80014a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80014aa:	7bfa      	ldrb	r2, [r7, #15]
 80014ac:	6879      	ldr	r1, [r7, #4]
 80014ae:	4613      	mov	r3, r2
 80014b0:	00db      	lsls	r3, r3, #3
 80014b2:	1a9b      	subs	r3, r3, r2
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	440b      	add	r3, r1
 80014b8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80014c0:	7bfa      	ldrb	r2, [r7, #15]
 80014c2:	6879      	ldr	r1, [r7, #4]
 80014c4:	4613      	mov	r3, r2
 80014c6:	00db      	lsls	r3, r3, #3
 80014c8:	1a9b      	subs	r3, r3, r2
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	440b      	add	r3, r1
 80014ce:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80014d6:	7bfa      	ldrb	r2, [r7, #15]
 80014d8:	6879      	ldr	r1, [r7, #4]
 80014da:	4613      	mov	r3, r2
 80014dc:	00db      	lsls	r3, r3, #3
 80014de:	1a9b      	subs	r3, r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	440b      	add	r3, r1
 80014e4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014ec:	7bfb      	ldrb	r3, [r7, #15]
 80014ee:	3301      	adds	r3, #1
 80014f0:	73fb      	strb	r3, [r7, #15]
 80014f2:	7bfa      	ldrb	r2, [r7, #15]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d3b5      	bcc.n	8001468 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	603b      	str	r3, [r7, #0]
 8001502:	687e      	ldr	r6, [r7, #4]
 8001504:	466d      	mov	r5, sp
 8001506:	f106 0410 	add.w	r4, r6, #16
 800150a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800150c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800150e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001510:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001512:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001516:	e885 0003 	stmia.w	r5, {r0, r1}
 800151a:	1d33      	adds	r3, r6, #4
 800151c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800151e:	6838      	ldr	r0, [r7, #0]
 8001520:	f002 fa8c 	bl	8003a3c <USB_DevInit>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d005      	beq.n	8001536 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2202      	movs	r2, #2
 800152e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e00d      	b.n	8001552 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2200      	movs	r2, #0
 800153a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2201      	movs	r2, #1
 8001542:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  (void)USB_DevDisconnect(hpcd->Instance);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4618      	mov	r0, r3
 800154c:	f003 fac5 	bl	8004ada <USB_DevDisconnect>

  return HAL_OK;
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	3714      	adds	r7, #20
 8001556:	46bd      	mov	sp, r7
 8001558:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800155a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b082      	sub	sp, #8
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001568:	2b01      	cmp	r3, #1
 800156a:	d101      	bne.n	8001570 <HAL_PCD_Start+0x16>
 800156c:	2302      	movs	r3, #2
 800156e:	e012      	b.n	8001596 <HAL_PCD_Start+0x3c>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2201      	movs	r2, #1
 8001574:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_ENABLE(hpcd);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4618      	mov	r0, r3
 800157e:	f002 fa13 	bl	80039a8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4618      	mov	r0, r3
 8001588:	f003 fa87 	bl	8004a9a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2200      	movs	r2, #0
 8001590:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800159e:	b590      	push	{r4, r7, lr}
 80015a0:	b08d      	sub	sp, #52	; 0x34
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80015ac:	6a3b      	ldr	r3, [r7, #32]
 80015ae:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f003 fb3e 	bl	8004c36 <USB_GetMode>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	f040 838f 	bne.w	8001ce0 <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f003 faa7 	bl	8004b1a <USB_ReadInterrupts>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	f000 8385 	beq.w	8001cde <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4618      	mov	r0, r3
 80015da:	f003 fa9e 	bl	8004b1a <USB_ReadInterrupts>
 80015de:	4603      	mov	r3, r0
 80015e0:	f003 0302 	and.w	r3, r3, #2
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d107      	bne.n	80015f8 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	695a      	ldr	r2, [r3, #20]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f002 0202 	and.w	r2, r2, #2
 80015f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f003 fa8c 	bl	8004b1a <USB_ReadInterrupts>
 8001602:	4603      	mov	r3, r0
 8001604:	f003 0310 	and.w	r3, r3, #16
 8001608:	2b10      	cmp	r3, #16
 800160a:	d161      	bne.n	80016d0 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	699a      	ldr	r2, [r3, #24]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f022 0210 	bic.w	r2, r2, #16
 800161a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800161c:	6a3b      	ldr	r3, [r7, #32]
 800161e:	6a1b      	ldr	r3, [r3, #32]
 8001620:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	f003 020f 	and.w	r2, r3, #15
 8001628:	4613      	mov	r3, r2
 800162a:	00db      	lsls	r3, r3, #3
 800162c:	1a9b      	subs	r3, r3, r2
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	4413      	add	r3, r2
 8001638:	3304      	adds	r3, #4
 800163a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	0c5b      	lsrs	r3, r3, #17
 8001640:	f003 030f 	and.w	r3, r3, #15
 8001644:	2b02      	cmp	r3, #2
 8001646:	d124      	bne.n	8001692 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800164e:	4013      	ands	r3, r2
 8001650:	2b00      	cmp	r3, #0
 8001652:	d035      	beq.n	80016c0 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	091b      	lsrs	r3, r3, #4
 800165c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800165e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001662:	b29b      	uxth	r3, r3
 8001664:	461a      	mov	r2, r3
 8001666:	6a38      	ldr	r0, [r7, #32]
 8001668:	f003 f8f8 	bl	800485c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	68da      	ldr	r2, [r3, #12]
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	091b      	lsrs	r3, r3, #4
 8001674:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001678:	441a      	add	r2, r3
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	699a      	ldr	r2, [r3, #24]
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	091b      	lsrs	r3, r3, #4
 8001686:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800168a:	441a      	add	r2, r3
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	619a      	str	r2, [r3, #24]
 8001690:	e016      	b.n	80016c0 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	0c5b      	lsrs	r3, r3, #17
 8001696:	f003 030f 	and.w	r3, r3, #15
 800169a:	2b06      	cmp	r3, #6
 800169c:	d110      	bne.n	80016c0 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80016a4:	2208      	movs	r2, #8
 80016a6:	4619      	mov	r1, r3
 80016a8:	6a38      	ldr	r0, [r7, #32]
 80016aa:	f003 f8d7 	bl	800485c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	699a      	ldr	r2, [r3, #24]
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	091b      	lsrs	r3, r3, #4
 80016b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016ba:	441a      	add	r2, r3
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	699a      	ldr	r2, [r3, #24]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f042 0210 	orr.w	r2, r2, #16
 80016ce:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f003 fa20 	bl	8004b1a <USB_ReadInterrupts>
 80016da:	4603      	mov	r3, r0
 80016dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016e0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80016e4:	d16e      	bne.n	80017c4 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80016e6:	2300      	movs	r3, #0
 80016e8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f003 fa25 	bl	8004b3e <USB_ReadDevAllOutEpInterrupt>
 80016f4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80016f6:	e062      	b.n	80017be <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80016f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d057      	beq.n	80017b2 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001708:	b2d2      	uxtb	r2, r2
 800170a:	4611      	mov	r1, r2
 800170c:	4618      	mov	r0, r3
 800170e:	f003 fa48 	bl	8004ba2 <USB_ReadDevOutEPInterrupt>
 8001712:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	2b00      	cmp	r3, #0
 800171c:	d00c      	beq.n	8001738 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800171e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001720:	015a      	lsls	r2, r3, #5
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	4413      	add	r3, r2
 8001726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800172a:	461a      	mov	r2, r3
 800172c:	2301      	movs	r3, #1
 800172e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001730:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f000 fda2 	bl	800227c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	f003 0308 	and.w	r3, r3, #8
 800173e:	2b00      	cmp	r3, #0
 8001740:	d00c      	beq.n	800175c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001744:	015a      	lsls	r2, r3, #5
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	4413      	add	r3, r2
 800174a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800174e:	461a      	mov	r2, r3
 8001750:	2308      	movs	r3, #8
 8001752:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001754:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f000 fe9c 	bl	8002494 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	f003 0310 	and.w	r3, r3, #16
 8001762:	2b00      	cmp	r3, #0
 8001764:	d008      	beq.n	8001778 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001768:	015a      	lsls	r2, r3, #5
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	4413      	add	r3, r2
 800176e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001772:	461a      	mov	r2, r3
 8001774:	2310      	movs	r3, #16
 8001776:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	f003 0320 	and.w	r3, r3, #32
 800177e:	2b00      	cmp	r3, #0
 8001780:	d008      	beq.n	8001794 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001784:	015a      	lsls	r2, r3, #5
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	4413      	add	r3, r2
 800178a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800178e:	461a      	mov	r2, r3
 8001790:	2320      	movs	r3, #32
 8001792:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d009      	beq.n	80017b2 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800179e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a0:	015a      	lsls	r2, r3, #5
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	4413      	add	r3, r2
 80017a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017aa:	461a      	mov	r2, r3
 80017ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017b0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80017b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b4:	3301      	adds	r3, #1
 80017b6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80017b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017ba:	085b      	lsrs	r3, r3, #1
 80017bc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80017be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d199      	bne.n	80016f8 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f003 f9a6 	bl	8004b1a <USB_ReadInterrupts>
 80017ce:	4603      	mov	r3, r0
 80017d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017d4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80017d8:	f040 80c0 	bne.w	800195c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f003 f9c5 	bl	8004b70 <USB_ReadDevAllInEpInterrupt>
 80017e6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80017e8:	2300      	movs	r3, #0
 80017ea:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80017ec:	e0b2      	b.n	8001954 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80017ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017f0:	f003 0301 	and.w	r3, r3, #1
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	f000 80a7 	beq.w	8001948 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001800:	b2d2      	uxtb	r2, r2
 8001802:	4611      	mov	r1, r2
 8001804:	4618      	mov	r0, r3
 8001806:	f003 f9e9 	bl	8004bdc <USB_ReadDevInEPInterrupt>
 800180a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	2b00      	cmp	r3, #0
 8001814:	d057      	beq.n	80018c6 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001818:	f003 030f 	and.w	r3, r3, #15
 800181c:	2201      	movs	r2, #1
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800182a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	43db      	mvns	r3, r3
 8001830:	69f9      	ldr	r1, [r7, #28]
 8001832:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001836:	4013      	ands	r3, r2
 8001838:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800183a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183c:	015a      	lsls	r2, r3, #5
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	4413      	add	r3, r2
 8001842:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001846:	461a      	mov	r2, r3
 8001848:	2301      	movs	r3, #1
 800184a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	691b      	ldr	r3, [r3, #16]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d132      	bne.n	80018ba <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001854:	6879      	ldr	r1, [r7, #4]
 8001856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001858:	4613      	mov	r3, r2
 800185a:	00db      	lsls	r3, r3, #3
 800185c:	1a9b      	subs	r3, r3, r2
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	440b      	add	r3, r1
 8001862:	3348      	adds	r3, #72	; 0x48
 8001864:	6819      	ldr	r1, [r3, #0]
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800186a:	4613      	mov	r3, r2
 800186c:	00db      	lsls	r3, r3, #3
 800186e:	1a9b      	subs	r3, r3, r2
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	4403      	add	r3, r0
 8001874:	3344      	adds	r3, #68	; 0x44
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4419      	add	r1, r3
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800187e:	4613      	mov	r3, r2
 8001880:	00db      	lsls	r3, r3, #3
 8001882:	1a9b      	subs	r3, r3, r2
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	4403      	add	r3, r0
 8001888:	3348      	adds	r3, #72	; 0x48
 800188a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800188c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188e:	2b00      	cmp	r3, #0
 8001890:	d113      	bne.n	80018ba <HAL_PCD_IRQHandler+0x31c>
 8001892:	6879      	ldr	r1, [r7, #4]
 8001894:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001896:	4613      	mov	r3, r2
 8001898:	00db      	lsls	r3, r3, #3
 800189a:	1a9b      	subs	r3, r3, r2
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	440b      	add	r3, r1
 80018a0:	3350      	adds	r3, #80	; 0x50
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d108      	bne.n	80018ba <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6818      	ldr	r0, [r3, #0]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80018b2:	461a      	mov	r2, r3
 80018b4:	2101      	movs	r1, #1
 80018b6:	f003 f9ed 	bl	8004c94 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80018ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	4619      	mov	r1, r3
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f005 f83a 	bl	800693a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	f003 0308 	and.w	r3, r3, #8
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d008      	beq.n	80018e2 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80018d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d2:	015a      	lsls	r2, r3, #5
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	4413      	add	r3, r2
 80018d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018dc:	461a      	mov	r2, r3
 80018de:	2308      	movs	r3, #8
 80018e0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	f003 0310 	and.w	r3, r3, #16
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d008      	beq.n	80018fe <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80018ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ee:	015a      	lsls	r2, r3, #5
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	4413      	add	r3, r2
 80018f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018f8:	461a      	mov	r2, r3
 80018fa:	2310      	movs	r3, #16
 80018fc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001904:	2b00      	cmp	r3, #0
 8001906:	d008      	beq.n	800191a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190a:	015a      	lsls	r2, r3, #5
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	4413      	add	r3, r2
 8001910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001914:	461a      	mov	r2, r3
 8001916:	2340      	movs	r3, #64	; 0x40
 8001918:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	f003 0302 	and.w	r3, r3, #2
 8001920:	2b00      	cmp	r3, #0
 8001922:	d008      	beq.n	8001936 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001926:	015a      	lsls	r2, r3, #5
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	4413      	add	r3, r2
 800192c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001930:	461a      	mov	r2, r3
 8001932:	2302      	movs	r3, #2
 8001934:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800193c:	2b00      	cmp	r3, #0
 800193e:	d003      	beq.n	8001948 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001940:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f000 fc0c 	bl	8002160 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194a:	3301      	adds	r3, #1
 800194c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800194e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001950:	085b      	lsrs	r3, r3, #1
 8001952:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001956:	2b00      	cmp	r3, #0
 8001958:	f47f af49 	bne.w	80017ee <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4618      	mov	r0, r3
 8001962:	f003 f8da 	bl	8004b1a <USB_ReadInterrupts>
 8001966:	4603      	mov	r3, r0
 8001968:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800196c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001970:	d114      	bne.n	800199c <HAL_PCD_IRQHandler+0x3fe>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	69fa      	ldr	r2, [r7, #28]
 800197c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001980:	f023 0301 	bic.w	r3, r3, #1
 8001984:	6053      	str	r3, [r2, #4]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResumeCallback(hpcd);
#else
      HAL_PCD_ResumeCallback(hpcd);
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f005 f84e 	bl	8006a28 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	695a      	ldr	r2, [r3, #20]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800199a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f003 f8ba 	bl	8004b1a <USB_ReadInterrupts>
 80019a6:	4603      	mov	r3, r0
 80019a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80019b0:	d112      	bne.n	80019d8 <HAL_PCD_IRQHandler+0x43a>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d102      	bne.n	80019c8 <HAL_PCD_IRQHandler+0x42a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f005 f80a 	bl	80069dc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	695a      	ldr	r2, [r3, #20]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80019d6:	615a      	str	r2, [r3, #20]
    }
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4618      	mov	r0, r3
 80019de:	f003 f89c 	bl	8004b1a <USB_ReadInterrupts>
 80019e2:	4603      	mov	r3, r0
 80019e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019ec:	f040 80c7 	bne.w	8001b7e <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	69fa      	ldr	r2, [r7, #28]
 80019fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019fe:	f023 0301 	bic.w	r3, r3, #1
 8001a02:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2110      	movs	r1, #16
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f002 f97a 	bl	8003d04 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a10:	2300      	movs	r3, #0
 8001a12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a14:	e056      	b.n	8001ac4 <HAL_PCD_IRQHandler+0x526>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a18:	015a      	lsls	r2, r3, #5
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a22:	461a      	mov	r2, r3
 8001a24:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001a28:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a2c:	015a      	lsls	r2, r3, #5
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	4413      	add	r3, r2
 8001a32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a3a:	0151      	lsls	r1, r2, #5
 8001a3c:	69fa      	ldr	r2, [r7, #28]
 8001a3e:	440a      	add	r2, r1
 8001a40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001a44:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001a48:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a4c:	015a      	lsls	r2, r3, #5
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	4413      	add	r3, r2
 8001a52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a5a:	0151      	lsls	r1, r2, #5
 8001a5c:	69fa      	ldr	r2, [r7, #28]
 8001a5e:	440a      	add	r2, r1
 8001a60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001a64:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001a68:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a6c:	015a      	lsls	r2, r3, #5
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	4413      	add	r3, r2
 8001a72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a76:	461a      	mov	r2, r3
 8001a78:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001a7c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a80:	015a      	lsls	r2, r3, #5
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	4413      	add	r3, r2
 8001a86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a8e:	0151      	lsls	r1, r2, #5
 8001a90:	69fa      	ldr	r2, [r7, #28]
 8001a92:	440a      	add	r2, r1
 8001a94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001a98:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001a9c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aa0:	015a      	lsls	r2, r3, #5
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001aae:	0151      	lsls	r1, r2, #5
 8001ab0:	69fa      	ldr	r2, [r7, #28]
 8001ab2:	440a      	add	r2, r1
 8001ab4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001ab8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001abc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d3a3      	bcc.n	8001a16 <HAL_PCD_IRQHandler+0x478>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ad4:	69db      	ldr	r3, [r3, #28]
 8001ad6:	69fa      	ldr	r2, [r7, #28]
 8001ad8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001adc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001ae0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d016      	beq.n	8001b18 <HAL_PCD_IRQHandler+0x57a>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001af0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001af4:	69fa      	ldr	r2, [r7, #28]
 8001af6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001afa:	f043 030b 	orr.w	r3, r3, #11
 8001afe:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0a:	69fa      	ldr	r2, [r7, #28]
 8001b0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b10:	f043 030b 	orr.w	r3, r3, #11
 8001b14:	6453      	str	r3, [r2, #68]	; 0x44
 8001b16:	e015      	b.n	8001b44 <HAL_PCD_IRQHandler+0x5a6>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b1e:	695b      	ldr	r3, [r3, #20]
 8001b20:	69fa      	ldr	r2, [r7, #28]
 8001b22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b26:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b2a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001b2e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b36:	691b      	ldr	r3, [r3, #16]
 8001b38:	69fa      	ldr	r2, [r7, #28]
 8001b3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b3e:	f043 030b 	orr.w	r3, r3, #11
 8001b42:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	69fa      	ldr	r2, [r7, #28]
 8001b4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b52:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001b56:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6818      	ldr	r0, [r3, #0]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	691b      	ldr	r3, [r3, #16]
 8001b60:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001b68:	461a      	mov	r2, r3
 8001b6a:	f003 f893 	bl	8004c94 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	695a      	ldr	r2, [r3, #20]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001b7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f002 ffc9 	bl	8004b1a <USB_ReadInterrupts>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b92:	d124      	bne.n	8001bde <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f003 f859 	bl	8004c50 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f002 f90a 	bl	8003dbc <USB_GetDevSpeed>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	461a      	mov	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681c      	ldr	r4, [r3, #0]
 8001bb4:	f001 f91e 	bl	8002df4 <HAL_RCC_GetHCLKFreq>
 8001bb8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	4620      	mov	r0, r4
 8001bc4:	f001 fe4e 	bl	8003864 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f004 fede 	bl	800698a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	695a      	ldr	r2, [r3, #20]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001bdc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f002 ff99 	bl	8004b1a <USB_ReadInterrupts>
 8001be8:	4603      	mov	r3, r0
 8001bea:	f003 0308 	and.w	r3, r3, #8
 8001bee:	2b08      	cmp	r3, #8
 8001bf0:	d10a      	bne.n	8001c08 <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f004 febb 	bl	800696e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	695a      	ldr	r2, [r3, #20]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f002 0208 	and.w	r2, r2, #8
 8001c06:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f002 ff84 	bl	8004b1a <USB_ReadInterrupts>
 8001c12:	4603      	mov	r3, r0
 8001c14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c1c:	d10f      	bne.n	8001c3e <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	4619      	mov	r1, r3
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f004 ff1d 	bl	8006a68 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	695a      	ldr	r2, [r3, #20]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001c3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f002 ff69 	bl	8004b1a <USB_ReadInterrupts>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c4e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001c52:	d10f      	bne.n	8001c74 <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001c54:	2300      	movs	r3, #0
 8001c56:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f004 fef0 	bl	8006a44 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	695a      	ldr	r2, [r3, #20]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001c72:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f002 ff4e 	bl	8004b1a <USB_ReadInterrupts>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001c84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c88:	d10a      	bne.n	8001ca0 <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f004 fefe 	bl	8006a8c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	695a      	ldr	r2, [r3, #20]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001c9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f002 ff38 	bl	8004b1a <USB_ReadInterrupts>
 8001caa:	4603      	mov	r3, r0
 8001cac:	f003 0304 	and.w	r3, r3, #4
 8001cb0:	2b04      	cmp	r3, #4
 8001cb2:	d115      	bne.n	8001ce0 <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	f003 0304 	and.w	r3, r3, #4
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d002      	beq.n	8001ccc <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f004 feee 	bl	8006aa8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	6859      	ldr	r1, [r3, #4]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	605a      	str	r2, [r3, #4]
 8001cdc:	e000      	b.n	8001ce0 <HAL_PCD_IRQHandler+0x742>
      return;
 8001cde:	bf00      	nop
    }
  }
}
 8001ce0:	3734      	adds	r7, #52	; 0x34
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd90      	pop	{r4, r7, pc}

08001ce6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b082      	sub	sp, #8
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
 8001cee:	460b      	mov	r3, r1
 8001cf0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d101      	bne.n	8001d00 <HAL_PCD_SetAddress+0x1a>
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	e013      	b.n	8001d28 <HAL_PCD_SetAddress+0x42>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	78fa      	ldrb	r2, [r7, #3]
 8001d0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	78fa      	ldrb	r2, [r7, #3]
 8001d16:	4611      	mov	r1, r2
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f002 fe99 	bl	8004a50 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3708      	adds	r7, #8
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	4608      	mov	r0, r1
 8001d3a:	4611      	mov	r1, r2
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	4603      	mov	r3, r0
 8001d40:	70fb      	strb	r3, [r7, #3]
 8001d42:	460b      	mov	r3, r1
 8001d44:	803b      	strh	r3, [r7, #0]
 8001d46:	4613      	mov	r3, r2
 8001d48:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	da0f      	bge.n	8001d76 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d56:	78fb      	ldrb	r3, [r7, #3]
 8001d58:	f003 020f 	and.w	r2, r3, #15
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	00db      	lsls	r3, r3, #3
 8001d60:	1a9b      	subs	r3, r3, r2
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	3338      	adds	r3, #56	; 0x38
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	4413      	add	r3, r2
 8001d6a:	3304      	adds	r3, #4
 8001d6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2201      	movs	r2, #1
 8001d72:	705a      	strb	r2, [r3, #1]
 8001d74:	e00f      	b.n	8001d96 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d76:	78fb      	ldrb	r3, [r7, #3]
 8001d78:	f003 020f 	and.w	r2, r3, #15
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	00db      	lsls	r3, r3, #3
 8001d80:	1a9b      	subs	r3, r3, r2
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	3304      	adds	r3, #4
 8001d8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2200      	movs	r2, #0
 8001d94:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001d96:	78fb      	ldrb	r3, [r7, #3]
 8001d98:	f003 030f 	and.w	r3, r3, #15
 8001d9c:	b2da      	uxtb	r2, r3
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001da2:	883a      	ldrh	r2, [r7, #0]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	78ba      	ldrb	r2, [r7, #2]
 8001dac:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	785b      	ldrb	r3, [r3, #1]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d004      	beq.n	8001dc0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	b29a      	uxth	r2, r3
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001dc0:	78bb      	ldrb	r3, [r7, #2]
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d102      	bne.n	8001dcc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d101      	bne.n	8001dda <HAL_PCD_EP_Open+0xaa>
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	e00e      	b.n	8001df8 <HAL_PCD_EP_Open+0xc8>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	68f9      	ldr	r1, [r7, #12]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f002 f80b 	bl	8003e04 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001df6:	7afb      	ldrb	r3, [r7, #11]
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3710      	adds	r7, #16
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	460b      	mov	r3, r1
 8001e0a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	da0f      	bge.n	8001e34 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e14:	78fb      	ldrb	r3, [r7, #3]
 8001e16:	f003 020f 	and.w	r2, r3, #15
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	00db      	lsls	r3, r3, #3
 8001e1e:	1a9b      	subs	r3, r3, r2
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	3338      	adds	r3, #56	; 0x38
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	4413      	add	r3, r2
 8001e28:	3304      	adds	r3, #4
 8001e2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	705a      	strb	r2, [r3, #1]
 8001e32:	e00f      	b.n	8001e54 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e34:	78fb      	ldrb	r3, [r7, #3]
 8001e36:	f003 020f 	and.w	r2, r3, #15
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	00db      	lsls	r3, r3, #3
 8001e3e:	1a9b      	subs	r3, r3, r2
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	4413      	add	r3, r2
 8001e4a:	3304      	adds	r3, #4
 8001e4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2200      	movs	r2, #0
 8001e52:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001e54:	78fb      	ldrb	r3, [r7, #3]
 8001e56:	f003 030f 	and.w	r3, r3, #15
 8001e5a:	b2da      	uxtb	r2, r3
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d101      	bne.n	8001e6e <HAL_PCD_EP_Close+0x6e>
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	e00e      	b.n	8001e8c <HAL_PCD_EP_Close+0x8c>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2201      	movs	r2, #1
 8001e72:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	68f9      	ldr	r1, [r7, #12]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f002 f847 	bl	8003f10 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3710      	adds	r7, #16
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b086      	sub	sp, #24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	607a      	str	r2, [r7, #4]
 8001e9e:	603b      	str	r3, [r7, #0]
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ea4:	7afb      	ldrb	r3, [r7, #11]
 8001ea6:	f003 020f 	and.w	r2, r3, #15
 8001eaa:	4613      	mov	r3, r2
 8001eac:	00db      	lsls	r3, r3, #3
 8001eae:	1a9b      	subs	r3, r3, r2
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	4413      	add	r3, r2
 8001eba:	3304      	adds	r3, #4
 8001ebc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ed6:	7afb      	ldrb	r3, [r7, #11]
 8001ed8:	f003 030f 	and.w	r3, r3, #15
 8001edc:	b2da      	uxtb	r2, r3
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d102      	bne.n	8001ef0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ef0:	7afb      	ldrb	r3, [r7, #11]
 8001ef2:	f003 030f 	and.w	r3, r3, #15
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d109      	bne.n	8001f0e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	6818      	ldr	r0, [r3, #0]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	461a      	mov	r2, r3
 8001f06:	6979      	ldr	r1, [r7, #20]
 8001f08:	f002 fb22 	bl	8004550 <USB_EP0StartXfer>
 8001f0c:	e008      	b.n	8001f20 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	6818      	ldr	r0, [r3, #0]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	461a      	mov	r2, r3
 8001f1a:	6979      	ldr	r1, [r7, #20]
 8001f1c:	f002 f8d4 	bl	80040c8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3718      	adds	r7, #24
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	b083      	sub	sp, #12
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
 8001f32:	460b      	mov	r3, r1
 8001f34:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001f36:	78fb      	ldrb	r3, [r7, #3]
 8001f38:	f003 020f 	and.w	r2, r3, #15
 8001f3c:	6879      	ldr	r1, [r7, #4]
 8001f3e:	4613      	mov	r3, r2
 8001f40:	00db      	lsls	r3, r3, #3
 8001f42:	1a9b      	subs	r3, r3, r2
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	440b      	add	r3, r1
 8001f48:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001f4c:	681b      	ldr	r3, [r3, #0]
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bc80      	pop	{r7}
 8001f56:	4770      	bx	lr

08001f58 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	607a      	str	r2, [r7, #4]
 8001f62:	603b      	str	r3, [r7, #0]
 8001f64:	460b      	mov	r3, r1
 8001f66:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f68:	7afb      	ldrb	r3, [r7, #11]
 8001f6a:	f003 020f 	and.w	r2, r3, #15
 8001f6e:	4613      	mov	r3, r2
 8001f70:	00db      	lsls	r3, r3, #3
 8001f72:	1a9b      	subs	r3, r3, r2
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	3338      	adds	r3, #56	; 0x38
 8001f78:	68fa      	ldr	r2, [r7, #12]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	3304      	adds	r3, #4
 8001f7e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	683a      	ldr	r2, [r7, #0]
 8001f8a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	2201      	movs	r2, #1
 8001f96:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f98:	7afb      	ldrb	r3, [r7, #11]
 8001f9a:	f003 030f 	and.w	r3, r3, #15
 8001f9e:	b2da      	uxtb	r2, r3
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	691b      	ldr	r3, [r3, #16]
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d102      	bne.n	8001fb2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001fb2:	7afb      	ldrb	r3, [r7, #11]
 8001fb4:	f003 030f 	and.w	r3, r3, #15
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d109      	bne.n	8001fd0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	6818      	ldr	r0, [r3, #0]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	691b      	ldr	r3, [r3, #16]
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	6979      	ldr	r1, [r7, #20]
 8001fca:	f002 fac1 	bl	8004550 <USB_EP0StartXfer>
 8001fce:	e008      	b.n	8001fe2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	6818      	ldr	r0, [r3, #0]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	691b      	ldr	r3, [r3, #16]
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	461a      	mov	r2, r3
 8001fdc:	6979      	ldr	r1, [r7, #20]
 8001fde:	f002 f873 	bl	80040c8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3718      	adds	r7, #24
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001ff8:	78fb      	ldrb	r3, [r7, #3]
 8001ffa:	f003 020f 	and.w	r2, r3, #15
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	429a      	cmp	r2, r3
 8002004:	d901      	bls.n	800200a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e050      	b.n	80020ac <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800200a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800200e:	2b00      	cmp	r3, #0
 8002010:	da0f      	bge.n	8002032 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002012:	78fb      	ldrb	r3, [r7, #3]
 8002014:	f003 020f 	and.w	r2, r3, #15
 8002018:	4613      	mov	r3, r2
 800201a:	00db      	lsls	r3, r3, #3
 800201c:	1a9b      	subs	r3, r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	3338      	adds	r3, #56	; 0x38
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	4413      	add	r3, r2
 8002026:	3304      	adds	r3, #4
 8002028:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2201      	movs	r2, #1
 800202e:	705a      	strb	r2, [r3, #1]
 8002030:	e00d      	b.n	800204e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002032:	78fa      	ldrb	r2, [r7, #3]
 8002034:	4613      	mov	r3, r2
 8002036:	00db      	lsls	r3, r3, #3
 8002038:	1a9b      	subs	r3, r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	4413      	add	r3, r2
 8002044:	3304      	adds	r3, #4
 8002046:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2200      	movs	r2, #0
 800204c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2201      	movs	r2, #1
 8002052:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002054:	78fb      	ldrb	r3, [r7, #3]
 8002056:	f003 030f 	and.w	r3, r3, #15
 800205a:	b2da      	uxtb	r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002066:	2b01      	cmp	r3, #1
 8002068:	d101      	bne.n	800206e <HAL_PCD_EP_SetStall+0x82>
 800206a:	2302      	movs	r3, #2
 800206c:	e01e      	b.n	80020ac <HAL_PCD_EP_SetStall+0xc0>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2201      	movs	r2, #1
 8002072:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	68f9      	ldr	r1, [r7, #12]
 800207c:	4618      	mov	r0, r3
 800207e:	f002 fc15 	bl	80048ac <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002082:	78fb      	ldrb	r3, [r7, #3]
 8002084:	f003 030f 	and.w	r3, r3, #15
 8002088:	2b00      	cmp	r3, #0
 800208a:	d10a      	bne.n	80020a2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6818      	ldr	r0, [r3, #0]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	691b      	ldr	r3, [r3, #16]
 8002094:	b2d9      	uxtb	r1, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800209c:	461a      	mov	r2, r3
 800209e:	f002 fdf9 	bl	8004c94 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80020aa:	2300      	movs	r3, #0
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3710      	adds	r7, #16
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	460b      	mov	r3, r1
 80020be:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80020c0:	78fb      	ldrb	r3, [r7, #3]
 80020c2:	f003 020f 	and.w	r2, r3, #15
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d901      	bls.n	80020d2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e042      	b.n	8002158 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80020d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	da0f      	bge.n	80020fa <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020da:	78fb      	ldrb	r3, [r7, #3]
 80020dc:	f003 020f 	and.w	r2, r3, #15
 80020e0:	4613      	mov	r3, r2
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	1a9b      	subs	r3, r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	3338      	adds	r3, #56	; 0x38
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	4413      	add	r3, r2
 80020ee:	3304      	adds	r3, #4
 80020f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2201      	movs	r2, #1
 80020f6:	705a      	strb	r2, [r3, #1]
 80020f8:	e00f      	b.n	800211a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020fa:	78fb      	ldrb	r3, [r7, #3]
 80020fc:	f003 020f 	and.w	r2, r3, #15
 8002100:	4613      	mov	r3, r2
 8002102:	00db      	lsls	r3, r3, #3
 8002104:	1a9b      	subs	r3, r3, r2
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	4413      	add	r3, r2
 8002110:	3304      	adds	r3, #4
 8002112:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2200      	movs	r2, #0
 8002118:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2200      	movs	r2, #0
 800211e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002120:	78fb      	ldrb	r3, [r7, #3]
 8002122:	f003 030f 	and.w	r3, r3, #15
 8002126:	b2da      	uxtb	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002132:	2b01      	cmp	r3, #1
 8002134:	d101      	bne.n	800213a <HAL_PCD_EP_ClrStall+0x86>
 8002136:	2302      	movs	r3, #2
 8002138:	e00e      	b.n	8002158 <HAL_PCD_EP_ClrStall+0xa4>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2201      	movs	r2, #1
 800213e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	68f9      	ldr	r1, [r7, #12]
 8002148:	4618      	mov	r0, r3
 800214a:	f002 fc1c 	bl	8004986 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002156:	2300      	movs	r3, #0
}
 8002158:	4618      	mov	r0, r3
 800215a:	3710      	adds	r7, #16
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b08a      	sub	sp, #40	; 0x28
 8002164:	af02      	add	r7, sp, #8
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	4613      	mov	r3, r2
 8002178:	00db      	lsls	r3, r3, #3
 800217a:	1a9b      	subs	r3, r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	3338      	adds	r3, #56	; 0x38
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	4413      	add	r3, r2
 8002184:	3304      	adds	r3, #4
 8002186:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	699a      	ldr	r2, [r3, #24]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	695b      	ldr	r3, [r3, #20]
 8002190:	429a      	cmp	r2, r3
 8002192:	d901      	bls.n	8002198 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e06c      	b.n	8002272 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	695a      	ldr	r2, [r3, #20]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	69fa      	ldr	r2, [r7, #28]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d902      	bls.n	80021b4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	3303      	adds	r3, #3
 80021b8:	089b      	lsrs	r3, r3, #2
 80021ba:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80021bc:	e02b      	b.n	8002216 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	695a      	ldr	r2, [r3, #20]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	699b      	ldr	r3, [r3, #24]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	69fa      	ldr	r2, [r7, #28]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d902      	bls.n	80021da <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	3303      	adds	r3, #3
 80021de:	089b      	lsrs	r3, r3, #2
 80021e0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	68d9      	ldr	r1, [r3, #12]
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	b2da      	uxtb	r2, r3
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	9300      	str	r3, [sp, #0]
 80021f6:	4603      	mov	r3, r0
 80021f8:	6978      	ldr	r0, [r7, #20]
 80021fa:	f002 fafb 	bl	80047f4 <USB_WritePacket>

    ep->xfer_buff  += len;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	68da      	ldr	r2, [r3, #12]
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	441a      	add	r2, r3
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	699a      	ldr	r2, [r3, #24]
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	441a      	add	r2, r3
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	015a      	lsls	r2, r3, #5
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	4413      	add	r3, r2
 800221e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	b29b      	uxth	r3, r3
 8002226:	69ba      	ldr	r2, [r7, #24]
 8002228:	429a      	cmp	r2, r3
 800222a:	d809      	bhi.n	8002240 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	699a      	ldr	r2, [r3, #24]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002234:	429a      	cmp	r2, r3
 8002236:	d203      	bcs.n	8002240 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	695b      	ldr	r3, [r3, #20]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d1be      	bne.n	80021be <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	695a      	ldr	r2, [r3, #20]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	429a      	cmp	r2, r3
 800224a:	d811      	bhi.n	8002270 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	f003 030f 	and.w	r3, r3, #15
 8002252:	2201      	movs	r2, #1
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002260:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	43db      	mvns	r3, r3
 8002266:	6939      	ldr	r1, [r7, #16]
 8002268:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800226c:	4013      	ands	r3, r2
 800226e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	3720      	adds	r7, #32
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
	...

0800227c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b086      	sub	sp, #24
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	333c      	adds	r3, #60	; 0x3c
 8002294:	3304      	adds	r3, #4
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	015a      	lsls	r2, r3, #5
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	4413      	add	r3, r2
 80022a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	f040 80a0 	bne.w	80023f4 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	f003 0308 	and.w	r3, r3, #8
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d015      	beq.n	80022ea <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	4a72      	ldr	r2, [pc, #456]	; (800248c <PCD_EP_OutXfrComplete_int+0x210>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	f240 80dd 	bls.w	8002482 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	f000 80d7 	beq.w	8002482 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	015a      	lsls	r2, r3, #5
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	4413      	add	r3, r2
 80022dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022e0:	461a      	mov	r2, r3
 80022e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022e6:	6093      	str	r3, [r2, #8]
 80022e8:	e0cb      	b.n	8002482 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	f003 0320 	and.w	r3, r3, #32
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d009      	beq.n	8002308 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	015a      	lsls	r2, r3, #5
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	4413      	add	r3, r2
 80022fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002300:	461a      	mov	r2, r3
 8002302:	2320      	movs	r3, #32
 8002304:	6093      	str	r3, [r2, #8]
 8002306:	e0bc      	b.n	8002482 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800230e:	2b00      	cmp	r3, #0
 8002310:	f040 80b7 	bne.w	8002482 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	4a5d      	ldr	r2, [pc, #372]	; (800248c <PCD_EP_OutXfrComplete_int+0x210>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d90f      	bls.n	800233c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002322:	2b00      	cmp	r3, #0
 8002324:	d00a      	beq.n	800233c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	015a      	lsls	r2, r3, #5
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	4413      	add	r3, r2
 800232e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002332:	461a      	mov	r2, r3
 8002334:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002338:	6093      	str	r3, [r2, #8]
 800233a:	e0a2      	b.n	8002482 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800233c:	6879      	ldr	r1, [r7, #4]
 800233e:	683a      	ldr	r2, [r7, #0]
 8002340:	4613      	mov	r3, r2
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	1a9b      	subs	r3, r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	440b      	add	r3, r1
 800234a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800234e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	0159      	lsls	r1, r3, #5
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	440b      	add	r3, r1
 8002358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002362:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	683a      	ldr	r2, [r7, #0]
 8002368:	4613      	mov	r3, r2
 800236a:	00db      	lsls	r3, r3, #3
 800236c:	1a9b      	subs	r3, r3, r2
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	4403      	add	r3, r0
 8002372:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002376:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002378:	6879      	ldr	r1, [r7, #4]
 800237a:	683a      	ldr	r2, [r7, #0]
 800237c:	4613      	mov	r3, r2
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	1a9b      	subs	r3, r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	440b      	add	r3, r1
 8002386:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800238a:	6819      	ldr	r1, [r3, #0]
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	683a      	ldr	r2, [r7, #0]
 8002390:	4613      	mov	r3, r2
 8002392:	00db      	lsls	r3, r3, #3
 8002394:	1a9b      	subs	r3, r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	4403      	add	r3, r0
 800239a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4419      	add	r1, r3
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	683a      	ldr	r2, [r7, #0]
 80023a6:	4613      	mov	r3, r2
 80023a8:	00db      	lsls	r3, r3, #3
 80023aa:	1a9b      	subs	r3, r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	4403      	add	r3, r0
 80023b0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80023b4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d114      	bne.n	80023e6 <PCD_EP_OutXfrComplete_int+0x16a>
 80023bc:	6879      	ldr	r1, [r7, #4]
 80023be:	683a      	ldr	r2, [r7, #0]
 80023c0:	4613      	mov	r3, r2
 80023c2:	00db      	lsls	r3, r3, #3
 80023c4:	1a9b      	subs	r3, r3, r2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	440b      	add	r3, r1
 80023ca:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d108      	bne.n	80023e6 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6818      	ldr	r0, [r3, #0]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80023de:	461a      	mov	r2, r3
 80023e0:	2101      	movs	r1, #1
 80023e2:	f002 fc57 	bl	8004c94 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	4619      	mov	r1, r3
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f004 fa89 	bl	8006904 <HAL_PCD_DataOutStageCallback>
 80023f2:	e046      	b.n	8002482 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	4a26      	ldr	r2, [pc, #152]	; (8002490 <PCD_EP_OutXfrComplete_int+0x214>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d124      	bne.n	8002446 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d00a      	beq.n	800241c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	015a      	lsls	r2, r3, #5
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	4413      	add	r3, r2
 800240e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002412:	461a      	mov	r2, r3
 8002414:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002418:	6093      	str	r3, [r2, #8]
 800241a:	e032      	b.n	8002482 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	f003 0320 	and.w	r3, r3, #32
 8002422:	2b00      	cmp	r3, #0
 8002424:	d008      	beq.n	8002438 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	015a      	lsls	r2, r3, #5
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	4413      	add	r3, r2
 800242e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002432:	461a      	mov	r2, r3
 8002434:	2320      	movs	r3, #32
 8002436:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	b2db      	uxtb	r3, r3
 800243c:	4619      	mov	r1, r3
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f004 fa60 	bl	8006904 <HAL_PCD_DataOutStageCallback>
 8002444:	e01d      	b.n	8002482 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d114      	bne.n	8002476 <PCD_EP_OutXfrComplete_int+0x1fa>
 800244c:	6879      	ldr	r1, [r7, #4]
 800244e:	683a      	ldr	r2, [r7, #0]
 8002450:	4613      	mov	r3, r2
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	1a9b      	subs	r3, r3, r2
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	440b      	add	r3, r1
 800245a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d108      	bne.n	8002476 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6818      	ldr	r0, [r3, #0]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800246e:	461a      	mov	r2, r3
 8002470:	2100      	movs	r1, #0
 8002472:	f002 fc0f 	bl	8004c94 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	b2db      	uxtb	r3, r3
 800247a:	4619      	mov	r1, r3
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f004 fa41 	bl	8006904 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002482:	2300      	movs	r3, #0
}
 8002484:	4618      	mov	r0, r3
 8002486:	3718      	adds	r7, #24
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	4f54300a 	.word	0x4f54300a
 8002490:	4f54310a 	.word	0x4f54310a

08002494 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b086      	sub	sp, #24
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	333c      	adds	r3, #60	; 0x3c
 80024ac:	3304      	adds	r3, #4
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	015a      	lsls	r2, r3, #5
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	4413      	add	r3, r2
 80024ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	4a15      	ldr	r2, [pc, #84]	; (800251c <PCD_EP_OutSetupPacket_int+0x88>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d90e      	bls.n	80024e8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d009      	beq.n	80024e8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	015a      	lsls	r2, r3, #5
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	4413      	add	r3, r2
 80024dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024e0:	461a      	mov	r2, r3
 80024e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024e6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f004 f9f9 	bl	80068e0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	4a0a      	ldr	r2, [pc, #40]	; (800251c <PCD_EP_OutSetupPacket_int+0x88>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d90c      	bls.n	8002510 <PCD_EP_OutSetupPacket_int+0x7c>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d108      	bne.n	8002510 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6818      	ldr	r0, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002508:	461a      	mov	r2, r3
 800250a:	2101      	movs	r1, #1
 800250c:	f002 fbc2 	bl	8004c94 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3718      	adds	r7, #24
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	4f54300a 	.word	0x4f54300a

08002520 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	460b      	mov	r3, r1
 800252a:	70fb      	strb	r3, [r7, #3]
 800252c:	4613      	mov	r3, r2
 800252e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002536:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002538:	78fb      	ldrb	r3, [r7, #3]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d107      	bne.n	800254e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800253e:	883b      	ldrh	r3, [r7, #0]
 8002540:	0419      	lsls	r1, r3, #16
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	68ba      	ldr	r2, [r7, #8]
 8002548:	430a      	orrs	r2, r1
 800254a:	629a      	str	r2, [r3, #40]	; 0x28
 800254c:	e028      	b.n	80025a0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002554:	0c1b      	lsrs	r3, r3, #16
 8002556:	68ba      	ldr	r2, [r7, #8]
 8002558:	4413      	add	r3, r2
 800255a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800255c:	2300      	movs	r3, #0
 800255e:	73fb      	strb	r3, [r7, #15]
 8002560:	e00d      	b.n	800257e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	7bfb      	ldrb	r3, [r7, #15]
 8002568:	3340      	adds	r3, #64	; 0x40
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	4413      	add	r3, r2
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	0c1b      	lsrs	r3, r3, #16
 8002572:	68ba      	ldr	r2, [r7, #8]
 8002574:	4413      	add	r3, r2
 8002576:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002578:	7bfb      	ldrb	r3, [r7, #15]
 800257a:	3301      	adds	r3, #1
 800257c:	73fb      	strb	r3, [r7, #15]
 800257e:	7bfa      	ldrb	r2, [r7, #15]
 8002580:	78fb      	ldrb	r3, [r7, #3]
 8002582:	3b01      	subs	r3, #1
 8002584:	429a      	cmp	r2, r3
 8002586:	d3ec      	bcc.n	8002562 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002588:	883b      	ldrh	r3, [r7, #0]
 800258a:	0418      	lsls	r0, r3, #16
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6819      	ldr	r1, [r3, #0]
 8002590:	78fb      	ldrb	r3, [r7, #3]
 8002592:	3b01      	subs	r3, #1
 8002594:	68ba      	ldr	r2, [r7, #8]
 8002596:	4302      	orrs	r2, r0
 8002598:	3340      	adds	r3, #64	; 0x40
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	440b      	add	r3, r1
 800259e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80025a0:	2300      	movs	r3, #0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3714      	adds	r7, #20
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bc80      	pop	{r7}
 80025aa:	4770      	bx	lr

080025ac <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	460b      	mov	r3, r1
 80025b6:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	887a      	ldrh	r2, [r7, #2]
 80025be:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	370c      	adds	r7, #12
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bc80      	pop	{r7}
 80025ca:	4770      	bx	lr

080025cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b08a      	sub	sp, #40	; 0x28
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d101      	bne.n	80025de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e237      	b.n	8002a4e <HAL_RCC_OscConfig+0x482>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d050      	beq.n	800268c <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025ea:	4ba3      	ldr	r3, [pc, #652]	; (8002878 <HAL_RCC_OscConfig+0x2ac>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f003 030c 	and.w	r3, r3, #12
 80025f2:	2b04      	cmp	r3, #4
 80025f4:	d00c      	beq.n	8002610 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025f6:	4ba0      	ldr	r3, [pc, #640]	; (8002878 <HAL_RCC_OscConfig+0x2ac>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025fe:	2b08      	cmp	r3, #8
 8002600:	d112      	bne.n	8002628 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002602:	4b9d      	ldr	r3, [pc, #628]	; (8002878 <HAL_RCC_OscConfig+0x2ac>)
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800260a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800260e:	d10b      	bne.n	8002628 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002610:	4b99      	ldr	r3, [pc, #612]	; (8002878 <HAL_RCC_OscConfig+0x2ac>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d036      	beq.n	800268a <HAL_RCC_OscConfig+0xbe>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d132      	bne.n	800268a <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e212      	b.n	8002a4e <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685a      	ldr	r2, [r3, #4]
 800262c:	4b93      	ldr	r3, [pc, #588]	; (800287c <HAL_RCC_OscConfig+0x2b0>)
 800262e:	b2d2      	uxtb	r2, r2
 8002630:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d013      	beq.n	8002662 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800263a:	f7fe fb3f 	bl	8000cbc <HAL_GetTick>
 800263e:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002640:	e008      	b.n	8002654 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002642:	f7fe fb3b 	bl	8000cbc <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	6a3b      	ldr	r3, [r7, #32]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	2b64      	cmp	r3, #100	; 0x64
 800264e:	d901      	bls.n	8002654 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	e1fc      	b.n	8002a4e <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002654:	4b88      	ldr	r3, [pc, #544]	; (8002878 <HAL_RCC_OscConfig+0x2ac>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d0f0      	beq.n	8002642 <HAL_RCC_OscConfig+0x76>
 8002660:	e014      	b.n	800268c <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002662:	f7fe fb2b 	bl	8000cbc <HAL_GetTick>
 8002666:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002668:	e008      	b.n	800267c <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800266a:	f7fe fb27 	bl	8000cbc <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	6a3b      	ldr	r3, [r7, #32]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	2b64      	cmp	r3, #100	; 0x64
 8002676:	d901      	bls.n	800267c <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e1e8      	b.n	8002a4e <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800267c:	4b7e      	ldr	r3, [pc, #504]	; (8002878 <HAL_RCC_OscConfig+0x2ac>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d1f0      	bne.n	800266a <HAL_RCC_OscConfig+0x9e>
 8002688:	e000      	b.n	800268c <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800268a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0302 	and.w	r3, r3, #2
 8002694:	2b00      	cmp	r3, #0
 8002696:	d077      	beq.n	8002788 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002698:	4b77      	ldr	r3, [pc, #476]	; (8002878 <HAL_RCC_OscConfig+0x2ac>)
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	f003 030c 	and.w	r3, r3, #12
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d00b      	beq.n	80026bc <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026a4:	4b74      	ldr	r3, [pc, #464]	; (8002878 <HAL_RCC_OscConfig+0x2ac>)
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026ac:	2b08      	cmp	r3, #8
 80026ae:	d126      	bne.n	80026fe <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026b0:	4b71      	ldr	r3, [pc, #452]	; (8002878 <HAL_RCC_OscConfig+0x2ac>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d120      	bne.n	80026fe <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026bc:	4b6e      	ldr	r3, [pc, #440]	; (8002878 <HAL_RCC_OscConfig+0x2ac>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0302 	and.w	r3, r3, #2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d005      	beq.n	80026d4 <HAL_RCC_OscConfig+0x108>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d001      	beq.n	80026d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e1bc      	b.n	8002a4e <HAL_RCC_OscConfig+0x482>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026d4:	4b68      	ldr	r3, [pc, #416]	; (8002878 <HAL_RCC_OscConfig+0x2ac>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	691b      	ldr	r3, [r3, #16]
 80026e0:	21f8      	movs	r1, #248	; 0xf8
 80026e2:	61b9      	str	r1, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e4:	69b9      	ldr	r1, [r7, #24]
 80026e6:	fa91 f1a1 	rbit	r1, r1
 80026ea:	6179      	str	r1, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80026ec:	6979      	ldr	r1, [r7, #20]
 80026ee:	fab1 f181 	clz	r1, r1
 80026f2:	b2c9      	uxtb	r1, r1
 80026f4:	408b      	lsls	r3, r1
 80026f6:	4960      	ldr	r1, [pc, #384]	; (8002878 <HAL_RCC_OscConfig+0x2ac>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026fc:	e044      	b.n	8002788 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d02a      	beq.n	800275c <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002706:	4b5e      	ldr	r3, [pc, #376]	; (8002880 <HAL_RCC_OscConfig+0x2b4>)
 8002708:	2201      	movs	r2, #1
 800270a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800270c:	f7fe fad6 	bl	8000cbc <HAL_GetTick>
 8002710:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002712:	e008      	b.n	8002726 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002714:	f7fe fad2 	bl	8000cbc <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	6a3b      	ldr	r3, [r7, #32]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b02      	cmp	r3, #2
 8002720:	d901      	bls.n	8002726 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e193      	b.n	8002a4e <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002726:	4b54      	ldr	r3, [pc, #336]	; (8002878 <HAL_RCC_OscConfig+0x2ac>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0302 	and.w	r3, r3, #2
 800272e:	2b00      	cmp	r3, #0
 8002730:	d0f0      	beq.n	8002714 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002732:	4b51      	ldr	r3, [pc, #324]	; (8002878 <HAL_RCC_OscConfig+0x2ac>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	21f8      	movs	r1, #248	; 0xf8
 8002740:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002742:	6939      	ldr	r1, [r7, #16]
 8002744:	fa91 f1a1 	rbit	r1, r1
 8002748:	60f9      	str	r1, [r7, #12]
  return result;
 800274a:	68f9      	ldr	r1, [r7, #12]
 800274c:	fab1 f181 	clz	r1, r1
 8002750:	b2c9      	uxtb	r1, r1
 8002752:	408b      	lsls	r3, r1
 8002754:	4948      	ldr	r1, [pc, #288]	; (8002878 <HAL_RCC_OscConfig+0x2ac>)
 8002756:	4313      	orrs	r3, r2
 8002758:	600b      	str	r3, [r1, #0]
 800275a:	e015      	b.n	8002788 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800275c:	4b48      	ldr	r3, [pc, #288]	; (8002880 <HAL_RCC_OscConfig+0x2b4>)
 800275e:	2200      	movs	r2, #0
 8002760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002762:	f7fe faab 	bl	8000cbc <HAL_GetTick>
 8002766:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002768:	e008      	b.n	800277c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800276a:	f7fe faa7 	bl	8000cbc <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	6a3b      	ldr	r3, [r7, #32]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	2b02      	cmp	r3, #2
 8002776:	d901      	bls.n	800277c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e168      	b.n	8002a4e <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800277c:	4b3e      	ldr	r3, [pc, #248]	; (8002878 <HAL_RCC_OscConfig+0x2ac>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0302 	and.w	r3, r3, #2
 8002784:	2b00      	cmp	r3, #0
 8002786:	d1f0      	bne.n	800276a <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0308 	and.w	r3, r3, #8
 8002790:	2b00      	cmp	r3, #0
 8002792:	d030      	beq.n	80027f6 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	695b      	ldr	r3, [r3, #20]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d016      	beq.n	80027ca <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800279c:	4b39      	ldr	r3, [pc, #228]	; (8002884 <HAL_RCC_OscConfig+0x2b8>)
 800279e:	2201      	movs	r2, #1
 80027a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027a2:	f7fe fa8b 	bl	8000cbc <HAL_GetTick>
 80027a6:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027a8:	e008      	b.n	80027bc <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027aa:	f7fe fa87 	bl	8000cbc <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	6a3b      	ldr	r3, [r7, #32]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d901      	bls.n	80027bc <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e148      	b.n	8002a4e <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027bc:	4b2e      	ldr	r3, [pc, #184]	; (8002878 <HAL_RCC_OscConfig+0x2ac>)
 80027be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027c0:	f003 0302 	and.w	r3, r3, #2
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d0f0      	beq.n	80027aa <HAL_RCC_OscConfig+0x1de>
 80027c8:	e015      	b.n	80027f6 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027ca:	4b2e      	ldr	r3, [pc, #184]	; (8002884 <HAL_RCC_OscConfig+0x2b8>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027d0:	f7fe fa74 	bl	8000cbc <HAL_GetTick>
 80027d4:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027d6:	e008      	b.n	80027ea <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027d8:	f7fe fa70 	bl	8000cbc <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	6a3b      	ldr	r3, [r7, #32]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e131      	b.n	8002a4e <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027ea:	4b23      	ldr	r3, [pc, #140]	; (8002878 <HAL_RCC_OscConfig+0x2ac>)
 80027ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d1f0      	bne.n	80027d8 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0304 	and.w	r3, r3, #4
 80027fe:	2b00      	cmp	r3, #0
 8002800:	f000 8088 	beq.w	8002914 <HAL_RCC_OscConfig+0x348>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002804:	2300      	movs	r3, #0
 8002806:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800280a:	4b1b      	ldr	r3, [pc, #108]	; (8002878 <HAL_RCC_OscConfig+0x2ac>)
 800280c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d110      	bne.n	8002838 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002816:	2300      	movs	r3, #0
 8002818:	60bb      	str	r3, [r7, #8]
 800281a:	4b17      	ldr	r3, [pc, #92]	; (8002878 <HAL_RCC_OscConfig+0x2ac>)
 800281c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281e:	4a16      	ldr	r2, [pc, #88]	; (8002878 <HAL_RCC_OscConfig+0x2ac>)
 8002820:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002824:	6413      	str	r3, [r2, #64]	; 0x40
 8002826:	4b14      	ldr	r3, [pc, #80]	; (8002878 <HAL_RCC_OscConfig+0x2ac>)
 8002828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800282e:	60bb      	str	r3, [r7, #8]
 8002830:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002832:	2301      	movs	r3, #1
 8002834:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002838:	4b13      	ldr	r3, [pc, #76]	; (8002888 <HAL_RCC_OscConfig+0x2bc>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a12      	ldr	r2, [pc, #72]	; (8002888 <HAL_RCC_OscConfig+0x2bc>)
 800283e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002842:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002844:	4b10      	ldr	r3, [pc, #64]	; (8002888 <HAL_RCC_OscConfig+0x2bc>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800284c:	2b00      	cmp	r3, #0
 800284e:	d123      	bne.n	8002898 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002850:	4b0d      	ldr	r3, [pc, #52]	; (8002888 <HAL_RCC_OscConfig+0x2bc>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a0c      	ldr	r2, [pc, #48]	; (8002888 <HAL_RCC_OscConfig+0x2bc>)
 8002856:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800285a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800285c:	f7fe fa2e 	bl	8000cbc <HAL_GetTick>
 8002860:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002862:	e013      	b.n	800288c <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002864:	f7fe fa2a 	bl	8000cbc <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	6a3b      	ldr	r3, [r7, #32]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b02      	cmp	r3, #2
 8002870:	d90c      	bls.n	800288c <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e0eb      	b.n	8002a4e <HAL_RCC_OscConfig+0x482>
 8002876:	bf00      	nop
 8002878:	40023800 	.word	0x40023800
 800287c:	40023802 	.word	0x40023802
 8002880:	42470000 	.word	0x42470000
 8002884:	42470e80 	.word	0x42470e80
 8002888:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800288c:	4b72      	ldr	r3, [pc, #456]	; (8002a58 <HAL_RCC_OscConfig+0x48c>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002894:	2b00      	cmp	r3, #0
 8002896:	d0e5      	beq.n	8002864 <HAL_RCC_OscConfig+0x298>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689a      	ldr	r2, [r3, #8]
 800289c:	4b6f      	ldr	r3, [pc, #444]	; (8002a5c <HAL_RCC_OscConfig+0x490>)
 800289e:	b2d2      	uxtb	r2, r2
 80028a0:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d015      	beq.n	80028d6 <HAL_RCC_OscConfig+0x30a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028aa:	f7fe fa07 	bl	8000cbc <HAL_GetTick>
 80028ae:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028b0:	e00a      	b.n	80028c8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028b2:	f7fe fa03 	bl	8000cbc <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	6a3b      	ldr	r3, [r7, #32]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d901      	bls.n	80028c8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e0c2      	b.n	8002a4e <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028c8:	4b65      	ldr	r3, [pc, #404]	; (8002a60 <HAL_RCC_OscConfig+0x494>)
 80028ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028cc:	f003 0302 	and.w	r3, r3, #2
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d0ee      	beq.n	80028b2 <HAL_RCC_OscConfig+0x2e6>
 80028d4:	e014      	b.n	8002900 <HAL_RCC_OscConfig+0x334>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028d6:	f7fe f9f1 	bl	8000cbc <HAL_GetTick>
 80028da:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028dc:	e00a      	b.n	80028f4 <HAL_RCC_OscConfig+0x328>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028de:	f7fe f9ed 	bl	8000cbc <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	6a3b      	ldr	r3, [r7, #32]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d901      	bls.n	80028f4 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	e0ac      	b.n	8002a4e <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028f4:	4b5a      	ldr	r3, [pc, #360]	; (8002a60 <HAL_RCC_OscConfig+0x494>)
 80028f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d1ee      	bne.n	80028de <HAL_RCC_OscConfig+0x312>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002900:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002904:	2b01      	cmp	r3, #1
 8002906:	d105      	bne.n	8002914 <HAL_RCC_OscConfig+0x348>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002908:	4b55      	ldr	r3, [pc, #340]	; (8002a60 <HAL_RCC_OscConfig+0x494>)
 800290a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290c:	4a54      	ldr	r2, [pc, #336]	; (8002a60 <HAL_RCC_OscConfig+0x494>)
 800290e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002912:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	2b00      	cmp	r3, #0
 800291a:	f000 8097 	beq.w	8002a4c <HAL_RCC_OscConfig+0x480>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800291e:	4b50      	ldr	r3, [pc, #320]	; (8002a60 <HAL_RCC_OscConfig+0x494>)
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f003 030c 	and.w	r3, r3, #12
 8002926:	2b08      	cmp	r3, #8
 8002928:	d061      	beq.n	80029ee <HAL_RCC_OscConfig+0x422>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	2b02      	cmp	r3, #2
 8002930:	d146      	bne.n	80029c0 <HAL_RCC_OscConfig+0x3f4>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002932:	4b4c      	ldr	r3, [pc, #304]	; (8002a64 <HAL_RCC_OscConfig+0x498>)
 8002934:	2200      	movs	r2, #0
 8002936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002938:	f7fe f9c0 	bl	8000cbc <HAL_GetTick>
 800293c:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800293e:	e008      	b.n	8002952 <HAL_RCC_OscConfig+0x386>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002940:	f7fe f9bc 	bl	8000cbc <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	6a3b      	ldr	r3, [r7, #32]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b64      	cmp	r3, #100	; 0x64
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x386>
          {
            return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e07d      	b.n	8002a4e <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002952:	4b43      	ldr	r3, [pc, #268]	; (8002a60 <HAL_RCC_OscConfig+0x494>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d1f0      	bne.n	8002940 <HAL_RCC_OscConfig+0x374>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800295e:	4b40      	ldr	r3, [pc, #256]	; (8002a60 <HAL_RCC_OscConfig+0x494>)
 8002960:	685a      	ldr	r2, [r3, #4]
 8002962:	4b41      	ldr	r3, [pc, #260]	; (8002a68 <HAL_RCC_OscConfig+0x49c>)
 8002964:	4013      	ands	r3, r2
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	69d1      	ldr	r1, [r2, #28]
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	6a12      	ldr	r2, [r2, #32]
 800296e:	4311      	orrs	r1, r2
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002974:	0192      	lsls	r2, r2, #6
 8002976:	4311      	orrs	r1, r2
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800297c:	0612      	lsls	r2, r2, #24
 800297e:	4311      	orrs	r1, r2
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002984:	0852      	lsrs	r2, r2, #1
 8002986:	3a01      	subs	r2, #1
 8002988:	0412      	lsls	r2, r2, #16
 800298a:	430a      	orrs	r2, r1
 800298c:	4934      	ldr	r1, [pc, #208]	; (8002a60 <HAL_RCC_OscConfig+0x494>)
 800298e:	4313      	orrs	r3, r2
 8002990:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002992:	4b34      	ldr	r3, [pc, #208]	; (8002a64 <HAL_RCC_OscConfig+0x498>)
 8002994:	2201      	movs	r2, #1
 8002996:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002998:	f7fe f990 	bl	8000cbc <HAL_GetTick>
 800299c:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800299e:	e008      	b.n	80029b2 <HAL_RCC_OscConfig+0x3e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029a0:	f7fe f98c 	bl	8000cbc <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	6a3b      	ldr	r3, [r7, #32]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b64      	cmp	r3, #100	; 0x64
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0x3e6>
          {
            return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e04d      	b.n	8002a4e <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029b2:	4b2b      	ldr	r3, [pc, #172]	; (8002a60 <HAL_RCC_OscConfig+0x494>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d0f0      	beq.n	80029a0 <HAL_RCC_OscConfig+0x3d4>
 80029be:	e045      	b.n	8002a4c <HAL_RCC_OscConfig+0x480>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029c0:	4b28      	ldr	r3, [pc, #160]	; (8002a64 <HAL_RCC_OscConfig+0x498>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c6:	f7fe f979 	bl	8000cbc <HAL_GetTick>
 80029ca:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029cc:	e008      	b.n	80029e0 <HAL_RCC_OscConfig+0x414>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029ce:	f7fe f975 	bl	8000cbc <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	6a3b      	ldr	r3, [r7, #32]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	2b64      	cmp	r3, #100	; 0x64
 80029da:	d901      	bls.n	80029e0 <HAL_RCC_OscConfig+0x414>
          {
            return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e036      	b.n	8002a4e <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029e0:	4b1f      	ldr	r3, [pc, #124]	; (8002a60 <HAL_RCC_OscConfig+0x494>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d1f0      	bne.n	80029ce <HAL_RCC_OscConfig+0x402>
 80029ec:	e02e      	b.n	8002a4c <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	699b      	ldr	r3, [r3, #24]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d101      	bne.n	80029fa <HAL_RCC_OscConfig+0x42e>
      {
        return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e029      	b.n	8002a4e <HAL_RCC_OscConfig+0x482>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 80029fa:	4b19      	ldr	r3, [pc, #100]	; (8002a60 <HAL_RCC_OscConfig+0x494>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	69db      	ldr	r3, [r3, #28]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d11c      	bne.n	8002a48 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d115      	bne.n	8002a48 <HAL_RCC_OscConfig+0x47c>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	099b      	lsrs	r3, r3, #6
 8002a20:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d10d      	bne.n	8002a48 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d106      	bne.n	8002a48 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d001      	beq.n	8002a4c <HAL_RCC_OscConfig+0x480>
        {
          return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e000      	b.n	8002a4e <HAL_RCC_OscConfig+0x482>
        }
      }
    }
  }
  return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3728      	adds	r7, #40	; 0x28
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	40007000 	.word	0x40007000
 8002a5c:	40023870 	.word	0x40023870
 8002a60:	40023800 	.word	0x40023800
 8002a64:	42470060 	.word	0x42470060
 8002a68:	f0bc8000 	.word	0xf0bc8000

08002a6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b086      	sub	sp, #24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d101      	bne.n	8002a80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e0d2      	b.n	8002c26 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a80:	4b6b      	ldr	r3, [pc, #428]	; (8002c30 <HAL_RCC_ClockConfig+0x1c4>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 030f 	and.w	r3, r3, #15
 8002a88:	683a      	ldr	r2, [r7, #0]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d90c      	bls.n	8002aa8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a8e:	4b68      	ldr	r3, [pc, #416]	; (8002c30 <HAL_RCC_ClockConfig+0x1c4>)
 8002a90:	683a      	ldr	r2, [r7, #0]
 8002a92:	b2d2      	uxtb	r2, r2
 8002a94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a96:	4b66      	ldr	r3, [pc, #408]	; (8002c30 <HAL_RCC_ClockConfig+0x1c4>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 030f 	and.w	r3, r3, #15
 8002a9e:	683a      	ldr	r2, [r7, #0]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d001      	beq.n	8002aa8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e0be      	b.n	8002c26 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0302 	and.w	r3, r3, #2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d020      	beq.n	8002af6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0304 	and.w	r3, r3, #4
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d005      	beq.n	8002acc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ac0:	4b5c      	ldr	r3, [pc, #368]	; (8002c34 <HAL_RCC_ClockConfig+0x1c8>)
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	4a5b      	ldr	r2, [pc, #364]	; (8002c34 <HAL_RCC_ClockConfig+0x1c8>)
 8002ac6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002aca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0308 	and.w	r3, r3, #8
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d005      	beq.n	8002ae4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8002ad8:	4b56      	ldr	r3, [pc, #344]	; (8002c34 <HAL_RCC_ClockConfig+0x1c8>)
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	4a55      	ldr	r2, [pc, #340]	; (8002c34 <HAL_RCC_ClockConfig+0x1c8>)
 8002ade:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ae2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ae4:	4b53      	ldr	r3, [pc, #332]	; (8002c34 <HAL_RCC_ClockConfig+0x1c8>)
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	4950      	ldr	r1, [pc, #320]	; (8002c34 <HAL_RCC_ClockConfig+0x1c8>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d040      	beq.n	8002b84 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d107      	bne.n	8002b1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b0a:	4b4a      	ldr	r3, [pc, #296]	; (8002c34 <HAL_RCC_ClockConfig+0x1c8>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d115      	bne.n	8002b42 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e085      	b.n	8002c26 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d107      	bne.n	8002b32 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b22:	4b44      	ldr	r3, [pc, #272]	; (8002c34 <HAL_RCC_ClockConfig+0x1c8>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d109      	bne.n	8002b42 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e079      	b.n	8002c26 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b32:	4b40      	ldr	r3, [pc, #256]	; (8002c34 <HAL_RCC_ClockConfig+0x1c8>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d101      	bne.n	8002b42 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e071      	b.n	8002c26 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b42:	4b3c      	ldr	r3, [pc, #240]	; (8002c34 <HAL_RCC_ClockConfig+0x1c8>)
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f023 0203 	bic.w	r2, r3, #3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	4939      	ldr	r1, [pc, #228]	; (8002c34 <HAL_RCC_ClockConfig+0x1c8>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b54:	f7fe f8b2 	bl	8000cbc <HAL_GetTick>
 8002b58:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b5a:	e00a      	b.n	8002b72 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b5c:	f7fe f8ae 	bl	8000cbc <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e059      	b.n	8002c26 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b72:	4b30      	ldr	r3, [pc, #192]	; (8002c34 <HAL_RCC_ClockConfig+0x1c8>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f003 020c 	and.w	r2, r3, #12
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d1eb      	bne.n	8002b5c <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b84:	4b2a      	ldr	r3, [pc, #168]	; (8002c30 <HAL_RCC_ClockConfig+0x1c4>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 030f 	and.w	r3, r3, #15
 8002b8c:	683a      	ldr	r2, [r7, #0]
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d20c      	bcs.n	8002bac <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b92:	4b27      	ldr	r3, [pc, #156]	; (8002c30 <HAL_RCC_ClockConfig+0x1c4>)
 8002b94:	683a      	ldr	r2, [r7, #0]
 8002b96:	b2d2      	uxtb	r2, r2
 8002b98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b9a:	4b25      	ldr	r3, [pc, #148]	; (8002c30 <HAL_RCC_ClockConfig+0x1c4>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 030f 	and.w	r3, r3, #15
 8002ba2:	683a      	ldr	r2, [r7, #0]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d001      	beq.n	8002bac <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e03c      	b.n	8002c26 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0304 	and.w	r3, r3, #4
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d008      	beq.n	8002bca <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bb8:	4b1e      	ldr	r3, [pc, #120]	; (8002c34 <HAL_RCC_ClockConfig+0x1c8>)
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	491b      	ldr	r1, [pc, #108]	; (8002c34 <HAL_RCC_ClockConfig+0x1c8>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0308 	and.w	r3, r3, #8
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d009      	beq.n	8002bea <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bd6:	4b17      	ldr	r3, [pc, #92]	; (8002c34 <HAL_RCC_ClockConfig+0x1c8>)
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	691b      	ldr	r3, [r3, #16]
 8002be2:	00db      	lsls	r3, r3, #3
 8002be4:	4913      	ldr	r1, [pc, #76]	; (8002c34 <HAL_RCC_ClockConfig+0x1c8>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8002bea:	f000 f82b 	bl	8002c44 <HAL_RCC_GetSysClockFreq>
 8002bee:	4601      	mov	r1, r0
 8002bf0:	4b10      	ldr	r3, [pc, #64]	; (8002c34 <HAL_RCC_ClockConfig+0x1c8>)
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bf8:	22f0      	movs	r2, #240	; 0xf0
 8002bfa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bfc:	693a      	ldr	r2, [r7, #16]
 8002bfe:	fa92 f2a2 	rbit	r2, r2
 8002c02:	60fa      	str	r2, [r7, #12]
  return result;
 8002c04:	68fa      	ldr	r2, [r7, #12]
 8002c06:	fab2 f282 	clz	r2, r2
 8002c0a:	b2d2      	uxtb	r2, r2
 8002c0c:	40d3      	lsrs	r3, r2
 8002c0e:	4a0a      	ldr	r2, [pc, #40]	; (8002c38 <HAL_RCC_ClockConfig+0x1cc>)
 8002c10:	5cd3      	ldrb	r3, [r2, r3]
 8002c12:	fa21 f303 	lsr.w	r3, r1, r3
 8002c16:	4a09      	ldr	r2, [pc, #36]	; (8002c3c <HAL_RCC_ClockConfig+0x1d0>)
 8002c18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c1a:	4b09      	ldr	r3, [pc, #36]	; (8002c40 <HAL_RCC_ClockConfig+0x1d4>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7fe f80a 	bl	8000c38 <HAL_InitTick>

  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3718      	adds	r7, #24
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	40023c00 	.word	0x40023c00
 8002c34:	40023800 	.word	0x40023800
 8002c38:	080077f4 	.word	0x080077f4
 8002c3c:	20000000 	.word	0x20000000
 8002c40:	20000004 	.word	0x20000004

08002c44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c46:	b085      	sub	sp, #20
 8002c48:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	607b      	str	r3, [r7, #4]
 8002c4e:	2300      	movs	r3, #0
 8002c50:	60fb      	str	r3, [r7, #12]
 8002c52:	2300      	movs	r3, #0
 8002c54:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002c56:	2300      	movs	r3, #0
 8002c58:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c5a:	4b63      	ldr	r3, [pc, #396]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f003 030c 	and.w	r3, r3, #12
 8002c62:	2b04      	cmp	r3, #4
 8002c64:	d007      	beq.n	8002c76 <HAL_RCC_GetSysClockFreq+0x32>
 8002c66:	2b08      	cmp	r3, #8
 8002c68:	d008      	beq.n	8002c7c <HAL_RCC_GetSysClockFreq+0x38>
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	f040 80b4 	bne.w	8002dd8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c70:	4b5e      	ldr	r3, [pc, #376]	; (8002dec <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002c72:	60bb      	str	r3, [r7, #8]
       break;
 8002c74:	e0b3      	b.n	8002dde <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c76:	4b5e      	ldr	r3, [pc, #376]	; (8002df0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002c78:	60bb      	str	r3, [r7, #8]
      break;
 8002c7a:	e0b0      	b.n	8002dde <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c7c:	4b5a      	ldr	r3, [pc, #360]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c84:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c86:	4b58      	ldr	r3, [pc, #352]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d04a      	beq.n	8002d28 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c92:	4b55      	ldr	r3, [pc, #340]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	099b      	lsrs	r3, r3, #6
 8002c98:	f04f 0400 	mov.w	r4, #0
 8002c9c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002ca0:	f04f 0200 	mov.w	r2, #0
 8002ca4:	ea03 0501 	and.w	r5, r3, r1
 8002ca8:	ea04 0602 	and.w	r6, r4, r2
 8002cac:	4629      	mov	r1, r5
 8002cae:	4632      	mov	r2, r6
 8002cb0:	f04f 0300 	mov.w	r3, #0
 8002cb4:	f04f 0400 	mov.w	r4, #0
 8002cb8:	0154      	lsls	r4, r2, #5
 8002cba:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002cbe:	014b      	lsls	r3, r1, #5
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	4622      	mov	r2, r4
 8002cc4:	1b49      	subs	r1, r1, r5
 8002cc6:	eb62 0206 	sbc.w	r2, r2, r6
 8002cca:	f04f 0300 	mov.w	r3, #0
 8002cce:	f04f 0400 	mov.w	r4, #0
 8002cd2:	0194      	lsls	r4, r2, #6
 8002cd4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002cd8:	018b      	lsls	r3, r1, #6
 8002cda:	1a5b      	subs	r3, r3, r1
 8002cdc:	eb64 0402 	sbc.w	r4, r4, r2
 8002ce0:	f04f 0100 	mov.w	r1, #0
 8002ce4:	f04f 0200 	mov.w	r2, #0
 8002ce8:	00e2      	lsls	r2, r4, #3
 8002cea:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002cee:	00d9      	lsls	r1, r3, #3
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	4614      	mov	r4, r2
 8002cf4:	195b      	adds	r3, r3, r5
 8002cf6:	eb44 0406 	adc.w	r4, r4, r6
 8002cfa:	f04f 0100 	mov.w	r1, #0
 8002cfe:	f04f 0200 	mov.w	r2, #0
 8002d02:	0262      	lsls	r2, r4, #9
 8002d04:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002d08:	0259      	lsls	r1, r3, #9
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	4614      	mov	r4, r2
 8002d0e:	4618      	mov	r0, r3
 8002d10:	4621      	mov	r1, r4
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f04f 0400 	mov.w	r4, #0
 8002d18:	461a      	mov	r2, r3
 8002d1a:	4623      	mov	r3, r4
 8002d1c:	f7fd fa52 	bl	80001c4 <__aeabi_uldivmod>
 8002d20:	4603      	mov	r3, r0
 8002d22:	460c      	mov	r4, r1
 8002d24:	60fb      	str	r3, [r7, #12]
 8002d26:	e049      	b.n	8002dbc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d28:	4b2f      	ldr	r3, [pc, #188]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	099b      	lsrs	r3, r3, #6
 8002d2e:	f04f 0400 	mov.w	r4, #0
 8002d32:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002d36:	f04f 0200 	mov.w	r2, #0
 8002d3a:	ea03 0501 	and.w	r5, r3, r1
 8002d3e:	ea04 0602 	and.w	r6, r4, r2
 8002d42:	4629      	mov	r1, r5
 8002d44:	4632      	mov	r2, r6
 8002d46:	f04f 0300 	mov.w	r3, #0
 8002d4a:	f04f 0400 	mov.w	r4, #0
 8002d4e:	0154      	lsls	r4, r2, #5
 8002d50:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002d54:	014b      	lsls	r3, r1, #5
 8002d56:	4619      	mov	r1, r3
 8002d58:	4622      	mov	r2, r4
 8002d5a:	1b49      	subs	r1, r1, r5
 8002d5c:	eb62 0206 	sbc.w	r2, r2, r6
 8002d60:	f04f 0300 	mov.w	r3, #0
 8002d64:	f04f 0400 	mov.w	r4, #0
 8002d68:	0194      	lsls	r4, r2, #6
 8002d6a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002d6e:	018b      	lsls	r3, r1, #6
 8002d70:	1a5b      	subs	r3, r3, r1
 8002d72:	eb64 0402 	sbc.w	r4, r4, r2
 8002d76:	f04f 0100 	mov.w	r1, #0
 8002d7a:	f04f 0200 	mov.w	r2, #0
 8002d7e:	00e2      	lsls	r2, r4, #3
 8002d80:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002d84:	00d9      	lsls	r1, r3, #3
 8002d86:	460b      	mov	r3, r1
 8002d88:	4614      	mov	r4, r2
 8002d8a:	195b      	adds	r3, r3, r5
 8002d8c:	eb44 0406 	adc.w	r4, r4, r6
 8002d90:	f04f 0100 	mov.w	r1, #0
 8002d94:	f04f 0200 	mov.w	r2, #0
 8002d98:	02a2      	lsls	r2, r4, #10
 8002d9a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002d9e:	0299      	lsls	r1, r3, #10
 8002da0:	460b      	mov	r3, r1
 8002da2:	4614      	mov	r4, r2
 8002da4:	4618      	mov	r0, r3
 8002da6:	4621      	mov	r1, r4
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f04f 0400 	mov.w	r4, #0
 8002dae:	461a      	mov	r2, r3
 8002db0:	4623      	mov	r3, r4
 8002db2:	f7fd fa07 	bl	80001c4 <__aeabi_uldivmod>
 8002db6:	4603      	mov	r3, r0
 8002db8:	460c      	mov	r4, r1
 8002dba:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002dbc:	4b0a      	ldr	r3, [pc, #40]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	0c1b      	lsrs	r3, r3, #16
 8002dc2:	f003 0303 	and.w	r3, r3, #3
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002dcc:	68fa      	ldr	r2, [r7, #12]
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dd4:	60bb      	str	r3, [r7, #8]
      break;
 8002dd6:	e002      	b.n	8002dde <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002dd8:	4b04      	ldr	r3, [pc, #16]	; (8002dec <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002dda:	60bb      	str	r3, [r7, #8]
      break;
 8002ddc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dde:	68bb      	ldr	r3, [r7, #8]
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3714      	adds	r7, #20
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002de8:	40023800 	.word	0x40023800
 8002dec:	00f42400 	.word	0x00f42400
 8002df0:	007a1200 	.word	0x007a1200

08002df4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002df8:	4b02      	ldr	r3, [pc, #8]	; (8002e04 <HAL_RCC_GetHCLKFreq+0x10>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bc80      	pop	{r7}
 8002e02:	4770      	bx	lr
 8002e04:	20000000 	.word	0x20000000

08002e08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8002e0e:	f7ff fff1 	bl	8002df4 <HAL_RCC_GetHCLKFreq>
 8002e12:	4601      	mov	r1, r0
 8002e14:	4b0b      	ldr	r3, [pc, #44]	; (8002e44 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8002e1c:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8002e20:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	fa92 f2a2 	rbit	r2, r2
 8002e28:	603a      	str	r2, [r7, #0]
  return result;
 8002e2a:	683a      	ldr	r2, [r7, #0]
 8002e2c:	fab2 f282 	clz	r2, r2
 8002e30:	b2d2      	uxtb	r2, r2
 8002e32:	40d3      	lsrs	r3, r2
 8002e34:	4a04      	ldr	r2, [pc, #16]	; (8002e48 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002e36:	5cd3      	ldrb	r3, [r2, r3]
 8002e38:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3708      	adds	r7, #8
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	40023800 	.word	0x40023800
 8002e48:	08007804 	.word	0x08007804

08002e4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8002e52:	f7ff ffcf 	bl	8002df4 <HAL_RCC_GetHCLKFreq>
 8002e56:	4601      	mov	r1, r0
 8002e58:	4b0b      	ldr	r3, [pc, #44]	; (8002e88 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002e60:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8002e64:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	fa92 f2a2 	rbit	r2, r2
 8002e6c:	603a      	str	r2, [r7, #0]
  return result;
 8002e6e:	683a      	ldr	r2, [r7, #0]
 8002e70:	fab2 f282 	clz	r2, r2
 8002e74:	b2d2      	uxtb	r2, r2
 8002e76:	40d3      	lsrs	r3, r2
 8002e78:	4a04      	ldr	r2, [pc, #16]	; (8002e8c <HAL_RCC_GetPCLK2Freq+0x40>)
 8002e7a:	5cd3      	ldrb	r3, [r2, r3]
 8002e7c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3708      	adds	r7, #8
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	40023800 	.word	0x40023800
 8002e8c:	08007804 	.word	0x08007804

08002e90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d101      	bne.n	8002ea2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e03f      	b.n	8002f22 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d106      	bne.n	8002ebc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f7fd fd38 	bl	800092c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2224      	movs	r2, #36	; 0x24
 8002ec0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	68da      	ldr	r2, [r3, #12]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ed2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f000 fb83 	bl	80035e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	691a      	ldr	r2, [r3, #16]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ee8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	695a      	ldr	r2, [r3, #20]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ef8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	68da      	ldr	r2, [r3, #12]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2220      	movs	r2, #32
 8002f14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2220      	movs	r2, #32
 8002f1c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3708      	adds	r7, #8
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	b08a      	sub	sp, #40	; 0x28
 8002f2e:	af02      	add	r7, sp, #8
 8002f30:	60f8      	str	r0, [r7, #12]
 8002f32:	60b9      	str	r1, [r7, #8]
 8002f34:	603b      	str	r3, [r7, #0]
 8002f36:	4613      	mov	r3, r2
 8002f38:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b20      	cmp	r3, #32
 8002f48:	d17c      	bne.n	8003044 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d002      	beq.n	8002f56 <HAL_UART_Transmit+0x2c>
 8002f50:	88fb      	ldrh	r3, [r7, #6]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d101      	bne.n	8002f5a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e075      	b.n	8003046 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d101      	bne.n	8002f68 <HAL_UART_Transmit+0x3e>
 8002f64:	2302      	movs	r3, #2
 8002f66:	e06e      	b.n	8003046 <HAL_UART_Transmit+0x11c>
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2200      	movs	r2, #0
 8002f74:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2221      	movs	r2, #33	; 0x21
 8002f7a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002f7e:	f7fd fe9d 	bl	8000cbc <HAL_GetTick>
 8002f82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	88fa      	ldrh	r2, [r7, #6]
 8002f88:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	88fa      	ldrh	r2, [r7, #6]
 8002f8e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f98:	d108      	bne.n	8002fac <HAL_UART_Transmit+0x82>
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	691b      	ldr	r3, [r3, #16]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d104      	bne.n	8002fac <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	61bb      	str	r3, [r7, #24]
 8002faa:	e003      	b.n	8002fb4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002fbc:	e02a      	b.n	8003014 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	9300      	str	r3, [sp, #0]
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	2180      	movs	r1, #128	; 0x80
 8002fc8:	68f8      	ldr	r0, [r7, #12]
 8002fca:	f000 f9a7 	bl	800331c <UART_WaitOnFlagUntilTimeout>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d001      	beq.n	8002fd8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e036      	b.n	8003046 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d10b      	bne.n	8002ff6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	881b      	ldrh	r3, [r3, #0]
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	3302      	adds	r3, #2
 8002ff2:	61bb      	str	r3, [r7, #24]
 8002ff4:	e007      	b.n	8003006 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	781a      	ldrb	r2, [r3, #0]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	3301      	adds	r3, #1
 8003004:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800300a:	b29b      	uxth	r3, r3
 800300c:	3b01      	subs	r3, #1
 800300e:	b29a      	uxth	r2, r3
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003018:	b29b      	uxth	r3, r3
 800301a:	2b00      	cmp	r3, #0
 800301c:	d1cf      	bne.n	8002fbe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	9300      	str	r3, [sp, #0]
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	2200      	movs	r2, #0
 8003026:	2140      	movs	r1, #64	; 0x40
 8003028:	68f8      	ldr	r0, [r7, #12]
 800302a:	f000 f977 	bl	800331c <UART_WaitOnFlagUntilTimeout>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d001      	beq.n	8003038 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e006      	b.n	8003046 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2220      	movs	r2, #32
 800303c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003040:	2300      	movs	r3, #0
 8003042:	e000      	b.n	8003046 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003044:	2302      	movs	r3, #2
  }
}
 8003046:	4618      	mov	r0, r3
 8003048:	3720      	adds	r7, #32
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}

0800304e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800304e:	b480      	push	{r7}
 8003050:	b085      	sub	sp, #20
 8003052:	af00      	add	r7, sp, #0
 8003054:	60f8      	str	r0, [r7, #12]
 8003056:	60b9      	str	r1, [r7, #8]
 8003058:	4613      	mov	r3, r2
 800305a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003062:	b2db      	uxtb	r3, r3
 8003064:	2b20      	cmp	r3, #32
 8003066:	d140      	bne.n	80030ea <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d002      	beq.n	8003074 <HAL_UART_Receive_IT+0x26>
 800306e:	88fb      	ldrh	r3, [r7, #6]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d101      	bne.n	8003078 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e039      	b.n	80030ec <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800307e:	2b01      	cmp	r3, #1
 8003080:	d101      	bne.n	8003086 <HAL_UART_Receive_IT+0x38>
 8003082:	2302      	movs	r3, #2
 8003084:	e032      	b.n	80030ec <HAL_UART_Receive_IT+0x9e>
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2201      	movs	r2, #1
 800308a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	68ba      	ldr	r2, [r7, #8]
 8003092:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	88fa      	ldrh	r2, [r7, #6]
 8003098:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	88fa      	ldrh	r2, [r7, #6]
 800309e:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2200      	movs	r2, #0
 80030a4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2222      	movs	r2, #34	; 0x22
 80030aa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	68da      	ldr	r2, [r3, #12]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030c4:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	695a      	ldr	r2, [r3, #20]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f042 0201 	orr.w	r2, r2, #1
 80030d4:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68da      	ldr	r2, [r3, #12]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f042 0220 	orr.w	r2, r2, #32
 80030e4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80030e6:	2300      	movs	r3, #0
 80030e8:	e000      	b.n	80030ec <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80030ea:	2302      	movs	r3, #2
  }
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3714      	adds	r7, #20
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bc80      	pop	{r7}
 80030f4:	4770      	bx	lr
	...

080030f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b088      	sub	sp, #32
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	695b      	ldr	r3, [r3, #20]
 8003116:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003118:	2300      	movs	r3, #0
 800311a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800311c:	2300      	movs	r3, #0
 800311e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	f003 030f 	and.w	r3, r3, #15
 8003126:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d10d      	bne.n	800314a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	f003 0320 	and.w	r3, r3, #32
 8003134:	2b00      	cmp	r3, #0
 8003136:	d008      	beq.n	800314a <HAL_UART_IRQHandler+0x52>
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	f003 0320 	and.w	r3, r3, #32
 800313e:	2b00      	cmp	r3, #0
 8003140:	d003      	beq.n	800314a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 f9cc 	bl	80034e0 <UART_Receive_IT>
      return;
 8003148:	e0d1      	b.n	80032ee <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	2b00      	cmp	r3, #0
 800314e:	f000 80b0 	beq.w	80032b2 <HAL_UART_IRQHandler+0x1ba>
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	f003 0301 	and.w	r3, r3, #1
 8003158:	2b00      	cmp	r3, #0
 800315a:	d105      	bne.n	8003168 <HAL_UART_IRQHandler+0x70>
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003162:	2b00      	cmp	r3, #0
 8003164:	f000 80a5 	beq.w	80032b2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	2b00      	cmp	r3, #0
 8003170:	d00a      	beq.n	8003188 <HAL_UART_IRQHandler+0x90>
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003178:	2b00      	cmp	r3, #0
 800317a:	d005      	beq.n	8003188 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003180:	f043 0201 	orr.w	r2, r3, #1
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	f003 0304 	and.w	r3, r3, #4
 800318e:	2b00      	cmp	r3, #0
 8003190:	d00a      	beq.n	80031a8 <HAL_UART_IRQHandler+0xb0>
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	f003 0301 	and.w	r3, r3, #1
 8003198:	2b00      	cmp	r3, #0
 800319a:	d005      	beq.n	80031a8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031a0:	f043 0202 	orr.w	r2, r3, #2
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d00a      	beq.n	80031c8 <HAL_UART_IRQHandler+0xd0>
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	f003 0301 	and.w	r3, r3, #1
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d005      	beq.n	80031c8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031c0:	f043 0204 	orr.w	r2, r3, #4
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	f003 0308 	and.w	r3, r3, #8
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00f      	beq.n	80031f2 <HAL_UART_IRQHandler+0xfa>
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	f003 0320 	and.w	r3, r3, #32
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d104      	bne.n	80031e6 <HAL_UART_IRQHandler+0xee>
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d005      	beq.n	80031f2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ea:	f043 0208 	orr.w	r2, r3, #8
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d078      	beq.n	80032ec <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	f003 0320 	and.w	r3, r3, #32
 8003200:	2b00      	cmp	r3, #0
 8003202:	d007      	beq.n	8003214 <HAL_UART_IRQHandler+0x11c>
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	f003 0320 	and.w	r3, r3, #32
 800320a:	2b00      	cmp	r3, #0
 800320c:	d002      	beq.n	8003214 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 f966 	bl	80034e0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800321e:	2b40      	cmp	r3, #64	; 0x40
 8003220:	bf0c      	ite	eq
 8003222:	2301      	moveq	r3, #1
 8003224:	2300      	movne	r3, #0
 8003226:	b2db      	uxtb	r3, r3
 8003228:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800322e:	f003 0308 	and.w	r3, r3, #8
 8003232:	2b00      	cmp	r3, #0
 8003234:	d102      	bne.n	800323c <HAL_UART_IRQHandler+0x144>
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d031      	beq.n	80032a0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f000 f8b7 	bl	80033b0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	695b      	ldr	r3, [r3, #20]
 8003248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800324c:	2b40      	cmp	r3, #64	; 0x40
 800324e:	d123      	bne.n	8003298 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	695a      	ldr	r2, [r3, #20]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800325e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003264:	2b00      	cmp	r3, #0
 8003266:	d013      	beq.n	8003290 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800326c:	4a21      	ldr	r2, [pc, #132]	; (80032f4 <HAL_UART_IRQHandler+0x1fc>)
 800326e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003274:	4618      	mov	r0, r3
 8003276:	f7fd fe5a 	bl	8000f2e <HAL_DMA_Abort_IT>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d016      	beq.n	80032ae <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003284:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800328a:	4610      	mov	r0, r2
 800328c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800328e:	e00e      	b.n	80032ae <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f000 f83a 	bl	800330a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003296:	e00a      	b.n	80032ae <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f000 f836 	bl	800330a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800329e:	e006      	b.n	80032ae <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f000 f832 	bl	800330a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80032ac:	e01e      	b.n	80032ec <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032ae:	bf00      	nop
    return;
 80032b0:	e01c      	b.n	80032ec <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d008      	beq.n	80032ce <HAL_UART_IRQHandler+0x1d6>
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d003      	beq.n	80032ce <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f000 f8a3 	bl	8003412 <UART_Transmit_IT>
    return;
 80032cc:	e00f      	b.n	80032ee <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d00a      	beq.n	80032ee <HAL_UART_IRQHandler+0x1f6>
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d005      	beq.n	80032ee <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 f8e4 	bl	80034b0 <UART_EndTransmit_IT>
    return;
 80032e8:	bf00      	nop
 80032ea:	e000      	b.n	80032ee <HAL_UART_IRQHandler+0x1f6>
    return;
 80032ec:	bf00      	nop
  }
}
 80032ee:	3720      	adds	r7, #32
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	080033eb 	.word	0x080033eb

080032f8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003300:	bf00      	nop
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	bc80      	pop	{r7}
 8003308:	4770      	bx	lr

0800330a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800330a:	b480      	push	{r7}
 800330c:	b083      	sub	sp, #12
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003312:	bf00      	nop
 8003314:	370c      	adds	r7, #12
 8003316:	46bd      	mov	sp, r7
 8003318:	bc80      	pop	{r7}
 800331a:	4770      	bx	lr

0800331c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	603b      	str	r3, [r7, #0]
 8003328:	4613      	mov	r3, r2
 800332a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800332c:	e02c      	b.n	8003388 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003334:	d028      	beq.n	8003388 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d007      	beq.n	800334c <UART_WaitOnFlagUntilTimeout+0x30>
 800333c:	f7fd fcbe 	bl	8000cbc <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	69ba      	ldr	r2, [r7, #24]
 8003348:	429a      	cmp	r2, r3
 800334a:	d21d      	bcs.n	8003388 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68da      	ldr	r2, [r3, #12]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800335a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	695a      	ldr	r2, [r3, #20]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f022 0201 	bic.w	r2, r2, #1
 800336a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2220      	movs	r2, #32
 8003370:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2220      	movs	r2, #32
 8003378:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e00f      	b.n	80033a8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	4013      	ands	r3, r2
 8003392:	68ba      	ldr	r2, [r7, #8]
 8003394:	429a      	cmp	r2, r3
 8003396:	bf0c      	ite	eq
 8003398:	2301      	moveq	r3, #1
 800339a:	2300      	movne	r3, #0
 800339c:	b2db      	uxtb	r3, r3
 800339e:	461a      	mov	r2, r3
 80033a0:	79fb      	ldrb	r3, [r7, #7]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d0c3      	beq.n	800332e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80033a6:	2300      	movs	r3, #0
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3710      	adds	r7, #16
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68da      	ldr	r2, [r3, #12]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80033c6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	695a      	ldr	r2, [r3, #20]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f022 0201 	bic.w	r2, r2, #1
 80033d6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2220      	movs	r2, #32
 80033dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bc80      	pop	{r7}
 80033e8:	4770      	bx	lr

080033ea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80033ea:	b580      	push	{r7, lr}
 80033ec:	b084      	sub	sp, #16
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2200      	movs	r2, #0
 80033fc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2200      	movs	r2, #0
 8003402:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003404:	68f8      	ldr	r0, [r7, #12]
 8003406:	f7ff ff80 	bl	800330a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800340a:	bf00      	nop
 800340c:	3710      	adds	r7, #16
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}

08003412 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003412:	b480      	push	{r7}
 8003414:	b085      	sub	sp, #20
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003420:	b2db      	uxtb	r3, r3
 8003422:	2b21      	cmp	r3, #33	; 0x21
 8003424:	d13e      	bne.n	80034a4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800342e:	d114      	bne.n	800345a <UART_Transmit_IT+0x48>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	691b      	ldr	r3, [r3, #16]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d110      	bne.n	800345a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a1b      	ldr	r3, [r3, #32]
 800343c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	881b      	ldrh	r3, [r3, #0]
 8003442:	461a      	mov	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800344c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a1b      	ldr	r3, [r3, #32]
 8003452:	1c9a      	adds	r2, r3, #2
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	621a      	str	r2, [r3, #32]
 8003458:	e008      	b.n	800346c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a1b      	ldr	r3, [r3, #32]
 800345e:	1c59      	adds	r1, r3, #1
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	6211      	str	r1, [r2, #32]
 8003464:	781a      	ldrb	r2, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003470:	b29b      	uxth	r3, r3
 8003472:	3b01      	subs	r3, #1
 8003474:	b29b      	uxth	r3, r3
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	4619      	mov	r1, r3
 800347a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800347c:	2b00      	cmp	r3, #0
 800347e:	d10f      	bne.n	80034a0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	68da      	ldr	r2, [r3, #12]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800348e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	68da      	ldr	r2, [r3, #12]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800349e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80034a0:	2300      	movs	r3, #0
 80034a2:	e000      	b.n	80034a6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80034a4:	2302      	movs	r3, #2
  }
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3714      	adds	r7, #20
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bc80      	pop	{r7}
 80034ae:	4770      	bx	lr

080034b0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	68da      	ldr	r2, [r3, #12]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034c6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2220      	movs	r2, #32
 80034cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f7ff ff11 	bl	80032f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80034d6:	2300      	movs	r3, #0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3708      	adds	r7, #8
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	2b22      	cmp	r3, #34	; 0x22
 80034f2:	d170      	bne.n	80035d6 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034fc:	d117      	bne.n	800352e <UART_Receive_IT+0x4e>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d113      	bne.n	800352e <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8003506:	2300      	movs	r3, #0
 8003508:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800350e:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	b29b      	uxth	r3, r3
 8003518:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800351c:	b29a      	uxth	r2, r3
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003526:	1c9a      	adds	r2, r3, #2
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	629a      	str	r2, [r3, #40]	; 0x28
 800352c:	e026      	b.n	800357c <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003532:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8003534:	2300      	movs	r3, #0
 8003536:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003540:	d007      	beq.n	8003552 <UART_Receive_IT+0x72>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d10a      	bne.n	8003560 <UART_Receive_IT+0x80>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d106      	bne.n	8003560 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	b2da      	uxtb	r2, r3
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	701a      	strb	r2, [r3, #0]
 800355e:	e008      	b.n	8003572 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	b2db      	uxtb	r3, r3
 8003568:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800356c:	b2da      	uxtb	r2, r3
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003576:	1c5a      	adds	r2, r3, #1
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003580:	b29b      	uxth	r3, r3
 8003582:	3b01      	subs	r3, #1
 8003584:	b29b      	uxth	r3, r3
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	4619      	mov	r1, r3
 800358a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800358c:	2b00      	cmp	r3, #0
 800358e:	d120      	bne.n	80035d2 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68da      	ldr	r2, [r3, #12]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f022 0220 	bic.w	r2, r2, #32
 800359e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	68da      	ldr	r2, [r3, #12]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	695a      	ldr	r2, [r3, #20]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f022 0201 	bic.w	r2, r2, #1
 80035be:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2220      	movs	r2, #32
 80035c4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f7fc ff7d 	bl	80004c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80035ce:	2300      	movs	r3, #0
 80035d0:	e002      	b.n	80035d8 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 80035d2:	2300      	movs	r3, #0
 80035d4:	e000      	b.n	80035d8 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 80035d6:	2302      	movs	r3, #2
  }
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3710      	adds	r7, #16
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	691b      	ldr	r3, [r3, #16]
 80035ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	68da      	ldr	r2, [r3, #12]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	430a      	orrs	r2, r1
 80035fc:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	689a      	ldr	r2, [r3, #8]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	431a      	orrs	r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	695b      	ldr	r3, [r3, #20]
 800360c:	431a      	orrs	r2, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	69db      	ldr	r3, [r3, #28]
 8003612:	4313      	orrs	r3, r2
 8003614:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003620:	f023 030c 	bic.w	r3, r3, #12
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	6812      	ldr	r2, [r2, #0]
 8003628:	68b9      	ldr	r1, [r7, #8]
 800362a:	430b      	orrs	r3, r1
 800362c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	695b      	ldr	r3, [r3, #20]
 8003634:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	699a      	ldr	r2, [r3, #24]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	430a      	orrs	r2, r1
 8003642:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1) || (huart->Instance == USART6))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a57      	ldr	r2, [pc, #348]	; (80037a8 <UART_SetConfig+0x1c8>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d004      	beq.n	8003658 <UART_SetConfig+0x78>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a56      	ldr	r2, [pc, #344]	; (80037ac <UART_SetConfig+0x1cc>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d103      	bne.n	8003660 <UART_SetConfig+0x80>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003658:	f7ff fbf8 	bl	8002e4c <HAL_RCC_GetPCLK2Freq>
 800365c:	60f8      	str	r0, [r7, #12]
 800365e:	e002      	b.n	8003666 <UART_SetConfig+0x86>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003660:	f7ff fbd2 	bl	8002e08 <HAL_RCC_GetPCLK1Freq>
 8003664:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	69db      	ldr	r3, [r3, #28]
 800366a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800366e:	d14c      	bne.n	800370a <UART_SetConfig+0x12a>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003670:	68fa      	ldr	r2, [r7, #12]
 8003672:	4613      	mov	r3, r2
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	4413      	add	r3, r2
 8003678:	009a      	lsls	r2, r3, #2
 800367a:	441a      	add	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	005b      	lsls	r3, r3, #1
 8003682:	fbb2 f3f3 	udiv	r3, r2, r3
 8003686:	4a4a      	ldr	r2, [pc, #296]	; (80037b0 <UART_SetConfig+0x1d0>)
 8003688:	fba2 2303 	umull	r2, r3, r2, r3
 800368c:	095b      	lsrs	r3, r3, #5
 800368e:	0119      	lsls	r1, r3, #4
 8003690:	68fa      	ldr	r2, [r7, #12]
 8003692:	4613      	mov	r3, r2
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	4413      	add	r3, r2
 8003698:	009a      	lsls	r2, r3, #2
 800369a:	441a      	add	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	005b      	lsls	r3, r3, #1
 80036a2:	fbb2 f2f3 	udiv	r2, r2, r3
 80036a6:	4b42      	ldr	r3, [pc, #264]	; (80037b0 <UART_SetConfig+0x1d0>)
 80036a8:	fba3 0302 	umull	r0, r3, r3, r2
 80036ac:	095b      	lsrs	r3, r3, #5
 80036ae:	2064      	movs	r0, #100	; 0x64
 80036b0:	fb00 f303 	mul.w	r3, r0, r3
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	00db      	lsls	r3, r3, #3
 80036b8:	3332      	adds	r3, #50	; 0x32
 80036ba:	4a3d      	ldr	r2, [pc, #244]	; (80037b0 <UART_SetConfig+0x1d0>)
 80036bc:	fba2 2303 	umull	r2, r3, r2, r3
 80036c0:	095b      	lsrs	r3, r3, #5
 80036c2:	005b      	lsls	r3, r3, #1
 80036c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80036c8:	4419      	add	r1, r3
 80036ca:	68fa      	ldr	r2, [r7, #12]
 80036cc:	4613      	mov	r3, r2
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	4413      	add	r3, r2
 80036d2:	009a      	lsls	r2, r3, #2
 80036d4:	441a      	add	r2, r3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	005b      	lsls	r3, r3, #1
 80036dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80036e0:	4b33      	ldr	r3, [pc, #204]	; (80037b0 <UART_SetConfig+0x1d0>)
 80036e2:	fba3 0302 	umull	r0, r3, r3, r2
 80036e6:	095b      	lsrs	r3, r3, #5
 80036e8:	2064      	movs	r0, #100	; 0x64
 80036ea:	fb00 f303 	mul.w	r3, r0, r3
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	00db      	lsls	r3, r3, #3
 80036f2:	3332      	adds	r3, #50	; 0x32
 80036f4:	4a2e      	ldr	r2, [pc, #184]	; (80037b0 <UART_SetConfig+0x1d0>)
 80036f6:	fba2 2303 	umull	r2, r3, r2, r3
 80036fa:	095b      	lsrs	r3, r3, #5
 80036fc:	f003 0207 	and.w	r2, r3, #7
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	440a      	add	r2, r1
 8003706:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003708:	e04a      	b.n	80037a0 <UART_SetConfig+0x1c0>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800370a:	68fa      	ldr	r2, [r7, #12]
 800370c:	4613      	mov	r3, r2
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	4413      	add	r3, r2
 8003712:	009a      	lsls	r2, r3, #2
 8003714:	441a      	add	r2, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003720:	4a23      	ldr	r2, [pc, #140]	; (80037b0 <UART_SetConfig+0x1d0>)
 8003722:	fba2 2303 	umull	r2, r3, r2, r3
 8003726:	095b      	lsrs	r3, r3, #5
 8003728:	0119      	lsls	r1, r3, #4
 800372a:	68fa      	ldr	r2, [r7, #12]
 800372c:	4613      	mov	r3, r2
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	4413      	add	r3, r2
 8003732:	009a      	lsls	r2, r3, #2
 8003734:	441a      	add	r2, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003740:	4b1b      	ldr	r3, [pc, #108]	; (80037b0 <UART_SetConfig+0x1d0>)
 8003742:	fba3 0302 	umull	r0, r3, r3, r2
 8003746:	095b      	lsrs	r3, r3, #5
 8003748:	2064      	movs	r0, #100	; 0x64
 800374a:	fb00 f303 	mul.w	r3, r0, r3
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	011b      	lsls	r3, r3, #4
 8003752:	3332      	adds	r3, #50	; 0x32
 8003754:	4a16      	ldr	r2, [pc, #88]	; (80037b0 <UART_SetConfig+0x1d0>)
 8003756:	fba2 2303 	umull	r2, r3, r2, r3
 800375a:	095b      	lsrs	r3, r3, #5
 800375c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003760:	4419      	add	r1, r3
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	4613      	mov	r3, r2
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	4413      	add	r3, r2
 800376a:	009a      	lsls	r2, r3, #2
 800376c:	441a      	add	r2, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	fbb2 f2f3 	udiv	r2, r2, r3
 8003778:	4b0d      	ldr	r3, [pc, #52]	; (80037b0 <UART_SetConfig+0x1d0>)
 800377a:	fba3 0302 	umull	r0, r3, r3, r2
 800377e:	095b      	lsrs	r3, r3, #5
 8003780:	2064      	movs	r0, #100	; 0x64
 8003782:	fb00 f303 	mul.w	r3, r0, r3
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	011b      	lsls	r3, r3, #4
 800378a:	3332      	adds	r3, #50	; 0x32
 800378c:	4a08      	ldr	r2, [pc, #32]	; (80037b0 <UART_SetConfig+0x1d0>)
 800378e:	fba2 2303 	umull	r2, r3, r2, r3
 8003792:	095b      	lsrs	r3, r3, #5
 8003794:	f003 020f 	and.w	r2, r3, #15
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	440a      	add	r2, r1
 800379e:	609a      	str	r2, [r3, #8]
}
 80037a0:	bf00      	nop
 80037a2:	3710      	adds	r7, #16
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	40011000 	.word	0x40011000
 80037ac:	40011400 	.word	0x40011400
 80037b0:	51eb851f 	.word	0x51eb851f

080037b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80037b4:	b084      	sub	sp, #16
 80037b6:	b580      	push	{r7, lr}
 80037b8:	b084      	sub	sp, #16
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
 80037be:	f107 001c 	add.w	r0, r7, #28
 80037c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80037c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d122      	bne.n	8003812 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80037e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80037f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d105      	bne.n	8003806 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f001 faa0 	bl	8004d4c <USB_CoreReset>
 800380c:	4603      	mov	r3, r0
 800380e:	73fb      	strb	r3, [r7, #15]
 8003810:	e010      	b.n	8003834 <USB_CoreInit+0x80>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f001 fa94 	bl	8004d4c <USB_CoreReset>
 8003824:	4603      	mov	r3, r0
 8003826:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800382c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8003834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003836:	2b01      	cmp	r3, #1
 8003838:	d10b      	bne.n	8003852 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f043 0206 	orr.w	r2, r3, #6
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	f043 0220 	orr.w	r2, r3, #32
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003852:	7bfb      	ldrb	r3, [r7, #15]
}
 8003854:	4618      	mov	r0, r3
 8003856:	3710      	adds	r7, #16
 8003858:	46bd      	mov	sp, r7
 800385a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800385e:	b004      	add	sp, #16
 8003860:	4770      	bx	lr
	...

08003864 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003864:	b480      	push	{r7}
 8003866:	b087      	sub	sp, #28
 8003868:	af00      	add	r7, sp, #0
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	4613      	mov	r3, r2
 8003870:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003872:	79fb      	ldrb	r3, [r7, #7]
 8003874:	2b02      	cmp	r3, #2
 8003876:	d165      	bne.n	8003944 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	4a41      	ldr	r2, [pc, #260]	; (8003980 <USB_SetTurnaroundTime+0x11c>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d906      	bls.n	800388e <USB_SetTurnaroundTime+0x2a>
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	4a40      	ldr	r2, [pc, #256]	; (8003984 <USB_SetTurnaroundTime+0x120>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d802      	bhi.n	800388e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003888:	230f      	movs	r3, #15
 800388a:	617b      	str	r3, [r7, #20]
 800388c:	e062      	b.n	8003954 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	4a3c      	ldr	r2, [pc, #240]	; (8003984 <USB_SetTurnaroundTime+0x120>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d906      	bls.n	80038a4 <USB_SetTurnaroundTime+0x40>
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	4a3b      	ldr	r2, [pc, #236]	; (8003988 <USB_SetTurnaroundTime+0x124>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d802      	bhi.n	80038a4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800389e:	230e      	movs	r3, #14
 80038a0:	617b      	str	r3, [r7, #20]
 80038a2:	e057      	b.n	8003954 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	4a38      	ldr	r2, [pc, #224]	; (8003988 <USB_SetTurnaroundTime+0x124>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d906      	bls.n	80038ba <USB_SetTurnaroundTime+0x56>
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	4a37      	ldr	r2, [pc, #220]	; (800398c <USB_SetTurnaroundTime+0x128>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d802      	bhi.n	80038ba <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80038b4:	230d      	movs	r3, #13
 80038b6:	617b      	str	r3, [r7, #20]
 80038b8:	e04c      	b.n	8003954 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	4a33      	ldr	r2, [pc, #204]	; (800398c <USB_SetTurnaroundTime+0x128>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d906      	bls.n	80038d0 <USB_SetTurnaroundTime+0x6c>
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	4a32      	ldr	r2, [pc, #200]	; (8003990 <USB_SetTurnaroundTime+0x12c>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d802      	bhi.n	80038d0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80038ca:	230c      	movs	r3, #12
 80038cc:	617b      	str	r3, [r7, #20]
 80038ce:	e041      	b.n	8003954 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	4a2f      	ldr	r2, [pc, #188]	; (8003990 <USB_SetTurnaroundTime+0x12c>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d906      	bls.n	80038e6 <USB_SetTurnaroundTime+0x82>
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	4a2e      	ldr	r2, [pc, #184]	; (8003994 <USB_SetTurnaroundTime+0x130>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d802      	bhi.n	80038e6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80038e0:	230b      	movs	r3, #11
 80038e2:	617b      	str	r3, [r7, #20]
 80038e4:	e036      	b.n	8003954 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	4a2a      	ldr	r2, [pc, #168]	; (8003994 <USB_SetTurnaroundTime+0x130>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d906      	bls.n	80038fc <USB_SetTurnaroundTime+0x98>
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	4a29      	ldr	r2, [pc, #164]	; (8003998 <USB_SetTurnaroundTime+0x134>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d802      	bhi.n	80038fc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80038f6:	230a      	movs	r3, #10
 80038f8:	617b      	str	r3, [r7, #20]
 80038fa:	e02b      	b.n	8003954 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	4a26      	ldr	r2, [pc, #152]	; (8003998 <USB_SetTurnaroundTime+0x134>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d906      	bls.n	8003912 <USB_SetTurnaroundTime+0xae>
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	4a25      	ldr	r2, [pc, #148]	; (800399c <USB_SetTurnaroundTime+0x138>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d802      	bhi.n	8003912 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800390c:	2309      	movs	r3, #9
 800390e:	617b      	str	r3, [r7, #20]
 8003910:	e020      	b.n	8003954 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	4a21      	ldr	r2, [pc, #132]	; (800399c <USB_SetTurnaroundTime+0x138>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d906      	bls.n	8003928 <USB_SetTurnaroundTime+0xc4>
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	4a20      	ldr	r2, [pc, #128]	; (80039a0 <USB_SetTurnaroundTime+0x13c>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d802      	bhi.n	8003928 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003922:	2308      	movs	r3, #8
 8003924:	617b      	str	r3, [r7, #20]
 8003926:	e015      	b.n	8003954 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	4a1d      	ldr	r2, [pc, #116]	; (80039a0 <USB_SetTurnaroundTime+0x13c>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d906      	bls.n	800393e <USB_SetTurnaroundTime+0xda>
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	4a1c      	ldr	r2, [pc, #112]	; (80039a4 <USB_SetTurnaroundTime+0x140>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d802      	bhi.n	800393e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003938:	2307      	movs	r3, #7
 800393a:	617b      	str	r3, [r7, #20]
 800393c:	e00a      	b.n	8003954 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800393e:	2306      	movs	r3, #6
 8003940:	617b      	str	r3, [r7, #20]
 8003942:	e007      	b.n	8003954 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003944:	79fb      	ldrb	r3, [r7, #7]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d102      	bne.n	8003950 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800394a:	2309      	movs	r3, #9
 800394c:	617b      	str	r3, [r7, #20]
 800394e:	e001      	b.n	8003954 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003950:	2309      	movs	r3, #9
 8003952:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	68da      	ldr	r2, [r3, #12]
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	029b      	lsls	r3, r3, #10
 8003968:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800396c:	431a      	orrs	r2, r3
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003972:	2300      	movs	r3, #0
}
 8003974:	4618      	mov	r0, r3
 8003976:	371c      	adds	r7, #28
 8003978:	46bd      	mov	sp, r7
 800397a:	bc80      	pop	{r7}
 800397c:	4770      	bx	lr
 800397e:	bf00      	nop
 8003980:	00d8acbf 	.word	0x00d8acbf
 8003984:	00e4e1bf 	.word	0x00e4e1bf
 8003988:	00f423ff 	.word	0x00f423ff
 800398c:	0106737f 	.word	0x0106737f
 8003990:	011a499f 	.word	0x011a499f
 8003994:	01312cff 	.word	0x01312cff
 8003998:	014ca43f 	.word	0x014ca43f
 800399c:	016e35ff 	.word	0x016e35ff
 80039a0:	01a6ab1f 	.word	0x01a6ab1f
 80039a4:	01e847ff 	.word	0x01e847ff

080039a8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f043 0201 	orr.w	r2, r3, #1
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	370c      	adds	r7, #12
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bc80      	pop	{r7}
 80039c6:	4770      	bx	lr

080039c8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f023 0201 	bic.w	r2, r3, #1
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	370c      	adds	r7, #12
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bc80      	pop	{r7}
 80039e6:	4770      	bx	lr

080039e8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	460b      	mov	r3, r1
 80039f2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003a00:	78fb      	ldrb	r3, [r7, #3]
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d106      	bne.n	8003a14 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	60da      	str	r2, [r3, #12]
 8003a12:	e00b      	b.n	8003a2c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8003a14:	78fb      	ldrb	r3, [r7, #3]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d106      	bne.n	8003a28 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	60da      	str	r2, [r3, #12]
 8003a26:	e001      	b.n	8003a2c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e003      	b.n	8003a34 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8003a2c:	2032      	movs	r0, #50	; 0x32
 8003a2e:	f7fd f94f 	bl	8000cd0 <HAL_Delay>

  return HAL_OK;
 8003a32:	2300      	movs	r3, #0
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3708      	adds	r7, #8
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003a3c:	b084      	sub	sp, #16
 8003a3e:	b580      	push	{r7, lr}
 8003a40:	b086      	sub	sp, #24
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
 8003a46:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003a4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003a56:	2300      	movs	r3, #0
 8003a58:	613b      	str	r3, [r7, #16]
 8003a5a:	e009      	b.n	8003a70 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	3340      	adds	r3, #64	; 0x40
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	4413      	add	r3, r2
 8003a66:	2200      	movs	r2, #0
 8003a68:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	613b      	str	r3, [r7, #16]
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	2b0e      	cmp	r3, #14
 8003a74:	d9f2      	bls.n	8003a5c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003a76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d11c      	bne.n	8003ab6 <USB_DevInit+0x7a>
  {
    /*
     * disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	68fa      	ldr	r2, [r7, #12]
 8003a86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a8a:	f043 0302 	orr.w	r3, r3, #2
 8003a8e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a94:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aac:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	639a      	str	r2, [r3, #56]	; 0x38
 8003ab4:	e00b      	b.n	8003ace <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aba:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ae8:	461a      	mov	r2, r3
 8003aea:	680b      	ldr	r3, [r1, #0]
 8003aec:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d10c      	bne.n	8003b0e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d104      	bne.n	8003b04 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003afa:	2100      	movs	r1, #0
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f000 f945 	bl	8003d8c <USB_SetDevSpeed>
 8003b02:	e008      	b.n	8003b16 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003b04:	2101      	movs	r1, #1
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 f940 	bl	8003d8c <USB_SetDevSpeed>
 8003b0c:	e003      	b.n	8003b16 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003b0e:	2103      	movs	r1, #3
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f000 f93b 	bl	8003d8c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003b16:	2110      	movs	r1, #16
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f000 f8f3 	bl	8003d04 <USB_FlushTxFifo>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d001      	beq.n	8003b28 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f000 f90f 	bl	8003d4c <USB_FlushRxFifo>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d001      	beq.n	8003b38 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b3e:	461a      	mov	r2, r3
 8003b40:	2300      	movs	r3, #0
 8003b42:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b56:	461a      	mov	r2, r3
 8003b58:	2300      	movs	r3, #0
 8003b5a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	613b      	str	r3, [r7, #16]
 8003b60:	e043      	b.n	8003bea <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	015a      	lsls	r2, r3, #5
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	4413      	add	r3, r2
 8003b6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b78:	d118      	bne.n	8003bac <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d10a      	bne.n	8003b96 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	015a      	lsls	r2, r3, #5
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	4413      	add	r3, r2
 8003b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003b92:	6013      	str	r3, [r2, #0]
 8003b94:	e013      	b.n	8003bbe <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	015a      	lsls	r2, r3, #5
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	4413      	add	r3, r2
 8003b9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003ba8:	6013      	str	r3, [r2, #0]
 8003baa:	e008      	b.n	8003bbe <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	015a      	lsls	r2, r3, #5
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bb8:	461a      	mov	r2, r3
 8003bba:	2300      	movs	r3, #0
 8003bbc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	015a      	lsls	r2, r3, #5
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bca:	461a      	mov	r2, r3
 8003bcc:	2300      	movs	r3, #0
 8003bce:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	015a      	lsls	r2, r3, #5
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bdc:	461a      	mov	r2, r3
 8003bde:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003be2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	3301      	adds	r3, #1
 8003be8:	613b      	str	r3, [r7, #16]
 8003bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bec:	693a      	ldr	r2, [r7, #16]
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d3b7      	bcc.n	8003b62 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	613b      	str	r3, [r7, #16]
 8003bf6:	e043      	b.n	8003c80 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	015a      	lsls	r2, r3, #5
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	4413      	add	r3, r2
 8003c00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c0e:	d118      	bne.n	8003c42 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d10a      	bne.n	8003c2c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	015a      	lsls	r2, r3, #5
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c22:	461a      	mov	r2, r3
 8003c24:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003c28:	6013      	str	r3, [r2, #0]
 8003c2a:	e013      	b.n	8003c54 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	015a      	lsls	r2, r3, #5
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	4413      	add	r3, r2
 8003c34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c38:	461a      	mov	r2, r3
 8003c3a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003c3e:	6013      	str	r3, [r2, #0]
 8003c40:	e008      	b.n	8003c54 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	015a      	lsls	r2, r3, #5
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	4413      	add	r3, r2
 8003c4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c4e:	461a      	mov	r2, r3
 8003c50:	2300      	movs	r3, #0
 8003c52:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	015a      	lsls	r2, r3, #5
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	4413      	add	r3, r2
 8003c5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c60:	461a      	mov	r2, r3
 8003c62:	2300      	movs	r3, #0
 8003c64:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	015a      	lsls	r2, r3, #5
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	4413      	add	r3, r2
 8003c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c72:	461a      	mov	r2, r3
 8003c74:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c78:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	613b      	str	r3, [r7, #16]
 8003c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d3b7      	bcc.n	8003bf8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c8e:	691b      	ldr	r3, [r3, #16]
 8003c90:	68fa      	ldr	r2, [r7, #12]
 8003c92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c9a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003ca8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d105      	bne.n	8003cbc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	699b      	ldr	r3, [r3, #24]
 8003cb4:	f043 0210 	orr.w	r2, r3, #16
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	699a      	ldr	r2, [r3, #24]
 8003cc0:	4b0f      	ldr	r3, [pc, #60]	; (8003d00 <USB_DevInit+0x2c4>)
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003cc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d005      	beq.n	8003cda <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	699b      	ldr	r3, [r3, #24]
 8003cd2:	f043 0208 	orr.w	r2, r3, #8
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003cda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d107      	bne.n	8003cf0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ce8:	f043 0304 	orr.w	r3, r3, #4
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003cf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3718      	adds	r7, #24
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003cfc:	b004      	add	sp, #16
 8003cfe:	4770      	bx	lr
 8003d00:	803c3800 	.word	0x803c3800

08003d04 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b085      	sub	sp, #20
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	019b      	lsls	r3, r3, #6
 8003d16:	f043 0220 	orr.w	r2, r3, #32
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	3301      	adds	r3, #1
 8003d22:	60fb      	str	r3, [r7, #12]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	4a08      	ldr	r2, [pc, #32]	; (8003d48 <USB_FlushTxFifo+0x44>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d901      	bls.n	8003d30 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e006      	b.n	8003d3e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	691b      	ldr	r3, [r3, #16]
 8003d34:	f003 0320 	and.w	r3, r3, #32
 8003d38:	2b20      	cmp	r3, #32
 8003d3a:	d0f0      	beq.n	8003d1e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3714      	adds	r7, #20
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bc80      	pop	{r7}
 8003d46:	4770      	bx	lr
 8003d48:	00030d40 	.word	0x00030d40

08003d4c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b085      	sub	sp, #20
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003d54:	2300      	movs	r3, #0
 8003d56:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2210      	movs	r2, #16
 8003d5c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	3301      	adds	r3, #1
 8003d62:	60fb      	str	r3, [r7, #12]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	4a08      	ldr	r2, [pc, #32]	; (8003d88 <USB_FlushRxFifo+0x3c>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d901      	bls.n	8003d70 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e006      	b.n	8003d7e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	691b      	ldr	r3, [r3, #16]
 8003d74:	f003 0310 	and.w	r3, r3, #16
 8003d78:	2b10      	cmp	r3, #16
 8003d7a:	d0f0      	beq.n	8003d5e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3714      	adds	r7, #20
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bc80      	pop	{r7}
 8003d86:	4770      	bx	lr
 8003d88:	00030d40 	.word	0x00030d40

08003d8c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b085      	sub	sp, #20
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	460b      	mov	r3, r1
 8003d96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	78fb      	ldrb	r3, [r7, #3]
 8003da6:	68f9      	ldr	r1, [r7, #12]
 8003da8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003dac:	4313      	orrs	r3, r2
 8003dae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3714      	adds	r7, #20
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bc80      	pop	{r7}
 8003dba:	4770      	bx	lr

08003dbc <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b087      	sub	sp, #28
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f003 0306 	and.w	r3, r3, #6
 8003dd4:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d102      	bne.n	8003de2 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	75fb      	strb	r3, [r7, #23]
 8003de0:	e00a      	b.n	8003df8 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d002      	beq.n	8003dee <USB_GetDevSpeed+0x32>
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2b06      	cmp	r3, #6
 8003dec:	d102      	bne.n	8003df4 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003dee:	2302      	movs	r3, #2
 8003df0:	75fb      	strb	r3, [r7, #23]
 8003df2:	e001      	b.n	8003df8 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003df4:	230f      	movs	r3, #15
 8003df6:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003df8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	371c      	adds	r7, #28
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bc80      	pop	{r7}
 8003e02:	4770      	bx	lr

08003e04 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b085      	sub	sp, #20
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	785b      	ldrb	r3, [r3, #1]
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d13a      	bne.n	8003e96 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e26:	69da      	ldr	r2, [r3, #28]
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	f003 030f 	and.w	r3, r3, #15
 8003e30:	2101      	movs	r1, #1
 8003e32:	fa01 f303 	lsl.w	r3, r1, r3
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	68f9      	ldr	r1, [r7, #12]
 8003e3a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	015a      	lsls	r2, r3, #5
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	4413      	add	r3, r2
 8003e4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d155      	bne.n	8003f04 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	015a      	lsls	r2, r3, #5
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	4413      	add	r3, r2
 8003e60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	78db      	ldrb	r3, [r3, #3]
 8003e72:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003e74:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	059b      	lsls	r3, r3, #22
 8003e7a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	68ba      	ldr	r2, [r7, #8]
 8003e80:	0151      	lsls	r1, r2, #5
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	440a      	add	r2, r1
 8003e86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e92:	6013      	str	r3, [r2, #0]
 8003e94:	e036      	b.n	8003f04 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e9c:	69da      	ldr	r2, [r3, #28]
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	f003 030f 	and.w	r3, r3, #15
 8003ea6:	2101      	movs	r1, #1
 8003ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8003eac:	041b      	lsls	r3, r3, #16
 8003eae:	68f9      	ldr	r1, [r7, #12]
 8003eb0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	015a      	lsls	r2, r3, #5
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d11a      	bne.n	8003f04 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	015a      	lsls	r2, r3, #5
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	4413      	add	r3, r2
 8003ed6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	78db      	ldrb	r3, [r3, #3]
 8003ee8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003eea:	430b      	orrs	r3, r1
 8003eec:	4313      	orrs	r3, r2
 8003eee:	68ba      	ldr	r2, [r7, #8]
 8003ef0:	0151      	lsls	r1, r2, #5
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	440a      	add	r2, r1
 8003ef6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003efa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003efe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f02:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3714      	adds	r7, #20
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bc80      	pop	{r7}
 8003f0e:	4770      	bx	lr

08003f10 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b085      	sub	sp, #20
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	785b      	ldrb	r3, [r3, #1]
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d161      	bne.n	8003ff0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	015a      	lsls	r2, r3, #5
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	4413      	add	r3, r2
 8003f34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f42:	d11f      	bne.n	8003f84 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	015a      	lsls	r2, r3, #5
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	4413      	add	r3, r2
 8003f4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68ba      	ldr	r2, [r7, #8]
 8003f54:	0151      	lsls	r1, r2, #5
 8003f56:	68fa      	ldr	r2, [r7, #12]
 8003f58:	440a      	add	r2, r1
 8003f5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f5e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003f62:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	015a      	lsls	r2, r3, #5
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68ba      	ldr	r2, [r7, #8]
 8003f74:	0151      	lsls	r1, r2, #5
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	440a      	add	r2, r1
 8003f7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f7e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003f82:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	f003 030f 	and.w	r3, r3, #15
 8003f94:	2101      	movs	r1, #1
 8003f96:	fa01 f303 	lsl.w	r3, r1, r3
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	43db      	mvns	r3, r3
 8003f9e:	68f9      	ldr	r1, [r7, #12]
 8003fa0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fae:	69da      	ldr	r2, [r3, #28]
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	781b      	ldrb	r3, [r3, #0]
 8003fb4:	f003 030f 	and.w	r3, r3, #15
 8003fb8:	2101      	movs	r1, #1
 8003fba:	fa01 f303 	lsl.w	r3, r1, r3
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	43db      	mvns	r3, r3
 8003fc2:	68f9      	ldr	r1, [r7, #12]
 8003fc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003fc8:	4013      	ands	r3, r2
 8003fca:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	015a      	lsls	r2, r3, #5
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	4413      	add	r3, r2
 8003fd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	0159      	lsls	r1, r3, #5
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	440b      	add	r3, r1
 8003fe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fe6:	4619      	mov	r1, r3
 8003fe8:	4b35      	ldr	r3, [pc, #212]	; (80040c0 <USB_DeactivateEndpoint+0x1b0>)
 8003fea:	4013      	ands	r3, r2
 8003fec:	600b      	str	r3, [r1, #0]
 8003fee:	e060      	b.n	80040b2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	015a      	lsls	r2, r3, #5
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	4413      	add	r3, r2
 8003ff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004002:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004006:	d11f      	bne.n	8004048 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	015a      	lsls	r2, r3, #5
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	4413      	add	r3, r2
 8004010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	68ba      	ldr	r2, [r7, #8]
 8004018:	0151      	lsls	r1, r2, #5
 800401a:	68fa      	ldr	r2, [r7, #12]
 800401c:	440a      	add	r2, r1
 800401e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004022:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004026:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	015a      	lsls	r2, r3, #5
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	4413      	add	r3, r2
 8004030:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68ba      	ldr	r2, [r7, #8]
 8004038:	0151      	lsls	r1, r2, #5
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	440a      	add	r2, r1
 800403e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004042:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004046:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800404e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	f003 030f 	and.w	r3, r3, #15
 8004058:	2101      	movs	r1, #1
 800405a:	fa01 f303 	lsl.w	r3, r1, r3
 800405e:	041b      	lsls	r3, r3, #16
 8004060:	43db      	mvns	r3, r3
 8004062:	68f9      	ldr	r1, [r7, #12]
 8004064:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004068:	4013      	ands	r3, r2
 800406a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004072:	69da      	ldr	r2, [r3, #28]
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	f003 030f 	and.w	r3, r3, #15
 800407c:	2101      	movs	r1, #1
 800407e:	fa01 f303 	lsl.w	r3, r1, r3
 8004082:	041b      	lsls	r3, r3, #16
 8004084:	43db      	mvns	r3, r3
 8004086:	68f9      	ldr	r1, [r7, #12]
 8004088:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800408c:	4013      	ands	r3, r2
 800408e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	015a      	lsls	r2, r3, #5
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	4413      	add	r3, r2
 8004098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	0159      	lsls	r1, r3, #5
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	440b      	add	r3, r1
 80040a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040aa:	4619      	mov	r1, r3
 80040ac:	4b05      	ldr	r3, [pc, #20]	; (80040c4 <USB_DeactivateEndpoint+0x1b4>)
 80040ae:	4013      	ands	r3, r2
 80040b0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80040b2:	2300      	movs	r3, #0
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3714      	adds	r7, #20
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bc80      	pop	{r7}
 80040bc:	4770      	bx	lr
 80040be:	bf00      	nop
 80040c0:	ec337800 	.word	0xec337800
 80040c4:	eff37800 	.word	0xeff37800

080040c8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b08a      	sub	sp, #40	; 0x28
 80040cc:	af02      	add	r7, sp, #8
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	4613      	mov	r3, r2
 80040d4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	785b      	ldrb	r3, [r3, #1]
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	f040 815c 	bne.w	80043a2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	695b      	ldr	r3, [r3, #20]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d132      	bne.n	8004158 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	015a      	lsls	r2, r3, #5
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	4413      	add	r3, r2
 80040fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040fe:	691b      	ldr	r3, [r3, #16]
 8004100:	69ba      	ldr	r2, [r7, #24]
 8004102:	0151      	lsls	r1, r2, #5
 8004104:	69fa      	ldr	r2, [r7, #28]
 8004106:	440a      	add	r2, r1
 8004108:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800410c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004110:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004114:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	015a      	lsls	r2, r3, #5
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	4413      	add	r3, r2
 800411e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004122:	691b      	ldr	r3, [r3, #16]
 8004124:	69ba      	ldr	r2, [r7, #24]
 8004126:	0151      	lsls	r1, r2, #5
 8004128:	69fa      	ldr	r2, [r7, #28]
 800412a:	440a      	add	r2, r1
 800412c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004130:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004134:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004136:	69bb      	ldr	r3, [r7, #24]
 8004138:	015a      	lsls	r2, r3, #5
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	4413      	add	r3, r2
 800413e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004142:	691b      	ldr	r3, [r3, #16]
 8004144:	69ba      	ldr	r2, [r7, #24]
 8004146:	0151      	lsls	r1, r2, #5
 8004148:	69fa      	ldr	r2, [r7, #28]
 800414a:	440a      	add	r2, r1
 800414c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004150:	0cdb      	lsrs	r3, r3, #19
 8004152:	04db      	lsls	r3, r3, #19
 8004154:	6113      	str	r3, [r2, #16]
 8004156:	e074      	b.n	8004242 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	015a      	lsls	r2, r3, #5
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	4413      	add	r3, r2
 8004160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004164:	691b      	ldr	r3, [r3, #16]
 8004166:	69ba      	ldr	r2, [r7, #24]
 8004168:	0151      	lsls	r1, r2, #5
 800416a:	69fa      	ldr	r2, [r7, #28]
 800416c:	440a      	add	r2, r1
 800416e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004172:	0cdb      	lsrs	r3, r3, #19
 8004174:	04db      	lsls	r3, r3, #19
 8004176:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	015a      	lsls	r2, r3, #5
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	4413      	add	r3, r2
 8004180:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	69ba      	ldr	r2, [r7, #24]
 8004188:	0151      	lsls	r1, r2, #5
 800418a:	69fa      	ldr	r2, [r7, #28]
 800418c:	440a      	add	r2, r1
 800418e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004192:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004196:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800419a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	015a      	lsls	r2, r3, #5
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	4413      	add	r3, r2
 80041a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041a8:	691a      	ldr	r2, [r3, #16]
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	6959      	ldr	r1, [r3, #20]
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	440b      	add	r3, r1
 80041b4:	1e59      	subs	r1, r3, #1
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80041be:	04d9      	lsls	r1, r3, #19
 80041c0:	4b9d      	ldr	r3, [pc, #628]	; (8004438 <USB_EPStartXfer+0x370>)
 80041c2:	400b      	ands	r3, r1
 80041c4:	69b9      	ldr	r1, [r7, #24]
 80041c6:	0148      	lsls	r0, r1, #5
 80041c8:	69f9      	ldr	r1, [r7, #28]
 80041ca:	4401      	add	r1, r0
 80041cc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80041d0:	4313      	orrs	r3, r2
 80041d2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	015a      	lsls	r2, r3, #5
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	4413      	add	r3, r2
 80041dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041e0:	691a      	ldr	r2, [r3, #16]
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	695b      	ldr	r3, [r3, #20]
 80041e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041ea:	69b9      	ldr	r1, [r7, #24]
 80041ec:	0148      	lsls	r0, r1, #5
 80041ee:	69f9      	ldr	r1, [r7, #28]
 80041f0:	4401      	add	r1, r0
 80041f2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80041f6:	4313      	orrs	r3, r2
 80041f8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	78db      	ldrb	r3, [r3, #3]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d11f      	bne.n	8004242 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	015a      	lsls	r2, r3, #5
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	4413      	add	r3, r2
 800420a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800420e:	691b      	ldr	r3, [r3, #16]
 8004210:	69ba      	ldr	r2, [r7, #24]
 8004212:	0151      	lsls	r1, r2, #5
 8004214:	69fa      	ldr	r2, [r7, #28]
 8004216:	440a      	add	r2, r1
 8004218:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800421c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004220:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004222:	69bb      	ldr	r3, [r7, #24]
 8004224:	015a      	lsls	r2, r3, #5
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	4413      	add	r3, r2
 800422a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800422e:	691b      	ldr	r3, [r3, #16]
 8004230:	69ba      	ldr	r2, [r7, #24]
 8004232:	0151      	lsls	r1, r2, #5
 8004234:	69fa      	ldr	r2, [r7, #28]
 8004236:	440a      	add	r2, r1
 8004238:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800423c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004240:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004242:	79fb      	ldrb	r3, [r7, #7]
 8004244:	2b01      	cmp	r3, #1
 8004246:	d14b      	bne.n	80042e0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d009      	beq.n	8004264 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004250:	69bb      	ldr	r3, [r7, #24]
 8004252:	015a      	lsls	r2, r3, #5
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	4413      	add	r3, r2
 8004258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800425c:	461a      	mov	r2, r3
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	78db      	ldrb	r3, [r3, #3]
 8004268:	2b01      	cmp	r3, #1
 800426a:	d128      	bne.n	80042be <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004278:	2b00      	cmp	r3, #0
 800427a:	d110      	bne.n	800429e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	015a      	lsls	r2, r3, #5
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	4413      	add	r3, r2
 8004284:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	69ba      	ldr	r2, [r7, #24]
 800428c:	0151      	lsls	r1, r2, #5
 800428e:	69fa      	ldr	r2, [r7, #28]
 8004290:	440a      	add	r2, r1
 8004292:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004296:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800429a:	6013      	str	r3, [r2, #0]
 800429c:	e00f      	b.n	80042be <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	015a      	lsls	r2, r3, #5
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	4413      	add	r3, r2
 80042a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	69ba      	ldr	r2, [r7, #24]
 80042ae:	0151      	lsls	r1, r2, #5
 80042b0:	69fa      	ldr	r2, [r7, #28]
 80042b2:	440a      	add	r2, r1
 80042b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042bc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80042be:	69bb      	ldr	r3, [r7, #24]
 80042c0:	015a      	lsls	r2, r3, #5
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	4413      	add	r3, r2
 80042c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	69ba      	ldr	r2, [r7, #24]
 80042ce:	0151      	lsls	r1, r2, #5
 80042d0:	69fa      	ldr	r2, [r7, #28]
 80042d2:	440a      	add	r2, r1
 80042d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042d8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80042dc:	6013      	str	r3, [r2, #0]
 80042de:	e12f      	b.n	8004540 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	015a      	lsls	r2, r3, #5
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	4413      	add	r3, r2
 80042e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	69ba      	ldr	r2, [r7, #24]
 80042f0:	0151      	lsls	r1, r2, #5
 80042f2:	69fa      	ldr	r2, [r7, #28]
 80042f4:	440a      	add	r2, r1
 80042f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80042fe:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	78db      	ldrb	r3, [r3, #3]
 8004304:	2b01      	cmp	r3, #1
 8004306:	d015      	beq.n	8004334 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	695b      	ldr	r3, [r3, #20]
 800430c:	2b00      	cmp	r3, #0
 800430e:	f000 8117 	beq.w	8004540 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004318:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	f003 030f 	and.w	r3, r3, #15
 8004322:	2101      	movs	r1, #1
 8004324:	fa01 f303 	lsl.w	r3, r1, r3
 8004328:	69f9      	ldr	r1, [r7, #28]
 800432a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800432e:	4313      	orrs	r3, r2
 8004330:	634b      	str	r3, [r1, #52]	; 0x34
 8004332:	e105      	b.n	8004540 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004340:	2b00      	cmp	r3, #0
 8004342:	d110      	bne.n	8004366 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	015a      	lsls	r2, r3, #5
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	4413      	add	r3, r2
 800434c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	69ba      	ldr	r2, [r7, #24]
 8004354:	0151      	lsls	r1, r2, #5
 8004356:	69fa      	ldr	r2, [r7, #28]
 8004358:	440a      	add	r2, r1
 800435a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800435e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004362:	6013      	str	r3, [r2, #0]
 8004364:	e00f      	b.n	8004386 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	015a      	lsls	r2, r3, #5
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	4413      	add	r3, r2
 800436e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	69ba      	ldr	r2, [r7, #24]
 8004376:	0151      	lsls	r1, r2, #5
 8004378:	69fa      	ldr	r2, [r7, #28]
 800437a:	440a      	add	r2, r1
 800437c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004384:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	68d9      	ldr	r1, [r3, #12]
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	781a      	ldrb	r2, [r3, #0]
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	695b      	ldr	r3, [r3, #20]
 8004392:	b298      	uxth	r0, r3
 8004394:	79fb      	ldrb	r3, [r7, #7]
 8004396:	9300      	str	r3, [sp, #0]
 8004398:	4603      	mov	r3, r0
 800439a:	68f8      	ldr	r0, [r7, #12]
 800439c:	f000 fa2a 	bl	80047f4 <USB_WritePacket>
 80043a0:	e0ce      	b.n	8004540 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	015a      	lsls	r2, r3, #5
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	4413      	add	r3, r2
 80043aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ae:	691b      	ldr	r3, [r3, #16]
 80043b0:	69ba      	ldr	r2, [r7, #24]
 80043b2:	0151      	lsls	r1, r2, #5
 80043b4:	69fa      	ldr	r2, [r7, #28]
 80043b6:	440a      	add	r2, r1
 80043b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043bc:	0cdb      	lsrs	r3, r3, #19
 80043be:	04db      	lsls	r3, r3, #19
 80043c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	015a      	lsls	r2, r3, #5
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	4413      	add	r3, r2
 80043ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ce:	691b      	ldr	r3, [r3, #16]
 80043d0:	69ba      	ldr	r2, [r7, #24]
 80043d2:	0151      	lsls	r1, r2, #5
 80043d4:	69fa      	ldr	r2, [r7, #28]
 80043d6:	440a      	add	r2, r1
 80043d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80043e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80043e4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	695b      	ldr	r3, [r3, #20]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d126      	bne.n	800443c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	015a      	lsls	r2, r3, #5
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	4413      	add	r3, r2
 80043f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043fa:	691a      	ldr	r2, [r3, #16]
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004404:	69b9      	ldr	r1, [r7, #24]
 8004406:	0148      	lsls	r0, r1, #5
 8004408:	69f9      	ldr	r1, [r7, #28]
 800440a:	4401      	add	r1, r0
 800440c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004410:	4313      	orrs	r3, r2
 8004412:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	015a      	lsls	r2, r3, #5
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	4413      	add	r3, r2
 800441c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	69ba      	ldr	r2, [r7, #24]
 8004424:	0151      	lsls	r1, r2, #5
 8004426:	69fa      	ldr	r2, [r7, #28]
 8004428:	440a      	add	r2, r1
 800442a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800442e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004432:	6113      	str	r3, [r2, #16]
 8004434:	e036      	b.n	80044a4 <USB_EPStartXfer+0x3dc>
 8004436:	bf00      	nop
 8004438:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	695a      	ldr	r2, [r3, #20]
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	4413      	add	r3, r2
 8004446:	1e5a      	subs	r2, r3, #1
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004450:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	015a      	lsls	r2, r3, #5
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	4413      	add	r3, r2
 800445a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800445e:	691a      	ldr	r2, [r3, #16]
 8004460:	8afb      	ldrh	r3, [r7, #22]
 8004462:	04d9      	lsls	r1, r3, #19
 8004464:	4b39      	ldr	r3, [pc, #228]	; (800454c <USB_EPStartXfer+0x484>)
 8004466:	400b      	ands	r3, r1
 8004468:	69b9      	ldr	r1, [r7, #24]
 800446a:	0148      	lsls	r0, r1, #5
 800446c:	69f9      	ldr	r1, [r7, #28]
 800446e:	4401      	add	r1, r0
 8004470:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004474:	4313      	orrs	r3, r2
 8004476:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	015a      	lsls	r2, r3, #5
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	4413      	add	r3, r2
 8004480:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004484:	691a      	ldr	r2, [r3, #16]
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	8af9      	ldrh	r1, [r7, #22]
 800448c:	fb01 f303 	mul.w	r3, r1, r3
 8004490:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004494:	69b9      	ldr	r1, [r7, #24]
 8004496:	0148      	lsls	r0, r1, #5
 8004498:	69f9      	ldr	r1, [r7, #28]
 800449a:	4401      	add	r1, r0
 800449c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80044a0:	4313      	orrs	r3, r2
 80044a2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80044a4:	79fb      	ldrb	r3, [r7, #7]
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d10d      	bne.n	80044c6 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d009      	beq.n	80044c6 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	68d9      	ldr	r1, [r3, #12]
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	015a      	lsls	r2, r3, #5
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	4413      	add	r3, r2
 80044be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044c2:	460a      	mov	r2, r1
 80044c4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	78db      	ldrb	r3, [r3, #3]
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d128      	bne.n	8004520 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d110      	bne.n	8004500 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	015a      	lsls	r2, r3, #5
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	4413      	add	r3, r2
 80044e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	69ba      	ldr	r2, [r7, #24]
 80044ee:	0151      	lsls	r1, r2, #5
 80044f0:	69fa      	ldr	r2, [r7, #28]
 80044f2:	440a      	add	r2, r1
 80044f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80044fc:	6013      	str	r3, [r2, #0]
 80044fe:	e00f      	b.n	8004520 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	015a      	lsls	r2, r3, #5
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	4413      	add	r3, r2
 8004508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	69ba      	ldr	r2, [r7, #24]
 8004510:	0151      	lsls	r1, r2, #5
 8004512:	69fa      	ldr	r2, [r7, #28]
 8004514:	440a      	add	r2, r1
 8004516:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800451a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800451e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004520:	69bb      	ldr	r3, [r7, #24]
 8004522:	015a      	lsls	r2, r3, #5
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	4413      	add	r3, r2
 8004528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	69ba      	ldr	r2, [r7, #24]
 8004530:	0151      	lsls	r1, r2, #5
 8004532:	69fa      	ldr	r2, [r7, #28]
 8004534:	440a      	add	r2, r1
 8004536:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800453a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800453e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004540:	2300      	movs	r3, #0
}
 8004542:	4618      	mov	r0, r3
 8004544:	3720      	adds	r7, #32
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	1ff80000 	.word	0x1ff80000

08004550 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004550:	b480      	push	{r7}
 8004552:	b087      	sub	sp, #28
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	4613      	mov	r3, r2
 800455c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	785b      	ldrb	r3, [r3, #1]
 800456c:	2b01      	cmp	r3, #1
 800456e:	f040 80cd 	bne.w	800470c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	695b      	ldr	r3, [r3, #20]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d132      	bne.n	80045e0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	015a      	lsls	r2, r3, #5
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	4413      	add	r3, r2
 8004582:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004586:	691b      	ldr	r3, [r3, #16]
 8004588:	693a      	ldr	r2, [r7, #16]
 800458a:	0151      	lsls	r1, r2, #5
 800458c:	697a      	ldr	r2, [r7, #20]
 800458e:	440a      	add	r2, r1
 8004590:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004594:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004598:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800459c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	015a      	lsls	r2, r3, #5
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	4413      	add	r3, r2
 80045a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	693a      	ldr	r2, [r7, #16]
 80045ae:	0151      	lsls	r1, r2, #5
 80045b0:	697a      	ldr	r2, [r7, #20]
 80045b2:	440a      	add	r2, r1
 80045b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80045bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	015a      	lsls	r2, r3, #5
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	4413      	add	r3, r2
 80045c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045ca:	691b      	ldr	r3, [r3, #16]
 80045cc:	693a      	ldr	r2, [r7, #16]
 80045ce:	0151      	lsls	r1, r2, #5
 80045d0:	697a      	ldr	r2, [r7, #20]
 80045d2:	440a      	add	r2, r1
 80045d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045d8:	0cdb      	lsrs	r3, r3, #19
 80045da:	04db      	lsls	r3, r3, #19
 80045dc:	6113      	str	r3, [r2, #16]
 80045de:	e04e      	b.n	800467e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	015a      	lsls	r2, r3, #5
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	4413      	add	r3, r2
 80045e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	693a      	ldr	r2, [r7, #16]
 80045f0:	0151      	lsls	r1, r2, #5
 80045f2:	697a      	ldr	r2, [r7, #20]
 80045f4:	440a      	add	r2, r1
 80045f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045fa:	0cdb      	lsrs	r3, r3, #19
 80045fc:	04db      	lsls	r3, r3, #19
 80045fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	015a      	lsls	r2, r3, #5
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	4413      	add	r3, r2
 8004608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	693a      	ldr	r2, [r7, #16]
 8004610:	0151      	lsls	r1, r2, #5
 8004612:	697a      	ldr	r2, [r7, #20]
 8004614:	440a      	add	r2, r1
 8004616:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800461a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800461e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004622:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	695a      	ldr	r2, [r3, #20]
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	429a      	cmp	r2, r3
 800462e:	d903      	bls.n	8004638 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	689a      	ldr	r2, [r3, #8]
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	015a      	lsls	r2, r3, #5
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	4413      	add	r3, r2
 8004640:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	693a      	ldr	r2, [r7, #16]
 8004648:	0151      	lsls	r1, r2, #5
 800464a:	697a      	ldr	r2, [r7, #20]
 800464c:	440a      	add	r2, r1
 800464e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004652:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004656:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	015a      	lsls	r2, r3, #5
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	4413      	add	r3, r2
 8004660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004664:	691a      	ldr	r2, [r3, #16]
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	695b      	ldr	r3, [r3, #20]
 800466a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800466e:	6939      	ldr	r1, [r7, #16]
 8004670:	0148      	lsls	r0, r1, #5
 8004672:	6979      	ldr	r1, [r7, #20]
 8004674:	4401      	add	r1, r0
 8004676:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800467a:	4313      	orrs	r3, r2
 800467c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800467e:	79fb      	ldrb	r3, [r7, #7]
 8004680:	2b01      	cmp	r3, #1
 8004682:	d11e      	bne.n	80046c2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	691b      	ldr	r3, [r3, #16]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d009      	beq.n	80046a0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	015a      	lsls	r2, r3, #5
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	4413      	add	r3, r2
 8004694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004698:	461a      	mov	r2, r3
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	015a      	lsls	r2, r3, #5
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	4413      	add	r3, r2
 80046a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	693a      	ldr	r2, [r7, #16]
 80046b0:	0151      	lsls	r1, r2, #5
 80046b2:	697a      	ldr	r2, [r7, #20]
 80046b4:	440a      	add	r2, r1
 80046b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046ba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80046be:	6013      	str	r3, [r2, #0]
 80046c0:	e092      	b.n	80047e8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	015a      	lsls	r2, r3, #5
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	4413      	add	r3, r2
 80046ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	693a      	ldr	r2, [r7, #16]
 80046d2:	0151      	lsls	r1, r2, #5
 80046d4:	697a      	ldr	r2, [r7, #20]
 80046d6:	440a      	add	r2, r1
 80046d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046dc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80046e0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	695b      	ldr	r3, [r3, #20]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d07e      	beq.n	80047e8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	f003 030f 	and.w	r3, r3, #15
 80046fa:	2101      	movs	r1, #1
 80046fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004700:	6979      	ldr	r1, [r7, #20]
 8004702:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004706:	4313      	orrs	r3, r2
 8004708:	634b      	str	r3, [r1, #52]	; 0x34
 800470a:	e06d      	b.n	80047e8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	015a      	lsls	r2, r3, #5
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	4413      	add	r3, r2
 8004714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004718:	691b      	ldr	r3, [r3, #16]
 800471a:	693a      	ldr	r2, [r7, #16]
 800471c:	0151      	lsls	r1, r2, #5
 800471e:	697a      	ldr	r2, [r7, #20]
 8004720:	440a      	add	r2, r1
 8004722:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004726:	0cdb      	lsrs	r3, r3, #19
 8004728:	04db      	lsls	r3, r3, #19
 800472a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	015a      	lsls	r2, r3, #5
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	4413      	add	r3, r2
 8004734:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	693a      	ldr	r2, [r7, #16]
 800473c:	0151      	lsls	r1, r2, #5
 800473e:	697a      	ldr	r2, [r7, #20]
 8004740:	440a      	add	r2, r1
 8004742:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004746:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800474a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800474e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	695b      	ldr	r3, [r3, #20]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d003      	beq.n	8004760 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	689a      	ldr	r2, [r3, #8]
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	015a      	lsls	r2, r3, #5
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	4413      	add	r3, r2
 8004768:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	693a      	ldr	r2, [r7, #16]
 8004770:	0151      	lsls	r1, r2, #5
 8004772:	697a      	ldr	r2, [r7, #20]
 8004774:	440a      	add	r2, r1
 8004776:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800477a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800477e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	015a      	lsls	r2, r3, #5
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	4413      	add	r3, r2
 8004788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800478c:	691a      	ldr	r2, [r3, #16]
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004796:	6939      	ldr	r1, [r7, #16]
 8004798:	0148      	lsls	r0, r1, #5
 800479a:	6979      	ldr	r1, [r7, #20]
 800479c:	4401      	add	r1, r0
 800479e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80047a2:	4313      	orrs	r3, r2
 80047a4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80047a6:	79fb      	ldrb	r3, [r7, #7]
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d10d      	bne.n	80047c8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d009      	beq.n	80047c8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	68d9      	ldr	r1, [r3, #12]
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	015a      	lsls	r2, r3, #5
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	4413      	add	r3, r2
 80047c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047c4:	460a      	mov	r2, r1
 80047c6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	015a      	lsls	r2, r3, #5
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	4413      	add	r3, r2
 80047d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	693a      	ldr	r2, [r7, #16]
 80047d8:	0151      	lsls	r1, r2, #5
 80047da:	697a      	ldr	r2, [r7, #20]
 80047dc:	440a      	add	r2, r1
 80047de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047e2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80047e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80047e8:	2300      	movs	r3, #0
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	371c      	adds	r7, #28
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bc80      	pop	{r7}
 80047f2:	4770      	bx	lr

080047f4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b089      	sub	sp, #36	; 0x24
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	60b9      	str	r1, [r7, #8]
 80047fe:	4611      	mov	r1, r2
 8004800:	461a      	mov	r2, r3
 8004802:	460b      	mov	r3, r1
 8004804:	71fb      	strb	r3, [r7, #7]
 8004806:	4613      	mov	r3, r2
 8004808:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8004812:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004816:	2b00      	cmp	r3, #0
 8004818:	d11a      	bne.n	8004850 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800481a:	88bb      	ldrh	r3, [r7, #4]
 800481c:	3303      	adds	r3, #3
 800481e:	089b      	lsrs	r3, r3, #2
 8004820:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004822:	2300      	movs	r3, #0
 8004824:	61bb      	str	r3, [r7, #24]
 8004826:	e00f      	b.n	8004848 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004828:	79fb      	ldrb	r3, [r7, #7]
 800482a:	031a      	lsls	r2, r3, #12
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	4413      	add	r3, r2
 8004830:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004834:	461a      	mov	r2, r3
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	3304      	adds	r3, #4
 8004840:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	3301      	adds	r3, #1
 8004846:	61bb      	str	r3, [r7, #24]
 8004848:	69ba      	ldr	r2, [r7, #24]
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	429a      	cmp	r2, r3
 800484e:	d3eb      	bcc.n	8004828 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004850:	2300      	movs	r3, #0
}
 8004852:	4618      	mov	r0, r3
 8004854:	3724      	adds	r7, #36	; 0x24
 8004856:	46bd      	mov	sp, r7
 8004858:	bc80      	pop	{r7}
 800485a:	4770      	bx	lr

0800485c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800485c:	b480      	push	{r7}
 800485e:	b089      	sub	sp, #36	; 0x24
 8004860:	af00      	add	r7, sp, #0
 8004862:	60f8      	str	r0, [r7, #12]
 8004864:	60b9      	str	r1, [r7, #8]
 8004866:	4613      	mov	r3, r2
 8004868:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004872:	88fb      	ldrh	r3, [r7, #6]
 8004874:	3303      	adds	r3, #3
 8004876:	089b      	lsrs	r3, r3, #2
 8004878:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800487a:	2300      	movs	r3, #0
 800487c:	61bb      	str	r3, [r7, #24]
 800487e:	e00b      	b.n	8004898 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	601a      	str	r2, [r3, #0]
    pDest++;
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	3304      	adds	r3, #4
 8004890:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	3301      	adds	r3, #1
 8004896:	61bb      	str	r3, [r7, #24]
 8004898:	69ba      	ldr	r2, [r7, #24]
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	429a      	cmp	r2, r3
 800489e:	d3ef      	bcc.n	8004880 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80048a0:	69fb      	ldr	r3, [r7, #28]
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3724      	adds	r7, #36	; 0x24
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bc80      	pop	{r7}
 80048aa:	4770      	bx	lr

080048ac <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b085      	sub	sp, #20
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	785b      	ldrb	r3, [r3, #1]
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d12c      	bne.n	8004922 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	015a      	lsls	r2, r3, #5
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	4413      	add	r3, r2
 80048d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	db12      	blt.n	8004900 <USB_EPSetStall+0x54>
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d00f      	beq.n	8004900 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	015a      	lsls	r2, r3, #5
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	4413      	add	r3, r2
 80048e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68ba      	ldr	r2, [r7, #8]
 80048f0:	0151      	lsls	r1, r2, #5
 80048f2:	68fa      	ldr	r2, [r7, #12]
 80048f4:	440a      	add	r2, r1
 80048f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048fa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80048fe:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	015a      	lsls	r2, r3, #5
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	4413      	add	r3, r2
 8004908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68ba      	ldr	r2, [r7, #8]
 8004910:	0151      	lsls	r1, r2, #5
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	440a      	add	r2, r1
 8004916:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800491a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800491e:	6013      	str	r3, [r2, #0]
 8004920:	e02b      	b.n	800497a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	015a      	lsls	r2, r3, #5
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	4413      	add	r3, r2
 800492a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2b00      	cmp	r3, #0
 8004932:	db12      	blt.n	800495a <USB_EPSetStall+0xae>
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d00f      	beq.n	800495a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	015a      	lsls	r2, r3, #5
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	4413      	add	r3, r2
 8004942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68ba      	ldr	r2, [r7, #8]
 800494a:	0151      	lsls	r1, r2, #5
 800494c:	68fa      	ldr	r2, [r7, #12]
 800494e:	440a      	add	r2, r1
 8004950:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004954:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004958:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	015a      	lsls	r2, r3, #5
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	4413      	add	r3, r2
 8004962:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	68ba      	ldr	r2, [r7, #8]
 800496a:	0151      	lsls	r1, r2, #5
 800496c:	68fa      	ldr	r2, [r7, #12]
 800496e:	440a      	add	r2, r1
 8004970:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004974:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004978:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800497a:	2300      	movs	r3, #0
}
 800497c:	4618      	mov	r0, r3
 800497e:	3714      	adds	r7, #20
 8004980:	46bd      	mov	sp, r7
 8004982:	bc80      	pop	{r7}
 8004984:	4770      	bx	lr

08004986 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004986:	b480      	push	{r7}
 8004988:	b085      	sub	sp, #20
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
 800498e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	785b      	ldrb	r3, [r3, #1]
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d128      	bne.n	80049f4 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	015a      	lsls	r2, r3, #5
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	4413      	add	r3, r2
 80049aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	68ba      	ldr	r2, [r7, #8]
 80049b2:	0151      	lsls	r1, r2, #5
 80049b4:	68fa      	ldr	r2, [r7, #12]
 80049b6:	440a      	add	r2, r1
 80049b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049bc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80049c0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	78db      	ldrb	r3, [r3, #3]
 80049c6:	2b03      	cmp	r3, #3
 80049c8:	d003      	beq.n	80049d2 <USB_EPClearStall+0x4c>
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	78db      	ldrb	r3, [r3, #3]
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d138      	bne.n	8004a44 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	015a      	lsls	r2, r3, #5
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	4413      	add	r3, r2
 80049da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	68ba      	ldr	r2, [r7, #8]
 80049e2:	0151      	lsls	r1, r2, #5
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	440a      	add	r2, r1
 80049e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049f0:	6013      	str	r3, [r2, #0]
 80049f2:	e027      	b.n	8004a44 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	015a      	lsls	r2, r3, #5
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	4413      	add	r3, r2
 80049fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68ba      	ldr	r2, [r7, #8]
 8004a04:	0151      	lsls	r1, r2, #5
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	440a      	add	r2, r1
 8004a0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a0e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004a12:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	78db      	ldrb	r3, [r3, #3]
 8004a18:	2b03      	cmp	r3, #3
 8004a1a:	d003      	beq.n	8004a24 <USB_EPClearStall+0x9e>
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	78db      	ldrb	r3, [r3, #3]
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	d10f      	bne.n	8004a44 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	015a      	lsls	r2, r3, #5
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	4413      	add	r3, r2
 8004a2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68ba      	ldr	r2, [r7, #8]
 8004a34:	0151      	lsls	r1, r2, #5
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	440a      	add	r2, r1
 8004a3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a42:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3714      	adds	r7, #20
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bc80      	pop	{r7}
 8004a4e:	4770      	bx	lr

08004a50 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b085      	sub	sp, #20
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	460b      	mov	r3, r1
 8004a5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	68fa      	ldr	r2, [r7, #12]
 8004a6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a6e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004a72:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	78fb      	ldrb	r3, [r7, #3]
 8004a7e:	011b      	lsls	r3, r3, #4
 8004a80:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004a84:	68f9      	ldr	r1, [r7, #12]
 8004a86:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3714      	adds	r7, #20
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bc80      	pop	{r7}
 8004a98:	4770      	bx	lr

08004a9a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004a9a:	b480      	push	{r7}
 8004a9c:	b085      	sub	sp, #20
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	68fa      	ldr	r2, [r7, #12]
 8004ab0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004ab4:	f023 0303 	bic.w	r3, r3, #3
 8004ab8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	68fa      	ldr	r2, [r7, #12]
 8004ac4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ac8:	f023 0302 	bic.w	r3, r3, #2
 8004acc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004ace:	2300      	movs	r3, #0
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3714      	adds	r7, #20
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bc80      	pop	{r7}
 8004ad8:	4770      	bx	lr

08004ada <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004ada:	b480      	push	{r7}
 8004adc:	b085      	sub	sp, #20
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68fa      	ldr	r2, [r7, #12]
 8004af0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004af4:	f023 0303 	bic.w	r3, r3, #3
 8004af8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b08:	f043 0302 	orr.w	r3, r3, #2
 8004b0c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004b0e:	2300      	movs	r3, #0
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3714      	adds	r7, #20
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bc80      	pop	{r7}
 8004b18:	4770      	bx	lr

08004b1a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004b1a:	b480      	push	{r7}
 8004b1c:	b085      	sub	sp, #20
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	695b      	ldr	r3, [r3, #20]
 8004b26:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	699b      	ldr	r3, [r3, #24]
 8004b2c:	68fa      	ldr	r2, [r7, #12]
 8004b2e:	4013      	ands	r3, r2
 8004b30:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004b32:	68fb      	ldr	r3, [r7, #12]
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3714      	adds	r7, #20
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bc80      	pop	{r7}
 8004b3c:	4770      	bx	lr

08004b3e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b3e:	b480      	push	{r7}
 8004b40:	b085      	sub	sp, #20
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b50:	699b      	ldr	r3, [r3, #24]
 8004b52:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b5a:	69db      	ldr	r3, [r3, #28]
 8004b5c:	68ba      	ldr	r2, [r7, #8]
 8004b5e:	4013      	ands	r3, r2
 8004b60:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	0c1b      	lsrs	r3, r3, #16
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3714      	adds	r7, #20
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bc80      	pop	{r7}
 8004b6e:	4770      	bx	lr

08004b70 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b085      	sub	sp, #20
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b82:	699b      	ldr	r3, [r3, #24]
 8004b84:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b8c:	69db      	ldr	r3, [r3, #28]
 8004b8e:	68ba      	ldr	r2, [r7, #8]
 8004b90:	4013      	ands	r3, r2
 8004b92:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	b29b      	uxth	r3, r3
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3714      	adds	r7, #20
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bc80      	pop	{r7}
 8004ba0:	4770      	bx	lr

08004ba2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004ba2:	b480      	push	{r7}
 8004ba4:	b085      	sub	sp, #20
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
 8004baa:	460b      	mov	r3, r1
 8004bac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004bb2:	78fb      	ldrb	r3, [r7, #3]
 8004bb4:	015a      	lsls	r2, r3, #5
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	4413      	add	r3, r2
 8004bba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bc8:	695b      	ldr	r3, [r3, #20]
 8004bca:	68ba      	ldr	r2, [r7, #8]
 8004bcc:	4013      	ands	r3, r2
 8004bce:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004bd0:	68bb      	ldr	r3, [r7, #8]
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3714      	adds	r7, #20
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bc80      	pop	{r7}
 8004bda:	4770      	bx	lr

08004bdc <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b087      	sub	sp, #28
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	460b      	mov	r3, r1
 8004be6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bf2:	691b      	ldr	r3, [r3, #16]
 8004bf4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bfe:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004c00:	78fb      	ldrb	r3, [r7, #3]
 8004c02:	f003 030f 	and.w	r3, r3, #15
 8004c06:	68fa      	ldr	r2, [r7, #12]
 8004c08:	fa22 f303 	lsr.w	r3, r2, r3
 8004c0c:	01db      	lsls	r3, r3, #7
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	693a      	ldr	r2, [r7, #16]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004c16:	78fb      	ldrb	r3, [r7, #3]
 8004c18:	015a      	lsls	r2, r3, #5
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	4413      	add	r3, r2
 8004c1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	693a      	ldr	r2, [r7, #16]
 8004c26:	4013      	ands	r3, r2
 8004c28:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004c2a:	68bb      	ldr	r3, [r7, #8]
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	371c      	adds	r7, #28
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bc80      	pop	{r7}
 8004c34:	4770      	bx	lr

08004c36 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004c36:	b480      	push	{r7}
 8004c38:	b083      	sub	sp, #12
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	695b      	ldr	r3, [r3, #20]
 8004c42:	f003 0301 	and.w	r3, r3, #1
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	370c      	adds	r7, #12
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bc80      	pop	{r7}
 8004c4e:	4770      	bx	lr

08004c50 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b085      	sub	sp, #20
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	68fa      	ldr	r2, [r7, #12]
 8004c66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c6a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004c6e:	f023 0307 	bic.w	r3, r3, #7
 8004c72:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	68fa      	ldr	r2, [r7, #12]
 8004c7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c86:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3714      	adds	r7, #20
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bc80      	pop	{r7}
 8004c92:	4770      	bx	lr

08004c94 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b087      	sub	sp, #28
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	460b      	mov	r3, r1
 8004c9e:	607a      	str	r2, [r7, #4]
 8004ca0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	333c      	adds	r3, #60	; 0x3c
 8004caa:	3304      	adds	r3, #4
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	4a25      	ldr	r2, [pc, #148]	; (8004d48 <USB_EP0_OutStart+0xb4>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d90a      	bls.n	8004cce <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004cc4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004cc8:	d101      	bne.n	8004cce <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	e037      	b.n	8004d3e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	697a      	ldr	r2, [r7, #20]
 8004ce4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ce8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004cec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	697a      	ldr	r2, [r7, #20]
 8004cf8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cfc:	f043 0318 	orr.w	r3, r3, #24
 8004d00:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	697a      	ldr	r2, [r7, #20]
 8004d0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d10:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004d14:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004d16:	7afb      	ldrb	r3, [r7, #11]
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d10f      	bne.n	8004d3c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d22:	461a      	mov	r2, r3
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	697a      	ldr	r2, [r7, #20]
 8004d32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d36:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004d3a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	371c      	adds	r7, #28
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bc80      	pop	{r7}
 8004d46:	4770      	bx	lr
 8004d48:	4f54300a 	.word	0x4f54300a

08004d4c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b085      	sub	sp, #20
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004d54:	2300      	movs	r3, #0
 8004d56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	3301      	adds	r3, #1
 8004d5c:	60fb      	str	r3, [r7, #12]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	4a12      	ldr	r2, [pc, #72]	; (8004dac <USB_CoreReset+0x60>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d901      	bls.n	8004d6a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	e01b      	b.n	8004da2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	691b      	ldr	r3, [r3, #16]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	daf2      	bge.n	8004d58 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004d72:	2300      	movs	r3, #0
 8004d74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	f043 0201 	orr.w	r2, r3, #1
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	3301      	adds	r3, #1
 8004d86:	60fb      	str	r3, [r7, #12]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	4a08      	ldr	r2, [pc, #32]	; (8004dac <USB_CoreReset+0x60>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d901      	bls.n	8004d94 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	e006      	b.n	8004da2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	691b      	ldr	r3, [r3, #16]
 8004d98:	f003 0301 	and.w	r3, r3, #1
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d0f0      	beq.n	8004d82 <USB_CoreReset+0x36>

  return HAL_OK;
 8004da0:	2300      	movs	r3, #0
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3714      	adds	r7, #20
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bc80      	pop	{r7}
 8004daa:	4770      	bx	lr
 8004dac:	00030d40 	.word	0x00030d40

08004db0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	460b      	mov	r3, r1
 8004dba:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	7c1b      	ldrb	r3, [r3, #16]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d115      	bne.n	8004df4 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004dc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004dcc:	2202      	movs	r2, #2
 8004dce:	2181      	movs	r1, #129	; 0x81
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f001 fedc 	bl	8006b8e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2201      	movs	r2, #1
 8004dda:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004ddc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004de0:	2202      	movs	r2, #2
 8004de2:	2101      	movs	r1, #1
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f001 fed2 	bl	8006b8e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2201      	movs	r2, #1
 8004dee:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8004df2:	e012      	b.n	8004e1a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004df4:	2340      	movs	r3, #64	; 0x40
 8004df6:	2202      	movs	r2, #2
 8004df8:	2181      	movs	r1, #129	; 0x81
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f001 fec7 	bl	8006b8e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004e06:	2340      	movs	r3, #64	; 0x40
 8004e08:	2202      	movs	r2, #2
 8004e0a:	2101      	movs	r1, #1
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f001 febe 	bl	8006b8e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2201      	movs	r2, #1
 8004e16:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004e1a:	2308      	movs	r3, #8
 8004e1c:	2203      	movs	r2, #3
 8004e1e:	2182      	movs	r1, #130	; 0x82
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f001 feb4 	bl	8006b8e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2201      	movs	r2, #1
 8004e2a:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004e2c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004e30:	f002 f82a 	bl	8006e88 <malloc>
 8004e34:	4603      	mov	r3, r0
 8004e36:	461a      	mov	r2, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d102      	bne.n	8004e4e <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	73fb      	strb	r3, [r7, #15]
 8004e4c:	e026      	b.n	8004e9c <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e54:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	2200      	movs	r2, #0
 8004e64:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	7c1b      	ldrb	r3, [r3, #16]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d109      	bne.n	8004e8c <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004e7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e82:	2101      	movs	r1, #1
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f001 ff72 	bl	8006d6e <USBD_LL_PrepareReceive>
 8004e8a:	e007      	b.n	8004e9c <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004e92:	2340      	movs	r3, #64	; 0x40
 8004e94:	2101      	movs	r1, #1
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f001 ff69 	bl	8006d6e <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8004e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3710      	adds	r7, #16
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}

08004ea6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004ea6:	b580      	push	{r7, lr}
 8004ea8:	b084      	sub	sp, #16
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
 8004eae:	460b      	mov	r3, r1
 8004eb0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004eb6:	2181      	movs	r1, #129	; 0x81
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f001 fe8e 	bl	8006bda <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004ec4:	2101      	movs	r1, #1
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f001 fe87 	bl	8006bda <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004ed4:	2182      	movs	r1, #130	; 0x82
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f001 fe7f 	bl	8006bda <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d00e      	beq.n	8004f0a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004efc:	4618      	mov	r0, r3
 8004efe:	f001 ffcb 	bl	8006e98 <free>
    pdev->pClassData = NULL;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8004f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3710      	adds	r7, #16
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b086      	sub	sp, #24
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f24:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8004f26:	2300      	movs	r3, #0
 8004f28:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d039      	beq.n	8004fb2 <USBD_CDC_Setup+0x9e>
 8004f3e:	2b20      	cmp	r3, #32
 8004f40:	d17c      	bne.n	800503c <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	88db      	ldrh	r3, [r3, #6]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d029      	beq.n	8004f9e <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	b25b      	sxtb	r3, r3
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	da11      	bge.n	8004f78 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	683a      	ldr	r2, [r7, #0]
 8004f5e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8004f60:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004f62:	683a      	ldr	r2, [r7, #0]
 8004f64:	88d2      	ldrh	r2, [r2, #6]
 8004f66:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004f68:	6939      	ldr	r1, [r7, #16]
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	88db      	ldrh	r3, [r3, #6]
 8004f6e:	461a      	mov	r2, r3
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f001 fa03 	bl	800637c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8004f76:	e068      	b.n	800504a <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	785a      	ldrb	r2, [r3, #1]
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	88db      	ldrh	r3, [r3, #6]
 8004f86:	b2da      	uxtb	r2, r3
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004f8e:	6939      	ldr	r1, [r7, #16]
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	88db      	ldrh	r3, [r3, #6]
 8004f94:	461a      	mov	r2, r3
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f001 fa1e 	bl	80063d8 <USBD_CtlPrepareRx>
      break;
 8004f9c:	e055      	b.n	800504a <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	683a      	ldr	r2, [r7, #0]
 8004fa8:	7850      	ldrb	r0, [r2, #1]
 8004faa:	2200      	movs	r2, #0
 8004fac:	6839      	ldr	r1, [r7, #0]
 8004fae:	4798      	blx	r3
      break;
 8004fb0:	e04b      	b.n	800504a <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	785b      	ldrb	r3, [r3, #1]
 8004fb6:	2b0a      	cmp	r3, #10
 8004fb8:	d017      	beq.n	8004fea <USBD_CDC_Setup+0xd6>
 8004fba:	2b0b      	cmp	r3, #11
 8004fbc:	d029      	beq.n	8005012 <USBD_CDC_Setup+0xfe>
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d133      	bne.n	800502a <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004fc8:	2b03      	cmp	r3, #3
 8004fca:	d107      	bne.n	8004fdc <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8004fcc:	f107 030c 	add.w	r3, r7, #12
 8004fd0:	2202      	movs	r2, #2
 8004fd2:	4619      	mov	r1, r3
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f001 f9d1 	bl	800637c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004fda:	e02e      	b.n	800503a <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8004fdc:	6839      	ldr	r1, [r7, #0]
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f001 f962 	bl	80062a8 <USBD_CtlError>
            ret = USBD_FAIL;
 8004fe4:	2302      	movs	r3, #2
 8004fe6:	75fb      	strb	r3, [r7, #23]
          break;
 8004fe8:	e027      	b.n	800503a <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ff0:	2b03      	cmp	r3, #3
 8004ff2:	d107      	bne.n	8005004 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8004ff4:	f107 030f 	add.w	r3, r7, #15
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	4619      	mov	r1, r3
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f001 f9bd 	bl	800637c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005002:	e01a      	b.n	800503a <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8005004:	6839      	ldr	r1, [r7, #0]
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f001 f94e 	bl	80062a8 <USBD_CtlError>
            ret = USBD_FAIL;
 800500c:	2302      	movs	r3, #2
 800500e:	75fb      	strb	r3, [r7, #23]
          break;
 8005010:	e013      	b.n	800503a <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005018:	2b03      	cmp	r3, #3
 800501a:	d00d      	beq.n	8005038 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 800501c:	6839      	ldr	r1, [r7, #0]
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f001 f942 	bl	80062a8 <USBD_CtlError>
            ret = USBD_FAIL;
 8005024:	2302      	movs	r3, #2
 8005026:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005028:	e006      	b.n	8005038 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 800502a:	6839      	ldr	r1, [r7, #0]
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f001 f93b 	bl	80062a8 <USBD_CtlError>
          ret = USBD_FAIL;
 8005032:	2302      	movs	r3, #2
 8005034:	75fb      	strb	r3, [r7, #23]
          break;
 8005036:	e000      	b.n	800503a <USBD_CDC_Setup+0x126>
          break;
 8005038:	bf00      	nop
      }
      break;
 800503a:	e006      	b.n	800504a <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 800503c:	6839      	ldr	r1, [r7, #0]
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f001 f932 	bl	80062a8 <USBD_CtlError>
      ret = USBD_FAIL;
 8005044:	2302      	movs	r3, #2
 8005046:	75fb      	strb	r3, [r7, #23]
      break;
 8005048:	bf00      	nop
  }

  return ret;
 800504a:	7dfb      	ldrb	r3, [r7, #23]
}
 800504c:	4618      	mov	r0, r3
 800504e:	3718      	adds	r7, #24
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b084      	sub	sp, #16
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	460b      	mov	r3, r1
 800505e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005066:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800506e:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005076:	2b00      	cmp	r3, #0
 8005078:	d03a      	beq.n	80050f0 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800507a:	78fa      	ldrb	r2, [r7, #3]
 800507c:	6879      	ldr	r1, [r7, #4]
 800507e:	4613      	mov	r3, r2
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	4413      	add	r3, r2
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	440b      	add	r3, r1
 8005088:	331c      	adds	r3, #28
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d029      	beq.n	80050e4 <USBD_CDC_DataIn+0x90>
 8005090:	78fa      	ldrb	r2, [r7, #3]
 8005092:	6879      	ldr	r1, [r7, #4]
 8005094:	4613      	mov	r3, r2
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	4413      	add	r3, r2
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	440b      	add	r3, r1
 800509e:	331c      	adds	r3, #28
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	78f9      	ldrb	r1, [r7, #3]
 80050a4:	68b8      	ldr	r0, [r7, #8]
 80050a6:	460b      	mov	r3, r1
 80050a8:	00db      	lsls	r3, r3, #3
 80050aa:	1a5b      	subs	r3, r3, r1
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	4403      	add	r3, r0
 80050b0:	3344      	adds	r3, #68	; 0x44
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	fbb2 f1f3 	udiv	r1, r2, r3
 80050b8:	fb03 f301 	mul.w	r3, r3, r1
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d110      	bne.n	80050e4 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80050c2:	78fa      	ldrb	r2, [r7, #3]
 80050c4:	6879      	ldr	r1, [r7, #4]
 80050c6:	4613      	mov	r3, r2
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	4413      	add	r3, r2
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	440b      	add	r3, r1
 80050d0:	331c      	adds	r3, #28
 80050d2:	2200      	movs	r2, #0
 80050d4:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80050d6:	78f9      	ldrb	r1, [r7, #3]
 80050d8:	2300      	movs	r3, #0
 80050da:	2200      	movs	r2, #0
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f001 fe23 	bl	8006d28 <USBD_LL_Transmit>
 80050e2:	e003      	b.n	80050ec <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80050ec:	2300      	movs	r3, #0
 80050ee:	e000      	b.n	80050f2 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80050f0:	2302      	movs	r3, #2
  }
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3710      	adds	r7, #16
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}

080050fa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80050fa:	b580      	push	{r7, lr}
 80050fc:	b084      	sub	sp, #16
 80050fe:	af00      	add	r7, sp, #0
 8005100:	6078      	str	r0, [r7, #4]
 8005102:	460b      	mov	r3, r1
 8005104:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800510c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800510e:	78fb      	ldrb	r3, [r7, #3]
 8005110:	4619      	mov	r1, r3
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f001 fe4e 	bl	8006db4 <USBD_LL_GetRxDataSize>
 8005118:	4602      	mov	r2, r0
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005126:	2b00      	cmp	r3, #0
 8005128:	d00d      	beq.n	8005146 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	68fa      	ldr	r2, [r7, #12]
 8005134:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005138:	68fa      	ldr	r2, [r7, #12]
 800513a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800513e:	4611      	mov	r1, r2
 8005140:	4798      	blx	r3

    return USBD_OK;
 8005142:	2300      	movs	r3, #0
 8005144:	e000      	b.n	8005148 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8005146:	2302      	movs	r3, #2
  }
}
 8005148:	4618      	mov	r0, r3
 800514a:	3710      	adds	r7, #16
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}

08005150 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800515e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005166:	2b00      	cmp	r3, #0
 8005168:	d015      	beq.n	8005196 <USBD_CDC_EP0_RxReady+0x46>
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005170:	2bff      	cmp	r3, #255	; 0xff
 8005172:	d010      	beq.n	8005196 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	68fa      	ldr	r2, [r7, #12]
 800517e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8005182:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005184:	68fa      	ldr	r2, [r7, #12]
 8005186:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800518a:	b292      	uxth	r2, r2
 800518c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	22ff      	movs	r2, #255	; 0xff
 8005192:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8005196:	2300      	movs	r3, #0
}
 8005198:	4618      	mov	r0, r3
 800519a:	3710      	adds	r7, #16
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}

080051a0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b083      	sub	sp, #12
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2243      	movs	r2, #67	; 0x43
 80051ac:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80051ae:	4b03      	ldr	r3, [pc, #12]	; (80051bc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	370c      	adds	r7, #12
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bc80      	pop	{r7}
 80051b8:	4770      	bx	lr
 80051ba:	bf00      	nop
 80051bc:	20000094 	.word	0x20000094

080051c0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b083      	sub	sp, #12
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2243      	movs	r2, #67	; 0x43
 80051cc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80051ce:	4b03      	ldr	r3, [pc, #12]	; (80051dc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	370c      	adds	r7, #12
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bc80      	pop	{r7}
 80051d8:	4770      	bx	lr
 80051da:	bf00      	nop
 80051dc:	20000050 	.word	0x20000050

080051e0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2243      	movs	r2, #67	; 0x43
 80051ec:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80051ee:	4b03      	ldr	r3, [pc, #12]	; (80051fc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	370c      	adds	r7, #12
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bc80      	pop	{r7}
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop
 80051fc:	200000d8 	.word	0x200000d8

08005200 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	220a      	movs	r2, #10
 800520c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800520e:	4b03      	ldr	r3, [pc, #12]	; (800521c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005210:	4618      	mov	r0, r3
 8005212:	370c      	adds	r7, #12
 8005214:	46bd      	mov	sp, r7
 8005216:	bc80      	pop	{r7}
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	2000000c 	.word	0x2000000c

08005220 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8005220:	b480      	push	{r7}
 8005222:	b085      	sub	sp, #20
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800522a:	2302      	movs	r3, #2
 800522c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d005      	beq.n	8005240 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	683a      	ldr	r2, [r7, #0]
 8005238:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800523c:	2300      	movs	r3, #0
 800523e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005240:	7bfb      	ldrb	r3, [r7, #15]
}
 8005242:	4618      	mov	r0, r3
 8005244:	3714      	adds	r7, #20
 8005246:	46bd      	mov	sp, r7
 8005248:	bc80      	pop	{r7}
 800524a:	4770      	bx	lr

0800524c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800524c:	b480      	push	{r7}
 800524e:	b087      	sub	sp, #28
 8005250:	af00      	add	r7, sp, #0
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	60b9      	str	r1, [r7, #8]
 8005256:	4613      	mov	r3, r2
 8005258:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005260:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	68ba      	ldr	r2, [r7, #8]
 8005266:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800526a:	88fa      	ldrh	r2, [r7, #6]
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8005272:	2300      	movs	r3, #0
}
 8005274:	4618      	mov	r0, r3
 8005276:	371c      	adds	r7, #28
 8005278:	46bd      	mov	sp, r7
 800527a:	bc80      	pop	{r7}
 800527c:	4770      	bx	lr

0800527e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800527e:	b480      	push	{r7}
 8005280:	b085      	sub	sp, #20
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
 8005286:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800528e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	683a      	ldr	r2, [r7, #0]
 8005294:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8005298:	2300      	movs	r3, #0
}
 800529a:	4618      	mov	r0, r3
 800529c:	3714      	adds	r7, #20
 800529e:	46bd      	mov	sp, r7
 80052a0:	bc80      	pop	{r7}
 80052a2:	4770      	bx	lr

080052a4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b084      	sub	sp, #16
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052b2:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d017      	beq.n	80052ee <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	7c1b      	ldrb	r3, [r3, #16]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d109      	bne.n	80052da <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80052cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052d0:	2101      	movs	r1, #1
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f001 fd4b 	bl	8006d6e <USBD_LL_PrepareReceive>
 80052d8:	e007      	b.n	80052ea <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80052e0:	2340      	movs	r3, #64	; 0x40
 80052e2:	2101      	movs	r1, #1
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f001 fd42 	bl	8006d6e <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80052ea:	2300      	movs	r3, #0
 80052ec:	e000      	b.n	80052f0 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80052ee:	2302      	movs	r3, #2
  }
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3710      	adds	r7, #16
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}

080052f8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b084      	sub	sp, #16
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	60b9      	str	r1, [r7, #8]
 8005302:	4613      	mov	r3, r2
 8005304:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d101      	bne.n	8005310 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800530c:	2302      	movs	r3, #2
 800530e:	e01a      	b.n	8005346 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005316:	2b00      	cmp	r3, #0
 8005318:	d003      	beq.n	8005322 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2200      	movs	r2, #0
 800531e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d003      	beq.n	8005330 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	68ba      	ldr	r2, [r7, #8]
 800532c:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	79fa      	ldrb	r2, [r7, #7]
 800533c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800533e:	68f8      	ldr	r0, [r7, #12]
 8005340:	f001 fbc0 	bl	8006ac4 <USBD_LL_Init>

  return USBD_OK;
 8005344:	2300      	movs	r3, #0
}
 8005346:	4618      	mov	r0, r3
 8005348:	3710      	adds	r7, #16
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}

0800534e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800534e:	b480      	push	{r7}
 8005350:	b085      	sub	sp, #20
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
 8005356:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005358:	2300      	movs	r3, #0
 800535a:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d006      	beq.n	8005370 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	683a      	ldr	r2, [r7, #0]
 8005366:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800536a:	2300      	movs	r3, #0
 800536c:	73fb      	strb	r3, [r7, #15]
 800536e:	e001      	b.n	8005374 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005370:	2302      	movs	r3, #2
 8005372:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005374:	7bfb      	ldrb	r3, [r7, #15]
}
 8005376:	4618      	mov	r0, r3
 8005378:	3714      	adds	r7, #20
 800537a:	46bd      	mov	sp, r7
 800537c:	bc80      	pop	{r7}
 800537e:	4770      	bx	lr

08005380 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b082      	sub	sp, #8
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f001 fbe5 	bl	8006b58 <USBD_LL_Start>

  return USBD_OK;
 800538e:	2300      	movs	r3, #0
}
 8005390:	4618      	mov	r0, r3
 8005392:	3708      	adds	r7, #8
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}

08005398 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005398:	b480      	push	{r7}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	370c      	adds	r7, #12
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bc80      	pop	{r7}
 80053aa:	4770      	bx	lr

080053ac <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b084      	sub	sp, #16
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	460b      	mov	r3, r1
 80053b6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80053b8:	2302      	movs	r3, #2
 80053ba:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00c      	beq.n	80053e0 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	78fa      	ldrb	r2, [r7, #3]
 80053d0:	4611      	mov	r1, r2
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	4798      	blx	r3
 80053d6:	4603      	mov	r3, r0
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d101      	bne.n	80053e0 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80053dc:	2300      	movs	r3, #0
 80053de:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80053e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3710      	adds	r7, #16
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}

080053ea <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80053ea:	b580      	push	{r7, lr}
 80053ec:	b082      	sub	sp, #8
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	6078      	str	r0, [r7, #4]
 80053f2:	460b      	mov	r3, r1
 80053f4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	78fa      	ldrb	r2, [r7, #3]
 8005400:	4611      	mov	r1, r2
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	4798      	blx	r3

  return USBD_OK;
 8005406:	2300      	movs	r3, #0
}
 8005408:	4618      	mov	r0, r3
 800540a:	3708      	adds	r7, #8
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}

08005410 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b082      	sub	sp, #8
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005420:	6839      	ldr	r1, [r7, #0]
 8005422:	4618      	mov	r0, r3
 8005424:	f000 ff04 	bl	8006230 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005436:	461a      	mov	r2, r3
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005444:	f003 031f 	and.w	r3, r3, #31
 8005448:	2b01      	cmp	r3, #1
 800544a:	d00c      	beq.n	8005466 <USBD_LL_SetupStage+0x56>
 800544c:	2b01      	cmp	r3, #1
 800544e:	d302      	bcc.n	8005456 <USBD_LL_SetupStage+0x46>
 8005450:	2b02      	cmp	r3, #2
 8005452:	d010      	beq.n	8005476 <USBD_LL_SetupStage+0x66>
 8005454:	e017      	b.n	8005486 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800545c:	4619      	mov	r1, r3
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 fa04 	bl	800586c <USBD_StdDevReq>
      break;
 8005464:	e01a      	b.n	800549c <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800546c:	4619      	mov	r1, r3
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 fa66 	bl	8005940 <USBD_StdItfReq>
      break;
 8005474:	e012      	b.n	800549c <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800547c:	4619      	mov	r1, r3
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 faa4 	bl	80059cc <USBD_StdEPReq>
      break;
 8005484:	e00a      	b.n	800549c <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800548c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005490:	b2db      	uxtb	r3, r3
 8005492:	4619      	mov	r1, r3
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f001 fbbf 	bl	8006c18 <USBD_LL_StallEP>
      break;
 800549a:	bf00      	nop
  }

  return USBD_OK;
 800549c:	2300      	movs	r3, #0
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3708      	adds	r7, #8
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}

080054a6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80054a6:	b580      	push	{r7, lr}
 80054a8:	b086      	sub	sp, #24
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	60f8      	str	r0, [r7, #12]
 80054ae:	460b      	mov	r3, r1
 80054b0:	607a      	str	r2, [r7, #4]
 80054b2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80054b4:	7afb      	ldrb	r3, [r7, #11]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d14b      	bne.n	8005552 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80054c0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80054c8:	2b03      	cmp	r3, #3
 80054ca:	d134      	bne.n	8005536 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	68da      	ldr	r2, [r3, #12]
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	691b      	ldr	r3, [r3, #16]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d919      	bls.n	800550c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	68da      	ldr	r2, [r3, #12]
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	691b      	ldr	r3, [r3, #16]
 80054e0:	1ad2      	subs	r2, r2, r3
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	68da      	ldr	r2, [r3, #12]
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80054ee:	429a      	cmp	r2, r3
 80054f0:	d203      	bcs.n	80054fa <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	e002      	b.n	8005500 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80054fe:	b29b      	uxth	r3, r3
 8005500:	461a      	mov	r2, r3
 8005502:	6879      	ldr	r1, [r7, #4]
 8005504:	68f8      	ldr	r0, [r7, #12]
 8005506:	f000 ff85 	bl	8006414 <USBD_CtlContinueRx>
 800550a:	e038      	b.n	800557e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005512:	691b      	ldr	r3, [r3, #16]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d00a      	beq.n	800552e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800551e:	2b03      	cmp	r3, #3
 8005520:	d105      	bne.n	800552e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005528:	691b      	ldr	r3, [r3, #16]
 800552a:	68f8      	ldr	r0, [r7, #12]
 800552c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800552e:	68f8      	ldr	r0, [r7, #12]
 8005530:	f000 ff82 	bl	8006438 <USBD_CtlSendStatus>
 8005534:	e023      	b.n	800557e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800553c:	2b05      	cmp	r3, #5
 800553e:	d11e      	bne.n	800557e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2200      	movs	r2, #0
 8005544:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8005548:	2100      	movs	r1, #0
 800554a:	68f8      	ldr	r0, [r7, #12]
 800554c:	f001 fb64 	bl	8006c18 <USBD_LL_StallEP>
 8005550:	e015      	b.n	800557e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005558:	699b      	ldr	r3, [r3, #24]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00d      	beq.n	800557a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005564:	2b03      	cmp	r3, #3
 8005566:	d108      	bne.n	800557a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800556e:	699b      	ldr	r3, [r3, #24]
 8005570:	7afa      	ldrb	r2, [r7, #11]
 8005572:	4611      	mov	r1, r2
 8005574:	68f8      	ldr	r0, [r7, #12]
 8005576:	4798      	blx	r3
 8005578:	e001      	b.n	800557e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800557a:	2302      	movs	r3, #2
 800557c:	e000      	b.n	8005580 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800557e:	2300      	movs	r3, #0
}
 8005580:	4618      	mov	r0, r3
 8005582:	3718      	adds	r7, #24
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}

08005588 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b086      	sub	sp, #24
 800558c:	af00      	add	r7, sp, #0
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	460b      	mov	r3, r1
 8005592:	607a      	str	r2, [r7, #4]
 8005594:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005596:	7afb      	ldrb	r3, [r7, #11]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d17f      	bne.n	800569c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	3314      	adds	r3, #20
 80055a0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80055a8:	2b02      	cmp	r3, #2
 80055aa:	d15c      	bne.n	8005666 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	68da      	ldr	r2, [r3, #12]
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	691b      	ldr	r3, [r3, #16]
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d915      	bls.n	80055e4 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	68da      	ldr	r2, [r3, #12]
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	691b      	ldr	r3, [r3, #16]
 80055c0:	1ad2      	subs	r2, r2, r3
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	461a      	mov	r2, r3
 80055ce:	6879      	ldr	r1, [r7, #4]
 80055d0:	68f8      	ldr	r0, [r7, #12]
 80055d2:	f000 feef 	bl	80063b4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80055d6:	2300      	movs	r3, #0
 80055d8:	2200      	movs	r2, #0
 80055da:	2100      	movs	r1, #0
 80055dc:	68f8      	ldr	r0, [r7, #12]
 80055de:	f001 fbc6 	bl	8006d6e <USBD_LL_PrepareReceive>
 80055e2:	e04e      	b.n	8005682 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	697a      	ldr	r2, [r7, #20]
 80055ea:	6912      	ldr	r2, [r2, #16]
 80055ec:	fbb3 f1f2 	udiv	r1, r3, r2
 80055f0:	fb02 f201 	mul.w	r2, r2, r1
 80055f4:	1a9b      	subs	r3, r3, r2
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d11c      	bne.n	8005634 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	689a      	ldr	r2, [r3, #8]
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005602:	429a      	cmp	r2, r3
 8005604:	d316      	bcc.n	8005634 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	689a      	ldr	r2, [r3, #8]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005610:	429a      	cmp	r2, r3
 8005612:	d20f      	bcs.n	8005634 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005614:	2200      	movs	r2, #0
 8005616:	2100      	movs	r1, #0
 8005618:	68f8      	ldr	r0, [r7, #12]
 800561a:	f000 fecb 	bl	80063b4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2200      	movs	r2, #0
 8005622:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005626:	2300      	movs	r3, #0
 8005628:	2200      	movs	r2, #0
 800562a:	2100      	movs	r1, #0
 800562c:	68f8      	ldr	r0, [r7, #12]
 800562e:	f001 fb9e 	bl	8006d6e <USBD_LL_PrepareReceive>
 8005632:	e026      	b.n	8005682 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d00a      	beq.n	8005656 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005646:	2b03      	cmp	r3, #3
 8005648:	d105      	bne.n	8005656 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	68f8      	ldr	r0, [r7, #12]
 8005654:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8005656:	2180      	movs	r1, #128	; 0x80
 8005658:	68f8      	ldr	r0, [r7, #12]
 800565a:	f001 fadd 	bl	8006c18 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800565e:	68f8      	ldr	r0, [r7, #12]
 8005660:	f000 fefd 	bl	800645e <USBD_CtlReceiveStatus>
 8005664:	e00d      	b.n	8005682 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800566c:	2b04      	cmp	r3, #4
 800566e:	d004      	beq.n	800567a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005676:	2b00      	cmp	r3, #0
 8005678:	d103      	bne.n	8005682 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800567a:	2180      	movs	r1, #128	; 0x80
 800567c:	68f8      	ldr	r0, [r7, #12]
 800567e:	f001 facb 	bl	8006c18 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005688:	2b01      	cmp	r3, #1
 800568a:	d11d      	bne.n	80056c8 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800568c:	68f8      	ldr	r0, [r7, #12]
 800568e:	f7ff fe83 	bl	8005398 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2200      	movs	r2, #0
 8005696:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800569a:	e015      	b.n	80056c8 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056a2:	695b      	ldr	r3, [r3, #20]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d00d      	beq.n	80056c4 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80056ae:	2b03      	cmp	r3, #3
 80056b0:	d108      	bne.n	80056c4 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056b8:	695b      	ldr	r3, [r3, #20]
 80056ba:	7afa      	ldrb	r2, [r7, #11]
 80056bc:	4611      	mov	r1, r2
 80056be:	68f8      	ldr	r0, [r7, #12]
 80056c0:	4798      	blx	r3
 80056c2:	e001      	b.n	80056c8 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80056c4:	2302      	movs	r3, #2
 80056c6:	e000      	b.n	80056ca <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80056c8:	2300      	movs	r3, #0
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3718      	adds	r7, #24
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}

080056d2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80056d2:	b580      	push	{r7, lr}
 80056d4:	b082      	sub	sp, #8
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80056da:	2340      	movs	r3, #64	; 0x40
 80056dc:	2200      	movs	r2, #0
 80056de:	2100      	movs	r1, #0
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f001 fa54 	bl	8006b8e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2201      	movs	r2, #1
 80056ea:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2240      	movs	r2, #64	; 0x40
 80056f2:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80056f6:	2340      	movs	r3, #64	; 0x40
 80056f8:	2200      	movs	r2, #0
 80056fa:	2180      	movs	r1, #128	; 0x80
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f001 fa46 	bl	8006b8e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2201      	movs	r2, #1
 8005706:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2240      	movs	r2, #64	; 0x40
 800570c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2201      	movs	r2, #1
 8005712:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005732:	2b00      	cmp	r3, #0
 8005734:	d009      	beq.n	800574a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	6852      	ldr	r2, [r2, #4]
 8005742:	b2d2      	uxtb	r2, r2
 8005744:	4611      	mov	r1, r2
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	4798      	blx	r3
  }

  return USBD_OK;
 800574a:	2300      	movs	r3, #0
}
 800574c:	4618      	mov	r0, r3
 800574e:	3708      	adds	r7, #8
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}

08005754 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005754:	b480      	push	{r7}
 8005756:	b083      	sub	sp, #12
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	460b      	mov	r3, r1
 800575e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	78fa      	ldrb	r2, [r7, #3]
 8005764:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005766:	2300      	movs	r3, #0
}
 8005768:	4618      	mov	r0, r3
 800576a:	370c      	adds	r7, #12
 800576c:	46bd      	mov	sp, r7
 800576e:	bc80      	pop	{r7}
 8005770:	4770      	bx	lr

08005772 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005772:	b480      	push	{r7}
 8005774:	b083      	sub	sp, #12
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2204      	movs	r2, #4
 800578a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800578e:	2300      	movs	r3, #0
}
 8005790:	4618      	mov	r0, r3
 8005792:	370c      	adds	r7, #12
 8005794:	46bd      	mov	sp, r7
 8005796:	bc80      	pop	{r7}
 8005798:	4770      	bx	lr

0800579a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800579a:	b480      	push	{r7}
 800579c:	b083      	sub	sp, #12
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057a8:	2b04      	cmp	r3, #4
 80057aa:	d105      	bne.n	80057b8 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	370c      	adds	r7, #12
 80057be:	46bd      	mov	sp, r7
 80057c0:	bc80      	pop	{r7}
 80057c2:	4770      	bx	lr

080057c4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b082      	sub	sp, #8
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057d2:	2b03      	cmp	r3, #3
 80057d4:	d10b      	bne.n	80057ee <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057dc:	69db      	ldr	r3, [r3, #28]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d005      	beq.n	80057ee <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057e8:	69db      	ldr	r3, [r3, #28]
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80057ee:	2300      	movs	r3, #0
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3708      	adds	r7, #8
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}

080057f8 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	460b      	mov	r3, r1
 8005802:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8005804:	2300      	movs	r3, #0
}
 8005806:	4618      	mov	r0, r3
 8005808:	370c      	adds	r7, #12
 800580a:	46bd      	mov	sp, r7
 800580c:	bc80      	pop	{r7}
 800580e:	4770      	bx	lr

08005810 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005810:	b480      	push	{r7}
 8005812:	b083      	sub	sp, #12
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	460b      	mov	r3, r1
 800581a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800581c:	2300      	movs	r3, #0
}
 800581e:	4618      	mov	r0, r3
 8005820:	370c      	adds	r7, #12
 8005822:	46bd      	mov	sp, r7
 8005824:	bc80      	pop	{r7}
 8005826:	4770      	bx	lr

08005828 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005828:	b480      	push	{r7}
 800582a:	b083      	sub	sp, #12
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005830:	2300      	movs	r3, #0
}
 8005832:	4618      	mov	r0, r3
 8005834:	370c      	adds	r7, #12
 8005836:	46bd      	mov	sp, r7
 8005838:	bc80      	pop	{r7}
 800583a:	4770      	bx	lr

0800583c <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b082      	sub	sp, #8
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	687a      	ldr	r2, [r7, #4]
 8005856:	6852      	ldr	r2, [r2, #4]
 8005858:	b2d2      	uxtb	r2, r2
 800585a:	4611      	mov	r1, r2
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	4798      	blx	r3

  return USBD_OK;
 8005860:	2300      	movs	r3, #0
}
 8005862:	4618      	mov	r0, r3
 8005864:	3708      	adds	r7, #8
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
	...

0800586c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005876:	2300      	movs	r3, #0
 8005878:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005882:	2b20      	cmp	r3, #32
 8005884:	d004      	beq.n	8005890 <USBD_StdDevReq+0x24>
 8005886:	2b40      	cmp	r3, #64	; 0x40
 8005888:	d002      	beq.n	8005890 <USBD_StdDevReq+0x24>
 800588a:	2b00      	cmp	r3, #0
 800588c:	d008      	beq.n	80058a0 <USBD_StdDevReq+0x34>
 800588e:	e04c      	b.n	800592a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	6839      	ldr	r1, [r7, #0]
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	4798      	blx	r3
      break;
 800589e:	e049      	b.n	8005934 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	785b      	ldrb	r3, [r3, #1]
 80058a4:	2b09      	cmp	r3, #9
 80058a6:	d83a      	bhi.n	800591e <USBD_StdDevReq+0xb2>
 80058a8:	a201      	add	r2, pc, #4	; (adr r2, 80058b0 <USBD_StdDevReq+0x44>)
 80058aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ae:	bf00      	nop
 80058b0:	08005901 	.word	0x08005901
 80058b4:	08005915 	.word	0x08005915
 80058b8:	0800591f 	.word	0x0800591f
 80058bc:	0800590b 	.word	0x0800590b
 80058c0:	0800591f 	.word	0x0800591f
 80058c4:	080058e3 	.word	0x080058e3
 80058c8:	080058d9 	.word	0x080058d9
 80058cc:	0800591f 	.word	0x0800591f
 80058d0:	080058f7 	.word	0x080058f7
 80058d4:	080058ed 	.word	0x080058ed
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80058d8:	6839      	ldr	r1, [r7, #0]
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 f9d4 	bl	8005c88 <USBD_GetDescriptor>
          break;
 80058e0:	e022      	b.n	8005928 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80058e2:	6839      	ldr	r1, [r7, #0]
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f000 fb37 	bl	8005f58 <USBD_SetAddress>
          break;
 80058ea:	e01d      	b.n	8005928 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80058ec:	6839      	ldr	r1, [r7, #0]
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f000 fb74 	bl	8005fdc <USBD_SetConfig>
          break;
 80058f4:	e018      	b.n	8005928 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80058f6:	6839      	ldr	r1, [r7, #0]
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f000 fbfd 	bl	80060f8 <USBD_GetConfig>
          break;
 80058fe:	e013      	b.n	8005928 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005900:	6839      	ldr	r1, [r7, #0]
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f000 fc2c 	bl	8006160 <USBD_GetStatus>
          break;
 8005908:	e00e      	b.n	8005928 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800590a:	6839      	ldr	r1, [r7, #0]
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f000 fc5a 	bl	80061c6 <USBD_SetFeature>
          break;
 8005912:	e009      	b.n	8005928 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005914:	6839      	ldr	r1, [r7, #0]
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 fc69 	bl	80061ee <USBD_ClrFeature>
          break;
 800591c:	e004      	b.n	8005928 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800591e:	6839      	ldr	r1, [r7, #0]
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f000 fcc1 	bl	80062a8 <USBD_CtlError>
          break;
 8005926:	bf00      	nop
      }
      break;
 8005928:	e004      	b.n	8005934 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800592a:	6839      	ldr	r1, [r7, #0]
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f000 fcbb 	bl	80062a8 <USBD_CtlError>
      break;
 8005932:	bf00      	nop
  }

  return ret;
 8005934:	7bfb      	ldrb	r3, [r7, #15]
}
 8005936:	4618      	mov	r0, r3
 8005938:	3710      	adds	r7, #16
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop

08005940 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b084      	sub	sp, #16
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800594a:	2300      	movs	r3, #0
 800594c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005956:	2b20      	cmp	r3, #32
 8005958:	d003      	beq.n	8005962 <USBD_StdItfReq+0x22>
 800595a:	2b40      	cmp	r3, #64	; 0x40
 800595c:	d001      	beq.n	8005962 <USBD_StdItfReq+0x22>
 800595e:	2b00      	cmp	r3, #0
 8005960:	d12a      	bne.n	80059b8 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005968:	3b01      	subs	r3, #1
 800596a:	2b02      	cmp	r3, #2
 800596c:	d81d      	bhi.n	80059aa <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	889b      	ldrh	r3, [r3, #4]
 8005972:	b2db      	uxtb	r3, r3
 8005974:	2b01      	cmp	r3, #1
 8005976:	d813      	bhi.n	80059a0 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	6839      	ldr	r1, [r7, #0]
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	4798      	blx	r3
 8005986:	4603      	mov	r3, r0
 8005988:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	88db      	ldrh	r3, [r3, #6]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d110      	bne.n	80059b4 <USBD_StdItfReq+0x74>
 8005992:	7bfb      	ldrb	r3, [r7, #15]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d10d      	bne.n	80059b4 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f000 fd4d 	bl	8006438 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800599e:	e009      	b.n	80059b4 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 80059a0:	6839      	ldr	r1, [r7, #0]
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f000 fc80 	bl	80062a8 <USBD_CtlError>
          break;
 80059a8:	e004      	b.n	80059b4 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 80059aa:	6839      	ldr	r1, [r7, #0]
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f000 fc7b 	bl	80062a8 <USBD_CtlError>
          break;
 80059b2:	e000      	b.n	80059b6 <USBD_StdItfReq+0x76>
          break;
 80059b4:	bf00      	nop
      }
      break;
 80059b6:	e004      	b.n	80059c2 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 80059b8:	6839      	ldr	r1, [r7, #0]
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f000 fc74 	bl	80062a8 <USBD_CtlError>
      break;
 80059c0:	bf00      	nop
  }

  return USBD_OK;
 80059c2:	2300      	movs	r3, #0
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3710      	adds	r7, #16
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}

080059cc <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b084      	sub	sp, #16
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80059d6:	2300      	movs	r3, #0
 80059d8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	889b      	ldrh	r3, [r3, #4]
 80059de:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80059e8:	2b20      	cmp	r3, #32
 80059ea:	d004      	beq.n	80059f6 <USBD_StdEPReq+0x2a>
 80059ec:	2b40      	cmp	r3, #64	; 0x40
 80059ee:	d002      	beq.n	80059f6 <USBD_StdEPReq+0x2a>
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d008      	beq.n	8005a06 <USBD_StdEPReq+0x3a>
 80059f4:	e13d      	b.n	8005c72 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	6839      	ldr	r1, [r7, #0]
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	4798      	blx	r3
      break;
 8005a04:	e13a      	b.n	8005c7c <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005a0e:	2b20      	cmp	r3, #32
 8005a10:	d10a      	bne.n	8005a28 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	6839      	ldr	r1, [r7, #0]
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	4798      	blx	r3
 8005a20:	4603      	mov	r3, r0
 8005a22:	73fb      	strb	r3, [r7, #15]

        return ret;
 8005a24:	7bfb      	ldrb	r3, [r7, #15]
 8005a26:	e12a      	b.n	8005c7e <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	785b      	ldrb	r3, [r3, #1]
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d03e      	beq.n	8005aae <USBD_StdEPReq+0xe2>
 8005a30:	2b03      	cmp	r3, #3
 8005a32:	d002      	beq.n	8005a3a <USBD_StdEPReq+0x6e>
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d070      	beq.n	8005b1a <USBD_StdEPReq+0x14e>
 8005a38:	e115      	b.n	8005c66 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a40:	2b02      	cmp	r3, #2
 8005a42:	d002      	beq.n	8005a4a <USBD_StdEPReq+0x7e>
 8005a44:	2b03      	cmp	r3, #3
 8005a46:	d015      	beq.n	8005a74 <USBD_StdEPReq+0xa8>
 8005a48:	e02b      	b.n	8005aa2 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005a4a:	7bbb      	ldrb	r3, [r7, #14]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d00c      	beq.n	8005a6a <USBD_StdEPReq+0x9e>
 8005a50:	7bbb      	ldrb	r3, [r7, #14]
 8005a52:	2b80      	cmp	r3, #128	; 0x80
 8005a54:	d009      	beq.n	8005a6a <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005a56:	7bbb      	ldrb	r3, [r7, #14]
 8005a58:	4619      	mov	r1, r3
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f001 f8dc 	bl	8006c18 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005a60:	2180      	movs	r1, #128	; 0x80
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f001 f8d8 	bl	8006c18 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005a68:	e020      	b.n	8005aac <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8005a6a:	6839      	ldr	r1, [r7, #0]
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f000 fc1b 	bl	80062a8 <USBD_CtlError>
              break;
 8005a72:	e01b      	b.n	8005aac <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	885b      	ldrh	r3, [r3, #2]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d10e      	bne.n	8005a9a <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8005a7c:	7bbb      	ldrb	r3, [r7, #14]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d00b      	beq.n	8005a9a <USBD_StdEPReq+0xce>
 8005a82:	7bbb      	ldrb	r3, [r7, #14]
 8005a84:	2b80      	cmp	r3, #128	; 0x80
 8005a86:	d008      	beq.n	8005a9a <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	88db      	ldrh	r3, [r3, #6]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d104      	bne.n	8005a9a <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8005a90:	7bbb      	ldrb	r3, [r7, #14]
 8005a92:	4619      	mov	r1, r3
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f001 f8bf 	bl	8006c18 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 fccc 	bl	8006438 <USBD_CtlSendStatus>

              break;
 8005aa0:	e004      	b.n	8005aac <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8005aa2:	6839      	ldr	r1, [r7, #0]
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f000 fbff 	bl	80062a8 <USBD_CtlError>
              break;
 8005aaa:	bf00      	nop
          }
          break;
 8005aac:	e0e0      	b.n	8005c70 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ab4:	2b02      	cmp	r3, #2
 8005ab6:	d002      	beq.n	8005abe <USBD_StdEPReq+0xf2>
 8005ab8:	2b03      	cmp	r3, #3
 8005aba:	d015      	beq.n	8005ae8 <USBD_StdEPReq+0x11c>
 8005abc:	e026      	b.n	8005b0c <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005abe:	7bbb      	ldrb	r3, [r7, #14]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d00c      	beq.n	8005ade <USBD_StdEPReq+0x112>
 8005ac4:	7bbb      	ldrb	r3, [r7, #14]
 8005ac6:	2b80      	cmp	r3, #128	; 0x80
 8005ac8:	d009      	beq.n	8005ade <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005aca:	7bbb      	ldrb	r3, [r7, #14]
 8005acc:	4619      	mov	r1, r3
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f001 f8a2 	bl	8006c18 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005ad4:	2180      	movs	r1, #128	; 0x80
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f001 f89e 	bl	8006c18 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005adc:	e01c      	b.n	8005b18 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8005ade:	6839      	ldr	r1, [r7, #0]
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f000 fbe1 	bl	80062a8 <USBD_CtlError>
              break;
 8005ae6:	e017      	b.n	8005b18 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	885b      	ldrh	r3, [r3, #2]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d112      	bne.n	8005b16 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005af0:	7bbb      	ldrb	r3, [r7, #14]
 8005af2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d004      	beq.n	8005b04 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005afa:	7bbb      	ldrb	r3, [r7, #14]
 8005afc:	4619      	mov	r1, r3
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f001 f8a9 	bl	8006c56 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f000 fc97 	bl	8006438 <USBD_CtlSendStatus>
              }
              break;
 8005b0a:	e004      	b.n	8005b16 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8005b0c:	6839      	ldr	r1, [r7, #0]
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f000 fbca 	bl	80062a8 <USBD_CtlError>
              break;
 8005b14:	e000      	b.n	8005b18 <USBD_StdEPReq+0x14c>
              break;
 8005b16:	bf00      	nop
          }
          break;
 8005b18:	e0aa      	b.n	8005c70 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b20:	2b02      	cmp	r3, #2
 8005b22:	d002      	beq.n	8005b2a <USBD_StdEPReq+0x15e>
 8005b24:	2b03      	cmp	r3, #3
 8005b26:	d032      	beq.n	8005b8e <USBD_StdEPReq+0x1c2>
 8005b28:	e097      	b.n	8005c5a <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005b2a:	7bbb      	ldrb	r3, [r7, #14]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d007      	beq.n	8005b40 <USBD_StdEPReq+0x174>
 8005b30:	7bbb      	ldrb	r3, [r7, #14]
 8005b32:	2b80      	cmp	r3, #128	; 0x80
 8005b34:	d004      	beq.n	8005b40 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8005b36:	6839      	ldr	r1, [r7, #0]
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f000 fbb5 	bl	80062a8 <USBD_CtlError>
                break;
 8005b3e:	e091      	b.n	8005c64 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005b40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	da0b      	bge.n	8005b60 <USBD_StdEPReq+0x194>
 8005b48:	7bbb      	ldrb	r3, [r7, #14]
 8005b4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b4e:	4613      	mov	r3, r2
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	4413      	add	r3, r2
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	3310      	adds	r3, #16
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	4413      	add	r3, r2
 8005b5c:	3304      	adds	r3, #4
 8005b5e:	e00b      	b.n	8005b78 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005b60:	7bbb      	ldrb	r3, [r7, #14]
 8005b62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005b66:	4613      	mov	r3, r2
 8005b68:	009b      	lsls	r3, r3, #2
 8005b6a:	4413      	add	r3, r2
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	4413      	add	r3, r2
 8005b76:	3304      	adds	r3, #4
 8005b78:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	2202      	movs	r2, #2
 8005b84:	4619      	mov	r1, r3
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 fbf8 	bl	800637c <USBD_CtlSendData>
              break;
 8005b8c:	e06a      	b.n	8005c64 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005b8e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	da11      	bge.n	8005bba <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005b96:	7bbb      	ldrb	r3, [r7, #14]
 8005b98:	f003 020f 	and.w	r2, r3, #15
 8005b9c:	6879      	ldr	r1, [r7, #4]
 8005b9e:	4613      	mov	r3, r2
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	4413      	add	r3, r2
 8005ba4:	009b      	lsls	r3, r3, #2
 8005ba6:	440b      	add	r3, r1
 8005ba8:	3318      	adds	r3, #24
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d117      	bne.n	8005be0 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8005bb0:	6839      	ldr	r1, [r7, #0]
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 fb78 	bl	80062a8 <USBD_CtlError>
                  break;
 8005bb8:	e054      	b.n	8005c64 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005bba:	7bbb      	ldrb	r3, [r7, #14]
 8005bbc:	f003 020f 	and.w	r2, r3, #15
 8005bc0:	6879      	ldr	r1, [r7, #4]
 8005bc2:	4613      	mov	r3, r2
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	4413      	add	r3, r2
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	440b      	add	r3, r1
 8005bcc:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d104      	bne.n	8005be0 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8005bd6:	6839      	ldr	r1, [r7, #0]
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f000 fb65 	bl	80062a8 <USBD_CtlError>
                  break;
 8005bde:	e041      	b.n	8005c64 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005be0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	da0b      	bge.n	8005c00 <USBD_StdEPReq+0x234>
 8005be8:	7bbb      	ldrb	r3, [r7, #14]
 8005bea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005bee:	4613      	mov	r3, r2
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	4413      	add	r3, r2
 8005bf4:	009b      	lsls	r3, r3, #2
 8005bf6:	3310      	adds	r3, #16
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	4413      	add	r3, r2
 8005bfc:	3304      	adds	r3, #4
 8005bfe:	e00b      	b.n	8005c18 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005c00:	7bbb      	ldrb	r3, [r7, #14]
 8005c02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005c06:	4613      	mov	r3, r2
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	4413      	add	r3, r2
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	4413      	add	r3, r2
 8005c16:	3304      	adds	r3, #4
 8005c18:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005c1a:	7bbb      	ldrb	r3, [r7, #14]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d002      	beq.n	8005c26 <USBD_StdEPReq+0x25a>
 8005c20:	7bbb      	ldrb	r3, [r7, #14]
 8005c22:	2b80      	cmp	r3, #128	; 0x80
 8005c24:	d103      	bne.n	8005c2e <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	601a      	str	r2, [r3, #0]
 8005c2c:	e00e      	b.n	8005c4c <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8005c2e:	7bbb      	ldrb	r3, [r7, #14]
 8005c30:	4619      	mov	r1, r3
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f001 f82e 	bl	8006c94 <USBD_LL_IsStallEP>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d003      	beq.n	8005c46 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	2201      	movs	r2, #1
 8005c42:	601a      	str	r2, [r3, #0]
 8005c44:	e002      	b.n	8005c4c <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	2202      	movs	r2, #2
 8005c50:	4619      	mov	r1, r3
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 fb92 	bl	800637c <USBD_CtlSendData>
              break;
 8005c58:	e004      	b.n	8005c64 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8005c5a:	6839      	ldr	r1, [r7, #0]
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f000 fb23 	bl	80062a8 <USBD_CtlError>
              break;
 8005c62:	bf00      	nop
          }
          break;
 8005c64:	e004      	b.n	8005c70 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8005c66:	6839      	ldr	r1, [r7, #0]
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f000 fb1d 	bl	80062a8 <USBD_CtlError>
          break;
 8005c6e:	bf00      	nop
      }
      break;
 8005c70:	e004      	b.n	8005c7c <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8005c72:	6839      	ldr	r1, [r7, #0]
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f000 fb17 	bl	80062a8 <USBD_CtlError>
      break;
 8005c7a:	bf00      	nop
  }

  return ret;
 8005c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3710      	adds	r7, #16
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
	...

08005c88 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b084      	sub	sp, #16
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005c92:	2300      	movs	r3, #0
 8005c94:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005c96:	2300      	movs	r3, #0
 8005c98:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	885b      	ldrh	r3, [r3, #2]
 8005ca2:	0a1b      	lsrs	r3, r3, #8
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	3b01      	subs	r3, #1
 8005ca8:	2b06      	cmp	r3, #6
 8005caa:	f200 8128 	bhi.w	8005efe <USBD_GetDescriptor+0x276>
 8005cae:	a201      	add	r2, pc, #4	; (adr r2, 8005cb4 <USBD_GetDescriptor+0x2c>)
 8005cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cb4:	08005cd1 	.word	0x08005cd1
 8005cb8:	08005ce9 	.word	0x08005ce9
 8005cbc:	08005d29 	.word	0x08005d29
 8005cc0:	08005eff 	.word	0x08005eff
 8005cc4:	08005eff 	.word	0x08005eff
 8005cc8:	08005e9f 	.word	0x08005e9f
 8005ccc:	08005ecb 	.word	0x08005ecb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	7c12      	ldrb	r2, [r2, #16]
 8005cdc:	f107 0108 	add.w	r1, r7, #8
 8005ce0:	4610      	mov	r0, r2
 8005ce2:	4798      	blx	r3
 8005ce4:	60f8      	str	r0, [r7, #12]
      break;
 8005ce6:	e112      	b.n	8005f0e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	7c1b      	ldrb	r3, [r3, #16]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d10d      	bne.n	8005d0c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cf8:	f107 0208 	add.w	r2, r7, #8
 8005cfc:	4610      	mov	r0, r2
 8005cfe:	4798      	blx	r3
 8005d00:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	3301      	adds	r3, #1
 8005d06:	2202      	movs	r2, #2
 8005d08:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005d0a:	e100      	b.n	8005f0e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d14:	f107 0208 	add.w	r2, r7, #8
 8005d18:	4610      	mov	r0, r2
 8005d1a:	4798      	blx	r3
 8005d1c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	3301      	adds	r3, #1
 8005d22:	2202      	movs	r2, #2
 8005d24:	701a      	strb	r2, [r3, #0]
      break;
 8005d26:	e0f2      	b.n	8005f0e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	885b      	ldrh	r3, [r3, #2]
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	2b05      	cmp	r3, #5
 8005d30:	f200 80ac 	bhi.w	8005e8c <USBD_GetDescriptor+0x204>
 8005d34:	a201      	add	r2, pc, #4	; (adr r2, 8005d3c <USBD_GetDescriptor+0xb4>)
 8005d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d3a:	bf00      	nop
 8005d3c:	08005d55 	.word	0x08005d55
 8005d40:	08005d89 	.word	0x08005d89
 8005d44:	08005dbd 	.word	0x08005dbd
 8005d48:	08005df1 	.word	0x08005df1
 8005d4c:	08005e25 	.word	0x08005e25
 8005d50:	08005e59 	.word	0x08005e59
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d00b      	beq.n	8005d78 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	687a      	ldr	r2, [r7, #4]
 8005d6a:	7c12      	ldrb	r2, [r2, #16]
 8005d6c:	f107 0108 	add.w	r1, r7, #8
 8005d70:	4610      	mov	r0, r2
 8005d72:	4798      	blx	r3
 8005d74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d76:	e091      	b.n	8005e9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d78:	6839      	ldr	r1, [r7, #0]
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f000 fa94 	bl	80062a8 <USBD_CtlError>
            err++;
 8005d80:	7afb      	ldrb	r3, [r7, #11]
 8005d82:	3301      	adds	r3, #1
 8005d84:	72fb      	strb	r3, [r7, #11]
          break;
 8005d86:	e089      	b.n	8005e9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d00b      	beq.n	8005dac <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	7c12      	ldrb	r2, [r2, #16]
 8005da0:	f107 0108 	add.w	r1, r7, #8
 8005da4:	4610      	mov	r0, r2
 8005da6:	4798      	blx	r3
 8005da8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005daa:	e077      	b.n	8005e9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005dac:	6839      	ldr	r1, [r7, #0]
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 fa7a 	bl	80062a8 <USBD_CtlError>
            err++;
 8005db4:	7afb      	ldrb	r3, [r7, #11]
 8005db6:	3301      	adds	r3, #1
 8005db8:	72fb      	strb	r3, [r7, #11]
          break;
 8005dba:	e06f      	b.n	8005e9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d00b      	beq.n	8005de0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	7c12      	ldrb	r2, [r2, #16]
 8005dd4:	f107 0108 	add.w	r1, r7, #8
 8005dd8:	4610      	mov	r0, r2
 8005dda:	4798      	blx	r3
 8005ddc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005dde:	e05d      	b.n	8005e9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005de0:	6839      	ldr	r1, [r7, #0]
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f000 fa60 	bl	80062a8 <USBD_CtlError>
            err++;
 8005de8:	7afb      	ldrb	r3, [r7, #11]
 8005dea:	3301      	adds	r3, #1
 8005dec:	72fb      	strb	r3, [r7, #11]
          break;
 8005dee:	e055      	b.n	8005e9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005df6:	691b      	ldr	r3, [r3, #16]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d00b      	beq.n	8005e14 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005e02:	691b      	ldr	r3, [r3, #16]
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	7c12      	ldrb	r2, [r2, #16]
 8005e08:	f107 0108 	add.w	r1, r7, #8
 8005e0c:	4610      	mov	r0, r2
 8005e0e:	4798      	blx	r3
 8005e10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e12:	e043      	b.n	8005e9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005e14:	6839      	ldr	r1, [r7, #0]
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f000 fa46 	bl	80062a8 <USBD_CtlError>
            err++;
 8005e1c:	7afb      	ldrb	r3, [r7, #11]
 8005e1e:	3301      	adds	r3, #1
 8005e20:	72fb      	strb	r3, [r7, #11]
          break;
 8005e22:	e03b      	b.n	8005e9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005e2a:	695b      	ldr	r3, [r3, #20]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d00b      	beq.n	8005e48 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005e36:	695b      	ldr	r3, [r3, #20]
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	7c12      	ldrb	r2, [r2, #16]
 8005e3c:	f107 0108 	add.w	r1, r7, #8
 8005e40:	4610      	mov	r0, r2
 8005e42:	4798      	blx	r3
 8005e44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e46:	e029      	b.n	8005e9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005e48:	6839      	ldr	r1, [r7, #0]
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f000 fa2c 	bl	80062a8 <USBD_CtlError>
            err++;
 8005e50:	7afb      	ldrb	r3, [r7, #11]
 8005e52:	3301      	adds	r3, #1
 8005e54:	72fb      	strb	r3, [r7, #11]
          break;
 8005e56:	e021      	b.n	8005e9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005e5e:	699b      	ldr	r3, [r3, #24]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d00b      	beq.n	8005e7c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005e6a:	699b      	ldr	r3, [r3, #24]
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	7c12      	ldrb	r2, [r2, #16]
 8005e70:	f107 0108 	add.w	r1, r7, #8
 8005e74:	4610      	mov	r0, r2
 8005e76:	4798      	blx	r3
 8005e78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e7a:	e00f      	b.n	8005e9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005e7c:	6839      	ldr	r1, [r7, #0]
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 fa12 	bl	80062a8 <USBD_CtlError>
            err++;
 8005e84:	7afb      	ldrb	r3, [r7, #11]
 8005e86:	3301      	adds	r3, #1
 8005e88:	72fb      	strb	r3, [r7, #11]
          break;
 8005e8a:	e007      	b.n	8005e9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8005e8c:	6839      	ldr	r1, [r7, #0]
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f000 fa0a 	bl	80062a8 <USBD_CtlError>
          err++;
 8005e94:	7afb      	ldrb	r3, [r7, #11]
 8005e96:	3301      	adds	r3, #1
 8005e98:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8005e9a:	e038      	b.n	8005f0e <USBD_GetDescriptor+0x286>
 8005e9c:	e037      	b.n	8005f0e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	7c1b      	ldrb	r3, [r3, #16]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d109      	bne.n	8005eba <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eae:	f107 0208 	add.w	r2, r7, #8
 8005eb2:	4610      	mov	r0, r2
 8005eb4:	4798      	blx	r3
 8005eb6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005eb8:	e029      	b.n	8005f0e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005eba:	6839      	ldr	r1, [r7, #0]
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f000 f9f3 	bl	80062a8 <USBD_CtlError>
        err++;
 8005ec2:	7afb      	ldrb	r3, [r7, #11]
 8005ec4:	3301      	adds	r3, #1
 8005ec6:	72fb      	strb	r3, [r7, #11]
      break;
 8005ec8:	e021      	b.n	8005f0e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	7c1b      	ldrb	r3, [r3, #16]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d10d      	bne.n	8005eee <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eda:	f107 0208 	add.w	r2, r7, #8
 8005ede:	4610      	mov	r0, r2
 8005ee0:	4798      	blx	r3
 8005ee2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	3301      	adds	r3, #1
 8005ee8:	2207      	movs	r2, #7
 8005eea:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005eec:	e00f      	b.n	8005f0e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005eee:	6839      	ldr	r1, [r7, #0]
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f000 f9d9 	bl	80062a8 <USBD_CtlError>
        err++;
 8005ef6:	7afb      	ldrb	r3, [r7, #11]
 8005ef8:	3301      	adds	r3, #1
 8005efa:	72fb      	strb	r3, [r7, #11]
      break;
 8005efc:	e007      	b.n	8005f0e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005efe:	6839      	ldr	r1, [r7, #0]
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f000 f9d1 	bl	80062a8 <USBD_CtlError>
      err++;
 8005f06:	7afb      	ldrb	r3, [r7, #11]
 8005f08:	3301      	adds	r3, #1
 8005f0a:	72fb      	strb	r3, [r7, #11]
      break;
 8005f0c:	bf00      	nop
  }

  if (err != 0U)
 8005f0e:	7afb      	ldrb	r3, [r7, #11]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d11c      	bne.n	8005f4e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8005f14:	893b      	ldrh	r3, [r7, #8]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d011      	beq.n	8005f3e <USBD_GetDescriptor+0x2b6>
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	88db      	ldrh	r3, [r3, #6]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d00d      	beq.n	8005f3e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	88da      	ldrh	r2, [r3, #6]
 8005f26:	893b      	ldrh	r3, [r7, #8]
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	bf28      	it	cs
 8005f2c:	4613      	movcs	r3, r2
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005f32:	893b      	ldrh	r3, [r7, #8]
 8005f34:	461a      	mov	r2, r3
 8005f36:	68f9      	ldr	r1, [r7, #12]
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f000 fa1f 	bl	800637c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	88db      	ldrh	r3, [r3, #6]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d104      	bne.n	8005f50 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 fa76 	bl	8006438 <USBD_CtlSendStatus>
 8005f4c:	e000      	b.n	8005f50 <USBD_GetDescriptor+0x2c8>
    return;
 8005f4e:	bf00      	nop
    }
  }
}
 8005f50:	3710      	adds	r7, #16
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	bf00      	nop

08005f58 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b084      	sub	sp, #16
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	889b      	ldrh	r3, [r3, #4]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d130      	bne.n	8005fcc <USBD_SetAddress+0x74>
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	88db      	ldrh	r3, [r3, #6]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d12c      	bne.n	8005fcc <USBD_SetAddress+0x74>
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	885b      	ldrh	r3, [r3, #2]
 8005f76:	2b7f      	cmp	r3, #127	; 0x7f
 8005f78:	d828      	bhi.n	8005fcc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	885b      	ldrh	r3, [r3, #2]
 8005f7e:	b2db      	uxtb	r3, r3
 8005f80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f84:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f8c:	2b03      	cmp	r3, #3
 8005f8e:	d104      	bne.n	8005f9a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8005f90:	6839      	ldr	r1, [r7, #0]
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 f988 	bl	80062a8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f98:	e01c      	b.n	8005fd4 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	7bfa      	ldrb	r2, [r7, #15]
 8005f9e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005fa2:	7bfb      	ldrb	r3, [r7, #15]
 8005fa4:	4619      	mov	r1, r3
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f000 fe9f 	bl	8006cea <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f000 fa43 	bl	8006438 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005fb2:	7bfb      	ldrb	r3, [r7, #15]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d004      	beq.n	8005fc2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2202      	movs	r2, #2
 8005fbc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fc0:	e008      	b.n	8005fd4 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fca:	e003      	b.n	8005fd4 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005fcc:	6839      	ldr	r1, [r7, #0]
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 f96a 	bl	80062a8 <USBD_CtlError>
  }
}
 8005fd4:	bf00      	nop
 8005fd6:	3710      	adds	r7, #16
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}

08005fdc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b082      	sub	sp, #8
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	885b      	ldrh	r3, [r3, #2]
 8005fea:	b2da      	uxtb	r2, r3
 8005fec:	4b41      	ldr	r3, [pc, #260]	; (80060f4 <USBD_SetConfig+0x118>)
 8005fee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005ff0:	4b40      	ldr	r3, [pc, #256]	; (80060f4 <USBD_SetConfig+0x118>)
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d904      	bls.n	8006002 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8005ff8:	6839      	ldr	r1, [r7, #0]
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 f954 	bl	80062a8 <USBD_CtlError>
 8006000:	e075      	b.n	80060ee <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006008:	2b02      	cmp	r3, #2
 800600a:	d002      	beq.n	8006012 <USBD_SetConfig+0x36>
 800600c:	2b03      	cmp	r3, #3
 800600e:	d023      	beq.n	8006058 <USBD_SetConfig+0x7c>
 8006010:	e062      	b.n	80060d8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006012:	4b38      	ldr	r3, [pc, #224]	; (80060f4 <USBD_SetConfig+0x118>)
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d01a      	beq.n	8006050 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800601a:	4b36      	ldr	r3, [pc, #216]	; (80060f4 <USBD_SetConfig+0x118>)
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	461a      	mov	r2, r3
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2203      	movs	r2, #3
 8006028:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800602c:	4b31      	ldr	r3, [pc, #196]	; (80060f4 <USBD_SetConfig+0x118>)
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	4619      	mov	r1, r3
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f7ff f9ba 	bl	80053ac <USBD_SetClassConfig>
 8006038:	4603      	mov	r3, r0
 800603a:	2b02      	cmp	r3, #2
 800603c:	d104      	bne.n	8006048 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800603e:	6839      	ldr	r1, [r7, #0]
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f000 f931 	bl	80062a8 <USBD_CtlError>
            return;
 8006046:	e052      	b.n	80060ee <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f000 f9f5 	bl	8006438 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800604e:	e04e      	b.n	80060ee <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f000 f9f1 	bl	8006438 <USBD_CtlSendStatus>
        break;
 8006056:	e04a      	b.n	80060ee <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006058:	4b26      	ldr	r3, [pc, #152]	; (80060f4 <USBD_SetConfig+0x118>)
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d112      	bne.n	8006086 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2202      	movs	r2, #2
 8006064:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8006068:	4b22      	ldr	r3, [pc, #136]	; (80060f4 <USBD_SetConfig+0x118>)
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	461a      	mov	r2, r3
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006072:	4b20      	ldr	r3, [pc, #128]	; (80060f4 <USBD_SetConfig+0x118>)
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	4619      	mov	r1, r3
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f7ff f9b6 	bl	80053ea <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 f9da 	bl	8006438 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006084:	e033      	b.n	80060ee <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8006086:	4b1b      	ldr	r3, [pc, #108]	; (80060f4 <USBD_SetConfig+0x118>)
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	461a      	mov	r2, r3
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	429a      	cmp	r2, r3
 8006092:	d01d      	beq.n	80060d0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	b2db      	uxtb	r3, r3
 800609a:	4619      	mov	r1, r3
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f7ff f9a4 	bl	80053ea <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80060a2:	4b14      	ldr	r3, [pc, #80]	; (80060f4 <USBD_SetConfig+0x118>)
 80060a4:	781b      	ldrb	r3, [r3, #0]
 80060a6:	461a      	mov	r2, r3
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80060ac:	4b11      	ldr	r3, [pc, #68]	; (80060f4 <USBD_SetConfig+0x118>)
 80060ae:	781b      	ldrb	r3, [r3, #0]
 80060b0:	4619      	mov	r1, r3
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f7ff f97a 	bl	80053ac <USBD_SetClassConfig>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b02      	cmp	r3, #2
 80060bc:	d104      	bne.n	80060c8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80060be:	6839      	ldr	r1, [r7, #0]
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f000 f8f1 	bl	80062a8 <USBD_CtlError>
            return;
 80060c6:	e012      	b.n	80060ee <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f000 f9b5 	bl	8006438 <USBD_CtlSendStatus>
        break;
 80060ce:	e00e      	b.n	80060ee <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f000 f9b1 	bl	8006438 <USBD_CtlSendStatus>
        break;
 80060d6:	e00a      	b.n	80060ee <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80060d8:	6839      	ldr	r1, [r7, #0]
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f000 f8e4 	bl	80062a8 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80060e0:	4b04      	ldr	r3, [pc, #16]	; (80060f4 <USBD_SetConfig+0x118>)
 80060e2:	781b      	ldrb	r3, [r3, #0]
 80060e4:	4619      	mov	r1, r3
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f7ff f97f 	bl	80053ea <USBD_ClrClassConfig>
        break;
 80060ec:	bf00      	nop
    }
  }
}
 80060ee:	3708      	adds	r7, #8
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}
 80060f4:	20000208 	.word	0x20000208

080060f8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b082      	sub	sp, #8
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	88db      	ldrh	r3, [r3, #6]
 8006106:	2b01      	cmp	r3, #1
 8006108:	d004      	beq.n	8006114 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800610a:	6839      	ldr	r1, [r7, #0]
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f000 f8cb 	bl	80062a8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006112:	e021      	b.n	8006158 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800611a:	2b01      	cmp	r3, #1
 800611c:	db17      	blt.n	800614e <USBD_GetConfig+0x56>
 800611e:	2b02      	cmp	r3, #2
 8006120:	dd02      	ble.n	8006128 <USBD_GetConfig+0x30>
 8006122:	2b03      	cmp	r3, #3
 8006124:	d00b      	beq.n	800613e <USBD_GetConfig+0x46>
 8006126:	e012      	b.n	800614e <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2200      	movs	r2, #0
 800612c:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	3308      	adds	r3, #8
 8006132:	2201      	movs	r2, #1
 8006134:	4619      	mov	r1, r3
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f000 f920 	bl	800637c <USBD_CtlSendData>
        break;
 800613c:	e00c      	b.n	8006158 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	3304      	adds	r3, #4
 8006142:	2201      	movs	r2, #1
 8006144:	4619      	mov	r1, r3
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f000 f918 	bl	800637c <USBD_CtlSendData>
        break;
 800614c:	e004      	b.n	8006158 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800614e:	6839      	ldr	r1, [r7, #0]
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f000 f8a9 	bl	80062a8 <USBD_CtlError>
        break;
 8006156:	bf00      	nop
}
 8006158:	bf00      	nop
 800615a:	3708      	adds	r7, #8
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b082      	sub	sp, #8
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006170:	3b01      	subs	r3, #1
 8006172:	2b02      	cmp	r3, #2
 8006174:	d81e      	bhi.n	80061b4 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	88db      	ldrh	r3, [r3, #6]
 800617a:	2b02      	cmp	r3, #2
 800617c:	d004      	beq.n	8006188 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800617e:	6839      	ldr	r1, [r7, #0]
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f000 f891 	bl	80062a8 <USBD_CtlError>
        break;
 8006186:	e01a      	b.n	80061be <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006194:	2b00      	cmp	r3, #0
 8006196:	d005      	beq.n	80061a4 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	68db      	ldr	r3, [r3, #12]
 800619c:	f043 0202 	orr.w	r2, r3, #2
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	330c      	adds	r3, #12
 80061a8:	2202      	movs	r2, #2
 80061aa:	4619      	mov	r1, r3
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f000 f8e5 	bl	800637c <USBD_CtlSendData>
      break;
 80061b2:	e004      	b.n	80061be <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80061b4:	6839      	ldr	r1, [r7, #0]
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f000 f876 	bl	80062a8 <USBD_CtlError>
      break;
 80061bc:	bf00      	nop
  }
}
 80061be:	bf00      	nop
 80061c0:	3708      	adds	r7, #8
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}

080061c6 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80061c6:	b580      	push	{r7, lr}
 80061c8:	b082      	sub	sp, #8
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	6078      	str	r0, [r7, #4]
 80061ce:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	885b      	ldrh	r3, [r3, #2]
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d106      	bne.n	80061e6 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2201      	movs	r2, #1
 80061dc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f000 f929 	bl	8006438 <USBD_CtlSendStatus>
  }
}
 80061e6:	bf00      	nop
 80061e8:	3708      	adds	r7, #8
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}

080061ee <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80061ee:	b580      	push	{r7, lr}
 80061f0:	b082      	sub	sp, #8
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	6078      	str	r0, [r7, #4]
 80061f6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061fe:	3b01      	subs	r3, #1
 8006200:	2b02      	cmp	r3, #2
 8006202:	d80b      	bhi.n	800621c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	885b      	ldrh	r3, [r3, #2]
 8006208:	2b01      	cmp	r3, #1
 800620a:	d10c      	bne.n	8006226 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f000 f90f 	bl	8006438 <USBD_CtlSendStatus>
      }
      break;
 800621a:	e004      	b.n	8006226 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800621c:	6839      	ldr	r1, [r7, #0]
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f000 f842 	bl	80062a8 <USBD_CtlError>
      break;
 8006224:	e000      	b.n	8006228 <USBD_ClrFeature+0x3a>
      break;
 8006226:	bf00      	nop
  }
}
 8006228:	bf00      	nop
 800622a:	3708      	adds	r7, #8
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}

08006230 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006230:	b480      	push	{r7}
 8006232:	b083      	sub	sp, #12
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	781a      	ldrb	r2, [r3, #0]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	785a      	ldrb	r2, [r3, #1]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	3302      	adds	r3, #2
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	b29a      	uxth	r2, r3
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	3303      	adds	r3, #3
 8006256:	781b      	ldrb	r3, [r3, #0]
 8006258:	b29b      	uxth	r3, r3
 800625a:	021b      	lsls	r3, r3, #8
 800625c:	b29b      	uxth	r3, r3
 800625e:	4413      	add	r3, r2
 8006260:	b29a      	uxth	r2, r3
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	3304      	adds	r3, #4
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	b29a      	uxth	r2, r3
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	3305      	adds	r3, #5
 8006272:	781b      	ldrb	r3, [r3, #0]
 8006274:	b29b      	uxth	r3, r3
 8006276:	021b      	lsls	r3, r3, #8
 8006278:	b29b      	uxth	r3, r3
 800627a:	4413      	add	r3, r2
 800627c:	b29a      	uxth	r2, r3
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	3306      	adds	r3, #6
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	b29a      	uxth	r2, r3
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	3307      	adds	r3, #7
 800628e:	781b      	ldrb	r3, [r3, #0]
 8006290:	b29b      	uxth	r3, r3
 8006292:	021b      	lsls	r3, r3, #8
 8006294:	b29b      	uxth	r3, r3
 8006296:	4413      	add	r3, r2
 8006298:	b29a      	uxth	r2, r3
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	80da      	strh	r2, [r3, #6]

}
 800629e:	bf00      	nop
 80062a0:	370c      	adds	r7, #12
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bc80      	pop	{r7}
 80062a6:	4770      	bx	lr

080062a8 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b082      	sub	sp, #8
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80062b2:	2180      	movs	r1, #128	; 0x80
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f000 fcaf 	bl	8006c18 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80062ba:	2100      	movs	r1, #0
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f000 fcab 	bl	8006c18 <USBD_LL_StallEP>
}
 80062c2:	bf00      	nop
 80062c4:	3708      	adds	r7, #8
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}

080062ca <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80062ca:	b580      	push	{r7, lr}
 80062cc:	b086      	sub	sp, #24
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	60f8      	str	r0, [r7, #12]
 80062d2:	60b9      	str	r1, [r7, #8]
 80062d4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80062d6:	2300      	movs	r3, #0
 80062d8:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d032      	beq.n	8006346 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80062e0:	68f8      	ldr	r0, [r7, #12]
 80062e2:	f000 f834 	bl	800634e <USBD_GetLen>
 80062e6:	4603      	mov	r3, r0
 80062e8:	3301      	adds	r3, #1
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	005b      	lsls	r3, r3, #1
 80062ee:	b29a      	uxth	r2, r3
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80062f4:	7dfb      	ldrb	r3, [r7, #23]
 80062f6:	1c5a      	adds	r2, r3, #1
 80062f8:	75fa      	strb	r2, [r7, #23]
 80062fa:	461a      	mov	r2, r3
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	4413      	add	r3, r2
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	7812      	ldrb	r2, [r2, #0]
 8006304:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006306:	7dfb      	ldrb	r3, [r7, #23]
 8006308:	1c5a      	adds	r2, r3, #1
 800630a:	75fa      	strb	r2, [r7, #23]
 800630c:	461a      	mov	r2, r3
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	4413      	add	r3, r2
 8006312:	2203      	movs	r2, #3
 8006314:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006316:	e012      	b.n	800633e <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	1c5a      	adds	r2, r3, #1
 800631c:	60fa      	str	r2, [r7, #12]
 800631e:	7dfa      	ldrb	r2, [r7, #23]
 8006320:	1c51      	adds	r1, r2, #1
 8006322:	75f9      	strb	r1, [r7, #23]
 8006324:	4611      	mov	r1, r2
 8006326:	68ba      	ldr	r2, [r7, #8]
 8006328:	440a      	add	r2, r1
 800632a:	781b      	ldrb	r3, [r3, #0]
 800632c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800632e:	7dfb      	ldrb	r3, [r7, #23]
 8006330:	1c5a      	adds	r2, r3, #1
 8006332:	75fa      	strb	r2, [r7, #23]
 8006334:	461a      	mov	r2, r3
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	4413      	add	r3, r2
 800633a:	2200      	movs	r2, #0
 800633c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	781b      	ldrb	r3, [r3, #0]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d1e8      	bne.n	8006318 <USBD_GetString+0x4e>
    }
  }
}
 8006346:	bf00      	nop
 8006348:	3718      	adds	r7, #24
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}

0800634e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800634e:	b480      	push	{r7}
 8006350:	b085      	sub	sp, #20
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006356:	2300      	movs	r3, #0
 8006358:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800635a:	e005      	b.n	8006368 <USBD_GetLen+0x1a>
  {
    len++;
 800635c:	7bfb      	ldrb	r3, [r7, #15]
 800635e:	3301      	adds	r3, #1
 8006360:	73fb      	strb	r3, [r7, #15]
    buf++;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	3301      	adds	r3, #1
 8006366:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	781b      	ldrb	r3, [r3, #0]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d1f5      	bne.n	800635c <USBD_GetLen+0xe>
  }

  return len;
 8006370:	7bfb      	ldrb	r3, [r7, #15]
}
 8006372:	4618      	mov	r0, r3
 8006374:	3714      	adds	r7, #20
 8006376:	46bd      	mov	sp, r7
 8006378:	bc80      	pop	{r7}
 800637a:	4770      	bx	lr

0800637c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b084      	sub	sp, #16
 8006380:	af00      	add	r7, sp, #0
 8006382:	60f8      	str	r0, [r7, #12]
 8006384:	60b9      	str	r1, [r7, #8]
 8006386:	4613      	mov	r3, r2
 8006388:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2202      	movs	r2, #2
 800638e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006392:	88fa      	ldrh	r2, [r7, #6]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006398:	88fa      	ldrh	r2, [r7, #6]
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800639e:	88fb      	ldrh	r3, [r7, #6]
 80063a0:	68ba      	ldr	r2, [r7, #8]
 80063a2:	2100      	movs	r1, #0
 80063a4:	68f8      	ldr	r0, [r7, #12]
 80063a6:	f000 fcbf 	bl	8006d28 <USBD_LL_Transmit>

  return USBD_OK;
 80063aa:	2300      	movs	r3, #0
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3710      	adds	r7, #16
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}

080063b4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b084      	sub	sp, #16
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	60f8      	str	r0, [r7, #12]
 80063bc:	60b9      	str	r1, [r7, #8]
 80063be:	4613      	mov	r3, r2
 80063c0:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80063c2:	88fb      	ldrh	r3, [r7, #6]
 80063c4:	68ba      	ldr	r2, [r7, #8]
 80063c6:	2100      	movs	r1, #0
 80063c8:	68f8      	ldr	r0, [r7, #12]
 80063ca:	f000 fcad 	bl	8006d28 <USBD_LL_Transmit>

  return USBD_OK;
 80063ce:	2300      	movs	r3, #0
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3710      	adds	r7, #16
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}

080063d8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b084      	sub	sp, #16
 80063dc:	af00      	add	r7, sp, #0
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	60b9      	str	r1, [r7, #8]
 80063e2:	4613      	mov	r3, r2
 80063e4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2203      	movs	r2, #3
 80063ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80063ee:	88fa      	ldrh	r2, [r7, #6]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80063f6:	88fa      	ldrh	r2, [r7, #6]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80063fe:	88fb      	ldrh	r3, [r7, #6]
 8006400:	68ba      	ldr	r2, [r7, #8]
 8006402:	2100      	movs	r1, #0
 8006404:	68f8      	ldr	r0, [r7, #12]
 8006406:	f000 fcb2 	bl	8006d6e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800640a:	2300      	movs	r3, #0
}
 800640c:	4618      	mov	r0, r3
 800640e:	3710      	adds	r7, #16
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}

08006414 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b084      	sub	sp, #16
 8006418:	af00      	add	r7, sp, #0
 800641a:	60f8      	str	r0, [r7, #12]
 800641c:	60b9      	str	r1, [r7, #8]
 800641e:	4613      	mov	r3, r2
 8006420:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006422:	88fb      	ldrh	r3, [r7, #6]
 8006424:	68ba      	ldr	r2, [r7, #8]
 8006426:	2100      	movs	r1, #0
 8006428:	68f8      	ldr	r0, [r7, #12]
 800642a:	f000 fca0 	bl	8006d6e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800642e:	2300      	movs	r3, #0
}
 8006430:	4618      	mov	r0, r3
 8006432:	3710      	adds	r7, #16
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}

08006438 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b082      	sub	sp, #8
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2204      	movs	r2, #4
 8006444:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006448:	2300      	movs	r3, #0
 800644a:	2200      	movs	r2, #0
 800644c:	2100      	movs	r1, #0
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 fc6a 	bl	8006d28 <USBD_LL_Transmit>

  return USBD_OK;
 8006454:	2300      	movs	r3, #0
}
 8006456:	4618      	mov	r0, r3
 8006458:	3708      	adds	r7, #8
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}

0800645e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800645e:	b580      	push	{r7, lr}
 8006460:	b082      	sub	sp, #8
 8006462:	af00      	add	r7, sp, #0
 8006464:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2205      	movs	r2, #5
 800646a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800646e:	2300      	movs	r3, #0
 8006470:	2200      	movs	r2, #0
 8006472:	2100      	movs	r1, #0
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f000 fc7a 	bl	8006d6e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800647a:	2300      	movs	r3, #0
}
 800647c:	4618      	mov	r0, r3
 800647e:	3708      	adds	r7, #8
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}

08006484 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006488:	2200      	movs	r2, #0
 800648a:	4912      	ldr	r1, [pc, #72]	; (80064d4 <MX_USB_DEVICE_Init+0x50>)
 800648c:	4812      	ldr	r0, [pc, #72]	; (80064d8 <MX_USB_DEVICE_Init+0x54>)
 800648e:	f7fe ff33 	bl	80052f8 <USBD_Init>
 8006492:	4603      	mov	r3, r0
 8006494:	2b00      	cmp	r3, #0
 8006496:	d001      	beq.n	800649c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006498:	f7fa fa1e 	bl	80008d8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800649c:	490f      	ldr	r1, [pc, #60]	; (80064dc <MX_USB_DEVICE_Init+0x58>)
 800649e:	480e      	ldr	r0, [pc, #56]	; (80064d8 <MX_USB_DEVICE_Init+0x54>)
 80064a0:	f7fe ff55 	bl	800534e <USBD_RegisterClass>
 80064a4:	4603      	mov	r3, r0
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d001      	beq.n	80064ae <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80064aa:	f7fa fa15 	bl	80008d8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80064ae:	490c      	ldr	r1, [pc, #48]	; (80064e0 <MX_USB_DEVICE_Init+0x5c>)
 80064b0:	4809      	ldr	r0, [pc, #36]	; (80064d8 <MX_USB_DEVICE_Init+0x54>)
 80064b2:	f7fe feb5 	bl	8005220 <USBD_CDC_RegisterInterface>
 80064b6:	4603      	mov	r3, r0
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d001      	beq.n	80064c0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80064bc:	f7fa fa0c 	bl	80008d8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80064c0:	4805      	ldr	r0, [pc, #20]	; (80064d8 <MX_USB_DEVICE_Init+0x54>)
 80064c2:	f7fe ff5d 	bl	8005380 <USBD_Start>
 80064c6:	4603      	mov	r3, r0
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d001      	beq.n	80064d0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80064cc:	f7fa fa04 	bl	80008d8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80064d0:	bf00      	nop
 80064d2:	bd80      	pop	{r7, pc}
 80064d4:	2000012c 	.word	0x2000012c
 80064d8:	2000065c 	.word	0x2000065c
 80064dc:	20000018 	.word	0x20000018
 80064e0:	2000011c 	.word	0x2000011c

080064e4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80064e8:	2200      	movs	r2, #0
 80064ea:	4905      	ldr	r1, [pc, #20]	; (8006500 <CDC_Init_FS+0x1c>)
 80064ec:	4805      	ldr	r0, [pc, #20]	; (8006504 <CDC_Init_FS+0x20>)
 80064ee:	f7fe fead 	bl	800524c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80064f2:	4905      	ldr	r1, [pc, #20]	; (8006508 <CDC_Init_FS+0x24>)
 80064f4:	4803      	ldr	r0, [pc, #12]	; (8006504 <CDC_Init_FS+0x20>)
 80064f6:	f7fe fec2 	bl	800527e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80064fa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	bd80      	pop	{r7, pc}
 8006500:	20001120 	.word	0x20001120
 8006504:	2000065c 	.word	0x2000065c
 8006508:	20000920 	.word	0x20000920

0800650c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800650c:	b480      	push	{r7}
 800650e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006510:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006512:	4618      	mov	r0, r3
 8006514:	46bd      	mov	sp, r7
 8006516:	bc80      	pop	{r7}
 8006518:	4770      	bx	lr
	...

0800651c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800651c:	b480      	push	{r7}
 800651e:	b083      	sub	sp, #12
 8006520:	af00      	add	r7, sp, #0
 8006522:	4603      	mov	r3, r0
 8006524:	6039      	str	r1, [r7, #0]
 8006526:	71fb      	strb	r3, [r7, #7]
 8006528:	4613      	mov	r3, r2
 800652a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800652c:	79fb      	ldrb	r3, [r7, #7]
 800652e:	2b23      	cmp	r3, #35	; 0x23
 8006530:	d84a      	bhi.n	80065c8 <CDC_Control_FS+0xac>
 8006532:	a201      	add	r2, pc, #4	; (adr r2, 8006538 <CDC_Control_FS+0x1c>)
 8006534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006538:	080065c9 	.word	0x080065c9
 800653c:	080065c9 	.word	0x080065c9
 8006540:	080065c9 	.word	0x080065c9
 8006544:	080065c9 	.word	0x080065c9
 8006548:	080065c9 	.word	0x080065c9
 800654c:	080065c9 	.word	0x080065c9
 8006550:	080065c9 	.word	0x080065c9
 8006554:	080065c9 	.word	0x080065c9
 8006558:	080065c9 	.word	0x080065c9
 800655c:	080065c9 	.word	0x080065c9
 8006560:	080065c9 	.word	0x080065c9
 8006564:	080065c9 	.word	0x080065c9
 8006568:	080065c9 	.word	0x080065c9
 800656c:	080065c9 	.word	0x080065c9
 8006570:	080065c9 	.word	0x080065c9
 8006574:	080065c9 	.word	0x080065c9
 8006578:	080065c9 	.word	0x080065c9
 800657c:	080065c9 	.word	0x080065c9
 8006580:	080065c9 	.word	0x080065c9
 8006584:	080065c9 	.word	0x080065c9
 8006588:	080065c9 	.word	0x080065c9
 800658c:	080065c9 	.word	0x080065c9
 8006590:	080065c9 	.word	0x080065c9
 8006594:	080065c9 	.word	0x080065c9
 8006598:	080065c9 	.word	0x080065c9
 800659c:	080065c9 	.word	0x080065c9
 80065a0:	080065c9 	.word	0x080065c9
 80065a4:	080065c9 	.word	0x080065c9
 80065a8:	080065c9 	.word	0x080065c9
 80065ac:	080065c9 	.word	0x080065c9
 80065b0:	080065c9 	.word	0x080065c9
 80065b4:	080065c9 	.word	0x080065c9
 80065b8:	080065c9 	.word	0x080065c9
 80065bc:	080065c9 	.word	0x080065c9
 80065c0:	080065c9 	.word	0x080065c9
 80065c4:	080065c9 	.word	0x080065c9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80065c8:	bf00      	nop
  }

  return (USBD_OK);
 80065ca:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	370c      	adds	r7, #12
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bc80      	pop	{r7}
 80065d4:	4770      	bx	lr
 80065d6:	bf00      	nop

080065d8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b082      	sub	sp, #8
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80065e2:	6879      	ldr	r1, [r7, #4]
 80065e4:	4805      	ldr	r0, [pc, #20]	; (80065fc <CDC_Receive_FS+0x24>)
 80065e6:	f7fe fe4a 	bl	800527e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80065ea:	4804      	ldr	r0, [pc, #16]	; (80065fc <CDC_Receive_FS+0x24>)
 80065ec:	f7fe fe5a 	bl	80052a4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80065f0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3708      	adds	r7, #8
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
 80065fa:	bf00      	nop
 80065fc:	2000065c 	.word	0x2000065c

08006600 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006600:	b480      	push	{r7}
 8006602:	b083      	sub	sp, #12
 8006604:	af00      	add	r7, sp, #0
 8006606:	4603      	mov	r3, r0
 8006608:	6039      	str	r1, [r7, #0]
 800660a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	2212      	movs	r2, #18
 8006610:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006612:	4b03      	ldr	r3, [pc, #12]	; (8006620 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006614:	4618      	mov	r0, r3
 8006616:	370c      	adds	r7, #12
 8006618:	46bd      	mov	sp, r7
 800661a:	bc80      	pop	{r7}
 800661c:	4770      	bx	lr
 800661e:	bf00      	nop
 8006620:	20000148 	.word	0x20000148

08006624 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006624:	b480      	push	{r7}
 8006626:	b083      	sub	sp, #12
 8006628:	af00      	add	r7, sp, #0
 800662a:	4603      	mov	r3, r0
 800662c:	6039      	str	r1, [r7, #0]
 800662e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	2204      	movs	r2, #4
 8006634:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006636:	4b03      	ldr	r3, [pc, #12]	; (8006644 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006638:	4618      	mov	r0, r3
 800663a:	370c      	adds	r7, #12
 800663c:	46bd      	mov	sp, r7
 800663e:	bc80      	pop	{r7}
 8006640:	4770      	bx	lr
 8006642:	bf00      	nop
 8006644:	2000015c 	.word	0x2000015c

08006648 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b082      	sub	sp, #8
 800664c:	af00      	add	r7, sp, #0
 800664e:	4603      	mov	r3, r0
 8006650:	6039      	str	r1, [r7, #0]
 8006652:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006654:	79fb      	ldrb	r3, [r7, #7]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d105      	bne.n	8006666 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800665a:	683a      	ldr	r2, [r7, #0]
 800665c:	4907      	ldr	r1, [pc, #28]	; (800667c <USBD_FS_ProductStrDescriptor+0x34>)
 800665e:	4808      	ldr	r0, [pc, #32]	; (8006680 <USBD_FS_ProductStrDescriptor+0x38>)
 8006660:	f7ff fe33 	bl	80062ca <USBD_GetString>
 8006664:	e004      	b.n	8006670 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006666:	683a      	ldr	r2, [r7, #0]
 8006668:	4904      	ldr	r1, [pc, #16]	; (800667c <USBD_FS_ProductStrDescriptor+0x34>)
 800666a:	4805      	ldr	r0, [pc, #20]	; (8006680 <USBD_FS_ProductStrDescriptor+0x38>)
 800666c:	f7ff fe2d 	bl	80062ca <USBD_GetString>
  }
  return USBD_StrDesc;
 8006670:	4b02      	ldr	r3, [pc, #8]	; (800667c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006672:	4618      	mov	r0, r3
 8006674:	3708      	adds	r7, #8
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}
 800667a:	bf00      	nop
 800667c:	20001920 	.word	0x20001920
 8006680:	080077b8 	.word	0x080077b8

08006684 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b082      	sub	sp, #8
 8006688:	af00      	add	r7, sp, #0
 800668a:	4603      	mov	r3, r0
 800668c:	6039      	str	r1, [r7, #0]
 800668e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006690:	683a      	ldr	r2, [r7, #0]
 8006692:	4904      	ldr	r1, [pc, #16]	; (80066a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006694:	4804      	ldr	r0, [pc, #16]	; (80066a8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006696:	f7ff fe18 	bl	80062ca <USBD_GetString>
  return USBD_StrDesc;
 800669a:	4b02      	ldr	r3, [pc, #8]	; (80066a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800669c:	4618      	mov	r0, r3
 800669e:	3708      	adds	r7, #8
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}
 80066a4:	20001920 	.word	0x20001920
 80066a8:	080077cc 	.word	0x080077cc

080066ac <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b082      	sub	sp, #8
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	4603      	mov	r3, r0
 80066b4:	6039      	str	r1, [r7, #0]
 80066b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	221a      	movs	r2, #26
 80066bc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80066be:	f000 f843 	bl	8006748 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80066c2:	4b02      	ldr	r3, [pc, #8]	; (80066cc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3708      	adds	r7, #8
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}
 80066cc:	20000160 	.word	0x20000160

080066d0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b082      	sub	sp, #8
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	4603      	mov	r3, r0
 80066d8:	6039      	str	r1, [r7, #0]
 80066da:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80066dc:	79fb      	ldrb	r3, [r7, #7]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d105      	bne.n	80066ee <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80066e2:	683a      	ldr	r2, [r7, #0]
 80066e4:	4907      	ldr	r1, [pc, #28]	; (8006704 <USBD_FS_ConfigStrDescriptor+0x34>)
 80066e6:	4808      	ldr	r0, [pc, #32]	; (8006708 <USBD_FS_ConfigStrDescriptor+0x38>)
 80066e8:	f7ff fdef 	bl	80062ca <USBD_GetString>
 80066ec:	e004      	b.n	80066f8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80066ee:	683a      	ldr	r2, [r7, #0]
 80066f0:	4904      	ldr	r1, [pc, #16]	; (8006704 <USBD_FS_ConfigStrDescriptor+0x34>)
 80066f2:	4805      	ldr	r0, [pc, #20]	; (8006708 <USBD_FS_ConfigStrDescriptor+0x38>)
 80066f4:	f7ff fde9 	bl	80062ca <USBD_GetString>
  }
  return USBD_StrDesc;
 80066f8:	4b02      	ldr	r3, [pc, #8]	; (8006704 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3708      	adds	r7, #8
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
 8006702:	bf00      	nop
 8006704:	20001920 	.word	0x20001920
 8006708:	080077d8 	.word	0x080077d8

0800670c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b082      	sub	sp, #8
 8006710:	af00      	add	r7, sp, #0
 8006712:	4603      	mov	r3, r0
 8006714:	6039      	str	r1, [r7, #0]
 8006716:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006718:	79fb      	ldrb	r3, [r7, #7]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d105      	bne.n	800672a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800671e:	683a      	ldr	r2, [r7, #0]
 8006720:	4907      	ldr	r1, [pc, #28]	; (8006740 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006722:	4808      	ldr	r0, [pc, #32]	; (8006744 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006724:	f7ff fdd1 	bl	80062ca <USBD_GetString>
 8006728:	e004      	b.n	8006734 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800672a:	683a      	ldr	r2, [r7, #0]
 800672c:	4904      	ldr	r1, [pc, #16]	; (8006740 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800672e:	4805      	ldr	r0, [pc, #20]	; (8006744 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006730:	f7ff fdcb 	bl	80062ca <USBD_GetString>
  }
  return USBD_StrDesc;
 8006734:	4b02      	ldr	r3, [pc, #8]	; (8006740 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006736:	4618      	mov	r0, r3
 8006738:	3708      	adds	r7, #8
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}
 800673e:	bf00      	nop
 8006740:	20001920 	.word	0x20001920
 8006744:	080077e4 	.word	0x080077e4

08006748 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b084      	sub	sp, #16
 800674c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800674e:	4b0f      	ldr	r3, [pc, #60]	; (800678c <Get_SerialNum+0x44>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006754:	4b0e      	ldr	r3, [pc, #56]	; (8006790 <Get_SerialNum+0x48>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800675a:	4b0e      	ldr	r3, [pc, #56]	; (8006794 <Get_SerialNum+0x4c>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006760:	68fa      	ldr	r2, [r7, #12]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4413      	add	r3, r2
 8006766:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d009      	beq.n	8006782 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800676e:	2208      	movs	r2, #8
 8006770:	4909      	ldr	r1, [pc, #36]	; (8006798 <Get_SerialNum+0x50>)
 8006772:	68f8      	ldr	r0, [r7, #12]
 8006774:	f000 f814 	bl	80067a0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006778:	2204      	movs	r2, #4
 800677a:	4908      	ldr	r1, [pc, #32]	; (800679c <Get_SerialNum+0x54>)
 800677c:	68b8      	ldr	r0, [r7, #8]
 800677e:	f000 f80f 	bl	80067a0 <IntToUnicode>
  }
}
 8006782:	bf00      	nop
 8006784:	3710      	adds	r7, #16
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}
 800678a:	bf00      	nop
 800678c:	1fff7a10 	.word	0x1fff7a10
 8006790:	1fff7a14 	.word	0x1fff7a14
 8006794:	1fff7a18 	.word	0x1fff7a18
 8006798:	20000162 	.word	0x20000162
 800679c:	20000172 	.word	0x20000172

080067a0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b087      	sub	sp, #28
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	60f8      	str	r0, [r7, #12]
 80067a8:	60b9      	str	r1, [r7, #8]
 80067aa:	4613      	mov	r3, r2
 80067ac:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80067ae:	2300      	movs	r3, #0
 80067b0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80067b2:	2300      	movs	r3, #0
 80067b4:	75fb      	strb	r3, [r7, #23]
 80067b6:	e027      	b.n	8006808 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	0f1b      	lsrs	r3, r3, #28
 80067bc:	2b09      	cmp	r3, #9
 80067be:	d80b      	bhi.n	80067d8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	0f1b      	lsrs	r3, r3, #28
 80067c4:	b2da      	uxtb	r2, r3
 80067c6:	7dfb      	ldrb	r3, [r7, #23]
 80067c8:	005b      	lsls	r3, r3, #1
 80067ca:	4619      	mov	r1, r3
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	440b      	add	r3, r1
 80067d0:	3230      	adds	r2, #48	; 0x30
 80067d2:	b2d2      	uxtb	r2, r2
 80067d4:	701a      	strb	r2, [r3, #0]
 80067d6:	e00a      	b.n	80067ee <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	0f1b      	lsrs	r3, r3, #28
 80067dc:	b2da      	uxtb	r2, r3
 80067de:	7dfb      	ldrb	r3, [r7, #23]
 80067e0:	005b      	lsls	r3, r3, #1
 80067e2:	4619      	mov	r1, r3
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	440b      	add	r3, r1
 80067e8:	3237      	adds	r2, #55	; 0x37
 80067ea:	b2d2      	uxtb	r2, r2
 80067ec:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	011b      	lsls	r3, r3, #4
 80067f2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80067f4:	7dfb      	ldrb	r3, [r7, #23]
 80067f6:	005b      	lsls	r3, r3, #1
 80067f8:	3301      	adds	r3, #1
 80067fa:	68ba      	ldr	r2, [r7, #8]
 80067fc:	4413      	add	r3, r2
 80067fe:	2200      	movs	r2, #0
 8006800:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006802:	7dfb      	ldrb	r3, [r7, #23]
 8006804:	3301      	adds	r3, #1
 8006806:	75fb      	strb	r3, [r7, #23]
 8006808:	7dfa      	ldrb	r2, [r7, #23]
 800680a:	79fb      	ldrb	r3, [r7, #7]
 800680c:	429a      	cmp	r2, r3
 800680e:	d3d3      	bcc.n	80067b8 <IntToUnicode+0x18>
  }
}
 8006810:	bf00      	nop
 8006812:	371c      	adds	r7, #28
 8006814:	46bd      	mov	sp, r7
 8006816:	bc80      	pop	{r7}
 8006818:	4770      	bx	lr
	...

0800681c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b08a      	sub	sp, #40	; 0x28
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006824:	f107 0314 	add.w	r3, r7, #20
 8006828:	2200      	movs	r2, #0
 800682a:	601a      	str	r2, [r3, #0]
 800682c:	605a      	str	r2, [r3, #4]
 800682e:	609a      	str	r2, [r3, #8]
 8006830:	60da      	str	r2, [r3, #12]
 8006832:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800683c:	d147      	bne.n	80068ce <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800683e:	2300      	movs	r3, #0
 8006840:	613b      	str	r3, [r7, #16]
 8006842:	4b25      	ldr	r3, [pc, #148]	; (80068d8 <HAL_PCD_MspInit+0xbc>)
 8006844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006846:	4a24      	ldr	r2, [pc, #144]	; (80068d8 <HAL_PCD_MspInit+0xbc>)
 8006848:	f043 0301 	orr.w	r3, r3, #1
 800684c:	6313      	str	r3, [r2, #48]	; 0x30
 800684e:	4b22      	ldr	r3, [pc, #136]	; (80068d8 <HAL_PCD_MspInit+0xbc>)
 8006850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006852:	f003 0301 	and.w	r3, r3, #1
 8006856:	613b      	str	r3, [r7, #16]
 8006858:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800685a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800685e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006860:	2302      	movs	r3, #2
 8006862:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006864:	2300      	movs	r3, #0
 8006866:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006868:	2303      	movs	r3, #3
 800686a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800686c:	230a      	movs	r3, #10
 800686e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006870:	f107 0314 	add.w	r3, r7, #20
 8006874:	4619      	mov	r1, r3
 8006876:	4819      	ldr	r0, [pc, #100]	; (80068dc <HAL_PCD_MspInit+0xc0>)
 8006878:	f7fa fb7a 	bl	8000f70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800687c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006880:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006882:	2300      	movs	r3, #0
 8006884:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006886:	2300      	movs	r3, #0
 8006888:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800688a:	f107 0314 	add.w	r3, r7, #20
 800688e:	4619      	mov	r1, r3
 8006890:	4812      	ldr	r0, [pc, #72]	; (80068dc <HAL_PCD_MspInit+0xc0>)
 8006892:	f7fa fb6d 	bl	8000f70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006896:	4b10      	ldr	r3, [pc, #64]	; (80068d8 <HAL_PCD_MspInit+0xbc>)
 8006898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800689a:	4a0f      	ldr	r2, [pc, #60]	; (80068d8 <HAL_PCD_MspInit+0xbc>)
 800689c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068a0:	6353      	str	r3, [r2, #52]	; 0x34
 80068a2:	2300      	movs	r3, #0
 80068a4:	60fb      	str	r3, [r7, #12]
 80068a6:	4b0c      	ldr	r3, [pc, #48]	; (80068d8 <HAL_PCD_MspInit+0xbc>)
 80068a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068aa:	4a0b      	ldr	r2, [pc, #44]	; (80068d8 <HAL_PCD_MspInit+0xbc>)
 80068ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80068b0:	6453      	str	r3, [r2, #68]	; 0x44
 80068b2:	4b09      	ldr	r3, [pc, #36]	; (80068d8 <HAL_PCD_MspInit+0xbc>)
 80068b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068ba:	60fb      	str	r3, [r7, #12]
 80068bc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80068be:	2200      	movs	r2, #0
 80068c0:	2100      	movs	r1, #0
 80068c2:	2043      	movs	r0, #67	; 0x43
 80068c4:	f7fa fafd 	bl	8000ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80068c8:	2043      	movs	r0, #67	; 0x43
 80068ca:	f7fa fb16 	bl	8000efa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80068ce:	bf00      	nop
 80068d0:	3728      	adds	r7, #40	; 0x28
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}
 80068d6:	bf00      	nop
 80068d8:	40023800 	.word	0x40023800
 80068dc:	40020000 	.word	0x40020000

080068e0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b082      	sub	sp, #8
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f8d3 23fc 	ldr.w	r2, [r3, #1020]	; 0x3fc
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80068f4:	4619      	mov	r1, r3
 80068f6:	4610      	mov	r0, r2
 80068f8:	f7fe fd8a 	bl	8005410 <USBD_LL_SetupStage>
}
 80068fc:	bf00      	nop
 80068fe:	3708      	adds	r7, #8
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}

08006904 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b082      	sub	sp, #8
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	460b      	mov	r3, r1
 800690e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 8006916:	78fa      	ldrb	r2, [r7, #3]
 8006918:	6879      	ldr	r1, [r7, #4]
 800691a:	4613      	mov	r3, r2
 800691c:	00db      	lsls	r3, r3, #3
 800691e:	1a9b      	subs	r3, r3, r2
 8006920:	009b      	lsls	r3, r3, #2
 8006922:	440b      	add	r3, r1
 8006924:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	78fb      	ldrb	r3, [r7, #3]
 800692c:	4619      	mov	r1, r3
 800692e:	f7fe fdba 	bl	80054a6 <USBD_LL_DataOutStage>
}
 8006932:	bf00      	nop
 8006934:	3708      	adds	r7, #8
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}

0800693a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800693a:	b580      	push	{r7, lr}
 800693c:	b082      	sub	sp, #8
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
 8006942:	460b      	mov	r3, r1
 8006944:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 800694c:	78fa      	ldrb	r2, [r7, #3]
 800694e:	6879      	ldr	r1, [r7, #4]
 8006950:	4613      	mov	r3, r2
 8006952:	00db      	lsls	r3, r3, #3
 8006954:	1a9b      	subs	r3, r3, r2
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	440b      	add	r3, r1
 800695a:	3348      	adds	r3, #72	; 0x48
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	78fb      	ldrb	r3, [r7, #3]
 8006960:	4619      	mov	r1, r3
 8006962:	f7fe fe11 	bl	8005588 <USBD_LL_DataInStage>
}
 8006966:	bf00      	nop
 8006968:	3708      	adds	r7, #8
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}

0800696e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800696e:	b580      	push	{r7, lr}
 8006970:	b082      	sub	sp, #8
 8006972:	af00      	add	r7, sp, #0
 8006974:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800697c:	4618      	mov	r0, r3
 800697e:	f7fe ff21 	bl	80057c4 <USBD_LL_SOF>
}
 8006982:	bf00      	nop
 8006984:	3708      	adds	r7, #8
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}

0800698a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800698a:	b580      	push	{r7, lr}
 800698c:	b084      	sub	sp, #16
 800698e:	af00      	add	r7, sp, #0
 8006990:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006992:	2301      	movs	r3, #1
 8006994:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	68db      	ldr	r3, [r3, #12]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d102      	bne.n	80069a4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800699e:	2300      	movs	r3, #0
 80069a0:	73fb      	strb	r3, [r7, #15]
 80069a2:	e008      	b.n	80069b6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	68db      	ldr	r3, [r3, #12]
 80069a8:	2b02      	cmp	r3, #2
 80069aa:	d102      	bne.n	80069b2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80069ac:	2301      	movs	r3, #1
 80069ae:	73fb      	strb	r3, [r7, #15]
 80069b0:	e001      	b.n	80069b6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80069b2:	f7f9 ff91 	bl	80008d8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 80069bc:	7bfa      	ldrb	r2, [r7, #15]
 80069be:	4611      	mov	r1, r2
 80069c0:	4618      	mov	r0, r3
 80069c2:	f7fe fec7 	bl	8005754 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 80069cc:	4618      	mov	r0, r3
 80069ce:	f7fe fe80 	bl	80056d2 <USBD_LL_Reset>
}
 80069d2:	bf00      	nop
 80069d4:	3710      	adds	r7, #16
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
	...

080069dc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b082      	sub	sp, #8
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 80069ea:	4618      	mov	r0, r3
 80069ec:	f7fe fec1 	bl	8005772 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	687a      	ldr	r2, [r7, #4]
 80069fc:	6812      	ldr	r2, [r2, #0]
 80069fe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006a02:	f043 0301 	orr.w	r3, r3, #1
 8006a06:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6a1b      	ldr	r3, [r3, #32]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d005      	beq.n	8006a1c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006a10:	4b04      	ldr	r3, [pc, #16]	; (8006a24 <HAL_PCD_SuspendCallback+0x48>)
 8006a12:	691b      	ldr	r3, [r3, #16]
 8006a14:	4a03      	ldr	r2, [pc, #12]	; (8006a24 <HAL_PCD_SuspendCallback+0x48>)
 8006a16:	f043 0306 	orr.w	r3, r3, #6
 8006a1a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006a1c:	bf00      	nop
 8006a1e:	3708      	adds	r7, #8
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}
 8006a24:	e000ed00 	.word	0xe000ed00

08006a28 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b082      	sub	sp, #8
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8006a36:	4618      	mov	r0, r3
 8006a38:	f7fe feaf 	bl	800579a <USBD_LL_Resume>
}
 8006a3c:	bf00      	nop
 8006a3e:	3708      	adds	r7, #8
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}

08006a44 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b082      	sub	sp, #8
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	460b      	mov	r3, r1
 8006a4e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8006a56:	78fa      	ldrb	r2, [r7, #3]
 8006a58:	4611      	mov	r1, r2
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f7fe fed8 	bl	8005810 <USBD_LL_IsoOUTIncomplete>
}
 8006a60:	bf00      	nop
 8006a62:	3708      	adds	r7, #8
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}

08006a68 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b082      	sub	sp, #8
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	460b      	mov	r3, r1
 8006a72:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8006a7a:	78fa      	ldrb	r2, [r7, #3]
 8006a7c:	4611      	mov	r1, r2
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f7fe feba 	bl	80057f8 <USBD_LL_IsoINIncomplete>
}
 8006a84:	bf00      	nop
 8006a86:	3708      	adds	r7, #8
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}

08006a8c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b082      	sub	sp, #8
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f7fe fec4 	bl	8005828 <USBD_LL_DevConnected>
}
 8006aa0:	bf00      	nop
 8006aa2:	3708      	adds	r7, #8
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}

08006aa8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b082      	sub	sp, #8
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f7fe fec0 	bl	800583c <USBD_LL_DevDisconnected>
}
 8006abc:	bf00      	nop
 8006abe:	3708      	adds	r7, #8
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}

08006ac4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b082      	sub	sp, #8
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	781b      	ldrb	r3, [r3, #0]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d139      	bne.n	8006b48 <USBD_LL_Init+0x84>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006ad4:	4a1f      	ldr	r2, [pc, #124]	; (8006b54 <USBD_LL_Init+0x90>)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f8c2 33fc 	str.w	r3, [r2, #1020]	; 0x3fc
  pdev->pData = &hpcd_USB_OTG_FS;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	4a1d      	ldr	r2, [pc, #116]	; (8006b54 <USBD_LL_Init+0x90>)
 8006ae0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006ae4:	4b1b      	ldr	r3, [pc, #108]	; (8006b54 <USBD_LL_Init+0x90>)
 8006ae6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006aea:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006aec:	4b19      	ldr	r3, [pc, #100]	; (8006b54 <USBD_LL_Init+0x90>)
 8006aee:	2204      	movs	r2, #4
 8006af0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006af2:	4b18      	ldr	r3, [pc, #96]	; (8006b54 <USBD_LL_Init+0x90>)
 8006af4:	2202      	movs	r2, #2
 8006af6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006af8:	4b16      	ldr	r3, [pc, #88]	; (8006b54 <USBD_LL_Init+0x90>)
 8006afa:	2200      	movs	r2, #0
 8006afc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006afe:	4b15      	ldr	r3, [pc, #84]	; (8006b54 <USBD_LL_Init+0x90>)
 8006b00:	2202      	movs	r2, #2
 8006b02:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8006b04:	4b13      	ldr	r3, [pc, #76]	; (8006b54 <USBD_LL_Init+0x90>)
 8006b06:	2201      	movs	r2, #1
 8006b08:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006b0a:	4b12      	ldr	r3, [pc, #72]	; (8006b54 <USBD_LL_Init+0x90>)
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8006b10:	4b10      	ldr	r3, [pc, #64]	; (8006b54 <USBD_LL_Init+0x90>)
 8006b12:	2201      	movs	r2, #1
 8006b14:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006b16:	4b0f      	ldr	r3, [pc, #60]	; (8006b54 <USBD_LL_Init+0x90>)
 8006b18:	2200      	movs	r2, #0
 8006b1a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006b1c:	480d      	ldr	r0, [pc, #52]	; (8006b54 <USBD_LL_Init+0x90>)
 8006b1e:	f7fa fbff 	bl	8001320 <HAL_PCD_Init>
 8006b22:	4603      	mov	r3, r0
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d001      	beq.n	8006b2c <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 8006b28:	f7f9 fed6 	bl	80008d8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006b2c:	2180      	movs	r1, #128	; 0x80
 8006b2e:	4809      	ldr	r0, [pc, #36]	; (8006b54 <USBD_LL_Init+0x90>)
 8006b30:	f7fb fd3c 	bl	80025ac <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006b34:	2240      	movs	r2, #64	; 0x40
 8006b36:	2100      	movs	r1, #0
 8006b38:	4806      	ldr	r0, [pc, #24]	; (8006b54 <USBD_LL_Init+0x90>)
 8006b3a:	f7fb fcf1 	bl	8002520 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006b3e:	2280      	movs	r2, #128	; 0x80
 8006b40:	2101      	movs	r1, #1
 8006b42:	4804      	ldr	r0, [pc, #16]	; (8006b54 <USBD_LL_Init+0x90>)
 8006b44:	f7fb fcec 	bl	8002520 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006b48:	2300      	movs	r3, #0
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3708      	adds	r7, #8
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}
 8006b52:	bf00      	nop
 8006b54:	20001b20 	.word	0x20001b20

08006b58 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b084      	sub	sp, #16
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b60:	2300      	movs	r3, #0
 8006b62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b64:	2300      	movs	r3, #0
 8006b66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f7fa fcf3 	bl	800155a <HAL_PCD_Start>
 8006b74:	4603      	mov	r3, r0
 8006b76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006b78:	7bfb      	ldrb	r3, [r7, #15]
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f000 f92e 	bl	8006ddc <USBD_Get_USB_Status>
 8006b80:	4603      	mov	r3, r0
 8006b82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006b84:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3710      	adds	r7, #16
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}

08006b8e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006b8e:	b580      	push	{r7, lr}
 8006b90:	b084      	sub	sp, #16
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
 8006b96:	4608      	mov	r0, r1
 8006b98:	4611      	mov	r1, r2
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	70fb      	strb	r3, [r7, #3]
 8006ba0:	460b      	mov	r3, r1
 8006ba2:	70bb      	strb	r3, [r7, #2]
 8006ba4:	4613      	mov	r3, r2
 8006ba6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006bac:	2300      	movs	r3, #0
 8006bae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006bb6:	78bb      	ldrb	r3, [r7, #2]
 8006bb8:	883a      	ldrh	r2, [r7, #0]
 8006bba:	78f9      	ldrb	r1, [r7, #3]
 8006bbc:	f7fb f8b8 	bl	8001d30 <HAL_PCD_EP_Open>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006bc4:	7bfb      	ldrb	r3, [r7, #15]
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f000 f908 	bl	8006ddc <USBD_Get_USB_Status>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006bd0:	7bbb      	ldrb	r3, [r7, #14]
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3710      	adds	r7, #16
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}

08006bda <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006bda:	b580      	push	{r7, lr}
 8006bdc:	b084      	sub	sp, #16
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	6078      	str	r0, [r7, #4]
 8006be2:	460b      	mov	r3, r1
 8006be4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006be6:	2300      	movs	r3, #0
 8006be8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006bea:	2300      	movs	r3, #0
 8006bec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006bf4:	78fa      	ldrb	r2, [r7, #3]
 8006bf6:	4611      	mov	r1, r2
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f7fb f901 	bl	8001e00 <HAL_PCD_EP_Close>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c02:	7bfb      	ldrb	r3, [r7, #15]
 8006c04:	4618      	mov	r0, r3
 8006c06:	f000 f8e9 	bl	8006ddc <USBD_Get_USB_Status>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006c0e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3710      	adds	r7, #16
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}

08006c18 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b084      	sub	sp, #16
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	460b      	mov	r3, r1
 8006c22:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c24:	2300      	movs	r3, #0
 8006c26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c32:	78fa      	ldrb	r2, [r7, #3]
 8006c34:	4611      	mov	r1, r2
 8006c36:	4618      	mov	r0, r3
 8006c38:	f7fb f9d8 	bl	8001fec <HAL_PCD_EP_SetStall>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c40:	7bfb      	ldrb	r3, [r7, #15]
 8006c42:	4618      	mov	r0, r3
 8006c44:	f000 f8ca 	bl	8006ddc <USBD_Get_USB_Status>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006c4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3710      	adds	r7, #16
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}

08006c56 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006c56:	b580      	push	{r7, lr}
 8006c58:	b084      	sub	sp, #16
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	6078      	str	r0, [r7, #4]
 8006c5e:	460b      	mov	r3, r1
 8006c60:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c62:	2300      	movs	r3, #0
 8006c64:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c66:	2300      	movs	r3, #0
 8006c68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c70:	78fa      	ldrb	r2, [r7, #3]
 8006c72:	4611      	mov	r1, r2
 8006c74:	4618      	mov	r0, r3
 8006c76:	f7fb fa1d 	bl	80020b4 <HAL_PCD_EP_ClrStall>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c7e:	7bfb      	ldrb	r3, [r7, #15]
 8006c80:	4618      	mov	r0, r3
 8006c82:	f000 f8ab 	bl	8006ddc <USBD_Get_USB_Status>
 8006c86:	4603      	mov	r3, r0
 8006c88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006c8a:	7bbb      	ldrb	r3, [r7, #14]
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3710      	adds	r7, #16
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}

08006c94 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b085      	sub	sp, #20
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	460b      	mov	r3, r1
 8006c9e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006ca6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006ca8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	da0b      	bge.n	8006cc8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006cb0:	78fb      	ldrb	r3, [r7, #3]
 8006cb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006cb6:	68f9      	ldr	r1, [r7, #12]
 8006cb8:	4613      	mov	r3, r2
 8006cba:	00db      	lsls	r3, r3, #3
 8006cbc:	1a9b      	subs	r3, r3, r2
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	440b      	add	r3, r1
 8006cc2:	333e      	adds	r3, #62	; 0x3e
 8006cc4:	781b      	ldrb	r3, [r3, #0]
 8006cc6:	e00b      	b.n	8006ce0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006cc8:	78fb      	ldrb	r3, [r7, #3]
 8006cca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006cce:	68f9      	ldr	r1, [r7, #12]
 8006cd0:	4613      	mov	r3, r2
 8006cd2:	00db      	lsls	r3, r3, #3
 8006cd4:	1a9b      	subs	r3, r3, r2
 8006cd6:	009b      	lsls	r3, r3, #2
 8006cd8:	440b      	add	r3, r1
 8006cda:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006cde:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3714      	adds	r7, #20
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bc80      	pop	{r7}
 8006ce8:	4770      	bx	lr

08006cea <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006cea:	b580      	push	{r7, lr}
 8006cec:	b084      	sub	sp, #16
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	6078      	str	r0, [r7, #4]
 8006cf2:	460b      	mov	r3, r1
 8006cf4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006d04:	78fa      	ldrb	r2, [r7, #3]
 8006d06:	4611      	mov	r1, r2
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f7fa ffec 	bl	8001ce6 <HAL_PCD_SetAddress>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006d12:	7bfb      	ldrb	r3, [r7, #15]
 8006d14:	4618      	mov	r0, r3
 8006d16:	f000 f861 	bl	8006ddc <USBD_Get_USB_Status>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006d1e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3710      	adds	r7, #16
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}

08006d28 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b086      	sub	sp, #24
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	60f8      	str	r0, [r7, #12]
 8006d30:	607a      	str	r2, [r7, #4]
 8006d32:	461a      	mov	r2, r3
 8006d34:	460b      	mov	r3, r1
 8006d36:	72fb      	strb	r3, [r7, #11]
 8006d38:	4613      	mov	r3, r2
 8006d3a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d40:	2300      	movs	r3, #0
 8006d42:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006d4a:	893b      	ldrh	r3, [r7, #8]
 8006d4c:	7af9      	ldrb	r1, [r7, #11]
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	f7fb f902 	bl	8001f58 <HAL_PCD_EP_Transmit>
 8006d54:	4603      	mov	r3, r0
 8006d56:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006d58:	7dfb      	ldrb	r3, [r7, #23]
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f000 f83e 	bl	8006ddc <USBD_Get_USB_Status>
 8006d60:	4603      	mov	r3, r0
 8006d62:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006d64:	7dbb      	ldrb	r3, [r7, #22]
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3718      	adds	r7, #24
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}

08006d6e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006d6e:	b580      	push	{r7, lr}
 8006d70:	b086      	sub	sp, #24
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	60f8      	str	r0, [r7, #12]
 8006d76:	607a      	str	r2, [r7, #4]
 8006d78:	461a      	mov	r2, r3
 8006d7a:	460b      	mov	r3, r1
 8006d7c:	72fb      	strb	r3, [r7, #11]
 8006d7e:	4613      	mov	r3, r2
 8006d80:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d82:	2300      	movs	r3, #0
 8006d84:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d86:	2300      	movs	r3, #0
 8006d88:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006d90:	893b      	ldrh	r3, [r7, #8]
 8006d92:	7af9      	ldrb	r1, [r7, #11]
 8006d94:	687a      	ldr	r2, [r7, #4]
 8006d96:	f7fb f87d 	bl	8001e94 <HAL_PCD_EP_Receive>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006d9e:	7dfb      	ldrb	r3, [r7, #23]
 8006da0:	4618      	mov	r0, r3
 8006da2:	f000 f81b 	bl	8006ddc <USBD_Get_USB_Status>
 8006da6:	4603      	mov	r3, r0
 8006da8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006daa:	7dbb      	ldrb	r3, [r7, #22]
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	3718      	adds	r7, #24
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}

08006db4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b082      	sub	sp, #8
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	460b      	mov	r3, r1
 8006dbe:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006dc6:	78fa      	ldrb	r2, [r7, #3]
 8006dc8:	4611      	mov	r1, r2
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f7fb f8ad 	bl	8001f2a <HAL_PCD_EP_GetRxCount>
 8006dd0:	4603      	mov	r3, r0
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3708      	adds	r7, #8
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}
	...

08006ddc <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b085      	sub	sp, #20
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	4603      	mov	r3, r0
 8006de4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006de6:	2300      	movs	r3, #0
 8006de8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006dea:	79fb      	ldrb	r3, [r7, #7]
 8006dec:	2b03      	cmp	r3, #3
 8006dee:	d817      	bhi.n	8006e20 <USBD_Get_USB_Status+0x44>
 8006df0:	a201      	add	r2, pc, #4	; (adr r2, 8006df8 <USBD_Get_USB_Status+0x1c>)
 8006df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006df6:	bf00      	nop
 8006df8:	08006e09 	.word	0x08006e09
 8006dfc:	08006e0f 	.word	0x08006e0f
 8006e00:	08006e15 	.word	0x08006e15
 8006e04:	08006e1b 	.word	0x08006e1b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	73fb      	strb	r3, [r7, #15]
    break;
 8006e0c:	e00b      	b.n	8006e26 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006e0e:	2302      	movs	r3, #2
 8006e10:	73fb      	strb	r3, [r7, #15]
    break;
 8006e12:	e008      	b.n	8006e26 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006e14:	2301      	movs	r3, #1
 8006e16:	73fb      	strb	r3, [r7, #15]
    break;
 8006e18:	e005      	b.n	8006e26 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006e1a:	2302      	movs	r3, #2
 8006e1c:	73fb      	strb	r3, [r7, #15]
    break;
 8006e1e:	e002      	b.n	8006e26 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006e20:	2302      	movs	r3, #2
 8006e22:	73fb      	strb	r3, [r7, #15]
    break;
 8006e24:	bf00      	nop
  }
  return usb_status;
 8006e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3714      	adds	r7, #20
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bc80      	pop	{r7}
 8006e30:	4770      	bx	lr
 8006e32:	bf00      	nop

08006e34 <__errno>:
 8006e34:	4b01      	ldr	r3, [pc, #4]	; (8006e3c <__errno+0x8>)
 8006e36:	6818      	ldr	r0, [r3, #0]
 8006e38:	4770      	bx	lr
 8006e3a:	bf00      	nop
 8006e3c:	2000017c 	.word	0x2000017c

08006e40 <__libc_init_array>:
 8006e40:	b570      	push	{r4, r5, r6, lr}
 8006e42:	2500      	movs	r5, #0
 8006e44:	4e0c      	ldr	r6, [pc, #48]	; (8006e78 <__libc_init_array+0x38>)
 8006e46:	4c0d      	ldr	r4, [pc, #52]	; (8006e7c <__libc_init_array+0x3c>)
 8006e48:	1ba4      	subs	r4, r4, r6
 8006e4a:	10a4      	asrs	r4, r4, #2
 8006e4c:	42a5      	cmp	r5, r4
 8006e4e:	d109      	bne.n	8006e64 <__libc_init_array+0x24>
 8006e50:	f000 fc98 	bl	8007784 <_init>
 8006e54:	2500      	movs	r5, #0
 8006e56:	4e0a      	ldr	r6, [pc, #40]	; (8006e80 <__libc_init_array+0x40>)
 8006e58:	4c0a      	ldr	r4, [pc, #40]	; (8006e84 <__libc_init_array+0x44>)
 8006e5a:	1ba4      	subs	r4, r4, r6
 8006e5c:	10a4      	asrs	r4, r4, #2
 8006e5e:	42a5      	cmp	r5, r4
 8006e60:	d105      	bne.n	8006e6e <__libc_init_array+0x2e>
 8006e62:	bd70      	pop	{r4, r5, r6, pc}
 8006e64:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006e68:	4798      	blx	r3
 8006e6a:	3501      	adds	r5, #1
 8006e6c:	e7ee      	b.n	8006e4c <__libc_init_array+0xc>
 8006e6e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006e72:	4798      	blx	r3
 8006e74:	3501      	adds	r5, #1
 8006e76:	e7f2      	b.n	8006e5e <__libc_init_array+0x1e>
 8006e78:	08007878 	.word	0x08007878
 8006e7c:	08007878 	.word	0x08007878
 8006e80:	08007878 	.word	0x08007878
 8006e84:	0800787c 	.word	0x0800787c

08006e88 <malloc>:
 8006e88:	4b02      	ldr	r3, [pc, #8]	; (8006e94 <malloc+0xc>)
 8006e8a:	4601      	mov	r1, r0
 8006e8c:	6818      	ldr	r0, [r3, #0]
 8006e8e:	f000 b85f 	b.w	8006f50 <_malloc_r>
 8006e92:	bf00      	nop
 8006e94:	2000017c 	.word	0x2000017c

08006e98 <free>:
 8006e98:	4b02      	ldr	r3, [pc, #8]	; (8006ea4 <free+0xc>)
 8006e9a:	4601      	mov	r1, r0
 8006e9c:	6818      	ldr	r0, [r3, #0]
 8006e9e:	f000 b80b 	b.w	8006eb8 <_free_r>
 8006ea2:	bf00      	nop
 8006ea4:	2000017c 	.word	0x2000017c

08006ea8 <memset>:
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	4402      	add	r2, r0
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d100      	bne.n	8006eb2 <memset+0xa>
 8006eb0:	4770      	bx	lr
 8006eb2:	f803 1b01 	strb.w	r1, [r3], #1
 8006eb6:	e7f9      	b.n	8006eac <memset+0x4>

08006eb8 <_free_r>:
 8006eb8:	b538      	push	{r3, r4, r5, lr}
 8006eba:	4605      	mov	r5, r0
 8006ebc:	2900      	cmp	r1, #0
 8006ebe:	d043      	beq.n	8006f48 <_free_r+0x90>
 8006ec0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ec4:	1f0c      	subs	r4, r1, #4
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	bfb8      	it	lt
 8006eca:	18e4      	addlt	r4, r4, r3
 8006ecc:	f000 fbac 	bl	8007628 <__malloc_lock>
 8006ed0:	4a1e      	ldr	r2, [pc, #120]	; (8006f4c <_free_r+0x94>)
 8006ed2:	6813      	ldr	r3, [r2, #0]
 8006ed4:	4610      	mov	r0, r2
 8006ed6:	b933      	cbnz	r3, 8006ee6 <_free_r+0x2e>
 8006ed8:	6063      	str	r3, [r4, #4]
 8006eda:	6014      	str	r4, [r2, #0]
 8006edc:	4628      	mov	r0, r5
 8006ede:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ee2:	f000 bba2 	b.w	800762a <__malloc_unlock>
 8006ee6:	42a3      	cmp	r3, r4
 8006ee8:	d90b      	bls.n	8006f02 <_free_r+0x4a>
 8006eea:	6821      	ldr	r1, [r4, #0]
 8006eec:	1862      	adds	r2, r4, r1
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	bf01      	itttt	eq
 8006ef2:	681a      	ldreq	r2, [r3, #0]
 8006ef4:	685b      	ldreq	r3, [r3, #4]
 8006ef6:	1852      	addeq	r2, r2, r1
 8006ef8:	6022      	streq	r2, [r4, #0]
 8006efa:	6063      	str	r3, [r4, #4]
 8006efc:	6004      	str	r4, [r0, #0]
 8006efe:	e7ed      	b.n	8006edc <_free_r+0x24>
 8006f00:	4613      	mov	r3, r2
 8006f02:	685a      	ldr	r2, [r3, #4]
 8006f04:	b10a      	cbz	r2, 8006f0a <_free_r+0x52>
 8006f06:	42a2      	cmp	r2, r4
 8006f08:	d9fa      	bls.n	8006f00 <_free_r+0x48>
 8006f0a:	6819      	ldr	r1, [r3, #0]
 8006f0c:	1858      	adds	r0, r3, r1
 8006f0e:	42a0      	cmp	r0, r4
 8006f10:	d10b      	bne.n	8006f2a <_free_r+0x72>
 8006f12:	6820      	ldr	r0, [r4, #0]
 8006f14:	4401      	add	r1, r0
 8006f16:	1858      	adds	r0, r3, r1
 8006f18:	4282      	cmp	r2, r0
 8006f1a:	6019      	str	r1, [r3, #0]
 8006f1c:	d1de      	bne.n	8006edc <_free_r+0x24>
 8006f1e:	6810      	ldr	r0, [r2, #0]
 8006f20:	6852      	ldr	r2, [r2, #4]
 8006f22:	4401      	add	r1, r0
 8006f24:	6019      	str	r1, [r3, #0]
 8006f26:	605a      	str	r2, [r3, #4]
 8006f28:	e7d8      	b.n	8006edc <_free_r+0x24>
 8006f2a:	d902      	bls.n	8006f32 <_free_r+0x7a>
 8006f2c:	230c      	movs	r3, #12
 8006f2e:	602b      	str	r3, [r5, #0]
 8006f30:	e7d4      	b.n	8006edc <_free_r+0x24>
 8006f32:	6820      	ldr	r0, [r4, #0]
 8006f34:	1821      	adds	r1, r4, r0
 8006f36:	428a      	cmp	r2, r1
 8006f38:	bf01      	itttt	eq
 8006f3a:	6811      	ldreq	r1, [r2, #0]
 8006f3c:	6852      	ldreq	r2, [r2, #4]
 8006f3e:	1809      	addeq	r1, r1, r0
 8006f40:	6021      	streq	r1, [r4, #0]
 8006f42:	6062      	str	r2, [r4, #4]
 8006f44:	605c      	str	r4, [r3, #4]
 8006f46:	e7c9      	b.n	8006edc <_free_r+0x24>
 8006f48:	bd38      	pop	{r3, r4, r5, pc}
 8006f4a:	bf00      	nop
 8006f4c:	2000020c 	.word	0x2000020c

08006f50 <_malloc_r>:
 8006f50:	b570      	push	{r4, r5, r6, lr}
 8006f52:	1ccd      	adds	r5, r1, #3
 8006f54:	f025 0503 	bic.w	r5, r5, #3
 8006f58:	3508      	adds	r5, #8
 8006f5a:	2d0c      	cmp	r5, #12
 8006f5c:	bf38      	it	cc
 8006f5e:	250c      	movcc	r5, #12
 8006f60:	2d00      	cmp	r5, #0
 8006f62:	4606      	mov	r6, r0
 8006f64:	db01      	blt.n	8006f6a <_malloc_r+0x1a>
 8006f66:	42a9      	cmp	r1, r5
 8006f68:	d903      	bls.n	8006f72 <_malloc_r+0x22>
 8006f6a:	230c      	movs	r3, #12
 8006f6c:	6033      	str	r3, [r6, #0]
 8006f6e:	2000      	movs	r0, #0
 8006f70:	bd70      	pop	{r4, r5, r6, pc}
 8006f72:	f000 fb59 	bl	8007628 <__malloc_lock>
 8006f76:	4a21      	ldr	r2, [pc, #132]	; (8006ffc <_malloc_r+0xac>)
 8006f78:	6814      	ldr	r4, [r2, #0]
 8006f7a:	4621      	mov	r1, r4
 8006f7c:	b991      	cbnz	r1, 8006fa4 <_malloc_r+0x54>
 8006f7e:	4c20      	ldr	r4, [pc, #128]	; (8007000 <_malloc_r+0xb0>)
 8006f80:	6823      	ldr	r3, [r4, #0]
 8006f82:	b91b      	cbnz	r3, 8006f8c <_malloc_r+0x3c>
 8006f84:	4630      	mov	r0, r6
 8006f86:	f000 f8a1 	bl	80070cc <_sbrk_r>
 8006f8a:	6020      	str	r0, [r4, #0]
 8006f8c:	4629      	mov	r1, r5
 8006f8e:	4630      	mov	r0, r6
 8006f90:	f000 f89c 	bl	80070cc <_sbrk_r>
 8006f94:	1c43      	adds	r3, r0, #1
 8006f96:	d124      	bne.n	8006fe2 <_malloc_r+0x92>
 8006f98:	230c      	movs	r3, #12
 8006f9a:	4630      	mov	r0, r6
 8006f9c:	6033      	str	r3, [r6, #0]
 8006f9e:	f000 fb44 	bl	800762a <__malloc_unlock>
 8006fa2:	e7e4      	b.n	8006f6e <_malloc_r+0x1e>
 8006fa4:	680b      	ldr	r3, [r1, #0]
 8006fa6:	1b5b      	subs	r3, r3, r5
 8006fa8:	d418      	bmi.n	8006fdc <_malloc_r+0x8c>
 8006faa:	2b0b      	cmp	r3, #11
 8006fac:	d90f      	bls.n	8006fce <_malloc_r+0x7e>
 8006fae:	600b      	str	r3, [r1, #0]
 8006fb0:	18cc      	adds	r4, r1, r3
 8006fb2:	50cd      	str	r5, [r1, r3]
 8006fb4:	4630      	mov	r0, r6
 8006fb6:	f000 fb38 	bl	800762a <__malloc_unlock>
 8006fba:	f104 000b 	add.w	r0, r4, #11
 8006fbe:	1d23      	adds	r3, r4, #4
 8006fc0:	f020 0007 	bic.w	r0, r0, #7
 8006fc4:	1ac3      	subs	r3, r0, r3
 8006fc6:	d0d3      	beq.n	8006f70 <_malloc_r+0x20>
 8006fc8:	425a      	negs	r2, r3
 8006fca:	50e2      	str	r2, [r4, r3]
 8006fcc:	e7d0      	b.n	8006f70 <_malloc_r+0x20>
 8006fce:	684b      	ldr	r3, [r1, #4]
 8006fd0:	428c      	cmp	r4, r1
 8006fd2:	bf16      	itet	ne
 8006fd4:	6063      	strne	r3, [r4, #4]
 8006fd6:	6013      	streq	r3, [r2, #0]
 8006fd8:	460c      	movne	r4, r1
 8006fda:	e7eb      	b.n	8006fb4 <_malloc_r+0x64>
 8006fdc:	460c      	mov	r4, r1
 8006fde:	6849      	ldr	r1, [r1, #4]
 8006fe0:	e7cc      	b.n	8006f7c <_malloc_r+0x2c>
 8006fe2:	1cc4      	adds	r4, r0, #3
 8006fe4:	f024 0403 	bic.w	r4, r4, #3
 8006fe8:	42a0      	cmp	r0, r4
 8006fea:	d005      	beq.n	8006ff8 <_malloc_r+0xa8>
 8006fec:	1a21      	subs	r1, r4, r0
 8006fee:	4630      	mov	r0, r6
 8006ff0:	f000 f86c 	bl	80070cc <_sbrk_r>
 8006ff4:	3001      	adds	r0, #1
 8006ff6:	d0cf      	beq.n	8006f98 <_malloc_r+0x48>
 8006ff8:	6025      	str	r5, [r4, #0]
 8006ffa:	e7db      	b.n	8006fb4 <_malloc_r+0x64>
 8006ffc:	2000020c 	.word	0x2000020c
 8007000:	20000210 	.word	0x20000210

08007004 <_puts_r>:
 8007004:	b570      	push	{r4, r5, r6, lr}
 8007006:	460e      	mov	r6, r1
 8007008:	4605      	mov	r5, r0
 800700a:	b118      	cbz	r0, 8007014 <_puts_r+0x10>
 800700c:	6983      	ldr	r3, [r0, #24]
 800700e:	b90b      	cbnz	r3, 8007014 <_puts_r+0x10>
 8007010:	f000 fa1c 	bl	800744c <__sinit>
 8007014:	69ab      	ldr	r3, [r5, #24]
 8007016:	68ac      	ldr	r4, [r5, #8]
 8007018:	b913      	cbnz	r3, 8007020 <_puts_r+0x1c>
 800701a:	4628      	mov	r0, r5
 800701c:	f000 fa16 	bl	800744c <__sinit>
 8007020:	4b23      	ldr	r3, [pc, #140]	; (80070b0 <_puts_r+0xac>)
 8007022:	429c      	cmp	r4, r3
 8007024:	d117      	bne.n	8007056 <_puts_r+0x52>
 8007026:	686c      	ldr	r4, [r5, #4]
 8007028:	89a3      	ldrh	r3, [r4, #12]
 800702a:	071b      	lsls	r3, r3, #28
 800702c:	d51d      	bpl.n	800706a <_puts_r+0x66>
 800702e:	6923      	ldr	r3, [r4, #16]
 8007030:	b1db      	cbz	r3, 800706a <_puts_r+0x66>
 8007032:	3e01      	subs	r6, #1
 8007034:	68a3      	ldr	r3, [r4, #8]
 8007036:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800703a:	3b01      	subs	r3, #1
 800703c:	60a3      	str	r3, [r4, #8]
 800703e:	b9e9      	cbnz	r1, 800707c <_puts_r+0x78>
 8007040:	2b00      	cmp	r3, #0
 8007042:	da2e      	bge.n	80070a2 <_puts_r+0x9e>
 8007044:	4622      	mov	r2, r4
 8007046:	210a      	movs	r1, #10
 8007048:	4628      	mov	r0, r5
 800704a:	f000 f84f 	bl	80070ec <__swbuf_r>
 800704e:	3001      	adds	r0, #1
 8007050:	d011      	beq.n	8007076 <_puts_r+0x72>
 8007052:	200a      	movs	r0, #10
 8007054:	e011      	b.n	800707a <_puts_r+0x76>
 8007056:	4b17      	ldr	r3, [pc, #92]	; (80070b4 <_puts_r+0xb0>)
 8007058:	429c      	cmp	r4, r3
 800705a:	d101      	bne.n	8007060 <_puts_r+0x5c>
 800705c:	68ac      	ldr	r4, [r5, #8]
 800705e:	e7e3      	b.n	8007028 <_puts_r+0x24>
 8007060:	4b15      	ldr	r3, [pc, #84]	; (80070b8 <_puts_r+0xb4>)
 8007062:	429c      	cmp	r4, r3
 8007064:	bf08      	it	eq
 8007066:	68ec      	ldreq	r4, [r5, #12]
 8007068:	e7de      	b.n	8007028 <_puts_r+0x24>
 800706a:	4621      	mov	r1, r4
 800706c:	4628      	mov	r0, r5
 800706e:	f000 f88f 	bl	8007190 <__swsetup_r>
 8007072:	2800      	cmp	r0, #0
 8007074:	d0dd      	beq.n	8007032 <_puts_r+0x2e>
 8007076:	f04f 30ff 	mov.w	r0, #4294967295
 800707a:	bd70      	pop	{r4, r5, r6, pc}
 800707c:	2b00      	cmp	r3, #0
 800707e:	da04      	bge.n	800708a <_puts_r+0x86>
 8007080:	69a2      	ldr	r2, [r4, #24]
 8007082:	429a      	cmp	r2, r3
 8007084:	dc06      	bgt.n	8007094 <_puts_r+0x90>
 8007086:	290a      	cmp	r1, #10
 8007088:	d004      	beq.n	8007094 <_puts_r+0x90>
 800708a:	6823      	ldr	r3, [r4, #0]
 800708c:	1c5a      	adds	r2, r3, #1
 800708e:	6022      	str	r2, [r4, #0]
 8007090:	7019      	strb	r1, [r3, #0]
 8007092:	e7cf      	b.n	8007034 <_puts_r+0x30>
 8007094:	4622      	mov	r2, r4
 8007096:	4628      	mov	r0, r5
 8007098:	f000 f828 	bl	80070ec <__swbuf_r>
 800709c:	3001      	adds	r0, #1
 800709e:	d1c9      	bne.n	8007034 <_puts_r+0x30>
 80070a0:	e7e9      	b.n	8007076 <_puts_r+0x72>
 80070a2:	200a      	movs	r0, #10
 80070a4:	6823      	ldr	r3, [r4, #0]
 80070a6:	1c5a      	adds	r2, r3, #1
 80070a8:	6022      	str	r2, [r4, #0]
 80070aa:	7018      	strb	r0, [r3, #0]
 80070ac:	e7e5      	b.n	800707a <_puts_r+0x76>
 80070ae:	bf00      	nop
 80070b0:	08007830 	.word	0x08007830
 80070b4:	08007850 	.word	0x08007850
 80070b8:	08007810 	.word	0x08007810

080070bc <puts>:
 80070bc:	4b02      	ldr	r3, [pc, #8]	; (80070c8 <puts+0xc>)
 80070be:	4601      	mov	r1, r0
 80070c0:	6818      	ldr	r0, [r3, #0]
 80070c2:	f7ff bf9f 	b.w	8007004 <_puts_r>
 80070c6:	bf00      	nop
 80070c8:	2000017c 	.word	0x2000017c

080070cc <_sbrk_r>:
 80070cc:	b538      	push	{r3, r4, r5, lr}
 80070ce:	2300      	movs	r3, #0
 80070d0:	4c05      	ldr	r4, [pc, #20]	; (80070e8 <_sbrk_r+0x1c>)
 80070d2:	4605      	mov	r5, r0
 80070d4:	4608      	mov	r0, r1
 80070d6:	6023      	str	r3, [r4, #0]
 80070d8:	f7f9 fd26 	bl	8000b28 <_sbrk>
 80070dc:	1c43      	adds	r3, r0, #1
 80070de:	d102      	bne.n	80070e6 <_sbrk_r+0x1a>
 80070e0:	6823      	ldr	r3, [r4, #0]
 80070e2:	b103      	cbz	r3, 80070e6 <_sbrk_r+0x1a>
 80070e4:	602b      	str	r3, [r5, #0]
 80070e6:	bd38      	pop	{r3, r4, r5, pc}
 80070e8:	20001f20 	.word	0x20001f20

080070ec <__swbuf_r>:
 80070ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ee:	460e      	mov	r6, r1
 80070f0:	4614      	mov	r4, r2
 80070f2:	4605      	mov	r5, r0
 80070f4:	b118      	cbz	r0, 80070fe <__swbuf_r+0x12>
 80070f6:	6983      	ldr	r3, [r0, #24]
 80070f8:	b90b      	cbnz	r3, 80070fe <__swbuf_r+0x12>
 80070fa:	f000 f9a7 	bl	800744c <__sinit>
 80070fe:	4b21      	ldr	r3, [pc, #132]	; (8007184 <__swbuf_r+0x98>)
 8007100:	429c      	cmp	r4, r3
 8007102:	d12a      	bne.n	800715a <__swbuf_r+0x6e>
 8007104:	686c      	ldr	r4, [r5, #4]
 8007106:	69a3      	ldr	r3, [r4, #24]
 8007108:	60a3      	str	r3, [r4, #8]
 800710a:	89a3      	ldrh	r3, [r4, #12]
 800710c:	071a      	lsls	r2, r3, #28
 800710e:	d52e      	bpl.n	800716e <__swbuf_r+0x82>
 8007110:	6923      	ldr	r3, [r4, #16]
 8007112:	b363      	cbz	r3, 800716e <__swbuf_r+0x82>
 8007114:	6923      	ldr	r3, [r4, #16]
 8007116:	6820      	ldr	r0, [r4, #0]
 8007118:	b2f6      	uxtb	r6, r6
 800711a:	1ac0      	subs	r0, r0, r3
 800711c:	6963      	ldr	r3, [r4, #20]
 800711e:	4637      	mov	r7, r6
 8007120:	4283      	cmp	r3, r0
 8007122:	dc04      	bgt.n	800712e <__swbuf_r+0x42>
 8007124:	4621      	mov	r1, r4
 8007126:	4628      	mov	r0, r5
 8007128:	f000 f926 	bl	8007378 <_fflush_r>
 800712c:	bb28      	cbnz	r0, 800717a <__swbuf_r+0x8e>
 800712e:	68a3      	ldr	r3, [r4, #8]
 8007130:	3001      	adds	r0, #1
 8007132:	3b01      	subs	r3, #1
 8007134:	60a3      	str	r3, [r4, #8]
 8007136:	6823      	ldr	r3, [r4, #0]
 8007138:	1c5a      	adds	r2, r3, #1
 800713a:	6022      	str	r2, [r4, #0]
 800713c:	701e      	strb	r6, [r3, #0]
 800713e:	6963      	ldr	r3, [r4, #20]
 8007140:	4283      	cmp	r3, r0
 8007142:	d004      	beq.n	800714e <__swbuf_r+0x62>
 8007144:	89a3      	ldrh	r3, [r4, #12]
 8007146:	07db      	lsls	r3, r3, #31
 8007148:	d519      	bpl.n	800717e <__swbuf_r+0x92>
 800714a:	2e0a      	cmp	r6, #10
 800714c:	d117      	bne.n	800717e <__swbuf_r+0x92>
 800714e:	4621      	mov	r1, r4
 8007150:	4628      	mov	r0, r5
 8007152:	f000 f911 	bl	8007378 <_fflush_r>
 8007156:	b190      	cbz	r0, 800717e <__swbuf_r+0x92>
 8007158:	e00f      	b.n	800717a <__swbuf_r+0x8e>
 800715a:	4b0b      	ldr	r3, [pc, #44]	; (8007188 <__swbuf_r+0x9c>)
 800715c:	429c      	cmp	r4, r3
 800715e:	d101      	bne.n	8007164 <__swbuf_r+0x78>
 8007160:	68ac      	ldr	r4, [r5, #8]
 8007162:	e7d0      	b.n	8007106 <__swbuf_r+0x1a>
 8007164:	4b09      	ldr	r3, [pc, #36]	; (800718c <__swbuf_r+0xa0>)
 8007166:	429c      	cmp	r4, r3
 8007168:	bf08      	it	eq
 800716a:	68ec      	ldreq	r4, [r5, #12]
 800716c:	e7cb      	b.n	8007106 <__swbuf_r+0x1a>
 800716e:	4621      	mov	r1, r4
 8007170:	4628      	mov	r0, r5
 8007172:	f000 f80d 	bl	8007190 <__swsetup_r>
 8007176:	2800      	cmp	r0, #0
 8007178:	d0cc      	beq.n	8007114 <__swbuf_r+0x28>
 800717a:	f04f 37ff 	mov.w	r7, #4294967295
 800717e:	4638      	mov	r0, r7
 8007180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007182:	bf00      	nop
 8007184:	08007830 	.word	0x08007830
 8007188:	08007850 	.word	0x08007850
 800718c:	08007810 	.word	0x08007810

08007190 <__swsetup_r>:
 8007190:	4b32      	ldr	r3, [pc, #200]	; (800725c <__swsetup_r+0xcc>)
 8007192:	b570      	push	{r4, r5, r6, lr}
 8007194:	681d      	ldr	r5, [r3, #0]
 8007196:	4606      	mov	r6, r0
 8007198:	460c      	mov	r4, r1
 800719a:	b125      	cbz	r5, 80071a6 <__swsetup_r+0x16>
 800719c:	69ab      	ldr	r3, [r5, #24]
 800719e:	b913      	cbnz	r3, 80071a6 <__swsetup_r+0x16>
 80071a0:	4628      	mov	r0, r5
 80071a2:	f000 f953 	bl	800744c <__sinit>
 80071a6:	4b2e      	ldr	r3, [pc, #184]	; (8007260 <__swsetup_r+0xd0>)
 80071a8:	429c      	cmp	r4, r3
 80071aa:	d10f      	bne.n	80071cc <__swsetup_r+0x3c>
 80071ac:	686c      	ldr	r4, [r5, #4]
 80071ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071b2:	b29a      	uxth	r2, r3
 80071b4:	0715      	lsls	r5, r2, #28
 80071b6:	d42c      	bmi.n	8007212 <__swsetup_r+0x82>
 80071b8:	06d0      	lsls	r0, r2, #27
 80071ba:	d411      	bmi.n	80071e0 <__swsetup_r+0x50>
 80071bc:	2209      	movs	r2, #9
 80071be:	6032      	str	r2, [r6, #0]
 80071c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071c4:	81a3      	strh	r3, [r4, #12]
 80071c6:	f04f 30ff 	mov.w	r0, #4294967295
 80071ca:	e03e      	b.n	800724a <__swsetup_r+0xba>
 80071cc:	4b25      	ldr	r3, [pc, #148]	; (8007264 <__swsetup_r+0xd4>)
 80071ce:	429c      	cmp	r4, r3
 80071d0:	d101      	bne.n	80071d6 <__swsetup_r+0x46>
 80071d2:	68ac      	ldr	r4, [r5, #8]
 80071d4:	e7eb      	b.n	80071ae <__swsetup_r+0x1e>
 80071d6:	4b24      	ldr	r3, [pc, #144]	; (8007268 <__swsetup_r+0xd8>)
 80071d8:	429c      	cmp	r4, r3
 80071da:	bf08      	it	eq
 80071dc:	68ec      	ldreq	r4, [r5, #12]
 80071de:	e7e6      	b.n	80071ae <__swsetup_r+0x1e>
 80071e0:	0751      	lsls	r1, r2, #29
 80071e2:	d512      	bpl.n	800720a <__swsetup_r+0x7a>
 80071e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80071e6:	b141      	cbz	r1, 80071fa <__swsetup_r+0x6a>
 80071e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80071ec:	4299      	cmp	r1, r3
 80071ee:	d002      	beq.n	80071f6 <__swsetup_r+0x66>
 80071f0:	4630      	mov	r0, r6
 80071f2:	f7ff fe61 	bl	8006eb8 <_free_r>
 80071f6:	2300      	movs	r3, #0
 80071f8:	6363      	str	r3, [r4, #52]	; 0x34
 80071fa:	89a3      	ldrh	r3, [r4, #12]
 80071fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007200:	81a3      	strh	r3, [r4, #12]
 8007202:	2300      	movs	r3, #0
 8007204:	6063      	str	r3, [r4, #4]
 8007206:	6923      	ldr	r3, [r4, #16]
 8007208:	6023      	str	r3, [r4, #0]
 800720a:	89a3      	ldrh	r3, [r4, #12]
 800720c:	f043 0308 	orr.w	r3, r3, #8
 8007210:	81a3      	strh	r3, [r4, #12]
 8007212:	6923      	ldr	r3, [r4, #16]
 8007214:	b94b      	cbnz	r3, 800722a <__swsetup_r+0x9a>
 8007216:	89a3      	ldrh	r3, [r4, #12]
 8007218:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800721c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007220:	d003      	beq.n	800722a <__swsetup_r+0x9a>
 8007222:	4621      	mov	r1, r4
 8007224:	4630      	mov	r0, r6
 8007226:	f000 f9bf 	bl	80075a8 <__smakebuf_r>
 800722a:	89a2      	ldrh	r2, [r4, #12]
 800722c:	f012 0301 	ands.w	r3, r2, #1
 8007230:	d00c      	beq.n	800724c <__swsetup_r+0xbc>
 8007232:	2300      	movs	r3, #0
 8007234:	60a3      	str	r3, [r4, #8]
 8007236:	6963      	ldr	r3, [r4, #20]
 8007238:	425b      	negs	r3, r3
 800723a:	61a3      	str	r3, [r4, #24]
 800723c:	6923      	ldr	r3, [r4, #16]
 800723e:	b953      	cbnz	r3, 8007256 <__swsetup_r+0xc6>
 8007240:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007244:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007248:	d1ba      	bne.n	80071c0 <__swsetup_r+0x30>
 800724a:	bd70      	pop	{r4, r5, r6, pc}
 800724c:	0792      	lsls	r2, r2, #30
 800724e:	bf58      	it	pl
 8007250:	6963      	ldrpl	r3, [r4, #20]
 8007252:	60a3      	str	r3, [r4, #8]
 8007254:	e7f2      	b.n	800723c <__swsetup_r+0xac>
 8007256:	2000      	movs	r0, #0
 8007258:	e7f7      	b.n	800724a <__swsetup_r+0xba>
 800725a:	bf00      	nop
 800725c:	2000017c 	.word	0x2000017c
 8007260:	08007830 	.word	0x08007830
 8007264:	08007850 	.word	0x08007850
 8007268:	08007810 	.word	0x08007810

0800726c <__sflush_r>:
 800726c:	898a      	ldrh	r2, [r1, #12]
 800726e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007272:	4605      	mov	r5, r0
 8007274:	0710      	lsls	r0, r2, #28
 8007276:	460c      	mov	r4, r1
 8007278:	d458      	bmi.n	800732c <__sflush_r+0xc0>
 800727a:	684b      	ldr	r3, [r1, #4]
 800727c:	2b00      	cmp	r3, #0
 800727e:	dc05      	bgt.n	800728c <__sflush_r+0x20>
 8007280:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007282:	2b00      	cmp	r3, #0
 8007284:	dc02      	bgt.n	800728c <__sflush_r+0x20>
 8007286:	2000      	movs	r0, #0
 8007288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800728c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800728e:	2e00      	cmp	r6, #0
 8007290:	d0f9      	beq.n	8007286 <__sflush_r+0x1a>
 8007292:	2300      	movs	r3, #0
 8007294:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007298:	682f      	ldr	r7, [r5, #0]
 800729a:	6a21      	ldr	r1, [r4, #32]
 800729c:	602b      	str	r3, [r5, #0]
 800729e:	d032      	beq.n	8007306 <__sflush_r+0x9a>
 80072a0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80072a2:	89a3      	ldrh	r3, [r4, #12]
 80072a4:	075a      	lsls	r2, r3, #29
 80072a6:	d505      	bpl.n	80072b4 <__sflush_r+0x48>
 80072a8:	6863      	ldr	r3, [r4, #4]
 80072aa:	1ac0      	subs	r0, r0, r3
 80072ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80072ae:	b10b      	cbz	r3, 80072b4 <__sflush_r+0x48>
 80072b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80072b2:	1ac0      	subs	r0, r0, r3
 80072b4:	2300      	movs	r3, #0
 80072b6:	4602      	mov	r2, r0
 80072b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80072ba:	6a21      	ldr	r1, [r4, #32]
 80072bc:	4628      	mov	r0, r5
 80072be:	47b0      	blx	r6
 80072c0:	1c43      	adds	r3, r0, #1
 80072c2:	89a3      	ldrh	r3, [r4, #12]
 80072c4:	d106      	bne.n	80072d4 <__sflush_r+0x68>
 80072c6:	6829      	ldr	r1, [r5, #0]
 80072c8:	291d      	cmp	r1, #29
 80072ca:	d848      	bhi.n	800735e <__sflush_r+0xf2>
 80072cc:	4a29      	ldr	r2, [pc, #164]	; (8007374 <__sflush_r+0x108>)
 80072ce:	40ca      	lsrs	r2, r1
 80072d0:	07d6      	lsls	r6, r2, #31
 80072d2:	d544      	bpl.n	800735e <__sflush_r+0xf2>
 80072d4:	2200      	movs	r2, #0
 80072d6:	6062      	str	r2, [r4, #4]
 80072d8:	6922      	ldr	r2, [r4, #16]
 80072da:	04d9      	lsls	r1, r3, #19
 80072dc:	6022      	str	r2, [r4, #0]
 80072de:	d504      	bpl.n	80072ea <__sflush_r+0x7e>
 80072e0:	1c42      	adds	r2, r0, #1
 80072e2:	d101      	bne.n	80072e8 <__sflush_r+0x7c>
 80072e4:	682b      	ldr	r3, [r5, #0]
 80072e6:	b903      	cbnz	r3, 80072ea <__sflush_r+0x7e>
 80072e8:	6560      	str	r0, [r4, #84]	; 0x54
 80072ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80072ec:	602f      	str	r7, [r5, #0]
 80072ee:	2900      	cmp	r1, #0
 80072f0:	d0c9      	beq.n	8007286 <__sflush_r+0x1a>
 80072f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80072f6:	4299      	cmp	r1, r3
 80072f8:	d002      	beq.n	8007300 <__sflush_r+0x94>
 80072fa:	4628      	mov	r0, r5
 80072fc:	f7ff fddc 	bl	8006eb8 <_free_r>
 8007300:	2000      	movs	r0, #0
 8007302:	6360      	str	r0, [r4, #52]	; 0x34
 8007304:	e7c0      	b.n	8007288 <__sflush_r+0x1c>
 8007306:	2301      	movs	r3, #1
 8007308:	4628      	mov	r0, r5
 800730a:	47b0      	blx	r6
 800730c:	1c41      	adds	r1, r0, #1
 800730e:	d1c8      	bne.n	80072a2 <__sflush_r+0x36>
 8007310:	682b      	ldr	r3, [r5, #0]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d0c5      	beq.n	80072a2 <__sflush_r+0x36>
 8007316:	2b1d      	cmp	r3, #29
 8007318:	d001      	beq.n	800731e <__sflush_r+0xb2>
 800731a:	2b16      	cmp	r3, #22
 800731c:	d101      	bne.n	8007322 <__sflush_r+0xb6>
 800731e:	602f      	str	r7, [r5, #0]
 8007320:	e7b1      	b.n	8007286 <__sflush_r+0x1a>
 8007322:	89a3      	ldrh	r3, [r4, #12]
 8007324:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007328:	81a3      	strh	r3, [r4, #12]
 800732a:	e7ad      	b.n	8007288 <__sflush_r+0x1c>
 800732c:	690f      	ldr	r7, [r1, #16]
 800732e:	2f00      	cmp	r7, #0
 8007330:	d0a9      	beq.n	8007286 <__sflush_r+0x1a>
 8007332:	0793      	lsls	r3, r2, #30
 8007334:	bf18      	it	ne
 8007336:	2300      	movne	r3, #0
 8007338:	680e      	ldr	r6, [r1, #0]
 800733a:	bf08      	it	eq
 800733c:	694b      	ldreq	r3, [r1, #20]
 800733e:	eba6 0807 	sub.w	r8, r6, r7
 8007342:	600f      	str	r7, [r1, #0]
 8007344:	608b      	str	r3, [r1, #8]
 8007346:	f1b8 0f00 	cmp.w	r8, #0
 800734a:	dd9c      	ble.n	8007286 <__sflush_r+0x1a>
 800734c:	4643      	mov	r3, r8
 800734e:	463a      	mov	r2, r7
 8007350:	6a21      	ldr	r1, [r4, #32]
 8007352:	4628      	mov	r0, r5
 8007354:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007356:	47b0      	blx	r6
 8007358:	2800      	cmp	r0, #0
 800735a:	dc06      	bgt.n	800736a <__sflush_r+0xfe>
 800735c:	89a3      	ldrh	r3, [r4, #12]
 800735e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007362:	81a3      	strh	r3, [r4, #12]
 8007364:	f04f 30ff 	mov.w	r0, #4294967295
 8007368:	e78e      	b.n	8007288 <__sflush_r+0x1c>
 800736a:	4407      	add	r7, r0
 800736c:	eba8 0800 	sub.w	r8, r8, r0
 8007370:	e7e9      	b.n	8007346 <__sflush_r+0xda>
 8007372:	bf00      	nop
 8007374:	20400001 	.word	0x20400001

08007378 <_fflush_r>:
 8007378:	b538      	push	{r3, r4, r5, lr}
 800737a:	690b      	ldr	r3, [r1, #16]
 800737c:	4605      	mov	r5, r0
 800737e:	460c      	mov	r4, r1
 8007380:	b1db      	cbz	r3, 80073ba <_fflush_r+0x42>
 8007382:	b118      	cbz	r0, 800738c <_fflush_r+0x14>
 8007384:	6983      	ldr	r3, [r0, #24]
 8007386:	b90b      	cbnz	r3, 800738c <_fflush_r+0x14>
 8007388:	f000 f860 	bl	800744c <__sinit>
 800738c:	4b0c      	ldr	r3, [pc, #48]	; (80073c0 <_fflush_r+0x48>)
 800738e:	429c      	cmp	r4, r3
 8007390:	d109      	bne.n	80073a6 <_fflush_r+0x2e>
 8007392:	686c      	ldr	r4, [r5, #4]
 8007394:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007398:	b17b      	cbz	r3, 80073ba <_fflush_r+0x42>
 800739a:	4621      	mov	r1, r4
 800739c:	4628      	mov	r0, r5
 800739e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80073a2:	f7ff bf63 	b.w	800726c <__sflush_r>
 80073a6:	4b07      	ldr	r3, [pc, #28]	; (80073c4 <_fflush_r+0x4c>)
 80073a8:	429c      	cmp	r4, r3
 80073aa:	d101      	bne.n	80073b0 <_fflush_r+0x38>
 80073ac:	68ac      	ldr	r4, [r5, #8]
 80073ae:	e7f1      	b.n	8007394 <_fflush_r+0x1c>
 80073b0:	4b05      	ldr	r3, [pc, #20]	; (80073c8 <_fflush_r+0x50>)
 80073b2:	429c      	cmp	r4, r3
 80073b4:	bf08      	it	eq
 80073b6:	68ec      	ldreq	r4, [r5, #12]
 80073b8:	e7ec      	b.n	8007394 <_fflush_r+0x1c>
 80073ba:	2000      	movs	r0, #0
 80073bc:	bd38      	pop	{r3, r4, r5, pc}
 80073be:	bf00      	nop
 80073c0:	08007830 	.word	0x08007830
 80073c4:	08007850 	.word	0x08007850
 80073c8:	08007810 	.word	0x08007810

080073cc <std>:
 80073cc:	2300      	movs	r3, #0
 80073ce:	b510      	push	{r4, lr}
 80073d0:	4604      	mov	r4, r0
 80073d2:	e9c0 3300 	strd	r3, r3, [r0]
 80073d6:	6083      	str	r3, [r0, #8]
 80073d8:	8181      	strh	r1, [r0, #12]
 80073da:	6643      	str	r3, [r0, #100]	; 0x64
 80073dc:	81c2      	strh	r2, [r0, #14]
 80073de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80073e2:	6183      	str	r3, [r0, #24]
 80073e4:	4619      	mov	r1, r3
 80073e6:	2208      	movs	r2, #8
 80073e8:	305c      	adds	r0, #92	; 0x5c
 80073ea:	f7ff fd5d 	bl	8006ea8 <memset>
 80073ee:	4b05      	ldr	r3, [pc, #20]	; (8007404 <std+0x38>)
 80073f0:	6224      	str	r4, [r4, #32]
 80073f2:	6263      	str	r3, [r4, #36]	; 0x24
 80073f4:	4b04      	ldr	r3, [pc, #16]	; (8007408 <std+0x3c>)
 80073f6:	62a3      	str	r3, [r4, #40]	; 0x28
 80073f8:	4b04      	ldr	r3, [pc, #16]	; (800740c <std+0x40>)
 80073fa:	62e3      	str	r3, [r4, #44]	; 0x2c
 80073fc:	4b04      	ldr	r3, [pc, #16]	; (8007410 <std+0x44>)
 80073fe:	6323      	str	r3, [r4, #48]	; 0x30
 8007400:	bd10      	pop	{r4, pc}
 8007402:	bf00      	nop
 8007404:	0800762d 	.word	0x0800762d
 8007408:	0800764f 	.word	0x0800764f
 800740c:	08007687 	.word	0x08007687
 8007410:	080076ab 	.word	0x080076ab

08007414 <_cleanup_r>:
 8007414:	4901      	ldr	r1, [pc, #4]	; (800741c <_cleanup_r+0x8>)
 8007416:	f000 b885 	b.w	8007524 <_fwalk_reent>
 800741a:	bf00      	nop
 800741c:	08007379 	.word	0x08007379

08007420 <__sfmoreglue>:
 8007420:	b570      	push	{r4, r5, r6, lr}
 8007422:	2568      	movs	r5, #104	; 0x68
 8007424:	1e4a      	subs	r2, r1, #1
 8007426:	4355      	muls	r5, r2
 8007428:	460e      	mov	r6, r1
 800742a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800742e:	f7ff fd8f 	bl	8006f50 <_malloc_r>
 8007432:	4604      	mov	r4, r0
 8007434:	b140      	cbz	r0, 8007448 <__sfmoreglue+0x28>
 8007436:	2100      	movs	r1, #0
 8007438:	e9c0 1600 	strd	r1, r6, [r0]
 800743c:	300c      	adds	r0, #12
 800743e:	60a0      	str	r0, [r4, #8]
 8007440:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007444:	f7ff fd30 	bl	8006ea8 <memset>
 8007448:	4620      	mov	r0, r4
 800744a:	bd70      	pop	{r4, r5, r6, pc}

0800744c <__sinit>:
 800744c:	6983      	ldr	r3, [r0, #24]
 800744e:	b510      	push	{r4, lr}
 8007450:	4604      	mov	r4, r0
 8007452:	bb33      	cbnz	r3, 80074a2 <__sinit+0x56>
 8007454:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8007458:	6503      	str	r3, [r0, #80]	; 0x50
 800745a:	4b12      	ldr	r3, [pc, #72]	; (80074a4 <__sinit+0x58>)
 800745c:	4a12      	ldr	r2, [pc, #72]	; (80074a8 <__sinit+0x5c>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	6282      	str	r2, [r0, #40]	; 0x28
 8007462:	4298      	cmp	r0, r3
 8007464:	bf04      	itt	eq
 8007466:	2301      	moveq	r3, #1
 8007468:	6183      	streq	r3, [r0, #24]
 800746a:	f000 f81f 	bl	80074ac <__sfp>
 800746e:	6060      	str	r0, [r4, #4]
 8007470:	4620      	mov	r0, r4
 8007472:	f000 f81b 	bl	80074ac <__sfp>
 8007476:	60a0      	str	r0, [r4, #8]
 8007478:	4620      	mov	r0, r4
 800747a:	f000 f817 	bl	80074ac <__sfp>
 800747e:	2200      	movs	r2, #0
 8007480:	60e0      	str	r0, [r4, #12]
 8007482:	2104      	movs	r1, #4
 8007484:	6860      	ldr	r0, [r4, #4]
 8007486:	f7ff ffa1 	bl	80073cc <std>
 800748a:	2201      	movs	r2, #1
 800748c:	2109      	movs	r1, #9
 800748e:	68a0      	ldr	r0, [r4, #8]
 8007490:	f7ff ff9c 	bl	80073cc <std>
 8007494:	2202      	movs	r2, #2
 8007496:	2112      	movs	r1, #18
 8007498:	68e0      	ldr	r0, [r4, #12]
 800749a:	f7ff ff97 	bl	80073cc <std>
 800749e:	2301      	movs	r3, #1
 80074a0:	61a3      	str	r3, [r4, #24]
 80074a2:	bd10      	pop	{r4, pc}
 80074a4:	0800780c 	.word	0x0800780c
 80074a8:	08007415 	.word	0x08007415

080074ac <__sfp>:
 80074ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074ae:	4b1b      	ldr	r3, [pc, #108]	; (800751c <__sfp+0x70>)
 80074b0:	4607      	mov	r7, r0
 80074b2:	681e      	ldr	r6, [r3, #0]
 80074b4:	69b3      	ldr	r3, [r6, #24]
 80074b6:	b913      	cbnz	r3, 80074be <__sfp+0x12>
 80074b8:	4630      	mov	r0, r6
 80074ba:	f7ff ffc7 	bl	800744c <__sinit>
 80074be:	3648      	adds	r6, #72	; 0x48
 80074c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80074c4:	3b01      	subs	r3, #1
 80074c6:	d503      	bpl.n	80074d0 <__sfp+0x24>
 80074c8:	6833      	ldr	r3, [r6, #0]
 80074ca:	b133      	cbz	r3, 80074da <__sfp+0x2e>
 80074cc:	6836      	ldr	r6, [r6, #0]
 80074ce:	e7f7      	b.n	80074c0 <__sfp+0x14>
 80074d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80074d4:	b16d      	cbz	r5, 80074f2 <__sfp+0x46>
 80074d6:	3468      	adds	r4, #104	; 0x68
 80074d8:	e7f4      	b.n	80074c4 <__sfp+0x18>
 80074da:	2104      	movs	r1, #4
 80074dc:	4638      	mov	r0, r7
 80074de:	f7ff ff9f 	bl	8007420 <__sfmoreglue>
 80074e2:	6030      	str	r0, [r6, #0]
 80074e4:	2800      	cmp	r0, #0
 80074e6:	d1f1      	bne.n	80074cc <__sfp+0x20>
 80074e8:	230c      	movs	r3, #12
 80074ea:	4604      	mov	r4, r0
 80074ec:	603b      	str	r3, [r7, #0]
 80074ee:	4620      	mov	r0, r4
 80074f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074f2:	4b0b      	ldr	r3, [pc, #44]	; (8007520 <__sfp+0x74>)
 80074f4:	6665      	str	r5, [r4, #100]	; 0x64
 80074f6:	e9c4 5500 	strd	r5, r5, [r4]
 80074fa:	60a5      	str	r5, [r4, #8]
 80074fc:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007500:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8007504:	2208      	movs	r2, #8
 8007506:	4629      	mov	r1, r5
 8007508:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800750c:	f7ff fccc 	bl	8006ea8 <memset>
 8007510:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007514:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007518:	e7e9      	b.n	80074ee <__sfp+0x42>
 800751a:	bf00      	nop
 800751c:	0800780c 	.word	0x0800780c
 8007520:	ffff0001 	.word	0xffff0001

08007524 <_fwalk_reent>:
 8007524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007528:	4680      	mov	r8, r0
 800752a:	4689      	mov	r9, r1
 800752c:	2600      	movs	r6, #0
 800752e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007532:	b914      	cbnz	r4, 800753a <_fwalk_reent+0x16>
 8007534:	4630      	mov	r0, r6
 8007536:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800753a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800753e:	3f01      	subs	r7, #1
 8007540:	d501      	bpl.n	8007546 <_fwalk_reent+0x22>
 8007542:	6824      	ldr	r4, [r4, #0]
 8007544:	e7f5      	b.n	8007532 <_fwalk_reent+0xe>
 8007546:	89ab      	ldrh	r3, [r5, #12]
 8007548:	2b01      	cmp	r3, #1
 800754a:	d907      	bls.n	800755c <_fwalk_reent+0x38>
 800754c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007550:	3301      	adds	r3, #1
 8007552:	d003      	beq.n	800755c <_fwalk_reent+0x38>
 8007554:	4629      	mov	r1, r5
 8007556:	4640      	mov	r0, r8
 8007558:	47c8      	blx	r9
 800755a:	4306      	orrs	r6, r0
 800755c:	3568      	adds	r5, #104	; 0x68
 800755e:	e7ee      	b.n	800753e <_fwalk_reent+0x1a>

08007560 <__swhatbuf_r>:
 8007560:	b570      	push	{r4, r5, r6, lr}
 8007562:	460e      	mov	r6, r1
 8007564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007568:	b096      	sub	sp, #88	; 0x58
 800756a:	2900      	cmp	r1, #0
 800756c:	4614      	mov	r4, r2
 800756e:	461d      	mov	r5, r3
 8007570:	da07      	bge.n	8007582 <__swhatbuf_r+0x22>
 8007572:	2300      	movs	r3, #0
 8007574:	602b      	str	r3, [r5, #0]
 8007576:	89b3      	ldrh	r3, [r6, #12]
 8007578:	061a      	lsls	r2, r3, #24
 800757a:	d410      	bmi.n	800759e <__swhatbuf_r+0x3e>
 800757c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007580:	e00e      	b.n	80075a0 <__swhatbuf_r+0x40>
 8007582:	466a      	mov	r2, sp
 8007584:	f000 f8b8 	bl	80076f8 <_fstat_r>
 8007588:	2800      	cmp	r0, #0
 800758a:	dbf2      	blt.n	8007572 <__swhatbuf_r+0x12>
 800758c:	9a01      	ldr	r2, [sp, #4]
 800758e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007592:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007596:	425a      	negs	r2, r3
 8007598:	415a      	adcs	r2, r3
 800759a:	602a      	str	r2, [r5, #0]
 800759c:	e7ee      	b.n	800757c <__swhatbuf_r+0x1c>
 800759e:	2340      	movs	r3, #64	; 0x40
 80075a0:	2000      	movs	r0, #0
 80075a2:	6023      	str	r3, [r4, #0]
 80075a4:	b016      	add	sp, #88	; 0x58
 80075a6:	bd70      	pop	{r4, r5, r6, pc}

080075a8 <__smakebuf_r>:
 80075a8:	898b      	ldrh	r3, [r1, #12]
 80075aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80075ac:	079d      	lsls	r5, r3, #30
 80075ae:	4606      	mov	r6, r0
 80075b0:	460c      	mov	r4, r1
 80075b2:	d507      	bpl.n	80075c4 <__smakebuf_r+0x1c>
 80075b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80075b8:	6023      	str	r3, [r4, #0]
 80075ba:	6123      	str	r3, [r4, #16]
 80075bc:	2301      	movs	r3, #1
 80075be:	6163      	str	r3, [r4, #20]
 80075c0:	b002      	add	sp, #8
 80075c2:	bd70      	pop	{r4, r5, r6, pc}
 80075c4:	ab01      	add	r3, sp, #4
 80075c6:	466a      	mov	r2, sp
 80075c8:	f7ff ffca 	bl	8007560 <__swhatbuf_r>
 80075cc:	9900      	ldr	r1, [sp, #0]
 80075ce:	4605      	mov	r5, r0
 80075d0:	4630      	mov	r0, r6
 80075d2:	f7ff fcbd 	bl	8006f50 <_malloc_r>
 80075d6:	b948      	cbnz	r0, 80075ec <__smakebuf_r+0x44>
 80075d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075dc:	059a      	lsls	r2, r3, #22
 80075de:	d4ef      	bmi.n	80075c0 <__smakebuf_r+0x18>
 80075e0:	f023 0303 	bic.w	r3, r3, #3
 80075e4:	f043 0302 	orr.w	r3, r3, #2
 80075e8:	81a3      	strh	r3, [r4, #12]
 80075ea:	e7e3      	b.n	80075b4 <__smakebuf_r+0xc>
 80075ec:	4b0d      	ldr	r3, [pc, #52]	; (8007624 <__smakebuf_r+0x7c>)
 80075ee:	62b3      	str	r3, [r6, #40]	; 0x28
 80075f0:	89a3      	ldrh	r3, [r4, #12]
 80075f2:	6020      	str	r0, [r4, #0]
 80075f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075f8:	81a3      	strh	r3, [r4, #12]
 80075fa:	9b00      	ldr	r3, [sp, #0]
 80075fc:	6120      	str	r0, [r4, #16]
 80075fe:	6163      	str	r3, [r4, #20]
 8007600:	9b01      	ldr	r3, [sp, #4]
 8007602:	b15b      	cbz	r3, 800761c <__smakebuf_r+0x74>
 8007604:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007608:	4630      	mov	r0, r6
 800760a:	f000 f887 	bl	800771c <_isatty_r>
 800760e:	b128      	cbz	r0, 800761c <__smakebuf_r+0x74>
 8007610:	89a3      	ldrh	r3, [r4, #12]
 8007612:	f023 0303 	bic.w	r3, r3, #3
 8007616:	f043 0301 	orr.w	r3, r3, #1
 800761a:	81a3      	strh	r3, [r4, #12]
 800761c:	89a3      	ldrh	r3, [r4, #12]
 800761e:	431d      	orrs	r5, r3
 8007620:	81a5      	strh	r5, [r4, #12]
 8007622:	e7cd      	b.n	80075c0 <__smakebuf_r+0x18>
 8007624:	08007415 	.word	0x08007415

08007628 <__malloc_lock>:
 8007628:	4770      	bx	lr

0800762a <__malloc_unlock>:
 800762a:	4770      	bx	lr

0800762c <__sread>:
 800762c:	b510      	push	{r4, lr}
 800762e:	460c      	mov	r4, r1
 8007630:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007634:	f000 f894 	bl	8007760 <_read_r>
 8007638:	2800      	cmp	r0, #0
 800763a:	bfab      	itete	ge
 800763c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800763e:	89a3      	ldrhlt	r3, [r4, #12]
 8007640:	181b      	addge	r3, r3, r0
 8007642:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007646:	bfac      	ite	ge
 8007648:	6563      	strge	r3, [r4, #84]	; 0x54
 800764a:	81a3      	strhlt	r3, [r4, #12]
 800764c:	bd10      	pop	{r4, pc}

0800764e <__swrite>:
 800764e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007652:	461f      	mov	r7, r3
 8007654:	898b      	ldrh	r3, [r1, #12]
 8007656:	4605      	mov	r5, r0
 8007658:	05db      	lsls	r3, r3, #23
 800765a:	460c      	mov	r4, r1
 800765c:	4616      	mov	r6, r2
 800765e:	d505      	bpl.n	800766c <__swrite+0x1e>
 8007660:	2302      	movs	r3, #2
 8007662:	2200      	movs	r2, #0
 8007664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007668:	f000 f868 	bl	800773c <_lseek_r>
 800766c:	89a3      	ldrh	r3, [r4, #12]
 800766e:	4632      	mov	r2, r6
 8007670:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007674:	81a3      	strh	r3, [r4, #12]
 8007676:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800767a:	463b      	mov	r3, r7
 800767c:	4628      	mov	r0, r5
 800767e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007682:	f000 b817 	b.w	80076b4 <_write_r>

08007686 <__sseek>:
 8007686:	b510      	push	{r4, lr}
 8007688:	460c      	mov	r4, r1
 800768a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800768e:	f000 f855 	bl	800773c <_lseek_r>
 8007692:	1c43      	adds	r3, r0, #1
 8007694:	89a3      	ldrh	r3, [r4, #12]
 8007696:	bf15      	itete	ne
 8007698:	6560      	strne	r0, [r4, #84]	; 0x54
 800769a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800769e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80076a2:	81a3      	strheq	r3, [r4, #12]
 80076a4:	bf18      	it	ne
 80076a6:	81a3      	strhne	r3, [r4, #12]
 80076a8:	bd10      	pop	{r4, pc}

080076aa <__sclose>:
 80076aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076ae:	f000 b813 	b.w	80076d8 <_close_r>
	...

080076b4 <_write_r>:
 80076b4:	b538      	push	{r3, r4, r5, lr}
 80076b6:	4605      	mov	r5, r0
 80076b8:	4608      	mov	r0, r1
 80076ba:	4611      	mov	r1, r2
 80076bc:	2200      	movs	r2, #0
 80076be:	4c05      	ldr	r4, [pc, #20]	; (80076d4 <_write_r+0x20>)
 80076c0:	6022      	str	r2, [r4, #0]
 80076c2:	461a      	mov	r2, r3
 80076c4:	f7f9 f9e3 	bl	8000a8e <_write>
 80076c8:	1c43      	adds	r3, r0, #1
 80076ca:	d102      	bne.n	80076d2 <_write_r+0x1e>
 80076cc:	6823      	ldr	r3, [r4, #0]
 80076ce:	b103      	cbz	r3, 80076d2 <_write_r+0x1e>
 80076d0:	602b      	str	r3, [r5, #0]
 80076d2:	bd38      	pop	{r3, r4, r5, pc}
 80076d4:	20001f20 	.word	0x20001f20

080076d8 <_close_r>:
 80076d8:	b538      	push	{r3, r4, r5, lr}
 80076da:	2300      	movs	r3, #0
 80076dc:	4c05      	ldr	r4, [pc, #20]	; (80076f4 <_close_r+0x1c>)
 80076de:	4605      	mov	r5, r0
 80076e0:	4608      	mov	r0, r1
 80076e2:	6023      	str	r3, [r4, #0]
 80076e4:	f7f9 f9ef 	bl	8000ac6 <_close>
 80076e8:	1c43      	adds	r3, r0, #1
 80076ea:	d102      	bne.n	80076f2 <_close_r+0x1a>
 80076ec:	6823      	ldr	r3, [r4, #0]
 80076ee:	b103      	cbz	r3, 80076f2 <_close_r+0x1a>
 80076f0:	602b      	str	r3, [r5, #0]
 80076f2:	bd38      	pop	{r3, r4, r5, pc}
 80076f4:	20001f20 	.word	0x20001f20

080076f8 <_fstat_r>:
 80076f8:	b538      	push	{r3, r4, r5, lr}
 80076fa:	2300      	movs	r3, #0
 80076fc:	4c06      	ldr	r4, [pc, #24]	; (8007718 <_fstat_r+0x20>)
 80076fe:	4605      	mov	r5, r0
 8007700:	4608      	mov	r0, r1
 8007702:	4611      	mov	r1, r2
 8007704:	6023      	str	r3, [r4, #0]
 8007706:	f7f9 f9e9 	bl	8000adc <_fstat>
 800770a:	1c43      	adds	r3, r0, #1
 800770c:	d102      	bne.n	8007714 <_fstat_r+0x1c>
 800770e:	6823      	ldr	r3, [r4, #0]
 8007710:	b103      	cbz	r3, 8007714 <_fstat_r+0x1c>
 8007712:	602b      	str	r3, [r5, #0]
 8007714:	bd38      	pop	{r3, r4, r5, pc}
 8007716:	bf00      	nop
 8007718:	20001f20 	.word	0x20001f20

0800771c <_isatty_r>:
 800771c:	b538      	push	{r3, r4, r5, lr}
 800771e:	2300      	movs	r3, #0
 8007720:	4c05      	ldr	r4, [pc, #20]	; (8007738 <_isatty_r+0x1c>)
 8007722:	4605      	mov	r5, r0
 8007724:	4608      	mov	r0, r1
 8007726:	6023      	str	r3, [r4, #0]
 8007728:	f7f9 f9e7 	bl	8000afa <_isatty>
 800772c:	1c43      	adds	r3, r0, #1
 800772e:	d102      	bne.n	8007736 <_isatty_r+0x1a>
 8007730:	6823      	ldr	r3, [r4, #0]
 8007732:	b103      	cbz	r3, 8007736 <_isatty_r+0x1a>
 8007734:	602b      	str	r3, [r5, #0]
 8007736:	bd38      	pop	{r3, r4, r5, pc}
 8007738:	20001f20 	.word	0x20001f20

0800773c <_lseek_r>:
 800773c:	b538      	push	{r3, r4, r5, lr}
 800773e:	4605      	mov	r5, r0
 8007740:	4608      	mov	r0, r1
 8007742:	4611      	mov	r1, r2
 8007744:	2200      	movs	r2, #0
 8007746:	4c05      	ldr	r4, [pc, #20]	; (800775c <_lseek_r+0x20>)
 8007748:	6022      	str	r2, [r4, #0]
 800774a:	461a      	mov	r2, r3
 800774c:	f7f9 f9df 	bl	8000b0e <_lseek>
 8007750:	1c43      	adds	r3, r0, #1
 8007752:	d102      	bne.n	800775a <_lseek_r+0x1e>
 8007754:	6823      	ldr	r3, [r4, #0]
 8007756:	b103      	cbz	r3, 800775a <_lseek_r+0x1e>
 8007758:	602b      	str	r3, [r5, #0]
 800775a:	bd38      	pop	{r3, r4, r5, pc}
 800775c:	20001f20 	.word	0x20001f20

08007760 <_read_r>:
 8007760:	b538      	push	{r3, r4, r5, lr}
 8007762:	4605      	mov	r5, r0
 8007764:	4608      	mov	r0, r1
 8007766:	4611      	mov	r1, r2
 8007768:	2200      	movs	r2, #0
 800776a:	4c05      	ldr	r4, [pc, #20]	; (8007780 <_read_r+0x20>)
 800776c:	6022      	str	r2, [r4, #0]
 800776e:	461a      	mov	r2, r3
 8007770:	f7f9 f970 	bl	8000a54 <_read>
 8007774:	1c43      	adds	r3, r0, #1
 8007776:	d102      	bne.n	800777e <_read_r+0x1e>
 8007778:	6823      	ldr	r3, [r4, #0]
 800777a:	b103      	cbz	r3, 800777e <_read_r+0x1e>
 800777c:	602b      	str	r3, [r5, #0]
 800777e:	bd38      	pop	{r3, r4, r5, pc}
 8007780:	20001f20 	.word	0x20001f20

08007784 <_init>:
 8007784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007786:	bf00      	nop
 8007788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800778a:	bc08      	pop	{r3}
 800778c:	469e      	mov	lr, r3
 800778e:	4770      	bx	lr

08007790 <_fini>:
 8007790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007792:	bf00      	nop
 8007794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007796:	bc08      	pop	{r3}
 8007798:	469e      	mov	lr, r3
 800779a:	4770      	bx	lr
