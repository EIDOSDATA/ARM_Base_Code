
RTOS_Thread_767ZI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068b4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08006ab4  08006ab4  00016ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b3c  08006b3c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006b3c  08006b3c  00016b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b44  08006b44  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b44  08006b44  00016b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b48  08006b48  00016b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006b4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004e38  20000010  08006b5c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004e48  08006b5c  00024e48  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c952  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003585  00000000  00000000  0003c990  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001700  00000000  00000000  0003ff18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001578  00000000  00000000  00041618  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003824  00000000  00000000  00042b90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001218a  00000000  00000000  000463b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001051af  00000000  00000000  0005853e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015d6ed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006160  00000000  00000000  0015d768  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000010 	.word	0x20000010
 800021c:	00000000 	.word	0x00000000
 8000220:	08006a9c 	.word	0x08006a9c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000014 	.word	0x20000014
 800023c:	08006a9c 	.word	0x08006a9c

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b972 	b.w	800053c <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9e08      	ldr	r6, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	4688      	mov	r8, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d14b      	bne.n	8000316 <__udivmoddi4+0xa6>
 800027e:	428a      	cmp	r2, r1
 8000280:	4615      	mov	r5, r2
 8000282:	d967      	bls.n	8000354 <__udivmoddi4+0xe4>
 8000284:	fab2 f282 	clz	r2, r2
 8000288:	b14a      	cbz	r2, 800029e <__udivmoddi4+0x2e>
 800028a:	f1c2 0720 	rsb	r7, r2, #32
 800028e:	fa01 f302 	lsl.w	r3, r1, r2
 8000292:	fa20 f707 	lsr.w	r7, r0, r7
 8000296:	4095      	lsls	r5, r2
 8000298:	ea47 0803 	orr.w	r8, r7, r3
 800029c:	4094      	lsls	r4, r2
 800029e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002a2:	0c23      	lsrs	r3, r4, #16
 80002a4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a8:	fa1f fc85 	uxth.w	ip, r5
 80002ac:	fb0e 8817 	mls	r8, lr, r7, r8
 80002b0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002b4:	fb07 f10c 	mul.w	r1, r7, ip
 80002b8:	4299      	cmp	r1, r3
 80002ba:	d909      	bls.n	80002d0 <__udivmoddi4+0x60>
 80002bc:	18eb      	adds	r3, r5, r3
 80002be:	f107 30ff 	add.w	r0, r7, #4294967295
 80002c2:	f080 811b 	bcs.w	80004fc <__udivmoddi4+0x28c>
 80002c6:	4299      	cmp	r1, r3
 80002c8:	f240 8118 	bls.w	80004fc <__udivmoddi4+0x28c>
 80002cc:	3f02      	subs	r7, #2
 80002ce:	442b      	add	r3, r5
 80002d0:	1a5b      	subs	r3, r3, r1
 80002d2:	b2a4      	uxth	r4, r4
 80002d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002dc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002e4:	45a4      	cmp	ip, r4
 80002e6:	d909      	bls.n	80002fc <__udivmoddi4+0x8c>
 80002e8:	192c      	adds	r4, r5, r4
 80002ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ee:	f080 8107 	bcs.w	8000500 <__udivmoddi4+0x290>
 80002f2:	45a4      	cmp	ip, r4
 80002f4:	f240 8104 	bls.w	8000500 <__udivmoddi4+0x290>
 80002f8:	3802      	subs	r0, #2
 80002fa:	442c      	add	r4, r5
 80002fc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000300:	eba4 040c 	sub.w	r4, r4, ip
 8000304:	2700      	movs	r7, #0
 8000306:	b11e      	cbz	r6, 8000310 <__udivmoddi4+0xa0>
 8000308:	40d4      	lsrs	r4, r2
 800030a:	2300      	movs	r3, #0
 800030c:	e9c6 4300 	strd	r4, r3, [r6]
 8000310:	4639      	mov	r1, r7
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0xbe>
 800031a:	2e00      	cmp	r6, #0
 800031c:	f000 80eb 	beq.w	80004f6 <__udivmoddi4+0x286>
 8000320:	2700      	movs	r7, #0
 8000322:	e9c6 0100 	strd	r0, r1, [r6]
 8000326:	4638      	mov	r0, r7
 8000328:	4639      	mov	r1, r7
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f783 	clz	r7, r3
 8000332:	2f00      	cmp	r7, #0
 8000334:	d147      	bne.n	80003c6 <__udivmoddi4+0x156>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0xd0>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80fa 	bhi.w	8000534 <__udivmoddi4+0x2c4>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0303 	sbc.w	r3, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	4698      	mov	r8, r3
 800034a:	2e00      	cmp	r6, #0
 800034c:	d0e0      	beq.n	8000310 <__udivmoddi4+0xa0>
 800034e:	e9c6 4800 	strd	r4, r8, [r6]
 8000352:	e7dd      	b.n	8000310 <__udivmoddi4+0xa0>
 8000354:	b902      	cbnz	r2, 8000358 <__udivmoddi4+0xe8>
 8000356:	deff      	udf	#255	; 0xff
 8000358:	fab2 f282 	clz	r2, r2
 800035c:	2a00      	cmp	r2, #0
 800035e:	f040 808f 	bne.w	8000480 <__udivmoddi4+0x210>
 8000362:	1b49      	subs	r1, r1, r5
 8000364:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000368:	fa1f f885 	uxth.w	r8, r5
 800036c:	2701      	movs	r7, #1
 800036e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fb0e 111c 	mls	r1, lr, ip, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb08 f10c 	mul.w	r1, r8, ip
 8000380:	4299      	cmp	r1, r3
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x124>
 8000384:	18eb      	adds	r3, r5, r3
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x122>
 800038c:	4299      	cmp	r1, r3
 800038e:	f200 80cd 	bhi.w	800052c <__udivmoddi4+0x2bc>
 8000392:	4684      	mov	ip, r0
 8000394:	1a59      	subs	r1, r3, r1
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1410 	mls	r4, lr, r0, r1
 80003a0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x14c>
 80003ac:	192c      	adds	r4, r5, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x14a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80b6 	bhi.w	8000526 <__udivmoddi4+0x2b6>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e79f      	b.n	8000306 <__udivmoddi4+0x96>
 80003c6:	f1c7 0c20 	rsb	ip, r7, #32
 80003ca:	40bb      	lsls	r3, r7
 80003cc:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003d0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003d4:	fa01 f407 	lsl.w	r4, r1, r7
 80003d8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003dc:	fa21 f30c 	lsr.w	r3, r1, ip
 80003e0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003e4:	4325      	orrs	r5, r4
 80003e6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ea:	0c2c      	lsrs	r4, r5, #16
 80003ec:	fb08 3319 	mls	r3, r8, r9, r3
 80003f0:	fa1f fa8e 	uxth.w	sl, lr
 80003f4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f8:	fb09 f40a 	mul.w	r4, r9, sl
 80003fc:	429c      	cmp	r4, r3
 80003fe:	fa02 f207 	lsl.w	r2, r2, r7
 8000402:	fa00 f107 	lsl.w	r1, r0, r7
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b0>
 8000408:	eb1e 0303 	adds.w	r3, lr, r3
 800040c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000410:	f080 8087 	bcs.w	8000522 <__udivmoddi4+0x2b2>
 8000414:	429c      	cmp	r4, r3
 8000416:	f240 8084 	bls.w	8000522 <__udivmoddi4+0x2b2>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4473      	add	r3, lr
 8000420:	1b1b      	subs	r3, r3, r4
 8000422:	b2ad      	uxth	r5, r5
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000430:	fb00 fa0a 	mul.w	sl, r0, sl
 8000434:	45a2      	cmp	sl, r4
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1da>
 8000438:	eb1e 0404 	adds.w	r4, lr, r4
 800043c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000440:	d26b      	bcs.n	800051a <__udivmoddi4+0x2aa>
 8000442:	45a2      	cmp	sl, r4
 8000444:	d969      	bls.n	800051a <__udivmoddi4+0x2aa>
 8000446:	3802      	subs	r0, #2
 8000448:	4474      	add	r4, lr
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	fba0 8902 	umull	r8, r9, r0, r2
 8000452:	eba4 040a 	sub.w	r4, r4, sl
 8000456:	454c      	cmp	r4, r9
 8000458:	46c2      	mov	sl, r8
 800045a:	464b      	mov	r3, r9
 800045c:	d354      	bcc.n	8000508 <__udivmoddi4+0x298>
 800045e:	d051      	beq.n	8000504 <__udivmoddi4+0x294>
 8000460:	2e00      	cmp	r6, #0
 8000462:	d069      	beq.n	8000538 <__udivmoddi4+0x2c8>
 8000464:	ebb1 050a 	subs.w	r5, r1, sl
 8000468:	eb64 0403 	sbc.w	r4, r4, r3
 800046c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000470:	40fd      	lsrs	r5, r7
 8000472:	40fc      	lsrs	r4, r7
 8000474:	ea4c 0505 	orr.w	r5, ip, r5
 8000478:	e9c6 5400 	strd	r5, r4, [r6]
 800047c:	2700      	movs	r7, #0
 800047e:	e747      	b.n	8000310 <__udivmoddi4+0xa0>
 8000480:	f1c2 0320 	rsb	r3, r2, #32
 8000484:	fa20 f703 	lsr.w	r7, r0, r3
 8000488:	4095      	lsls	r5, r2
 800048a:	fa01 f002 	lsl.w	r0, r1, r2
 800048e:	fa21 f303 	lsr.w	r3, r1, r3
 8000492:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000496:	4338      	orrs	r0, r7
 8000498:	0c01      	lsrs	r1, r0, #16
 800049a:	fbb3 f7fe 	udiv	r7, r3, lr
 800049e:	fa1f f885 	uxth.w	r8, r5
 80004a2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb07 f308 	mul.w	r3, r7, r8
 80004ae:	428b      	cmp	r3, r1
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x256>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004bc:	d22f      	bcs.n	800051e <__udivmoddi4+0x2ae>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d92d      	bls.n	800051e <__udivmoddi4+0x2ae>
 80004c2:	3f02      	subs	r7, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1acb      	subs	r3, r1, r3
 80004c8:	b281      	uxth	r1, r0
 80004ca:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ce:	fb0e 3310 	mls	r3, lr, r0, r3
 80004d2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d6:	fb00 f308 	mul.w	r3, r0, r8
 80004da:	428b      	cmp	r3, r1
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x27e>
 80004de:	1869      	adds	r1, r5, r1
 80004e0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004e4:	d217      	bcs.n	8000516 <__udivmoddi4+0x2a6>
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d915      	bls.n	8000516 <__udivmoddi4+0x2a6>
 80004ea:	3802      	subs	r0, #2
 80004ec:	4429      	add	r1, r5
 80004ee:	1ac9      	subs	r1, r1, r3
 80004f0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004f4:	e73b      	b.n	800036e <__udivmoddi4+0xfe>
 80004f6:	4637      	mov	r7, r6
 80004f8:	4630      	mov	r0, r6
 80004fa:	e709      	b.n	8000310 <__udivmoddi4+0xa0>
 80004fc:	4607      	mov	r7, r0
 80004fe:	e6e7      	b.n	80002d0 <__udivmoddi4+0x60>
 8000500:	4618      	mov	r0, r3
 8000502:	e6fb      	b.n	80002fc <__udivmoddi4+0x8c>
 8000504:	4541      	cmp	r1, r8
 8000506:	d2ab      	bcs.n	8000460 <__udivmoddi4+0x1f0>
 8000508:	ebb8 0a02 	subs.w	sl, r8, r2
 800050c:	eb69 020e 	sbc.w	r2, r9, lr
 8000510:	3801      	subs	r0, #1
 8000512:	4613      	mov	r3, r2
 8000514:	e7a4      	b.n	8000460 <__udivmoddi4+0x1f0>
 8000516:	4660      	mov	r0, ip
 8000518:	e7e9      	b.n	80004ee <__udivmoddi4+0x27e>
 800051a:	4618      	mov	r0, r3
 800051c:	e795      	b.n	800044a <__udivmoddi4+0x1da>
 800051e:	4667      	mov	r7, ip
 8000520:	e7d1      	b.n	80004c6 <__udivmoddi4+0x256>
 8000522:	4681      	mov	r9, r0
 8000524:	e77c      	b.n	8000420 <__udivmoddi4+0x1b0>
 8000526:	3802      	subs	r0, #2
 8000528:	442c      	add	r4, r5
 800052a:	e747      	b.n	80003bc <__udivmoddi4+0x14c>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	442b      	add	r3, r5
 8000532:	e72f      	b.n	8000394 <__udivmoddi4+0x124>
 8000534:	4638      	mov	r0, r7
 8000536:	e708      	b.n	800034a <__udivmoddi4+0xda>
 8000538:	4637      	mov	r7, r6
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0xa0>

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000544:	f000 fc23 	bl	8000d8e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000548:	f000 f828 	bl	800059c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054c:	f000 f918 	bl	8000780 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000550:	f000 f8b8 	bl	80006c4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000554:	f000 f8e6 	bl	8000724 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000558:	f003 fb36 	bl	8003bc8 <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of THREAD1 */
  THREAD1Handle = osThreadNew(LED_Thread1, NULL, &THREAD1_attributes);
 800055c:	4a09      	ldr	r2, [pc, #36]	; (8000584 <main+0x44>)
 800055e:	2100      	movs	r1, #0
 8000560:	4809      	ldr	r0, [pc, #36]	; (8000588 <main+0x48>)
 8000562:	f003 fbc3 	bl	8003cec <osThreadNew>
 8000566:	4602      	mov	r2, r0
 8000568:	4b08      	ldr	r3, [pc, #32]	; (800058c <main+0x4c>)
 800056a:	601a      	str	r2, [r3, #0]

  /* creation of THREAD2 */
  THREAD2Handle = osThreadNew(LED_Thread2, NULL, &THREAD2_attributes);
 800056c:	4a08      	ldr	r2, [pc, #32]	; (8000590 <main+0x50>)
 800056e:	2100      	movs	r1, #0
 8000570:	4808      	ldr	r0, [pc, #32]	; (8000594 <main+0x54>)
 8000572:	f003 fbbb 	bl	8003cec <osThreadNew>
 8000576:	4602      	mov	r2, r0
 8000578:	4b07      	ldr	r3, [pc, #28]	; (8000598 <main+0x58>)
 800057a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800057c:	f003 fb58 	bl	8003c30 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000580:	e7fe      	b.n	8000580 <main+0x40>
 8000582:	bf00      	nop
 8000584:	08006adc 	.word	0x08006adc
 8000588:	0800094d 	.word	0x0800094d
 800058c:	20004dbc 	.word	0x20004dbc
 8000590:	08006b00 	.word	0x08006b00
 8000594:	080009f1 	.word	0x080009f1
 8000598:	20004dc0 	.word	0x20004dc0

0800059c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b0b8      	sub	sp, #224	; 0xe0
 80005a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80005a6:	2234      	movs	r2, #52	; 0x34
 80005a8:	2100      	movs	r1, #0
 80005aa:	4618      	mov	r0, r3
 80005ac:	f006 fa6d 	bl	8006a8a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]
 80005bc:	60da      	str	r2, [r3, #12]
 80005be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005c0:	f107 0308 	add.w	r3, r7, #8
 80005c4:	2290      	movs	r2, #144	; 0x90
 80005c6:	2100      	movs	r1, #0
 80005c8:	4618      	mov	r0, r3
 80005ca:	f006 fa5e 	bl	8006a8a <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ce:	4b3a      	ldr	r3, [pc, #232]	; (80006b8 <SystemClock_Config+0x11c>)
 80005d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d2:	4a39      	ldr	r2, [pc, #228]	; (80006b8 <SystemClock_Config+0x11c>)
 80005d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d8:	6413      	str	r3, [r2, #64]	; 0x40
 80005da:	4b37      	ldr	r3, [pc, #220]	; (80006b8 <SystemClock_Config+0x11c>)
 80005dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e6:	4b35      	ldr	r3, [pc, #212]	; (80006bc <SystemClock_Config+0x120>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	4a34      	ldr	r2, [pc, #208]	; (80006bc <SystemClock_Config+0x120>)
 80005ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005f0:	6013      	str	r3, [r2, #0]
 80005f2:	4b32      	ldr	r3, [pc, #200]	; (80006bc <SystemClock_Config+0x120>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005fa:	603b      	str	r3, [r7, #0]
 80005fc:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005fe:	2301      	movs	r3, #1
 8000600:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000604:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000608:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060c:	2302      	movs	r3, #2
 800060e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000612:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000616:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 800061a:	2304      	movs	r3, #4
 800061c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000620:	23d8      	movs	r3, #216	; 0xd8
 8000622:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000626:	2302      	movs	r3, #2
 8000628:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800062c:	2309      	movs	r3, #9
 800062e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000632:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000636:	4618      	mov	r0, r3
 8000638:	f001 f850 	bl	80016dc <HAL_RCC_OscConfig>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000642:	f000 fa21 	bl	8000a88 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000646:	f000 fff9 	bl	800163c <HAL_PWREx_EnableOverDrive>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000650:	f000 fa1a 	bl	8000a88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000654:	230f      	movs	r3, #15
 8000656:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065a:	2302      	movs	r3, #2
 800065c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000666:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800066a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800066e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000672:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000676:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800067a:	2107      	movs	r1, #7
 800067c:	4618      	mov	r0, r3
 800067e:	f001 fadb 	bl	8001c38 <HAL_RCC_ClockConfig>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8000688:	f000 f9fe 	bl	8000a88 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 800068c:	4b0c      	ldr	r3, [pc, #48]	; (80006c0 <SystemClock_Config+0x124>)
 800068e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000690:	2300      	movs	r3, #0
 8000692:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000694:	2300      	movs	r3, #0
 8000696:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800069a:	f107 0308 	add.w	r3, r7, #8
 800069e:	4618      	mov	r0, r3
 80006a0:	f001 fcf4 	bl	800208c <HAL_RCCEx_PeriphCLKConfig>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0x112>
  {
    Error_Handler();
 80006aa:	f000 f9ed 	bl	8000a88 <Error_Handler>
  }
}
 80006ae:	bf00      	nop
 80006b0:	37e0      	adds	r7, #224	; 0xe0
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40023800 	.word	0x40023800
 80006bc:	40007000 	.word	0x40007000
 80006c0:	00200100 	.word	0x00200100

080006c4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006c8:	4b14      	ldr	r3, [pc, #80]	; (800071c <MX_USART3_UART_Init+0x58>)
 80006ca:	4a15      	ldr	r2, [pc, #84]	; (8000720 <MX_USART3_UART_Init+0x5c>)
 80006cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006ce:	4b13      	ldr	r3, [pc, #76]	; (800071c <MX_USART3_UART_Init+0x58>)
 80006d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006d6:	4b11      	ldr	r3, [pc, #68]	; (800071c <MX_USART3_UART_Init+0x58>)
 80006d8:	2200      	movs	r2, #0
 80006da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006dc:	4b0f      	ldr	r3, [pc, #60]	; (800071c <MX_USART3_UART_Init+0x58>)
 80006de:	2200      	movs	r2, #0
 80006e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006e2:	4b0e      	ldr	r3, [pc, #56]	; (800071c <MX_USART3_UART_Init+0x58>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006e8:	4b0c      	ldr	r3, [pc, #48]	; (800071c <MX_USART3_UART_Init+0x58>)
 80006ea:	220c      	movs	r2, #12
 80006ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ee:	4b0b      	ldr	r3, [pc, #44]	; (800071c <MX_USART3_UART_Init+0x58>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f4:	4b09      	ldr	r3, [pc, #36]	; (800071c <MX_USART3_UART_Init+0x58>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006fa:	4b08      	ldr	r3, [pc, #32]	; (800071c <MX_USART3_UART_Init+0x58>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000700:	4b06      	ldr	r3, [pc, #24]	; (800071c <MX_USART3_UART_Init+0x58>)
 8000702:	2200      	movs	r2, #0
 8000704:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000706:	4805      	ldr	r0, [pc, #20]	; (800071c <MX_USART3_UART_Init+0x58>)
 8000708:	f002 fb4c 	bl	8002da4 <HAL_UART_Init>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000712:	f000 f9b9 	bl	8000a88 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	20004938 	.word	0x20004938
 8000720:	40004800 	.word	0x40004800

08000724 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000728:	4b14      	ldr	r3, [pc, #80]	; (800077c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800072a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800072e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000730:	4b12      	ldr	r3, [pc, #72]	; (800077c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000732:	2206      	movs	r2, #6
 8000734:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000736:	4b11      	ldr	r3, [pc, #68]	; (800077c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000738:	2202      	movs	r2, #2
 800073a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800073c:	4b0f      	ldr	r3, [pc, #60]	; (800077c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800073e:	2200      	movs	r2, #0
 8000740:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000742:	4b0e      	ldr	r3, [pc, #56]	; (800077c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000744:	2202      	movs	r2, #2
 8000746:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000748:	4b0c      	ldr	r3, [pc, #48]	; (800077c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800074a:	2201      	movs	r2, #1
 800074c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800074e:	4b0b      	ldr	r3, [pc, #44]	; (800077c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000750:	2200      	movs	r2, #0
 8000752:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000754:	4b09      	ldr	r3, [pc, #36]	; (800077c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000756:	2200      	movs	r2, #0
 8000758:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800075a:	4b08      	ldr	r3, [pc, #32]	; (800077c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800075c:	2201      	movs	r2, #1
 800075e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000760:	4b06      	ldr	r3, [pc, #24]	; (800077c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000762:	2200      	movs	r2, #0
 8000764:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000766:	4805      	ldr	r0, [pc, #20]	; (800077c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000768:	f000 fe1f 	bl	80013aa <HAL_PCD_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000772:	f000 f989 	bl	8000a88 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	200049b8 	.word	0x200049b8

08000780 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b08c      	sub	sp, #48	; 0x30
 8000784:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000786:	f107 031c 	add.w	r3, r7, #28
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]
 8000792:	60da      	str	r2, [r3, #12]
 8000794:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000796:	4b67      	ldr	r3, [pc, #412]	; (8000934 <MX_GPIO_Init+0x1b4>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a66      	ldr	r2, [pc, #408]	; (8000934 <MX_GPIO_Init+0x1b4>)
 800079c:	f043 0304 	orr.w	r3, r3, #4
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b64      	ldr	r3, [pc, #400]	; (8000934 <MX_GPIO_Init+0x1b4>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0304 	and.w	r3, r3, #4
 80007aa:	61bb      	str	r3, [r7, #24]
 80007ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ae:	4b61      	ldr	r3, [pc, #388]	; (8000934 <MX_GPIO_Init+0x1b4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a60      	ldr	r2, [pc, #384]	; (8000934 <MX_GPIO_Init+0x1b4>)
 80007b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b5e      	ldr	r3, [pc, #376]	; (8000934 <MX_GPIO_Init+0x1b4>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007c2:	617b      	str	r3, [r7, #20]
 80007c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c6:	4b5b      	ldr	r3, [pc, #364]	; (8000934 <MX_GPIO_Init+0x1b4>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a5a      	ldr	r2, [pc, #360]	; (8000934 <MX_GPIO_Init+0x1b4>)
 80007cc:	f043 0301 	orr.w	r3, r3, #1
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b58      	ldr	r3, [pc, #352]	; (8000934 <MX_GPIO_Init+0x1b4>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	613b      	str	r3, [r7, #16]
 80007dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007de:	4b55      	ldr	r3, [pc, #340]	; (8000934 <MX_GPIO_Init+0x1b4>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a54      	ldr	r2, [pc, #336]	; (8000934 <MX_GPIO_Init+0x1b4>)
 80007e4:	f043 0302 	orr.w	r3, r3, #2
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b52      	ldr	r3, [pc, #328]	; (8000934 <MX_GPIO_Init+0x1b4>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0302 	and.w	r3, r3, #2
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007f6:	4b4f      	ldr	r3, [pc, #316]	; (8000934 <MX_GPIO_Init+0x1b4>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a4e      	ldr	r2, [pc, #312]	; (8000934 <MX_GPIO_Init+0x1b4>)
 80007fc:	f043 0308 	orr.w	r3, r3, #8
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b4c      	ldr	r3, [pc, #304]	; (8000934 <MX_GPIO_Init+0x1b4>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0308 	and.w	r3, r3, #8
 800080a:	60bb      	str	r3, [r7, #8]
 800080c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800080e:	4b49      	ldr	r3, [pc, #292]	; (8000934 <MX_GPIO_Init+0x1b4>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a48      	ldr	r2, [pc, #288]	; (8000934 <MX_GPIO_Init+0x1b4>)
 8000814:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b46      	ldr	r3, [pc, #280]	; (8000934 <MX_GPIO_Init+0x1b4>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	f244 0181 	movw	r1, #16513	; 0x4081
 800082c:	4842      	ldr	r0, [pc, #264]	; (8000938 <MX_GPIO_Init+0x1b8>)
 800082e:	f000 fd89 	bl	8001344 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000832:	2200      	movs	r2, #0
 8000834:	2140      	movs	r1, #64	; 0x40
 8000836:	4841      	ldr	r0, [pc, #260]	; (800093c <MX_GPIO_Init+0x1bc>)
 8000838:	f000 fd84 	bl	8001344 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800083c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000840:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000842:	4b3f      	ldr	r3, [pc, #252]	; (8000940 <MX_GPIO_Init+0x1c0>)
 8000844:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800084a:	f107 031c 	add.w	r3, r7, #28
 800084e:	4619      	mov	r1, r3
 8000850:	483c      	ldr	r0, [pc, #240]	; (8000944 <MX_GPIO_Init+0x1c4>)
 8000852:	f000 fbcd 	bl	8000ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000856:	2332      	movs	r3, #50	; 0x32
 8000858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085a:	2302      	movs	r3, #2
 800085c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000862:	2303      	movs	r3, #3
 8000864:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000866:	230b      	movs	r3, #11
 8000868:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800086a:	f107 031c 	add.w	r3, r7, #28
 800086e:	4619      	mov	r1, r3
 8000870:	4834      	ldr	r0, [pc, #208]	; (8000944 <MX_GPIO_Init+0x1c4>)
 8000872:	f000 fbbd 	bl	8000ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000876:	2386      	movs	r3, #134	; 0x86
 8000878:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087a:	2302      	movs	r3, #2
 800087c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000882:	2303      	movs	r3, #3
 8000884:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000886:	230b      	movs	r3, #11
 8000888:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088a:	f107 031c 	add.w	r3, r7, #28
 800088e:	4619      	mov	r1, r3
 8000890:	482d      	ldr	r0, [pc, #180]	; (8000948 <MX_GPIO_Init+0x1c8>)
 8000892:	f000 fbad 	bl	8000ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000896:	f244 0381 	movw	r3, #16513	; 0x4081
 800089a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089c:	2301      	movs	r3, #1
 800089e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a4:	2300      	movs	r3, #0
 80008a6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a8:	f107 031c 	add.w	r3, r7, #28
 80008ac:	4619      	mov	r1, r3
 80008ae:	4822      	ldr	r0, [pc, #136]	; (8000938 <MX_GPIO_Init+0x1b8>)
 80008b0:	f000 fb9e 	bl	8000ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80008b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ba:	2302      	movs	r3, #2
 80008bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c2:	2303      	movs	r3, #3
 80008c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008c6:	230b      	movs	r3, #11
 80008c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80008ca:	f107 031c 	add.w	r3, r7, #28
 80008ce:	4619      	mov	r1, r3
 80008d0:	4819      	ldr	r0, [pc, #100]	; (8000938 <MX_GPIO_Init+0x1b8>)
 80008d2:	f000 fb8d 	bl	8000ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008d6:	2340      	movs	r3, #64	; 0x40
 80008d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008da:	2301      	movs	r3, #1
 80008dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e2:	2300      	movs	r3, #0
 80008e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008e6:	f107 031c 	add.w	r3, r7, #28
 80008ea:	4619      	mov	r1, r3
 80008ec:	4813      	ldr	r0, [pc, #76]	; (800093c <MX_GPIO_Init+0x1bc>)
 80008ee:	f000 fb7f 	bl	8000ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008f2:	2380      	movs	r3, #128	; 0x80
 80008f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f6:	2300      	movs	r3, #0
 80008f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008fe:	f107 031c 	add.w	r3, r7, #28
 8000902:	4619      	mov	r1, r3
 8000904:	480d      	ldr	r0, [pc, #52]	; (800093c <MX_GPIO_Init+0x1bc>)
 8000906:	f000 fb73 	bl	8000ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800090a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800090e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000910:	2302      	movs	r3, #2
 8000912:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000918:	2303      	movs	r3, #3
 800091a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800091c:	230b      	movs	r3, #11
 800091e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000920:	f107 031c 	add.w	r3, r7, #28
 8000924:	4619      	mov	r1, r3
 8000926:	4805      	ldr	r0, [pc, #20]	; (800093c <MX_GPIO_Init+0x1bc>)
 8000928:	f000 fb62 	bl	8000ff0 <HAL_GPIO_Init>

}
 800092c:	bf00      	nop
 800092e:	3730      	adds	r7, #48	; 0x30
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	40023800 	.word	0x40023800
 8000938:	40020400 	.word	0x40020400
 800093c:	40021800 	.word	0x40021800
 8000940:	10110000 	.word	0x10110000
 8000944:	40020800 	.word	0x40020800
 8000948:	40020000 	.word	0x40020000

0800094c <LED_Thread1>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_LED_Thread1 */
void LED_Thread1(void *argument)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint32_t count = 0;
 8000954:	2300      	movs	r3, #0
 8000956:	60fb      	str	r3, [r7, #12]
	(void) argument;
	/* Infinite loop */
	for (;;)
	{
		count = osKernelGetTickCount() + 5000;
 8000958:	f003 f9a0 	bl	8003c9c <osKernelGetTickCount>
 800095c:	4602      	mov	r2, r0
 800095e:	f241 3388 	movw	r3, #5000	; 0x1388
 8000962:	4413      	add	r3, r2
 8000964:	60fb      	str	r3, [r7, #12]

		/* Toggle LED1 every 200 ms for 5 s */
		while (count > osKernelGetTickCount())
 8000966:	e006      	b.n	8000976 <LED_Thread1+0x2a>
		{
			HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000968:	2101      	movs	r1, #1
 800096a:	481d      	ldr	r0, [pc, #116]	; (80009e0 <LED_Thread1+0x94>)
 800096c:	f000 fd03 	bl	8001376 <HAL_GPIO_TogglePin>

			osDelay(200);
 8000970:	20c8      	movs	r0, #200	; 0xc8
 8000972:	f003 fac9 	bl	8003f08 <osDelay>
		while (count > osKernelGetTickCount())
 8000976:	f003 f991 	bl	8003c9c <osKernelGetTickCount>
 800097a:	4602      	mov	r2, r0
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	4293      	cmp	r3, r2
 8000980:	d8f2      	bhi.n	8000968 <LED_Thread1+0x1c>
		}

		/* Turn off LED1 */
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000982:	2200      	movs	r2, #0
 8000984:	2101      	movs	r1, #1
 8000986:	4816      	ldr	r0, [pc, #88]	; (80009e0 <LED_Thread1+0x94>)
 8000988:	f000 fcdc 	bl	8001344 <HAL_GPIO_WritePin>

		/* Suspend Thread 1 */
		OsStatus = osThreadSuspend(THREAD1Handle);
 800098c:	4b15      	ldr	r3, [pc, #84]	; (80009e4 <LED_Thread1+0x98>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4618      	mov	r0, r3
 8000992:	f003 fa51 	bl	8003e38 <osThreadSuspend>
 8000996:	4603      	mov	r3, r0
 8000998:	461a      	mov	r2, r3
 800099a:	4b13      	ldr	r3, [pc, #76]	; (80009e8 <LED_Thread1+0x9c>)
 800099c:	601a      	str	r2, [r3, #0]

		count = osKernelGetTickCount() + 5000;
 800099e:	f003 f97d 	bl	8003c9c <osKernelGetTickCount>
 80009a2:	4602      	mov	r2, r0
 80009a4:	f241 3388 	movw	r3, #5000	; 0x1388
 80009a8:	4413      	add	r3, r2
 80009aa:	60fb      	str	r3, [r7, #12]

		/* Toggle LED1 every 500 ms for 5 s */
		while (count > osKernelGetTickCount())
 80009ac:	e007      	b.n	80009be <LED_Thread1+0x72>
		{
			HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80009ae:	2101      	movs	r1, #1
 80009b0:	480b      	ldr	r0, [pc, #44]	; (80009e0 <LED_Thread1+0x94>)
 80009b2:	f000 fce0 	bl	8001376 <HAL_GPIO_TogglePin>

			osDelay(500);
 80009b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009ba:	f003 faa5 	bl	8003f08 <osDelay>
		while (count > osKernelGetTickCount())
 80009be:	f003 f96d 	bl	8003c9c <osKernelGetTickCount>
 80009c2:	4602      	mov	r2, r0
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d8f1      	bhi.n	80009ae <LED_Thread1+0x62>
		}

		/* Resume Thread 2*/
		OsStatus = osThreadResume(THREAD2Handle);
 80009ca:	4b08      	ldr	r3, [pc, #32]	; (80009ec <LED_Thread1+0xa0>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4618      	mov	r0, r3
 80009d0:	f003 fa66 	bl	8003ea0 <osThreadResume>
 80009d4:	4603      	mov	r3, r0
 80009d6:	461a      	mov	r2, r3
 80009d8:	4b03      	ldr	r3, [pc, #12]	; (80009e8 <LED_Thread1+0x9c>)
 80009da:	601a      	str	r2, [r3, #0]
		count = osKernelGetTickCount() + 5000;
 80009dc:	e7bc      	b.n	8000958 <LED_Thread1+0xc>
 80009de:	bf00      	nop
 80009e0:	40020400 	.word	0x40020400
 80009e4:	20004dbc 	.word	0x20004dbc
 80009e8:	2000002c 	.word	0x2000002c
 80009ec:	20004dc0 	.word	0x20004dc0

080009f0 <LED_Thread2>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_LED_Thread2 */
void LED_Thread2(void *argument)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
	uint32_t count;
	(void) argument;
	/* Infinite loop */
	for (;;)
	{
		count = osKernelGetTickCount() + 10000;
 80009f8:	f003 f950 	bl	8003c9c <osKernelGetTickCount>
 80009fc:	4602      	mov	r2, r0
 80009fe:	f242 7310 	movw	r3, #10000	; 0x2710
 8000a02:	4413      	add	r3, r2
 8000a04:	60fb      	str	r3, [r7, #12]

		/* Toggle LED2 every 500 ms for 10 s */
		while (count > osKernelGetTickCount())
 8000a06:	e007      	b.n	8000a18 <LED_Thread2+0x28>
		{
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000a08:	2180      	movs	r1, #128	; 0x80
 8000a0a:	4812      	ldr	r0, [pc, #72]	; (8000a54 <LED_Thread2+0x64>)
 8000a0c:	f000 fcb3 	bl	8001376 <HAL_GPIO_TogglePin>

			osDelay(500);
 8000a10:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a14:	f003 fa78 	bl	8003f08 <osDelay>
		while (count > osKernelGetTickCount())
 8000a18:	f003 f940 	bl	8003c9c <osKernelGetTickCount>
 8000a1c:	4602      	mov	r2, r0
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d8f1      	bhi.n	8000a08 <LED_Thread2+0x18>
		}

		/* Turn off LED2 */
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a24:	2200      	movs	r2, #0
 8000a26:	2180      	movs	r1, #128	; 0x80
 8000a28:	480a      	ldr	r0, [pc, #40]	; (8000a54 <LED_Thread2+0x64>)
 8000a2a:	f000 fc8b 	bl	8001344 <HAL_GPIO_WritePin>

		/* Resume Thread 1 */
		OsStatus = osThreadResume(THREAD1Handle);
 8000a2e:	4b0a      	ldr	r3, [pc, #40]	; (8000a58 <LED_Thread2+0x68>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4618      	mov	r0, r3
 8000a34:	f003 fa34 	bl	8003ea0 <osThreadResume>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	4b07      	ldr	r3, [pc, #28]	; (8000a5c <LED_Thread2+0x6c>)
 8000a3e:	601a      	str	r2, [r3, #0]

		/* Suspend Thread 2 */
		OsStatus = osThreadSuspend(THREAD2Handle);
 8000a40:	4b07      	ldr	r3, [pc, #28]	; (8000a60 <LED_Thread2+0x70>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4618      	mov	r0, r3
 8000a46:	f003 f9f7 	bl	8003e38 <osThreadSuspend>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	4b03      	ldr	r3, [pc, #12]	; (8000a5c <LED_Thread2+0x6c>)
 8000a50:	601a      	str	r2, [r3, #0]
		count = osKernelGetTickCount() + 10000;
 8000a52:	e7d1      	b.n	80009f8 <LED_Thread2+0x8>
 8000a54:	40020400 	.word	0x40020400
 8000a58:	20004dbc 	.word	0x20004dbc
 8000a5c:	2000002c 	.word	0x2000002c
 8000a60:	20004dc0 	.word	0x20004dc0

08000a64 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a04      	ldr	r2, [pc, #16]	; (8000a84 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d101      	bne.n	8000a7a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a76:	f000 f997 	bl	8000da8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40014000 	.word	0x40014000

08000a88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a8c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000a8e:	e7fe      	b.n	8000a8e <Error_Handler+0x6>

08000a90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a96:	4b11      	ldr	r3, [pc, #68]	; (8000adc <HAL_MspInit+0x4c>)
 8000a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9a:	4a10      	ldr	r2, [pc, #64]	; (8000adc <HAL_MspInit+0x4c>)
 8000a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa0:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa2:	4b0e      	ldr	r3, [pc, #56]	; (8000adc <HAL_MspInit+0x4c>)
 8000aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aaa:	607b      	str	r3, [r7, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aae:	4b0b      	ldr	r3, [pc, #44]	; (8000adc <HAL_MspInit+0x4c>)
 8000ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab2:	4a0a      	ldr	r2, [pc, #40]	; (8000adc <HAL_MspInit+0x4c>)
 8000ab4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ab8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aba:	4b08      	ldr	r3, [pc, #32]	; (8000adc <HAL_MspInit+0x4c>)
 8000abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000abe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ac2:	603b      	str	r3, [r7, #0]
 8000ac4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	210f      	movs	r1, #15
 8000aca:	f06f 0001 	mvn.w	r0, #1
 8000ace:	f000 fa65 	bl	8000f9c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40023800 	.word	0x40023800

08000ae0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08a      	sub	sp, #40	; 0x28
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae8:	f107 0314 	add.w	r3, r7, #20
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
 8000af6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a17      	ldr	r2, [pc, #92]	; (8000b5c <HAL_UART_MspInit+0x7c>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d128      	bne.n	8000b54 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b02:	4b17      	ldr	r3, [pc, #92]	; (8000b60 <HAL_UART_MspInit+0x80>)
 8000b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b06:	4a16      	ldr	r2, [pc, #88]	; (8000b60 <HAL_UART_MspInit+0x80>)
 8000b08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b0e:	4b14      	ldr	r3, [pc, #80]	; (8000b60 <HAL_UART_MspInit+0x80>)
 8000b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b16:	613b      	str	r3, [r7, #16]
 8000b18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b1a:	4b11      	ldr	r3, [pc, #68]	; (8000b60 <HAL_UART_MspInit+0x80>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4a10      	ldr	r2, [pc, #64]	; (8000b60 <HAL_UART_MspInit+0x80>)
 8000b20:	f043 0308 	orr.w	r3, r3, #8
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
 8000b26:	4b0e      	ldr	r3, [pc, #56]	; (8000b60 <HAL_UART_MspInit+0x80>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	f003 0308 	and.w	r3, r3, #8
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b32:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b40:	2303      	movs	r3, #3
 8000b42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b44:	2307      	movs	r3, #7
 8000b46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4805      	ldr	r0, [pc, #20]	; (8000b64 <HAL_UART_MspInit+0x84>)
 8000b50:	f000 fa4e 	bl	8000ff0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b54:	bf00      	nop
 8000b56:	3728      	adds	r7, #40	; 0x28
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	40004800 	.word	0x40004800
 8000b60:	40023800 	.word	0x40023800
 8000b64:	40020c00 	.word	0x40020c00

08000b68 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08a      	sub	sp, #40	; 0x28
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
 8000b7e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b88:	d141      	bne.n	8000c0e <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8a:	4b23      	ldr	r3, [pc, #140]	; (8000c18 <HAL_PCD_MspInit+0xb0>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	4a22      	ldr	r2, [pc, #136]	; (8000c18 <HAL_PCD_MspInit+0xb0>)
 8000b90:	f043 0301 	orr.w	r3, r3, #1
 8000b94:	6313      	str	r3, [r2, #48]	; 0x30
 8000b96:	4b20      	ldr	r3, [pc, #128]	; (8000c18 <HAL_PCD_MspInit+0xb0>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	f003 0301 	and.w	r3, r3, #1
 8000b9e:	613b      	str	r3, [r7, #16]
 8000ba0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000ba2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000ba6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb0:	2303      	movs	r3, #3
 8000bb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000bb4:	230a      	movs	r3, #10
 8000bb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb8:	f107 0314 	add.w	r3, r7, #20
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4817      	ldr	r0, [pc, #92]	; (8000c1c <HAL_PCD_MspInit+0xb4>)
 8000bc0:	f000 fa16 	bl	8000ff0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000bc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000bd2:	f107 0314 	add.w	r3, r7, #20
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4810      	ldr	r0, [pc, #64]	; (8000c1c <HAL_PCD_MspInit+0xb4>)
 8000bda:	f000 fa09 	bl	8000ff0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000bde:	4b0e      	ldr	r3, [pc, #56]	; (8000c18 <HAL_PCD_MspInit+0xb0>)
 8000be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000be2:	4a0d      	ldr	r2, [pc, #52]	; (8000c18 <HAL_PCD_MspInit+0xb0>)
 8000be4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000be8:	6353      	str	r3, [r2, #52]	; 0x34
 8000bea:	4b0b      	ldr	r3, [pc, #44]	; (8000c18 <HAL_PCD_MspInit+0xb0>)
 8000bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	4b08      	ldr	r3, [pc, #32]	; (8000c18 <HAL_PCD_MspInit+0xb0>)
 8000bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfa:	4a07      	ldr	r2, [pc, #28]	; (8000c18 <HAL_PCD_MspInit+0xb0>)
 8000bfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c00:	6453      	str	r3, [r2, #68]	; 0x44
 8000c02:	4b05      	ldr	r3, [pc, #20]	; (8000c18 <HAL_PCD_MspInit+0xb0>)
 8000c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c0a:	60bb      	str	r3, [r7, #8]
 8000c0c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000c0e:	bf00      	nop
 8000c10:	3728      	adds	r7, #40	; 0x28
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40023800 	.word	0x40023800
 8000c1c:	40020000 	.word	0x40020000

08000c20 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08c      	sub	sp, #48	; 0x30
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM9 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority ,0);
 8000c30:	2200      	movs	r2, #0
 8000c32:	6879      	ldr	r1, [r7, #4]
 8000c34:	2018      	movs	r0, #24
 8000c36:	f000 f9b1 	bl	8000f9c <HAL_NVIC_SetPriority>

  /* Enable the TIM9 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000c3a:	2018      	movs	r0, #24
 8000c3c:	f000 f9ca 	bl	8000fd4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 8000c40:	4b1f      	ldr	r3, [pc, #124]	; (8000cc0 <HAL_InitTick+0xa0>)
 8000c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c44:	4a1e      	ldr	r2, [pc, #120]	; (8000cc0 <HAL_InitTick+0xa0>)
 8000c46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c4a:	6453      	str	r3, [r2, #68]	; 0x44
 8000c4c:	4b1c      	ldr	r3, [pc, #112]	; (8000cc0 <HAL_InitTick+0xa0>)
 8000c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c54:	60fb      	str	r3, [r7, #12]
 8000c56:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c58:	f107 0210 	add.w	r2, r7, #16
 8000c5c:	f107 0314 	add.w	r3, r7, #20
 8000c60:	4611      	mov	r1, r2
 8000c62:	4618      	mov	r0, r3
 8000c64:	f001 f9e0 	bl	8002028 <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000c68:	f001 f9ca 	bl	8002000 <HAL_RCC_GetPCLK2Freq>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	005b      	lsls	r3, r3, #1
 8000c70:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c74:	4a13      	ldr	r2, [pc, #76]	; (8000cc4 <HAL_InitTick+0xa4>)
 8000c76:	fba2 2303 	umull	r2, r3, r2, r3
 8000c7a:	0c9b      	lsrs	r3, r3, #18
 8000c7c:	3b01      	subs	r3, #1
 8000c7e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8000c80:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <HAL_InitTick+0xa8>)
 8000c82:	4a12      	ldr	r2, [pc, #72]	; (8000ccc <HAL_InitTick+0xac>)
 8000c84:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 8000c86:	4b10      	ldr	r3, [pc, #64]	; (8000cc8 <HAL_InitTick+0xa8>)
 8000c88:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c8c:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 8000c8e:	4a0e      	ldr	r2, [pc, #56]	; (8000cc8 <HAL_InitTick+0xa8>)
 8000c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c92:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 8000c94:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <HAL_InitTick+0xa8>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c9a:	4b0b      	ldr	r3, [pc, #44]	; (8000cc8 <HAL_InitTick+0xa8>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim9) == HAL_OK)
 8000ca0:	4809      	ldr	r0, [pc, #36]	; (8000cc8 <HAL_InitTick+0xa8>)
 8000ca2:	f001 fe19 	bl	80028d8 <HAL_TIM_Base_Init>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d104      	bne.n	8000cb6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim9);
 8000cac:	4806      	ldr	r0, [pc, #24]	; (8000cc8 <HAL_InitTick+0xa8>)
 8000cae:	f001 fe49 	bl	8002944 <HAL_TIM_Base_Start_IT>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	e000      	b.n	8000cb8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000cb6:	2301      	movs	r3, #1
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3730      	adds	r7, #48	; 0x30
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	40023800 	.word	0x40023800
 8000cc4:	431bde83 	.word	0x431bde83
 8000cc8:	20004dc4 	.word	0x20004dc4
 8000ccc:	40014000 	.word	0x40014000

08000cd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cd4:	e7fe      	b.n	8000cd4 <NMI_Handler+0x4>

08000cd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cda:	e7fe      	b.n	8000cda <HardFault_Handler+0x4>

08000cdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce0:	e7fe      	b.n	8000ce0 <MemManage_Handler+0x4>

08000ce2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ce6:	e7fe      	b.n	8000ce6 <BusFault_Handler+0x4>

08000ce8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cec:	e7fe      	b.n	8000cec <UsageFault_Handler+0x4>

08000cee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8000d00:	4802      	ldr	r0, [pc, #8]	; (8000d0c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8000d02:	f001 fe49 	bl	8002998 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20004dc4 	.word	0x20004dc4

08000d10 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d14:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <SystemInit+0x28>)
 8000d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d1a:	4a07      	ldr	r2, [pc, #28]	; (8000d38 <SystemInit+0x28>)
 8000d1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d24:	4b04      	ldr	r3, [pc, #16]	; (8000d38 <SystemInit+0x28>)
 8000d26:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d2a:	609a      	str	r2, [r3, #8]
#endif
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	e000ed00 	.word	0xe000ed00

08000d3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d74 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000d40:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000d42:	e003      	b.n	8000d4c <LoopCopyDataInit>

08000d44 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000d44:	4b0c      	ldr	r3, [pc, #48]	; (8000d78 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000d46:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000d48:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000d4a:	3104      	adds	r1, #4

08000d4c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000d4c:	480b      	ldr	r0, [pc, #44]	; (8000d7c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000d4e:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000d50:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000d52:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000d54:	d3f6      	bcc.n	8000d44 <CopyDataInit>
  ldr  r2, =_sbss
 8000d56:	4a0b      	ldr	r2, [pc, #44]	; (8000d84 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000d58:	e002      	b.n	8000d60 <LoopFillZerobss>

08000d5a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000d5a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000d5c:	f842 3b04 	str.w	r3, [r2], #4

08000d60 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000d60:	4b09      	ldr	r3, [pc, #36]	; (8000d88 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000d62:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000d64:	d3f9      	bcc.n	8000d5a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d66:	f7ff ffd3 	bl	8000d10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d6a:	f005 fe5f 	bl	8006a2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d6e:	f7ff fbe7 	bl	8000540 <main>
  bx  lr    
 8000d72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d74:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8000d78:	08006b4c 	.word	0x08006b4c
  ldr  r0, =_sdata
 8000d7c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000d80:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000d84:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000d88:	20004e48 	.word	0x20004e48

08000d8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d8c:	e7fe      	b.n	8000d8c <ADC_IRQHandler>

08000d8e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d92:	2003      	movs	r0, #3
 8000d94:	f000 f8f7 	bl	8000f86 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d98:	2000      	movs	r0, #0
 8000d9a:	f7ff ff41 	bl	8000c20 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000d9e:	f7ff fe77 	bl	8000a90 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000da2:	2300      	movs	r3, #0
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dac:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <HAL_IncTick+0x20>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	461a      	mov	r2, r3
 8000db2:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <HAL_IncTick+0x24>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4413      	add	r3, r2
 8000db8:	4a04      	ldr	r2, [pc, #16]	; (8000dcc <HAL_IncTick+0x24>)
 8000dba:	6013      	str	r3, [r2, #0]
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	20000008 	.word	0x20000008
 8000dcc:	20004e04 	.word	0x20004e04

08000dd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000dd4:	4b03      	ldr	r3, [pc, #12]	; (8000de4 <HAL_GetTick+0x14>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	20004e04 	.word	0x20004e04

08000de8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000df0:	f7ff ffee 	bl	8000dd0 <HAL_GetTick>
 8000df4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e00:	d005      	beq.n	8000e0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e02:	4b09      	ldr	r3, [pc, #36]	; (8000e28 <HAL_Delay+0x40>)
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	461a      	mov	r2, r3
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e0e:	bf00      	nop
 8000e10:	f7ff ffde 	bl	8000dd0 <HAL_GetTick>
 8000e14:	4602      	mov	r2, r0
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	68fa      	ldr	r2, [r7, #12]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	d8f7      	bhi.n	8000e10 <HAL_Delay+0x28>
  {
  }
}
 8000e20:	bf00      	nop
 8000e22:	3710      	adds	r7, #16
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	20000008 	.word	0x20000008

08000e2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b085      	sub	sp, #20
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	f003 0307 	and.w	r3, r3, #7
 8000e3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e3c:	4b0b      	ldr	r3, [pc, #44]	; (8000e6c <__NVIC_SetPriorityGrouping+0x40>)
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e42:	68ba      	ldr	r2, [r7, #8]
 8000e44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e48:	4013      	ands	r3, r2
 8000e4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e54:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <__NVIC_SetPriorityGrouping+0x44>)
 8000e56:	4313      	orrs	r3, r2
 8000e58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e5a:	4a04      	ldr	r2, [pc, #16]	; (8000e6c <__NVIC_SetPriorityGrouping+0x40>)
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	60d3      	str	r3, [r2, #12]
}
 8000e60:	bf00      	nop
 8000e62:	3714      	adds	r7, #20
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	e000ed00 	.word	0xe000ed00
 8000e70:	05fa0000 	.word	0x05fa0000

08000e74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e78:	4b04      	ldr	r3, [pc, #16]	; (8000e8c <__NVIC_GetPriorityGrouping+0x18>)
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	0a1b      	lsrs	r3, r3, #8
 8000e7e:	f003 0307 	and.w	r3, r3, #7
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	db0b      	blt.n	8000eba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ea2:	79fb      	ldrb	r3, [r7, #7]
 8000ea4:	f003 021f 	and.w	r2, r3, #31
 8000ea8:	4907      	ldr	r1, [pc, #28]	; (8000ec8 <__NVIC_EnableIRQ+0x38>)
 8000eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eae:	095b      	lsrs	r3, r3, #5
 8000eb0:	2001      	movs	r0, #1
 8000eb2:	fa00 f202 	lsl.w	r2, r0, r2
 8000eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eba:	bf00      	nop
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	e000e100 	.word	0xe000e100

08000ecc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	6039      	str	r1, [r7, #0]
 8000ed6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	db0a      	blt.n	8000ef6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	b2da      	uxtb	r2, r3
 8000ee4:	490c      	ldr	r1, [pc, #48]	; (8000f18 <__NVIC_SetPriority+0x4c>)
 8000ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eea:	0112      	lsls	r2, r2, #4
 8000eec:	b2d2      	uxtb	r2, r2
 8000eee:	440b      	add	r3, r1
 8000ef0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ef4:	e00a      	b.n	8000f0c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	b2da      	uxtb	r2, r3
 8000efa:	4908      	ldr	r1, [pc, #32]	; (8000f1c <__NVIC_SetPriority+0x50>)
 8000efc:	79fb      	ldrb	r3, [r7, #7]
 8000efe:	f003 030f 	and.w	r3, r3, #15
 8000f02:	3b04      	subs	r3, #4
 8000f04:	0112      	lsls	r2, r2, #4
 8000f06:	b2d2      	uxtb	r2, r2
 8000f08:	440b      	add	r3, r1
 8000f0a:	761a      	strb	r2, [r3, #24]
}
 8000f0c:	bf00      	nop
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	e000e100 	.word	0xe000e100
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b089      	sub	sp, #36	; 0x24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	60b9      	str	r1, [r7, #8]
 8000f2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	f003 0307 	and.w	r3, r3, #7
 8000f32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	f1c3 0307 	rsb	r3, r3, #7
 8000f3a:	2b04      	cmp	r3, #4
 8000f3c:	bf28      	it	cs
 8000f3e:	2304      	movcs	r3, #4
 8000f40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	3304      	adds	r3, #4
 8000f46:	2b06      	cmp	r3, #6
 8000f48:	d902      	bls.n	8000f50 <NVIC_EncodePriority+0x30>
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	3b03      	subs	r3, #3
 8000f4e:	e000      	b.n	8000f52 <NVIC_EncodePriority+0x32>
 8000f50:	2300      	movs	r3, #0
 8000f52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f54:	f04f 32ff 	mov.w	r2, #4294967295
 8000f58:	69bb      	ldr	r3, [r7, #24]
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	43da      	mvns	r2, r3
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	401a      	ands	r2, r3
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f68:	f04f 31ff 	mov.w	r1, #4294967295
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f72:	43d9      	mvns	r1, r3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f78:	4313      	orrs	r3, r2
         );
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3724      	adds	r7, #36	; 0x24
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr

08000f86 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b082      	sub	sp, #8
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f7ff ff4c 	bl	8000e2c <__NVIC_SetPriorityGrouping>
}
 8000f94:	bf00      	nop
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
 8000fa8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000faa:	2300      	movs	r3, #0
 8000fac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fae:	f7ff ff61 	bl	8000e74 <__NVIC_GetPriorityGrouping>
 8000fb2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fb4:	687a      	ldr	r2, [r7, #4]
 8000fb6:	68b9      	ldr	r1, [r7, #8]
 8000fb8:	6978      	ldr	r0, [r7, #20]
 8000fba:	f7ff ffb1 	bl	8000f20 <NVIC_EncodePriority>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fc4:	4611      	mov	r1, r2
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff ff80 	bl	8000ecc <__NVIC_SetPriority>
}
 8000fcc:	bf00      	nop
 8000fce:	3718      	adds	r7, #24
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff ff54 	bl	8000e90 <__NVIC_EnableIRQ>
}
 8000fe8:	bf00      	nop
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b089      	sub	sp, #36	; 0x24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000ffe:	2300      	movs	r3, #0
 8001000:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001002:	2300      	movs	r3, #0
 8001004:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001006:	2300      	movs	r3, #0
 8001008:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800100a:	2300      	movs	r3, #0
 800100c:	61fb      	str	r3, [r7, #28]
 800100e:	e175      	b.n	80012fc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001010:	2201      	movs	r2, #1
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	697a      	ldr	r2, [r7, #20]
 8001020:	4013      	ands	r3, r2
 8001022:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	429a      	cmp	r2, r3
 800102a:	f040 8164 	bne.w	80012f6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	2b01      	cmp	r3, #1
 8001034:	d00b      	beq.n	800104e <HAL_GPIO_Init+0x5e>
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	2b02      	cmp	r3, #2
 800103c:	d007      	beq.n	800104e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001042:	2b11      	cmp	r3, #17
 8001044:	d003      	beq.n	800104e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	2b12      	cmp	r3, #18
 800104c:	d130      	bne.n	80010b0 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	2203      	movs	r2, #3
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	43db      	mvns	r3, r3
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	4013      	ands	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	68da      	ldr	r2, [r3, #12]
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	4313      	orrs	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001084:	2201      	movs	r2, #1
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	43db      	mvns	r3, r3
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	4013      	ands	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	091b      	lsrs	r3, r3, #4
 800109a:	f003 0201 	and.w	r2, r3, #1
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	2203      	movs	r2, #3
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	43db      	mvns	r3, r3
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	4013      	ands	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	689a      	ldr	r2, [r3, #8]
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	d003      	beq.n	80010f0 <HAL_GPIO_Init+0x100>
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	2b12      	cmp	r3, #18
 80010ee:	d123      	bne.n	8001138 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	08da      	lsrs	r2, r3, #3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	3208      	adds	r2, #8
 80010f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	f003 0307 	and.w	r3, r3, #7
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	220f      	movs	r2, #15
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	43db      	mvns	r3, r3
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	4013      	ands	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	691a      	ldr	r2, [r3, #16]
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	f003 0307 	and.w	r3, r3, #7
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	4313      	orrs	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	08da      	lsrs	r2, r3, #3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	3208      	adds	r2, #8
 8001132:	69b9      	ldr	r1, [r7, #24]
 8001134:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	2203      	movs	r2, #3
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	43db      	mvns	r3, r3
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	4013      	ands	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f003 0203 	and.w	r2, r3, #3
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	4313      	orrs	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001174:	2b00      	cmp	r3, #0
 8001176:	f000 80be 	beq.w	80012f6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800117a:	4b65      	ldr	r3, [pc, #404]	; (8001310 <HAL_GPIO_Init+0x320>)
 800117c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117e:	4a64      	ldr	r2, [pc, #400]	; (8001310 <HAL_GPIO_Init+0x320>)
 8001180:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001184:	6453      	str	r3, [r2, #68]	; 0x44
 8001186:	4b62      	ldr	r3, [pc, #392]	; (8001310 <HAL_GPIO_Init+0x320>)
 8001188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001192:	4a60      	ldr	r2, [pc, #384]	; (8001314 <HAL_GPIO_Init+0x324>)
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	089b      	lsrs	r3, r3, #2
 8001198:	3302      	adds	r3, #2
 800119a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800119e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	f003 0303 	and.w	r3, r3, #3
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	220f      	movs	r2, #15
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	43db      	mvns	r3, r3
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	4013      	ands	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a57      	ldr	r2, [pc, #348]	; (8001318 <HAL_GPIO_Init+0x328>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d037      	beq.n	800122e <HAL_GPIO_Init+0x23e>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a56      	ldr	r2, [pc, #344]	; (800131c <HAL_GPIO_Init+0x32c>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d031      	beq.n	800122a <HAL_GPIO_Init+0x23a>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a55      	ldr	r2, [pc, #340]	; (8001320 <HAL_GPIO_Init+0x330>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d02b      	beq.n	8001226 <HAL_GPIO_Init+0x236>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a54      	ldr	r2, [pc, #336]	; (8001324 <HAL_GPIO_Init+0x334>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d025      	beq.n	8001222 <HAL_GPIO_Init+0x232>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a53      	ldr	r2, [pc, #332]	; (8001328 <HAL_GPIO_Init+0x338>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d01f      	beq.n	800121e <HAL_GPIO_Init+0x22e>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4a52      	ldr	r2, [pc, #328]	; (800132c <HAL_GPIO_Init+0x33c>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d019      	beq.n	800121a <HAL_GPIO_Init+0x22a>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4a51      	ldr	r2, [pc, #324]	; (8001330 <HAL_GPIO_Init+0x340>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d013      	beq.n	8001216 <HAL_GPIO_Init+0x226>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a50      	ldr	r2, [pc, #320]	; (8001334 <HAL_GPIO_Init+0x344>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d00d      	beq.n	8001212 <HAL_GPIO_Init+0x222>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a4f      	ldr	r2, [pc, #316]	; (8001338 <HAL_GPIO_Init+0x348>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d007      	beq.n	800120e <HAL_GPIO_Init+0x21e>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a4e      	ldr	r2, [pc, #312]	; (800133c <HAL_GPIO_Init+0x34c>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d101      	bne.n	800120a <HAL_GPIO_Init+0x21a>
 8001206:	2309      	movs	r3, #9
 8001208:	e012      	b.n	8001230 <HAL_GPIO_Init+0x240>
 800120a:	230a      	movs	r3, #10
 800120c:	e010      	b.n	8001230 <HAL_GPIO_Init+0x240>
 800120e:	2308      	movs	r3, #8
 8001210:	e00e      	b.n	8001230 <HAL_GPIO_Init+0x240>
 8001212:	2307      	movs	r3, #7
 8001214:	e00c      	b.n	8001230 <HAL_GPIO_Init+0x240>
 8001216:	2306      	movs	r3, #6
 8001218:	e00a      	b.n	8001230 <HAL_GPIO_Init+0x240>
 800121a:	2305      	movs	r3, #5
 800121c:	e008      	b.n	8001230 <HAL_GPIO_Init+0x240>
 800121e:	2304      	movs	r3, #4
 8001220:	e006      	b.n	8001230 <HAL_GPIO_Init+0x240>
 8001222:	2303      	movs	r3, #3
 8001224:	e004      	b.n	8001230 <HAL_GPIO_Init+0x240>
 8001226:	2302      	movs	r3, #2
 8001228:	e002      	b.n	8001230 <HAL_GPIO_Init+0x240>
 800122a:	2301      	movs	r3, #1
 800122c:	e000      	b.n	8001230 <HAL_GPIO_Init+0x240>
 800122e:	2300      	movs	r3, #0
 8001230:	69fa      	ldr	r2, [r7, #28]
 8001232:	f002 0203 	and.w	r2, r2, #3
 8001236:	0092      	lsls	r2, r2, #2
 8001238:	4093      	lsls	r3, r2
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	4313      	orrs	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001240:	4934      	ldr	r1, [pc, #208]	; (8001314 <HAL_GPIO_Init+0x324>)
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	089b      	lsrs	r3, r3, #2
 8001246:	3302      	adds	r3, #2
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800124e:	4b3c      	ldr	r3, [pc, #240]	; (8001340 <HAL_GPIO_Init+0x350>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	43db      	mvns	r3, r3
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	4013      	ands	r3, r2
 800125c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d003      	beq.n	8001272 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	4313      	orrs	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001272:	4a33      	ldr	r2, [pc, #204]	; (8001340 <HAL_GPIO_Init+0x350>)
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001278:	4b31      	ldr	r3, [pc, #196]	; (8001340 <HAL_GPIO_Init+0x350>)
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	43db      	mvns	r3, r3
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	4013      	ands	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d003      	beq.n	800129c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	4313      	orrs	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800129c:	4a28      	ldr	r2, [pc, #160]	; (8001340 <HAL_GPIO_Init+0x350>)
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012a2:	4b27      	ldr	r3, [pc, #156]	; (8001340 <HAL_GPIO_Init+0x350>)
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	43db      	mvns	r3, r3
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	4013      	ands	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d003      	beq.n	80012c6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012c6:	4a1e      	ldr	r2, [pc, #120]	; (8001340 <HAL_GPIO_Init+0x350>)
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012cc:	4b1c      	ldr	r3, [pc, #112]	; (8001340 <HAL_GPIO_Init+0x350>)
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	43db      	mvns	r3, r3
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	4013      	ands	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d003      	beq.n	80012f0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012f0:	4a13      	ldr	r2, [pc, #76]	; (8001340 <HAL_GPIO_Init+0x350>)
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	3301      	adds	r3, #1
 80012fa:	61fb      	str	r3, [r7, #28]
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	2b0f      	cmp	r3, #15
 8001300:	f67f ae86 	bls.w	8001010 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001304:	bf00      	nop
 8001306:	3724      	adds	r7, #36	; 0x24
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	40023800 	.word	0x40023800
 8001314:	40013800 	.word	0x40013800
 8001318:	40020000 	.word	0x40020000
 800131c:	40020400 	.word	0x40020400
 8001320:	40020800 	.word	0x40020800
 8001324:	40020c00 	.word	0x40020c00
 8001328:	40021000 	.word	0x40021000
 800132c:	40021400 	.word	0x40021400
 8001330:	40021800 	.word	0x40021800
 8001334:	40021c00 	.word	0x40021c00
 8001338:	40022000 	.word	0x40022000
 800133c:	40022400 	.word	0x40022400
 8001340:	40013c00 	.word	0x40013c00

08001344 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	460b      	mov	r3, r1
 800134e:	807b      	strh	r3, [r7, #2]
 8001350:	4613      	mov	r3, r2
 8001352:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001354:	787b      	ldrb	r3, [r7, #1]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d003      	beq.n	8001362 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800135a:	887a      	ldrh	r2, [r7, #2]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001360:	e003      	b.n	800136a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001362:	887b      	ldrh	r3, [r7, #2]
 8001364:	041a      	lsls	r2, r3, #16
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	619a      	str	r2, [r3, #24]
}
 800136a:	bf00      	nop
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr

08001376 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001376:	b480      	push	{r7}
 8001378:	b083      	sub	sp, #12
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
 800137e:	460b      	mov	r3, r1
 8001380:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	695a      	ldr	r2, [r3, #20]
 8001386:	887b      	ldrh	r3, [r7, #2]
 8001388:	4013      	ands	r3, r2
 800138a:	2b00      	cmp	r3, #0
 800138c:	d004      	beq.n	8001398 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800138e:	887b      	ldrh	r3, [r7, #2]
 8001390:	041a      	lsls	r2, r3, #16
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001396:	e002      	b.n	800139e <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001398:	887a      	ldrh	r2, [r7, #2]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	619a      	str	r2, [r3, #24]
}
 800139e:	bf00      	nop
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr

080013aa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80013aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ac:	b08f      	sub	sp, #60	; 0x3c
 80013ae:	af0a      	add	r7, sp, #40	; 0x28
 80013b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d101      	bne.n	80013bc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	e116      	b.n	80015ea <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d106      	bne.n	80013dc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2200      	movs	r2, #0
 80013d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f7ff fbc6 	bl	8000b68 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2203      	movs	r2, #3
 80013e0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d102      	bne.n	80013f6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2200      	movs	r2, #0
 80013f4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f002 f984 	bl	8003708 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	603b      	str	r3, [r7, #0]
 8001406:	687e      	ldr	r6, [r7, #4]
 8001408:	466d      	mov	r5, sp
 800140a:	f106 0410 	add.w	r4, r6, #16
 800140e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001410:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001412:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001414:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001416:	e894 0003 	ldmia.w	r4, {r0, r1}
 800141a:	e885 0003 	stmia.w	r5, {r0, r1}
 800141e:	1d33      	adds	r3, r6, #4
 8001420:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001422:	6838      	ldr	r0, [r7, #0]
 8001424:	f002 f918 	bl	8003658 <USB_CoreInit>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d005      	beq.n	800143a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2202      	movs	r2, #2
 8001432:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e0d7      	b.n	80015ea <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2100      	movs	r1, #0
 8001440:	4618      	mov	r0, r3
 8001442:	f002 f972 	bl	800372a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001446:	2300      	movs	r3, #0
 8001448:	73fb      	strb	r3, [r7, #15]
 800144a:	e04a      	b.n	80014e2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800144c:	7bfa      	ldrb	r2, [r7, #15]
 800144e:	6879      	ldr	r1, [r7, #4]
 8001450:	4613      	mov	r3, r2
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	1a9b      	subs	r3, r3, r2
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	440b      	add	r3, r1
 800145a:	333d      	adds	r3, #61	; 0x3d
 800145c:	2201      	movs	r2, #1
 800145e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001460:	7bfa      	ldrb	r2, [r7, #15]
 8001462:	6879      	ldr	r1, [r7, #4]
 8001464:	4613      	mov	r3, r2
 8001466:	00db      	lsls	r3, r3, #3
 8001468:	1a9b      	subs	r3, r3, r2
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	440b      	add	r3, r1
 800146e:	333c      	adds	r3, #60	; 0x3c
 8001470:	7bfa      	ldrb	r2, [r7, #15]
 8001472:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001474:	7bfa      	ldrb	r2, [r7, #15]
 8001476:	7bfb      	ldrb	r3, [r7, #15]
 8001478:	b298      	uxth	r0, r3
 800147a:	6879      	ldr	r1, [r7, #4]
 800147c:	4613      	mov	r3, r2
 800147e:	00db      	lsls	r3, r3, #3
 8001480:	1a9b      	subs	r3, r3, r2
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	440b      	add	r3, r1
 8001486:	3342      	adds	r3, #66	; 0x42
 8001488:	4602      	mov	r2, r0
 800148a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800148c:	7bfa      	ldrb	r2, [r7, #15]
 800148e:	6879      	ldr	r1, [r7, #4]
 8001490:	4613      	mov	r3, r2
 8001492:	00db      	lsls	r3, r3, #3
 8001494:	1a9b      	subs	r3, r3, r2
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	440b      	add	r3, r1
 800149a:	333f      	adds	r3, #63	; 0x3f
 800149c:	2200      	movs	r2, #0
 800149e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80014a0:	7bfa      	ldrb	r2, [r7, #15]
 80014a2:	6879      	ldr	r1, [r7, #4]
 80014a4:	4613      	mov	r3, r2
 80014a6:	00db      	lsls	r3, r3, #3
 80014a8:	1a9b      	subs	r3, r3, r2
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	440b      	add	r3, r1
 80014ae:	3344      	adds	r3, #68	; 0x44
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80014b4:	7bfa      	ldrb	r2, [r7, #15]
 80014b6:	6879      	ldr	r1, [r7, #4]
 80014b8:	4613      	mov	r3, r2
 80014ba:	00db      	lsls	r3, r3, #3
 80014bc:	1a9b      	subs	r3, r3, r2
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	440b      	add	r3, r1
 80014c2:	3348      	adds	r3, #72	; 0x48
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80014c8:	7bfa      	ldrb	r2, [r7, #15]
 80014ca:	6879      	ldr	r1, [r7, #4]
 80014cc:	4613      	mov	r3, r2
 80014ce:	00db      	lsls	r3, r3, #3
 80014d0:	1a9b      	subs	r3, r3, r2
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	440b      	add	r3, r1
 80014d6:	3350      	adds	r3, #80	; 0x50
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014dc:	7bfb      	ldrb	r3, [r7, #15]
 80014de:	3301      	adds	r3, #1
 80014e0:	73fb      	strb	r3, [r7, #15]
 80014e2:	7bfa      	ldrb	r2, [r7, #15]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d3af      	bcc.n	800144c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014ec:	2300      	movs	r3, #0
 80014ee:	73fb      	strb	r3, [r7, #15]
 80014f0:	e044      	b.n	800157c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80014f2:	7bfa      	ldrb	r2, [r7, #15]
 80014f4:	6879      	ldr	r1, [r7, #4]
 80014f6:	4613      	mov	r3, r2
 80014f8:	00db      	lsls	r3, r3, #3
 80014fa:	1a9b      	subs	r3, r3, r2
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	440b      	add	r3, r1
 8001500:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001504:	2200      	movs	r2, #0
 8001506:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001508:	7bfa      	ldrb	r2, [r7, #15]
 800150a:	6879      	ldr	r1, [r7, #4]
 800150c:	4613      	mov	r3, r2
 800150e:	00db      	lsls	r3, r3, #3
 8001510:	1a9b      	subs	r3, r3, r2
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	440b      	add	r3, r1
 8001516:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800151a:	7bfa      	ldrb	r2, [r7, #15]
 800151c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800151e:	7bfa      	ldrb	r2, [r7, #15]
 8001520:	6879      	ldr	r1, [r7, #4]
 8001522:	4613      	mov	r3, r2
 8001524:	00db      	lsls	r3, r3, #3
 8001526:	1a9b      	subs	r3, r3, r2
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	440b      	add	r3, r1
 800152c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001530:	2200      	movs	r2, #0
 8001532:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001534:	7bfa      	ldrb	r2, [r7, #15]
 8001536:	6879      	ldr	r1, [r7, #4]
 8001538:	4613      	mov	r3, r2
 800153a:	00db      	lsls	r3, r3, #3
 800153c:	1a9b      	subs	r3, r3, r2
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	440b      	add	r3, r1
 8001542:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800154a:	7bfa      	ldrb	r2, [r7, #15]
 800154c:	6879      	ldr	r1, [r7, #4]
 800154e:	4613      	mov	r3, r2
 8001550:	00db      	lsls	r3, r3, #3
 8001552:	1a9b      	subs	r3, r3, r2
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	440b      	add	r3, r1
 8001558:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001560:	7bfa      	ldrb	r2, [r7, #15]
 8001562:	6879      	ldr	r1, [r7, #4]
 8001564:	4613      	mov	r3, r2
 8001566:	00db      	lsls	r3, r3, #3
 8001568:	1a9b      	subs	r3, r3, r2
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	440b      	add	r3, r1
 800156e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001576:	7bfb      	ldrb	r3, [r7, #15]
 8001578:	3301      	adds	r3, #1
 800157a:	73fb      	strb	r3, [r7, #15]
 800157c:	7bfa      	ldrb	r2, [r7, #15]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	429a      	cmp	r2, r3
 8001584:	d3b5      	bcc.n	80014f2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	603b      	str	r3, [r7, #0]
 800158c:	687e      	ldr	r6, [r7, #4]
 800158e:	466d      	mov	r5, sp
 8001590:	f106 0410 	add.w	r4, r6, #16
 8001594:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001596:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001598:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800159a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800159c:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015a0:	e885 0003 	stmia.w	r5, {r0, r1}
 80015a4:	1d33      	adds	r3, r6, #4
 80015a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015a8:	6838      	ldr	r0, [r7, #0]
 80015aa:	f002 f8e9 	bl	8003780 <USB_DevInit>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d005      	beq.n	80015c0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2202      	movs	r2, #2
 80015b8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e014      	b.n	80015ea <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2200      	movs	r2, #0
 80015c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2201      	movs	r2, #1
 80015cc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d102      	bne.n	80015de <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f000 f80b 	bl	80015f4 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f002 fa9b 	bl	8003b1e <USB_DevDisconnect>

  return HAL_OK;
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3714      	adds	r7, #20
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080015f4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b085      	sub	sp, #20
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2201      	movs	r2, #1
 8001606:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2200      	movs	r2, #0
 800160e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	699b      	ldr	r3, [r3, #24]
 8001616:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001622:	4b05      	ldr	r3, [pc, #20]	; (8001638 <HAL_PCDEx_ActivateLPM+0x44>)
 8001624:	4313      	orrs	r3, r2
 8001626:	68fa      	ldr	r2, [r7, #12]
 8001628:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800162a:	2300      	movs	r3, #0
}
 800162c:	4618      	mov	r0, r3
 800162e:	3714      	adds	r7, #20
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr
 8001638:	10000003 	.word	0x10000003

0800163c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001642:	2300      	movs	r3, #0
 8001644:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001646:	4b23      	ldr	r3, [pc, #140]	; (80016d4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164a:	4a22      	ldr	r2, [pc, #136]	; (80016d4 <HAL_PWREx_EnableOverDrive+0x98>)
 800164c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001650:	6413      	str	r3, [r2, #64]	; 0x40
 8001652:	4b20      	ldr	r3, [pc, #128]	; (80016d4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800165a:	603b      	str	r3, [r7, #0]
 800165c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800165e:	4b1e      	ldr	r3, [pc, #120]	; (80016d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a1d      	ldr	r2, [pc, #116]	; (80016d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001664:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001668:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800166a:	f7ff fbb1 	bl	8000dd0 <HAL_GetTick>
 800166e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001670:	e009      	b.n	8001686 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001672:	f7ff fbad 	bl	8000dd0 <HAL_GetTick>
 8001676:	4602      	mov	r2, r0
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001680:	d901      	bls.n	8001686 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e022      	b.n	80016cc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001686:	4b14      	ldr	r3, [pc, #80]	; (80016d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800168e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001692:	d1ee      	bne.n	8001672 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001694:	4b10      	ldr	r3, [pc, #64]	; (80016d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a0f      	ldr	r2, [pc, #60]	; (80016d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800169a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800169e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016a0:	f7ff fb96 	bl	8000dd0 <HAL_GetTick>
 80016a4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80016a6:	e009      	b.n	80016bc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80016a8:	f7ff fb92 	bl	8000dd0 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016b6:	d901      	bls.n	80016bc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80016b8:	2303      	movs	r3, #3
 80016ba:	e007      	b.n	80016cc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80016bc:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80016c8:	d1ee      	bne.n	80016a8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80016ca:	2300      	movs	r3, #0
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3708      	adds	r7, #8
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	40023800 	.word	0x40023800
 80016d8:	40007000 	.word	0x40007000

080016dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b086      	sub	sp, #24
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80016e4:	2300      	movs	r3, #0
 80016e6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d101      	bne.n	80016f2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e29b      	b.n	8001c2a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	f000 8087 	beq.w	800180e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001700:	4b96      	ldr	r3, [pc, #600]	; (800195c <HAL_RCC_OscConfig+0x280>)
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	f003 030c 	and.w	r3, r3, #12
 8001708:	2b04      	cmp	r3, #4
 800170a:	d00c      	beq.n	8001726 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800170c:	4b93      	ldr	r3, [pc, #588]	; (800195c <HAL_RCC_OscConfig+0x280>)
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	f003 030c 	and.w	r3, r3, #12
 8001714:	2b08      	cmp	r3, #8
 8001716:	d112      	bne.n	800173e <HAL_RCC_OscConfig+0x62>
 8001718:	4b90      	ldr	r3, [pc, #576]	; (800195c <HAL_RCC_OscConfig+0x280>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001720:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001724:	d10b      	bne.n	800173e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001726:	4b8d      	ldr	r3, [pc, #564]	; (800195c <HAL_RCC_OscConfig+0x280>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d06c      	beq.n	800180c <HAL_RCC_OscConfig+0x130>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d168      	bne.n	800180c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e275      	b.n	8001c2a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001746:	d106      	bne.n	8001756 <HAL_RCC_OscConfig+0x7a>
 8001748:	4b84      	ldr	r3, [pc, #528]	; (800195c <HAL_RCC_OscConfig+0x280>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a83      	ldr	r2, [pc, #524]	; (800195c <HAL_RCC_OscConfig+0x280>)
 800174e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001752:	6013      	str	r3, [r2, #0]
 8001754:	e02e      	b.n	80017b4 <HAL_RCC_OscConfig+0xd8>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d10c      	bne.n	8001778 <HAL_RCC_OscConfig+0x9c>
 800175e:	4b7f      	ldr	r3, [pc, #508]	; (800195c <HAL_RCC_OscConfig+0x280>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a7e      	ldr	r2, [pc, #504]	; (800195c <HAL_RCC_OscConfig+0x280>)
 8001764:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001768:	6013      	str	r3, [r2, #0]
 800176a:	4b7c      	ldr	r3, [pc, #496]	; (800195c <HAL_RCC_OscConfig+0x280>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a7b      	ldr	r2, [pc, #492]	; (800195c <HAL_RCC_OscConfig+0x280>)
 8001770:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001774:	6013      	str	r3, [r2, #0]
 8001776:	e01d      	b.n	80017b4 <HAL_RCC_OscConfig+0xd8>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001780:	d10c      	bne.n	800179c <HAL_RCC_OscConfig+0xc0>
 8001782:	4b76      	ldr	r3, [pc, #472]	; (800195c <HAL_RCC_OscConfig+0x280>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a75      	ldr	r2, [pc, #468]	; (800195c <HAL_RCC_OscConfig+0x280>)
 8001788:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800178c:	6013      	str	r3, [r2, #0]
 800178e:	4b73      	ldr	r3, [pc, #460]	; (800195c <HAL_RCC_OscConfig+0x280>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a72      	ldr	r2, [pc, #456]	; (800195c <HAL_RCC_OscConfig+0x280>)
 8001794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001798:	6013      	str	r3, [r2, #0]
 800179a:	e00b      	b.n	80017b4 <HAL_RCC_OscConfig+0xd8>
 800179c:	4b6f      	ldr	r3, [pc, #444]	; (800195c <HAL_RCC_OscConfig+0x280>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a6e      	ldr	r2, [pc, #440]	; (800195c <HAL_RCC_OscConfig+0x280>)
 80017a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017a6:	6013      	str	r3, [r2, #0]
 80017a8:	4b6c      	ldr	r3, [pc, #432]	; (800195c <HAL_RCC_OscConfig+0x280>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a6b      	ldr	r2, [pc, #428]	; (800195c <HAL_RCC_OscConfig+0x280>)
 80017ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d013      	beq.n	80017e4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017bc:	f7ff fb08 	bl	8000dd0 <HAL_GetTick>
 80017c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017c2:	e008      	b.n	80017d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017c4:	f7ff fb04 	bl	8000dd0 <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b64      	cmp	r3, #100	; 0x64
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e229      	b.n	8001c2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017d6:	4b61      	ldr	r3, [pc, #388]	; (800195c <HAL_RCC_OscConfig+0x280>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d0f0      	beq.n	80017c4 <HAL_RCC_OscConfig+0xe8>
 80017e2:	e014      	b.n	800180e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e4:	f7ff faf4 	bl	8000dd0 <HAL_GetTick>
 80017e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ea:	e008      	b.n	80017fe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017ec:	f7ff faf0 	bl	8000dd0 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b64      	cmp	r3, #100	; 0x64
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e215      	b.n	8001c2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017fe:	4b57      	ldr	r3, [pc, #348]	; (800195c <HAL_RCC_OscConfig+0x280>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d1f0      	bne.n	80017ec <HAL_RCC_OscConfig+0x110>
 800180a:	e000      	b.n	800180e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800180c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	2b00      	cmp	r3, #0
 8001818:	d069      	beq.n	80018ee <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800181a:	4b50      	ldr	r3, [pc, #320]	; (800195c <HAL_RCC_OscConfig+0x280>)
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f003 030c 	and.w	r3, r3, #12
 8001822:	2b00      	cmp	r3, #0
 8001824:	d00b      	beq.n	800183e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001826:	4b4d      	ldr	r3, [pc, #308]	; (800195c <HAL_RCC_OscConfig+0x280>)
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	f003 030c 	and.w	r3, r3, #12
 800182e:	2b08      	cmp	r3, #8
 8001830:	d11c      	bne.n	800186c <HAL_RCC_OscConfig+0x190>
 8001832:	4b4a      	ldr	r3, [pc, #296]	; (800195c <HAL_RCC_OscConfig+0x280>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d116      	bne.n	800186c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800183e:	4b47      	ldr	r3, [pc, #284]	; (800195c <HAL_RCC_OscConfig+0x280>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	2b00      	cmp	r3, #0
 8001848:	d005      	beq.n	8001856 <HAL_RCC_OscConfig+0x17a>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	2b01      	cmp	r3, #1
 8001850:	d001      	beq.n	8001856 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e1e9      	b.n	8001c2a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001856:	4b41      	ldr	r3, [pc, #260]	; (800195c <HAL_RCC_OscConfig+0x280>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	691b      	ldr	r3, [r3, #16]
 8001862:	00db      	lsls	r3, r3, #3
 8001864:	493d      	ldr	r1, [pc, #244]	; (800195c <HAL_RCC_OscConfig+0x280>)
 8001866:	4313      	orrs	r3, r2
 8001868:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800186a:	e040      	b.n	80018ee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d023      	beq.n	80018bc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001874:	4b39      	ldr	r3, [pc, #228]	; (800195c <HAL_RCC_OscConfig+0x280>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a38      	ldr	r2, [pc, #224]	; (800195c <HAL_RCC_OscConfig+0x280>)
 800187a:	f043 0301 	orr.w	r3, r3, #1
 800187e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001880:	f7ff faa6 	bl	8000dd0 <HAL_GetTick>
 8001884:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001886:	e008      	b.n	800189a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001888:	f7ff faa2 	bl	8000dd0 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b02      	cmp	r3, #2
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e1c7      	b.n	8001c2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800189a:	4b30      	ldr	r3, [pc, #192]	; (800195c <HAL_RCC_OscConfig+0x280>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d0f0      	beq.n	8001888 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018a6:	4b2d      	ldr	r3, [pc, #180]	; (800195c <HAL_RCC_OscConfig+0x280>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	691b      	ldr	r3, [r3, #16]
 80018b2:	00db      	lsls	r3, r3, #3
 80018b4:	4929      	ldr	r1, [pc, #164]	; (800195c <HAL_RCC_OscConfig+0x280>)
 80018b6:	4313      	orrs	r3, r2
 80018b8:	600b      	str	r3, [r1, #0]
 80018ba:	e018      	b.n	80018ee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018bc:	4b27      	ldr	r3, [pc, #156]	; (800195c <HAL_RCC_OscConfig+0x280>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a26      	ldr	r2, [pc, #152]	; (800195c <HAL_RCC_OscConfig+0x280>)
 80018c2:	f023 0301 	bic.w	r3, r3, #1
 80018c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c8:	f7ff fa82 	bl	8000dd0 <HAL_GetTick>
 80018cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ce:	e008      	b.n	80018e2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018d0:	f7ff fa7e 	bl	8000dd0 <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e1a3      	b.n	8001c2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018e2:	4b1e      	ldr	r3, [pc, #120]	; (800195c <HAL_RCC_OscConfig+0x280>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d1f0      	bne.n	80018d0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0308 	and.w	r3, r3, #8
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d038      	beq.n	800196c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	695b      	ldr	r3, [r3, #20]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d019      	beq.n	8001936 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001902:	4b16      	ldr	r3, [pc, #88]	; (800195c <HAL_RCC_OscConfig+0x280>)
 8001904:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001906:	4a15      	ldr	r2, [pc, #84]	; (800195c <HAL_RCC_OscConfig+0x280>)
 8001908:	f043 0301 	orr.w	r3, r3, #1
 800190c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800190e:	f7ff fa5f 	bl	8000dd0 <HAL_GetTick>
 8001912:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001914:	e008      	b.n	8001928 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001916:	f7ff fa5b 	bl	8000dd0 <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	2b02      	cmp	r3, #2
 8001922:	d901      	bls.n	8001928 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e180      	b.n	8001c2a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001928:	4b0c      	ldr	r3, [pc, #48]	; (800195c <HAL_RCC_OscConfig+0x280>)
 800192a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800192c:	f003 0302 	and.w	r3, r3, #2
 8001930:	2b00      	cmp	r3, #0
 8001932:	d0f0      	beq.n	8001916 <HAL_RCC_OscConfig+0x23a>
 8001934:	e01a      	b.n	800196c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001936:	4b09      	ldr	r3, [pc, #36]	; (800195c <HAL_RCC_OscConfig+0x280>)
 8001938:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800193a:	4a08      	ldr	r2, [pc, #32]	; (800195c <HAL_RCC_OscConfig+0x280>)
 800193c:	f023 0301 	bic.w	r3, r3, #1
 8001940:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001942:	f7ff fa45 	bl	8000dd0 <HAL_GetTick>
 8001946:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001948:	e00a      	b.n	8001960 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800194a:	f7ff fa41 	bl	8000dd0 <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	2b02      	cmp	r3, #2
 8001956:	d903      	bls.n	8001960 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e166      	b.n	8001c2a <HAL_RCC_OscConfig+0x54e>
 800195c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001960:	4b92      	ldr	r3, [pc, #584]	; (8001bac <HAL_RCC_OscConfig+0x4d0>)
 8001962:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001964:	f003 0302 	and.w	r3, r3, #2
 8001968:	2b00      	cmp	r3, #0
 800196a:	d1ee      	bne.n	800194a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0304 	and.w	r3, r3, #4
 8001974:	2b00      	cmp	r3, #0
 8001976:	f000 80a4 	beq.w	8001ac2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800197a:	4b8c      	ldr	r3, [pc, #560]	; (8001bac <HAL_RCC_OscConfig+0x4d0>)
 800197c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d10d      	bne.n	80019a2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001986:	4b89      	ldr	r3, [pc, #548]	; (8001bac <HAL_RCC_OscConfig+0x4d0>)
 8001988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198a:	4a88      	ldr	r2, [pc, #544]	; (8001bac <HAL_RCC_OscConfig+0x4d0>)
 800198c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001990:	6413      	str	r3, [r2, #64]	; 0x40
 8001992:	4b86      	ldr	r3, [pc, #536]	; (8001bac <HAL_RCC_OscConfig+0x4d0>)
 8001994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800199a:	60bb      	str	r3, [r7, #8]
 800199c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800199e:	2301      	movs	r3, #1
 80019a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019a2:	4b83      	ldr	r3, [pc, #524]	; (8001bb0 <HAL_RCC_OscConfig+0x4d4>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d118      	bne.n	80019e0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80019ae:	4b80      	ldr	r3, [pc, #512]	; (8001bb0 <HAL_RCC_OscConfig+0x4d4>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a7f      	ldr	r2, [pc, #508]	; (8001bb0 <HAL_RCC_OscConfig+0x4d4>)
 80019b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019ba:	f7ff fa09 	bl	8000dd0 <HAL_GetTick>
 80019be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019c0:	e008      	b.n	80019d4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019c2:	f7ff fa05 	bl	8000dd0 <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	2b64      	cmp	r3, #100	; 0x64
 80019ce:	d901      	bls.n	80019d4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e12a      	b.n	8001c2a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019d4:	4b76      	ldr	r3, [pc, #472]	; (8001bb0 <HAL_RCC_OscConfig+0x4d4>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d0f0      	beq.n	80019c2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d106      	bne.n	80019f6 <HAL_RCC_OscConfig+0x31a>
 80019e8:	4b70      	ldr	r3, [pc, #448]	; (8001bac <HAL_RCC_OscConfig+0x4d0>)
 80019ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ec:	4a6f      	ldr	r2, [pc, #444]	; (8001bac <HAL_RCC_OscConfig+0x4d0>)
 80019ee:	f043 0301 	orr.w	r3, r3, #1
 80019f2:	6713      	str	r3, [r2, #112]	; 0x70
 80019f4:	e02d      	b.n	8001a52 <HAL_RCC_OscConfig+0x376>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d10c      	bne.n	8001a18 <HAL_RCC_OscConfig+0x33c>
 80019fe:	4b6b      	ldr	r3, [pc, #428]	; (8001bac <HAL_RCC_OscConfig+0x4d0>)
 8001a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a02:	4a6a      	ldr	r2, [pc, #424]	; (8001bac <HAL_RCC_OscConfig+0x4d0>)
 8001a04:	f023 0301 	bic.w	r3, r3, #1
 8001a08:	6713      	str	r3, [r2, #112]	; 0x70
 8001a0a:	4b68      	ldr	r3, [pc, #416]	; (8001bac <HAL_RCC_OscConfig+0x4d0>)
 8001a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a0e:	4a67      	ldr	r2, [pc, #412]	; (8001bac <HAL_RCC_OscConfig+0x4d0>)
 8001a10:	f023 0304 	bic.w	r3, r3, #4
 8001a14:	6713      	str	r3, [r2, #112]	; 0x70
 8001a16:	e01c      	b.n	8001a52 <HAL_RCC_OscConfig+0x376>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	2b05      	cmp	r3, #5
 8001a1e:	d10c      	bne.n	8001a3a <HAL_RCC_OscConfig+0x35e>
 8001a20:	4b62      	ldr	r3, [pc, #392]	; (8001bac <HAL_RCC_OscConfig+0x4d0>)
 8001a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a24:	4a61      	ldr	r2, [pc, #388]	; (8001bac <HAL_RCC_OscConfig+0x4d0>)
 8001a26:	f043 0304 	orr.w	r3, r3, #4
 8001a2a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a2c:	4b5f      	ldr	r3, [pc, #380]	; (8001bac <HAL_RCC_OscConfig+0x4d0>)
 8001a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a30:	4a5e      	ldr	r2, [pc, #376]	; (8001bac <HAL_RCC_OscConfig+0x4d0>)
 8001a32:	f043 0301 	orr.w	r3, r3, #1
 8001a36:	6713      	str	r3, [r2, #112]	; 0x70
 8001a38:	e00b      	b.n	8001a52 <HAL_RCC_OscConfig+0x376>
 8001a3a:	4b5c      	ldr	r3, [pc, #368]	; (8001bac <HAL_RCC_OscConfig+0x4d0>)
 8001a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a3e:	4a5b      	ldr	r2, [pc, #364]	; (8001bac <HAL_RCC_OscConfig+0x4d0>)
 8001a40:	f023 0301 	bic.w	r3, r3, #1
 8001a44:	6713      	str	r3, [r2, #112]	; 0x70
 8001a46:	4b59      	ldr	r3, [pc, #356]	; (8001bac <HAL_RCC_OscConfig+0x4d0>)
 8001a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a4a:	4a58      	ldr	r2, [pc, #352]	; (8001bac <HAL_RCC_OscConfig+0x4d0>)
 8001a4c:	f023 0304 	bic.w	r3, r3, #4
 8001a50:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d015      	beq.n	8001a86 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a5a:	f7ff f9b9 	bl	8000dd0 <HAL_GetTick>
 8001a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a60:	e00a      	b.n	8001a78 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a62:	f7ff f9b5 	bl	8000dd0 <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d901      	bls.n	8001a78 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e0d8      	b.n	8001c2a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a78:	4b4c      	ldr	r3, [pc, #304]	; (8001bac <HAL_RCC_OscConfig+0x4d0>)
 8001a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a7c:	f003 0302 	and.w	r3, r3, #2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d0ee      	beq.n	8001a62 <HAL_RCC_OscConfig+0x386>
 8001a84:	e014      	b.n	8001ab0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a86:	f7ff f9a3 	bl	8000dd0 <HAL_GetTick>
 8001a8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a8c:	e00a      	b.n	8001aa4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a8e:	f7ff f99f 	bl	8000dd0 <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d901      	bls.n	8001aa4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e0c2      	b.n	8001c2a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aa4:	4b41      	ldr	r3, [pc, #260]	; (8001bac <HAL_RCC_OscConfig+0x4d0>)
 8001aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aa8:	f003 0302 	and.w	r3, r3, #2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d1ee      	bne.n	8001a8e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ab0:	7dfb      	ldrb	r3, [r7, #23]
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d105      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ab6:	4b3d      	ldr	r3, [pc, #244]	; (8001bac <HAL_RCC_OscConfig+0x4d0>)
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aba:	4a3c      	ldr	r2, [pc, #240]	; (8001bac <HAL_RCC_OscConfig+0x4d0>)
 8001abc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ac0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	699b      	ldr	r3, [r3, #24]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	f000 80ae 	beq.w	8001c28 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001acc:	4b37      	ldr	r3, [pc, #220]	; (8001bac <HAL_RCC_OscConfig+0x4d0>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f003 030c 	and.w	r3, r3, #12
 8001ad4:	2b08      	cmp	r3, #8
 8001ad6:	d06d      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d14b      	bne.n	8001b78 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ae0:	4b32      	ldr	r3, [pc, #200]	; (8001bac <HAL_RCC_OscConfig+0x4d0>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a31      	ldr	r2, [pc, #196]	; (8001bac <HAL_RCC_OscConfig+0x4d0>)
 8001ae6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001aea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aec:	f7ff f970 	bl	8000dd0 <HAL_GetTick>
 8001af0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001af2:	e008      	b.n	8001b06 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001af4:	f7ff f96c 	bl	8000dd0 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e091      	b.n	8001c2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b06:	4b29      	ldr	r3, [pc, #164]	; (8001bac <HAL_RCC_OscConfig+0x4d0>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d1f0      	bne.n	8001af4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	69da      	ldr	r2, [r3, #28]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6a1b      	ldr	r3, [r3, #32]
 8001b1a:	431a      	orrs	r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b20:	019b      	lsls	r3, r3, #6
 8001b22:	431a      	orrs	r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b28:	085b      	lsrs	r3, r3, #1
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	041b      	lsls	r3, r3, #16
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b34:	061b      	lsls	r3, r3, #24
 8001b36:	431a      	orrs	r2, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3c:	071b      	lsls	r3, r3, #28
 8001b3e:	491b      	ldr	r1, [pc, #108]	; (8001bac <HAL_RCC_OscConfig+0x4d0>)
 8001b40:	4313      	orrs	r3, r2
 8001b42:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b44:	4b19      	ldr	r3, [pc, #100]	; (8001bac <HAL_RCC_OscConfig+0x4d0>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a18      	ldr	r2, [pc, #96]	; (8001bac <HAL_RCC_OscConfig+0x4d0>)
 8001b4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b50:	f7ff f93e 	bl	8000dd0 <HAL_GetTick>
 8001b54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b56:	e008      	b.n	8001b6a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b58:	f7ff f93a 	bl	8000dd0 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e05f      	b.n	8001c2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b6a:	4b10      	ldr	r3, [pc, #64]	; (8001bac <HAL_RCC_OscConfig+0x4d0>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d0f0      	beq.n	8001b58 <HAL_RCC_OscConfig+0x47c>
 8001b76:	e057      	b.n	8001c28 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b78:	4b0c      	ldr	r3, [pc, #48]	; (8001bac <HAL_RCC_OscConfig+0x4d0>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a0b      	ldr	r2, [pc, #44]	; (8001bac <HAL_RCC_OscConfig+0x4d0>)
 8001b7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b84:	f7ff f924 	bl	8000dd0 <HAL_GetTick>
 8001b88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b8a:	e008      	b.n	8001b9e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b8c:	f7ff f920 	bl	8000dd0 <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e045      	b.n	8001c2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b9e:	4b03      	ldr	r3, [pc, #12]	; (8001bac <HAL_RCC_OscConfig+0x4d0>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d1f0      	bne.n	8001b8c <HAL_RCC_OscConfig+0x4b0>
 8001baa:	e03d      	b.n	8001c28 <HAL_RCC_OscConfig+0x54c>
 8001bac:	40023800 	.word	0x40023800
 8001bb0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001bb4:	4b1f      	ldr	r3, [pc, #124]	; (8001c34 <HAL_RCC_OscConfig+0x558>)
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	699b      	ldr	r3, [r3, #24]
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d030      	beq.n	8001c24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d129      	bne.n	8001c24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d122      	bne.n	8001c24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bde:	68fa      	ldr	r2, [r7, #12]
 8001be0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001be4:	4013      	ands	r3, r2
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001bea:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d119      	bne.n	8001c24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bfa:	085b      	lsrs	r3, r3, #1
 8001bfc:	3b01      	subs	r3, #1
 8001bfe:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d10f      	bne.n	8001c24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c0e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d107      	bne.n	8001c24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d001      	beq.n	8001c28 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e000      	b.n	8001c2a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3718      	adds	r7, #24
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40023800 	.word	0x40023800

08001c38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001c42:	2300      	movs	r3, #0
 8001c44:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d101      	bne.n	8001c50 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e0d0      	b.n	8001df2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c50:	4b6a      	ldr	r3, [pc, #424]	; (8001dfc <HAL_RCC_ClockConfig+0x1c4>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 030f 	and.w	r3, r3, #15
 8001c58:	683a      	ldr	r2, [r7, #0]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d910      	bls.n	8001c80 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c5e:	4b67      	ldr	r3, [pc, #412]	; (8001dfc <HAL_RCC_ClockConfig+0x1c4>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f023 020f 	bic.w	r2, r3, #15
 8001c66:	4965      	ldr	r1, [pc, #404]	; (8001dfc <HAL_RCC_ClockConfig+0x1c4>)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c6e:	4b63      	ldr	r3, [pc, #396]	; (8001dfc <HAL_RCC_ClockConfig+0x1c4>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 030f 	and.w	r3, r3, #15
 8001c76:	683a      	ldr	r2, [r7, #0]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d001      	beq.n	8001c80 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e0b8      	b.n	8001df2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0302 	and.w	r3, r3, #2
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d020      	beq.n	8001cce <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0304 	and.w	r3, r3, #4
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d005      	beq.n	8001ca4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c98:	4b59      	ldr	r3, [pc, #356]	; (8001e00 <HAL_RCC_ClockConfig+0x1c8>)
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	4a58      	ldr	r2, [pc, #352]	; (8001e00 <HAL_RCC_ClockConfig+0x1c8>)
 8001c9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ca2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0308 	and.w	r3, r3, #8
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d005      	beq.n	8001cbc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cb0:	4b53      	ldr	r3, [pc, #332]	; (8001e00 <HAL_RCC_ClockConfig+0x1c8>)
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	4a52      	ldr	r2, [pc, #328]	; (8001e00 <HAL_RCC_ClockConfig+0x1c8>)
 8001cb6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001cba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cbc:	4b50      	ldr	r3, [pc, #320]	; (8001e00 <HAL_RCC_ClockConfig+0x1c8>)
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	494d      	ldr	r1, [pc, #308]	; (8001e00 <HAL_RCC_ClockConfig+0x1c8>)
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d040      	beq.n	8001d5c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d107      	bne.n	8001cf2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ce2:	4b47      	ldr	r3, [pc, #284]	; (8001e00 <HAL_RCC_ClockConfig+0x1c8>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d115      	bne.n	8001d1a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e07f      	b.n	8001df2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d107      	bne.n	8001d0a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cfa:	4b41      	ldr	r3, [pc, #260]	; (8001e00 <HAL_RCC_ClockConfig+0x1c8>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d109      	bne.n	8001d1a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e073      	b.n	8001df2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d0a:	4b3d      	ldr	r3, [pc, #244]	; (8001e00 <HAL_RCC_ClockConfig+0x1c8>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d101      	bne.n	8001d1a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e06b      	b.n	8001df2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d1a:	4b39      	ldr	r3, [pc, #228]	; (8001e00 <HAL_RCC_ClockConfig+0x1c8>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f023 0203 	bic.w	r2, r3, #3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	4936      	ldr	r1, [pc, #216]	; (8001e00 <HAL_RCC_ClockConfig+0x1c8>)
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d2c:	f7ff f850 	bl	8000dd0 <HAL_GetTick>
 8001d30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d32:	e00a      	b.n	8001d4a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d34:	f7ff f84c 	bl	8000dd0 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e053      	b.n	8001df2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d4a:	4b2d      	ldr	r3, [pc, #180]	; (8001e00 <HAL_RCC_ClockConfig+0x1c8>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f003 020c 	and.w	r2, r3, #12
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d1eb      	bne.n	8001d34 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d5c:	4b27      	ldr	r3, [pc, #156]	; (8001dfc <HAL_RCC_ClockConfig+0x1c4>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 030f 	and.w	r3, r3, #15
 8001d64:	683a      	ldr	r2, [r7, #0]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d210      	bcs.n	8001d8c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d6a:	4b24      	ldr	r3, [pc, #144]	; (8001dfc <HAL_RCC_ClockConfig+0x1c4>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f023 020f 	bic.w	r2, r3, #15
 8001d72:	4922      	ldr	r1, [pc, #136]	; (8001dfc <HAL_RCC_ClockConfig+0x1c4>)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d7a:	4b20      	ldr	r3, [pc, #128]	; (8001dfc <HAL_RCC_ClockConfig+0x1c4>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 030f 	and.w	r3, r3, #15
 8001d82:	683a      	ldr	r2, [r7, #0]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d001      	beq.n	8001d8c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e032      	b.n	8001df2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0304 	and.w	r3, r3, #4
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d008      	beq.n	8001daa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d98:	4b19      	ldr	r3, [pc, #100]	; (8001e00 <HAL_RCC_ClockConfig+0x1c8>)
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	4916      	ldr	r1, [pc, #88]	; (8001e00 <HAL_RCC_ClockConfig+0x1c8>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0308 	and.w	r3, r3, #8
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d009      	beq.n	8001dca <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001db6:	4b12      	ldr	r3, [pc, #72]	; (8001e00 <HAL_RCC_ClockConfig+0x1c8>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	691b      	ldr	r3, [r3, #16]
 8001dc2:	00db      	lsls	r3, r3, #3
 8001dc4:	490e      	ldr	r1, [pc, #56]	; (8001e00 <HAL_RCC_ClockConfig+0x1c8>)
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001dca:	f000 f821 	bl	8001e10 <HAL_RCC_GetSysClockFreq>
 8001dce:	4601      	mov	r1, r0
 8001dd0:	4b0b      	ldr	r3, [pc, #44]	; (8001e00 <HAL_RCC_ClockConfig+0x1c8>)
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	091b      	lsrs	r3, r3, #4
 8001dd6:	f003 030f 	and.w	r3, r3, #15
 8001dda:	4a0a      	ldr	r2, [pc, #40]	; (8001e04 <HAL_RCC_ClockConfig+0x1cc>)
 8001ddc:	5cd3      	ldrb	r3, [r2, r3]
 8001dde:	fa21 f303 	lsr.w	r3, r1, r3
 8001de2:	4a09      	ldr	r2, [pc, #36]	; (8001e08 <HAL_RCC_ClockConfig+0x1d0>)
 8001de4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001de6:	4b09      	ldr	r3, [pc, #36]	; (8001e0c <HAL_RCC_ClockConfig+0x1d4>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7fe ff18 	bl	8000c20 <HAL_InitTick>

  return HAL_OK;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3710      	adds	r7, #16
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40023c00 	.word	0x40023c00
 8001e00:	40023800 	.word	0x40023800
 8001e04:	08006b24 	.word	0x08006b24
 8001e08:	20000000 	.word	0x20000000
 8001e0c:	20000004 	.word	0x20000004

08001e10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e12:	b085      	sub	sp, #20
 8001e14:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001e16:	2300      	movs	r3, #0
 8001e18:	607b      	str	r3, [r7, #4]
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	60fb      	str	r3, [r7, #12]
 8001e1e:	2300      	movs	r3, #0
 8001e20:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001e22:	2300      	movs	r3, #0
 8001e24:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e26:	4b63      	ldr	r3, [pc, #396]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f003 030c 	and.w	r3, r3, #12
 8001e2e:	2b04      	cmp	r3, #4
 8001e30:	d007      	beq.n	8001e42 <HAL_RCC_GetSysClockFreq+0x32>
 8001e32:	2b08      	cmp	r3, #8
 8001e34:	d008      	beq.n	8001e48 <HAL_RCC_GetSysClockFreq+0x38>
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	f040 80b4 	bne.w	8001fa4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e3c:	4b5e      	ldr	r3, [pc, #376]	; (8001fb8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001e3e:	60bb      	str	r3, [r7, #8]
      break;
 8001e40:	e0b3      	b.n	8001faa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e42:	4b5e      	ldr	r3, [pc, #376]	; (8001fbc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001e44:	60bb      	str	r3, [r7, #8]
      break;
 8001e46:	e0b0      	b.n	8001faa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e48:	4b5a      	ldr	r3, [pc, #360]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e50:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001e52:	4b58      	ldr	r3, [pc, #352]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d04a      	beq.n	8001ef4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e5e:	4b55      	ldr	r3, [pc, #340]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	099b      	lsrs	r3, r3, #6
 8001e64:	f04f 0400 	mov.w	r4, #0
 8001e68:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001e6c:	f04f 0200 	mov.w	r2, #0
 8001e70:	ea03 0501 	and.w	r5, r3, r1
 8001e74:	ea04 0602 	and.w	r6, r4, r2
 8001e78:	4629      	mov	r1, r5
 8001e7a:	4632      	mov	r2, r6
 8001e7c:	f04f 0300 	mov.w	r3, #0
 8001e80:	f04f 0400 	mov.w	r4, #0
 8001e84:	0154      	lsls	r4, r2, #5
 8001e86:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001e8a:	014b      	lsls	r3, r1, #5
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	4622      	mov	r2, r4
 8001e90:	1b49      	subs	r1, r1, r5
 8001e92:	eb62 0206 	sbc.w	r2, r2, r6
 8001e96:	f04f 0300 	mov.w	r3, #0
 8001e9a:	f04f 0400 	mov.w	r4, #0
 8001e9e:	0194      	lsls	r4, r2, #6
 8001ea0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001ea4:	018b      	lsls	r3, r1, #6
 8001ea6:	1a5b      	subs	r3, r3, r1
 8001ea8:	eb64 0402 	sbc.w	r4, r4, r2
 8001eac:	f04f 0100 	mov.w	r1, #0
 8001eb0:	f04f 0200 	mov.w	r2, #0
 8001eb4:	00e2      	lsls	r2, r4, #3
 8001eb6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001eba:	00d9      	lsls	r1, r3, #3
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	4614      	mov	r4, r2
 8001ec0:	195b      	adds	r3, r3, r5
 8001ec2:	eb44 0406 	adc.w	r4, r4, r6
 8001ec6:	f04f 0100 	mov.w	r1, #0
 8001eca:	f04f 0200 	mov.w	r2, #0
 8001ece:	0262      	lsls	r2, r4, #9
 8001ed0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001ed4:	0259      	lsls	r1, r3, #9
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	4614      	mov	r4, r2
 8001eda:	4618      	mov	r0, r3
 8001edc:	4621      	mov	r1, r4
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f04f 0400 	mov.w	r4, #0
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	4623      	mov	r3, r4
 8001ee8:	f7fe f9aa 	bl	8000240 <__aeabi_uldivmod>
 8001eec:	4603      	mov	r3, r0
 8001eee:	460c      	mov	r4, r1
 8001ef0:	60fb      	str	r3, [r7, #12]
 8001ef2:	e049      	b.n	8001f88 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ef4:	4b2f      	ldr	r3, [pc, #188]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	099b      	lsrs	r3, r3, #6
 8001efa:	f04f 0400 	mov.w	r4, #0
 8001efe:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001f02:	f04f 0200 	mov.w	r2, #0
 8001f06:	ea03 0501 	and.w	r5, r3, r1
 8001f0a:	ea04 0602 	and.w	r6, r4, r2
 8001f0e:	4629      	mov	r1, r5
 8001f10:	4632      	mov	r2, r6
 8001f12:	f04f 0300 	mov.w	r3, #0
 8001f16:	f04f 0400 	mov.w	r4, #0
 8001f1a:	0154      	lsls	r4, r2, #5
 8001f1c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001f20:	014b      	lsls	r3, r1, #5
 8001f22:	4619      	mov	r1, r3
 8001f24:	4622      	mov	r2, r4
 8001f26:	1b49      	subs	r1, r1, r5
 8001f28:	eb62 0206 	sbc.w	r2, r2, r6
 8001f2c:	f04f 0300 	mov.w	r3, #0
 8001f30:	f04f 0400 	mov.w	r4, #0
 8001f34:	0194      	lsls	r4, r2, #6
 8001f36:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001f3a:	018b      	lsls	r3, r1, #6
 8001f3c:	1a5b      	subs	r3, r3, r1
 8001f3e:	eb64 0402 	sbc.w	r4, r4, r2
 8001f42:	f04f 0100 	mov.w	r1, #0
 8001f46:	f04f 0200 	mov.w	r2, #0
 8001f4a:	00e2      	lsls	r2, r4, #3
 8001f4c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001f50:	00d9      	lsls	r1, r3, #3
 8001f52:	460b      	mov	r3, r1
 8001f54:	4614      	mov	r4, r2
 8001f56:	195b      	adds	r3, r3, r5
 8001f58:	eb44 0406 	adc.w	r4, r4, r6
 8001f5c:	f04f 0100 	mov.w	r1, #0
 8001f60:	f04f 0200 	mov.w	r2, #0
 8001f64:	02a2      	lsls	r2, r4, #10
 8001f66:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001f6a:	0299      	lsls	r1, r3, #10
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	4614      	mov	r4, r2
 8001f70:	4618      	mov	r0, r3
 8001f72:	4621      	mov	r1, r4
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f04f 0400 	mov.w	r4, #0
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	4623      	mov	r3, r4
 8001f7e:	f7fe f95f 	bl	8000240 <__aeabi_uldivmod>
 8001f82:	4603      	mov	r3, r0
 8001f84:	460c      	mov	r4, r1
 8001f86:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001f88:	4b0a      	ldr	r3, [pc, #40]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	0c1b      	lsrs	r3, r3, #16
 8001f8e:	f003 0303 	and.w	r3, r3, #3
 8001f92:	3301      	adds	r3, #1
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8001f98:	68fa      	ldr	r2, [r7, #12]
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa0:	60bb      	str	r3, [r7, #8]
      break;
 8001fa2:	e002      	b.n	8001faa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001fa4:	4b04      	ldr	r3, [pc, #16]	; (8001fb8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001fa6:	60bb      	str	r3, [r7, #8]
      break;
 8001fa8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001faa:	68bb      	ldr	r3, [r7, #8]
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3714      	adds	r7, #20
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fb4:	40023800 	.word	0x40023800
 8001fb8:	00f42400 	.word	0x00f42400
 8001fbc:	007a1200 	.word	0x007a1200

08001fc0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fc4:	4b03      	ldr	r3, [pc, #12]	; (8001fd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	20000000 	.word	0x20000000

08001fd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001fdc:	f7ff fff0 	bl	8001fc0 <HAL_RCC_GetHCLKFreq>
 8001fe0:	4601      	mov	r1, r0
 8001fe2:	4b05      	ldr	r3, [pc, #20]	; (8001ff8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	0a9b      	lsrs	r3, r3, #10
 8001fe8:	f003 0307 	and.w	r3, r3, #7
 8001fec:	4a03      	ldr	r2, [pc, #12]	; (8001ffc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fee:	5cd3      	ldrb	r3, [r2, r3]
 8001ff0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	40023800 	.word	0x40023800
 8001ffc:	08006b34 	.word	0x08006b34

08002000 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002004:	f7ff ffdc 	bl	8001fc0 <HAL_RCC_GetHCLKFreq>
 8002008:	4601      	mov	r1, r0
 800200a:	4b05      	ldr	r3, [pc, #20]	; (8002020 <HAL_RCC_GetPCLK2Freq+0x20>)
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	0b5b      	lsrs	r3, r3, #13
 8002010:	f003 0307 	and.w	r3, r3, #7
 8002014:	4a03      	ldr	r2, [pc, #12]	; (8002024 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002016:	5cd3      	ldrb	r3, [r2, r3]
 8002018:	fa21 f303 	lsr.w	r3, r1, r3
}
 800201c:	4618      	mov	r0, r3
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40023800 	.word	0x40023800
 8002024:	08006b34 	.word	0x08006b34

08002028 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	220f      	movs	r2, #15
 8002036:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002038:	4b12      	ldr	r3, [pc, #72]	; (8002084 <HAL_RCC_GetClockConfig+0x5c>)
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	f003 0203 	and.w	r2, r3, #3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002044:	4b0f      	ldr	r3, [pc, #60]	; (8002084 <HAL_RCC_GetClockConfig+0x5c>)
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002050:	4b0c      	ldr	r3, [pc, #48]	; (8002084 <HAL_RCC_GetClockConfig+0x5c>)
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800205c:	4b09      	ldr	r3, [pc, #36]	; (8002084 <HAL_RCC_GetClockConfig+0x5c>)
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	08db      	lsrs	r3, r3, #3
 8002062:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800206a:	4b07      	ldr	r3, [pc, #28]	; (8002088 <HAL_RCC_GetClockConfig+0x60>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 020f 	and.w	r2, r3, #15
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	601a      	str	r2, [r3, #0]
}
 8002076:	bf00      	nop
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	40023800 	.word	0x40023800
 8002088:	40023c00 	.word	0x40023c00

0800208c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b088      	sub	sp, #32
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002094:	2300      	movs	r3, #0
 8002096:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002098:	2300      	movs	r3, #0
 800209a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800209c:	2300      	movs	r3, #0
 800209e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80020a0:	2300      	movs	r3, #0
 80020a2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80020a4:	2300      	movs	r3, #0
 80020a6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0301 	and.w	r3, r3, #1
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d012      	beq.n	80020da <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80020b4:	4b69      	ldr	r3, [pc, #420]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	4a68      	ldr	r2, [pc, #416]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020ba:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80020be:	6093      	str	r3, [r2, #8]
 80020c0:	4b66      	ldr	r3, [pc, #408]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020c2:	689a      	ldr	r2, [r3, #8]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020c8:	4964      	ldr	r1, [pc, #400]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020ca:	4313      	orrs	r3, r2
 80020cc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d101      	bne.n	80020da <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80020d6:	2301      	movs	r3, #1
 80020d8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d017      	beq.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80020e6:	4b5d      	ldr	r3, [pc, #372]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020f4:	4959      	ldr	r1, [pc, #356]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002100:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002104:	d101      	bne.n	800210a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002106:	2301      	movs	r3, #1
 8002108:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002112:	2301      	movs	r3, #1
 8002114:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d017      	beq.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002122:	4b4e      	ldr	r3, [pc, #312]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002124:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002128:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002130:	494a      	ldr	r1, [pc, #296]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002132:	4313      	orrs	r3, r2
 8002134:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002140:	d101      	bne.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002142:	2301      	movs	r3, #1
 8002144:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214a:	2b00      	cmp	r3, #0
 800214c:	d101      	bne.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800214e:	2301      	movs	r3, #1
 8002150:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800215e:	2301      	movs	r3, #1
 8002160:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0320 	and.w	r3, r3, #32
 800216a:	2b00      	cmp	r3, #0
 800216c:	f000 808b 	beq.w	8002286 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002170:	4b3a      	ldr	r3, [pc, #232]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002174:	4a39      	ldr	r2, [pc, #228]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002176:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800217a:	6413      	str	r3, [r2, #64]	; 0x40
 800217c:	4b37      	ldr	r3, [pc, #220]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800217e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002180:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002184:	60bb      	str	r3, [r7, #8]
 8002186:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002188:	4b35      	ldr	r3, [pc, #212]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a34      	ldr	r2, [pc, #208]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800218e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002192:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002194:	f7fe fe1c 	bl	8000dd0 <HAL_GetTick>
 8002198:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800219a:	e008      	b.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800219c:	f7fe fe18 	bl	8000dd0 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b64      	cmp	r3, #100	; 0x64
 80021a8:	d901      	bls.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e38d      	b.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80021ae:	4b2c      	ldr	r3, [pc, #176]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d0f0      	beq.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80021ba:	4b28      	ldr	r3, [pc, #160]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021c2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d035      	beq.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021d2:	693a      	ldr	r2, [r7, #16]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d02e      	beq.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80021d8:	4b20      	ldr	r3, [pc, #128]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021e0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80021e2:	4b1e      	ldr	r3, [pc, #120]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021e6:	4a1d      	ldr	r2, [pc, #116]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021ec:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80021ee:	4b1b      	ldr	r3, [pc, #108]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f2:	4a1a      	ldr	r2, [pc, #104]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021f8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80021fa:	4a18      	ldr	r2, [pc, #96]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002200:	4b16      	ldr	r3, [pc, #88]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002204:	f003 0301 	and.w	r3, r3, #1
 8002208:	2b01      	cmp	r3, #1
 800220a:	d114      	bne.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800220c:	f7fe fde0 	bl	8000dd0 <HAL_GetTick>
 8002210:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002212:	e00a      	b.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002214:	f7fe fddc 	bl	8000dd0 <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002222:	4293      	cmp	r3, r2
 8002224:	d901      	bls.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e34f      	b.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800222a:	4b0c      	ldr	r3, [pc, #48]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800222c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	2b00      	cmp	r3, #0
 8002234:	d0ee      	beq.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800223e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002242:	d111      	bne.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002244:	4b05      	ldr	r3, [pc, #20]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002250:	4b04      	ldr	r3, [pc, #16]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002252:	400b      	ands	r3, r1
 8002254:	4901      	ldr	r1, [pc, #4]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002256:	4313      	orrs	r3, r2
 8002258:	608b      	str	r3, [r1, #8]
 800225a:	e00b      	b.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800225c:	40023800 	.word	0x40023800
 8002260:	40007000 	.word	0x40007000
 8002264:	0ffffcff 	.word	0x0ffffcff
 8002268:	4bb3      	ldr	r3, [pc, #716]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	4ab2      	ldr	r2, [pc, #712]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800226e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002272:	6093      	str	r3, [r2, #8]
 8002274:	4bb0      	ldr	r3, [pc, #704]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002276:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002280:	49ad      	ldr	r1, [pc, #692]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002282:	4313      	orrs	r3, r2
 8002284:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0310 	and.w	r3, r3, #16
 800228e:	2b00      	cmp	r3, #0
 8002290:	d010      	beq.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002292:	4ba9      	ldr	r3, [pc, #676]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002294:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002298:	4aa7      	ldr	r2, [pc, #668]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800229a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800229e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80022a2:	4ba5      	ldr	r3, [pc, #660]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022a4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ac:	49a2      	ldr	r1, [pc, #648]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022ae:	4313      	orrs	r3, r2
 80022b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d00a      	beq.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022c0:	4b9d      	ldr	r3, [pc, #628]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022c6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022ce:	499a      	ldr	r1, [pc, #616]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d00a      	beq.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80022e2:	4b95      	ldr	r3, [pc, #596]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80022f0:	4991      	ldr	r1, [pc, #580]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022f2:	4313      	orrs	r3, r2
 80022f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d00a      	beq.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002304:	4b8c      	ldr	r3, [pc, #560]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800230a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002312:	4989      	ldr	r1, [pc, #548]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002314:	4313      	orrs	r3, r2
 8002316:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d00a      	beq.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002326:	4b84      	ldr	r3, [pc, #528]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800232c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002334:	4980      	ldr	r1, [pc, #512]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002336:	4313      	orrs	r3, r2
 8002338:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002344:	2b00      	cmp	r3, #0
 8002346:	d00a      	beq.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002348:	4b7b      	ldr	r3, [pc, #492]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800234a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800234e:	f023 0203 	bic.w	r2, r3, #3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002356:	4978      	ldr	r1, [pc, #480]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002358:	4313      	orrs	r3, r2
 800235a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002366:	2b00      	cmp	r3, #0
 8002368:	d00a      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800236a:	4b73      	ldr	r3, [pc, #460]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800236c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002370:	f023 020c 	bic.w	r2, r3, #12
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002378:	496f      	ldr	r1, [pc, #444]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800237a:	4313      	orrs	r3, r2
 800237c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002388:	2b00      	cmp	r3, #0
 800238a:	d00a      	beq.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800238c:	4b6a      	ldr	r3, [pc, #424]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800238e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002392:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800239a:	4967      	ldr	r1, [pc, #412]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800239c:	4313      	orrs	r3, r2
 800239e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d00a      	beq.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80023ae:	4b62      	ldr	r3, [pc, #392]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023bc:	495e      	ldr	r1, [pc, #376]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d00a      	beq.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80023d0:	4b59      	ldr	r3, [pc, #356]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023de:	4956      	ldr	r1, [pc, #344]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023e0:	4313      	orrs	r3, r2
 80023e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d00a      	beq.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80023f2:	4b51      	ldr	r3, [pc, #324]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002400:	494d      	ldr	r1, [pc, #308]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002402:	4313      	orrs	r3, r2
 8002404:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d00a      	beq.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002414:	4b48      	ldr	r3, [pc, #288]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800241a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002422:	4945      	ldr	r1, [pc, #276]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002424:	4313      	orrs	r3, r2
 8002426:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d00a      	beq.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002436:	4b40      	ldr	r3, [pc, #256]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800243c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002444:	493c      	ldr	r1, [pc, #240]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002446:	4313      	orrs	r3, r2
 8002448:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d00a      	beq.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002458:	4b37      	ldr	r3, [pc, #220]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800245a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800245e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002466:	4934      	ldr	r1, [pc, #208]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002468:	4313      	orrs	r3, r2
 800246a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d011      	beq.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800247a:	4b2f      	ldr	r3, [pc, #188]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800247c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002480:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002488:	492b      	ldr	r1, [pc, #172]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800248a:	4313      	orrs	r3, r2
 800248c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002494:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002498:	d101      	bne.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800249a:	2301      	movs	r3, #1
 800249c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0308 	and.w	r3, r3, #8
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80024aa:	2301      	movs	r3, #1
 80024ac:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d00a      	beq.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80024ba:	4b1f      	ldr	r3, [pc, #124]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024c0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024c8:	491b      	ldr	r1, [pc, #108]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d00b      	beq.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80024dc:	4b16      	ldr	r3, [pc, #88]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024e2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024ec:	4912      	ldr	r1, [pc, #72]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d00b      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002500:	4b0d      	ldr	r3, [pc, #52]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002506:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002510:	4909      	ldr	r1, [pc, #36]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002512:	4313      	orrs	r3, r2
 8002514:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d00f      	beq.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002524:	4b04      	ldr	r3, [pc, #16]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002526:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800252a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002534:	e002      	b.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002536:	bf00      	nop
 8002538:	40023800 	.word	0x40023800
 800253c:	4985      	ldr	r1, [pc, #532]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800253e:	4313      	orrs	r3, r2
 8002540:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d00b      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002550:	4b80      	ldr	r3, [pc, #512]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002552:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002556:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002560:	497c      	ldr	r1, [pc, #496]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002562:	4313      	orrs	r3, r2
 8002564:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d005      	beq.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002576:	f040 80d6 	bne.w	8002726 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800257a:	4b76      	ldr	r3, [pc, #472]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a75      	ldr	r2, [pc, #468]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002580:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002584:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002586:	f7fe fc23 	bl	8000dd0 <HAL_GetTick>
 800258a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800258c:	e008      	b.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800258e:	f7fe fc1f 	bl	8000dd0 <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	2b64      	cmp	r3, #100	; 0x64
 800259a:	d901      	bls.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800259c:	2303      	movs	r3, #3
 800259e:	e194      	b.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80025a0:	4b6c      	ldr	r3, [pc, #432]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d1f0      	bne.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0301 	and.w	r3, r3, #1
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d021      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x570>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d11d      	bne.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80025c0:	4b64      	ldr	r3, [pc, #400]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80025c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025c6:	0c1b      	lsrs	r3, r3, #16
 80025c8:	f003 0303 	and.w	r3, r3, #3
 80025cc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80025ce:	4b61      	ldr	r3, [pc, #388]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80025d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025d4:	0e1b      	lsrs	r3, r3, #24
 80025d6:	f003 030f 	and.w	r3, r3, #15
 80025da:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	019a      	lsls	r2, r3, #6
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	041b      	lsls	r3, r3, #16
 80025e6:	431a      	orrs	r2, r3
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	061b      	lsls	r3, r3, #24
 80025ec:	431a      	orrs	r2, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	071b      	lsls	r3, r3, #28
 80025f4:	4957      	ldr	r1, [pc, #348]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d004      	beq.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800260c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002610:	d00a      	beq.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800261a:	2b00      	cmp	r3, #0
 800261c:	d02e      	beq.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002622:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002626:	d129      	bne.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002628:	4b4a      	ldr	r3, [pc, #296]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800262a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800262e:	0c1b      	lsrs	r3, r3, #16
 8002630:	f003 0303 	and.w	r3, r3, #3
 8002634:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002636:	4b47      	ldr	r3, [pc, #284]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002638:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800263c:	0f1b      	lsrs	r3, r3, #28
 800263e:	f003 0307 	and.w	r3, r3, #7
 8002642:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	019a      	lsls	r2, r3, #6
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	041b      	lsls	r3, r3, #16
 800264e:	431a      	orrs	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	061b      	lsls	r3, r3, #24
 8002656:	431a      	orrs	r2, r3
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	071b      	lsls	r3, r3, #28
 800265c:	493d      	ldr	r1, [pc, #244]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800265e:	4313      	orrs	r3, r2
 8002660:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002664:	4b3b      	ldr	r3, [pc, #236]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002666:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800266a:	f023 021f 	bic.w	r2, r3, #31
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002672:	3b01      	subs	r3, #1
 8002674:	4937      	ldr	r1, [pc, #220]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002676:	4313      	orrs	r3, r2
 8002678:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d01d      	beq.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002688:	4b32      	ldr	r3, [pc, #200]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800268a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800268e:	0e1b      	lsrs	r3, r3, #24
 8002690:	f003 030f 	and.w	r3, r3, #15
 8002694:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002696:	4b2f      	ldr	r3, [pc, #188]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002698:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800269c:	0f1b      	lsrs	r3, r3, #28
 800269e:	f003 0307 	and.w	r3, r3, #7
 80026a2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	019a      	lsls	r2, r3, #6
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	041b      	lsls	r3, r3, #16
 80026b0:	431a      	orrs	r2, r3
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	061b      	lsls	r3, r3, #24
 80026b6:	431a      	orrs	r2, r3
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	071b      	lsls	r3, r3, #28
 80026bc:	4925      	ldr	r1, [pc, #148]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d011      	beq.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	019a      	lsls	r2, r3, #6
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	041b      	lsls	r3, r3, #16
 80026dc:	431a      	orrs	r2, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	061b      	lsls	r3, r3, #24
 80026e4:	431a      	orrs	r2, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	071b      	lsls	r3, r3, #28
 80026ec:	4919      	ldr	r1, [pc, #100]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80026f4:	4b17      	ldr	r3, [pc, #92]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a16      	ldr	r2, [pc, #88]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80026fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80026fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002700:	f7fe fb66 	bl	8000dd0 <HAL_GetTick>
 8002704:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002706:	e008      	b.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002708:	f7fe fb62 	bl	8000dd0 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b64      	cmp	r3, #100	; 0x64
 8002714:	d901      	bls.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e0d7      	b.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800271a:	4b0e      	ldr	r3, [pc, #56]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d0f0      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	2b01      	cmp	r3, #1
 800272a:	f040 80cd 	bne.w	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800272e:	4b09      	ldr	r3, [pc, #36]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a08      	ldr	r2, [pc, #32]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002734:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002738:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800273a:	f7fe fb49 	bl	8000dd0 <HAL_GetTick>
 800273e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002740:	e00a      	b.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002742:	f7fe fb45 	bl	8000dd0 <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	2b64      	cmp	r3, #100	; 0x64
 800274e:	d903      	bls.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e0ba      	b.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8002754:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002758:	4b5e      	ldr	r3, [pc, #376]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002760:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002764:	d0ed      	beq.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d003      	beq.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002776:	2b00      	cmp	r3, #0
 8002778:	d009      	beq.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002782:	2b00      	cmp	r3, #0
 8002784:	d02e      	beq.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278a:	2b00      	cmp	r3, #0
 800278c:	d12a      	bne.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800278e:	4b51      	ldr	r3, [pc, #324]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002790:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002794:	0c1b      	lsrs	r3, r3, #16
 8002796:	f003 0303 	and.w	r3, r3, #3
 800279a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800279c:	4b4d      	ldr	r3, [pc, #308]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800279e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a2:	0f1b      	lsrs	r3, r3, #28
 80027a4:	f003 0307 	and.w	r3, r3, #7
 80027a8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	019a      	lsls	r2, r3, #6
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	041b      	lsls	r3, r3, #16
 80027b4:	431a      	orrs	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	699b      	ldr	r3, [r3, #24]
 80027ba:	061b      	lsls	r3, r3, #24
 80027bc:	431a      	orrs	r2, r3
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	071b      	lsls	r3, r3, #28
 80027c2:	4944      	ldr	r1, [pc, #272]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80027ca:	4b42      	ldr	r3, [pc, #264]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80027cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027d0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d8:	3b01      	subs	r3, #1
 80027da:	021b      	lsls	r3, r3, #8
 80027dc:	493d      	ldr	r1, [pc, #244]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d022      	beq.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027f8:	d11d      	bne.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80027fa:	4b36      	ldr	r3, [pc, #216]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80027fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002800:	0e1b      	lsrs	r3, r3, #24
 8002802:	f003 030f 	and.w	r3, r3, #15
 8002806:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002808:	4b32      	ldr	r3, [pc, #200]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800280a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800280e:	0f1b      	lsrs	r3, r3, #28
 8002810:	f003 0307 	and.w	r3, r3, #7
 8002814:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	695b      	ldr	r3, [r3, #20]
 800281a:	019a      	lsls	r2, r3, #6
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a1b      	ldr	r3, [r3, #32]
 8002820:	041b      	lsls	r3, r3, #16
 8002822:	431a      	orrs	r2, r3
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	061b      	lsls	r3, r3, #24
 8002828:	431a      	orrs	r2, r3
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	071b      	lsls	r3, r3, #28
 800282e:	4929      	ldr	r1, [pc, #164]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002830:	4313      	orrs	r3, r2
 8002832:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0308 	and.w	r3, r3, #8
 800283e:	2b00      	cmp	r3, #0
 8002840:	d028      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002842:	4b24      	ldr	r3, [pc, #144]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002848:	0e1b      	lsrs	r3, r3, #24
 800284a:	f003 030f 	and.w	r3, r3, #15
 800284e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002850:	4b20      	ldr	r3, [pc, #128]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002856:	0c1b      	lsrs	r3, r3, #16
 8002858:	f003 0303 	and.w	r3, r3, #3
 800285c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	695b      	ldr	r3, [r3, #20]
 8002862:	019a      	lsls	r2, r3, #6
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	041b      	lsls	r3, r3, #16
 8002868:	431a      	orrs	r2, r3
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	061b      	lsls	r3, r3, #24
 800286e:	431a      	orrs	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	69db      	ldr	r3, [r3, #28]
 8002874:	071b      	lsls	r3, r3, #28
 8002876:	4917      	ldr	r1, [pc, #92]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002878:	4313      	orrs	r3, r2
 800287a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800287e:	4b15      	ldr	r3, [pc, #84]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002880:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002884:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800288c:	4911      	ldr	r1, [pc, #68]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800288e:	4313      	orrs	r3, r2
 8002890:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002894:	4b0f      	ldr	r3, [pc, #60]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a0e      	ldr	r2, [pc, #56]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800289a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800289e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028a0:	f7fe fa96 	bl	8000dd0 <HAL_GetTick>
 80028a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80028a6:	e008      	b.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80028a8:	f7fe fa92 	bl	8000dd0 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b64      	cmp	r3, #100	; 0x64
 80028b4:	d901      	bls.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e007      	b.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80028ba:	4b06      	ldr	r3, [pc, #24]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028c6:	d1ef      	bne.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3720      	adds	r7, #32
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	40023800 	.word	0x40023800

080028d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d101      	bne.n	80028ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e01d      	b.n	8002926 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d106      	bne.n	8002904 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f000 f815 	bl	800292e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2202      	movs	r2, #2
 8002908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	3304      	adds	r3, #4
 8002914:	4619      	mov	r1, r3
 8002916:	4610      	mov	r0, r2
 8002918:	f000 f986 	bl	8002c28 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	3708      	adds	r7, #8
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800292e:	b480      	push	{r7}
 8002930:	b083      	sub	sp, #12
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002936:	bf00      	nop
 8002938:	370c      	adds	r7, #12
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
	...

08002944 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	68da      	ldr	r2, [r3, #12]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f042 0201 	orr.w	r2, r2, #1
 800295a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	689a      	ldr	r2, [r3, #8]
 8002962:	4b0c      	ldr	r3, [pc, #48]	; (8002994 <HAL_TIM_Base_Start_IT+0x50>)
 8002964:	4013      	ands	r3, r2
 8002966:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2b06      	cmp	r3, #6
 800296c:	d00b      	beq.n	8002986 <HAL_TIM_Base_Start_IT+0x42>
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002974:	d007      	beq.n	8002986 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f042 0201 	orr.w	r2, r2, #1
 8002984:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002986:	2300      	movs	r3, #0
}
 8002988:	4618      	mov	r0, r3
 800298a:	3714      	adds	r7, #20
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr
 8002994:	00010007 	.word	0x00010007

08002998 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d122      	bne.n	80029f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	f003 0302 	and.w	r3, r3, #2
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d11b      	bne.n	80029f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f06f 0202 	mvn.w	r2, #2
 80029c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2201      	movs	r2, #1
 80029ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	f003 0303 	and.w	r3, r3, #3
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d003      	beq.n	80029e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f000 f905 	bl	8002bea <HAL_TIM_IC_CaptureCallback>
 80029e0:	e005      	b.n	80029ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f000 f8f7 	bl	8002bd6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f000 f908 	bl	8002bfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	691b      	ldr	r3, [r3, #16]
 80029fa:	f003 0304 	and.w	r3, r3, #4
 80029fe:	2b04      	cmp	r3, #4
 8002a00:	d122      	bne.n	8002a48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	f003 0304 	and.w	r3, r3, #4
 8002a0c:	2b04      	cmp	r3, #4
 8002a0e:	d11b      	bne.n	8002a48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f06f 0204 	mvn.w	r2, #4
 8002a18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2202      	movs	r2, #2
 8002a1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	699b      	ldr	r3, [r3, #24]
 8002a26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d003      	beq.n	8002a36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f000 f8db 	bl	8002bea <HAL_TIM_IC_CaptureCallback>
 8002a34:	e005      	b.n	8002a42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f000 f8cd 	bl	8002bd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f000 f8de 	bl	8002bfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	f003 0308 	and.w	r3, r3, #8
 8002a52:	2b08      	cmp	r3, #8
 8002a54:	d122      	bne.n	8002a9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	f003 0308 	and.w	r3, r3, #8
 8002a60:	2b08      	cmp	r3, #8
 8002a62:	d11b      	bne.n	8002a9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f06f 0208 	mvn.w	r2, #8
 8002a6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2204      	movs	r2, #4
 8002a72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	69db      	ldr	r3, [r3, #28]
 8002a7a:	f003 0303 	and.w	r3, r3, #3
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d003      	beq.n	8002a8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 f8b1 	bl	8002bea <HAL_TIM_IC_CaptureCallback>
 8002a88:	e005      	b.n	8002a96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f000 f8a3 	bl	8002bd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f000 f8b4 	bl	8002bfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	691b      	ldr	r3, [r3, #16]
 8002aa2:	f003 0310 	and.w	r3, r3, #16
 8002aa6:	2b10      	cmp	r3, #16
 8002aa8:	d122      	bne.n	8002af0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	f003 0310 	and.w	r3, r3, #16
 8002ab4:	2b10      	cmp	r3, #16
 8002ab6:	d11b      	bne.n	8002af0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f06f 0210 	mvn.w	r2, #16
 8002ac0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2208      	movs	r2, #8
 8002ac6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	69db      	ldr	r3, [r3, #28]
 8002ace:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d003      	beq.n	8002ade <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 f887 	bl	8002bea <HAL_TIM_IC_CaptureCallback>
 8002adc:	e005      	b.n	8002aea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 f879 	bl	8002bd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f000 f88a 	bl	8002bfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	691b      	ldr	r3, [r3, #16]
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d10e      	bne.n	8002b1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	f003 0301 	and.w	r3, r3, #1
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d107      	bne.n	8002b1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f06f 0201 	mvn.w	r2, #1
 8002b14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f7fd ffa4 	bl	8000a64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b26:	2b80      	cmp	r3, #128	; 0x80
 8002b28:	d10e      	bne.n	8002b48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b34:	2b80      	cmp	r3, #128	; 0x80
 8002b36:	d107      	bne.n	8002b48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 f91a 	bl	8002d7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b56:	d10e      	bne.n	8002b76 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b62:	2b80      	cmp	r3, #128	; 0x80
 8002b64:	d107      	bne.n	8002b76 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002b6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f000 f90d 	bl	8002d90 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	691b      	ldr	r3, [r3, #16]
 8002b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b80:	2b40      	cmp	r3, #64	; 0x40
 8002b82:	d10e      	bne.n	8002ba2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b8e:	2b40      	cmp	r3, #64	; 0x40
 8002b90:	d107      	bne.n	8002ba2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f000 f838 	bl	8002c12 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	691b      	ldr	r3, [r3, #16]
 8002ba8:	f003 0320 	and.w	r3, r3, #32
 8002bac:	2b20      	cmp	r3, #32
 8002bae:	d10e      	bne.n	8002bce <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	f003 0320 	and.w	r3, r3, #32
 8002bba:	2b20      	cmp	r3, #32
 8002bbc:	d107      	bne.n	8002bce <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f06f 0220 	mvn.w	r2, #32
 8002bc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f000 f8cd 	bl	8002d68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bce:	bf00      	nop
 8002bd0:	3708      	adds	r7, #8
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bd6:	b480      	push	{r7}
 8002bd8:	b083      	sub	sp, #12
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002bde:	bf00      	nop
 8002be0:	370c      	adds	r7, #12
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr

08002bea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002bea:	b480      	push	{r7}
 8002bec:	b083      	sub	sp, #12
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002bf2:	bf00      	nop
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr

08002bfe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	b083      	sub	sp, #12
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c06:	bf00      	nop
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr

08002c12 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c12:	b480      	push	{r7}
 8002c14:	b083      	sub	sp, #12
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c1a:	bf00      	nop
 8002c1c:	370c      	adds	r7, #12
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
	...

08002c28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b085      	sub	sp, #20
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4a40      	ldr	r2, [pc, #256]	; (8002d3c <TIM_Base_SetConfig+0x114>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d013      	beq.n	8002c68 <TIM_Base_SetConfig+0x40>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c46:	d00f      	beq.n	8002c68 <TIM_Base_SetConfig+0x40>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	4a3d      	ldr	r2, [pc, #244]	; (8002d40 <TIM_Base_SetConfig+0x118>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d00b      	beq.n	8002c68 <TIM_Base_SetConfig+0x40>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	4a3c      	ldr	r2, [pc, #240]	; (8002d44 <TIM_Base_SetConfig+0x11c>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d007      	beq.n	8002c68 <TIM_Base_SetConfig+0x40>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	4a3b      	ldr	r2, [pc, #236]	; (8002d48 <TIM_Base_SetConfig+0x120>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d003      	beq.n	8002c68 <TIM_Base_SetConfig+0x40>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	4a3a      	ldr	r2, [pc, #232]	; (8002d4c <TIM_Base_SetConfig+0x124>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d108      	bne.n	8002c7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	68fa      	ldr	r2, [r7, #12]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a2f      	ldr	r2, [pc, #188]	; (8002d3c <TIM_Base_SetConfig+0x114>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d02b      	beq.n	8002cda <TIM_Base_SetConfig+0xb2>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c88:	d027      	beq.n	8002cda <TIM_Base_SetConfig+0xb2>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a2c      	ldr	r2, [pc, #176]	; (8002d40 <TIM_Base_SetConfig+0x118>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d023      	beq.n	8002cda <TIM_Base_SetConfig+0xb2>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a2b      	ldr	r2, [pc, #172]	; (8002d44 <TIM_Base_SetConfig+0x11c>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d01f      	beq.n	8002cda <TIM_Base_SetConfig+0xb2>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a2a      	ldr	r2, [pc, #168]	; (8002d48 <TIM_Base_SetConfig+0x120>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d01b      	beq.n	8002cda <TIM_Base_SetConfig+0xb2>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a29      	ldr	r2, [pc, #164]	; (8002d4c <TIM_Base_SetConfig+0x124>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d017      	beq.n	8002cda <TIM_Base_SetConfig+0xb2>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a28      	ldr	r2, [pc, #160]	; (8002d50 <TIM_Base_SetConfig+0x128>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d013      	beq.n	8002cda <TIM_Base_SetConfig+0xb2>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a27      	ldr	r2, [pc, #156]	; (8002d54 <TIM_Base_SetConfig+0x12c>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d00f      	beq.n	8002cda <TIM_Base_SetConfig+0xb2>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a26      	ldr	r2, [pc, #152]	; (8002d58 <TIM_Base_SetConfig+0x130>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d00b      	beq.n	8002cda <TIM_Base_SetConfig+0xb2>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a25      	ldr	r2, [pc, #148]	; (8002d5c <TIM_Base_SetConfig+0x134>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d007      	beq.n	8002cda <TIM_Base_SetConfig+0xb2>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a24      	ldr	r2, [pc, #144]	; (8002d60 <TIM_Base_SetConfig+0x138>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d003      	beq.n	8002cda <TIM_Base_SetConfig+0xb2>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a23      	ldr	r2, [pc, #140]	; (8002d64 <TIM_Base_SetConfig+0x13c>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d108      	bne.n	8002cec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ce0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	695b      	ldr	r3, [r3, #20]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	68fa      	ldr	r2, [r7, #12]
 8002cfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	689a      	ldr	r2, [r3, #8]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4a0a      	ldr	r2, [pc, #40]	; (8002d3c <TIM_Base_SetConfig+0x114>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d003      	beq.n	8002d20 <TIM_Base_SetConfig+0xf8>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	4a0c      	ldr	r2, [pc, #48]	; (8002d4c <TIM_Base_SetConfig+0x124>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d103      	bne.n	8002d28 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	691a      	ldr	r2, [r3, #16]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	615a      	str	r2, [r3, #20]
}
 8002d2e:	bf00      	nop
 8002d30:	3714      	adds	r7, #20
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	40010000 	.word	0x40010000
 8002d40:	40000400 	.word	0x40000400
 8002d44:	40000800 	.word	0x40000800
 8002d48:	40000c00 	.word	0x40000c00
 8002d4c:	40010400 	.word	0x40010400
 8002d50:	40014000 	.word	0x40014000
 8002d54:	40014400 	.word	0x40014400
 8002d58:	40014800 	.word	0x40014800
 8002d5c:	40001800 	.word	0x40001800
 8002d60:	40001c00 	.word	0x40001c00
 8002d64:	40002000 	.word	0x40002000

08002d68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d84:	bf00      	nop
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002d98:	bf00      	nop
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d101      	bne.n	8002db6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e040      	b.n	8002e38 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d106      	bne.n	8002dcc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f7fd fe8a 	bl	8000ae0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2224      	movs	r2, #36	; 0x24
 8002dd0:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f022 0201 	bic.w	r2, r2, #1
 8002de0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 f82c 	bl	8002e40 <UART_SetConfig>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d101      	bne.n	8002df2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e022      	b.n	8002e38 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d002      	beq.n	8002e00 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 faca 	bl	8003394 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	685a      	ldr	r2, [r3, #4]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	689a      	ldr	r2, [r3, #8]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f042 0201 	orr.w	r2, r2, #1
 8002e2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f000 fb51 	bl	80034d8 <UART_CheckIdleState>
 8002e36:	4603      	mov	r3, r0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3708      	adds	r7, #8
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b088      	sub	sp, #32
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	689a      	ldr	r2, [r3, #8]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	431a      	orrs	r2, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	431a      	orrs	r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	69db      	ldr	r3, [r3, #28]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	4bb1      	ldr	r3, [pc, #708]	; (8003134 <UART_SetConfig+0x2f4>)
 8002e70:	4013      	ands	r3, r2
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	6812      	ldr	r2, [r2, #0]
 8002e76:	6939      	ldr	r1, [r7, #16]
 8002e78:	430b      	orrs	r3, r1
 8002e7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	68da      	ldr	r2, [r3, #12]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a1b      	ldr	r3, [r3, #32]
 8002e9c:	693a      	ldr	r2, [r7, #16]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	693a      	ldr	r2, [r7, #16]
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a9f      	ldr	r2, [pc, #636]	; (8003138 <UART_SetConfig+0x2f8>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d121      	bne.n	8002f04 <UART_SetConfig+0xc4>
 8002ec0:	4b9e      	ldr	r3, [pc, #632]	; (800313c <UART_SetConfig+0x2fc>)
 8002ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec6:	f003 0303 	and.w	r3, r3, #3
 8002eca:	2b03      	cmp	r3, #3
 8002ecc:	d816      	bhi.n	8002efc <UART_SetConfig+0xbc>
 8002ece:	a201      	add	r2, pc, #4	; (adr r2, 8002ed4 <UART_SetConfig+0x94>)
 8002ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ed4:	08002ee5 	.word	0x08002ee5
 8002ed8:	08002ef1 	.word	0x08002ef1
 8002edc:	08002eeb 	.word	0x08002eeb
 8002ee0:	08002ef7 	.word	0x08002ef7
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	77fb      	strb	r3, [r7, #31]
 8002ee8:	e151      	b.n	800318e <UART_SetConfig+0x34e>
 8002eea:	2302      	movs	r3, #2
 8002eec:	77fb      	strb	r3, [r7, #31]
 8002eee:	e14e      	b.n	800318e <UART_SetConfig+0x34e>
 8002ef0:	2304      	movs	r3, #4
 8002ef2:	77fb      	strb	r3, [r7, #31]
 8002ef4:	e14b      	b.n	800318e <UART_SetConfig+0x34e>
 8002ef6:	2308      	movs	r3, #8
 8002ef8:	77fb      	strb	r3, [r7, #31]
 8002efa:	e148      	b.n	800318e <UART_SetConfig+0x34e>
 8002efc:	2310      	movs	r3, #16
 8002efe:	77fb      	strb	r3, [r7, #31]
 8002f00:	bf00      	nop
 8002f02:	e144      	b.n	800318e <UART_SetConfig+0x34e>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a8d      	ldr	r2, [pc, #564]	; (8003140 <UART_SetConfig+0x300>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d134      	bne.n	8002f78 <UART_SetConfig+0x138>
 8002f0e:	4b8b      	ldr	r3, [pc, #556]	; (800313c <UART_SetConfig+0x2fc>)
 8002f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f14:	f003 030c 	and.w	r3, r3, #12
 8002f18:	2b0c      	cmp	r3, #12
 8002f1a:	d829      	bhi.n	8002f70 <UART_SetConfig+0x130>
 8002f1c:	a201      	add	r2, pc, #4	; (adr r2, 8002f24 <UART_SetConfig+0xe4>)
 8002f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f22:	bf00      	nop
 8002f24:	08002f59 	.word	0x08002f59
 8002f28:	08002f71 	.word	0x08002f71
 8002f2c:	08002f71 	.word	0x08002f71
 8002f30:	08002f71 	.word	0x08002f71
 8002f34:	08002f65 	.word	0x08002f65
 8002f38:	08002f71 	.word	0x08002f71
 8002f3c:	08002f71 	.word	0x08002f71
 8002f40:	08002f71 	.word	0x08002f71
 8002f44:	08002f5f 	.word	0x08002f5f
 8002f48:	08002f71 	.word	0x08002f71
 8002f4c:	08002f71 	.word	0x08002f71
 8002f50:	08002f71 	.word	0x08002f71
 8002f54:	08002f6b 	.word	0x08002f6b
 8002f58:	2300      	movs	r3, #0
 8002f5a:	77fb      	strb	r3, [r7, #31]
 8002f5c:	e117      	b.n	800318e <UART_SetConfig+0x34e>
 8002f5e:	2302      	movs	r3, #2
 8002f60:	77fb      	strb	r3, [r7, #31]
 8002f62:	e114      	b.n	800318e <UART_SetConfig+0x34e>
 8002f64:	2304      	movs	r3, #4
 8002f66:	77fb      	strb	r3, [r7, #31]
 8002f68:	e111      	b.n	800318e <UART_SetConfig+0x34e>
 8002f6a:	2308      	movs	r3, #8
 8002f6c:	77fb      	strb	r3, [r7, #31]
 8002f6e:	e10e      	b.n	800318e <UART_SetConfig+0x34e>
 8002f70:	2310      	movs	r3, #16
 8002f72:	77fb      	strb	r3, [r7, #31]
 8002f74:	bf00      	nop
 8002f76:	e10a      	b.n	800318e <UART_SetConfig+0x34e>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a71      	ldr	r2, [pc, #452]	; (8003144 <UART_SetConfig+0x304>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d120      	bne.n	8002fc4 <UART_SetConfig+0x184>
 8002f82:	4b6e      	ldr	r3, [pc, #440]	; (800313c <UART_SetConfig+0x2fc>)
 8002f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f88:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002f8c:	2b10      	cmp	r3, #16
 8002f8e:	d00f      	beq.n	8002fb0 <UART_SetConfig+0x170>
 8002f90:	2b10      	cmp	r3, #16
 8002f92:	d802      	bhi.n	8002f9a <UART_SetConfig+0x15a>
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d005      	beq.n	8002fa4 <UART_SetConfig+0x164>
 8002f98:	e010      	b.n	8002fbc <UART_SetConfig+0x17c>
 8002f9a:	2b20      	cmp	r3, #32
 8002f9c:	d005      	beq.n	8002faa <UART_SetConfig+0x16a>
 8002f9e:	2b30      	cmp	r3, #48	; 0x30
 8002fa0:	d009      	beq.n	8002fb6 <UART_SetConfig+0x176>
 8002fa2:	e00b      	b.n	8002fbc <UART_SetConfig+0x17c>
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	77fb      	strb	r3, [r7, #31]
 8002fa8:	e0f1      	b.n	800318e <UART_SetConfig+0x34e>
 8002faa:	2302      	movs	r3, #2
 8002fac:	77fb      	strb	r3, [r7, #31]
 8002fae:	e0ee      	b.n	800318e <UART_SetConfig+0x34e>
 8002fb0:	2304      	movs	r3, #4
 8002fb2:	77fb      	strb	r3, [r7, #31]
 8002fb4:	e0eb      	b.n	800318e <UART_SetConfig+0x34e>
 8002fb6:	2308      	movs	r3, #8
 8002fb8:	77fb      	strb	r3, [r7, #31]
 8002fba:	e0e8      	b.n	800318e <UART_SetConfig+0x34e>
 8002fbc:	2310      	movs	r3, #16
 8002fbe:	77fb      	strb	r3, [r7, #31]
 8002fc0:	bf00      	nop
 8002fc2:	e0e4      	b.n	800318e <UART_SetConfig+0x34e>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a5f      	ldr	r2, [pc, #380]	; (8003148 <UART_SetConfig+0x308>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d120      	bne.n	8003010 <UART_SetConfig+0x1d0>
 8002fce:	4b5b      	ldr	r3, [pc, #364]	; (800313c <UART_SetConfig+0x2fc>)
 8002fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fd4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002fd8:	2b40      	cmp	r3, #64	; 0x40
 8002fda:	d00f      	beq.n	8002ffc <UART_SetConfig+0x1bc>
 8002fdc:	2b40      	cmp	r3, #64	; 0x40
 8002fde:	d802      	bhi.n	8002fe6 <UART_SetConfig+0x1a6>
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d005      	beq.n	8002ff0 <UART_SetConfig+0x1b0>
 8002fe4:	e010      	b.n	8003008 <UART_SetConfig+0x1c8>
 8002fe6:	2b80      	cmp	r3, #128	; 0x80
 8002fe8:	d005      	beq.n	8002ff6 <UART_SetConfig+0x1b6>
 8002fea:	2bc0      	cmp	r3, #192	; 0xc0
 8002fec:	d009      	beq.n	8003002 <UART_SetConfig+0x1c2>
 8002fee:	e00b      	b.n	8003008 <UART_SetConfig+0x1c8>
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	77fb      	strb	r3, [r7, #31]
 8002ff4:	e0cb      	b.n	800318e <UART_SetConfig+0x34e>
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	77fb      	strb	r3, [r7, #31]
 8002ffa:	e0c8      	b.n	800318e <UART_SetConfig+0x34e>
 8002ffc:	2304      	movs	r3, #4
 8002ffe:	77fb      	strb	r3, [r7, #31]
 8003000:	e0c5      	b.n	800318e <UART_SetConfig+0x34e>
 8003002:	2308      	movs	r3, #8
 8003004:	77fb      	strb	r3, [r7, #31]
 8003006:	e0c2      	b.n	800318e <UART_SetConfig+0x34e>
 8003008:	2310      	movs	r3, #16
 800300a:	77fb      	strb	r3, [r7, #31]
 800300c:	bf00      	nop
 800300e:	e0be      	b.n	800318e <UART_SetConfig+0x34e>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a4d      	ldr	r2, [pc, #308]	; (800314c <UART_SetConfig+0x30c>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d124      	bne.n	8003064 <UART_SetConfig+0x224>
 800301a:	4b48      	ldr	r3, [pc, #288]	; (800313c <UART_SetConfig+0x2fc>)
 800301c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003020:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003024:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003028:	d012      	beq.n	8003050 <UART_SetConfig+0x210>
 800302a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800302e:	d802      	bhi.n	8003036 <UART_SetConfig+0x1f6>
 8003030:	2b00      	cmp	r3, #0
 8003032:	d007      	beq.n	8003044 <UART_SetConfig+0x204>
 8003034:	e012      	b.n	800305c <UART_SetConfig+0x21c>
 8003036:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800303a:	d006      	beq.n	800304a <UART_SetConfig+0x20a>
 800303c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003040:	d009      	beq.n	8003056 <UART_SetConfig+0x216>
 8003042:	e00b      	b.n	800305c <UART_SetConfig+0x21c>
 8003044:	2300      	movs	r3, #0
 8003046:	77fb      	strb	r3, [r7, #31]
 8003048:	e0a1      	b.n	800318e <UART_SetConfig+0x34e>
 800304a:	2302      	movs	r3, #2
 800304c:	77fb      	strb	r3, [r7, #31]
 800304e:	e09e      	b.n	800318e <UART_SetConfig+0x34e>
 8003050:	2304      	movs	r3, #4
 8003052:	77fb      	strb	r3, [r7, #31]
 8003054:	e09b      	b.n	800318e <UART_SetConfig+0x34e>
 8003056:	2308      	movs	r3, #8
 8003058:	77fb      	strb	r3, [r7, #31]
 800305a:	e098      	b.n	800318e <UART_SetConfig+0x34e>
 800305c:	2310      	movs	r3, #16
 800305e:	77fb      	strb	r3, [r7, #31]
 8003060:	bf00      	nop
 8003062:	e094      	b.n	800318e <UART_SetConfig+0x34e>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a39      	ldr	r2, [pc, #228]	; (8003150 <UART_SetConfig+0x310>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d124      	bne.n	80030b8 <UART_SetConfig+0x278>
 800306e:	4b33      	ldr	r3, [pc, #204]	; (800313c <UART_SetConfig+0x2fc>)
 8003070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003074:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003078:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800307c:	d012      	beq.n	80030a4 <UART_SetConfig+0x264>
 800307e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003082:	d802      	bhi.n	800308a <UART_SetConfig+0x24a>
 8003084:	2b00      	cmp	r3, #0
 8003086:	d007      	beq.n	8003098 <UART_SetConfig+0x258>
 8003088:	e012      	b.n	80030b0 <UART_SetConfig+0x270>
 800308a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800308e:	d006      	beq.n	800309e <UART_SetConfig+0x25e>
 8003090:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003094:	d009      	beq.n	80030aa <UART_SetConfig+0x26a>
 8003096:	e00b      	b.n	80030b0 <UART_SetConfig+0x270>
 8003098:	2301      	movs	r3, #1
 800309a:	77fb      	strb	r3, [r7, #31]
 800309c:	e077      	b.n	800318e <UART_SetConfig+0x34e>
 800309e:	2302      	movs	r3, #2
 80030a0:	77fb      	strb	r3, [r7, #31]
 80030a2:	e074      	b.n	800318e <UART_SetConfig+0x34e>
 80030a4:	2304      	movs	r3, #4
 80030a6:	77fb      	strb	r3, [r7, #31]
 80030a8:	e071      	b.n	800318e <UART_SetConfig+0x34e>
 80030aa:	2308      	movs	r3, #8
 80030ac:	77fb      	strb	r3, [r7, #31]
 80030ae:	e06e      	b.n	800318e <UART_SetConfig+0x34e>
 80030b0:	2310      	movs	r3, #16
 80030b2:	77fb      	strb	r3, [r7, #31]
 80030b4:	bf00      	nop
 80030b6:	e06a      	b.n	800318e <UART_SetConfig+0x34e>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a25      	ldr	r2, [pc, #148]	; (8003154 <UART_SetConfig+0x314>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d124      	bne.n	800310c <UART_SetConfig+0x2cc>
 80030c2:	4b1e      	ldr	r3, [pc, #120]	; (800313c <UART_SetConfig+0x2fc>)
 80030c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030c8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80030cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030d0:	d012      	beq.n	80030f8 <UART_SetConfig+0x2b8>
 80030d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030d6:	d802      	bhi.n	80030de <UART_SetConfig+0x29e>
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d007      	beq.n	80030ec <UART_SetConfig+0x2ac>
 80030dc:	e012      	b.n	8003104 <UART_SetConfig+0x2c4>
 80030de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030e2:	d006      	beq.n	80030f2 <UART_SetConfig+0x2b2>
 80030e4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80030e8:	d009      	beq.n	80030fe <UART_SetConfig+0x2be>
 80030ea:	e00b      	b.n	8003104 <UART_SetConfig+0x2c4>
 80030ec:	2300      	movs	r3, #0
 80030ee:	77fb      	strb	r3, [r7, #31]
 80030f0:	e04d      	b.n	800318e <UART_SetConfig+0x34e>
 80030f2:	2302      	movs	r3, #2
 80030f4:	77fb      	strb	r3, [r7, #31]
 80030f6:	e04a      	b.n	800318e <UART_SetConfig+0x34e>
 80030f8:	2304      	movs	r3, #4
 80030fa:	77fb      	strb	r3, [r7, #31]
 80030fc:	e047      	b.n	800318e <UART_SetConfig+0x34e>
 80030fe:	2308      	movs	r3, #8
 8003100:	77fb      	strb	r3, [r7, #31]
 8003102:	e044      	b.n	800318e <UART_SetConfig+0x34e>
 8003104:	2310      	movs	r3, #16
 8003106:	77fb      	strb	r3, [r7, #31]
 8003108:	bf00      	nop
 800310a:	e040      	b.n	800318e <UART_SetConfig+0x34e>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a11      	ldr	r2, [pc, #68]	; (8003158 <UART_SetConfig+0x318>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d139      	bne.n	800318a <UART_SetConfig+0x34a>
 8003116:	4b09      	ldr	r3, [pc, #36]	; (800313c <UART_SetConfig+0x2fc>)
 8003118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800311c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003120:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003124:	d027      	beq.n	8003176 <UART_SetConfig+0x336>
 8003126:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800312a:	d817      	bhi.n	800315c <UART_SetConfig+0x31c>
 800312c:	2b00      	cmp	r3, #0
 800312e:	d01c      	beq.n	800316a <UART_SetConfig+0x32a>
 8003130:	e027      	b.n	8003182 <UART_SetConfig+0x342>
 8003132:	bf00      	nop
 8003134:	efff69f3 	.word	0xefff69f3
 8003138:	40011000 	.word	0x40011000
 800313c:	40023800 	.word	0x40023800
 8003140:	40004400 	.word	0x40004400
 8003144:	40004800 	.word	0x40004800
 8003148:	40004c00 	.word	0x40004c00
 800314c:	40005000 	.word	0x40005000
 8003150:	40011400 	.word	0x40011400
 8003154:	40007800 	.word	0x40007800
 8003158:	40007c00 	.word	0x40007c00
 800315c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003160:	d006      	beq.n	8003170 <UART_SetConfig+0x330>
 8003162:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003166:	d009      	beq.n	800317c <UART_SetConfig+0x33c>
 8003168:	e00b      	b.n	8003182 <UART_SetConfig+0x342>
 800316a:	2300      	movs	r3, #0
 800316c:	77fb      	strb	r3, [r7, #31]
 800316e:	e00e      	b.n	800318e <UART_SetConfig+0x34e>
 8003170:	2302      	movs	r3, #2
 8003172:	77fb      	strb	r3, [r7, #31]
 8003174:	e00b      	b.n	800318e <UART_SetConfig+0x34e>
 8003176:	2304      	movs	r3, #4
 8003178:	77fb      	strb	r3, [r7, #31]
 800317a:	e008      	b.n	800318e <UART_SetConfig+0x34e>
 800317c:	2308      	movs	r3, #8
 800317e:	77fb      	strb	r3, [r7, #31]
 8003180:	e005      	b.n	800318e <UART_SetConfig+0x34e>
 8003182:	2310      	movs	r3, #16
 8003184:	77fb      	strb	r3, [r7, #31]
 8003186:	bf00      	nop
 8003188:	e001      	b.n	800318e <UART_SetConfig+0x34e>
 800318a:	2310      	movs	r3, #16
 800318c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	69db      	ldr	r3, [r3, #28]
 8003192:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003196:	d17f      	bne.n	8003298 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8003198:	7ffb      	ldrb	r3, [r7, #31]
 800319a:	2b08      	cmp	r3, #8
 800319c:	d85c      	bhi.n	8003258 <UART_SetConfig+0x418>
 800319e:	a201      	add	r2, pc, #4	; (adr r2, 80031a4 <UART_SetConfig+0x364>)
 80031a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031a4:	080031c9 	.word	0x080031c9
 80031a8:	080031e9 	.word	0x080031e9
 80031ac:	08003209 	.word	0x08003209
 80031b0:	08003259 	.word	0x08003259
 80031b4:	08003221 	.word	0x08003221
 80031b8:	08003259 	.word	0x08003259
 80031bc:	08003259 	.word	0x08003259
 80031c0:	08003259 	.word	0x08003259
 80031c4:	08003241 	.word	0x08003241
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031c8:	f7fe ff06 	bl	8001fd8 <HAL_RCC_GetPCLK1Freq>
 80031cc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	005a      	lsls	r2, r3, #1
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	085b      	lsrs	r3, r3, #1
 80031d8:	441a      	add	r2, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	fbb2 f3f3 	udiv	r3, r2, r3
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	61bb      	str	r3, [r7, #24]
        break;
 80031e6:	e03a      	b.n	800325e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031e8:	f7fe ff0a 	bl	8002000 <HAL_RCC_GetPCLK2Freq>
 80031ec:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	005a      	lsls	r2, r3, #1
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	085b      	lsrs	r3, r3, #1
 80031f8:	441a      	add	r2, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003202:	b29b      	uxth	r3, r3
 8003204:	61bb      	str	r3, [r7, #24]
        break;
 8003206:	e02a      	b.n	800325e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	085a      	lsrs	r2, r3, #1
 800320e:	4b5f      	ldr	r3, [pc, #380]	; (800338c <UART_SetConfig+0x54c>)
 8003210:	4413      	add	r3, r2
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	6852      	ldr	r2, [r2, #4]
 8003216:	fbb3 f3f2 	udiv	r3, r3, r2
 800321a:	b29b      	uxth	r3, r3
 800321c:	61bb      	str	r3, [r7, #24]
        break;
 800321e:	e01e      	b.n	800325e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003220:	f7fe fdf6 	bl	8001e10 <HAL_RCC_GetSysClockFreq>
 8003224:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	005a      	lsls	r2, r3, #1
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	085b      	lsrs	r3, r3, #1
 8003230:	441a      	add	r2, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	fbb2 f3f3 	udiv	r3, r2, r3
 800323a:	b29b      	uxth	r3, r3
 800323c:	61bb      	str	r3, [r7, #24]
        break;
 800323e:	e00e      	b.n	800325e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	085b      	lsrs	r3, r3, #1
 8003246:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003252:	b29b      	uxth	r3, r3
 8003254:	61bb      	str	r3, [r7, #24]
        break;
 8003256:	e002      	b.n	800325e <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	75fb      	strb	r3, [r7, #23]
        break;
 800325c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	2b0f      	cmp	r3, #15
 8003262:	d916      	bls.n	8003292 <UART_SetConfig+0x452>
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800326a:	d212      	bcs.n	8003292 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	b29b      	uxth	r3, r3
 8003270:	f023 030f 	bic.w	r3, r3, #15
 8003274:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	085b      	lsrs	r3, r3, #1
 800327a:	b29b      	uxth	r3, r3
 800327c:	f003 0307 	and.w	r3, r3, #7
 8003280:	b29a      	uxth	r2, r3
 8003282:	897b      	ldrh	r3, [r7, #10]
 8003284:	4313      	orrs	r3, r2
 8003286:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	897a      	ldrh	r2, [r7, #10]
 800328e:	60da      	str	r2, [r3, #12]
 8003290:	e070      	b.n	8003374 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	75fb      	strb	r3, [r7, #23]
 8003296:	e06d      	b.n	8003374 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8003298:	7ffb      	ldrb	r3, [r7, #31]
 800329a:	2b08      	cmp	r3, #8
 800329c:	d859      	bhi.n	8003352 <UART_SetConfig+0x512>
 800329e:	a201      	add	r2, pc, #4	; (adr r2, 80032a4 <UART_SetConfig+0x464>)
 80032a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032a4:	080032c9 	.word	0x080032c9
 80032a8:	080032e7 	.word	0x080032e7
 80032ac:	08003305 	.word	0x08003305
 80032b0:	08003353 	.word	0x08003353
 80032b4:	0800331d 	.word	0x0800331d
 80032b8:	08003353 	.word	0x08003353
 80032bc:	08003353 	.word	0x08003353
 80032c0:	08003353 	.word	0x08003353
 80032c4:	0800333b 	.word	0x0800333b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032c8:	f7fe fe86 	bl	8001fd8 <HAL_RCC_GetPCLK1Freq>
 80032cc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	085a      	lsrs	r2, r3, #1
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	441a      	add	r2, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	61bb      	str	r3, [r7, #24]
        break;
 80032e4:	e038      	b.n	8003358 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032e6:	f7fe fe8b 	bl	8002000 <HAL_RCC_GetPCLK2Freq>
 80032ea:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	085a      	lsrs	r2, r3, #1
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	441a      	add	r2, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80032fe:	b29b      	uxth	r3, r3
 8003300:	61bb      	str	r3, [r7, #24]
        break;
 8003302:	e029      	b.n	8003358 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	085a      	lsrs	r2, r3, #1
 800330a:	4b21      	ldr	r3, [pc, #132]	; (8003390 <UART_SetConfig+0x550>)
 800330c:	4413      	add	r3, r2
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	6852      	ldr	r2, [r2, #4]
 8003312:	fbb3 f3f2 	udiv	r3, r3, r2
 8003316:	b29b      	uxth	r3, r3
 8003318:	61bb      	str	r3, [r7, #24]
        break;
 800331a:	e01d      	b.n	8003358 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800331c:	f7fe fd78 	bl	8001e10 <HAL_RCC_GetSysClockFreq>
 8003320:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	085a      	lsrs	r2, r3, #1
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	441a      	add	r2, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	fbb2 f3f3 	udiv	r3, r2, r3
 8003334:	b29b      	uxth	r3, r3
 8003336:	61bb      	str	r3, [r7, #24]
        break;
 8003338:	e00e      	b.n	8003358 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	085b      	lsrs	r3, r3, #1
 8003340:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	fbb2 f3f3 	udiv	r3, r2, r3
 800334c:	b29b      	uxth	r3, r3
 800334e:	61bb      	str	r3, [r7, #24]
        break;
 8003350:	e002      	b.n	8003358 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	75fb      	strb	r3, [r7, #23]
        break;
 8003356:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	2b0f      	cmp	r3, #15
 800335c:	d908      	bls.n	8003370 <UART_SetConfig+0x530>
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003364:	d204      	bcs.n	8003370 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	69ba      	ldr	r2, [r7, #24]
 800336c:	60da      	str	r2, [r3, #12]
 800336e:	e001      	b.n	8003374 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003380:	7dfb      	ldrb	r3, [r7, #23]
}
 8003382:	4618      	mov	r0, r3
 8003384:	3720      	adds	r7, #32
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	01e84800 	.word	0x01e84800
 8003390:	00f42400 	.word	0x00f42400

08003394 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a0:	f003 0301 	and.w	r3, r3, #1
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d00a      	beq.n	80033be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	430a      	orrs	r2, r1
 80033bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00a      	beq.n	80033e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	430a      	orrs	r2, r1
 80033de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e4:	f003 0304 	and.w	r3, r3, #4
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d00a      	beq.n	8003402 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	430a      	orrs	r2, r1
 8003400:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003406:	f003 0308 	and.w	r3, r3, #8
 800340a:	2b00      	cmp	r3, #0
 800340c:	d00a      	beq.n	8003424 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	430a      	orrs	r2, r1
 8003422:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003428:	f003 0310 	and.w	r3, r3, #16
 800342c:	2b00      	cmp	r3, #0
 800342e:	d00a      	beq.n	8003446 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	430a      	orrs	r2, r1
 8003444:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344a:	f003 0320 	and.w	r3, r3, #32
 800344e:	2b00      	cmp	r3, #0
 8003450:	d00a      	beq.n	8003468 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	430a      	orrs	r2, r1
 8003466:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003470:	2b00      	cmp	r3, #0
 8003472:	d01a      	beq.n	80034aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	430a      	orrs	r2, r1
 8003488:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003492:	d10a      	bne.n	80034aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	430a      	orrs	r2, r1
 80034a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d00a      	beq.n	80034cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	430a      	orrs	r2, r1
 80034ca:	605a      	str	r2, [r3, #4]
  }
}
 80034cc:	bf00      	nop
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b086      	sub	sp, #24
 80034dc:	af02      	add	r7, sp, #8
 80034de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80034e6:	f7fd fc73 	bl	8000dd0 <HAL_GetTick>
 80034ea:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0308 	and.w	r3, r3, #8
 80034f6:	2b08      	cmp	r3, #8
 80034f8:	d10e      	bne.n	8003518 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034fa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80034fe:	9300      	str	r3, [sp, #0]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2200      	movs	r2, #0
 8003504:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f000 f82a 	bl	8003562 <UART_WaitOnFlagUntilTimeout>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d001      	beq.n	8003518 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	e020      	b.n	800355a <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0304 	and.w	r3, r3, #4
 8003522:	2b04      	cmp	r3, #4
 8003524:	d10e      	bne.n	8003544 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003526:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800352a:	9300      	str	r3, [sp, #0]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2200      	movs	r2, #0
 8003530:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f000 f814 	bl	8003562 <UART_WaitOnFlagUntilTimeout>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d001      	beq.n	8003544 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003540:	2303      	movs	r3, #3
 8003542:	e00a      	b.n	800355a <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2220      	movs	r2, #32
 8003548:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2220      	movs	r2, #32
 800354e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003558:	2300      	movs	r3, #0
}
 800355a:	4618      	mov	r0, r3
 800355c:	3710      	adds	r7, #16
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}

08003562 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003562:	b580      	push	{r7, lr}
 8003564:	b084      	sub	sp, #16
 8003566:	af00      	add	r7, sp, #0
 8003568:	60f8      	str	r0, [r7, #12]
 800356a:	60b9      	str	r1, [r7, #8]
 800356c:	603b      	str	r3, [r7, #0]
 800356e:	4613      	mov	r3, r2
 8003570:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003572:	e05d      	b.n	8003630 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800357a:	d059      	beq.n	8003630 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800357c:	f7fd fc28 	bl	8000dd0 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	69ba      	ldr	r2, [r7, #24]
 8003588:	429a      	cmp	r2, r3
 800358a:	d302      	bcc.n	8003592 <UART_WaitOnFlagUntilTimeout+0x30>
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d11b      	bne.n	80035ca <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80035a0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	689a      	ldr	r2, [r3, #8]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f022 0201 	bic.w	r2, r2, #1
 80035b0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2220      	movs	r2, #32
 80035b6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2220      	movs	r2, #32
 80035bc:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e042      	b.n	8003650 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0304 	and.w	r3, r3, #4
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d02b      	beq.n	8003630 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	69db      	ldr	r3, [r3, #28]
 80035de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035e6:	d123      	bne.n	8003630 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035f0:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003600:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	689a      	ldr	r2, [r3, #8]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f022 0201 	bic.w	r2, r2, #1
 8003610:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2220      	movs	r2, #32
 8003616:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2220      	movs	r2, #32
 800361c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2220      	movs	r2, #32
 8003622:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	e00f      	b.n	8003650 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	69da      	ldr	r2, [r3, #28]
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	4013      	ands	r3, r2
 800363a:	68ba      	ldr	r2, [r7, #8]
 800363c:	429a      	cmp	r2, r3
 800363e:	bf0c      	ite	eq
 8003640:	2301      	moveq	r3, #1
 8003642:	2300      	movne	r3, #0
 8003644:	b2db      	uxtb	r3, r3
 8003646:	461a      	mov	r2, r3
 8003648:	79fb      	ldrb	r3, [r7, #7]
 800364a:	429a      	cmp	r2, r3
 800364c:	d092      	beq.n	8003574 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800364e:	2300      	movs	r3, #0
}
 8003650:	4618      	mov	r0, r3
 8003652:	3710      	adds	r7, #16
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003658:	b084      	sub	sp, #16
 800365a:	b580      	push	{r7, lr}
 800365c:	b084      	sub	sp, #16
 800365e:	af00      	add	r7, sp, #0
 8003660:	6078      	str	r0, [r7, #4]
 8003662:	f107 001c 	add.w	r0, r7, #28
 8003666:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800366a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800366c:	2b01      	cmp	r3, #1
 800366e:	d120      	bne.n	80036b2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003674:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	68da      	ldr	r2, [r3, #12]
 8003680:	4b20      	ldr	r3, [pc, #128]	; (8003704 <USB_CoreInit+0xac>)
 8003682:	4013      	ands	r3, r2
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003694:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003696:	2b01      	cmp	r3, #1
 8003698:	d105      	bne.n	80036a6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 fa52 	bl	8003b50 <USB_CoreReset>
 80036ac:	4603      	mov	r3, r0
 80036ae:	73fb      	strb	r3, [r7, #15]
 80036b0:	e010      	b.n	80036d4 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 fa46 	bl	8003b50 <USB_CoreReset>
 80036c4:	4603      	mov	r3, r0
 80036c6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036cc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80036d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d10b      	bne.n	80036f2 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f043 0206 	orr.w	r2, r3, #6
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f043 0220 	orr.w	r2, r3, #32
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80036f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3710      	adds	r7, #16
 80036f8:	46bd      	mov	sp, r7
 80036fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80036fe:	b004      	add	sp, #16
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	ffbdffbf 	.word	0xffbdffbf

08003708 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	f023 0201 	bic.w	r2, r3, #1
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	370c      	adds	r7, #12
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr

0800372a <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800372a:	b580      	push	{r7, lr}
 800372c:	b082      	sub	sp, #8
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
 8003732:	460b      	mov	r3, r1
 8003734:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003742:	78fb      	ldrb	r3, [r7, #3]
 8003744:	2b01      	cmp	r3, #1
 8003746:	d106      	bne.n	8003756 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	60da      	str	r2, [r3, #12]
 8003754:	e00b      	b.n	800376e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8003756:	78fb      	ldrb	r3, [r7, #3]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d106      	bne.n	800376a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	60da      	str	r2, [r3, #12]
 8003768:	e001      	b.n	800376e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e003      	b.n	8003776 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800376e:	2032      	movs	r0, #50	; 0x32
 8003770:	f7fd fb3a 	bl	8000de8 <HAL_Delay>

  return HAL_OK;
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3708      	adds	r7, #8
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
	...

08003780 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003780:	b084      	sub	sp, #16
 8003782:	b580      	push	{r7, lr}
 8003784:	b086      	sub	sp, #24
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
 800378a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800378e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003792:	2300      	movs	r3, #0
 8003794:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800379a:	2300      	movs	r3, #0
 800379c:	613b      	str	r3, [r7, #16]
 800379e:	e009      	b.n	80037b4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	3340      	adds	r3, #64	; 0x40
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	4413      	add	r3, r2
 80037aa:	2200      	movs	r2, #0
 80037ac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	3301      	adds	r3, #1
 80037b2:	613b      	str	r3, [r7, #16]
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	2b0e      	cmp	r3, #14
 80037b8:	d9f2      	bls.n	80037a0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80037ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d11c      	bne.n	80037fa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	68fa      	ldr	r2, [r7, #12]
 80037ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037ce:	f043 0302 	orr.w	r3, r3, #2
 80037d2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	601a      	str	r2, [r3, #0]
 80037f8:	e005      	b.n	8003806 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037fe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800380c:	461a      	mov	r2, r3
 800380e:	2300      	movs	r3, #0
 8003810:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003818:	4619      	mov	r1, r3
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003820:	461a      	mov	r2, r3
 8003822:	680b      	ldr	r3, [r1, #0]
 8003824:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003828:	2b01      	cmp	r3, #1
 800382a:	d10c      	bne.n	8003846 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800382c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800382e:	2b00      	cmp	r3, #0
 8003830:	d104      	bne.n	800383c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003832:	2100      	movs	r1, #0
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f000 f959 	bl	8003aec <USB_SetDevSpeed>
 800383a:	e018      	b.n	800386e <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800383c:	2101      	movs	r1, #1
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 f954 	bl	8003aec <USB_SetDevSpeed>
 8003844:	e013      	b.n	800386e <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8003846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003848:	2b03      	cmp	r3, #3
 800384a:	d10c      	bne.n	8003866 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800384c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800384e:	2b00      	cmp	r3, #0
 8003850:	d104      	bne.n	800385c <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003852:	2100      	movs	r1, #0
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f000 f949 	bl	8003aec <USB_SetDevSpeed>
 800385a:	e008      	b.n	800386e <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800385c:	2101      	movs	r1, #1
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 f944 	bl	8003aec <USB_SetDevSpeed>
 8003864:	e003      	b.n	800386e <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003866:	2103      	movs	r1, #3
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f000 f93f 	bl	8003aec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800386e:	2110      	movs	r1, #16
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f000 f8f3 	bl	8003a5c <USB_FlushTxFifo>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d001      	beq.n	8003880 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f000 f911 	bl	8003aa8 <USB_FlushRxFifo>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d001      	beq.n	8003890 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003896:	461a      	mov	r2, r3
 8003898:	2300      	movs	r3, #0
 800389a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038a2:	461a      	mov	r2, r3
 80038a4:	2300      	movs	r3, #0
 80038a6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038ae:	461a      	mov	r2, r3
 80038b0:	2300      	movs	r3, #0
 80038b2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80038b4:	2300      	movs	r3, #0
 80038b6:	613b      	str	r3, [r7, #16]
 80038b8:	e043      	b.n	8003942 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	015a      	lsls	r2, r3, #5
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	4413      	add	r3, r2
 80038c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80038cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80038d0:	d118      	bne.n	8003904 <USB_DevInit+0x184>
    {
      if (i == 0U)
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d10a      	bne.n	80038ee <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	015a      	lsls	r2, r3, #5
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	4413      	add	r3, r2
 80038e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038e4:	461a      	mov	r2, r3
 80038e6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80038ea:	6013      	str	r3, [r2, #0]
 80038ec:	e013      	b.n	8003916 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	015a      	lsls	r2, r3, #5
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	4413      	add	r3, r2
 80038f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038fa:	461a      	mov	r2, r3
 80038fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003900:	6013      	str	r3, [r2, #0]
 8003902:	e008      	b.n	8003916 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	015a      	lsls	r2, r3, #5
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	4413      	add	r3, r2
 800390c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003910:	461a      	mov	r2, r3
 8003912:	2300      	movs	r3, #0
 8003914:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	015a      	lsls	r2, r3, #5
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	4413      	add	r3, r2
 800391e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003922:	461a      	mov	r2, r3
 8003924:	2300      	movs	r3, #0
 8003926:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	015a      	lsls	r2, r3, #5
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	4413      	add	r3, r2
 8003930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003934:	461a      	mov	r2, r3
 8003936:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800393a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	3301      	adds	r3, #1
 8003940:	613b      	str	r3, [r7, #16]
 8003942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003944:	693a      	ldr	r2, [r7, #16]
 8003946:	429a      	cmp	r2, r3
 8003948:	d3b7      	bcc.n	80038ba <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800394a:	2300      	movs	r3, #0
 800394c:	613b      	str	r3, [r7, #16]
 800394e:	e043      	b.n	80039d8 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	015a      	lsls	r2, r3, #5
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	4413      	add	r3, r2
 8003958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003962:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003966:	d118      	bne.n	800399a <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d10a      	bne.n	8003984 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	015a      	lsls	r2, r3, #5
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	4413      	add	r3, r2
 8003976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800397a:	461a      	mov	r2, r3
 800397c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003980:	6013      	str	r3, [r2, #0]
 8003982:	e013      	b.n	80039ac <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	015a      	lsls	r2, r3, #5
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	4413      	add	r3, r2
 800398c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003990:	461a      	mov	r2, r3
 8003992:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003996:	6013      	str	r3, [r2, #0]
 8003998:	e008      	b.n	80039ac <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	015a      	lsls	r2, r3, #5
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	4413      	add	r3, r2
 80039a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039a6:	461a      	mov	r2, r3
 80039a8:	2300      	movs	r3, #0
 80039aa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	015a      	lsls	r2, r3, #5
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	4413      	add	r3, r2
 80039b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039b8:	461a      	mov	r2, r3
 80039ba:	2300      	movs	r3, #0
 80039bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	015a      	lsls	r2, r3, #5
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	4413      	add	r3, r2
 80039c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039ca:	461a      	mov	r2, r3
 80039cc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80039d0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	3301      	adds	r3, #1
 80039d6:	613b      	str	r3, [r7, #16]
 80039d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039da:	693a      	ldr	r2, [r7, #16]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d3b7      	bcc.n	8003950 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039e6:	691b      	ldr	r3, [r3, #16]
 80039e8:	68fa      	ldr	r2, [r7, #12]
 80039ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039f2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003a00:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d105      	bne.n	8003a14 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	f043 0210 	orr.w	r2, r3, #16
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	699a      	ldr	r2, [r3, #24]
 8003a18:	4b0e      	ldr	r3, [pc, #56]	; (8003a54 <USB_DevInit+0x2d4>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003a20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d005      	beq.n	8003a32 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	699b      	ldr	r3, [r3, #24]
 8003a2a:	f043 0208 	orr.w	r2, r3, #8
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003a32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d105      	bne.n	8003a44 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	699a      	ldr	r2, [r3, #24]
 8003a3c:	4b06      	ldr	r3, [pc, #24]	; (8003a58 <USB_DevInit+0x2d8>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003a44:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3718      	adds	r7, #24
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003a50:	b004      	add	sp, #16
 8003a52:	4770      	bx	lr
 8003a54:	803c3800 	.word	0x803c3800
 8003a58:	40000004 	.word	0x40000004

08003a5c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b085      	sub	sp, #20
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003a66:	2300      	movs	r3, #0
 8003a68:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	019b      	lsls	r3, r3, #6
 8003a6e:	f043 0220 	orr.w	r2, r3, #32
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	3301      	adds	r3, #1
 8003a7a:	60fb      	str	r3, [r7, #12]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	4a09      	ldr	r2, [pc, #36]	; (8003aa4 <USB_FlushTxFifo+0x48>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d901      	bls.n	8003a88 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e006      	b.n	8003a96 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	691b      	ldr	r3, [r3, #16]
 8003a8c:	f003 0320 	and.w	r3, r3, #32
 8003a90:	2b20      	cmp	r3, #32
 8003a92:	d0f0      	beq.n	8003a76 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3714      	adds	r7, #20
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr
 8003aa2:	bf00      	nop
 8003aa4:	00030d40 	.word	0x00030d40

08003aa8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b085      	sub	sp, #20
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2210      	movs	r2, #16
 8003ab8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	3301      	adds	r3, #1
 8003abe:	60fb      	str	r3, [r7, #12]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	4a09      	ldr	r2, [pc, #36]	; (8003ae8 <USB_FlushRxFifo+0x40>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d901      	bls.n	8003acc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	e006      	b.n	8003ada <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	691b      	ldr	r3, [r3, #16]
 8003ad0:	f003 0310 	and.w	r3, r3, #16
 8003ad4:	2b10      	cmp	r3, #16
 8003ad6:	d0f0      	beq.n	8003aba <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3714      	adds	r7, #20
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop
 8003ae8:	00030d40 	.word	0x00030d40

08003aec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b085      	sub	sp, #20
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	460b      	mov	r3, r1
 8003af6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	78fb      	ldrb	r3, [r7, #3]
 8003b06:	68f9      	ldr	r1, [r7, #12]
 8003b08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3714      	adds	r7, #20
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr

08003b1e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003b1e:	b580      	push	{r7, lr}
 8003b20:	b084      	sub	sp, #16
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b38:	f043 0302 	orr.w	r3, r3, #2
 8003b3c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8003b3e:	2003      	movs	r0, #3
 8003b40:	f7fd f952 	bl	8000de8 <HAL_Delay>

  return HAL_OK;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3710      	adds	r7, #16
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
	...

08003b50 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b085      	sub	sp, #20
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	3301      	adds	r3, #1
 8003b60:	60fb      	str	r3, [r7, #12]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	4a13      	ldr	r2, [pc, #76]	; (8003bb4 <USB_CoreReset+0x64>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d901      	bls.n	8003b6e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e01b      	b.n	8003ba6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	691b      	ldr	r3, [r3, #16]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	daf2      	bge.n	8003b5c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003b76:	2300      	movs	r3, #0
 8003b78:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	f043 0201 	orr.w	r2, r3, #1
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	3301      	adds	r3, #1
 8003b8a:	60fb      	str	r3, [r7, #12]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	4a09      	ldr	r2, [pc, #36]	; (8003bb4 <USB_CoreReset+0x64>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d901      	bls.n	8003b98 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	e006      	b.n	8003ba6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	f003 0301 	and.w	r3, r3, #1
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d0f0      	beq.n	8003b86 <USB_CoreReset+0x36>

  return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3714      	adds	r7, #20
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	00030d40 	.word	0x00030d40

08003bb8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003bb8:	b480      	push	{r7}
 8003bba:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8003bbc:	bf00      	nop
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
	...

08003bc8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003bc8:	b480      	push	{r7}
 8003bca:	b085      	sub	sp, #20
 8003bcc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003bce:	f3ef 8305 	mrs	r3, IPSR
 8003bd2:	60bb      	str	r3, [r7, #8]
  return(result);
 8003bd4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d10f      	bne.n	8003bfa <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bda:	f3ef 8310 	mrs	r3, PRIMASK
 8003bde:	607b      	str	r3, [r7, #4]
  return(result);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d105      	bne.n	8003bf2 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003be6:	f3ef 8311 	mrs	r3, BASEPRI
 8003bea:	603b      	str	r3, [r7, #0]
  return(result);
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d007      	beq.n	8003c02 <osKernelInitialize+0x3a>
 8003bf2:	4b0e      	ldr	r3, [pc, #56]	; (8003c2c <osKernelInitialize+0x64>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d103      	bne.n	8003c02 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003bfa:	f06f 0305 	mvn.w	r3, #5
 8003bfe:	60fb      	str	r3, [r7, #12]
 8003c00:	e00c      	b.n	8003c1c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003c02:	4b0a      	ldr	r3, [pc, #40]	; (8003c2c <osKernelInitialize+0x64>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d105      	bne.n	8003c16 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003c0a:	4b08      	ldr	r3, [pc, #32]	; (8003c2c <osKernelInitialize+0x64>)
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003c10:	2300      	movs	r3, #0
 8003c12:	60fb      	str	r3, [r7, #12]
 8003c14:	e002      	b.n	8003c1c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003c16:	f04f 33ff 	mov.w	r3, #4294967295
 8003c1a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3714      	adds	r7, #20
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	20000030 	.word	0x20000030

08003c30 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c36:	f3ef 8305 	mrs	r3, IPSR
 8003c3a:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c3c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d10f      	bne.n	8003c62 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c42:	f3ef 8310 	mrs	r3, PRIMASK
 8003c46:	607b      	str	r3, [r7, #4]
  return(result);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d105      	bne.n	8003c5a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003c4e:	f3ef 8311 	mrs	r3, BASEPRI
 8003c52:	603b      	str	r3, [r7, #0]
  return(result);
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d007      	beq.n	8003c6a <osKernelStart+0x3a>
 8003c5a:	4b0f      	ldr	r3, [pc, #60]	; (8003c98 <osKernelStart+0x68>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d103      	bne.n	8003c6a <osKernelStart+0x3a>
    stat = osErrorISR;
 8003c62:	f06f 0305 	mvn.w	r3, #5
 8003c66:	60fb      	str	r3, [r7, #12]
 8003c68:	e010      	b.n	8003c8c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003c6a:	4b0b      	ldr	r3, [pc, #44]	; (8003c98 <osKernelStart+0x68>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d109      	bne.n	8003c86 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003c72:	f7ff ffa1 	bl	8003bb8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003c76:	4b08      	ldr	r3, [pc, #32]	; (8003c98 <osKernelStart+0x68>)
 8003c78:	2202      	movs	r2, #2
 8003c7a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003c7c:	f001 fa34 	bl	80050e8 <vTaskStartScheduler>
      stat = osOK;
 8003c80:	2300      	movs	r3, #0
 8003c82:	60fb      	str	r3, [r7, #12]
 8003c84:	e002      	b.n	8003c8c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8003c86:	f04f 33ff 	mov.w	r3, #4294967295
 8003c8a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3710      	adds	r7, #16
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	20000030 	.word	0x20000030

08003c9c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ca2:	f3ef 8305 	mrs	r3, IPSR
 8003ca6:	60bb      	str	r3, [r7, #8]
  return(result);
 8003ca8:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d10f      	bne.n	8003cce <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cae:	f3ef 8310 	mrs	r3, PRIMASK
 8003cb2:	607b      	str	r3, [r7, #4]
  return(result);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d105      	bne.n	8003cc6 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003cba:	f3ef 8311 	mrs	r3, BASEPRI
 8003cbe:	603b      	str	r3, [r7, #0]
  return(result);
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d007      	beq.n	8003cd6 <osKernelGetTickCount+0x3a>
 8003cc6:	4b08      	ldr	r3, [pc, #32]	; (8003ce8 <osKernelGetTickCount+0x4c>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d103      	bne.n	8003cd6 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8003cce:	f001 fb2f 	bl	8005330 <xTaskGetTickCountFromISR>
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	e002      	b.n	8003cdc <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8003cd6:	f001 fb1b 	bl	8005310 <xTaskGetTickCount>
 8003cda:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3710      	adds	r7, #16
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	20000030 	.word	0x20000030

08003cec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b090      	sub	sp, #64	; 0x40
 8003cf0:	af04      	add	r7, sp, #16
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	60b9      	str	r1, [r7, #8]
 8003cf6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003cfc:	f3ef 8305 	mrs	r3, IPSR
 8003d00:	61fb      	str	r3, [r7, #28]
  return(result);
 8003d02:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	f040 808f 	bne.w	8003e28 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d0a:	f3ef 8310 	mrs	r3, PRIMASK
 8003d0e:	61bb      	str	r3, [r7, #24]
  return(result);
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d105      	bne.n	8003d22 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003d16:	f3ef 8311 	mrs	r3, BASEPRI
 8003d1a:	617b      	str	r3, [r7, #20]
  return(result);
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d003      	beq.n	8003d2a <osThreadNew+0x3e>
 8003d22:	4b44      	ldr	r3, [pc, #272]	; (8003e34 <osThreadNew+0x148>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d07e      	beq.n	8003e28 <osThreadNew+0x13c>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d07b      	beq.n	8003e28 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8003d30:	2380      	movs	r3, #128	; 0x80
 8003d32:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8003d34:	2318      	movs	r3, #24
 8003d36:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8003d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8003d40:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d045      	beq.n	8003dd4 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d002      	beq.n	8003d56 <osThreadNew+0x6a>
        name = attr->name;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d002      	beq.n	8003d64 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	699b      	ldr	r3, [r3, #24]
 8003d62:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d008      	beq.n	8003d7c <osThreadNew+0x90>
 8003d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6c:	2b38      	cmp	r3, #56	; 0x38
 8003d6e:	d805      	bhi.n	8003d7c <osThreadNew+0x90>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f003 0301 	and.w	r3, r3, #1
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d001      	beq.n	8003d80 <osThreadNew+0x94>
        return (NULL);
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	e054      	b.n	8003e2a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	695b      	ldr	r3, [r3, #20]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d003      	beq.n	8003d90 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	695b      	ldr	r3, [r3, #20]
 8003d8c:	089b      	lsrs	r3, r3, #2
 8003d8e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d00e      	beq.n	8003db6 <osThreadNew+0xca>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	2b5b      	cmp	r3, #91	; 0x5b
 8003d9e:	d90a      	bls.n	8003db6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d006      	beq.n	8003db6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	695b      	ldr	r3, [r3, #20]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d002      	beq.n	8003db6 <osThreadNew+0xca>
        mem = 1;
 8003db0:	2301      	movs	r3, #1
 8003db2:	623b      	str	r3, [r7, #32]
 8003db4:	e010      	b.n	8003dd8 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d10c      	bne.n	8003dd8 <osThreadNew+0xec>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d108      	bne.n	8003dd8 <osThreadNew+0xec>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d104      	bne.n	8003dd8 <osThreadNew+0xec>
          mem = 0;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	623b      	str	r3, [r7, #32]
 8003dd2:	e001      	b.n	8003dd8 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8003dd8:	6a3b      	ldr	r3, [r7, #32]
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d110      	bne.n	8003e00 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003de6:	9202      	str	r2, [sp, #8]
 8003de8:	9301      	str	r3, [sp, #4]
 8003dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dec:	9300      	str	r3, [sp, #0]
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003df2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003df4:	68f8      	ldr	r0, [r7, #12]
 8003df6:	f000 fe93 	bl	8004b20 <xTaskCreateStatic>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	613b      	str	r3, [r7, #16]
 8003dfe:	e013      	b.n	8003e28 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8003e00:	6a3b      	ldr	r3, [r7, #32]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d110      	bne.n	8003e28 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e08:	b29a      	uxth	r2, r3
 8003e0a:	f107 0310 	add.w	r3, r7, #16
 8003e0e:	9301      	str	r3, [sp, #4]
 8003e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e12:	9300      	str	r3, [sp, #0]
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e18:	68f8      	ldr	r0, [r7, #12]
 8003e1a:	f000 fee1 	bl	8004be0 <xTaskCreate>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d001      	beq.n	8003e28 <osThreadNew+0x13c>
          hTask = NULL;
 8003e24:	2300      	movs	r3, #0
 8003e26:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003e28:	693b      	ldr	r3, [r7, #16]
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3730      	adds	r7, #48	; 0x30
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	20000030 	.word	0x20000030

08003e38 <osThreadSuspend>:
  }

  return (stat);
}

osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b088      	sub	sp, #32
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e44:	f3ef 8305 	mrs	r3, IPSR
 8003e48:	617b      	str	r3, [r7, #20]
  return(result);
 8003e4a:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d10f      	bne.n	8003e70 <osThreadSuspend+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e50:	f3ef 8310 	mrs	r3, PRIMASK
 8003e54:	613b      	str	r3, [r7, #16]
  return(result);
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d105      	bne.n	8003e68 <osThreadSuspend+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003e5c:	f3ef 8311 	mrs	r3, BASEPRI
 8003e60:	60fb      	str	r3, [r7, #12]
  return(result);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d007      	beq.n	8003e78 <osThreadSuspend+0x40>
 8003e68:	4b0c      	ldr	r3, [pc, #48]	; (8003e9c <osThreadSuspend+0x64>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d103      	bne.n	8003e78 <osThreadSuspend+0x40>
    stat = osErrorISR;
 8003e70:	f06f 0305 	mvn.w	r3, #5
 8003e74:	61fb      	str	r3, [r7, #28]
 8003e76:	e00b      	b.n	8003e90 <osThreadSuspend+0x58>
  }
  else if (hTask == NULL) {
 8003e78:	69bb      	ldr	r3, [r7, #24]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d103      	bne.n	8003e86 <osThreadSuspend+0x4e>
    stat = osErrorParameter;
 8003e7e:	f06f 0303 	mvn.w	r3, #3
 8003e82:	61fb      	str	r3, [r7, #28]
 8003e84:	e004      	b.n	8003e90 <osThreadSuspend+0x58>
  }
  else {
    stat = osOK;
 8003e86:	2300      	movs	r3, #0
 8003e88:	61fb      	str	r3, [r7, #28]
    vTaskSuspend (hTask);
 8003e8a:	69b8      	ldr	r0, [r7, #24]
 8003e8c:	f001 f824 	bl	8004ed8 <vTaskSuspend>
  }

  return (stat);
 8003e90:	69fb      	ldr	r3, [r7, #28]
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3720      	adds	r7, #32
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	20000030 	.word	0x20000030

08003ea0 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b088      	sub	sp, #32
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003eac:	f3ef 8305 	mrs	r3, IPSR
 8003eb0:	617b      	str	r3, [r7, #20]
  return(result);
 8003eb2:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d10f      	bne.n	8003ed8 <osThreadResume+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003eb8:	f3ef 8310 	mrs	r3, PRIMASK
 8003ebc:	613b      	str	r3, [r7, #16]
  return(result);
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d105      	bne.n	8003ed0 <osThreadResume+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003ec4:	f3ef 8311 	mrs	r3, BASEPRI
 8003ec8:	60fb      	str	r3, [r7, #12]
  return(result);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d007      	beq.n	8003ee0 <osThreadResume+0x40>
 8003ed0:	4b0c      	ldr	r3, [pc, #48]	; (8003f04 <osThreadResume+0x64>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d103      	bne.n	8003ee0 <osThreadResume+0x40>
    stat = osErrorISR;
 8003ed8:	f06f 0305 	mvn.w	r3, #5
 8003edc:	61fb      	str	r3, [r7, #28]
 8003ede:	e00b      	b.n	8003ef8 <osThreadResume+0x58>
  }
  else if (hTask == NULL) {
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d103      	bne.n	8003eee <osThreadResume+0x4e>
    stat = osErrorParameter;
 8003ee6:	f06f 0303 	mvn.w	r3, #3
 8003eea:	61fb      	str	r3, [r7, #28]
 8003eec:	e004      	b.n	8003ef8 <osThreadResume+0x58>
  }
  else {
    stat = osOK;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	61fb      	str	r3, [r7, #28]
    vTaskResume (hTask);
 8003ef2:	69b8      	ldr	r0, [r7, #24]
 8003ef4:	f001 f898 	bl	8005028 <vTaskResume>
  }

  return (stat);
 8003ef8:	69fb      	ldr	r3, [r7, #28]
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3720      	adds	r7, #32
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	20000030 	.word	0x20000030

08003f08 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b086      	sub	sp, #24
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f10:	f3ef 8305 	mrs	r3, IPSR
 8003f14:	613b      	str	r3, [r7, #16]
  return(result);
 8003f16:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d10f      	bne.n	8003f3c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f1c:	f3ef 8310 	mrs	r3, PRIMASK
 8003f20:	60fb      	str	r3, [r7, #12]
  return(result);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d105      	bne.n	8003f34 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003f28:	f3ef 8311 	mrs	r3, BASEPRI
 8003f2c:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d007      	beq.n	8003f44 <osDelay+0x3c>
 8003f34:	4b0a      	ldr	r3, [pc, #40]	; (8003f60 <osDelay+0x58>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d103      	bne.n	8003f44 <osDelay+0x3c>
    stat = osErrorISR;
 8003f3c:	f06f 0305 	mvn.w	r3, #5
 8003f40:	617b      	str	r3, [r7, #20]
 8003f42:	e007      	b.n	8003f54 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003f44:	2300      	movs	r3, #0
 8003f46:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d002      	beq.n	8003f54 <osDelay+0x4c>
      vTaskDelay(ticks);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 ff8c 	bl	8004e6c <vTaskDelay>
    }
  }

  return (stat);
 8003f54:	697b      	ldr	r3, [r7, #20]
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3718      	adds	r7, #24
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	20000030 	.word	0x20000030

08003f64 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003f64:	b480      	push	{r7}
 8003f66:	b085      	sub	sp, #20
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	4a07      	ldr	r2, [pc, #28]	; (8003f90 <vApplicationGetIdleTaskMemory+0x2c>)
 8003f74:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	4a06      	ldr	r2, [pc, #24]	; (8003f94 <vApplicationGetIdleTaskMemory+0x30>)
 8003f7a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2280      	movs	r2, #128	; 0x80
 8003f80:	601a      	str	r2, [r3, #0]
}
 8003f82:	bf00      	nop
 8003f84:	3714      	adds	r7, #20
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr
 8003f8e:	bf00      	nop
 8003f90:	20000034 	.word	0x20000034
 8003f94:	20000090 	.word	0x20000090

08003f98 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003f98:	b480      	push	{r7}
 8003f9a:	b085      	sub	sp, #20
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	60b9      	str	r1, [r7, #8]
 8003fa2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	4a07      	ldr	r2, [pc, #28]	; (8003fc4 <vApplicationGetTimerTaskMemory+0x2c>)
 8003fa8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	4a06      	ldr	r2, [pc, #24]	; (8003fc8 <vApplicationGetTimerTaskMemory+0x30>)
 8003fae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fb6:	601a      	str	r2, [r3, #0]
}
 8003fb8:	bf00      	nop
 8003fba:	3714      	adds	r7, #20
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr
 8003fc4:	20000290 	.word	0x20000290
 8003fc8:	200002ec 	.word	0x200002ec

08003fcc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f103 0208 	add.w	r2, r3, #8
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f04f 32ff 	mov.w	r2, #4294967295
 8003fe4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f103 0208 	add.w	r2, r3, #8
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f103 0208 	add.w	r2, r3, #8
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004000:	bf00      	nop
 8004002:	370c      	adds	r7, #12
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr

0800400c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800401a:	bf00      	nop
 800401c:	370c      	adds	r7, #12
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr

08004026 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004026:	b480      	push	{r7}
 8004028:	b085      	sub	sp, #20
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
 800402e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	68fa      	ldr	r2, [r7, #12]
 800403a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	689a      	ldr	r2, [r3, #8]
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	683a      	ldr	r2, [r7, #0]
 800404a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	683a      	ldr	r2, [r7, #0]
 8004050:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	1c5a      	adds	r2, r3, #1
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	601a      	str	r2, [r3, #0]
}
 8004062:	bf00      	nop
 8004064:	3714      	adds	r7, #20
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr

0800406e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800406e:	b480      	push	{r7}
 8004070:	b085      	sub	sp, #20
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
 8004076:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004084:	d103      	bne.n	800408e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	60fb      	str	r3, [r7, #12]
 800408c:	e00c      	b.n	80040a8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	3308      	adds	r3, #8
 8004092:	60fb      	str	r3, [r7, #12]
 8004094:	e002      	b.n	800409c <vListInsert+0x2e>
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	60fb      	str	r3, [r7, #12]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	68ba      	ldr	r2, [r7, #8]
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d2f6      	bcs.n	8004096 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	685a      	ldr	r2, [r3, #4]
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	683a      	ldr	r2, [r7, #0]
 80040b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	68fa      	ldr	r2, [r7, #12]
 80040bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	683a      	ldr	r2, [r7, #0]
 80040c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	1c5a      	adds	r2, r3, #1
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	601a      	str	r2, [r3, #0]
}
 80040d4:	bf00      	nop
 80040d6:	3714      	adds	r7, #20
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80040e0:	b480      	push	{r7}
 80040e2:	b085      	sub	sp, #20
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	691b      	ldr	r3, [r3, #16]
 80040ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	6892      	ldr	r2, [r2, #8]
 80040f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	6852      	ldr	r2, [r2, #4]
 8004100:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	429a      	cmp	r2, r3
 800410a:	d103      	bne.n	8004114 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	689a      	ldr	r2, [r3, #8]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	1e5a      	subs	r2, r3, #1
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
}
 8004128:	4618      	mov	r0, r3
 800412a:	3714      	adds	r7, #20
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d10b      	bne.n	8004160 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800414c:	b672      	cpsid	i
 800414e:	f383 8811 	msr	BASEPRI, r3
 8004152:	f3bf 8f6f 	isb	sy
 8004156:	f3bf 8f4f 	dsb	sy
 800415a:	b662      	cpsie	i
 800415c:	60bb      	str	r3, [r7, #8]
 800415e:	e7fe      	b.n	800415e <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8004160:	f002 f962 	bl	8006428 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800416c:	68f9      	ldr	r1, [r7, #12]
 800416e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004170:	fb01 f303 	mul.w	r3, r1, r3
 8004174:	441a      	add	r2, r3
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2200      	movs	r2, #0
 800417e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004190:	3b01      	subs	r3, #1
 8004192:	68f9      	ldr	r1, [r7, #12]
 8004194:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004196:	fb01 f303 	mul.w	r3, r1, r3
 800419a:	441a      	add	r2, r3
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	22ff      	movs	r2, #255	; 0xff
 80041a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	22ff      	movs	r2, #255	; 0xff
 80041ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d114      	bne.n	80041e0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d01a      	beq.n	80041f4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	3310      	adds	r3, #16
 80041c2:	4618      	mov	r0, r3
 80041c4:	f001 fa30 	bl	8005628 <xTaskRemoveFromEventList>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d012      	beq.n	80041f4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80041ce:	4b0d      	ldr	r3, [pc, #52]	; (8004204 <xQueueGenericReset+0xd0>)
 80041d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041d4:	601a      	str	r2, [r3, #0]
 80041d6:	f3bf 8f4f 	dsb	sy
 80041da:	f3bf 8f6f 	isb	sy
 80041de:	e009      	b.n	80041f4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	3310      	adds	r3, #16
 80041e4:	4618      	mov	r0, r3
 80041e6:	f7ff fef1 	bl	8003fcc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	3324      	adds	r3, #36	; 0x24
 80041ee:	4618      	mov	r0, r3
 80041f0:	f7ff feec 	bl	8003fcc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80041f4:	f002 f94a 	bl	800648c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80041f8:	2301      	movs	r3, #1
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3710      	adds	r7, #16
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	e000ed04 	.word	0xe000ed04

08004208 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004208:	b580      	push	{r7, lr}
 800420a:	b08e      	sub	sp, #56	; 0x38
 800420c:	af02      	add	r7, sp, #8
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	607a      	str	r2, [r7, #4]
 8004214:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d10b      	bne.n	8004234 <xQueueGenericCreateStatic+0x2c>
 800421c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004220:	b672      	cpsid	i
 8004222:	f383 8811 	msr	BASEPRI, r3
 8004226:	f3bf 8f6f 	isb	sy
 800422a:	f3bf 8f4f 	dsb	sy
 800422e:	b662      	cpsie	i
 8004230:	62bb      	str	r3, [r7, #40]	; 0x28
 8004232:	e7fe      	b.n	8004232 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d10b      	bne.n	8004252 <xQueueGenericCreateStatic+0x4a>
 800423a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800423e:	b672      	cpsid	i
 8004240:	f383 8811 	msr	BASEPRI, r3
 8004244:	f3bf 8f6f 	isb	sy
 8004248:	f3bf 8f4f 	dsb	sy
 800424c:	b662      	cpsie	i
 800424e:	627b      	str	r3, [r7, #36]	; 0x24
 8004250:	e7fe      	b.n	8004250 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d002      	beq.n	800425e <xQueueGenericCreateStatic+0x56>
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d001      	beq.n	8004262 <xQueueGenericCreateStatic+0x5a>
 800425e:	2301      	movs	r3, #1
 8004260:	e000      	b.n	8004264 <xQueueGenericCreateStatic+0x5c>
 8004262:	2300      	movs	r3, #0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d10b      	bne.n	8004280 <xQueueGenericCreateStatic+0x78>
 8004268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800426c:	b672      	cpsid	i
 800426e:	f383 8811 	msr	BASEPRI, r3
 8004272:	f3bf 8f6f 	isb	sy
 8004276:	f3bf 8f4f 	dsb	sy
 800427a:	b662      	cpsie	i
 800427c:	623b      	str	r3, [r7, #32]
 800427e:	e7fe      	b.n	800427e <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d102      	bne.n	800428c <xQueueGenericCreateStatic+0x84>
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d101      	bne.n	8004290 <xQueueGenericCreateStatic+0x88>
 800428c:	2301      	movs	r3, #1
 800428e:	e000      	b.n	8004292 <xQueueGenericCreateStatic+0x8a>
 8004290:	2300      	movs	r3, #0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d10b      	bne.n	80042ae <xQueueGenericCreateStatic+0xa6>
 8004296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800429a:	b672      	cpsid	i
 800429c:	f383 8811 	msr	BASEPRI, r3
 80042a0:	f3bf 8f6f 	isb	sy
 80042a4:	f3bf 8f4f 	dsb	sy
 80042a8:	b662      	cpsie	i
 80042aa:	61fb      	str	r3, [r7, #28]
 80042ac:	e7fe      	b.n	80042ac <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80042ae:	2350      	movs	r3, #80	; 0x50
 80042b0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	2b50      	cmp	r3, #80	; 0x50
 80042b6:	d00b      	beq.n	80042d0 <xQueueGenericCreateStatic+0xc8>
 80042b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042bc:	b672      	cpsid	i
 80042be:	f383 8811 	msr	BASEPRI, r3
 80042c2:	f3bf 8f6f 	isb	sy
 80042c6:	f3bf 8f4f 	dsb	sy
 80042ca:	b662      	cpsie	i
 80042cc:	61bb      	str	r3, [r7, #24]
 80042ce:	e7fe      	b.n	80042ce <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80042d0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80042d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d00d      	beq.n	80042f8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80042dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80042e4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80042e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ea:	9300      	str	r3, [sp, #0]
 80042ec:	4613      	mov	r3, r2
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	68b9      	ldr	r1, [r7, #8]
 80042f2:	68f8      	ldr	r0, [r7, #12]
 80042f4:	f000 f805 	bl	8004302 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80042f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3730      	adds	r7, #48	; 0x30
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}

08004302 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004302:	b580      	push	{r7, lr}
 8004304:	b084      	sub	sp, #16
 8004306:	af00      	add	r7, sp, #0
 8004308:	60f8      	str	r0, [r7, #12]
 800430a:	60b9      	str	r1, [r7, #8]
 800430c:	607a      	str	r2, [r7, #4]
 800430e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d103      	bne.n	800431e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	69ba      	ldr	r2, [r7, #24]
 800431a:	601a      	str	r2, [r3, #0]
 800431c:	e002      	b.n	8004324 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004324:	69bb      	ldr	r3, [r7, #24]
 8004326:	68fa      	ldr	r2, [r7, #12]
 8004328:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800432a:	69bb      	ldr	r3, [r7, #24]
 800432c:	68ba      	ldr	r2, [r7, #8]
 800432e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004330:	2101      	movs	r1, #1
 8004332:	69b8      	ldr	r0, [r7, #24]
 8004334:	f7ff fefe 	bl	8004134 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	78fa      	ldrb	r2, [r7, #3]
 800433c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004340:	bf00      	nop
 8004342:	3710      	adds	r7, #16
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b08e      	sub	sp, #56	; 0x38
 800434c:	af00      	add	r7, sp, #0
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	607a      	str	r2, [r7, #4]
 8004354:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004356:	2300      	movs	r3, #0
 8004358:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800435e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004360:	2b00      	cmp	r3, #0
 8004362:	d10b      	bne.n	800437c <xQueueGenericSend+0x34>
 8004364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004368:	b672      	cpsid	i
 800436a:	f383 8811 	msr	BASEPRI, r3
 800436e:	f3bf 8f6f 	isb	sy
 8004372:	f3bf 8f4f 	dsb	sy
 8004376:	b662      	cpsie	i
 8004378:	62bb      	str	r3, [r7, #40]	; 0x28
 800437a:	e7fe      	b.n	800437a <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d103      	bne.n	800438a <xQueueGenericSend+0x42>
 8004382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004386:	2b00      	cmp	r3, #0
 8004388:	d101      	bne.n	800438e <xQueueGenericSend+0x46>
 800438a:	2301      	movs	r3, #1
 800438c:	e000      	b.n	8004390 <xQueueGenericSend+0x48>
 800438e:	2300      	movs	r3, #0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d10b      	bne.n	80043ac <xQueueGenericSend+0x64>
 8004394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004398:	b672      	cpsid	i
 800439a:	f383 8811 	msr	BASEPRI, r3
 800439e:	f3bf 8f6f 	isb	sy
 80043a2:	f3bf 8f4f 	dsb	sy
 80043a6:	b662      	cpsie	i
 80043a8:	627b      	str	r3, [r7, #36]	; 0x24
 80043aa:	e7fe      	b.n	80043aa <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d103      	bne.n	80043ba <xQueueGenericSend+0x72>
 80043b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d101      	bne.n	80043be <xQueueGenericSend+0x76>
 80043ba:	2301      	movs	r3, #1
 80043bc:	e000      	b.n	80043c0 <xQueueGenericSend+0x78>
 80043be:	2300      	movs	r3, #0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d10b      	bne.n	80043dc <xQueueGenericSend+0x94>
 80043c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c8:	b672      	cpsid	i
 80043ca:	f383 8811 	msr	BASEPRI, r3
 80043ce:	f3bf 8f6f 	isb	sy
 80043d2:	f3bf 8f4f 	dsb	sy
 80043d6:	b662      	cpsie	i
 80043d8:	623b      	str	r3, [r7, #32]
 80043da:	e7fe      	b.n	80043da <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80043dc:	f001 fae2 	bl	80059a4 <xTaskGetSchedulerState>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d102      	bne.n	80043ec <xQueueGenericSend+0xa4>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d101      	bne.n	80043f0 <xQueueGenericSend+0xa8>
 80043ec:	2301      	movs	r3, #1
 80043ee:	e000      	b.n	80043f2 <xQueueGenericSend+0xaa>
 80043f0:	2300      	movs	r3, #0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d10b      	bne.n	800440e <xQueueGenericSend+0xc6>
 80043f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043fa:	b672      	cpsid	i
 80043fc:	f383 8811 	msr	BASEPRI, r3
 8004400:	f3bf 8f6f 	isb	sy
 8004404:	f3bf 8f4f 	dsb	sy
 8004408:	b662      	cpsie	i
 800440a:	61fb      	str	r3, [r7, #28]
 800440c:	e7fe      	b.n	800440c <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800440e:	f002 f80b 	bl	8006428 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004414:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800441a:	429a      	cmp	r2, r3
 800441c:	d302      	bcc.n	8004424 <xQueueGenericSend+0xdc>
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	2b02      	cmp	r3, #2
 8004422:	d129      	bne.n	8004478 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004424:	683a      	ldr	r2, [r7, #0]
 8004426:	68b9      	ldr	r1, [r7, #8]
 8004428:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800442a:	f000 fa0d 	bl	8004848 <prvCopyDataToQueue>
 800442e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004434:	2b00      	cmp	r3, #0
 8004436:	d010      	beq.n	800445a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800443a:	3324      	adds	r3, #36	; 0x24
 800443c:	4618      	mov	r0, r3
 800443e:	f001 f8f3 	bl	8005628 <xTaskRemoveFromEventList>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d013      	beq.n	8004470 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004448:	4b3f      	ldr	r3, [pc, #252]	; (8004548 <xQueueGenericSend+0x200>)
 800444a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800444e:	601a      	str	r2, [r3, #0]
 8004450:	f3bf 8f4f 	dsb	sy
 8004454:	f3bf 8f6f 	isb	sy
 8004458:	e00a      	b.n	8004470 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800445a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800445c:	2b00      	cmp	r3, #0
 800445e:	d007      	beq.n	8004470 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004460:	4b39      	ldr	r3, [pc, #228]	; (8004548 <xQueueGenericSend+0x200>)
 8004462:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004466:	601a      	str	r2, [r3, #0]
 8004468:	f3bf 8f4f 	dsb	sy
 800446c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004470:	f002 f80c 	bl	800648c <vPortExitCritical>
				return pdPASS;
 8004474:	2301      	movs	r3, #1
 8004476:	e063      	b.n	8004540 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d103      	bne.n	8004486 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800447e:	f002 f805 	bl	800648c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004482:	2300      	movs	r3, #0
 8004484:	e05c      	b.n	8004540 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004488:	2b00      	cmp	r3, #0
 800448a:	d106      	bne.n	800449a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800448c:	f107 0314 	add.w	r3, r7, #20
 8004490:	4618      	mov	r0, r3
 8004492:	f001 f92d 	bl	80056f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004496:	2301      	movs	r3, #1
 8004498:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800449a:	f001 fff7 	bl	800648c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800449e:	f000 fe8b 	bl	80051b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80044a2:	f001 ffc1 	bl	8006428 <vPortEnterCritical>
 80044a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80044ac:	b25b      	sxtb	r3, r3
 80044ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044b2:	d103      	bne.n	80044bc <xQueueGenericSend+0x174>
 80044b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b6:	2200      	movs	r2, #0
 80044b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80044c2:	b25b      	sxtb	r3, r3
 80044c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044c8:	d103      	bne.n	80044d2 <xQueueGenericSend+0x18a>
 80044ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80044d2:	f001 ffdb 	bl	800648c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80044d6:	1d3a      	adds	r2, r7, #4
 80044d8:	f107 0314 	add.w	r3, r7, #20
 80044dc:	4611      	mov	r1, r2
 80044de:	4618      	mov	r0, r3
 80044e0:	f001 f91c 	bl	800571c <xTaskCheckForTimeOut>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d124      	bne.n	8004534 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80044ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044ec:	f000 faa4 	bl	8004a38 <prvIsQueueFull>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d018      	beq.n	8004528 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80044f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f8:	3310      	adds	r3, #16
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	4611      	mov	r1, r2
 80044fe:	4618      	mov	r0, r3
 8004500:	f001 f840 	bl	8005584 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004504:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004506:	f000 fa2f 	bl	8004968 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800450a:	f000 fe63 	bl	80051d4 <xTaskResumeAll>
 800450e:	4603      	mov	r3, r0
 8004510:	2b00      	cmp	r3, #0
 8004512:	f47f af7c 	bne.w	800440e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004516:	4b0c      	ldr	r3, [pc, #48]	; (8004548 <xQueueGenericSend+0x200>)
 8004518:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800451c:	601a      	str	r2, [r3, #0]
 800451e:	f3bf 8f4f 	dsb	sy
 8004522:	f3bf 8f6f 	isb	sy
 8004526:	e772      	b.n	800440e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004528:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800452a:	f000 fa1d 	bl	8004968 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800452e:	f000 fe51 	bl	80051d4 <xTaskResumeAll>
 8004532:	e76c      	b.n	800440e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004534:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004536:	f000 fa17 	bl	8004968 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800453a:	f000 fe4b 	bl	80051d4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800453e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004540:	4618      	mov	r0, r3
 8004542:	3738      	adds	r7, #56	; 0x38
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}
 8004548:	e000ed04 	.word	0xe000ed04

0800454c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b08e      	sub	sp, #56	; 0x38
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	607a      	str	r2, [r7, #4]
 8004558:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800455e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004560:	2b00      	cmp	r3, #0
 8004562:	d10b      	bne.n	800457c <xQueueGenericSendFromISR+0x30>
 8004564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004568:	b672      	cpsid	i
 800456a:	f383 8811 	msr	BASEPRI, r3
 800456e:	f3bf 8f6f 	isb	sy
 8004572:	f3bf 8f4f 	dsb	sy
 8004576:	b662      	cpsie	i
 8004578:	627b      	str	r3, [r7, #36]	; 0x24
 800457a:	e7fe      	b.n	800457a <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d103      	bne.n	800458a <xQueueGenericSendFromISR+0x3e>
 8004582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004586:	2b00      	cmp	r3, #0
 8004588:	d101      	bne.n	800458e <xQueueGenericSendFromISR+0x42>
 800458a:	2301      	movs	r3, #1
 800458c:	e000      	b.n	8004590 <xQueueGenericSendFromISR+0x44>
 800458e:	2300      	movs	r3, #0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d10b      	bne.n	80045ac <xQueueGenericSendFromISR+0x60>
 8004594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004598:	b672      	cpsid	i
 800459a:	f383 8811 	msr	BASEPRI, r3
 800459e:	f3bf 8f6f 	isb	sy
 80045a2:	f3bf 8f4f 	dsb	sy
 80045a6:	b662      	cpsie	i
 80045a8:	623b      	str	r3, [r7, #32]
 80045aa:	e7fe      	b.n	80045aa <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d103      	bne.n	80045ba <xQueueGenericSendFromISR+0x6e>
 80045b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d101      	bne.n	80045be <xQueueGenericSendFromISR+0x72>
 80045ba:	2301      	movs	r3, #1
 80045bc:	e000      	b.n	80045c0 <xQueueGenericSendFromISR+0x74>
 80045be:	2300      	movs	r3, #0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d10b      	bne.n	80045dc <xQueueGenericSendFromISR+0x90>
 80045c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c8:	b672      	cpsid	i
 80045ca:	f383 8811 	msr	BASEPRI, r3
 80045ce:	f3bf 8f6f 	isb	sy
 80045d2:	f3bf 8f4f 	dsb	sy
 80045d6:	b662      	cpsie	i
 80045d8:	61fb      	str	r3, [r7, #28]
 80045da:	e7fe      	b.n	80045da <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80045dc:	f002 f804 	bl	80065e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80045e0:	f3ef 8211 	mrs	r2, BASEPRI
 80045e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e8:	b672      	cpsid	i
 80045ea:	f383 8811 	msr	BASEPRI, r3
 80045ee:	f3bf 8f6f 	isb	sy
 80045f2:	f3bf 8f4f 	dsb	sy
 80045f6:	b662      	cpsie	i
 80045f8:	61ba      	str	r2, [r7, #24]
 80045fa:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80045fc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80045fe:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004602:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004608:	429a      	cmp	r2, r3
 800460a:	d302      	bcc.n	8004612 <xQueueGenericSendFromISR+0xc6>
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	2b02      	cmp	r3, #2
 8004610:	d12c      	bne.n	800466c <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004614:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004618:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800461c:	683a      	ldr	r2, [r7, #0]
 800461e:	68b9      	ldr	r1, [r7, #8]
 8004620:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004622:	f000 f911 	bl	8004848 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004626:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800462a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800462e:	d112      	bne.n	8004656 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004634:	2b00      	cmp	r3, #0
 8004636:	d016      	beq.n	8004666 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800463a:	3324      	adds	r3, #36	; 0x24
 800463c:	4618      	mov	r0, r3
 800463e:	f000 fff3 	bl	8005628 <xTaskRemoveFromEventList>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d00e      	beq.n	8004666 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d00b      	beq.n	8004666 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2201      	movs	r2, #1
 8004652:	601a      	str	r2, [r3, #0]
 8004654:	e007      	b.n	8004666 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004656:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800465a:	3301      	adds	r3, #1
 800465c:	b2db      	uxtb	r3, r3
 800465e:	b25a      	sxtb	r2, r3
 8004660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004662:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004666:	2301      	movs	r3, #1
 8004668:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800466a:	e001      	b.n	8004670 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800466c:	2300      	movs	r3, #0
 800466e:	637b      	str	r3, [r7, #52]	; 0x34
 8004670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004672:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800467a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800467c:	4618      	mov	r0, r3
 800467e:	3738      	adds	r7, #56	; 0x38
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}

08004684 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b08c      	sub	sp, #48	; 0x30
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004690:	2300      	movs	r3, #0
 8004692:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800469a:	2b00      	cmp	r3, #0
 800469c:	d10b      	bne.n	80046b6 <xQueueReceive+0x32>
	__asm volatile
 800469e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a2:	b672      	cpsid	i
 80046a4:	f383 8811 	msr	BASEPRI, r3
 80046a8:	f3bf 8f6f 	isb	sy
 80046ac:	f3bf 8f4f 	dsb	sy
 80046b0:	b662      	cpsie	i
 80046b2:	623b      	str	r3, [r7, #32]
 80046b4:	e7fe      	b.n	80046b4 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d103      	bne.n	80046c4 <xQueueReceive+0x40>
 80046bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d101      	bne.n	80046c8 <xQueueReceive+0x44>
 80046c4:	2301      	movs	r3, #1
 80046c6:	e000      	b.n	80046ca <xQueueReceive+0x46>
 80046c8:	2300      	movs	r3, #0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d10b      	bne.n	80046e6 <xQueueReceive+0x62>
 80046ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d2:	b672      	cpsid	i
 80046d4:	f383 8811 	msr	BASEPRI, r3
 80046d8:	f3bf 8f6f 	isb	sy
 80046dc:	f3bf 8f4f 	dsb	sy
 80046e0:	b662      	cpsie	i
 80046e2:	61fb      	str	r3, [r7, #28]
 80046e4:	e7fe      	b.n	80046e4 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80046e6:	f001 f95d 	bl	80059a4 <xTaskGetSchedulerState>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d102      	bne.n	80046f6 <xQueueReceive+0x72>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d101      	bne.n	80046fa <xQueueReceive+0x76>
 80046f6:	2301      	movs	r3, #1
 80046f8:	e000      	b.n	80046fc <xQueueReceive+0x78>
 80046fa:	2300      	movs	r3, #0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d10b      	bne.n	8004718 <xQueueReceive+0x94>
 8004700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004704:	b672      	cpsid	i
 8004706:	f383 8811 	msr	BASEPRI, r3
 800470a:	f3bf 8f6f 	isb	sy
 800470e:	f3bf 8f4f 	dsb	sy
 8004712:	b662      	cpsie	i
 8004714:	61bb      	str	r3, [r7, #24]
 8004716:	e7fe      	b.n	8004716 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004718:	f001 fe86 	bl	8006428 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800471c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800471e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004720:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004724:	2b00      	cmp	r3, #0
 8004726:	d01f      	beq.n	8004768 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004728:	68b9      	ldr	r1, [r7, #8]
 800472a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800472c:	f000 f8f6 	bl	800491c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004732:	1e5a      	subs	r2, r3, #1
 8004734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004736:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800473a:	691b      	ldr	r3, [r3, #16]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d00f      	beq.n	8004760 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004742:	3310      	adds	r3, #16
 8004744:	4618      	mov	r0, r3
 8004746:	f000 ff6f 	bl	8005628 <xTaskRemoveFromEventList>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d007      	beq.n	8004760 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004750:	4b3c      	ldr	r3, [pc, #240]	; (8004844 <xQueueReceive+0x1c0>)
 8004752:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004756:	601a      	str	r2, [r3, #0]
 8004758:	f3bf 8f4f 	dsb	sy
 800475c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004760:	f001 fe94 	bl	800648c <vPortExitCritical>
				return pdPASS;
 8004764:	2301      	movs	r3, #1
 8004766:	e069      	b.n	800483c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d103      	bne.n	8004776 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800476e:	f001 fe8d 	bl	800648c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004772:	2300      	movs	r3, #0
 8004774:	e062      	b.n	800483c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004778:	2b00      	cmp	r3, #0
 800477a:	d106      	bne.n	800478a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800477c:	f107 0310 	add.w	r3, r7, #16
 8004780:	4618      	mov	r0, r3
 8004782:	f000 ffb5 	bl	80056f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004786:	2301      	movs	r3, #1
 8004788:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800478a:	f001 fe7f 	bl	800648c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800478e:	f000 fd13 	bl	80051b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004792:	f001 fe49 	bl	8006428 <vPortEnterCritical>
 8004796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004798:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800479c:	b25b      	sxtb	r3, r3
 800479e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047a2:	d103      	bne.n	80047ac <xQueueReceive+0x128>
 80047a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047b2:	b25b      	sxtb	r3, r3
 80047b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047b8:	d103      	bne.n	80047c2 <xQueueReceive+0x13e>
 80047ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047c2:	f001 fe63 	bl	800648c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80047c6:	1d3a      	adds	r2, r7, #4
 80047c8:	f107 0310 	add.w	r3, r7, #16
 80047cc:	4611      	mov	r1, r2
 80047ce:	4618      	mov	r0, r3
 80047d0:	f000 ffa4 	bl	800571c <xTaskCheckForTimeOut>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d123      	bne.n	8004822 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80047da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047dc:	f000 f916 	bl	8004a0c <prvIsQueueEmpty>
 80047e0:	4603      	mov	r3, r0
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d017      	beq.n	8004816 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80047e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e8:	3324      	adds	r3, #36	; 0x24
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	4611      	mov	r1, r2
 80047ee:	4618      	mov	r0, r3
 80047f0:	f000 fec8 	bl	8005584 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80047f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047f6:	f000 f8b7 	bl	8004968 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80047fa:	f000 fceb 	bl	80051d4 <xTaskResumeAll>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d189      	bne.n	8004718 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004804:	4b0f      	ldr	r3, [pc, #60]	; (8004844 <xQueueReceive+0x1c0>)
 8004806:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800480a:	601a      	str	r2, [r3, #0]
 800480c:	f3bf 8f4f 	dsb	sy
 8004810:	f3bf 8f6f 	isb	sy
 8004814:	e780      	b.n	8004718 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004816:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004818:	f000 f8a6 	bl	8004968 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800481c:	f000 fcda 	bl	80051d4 <xTaskResumeAll>
 8004820:	e77a      	b.n	8004718 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004822:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004824:	f000 f8a0 	bl	8004968 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004828:	f000 fcd4 	bl	80051d4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800482c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800482e:	f000 f8ed 	bl	8004a0c <prvIsQueueEmpty>
 8004832:	4603      	mov	r3, r0
 8004834:	2b00      	cmp	r3, #0
 8004836:	f43f af6f 	beq.w	8004718 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800483a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800483c:	4618      	mov	r0, r3
 800483e:	3730      	adds	r7, #48	; 0x30
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}
 8004844:	e000ed04 	.word	0xe000ed04

08004848 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b086      	sub	sp, #24
 800484c:	af00      	add	r7, sp, #0
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	60b9      	str	r1, [r7, #8]
 8004852:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004854:	2300      	movs	r3, #0
 8004856:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800485c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004862:	2b00      	cmp	r3, #0
 8004864:	d10d      	bne.n	8004882 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d14d      	bne.n	800490a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	4618      	mov	r0, r3
 8004874:	f001 f8b4 	bl	80059e0 <xTaskPriorityDisinherit>
 8004878:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2200      	movs	r2, #0
 800487e:	609a      	str	r2, [r3, #8]
 8004880:	e043      	b.n	800490a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d119      	bne.n	80048bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6858      	ldr	r0, [r3, #4]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004890:	461a      	mov	r2, r3
 8004892:	68b9      	ldr	r1, [r7, #8]
 8004894:	f002 f8ee 	bl	8006a74 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	685a      	ldr	r2, [r3, #4]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a0:	441a      	add	r2, r3
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	685a      	ldr	r2, [r3, #4]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d32b      	bcc.n	800490a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	605a      	str	r2, [r3, #4]
 80048ba:	e026      	b.n	800490a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	68d8      	ldr	r0, [r3, #12]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c4:	461a      	mov	r2, r3
 80048c6:	68b9      	ldr	r1, [r7, #8]
 80048c8:	f002 f8d4 	bl	8006a74 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	68da      	ldr	r2, [r3, #12]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d4:	425b      	negs	r3, r3
 80048d6:	441a      	add	r2, r3
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	68da      	ldr	r2, [r3, #12]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d207      	bcs.n	80048f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	689a      	ldr	r2, [r3, #8]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f0:	425b      	negs	r3, r3
 80048f2:	441a      	add	r2, r3
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d105      	bne.n	800490a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d002      	beq.n	800490a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	3b01      	subs	r3, #1
 8004908:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	1c5a      	adds	r2, r3, #1
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004912:	697b      	ldr	r3, [r7, #20]
}
 8004914:	4618      	mov	r0, r3
 8004916:	3718      	adds	r7, #24
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}

0800491c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b082      	sub	sp, #8
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492a:	2b00      	cmp	r3, #0
 800492c:	d018      	beq.n	8004960 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	68da      	ldr	r2, [r3, #12]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004936:	441a      	add	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	68da      	ldr	r2, [r3, #12]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	429a      	cmp	r2, r3
 8004946:	d303      	bcc.n	8004950 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	68d9      	ldr	r1, [r3, #12]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004958:	461a      	mov	r2, r3
 800495a:	6838      	ldr	r0, [r7, #0]
 800495c:	f002 f88a 	bl	8006a74 <memcpy>
	}
}
 8004960:	bf00      	nop
 8004962:	3708      	adds	r7, #8
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}

08004968 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004970:	f001 fd5a 	bl	8006428 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800497a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800497c:	e011      	b.n	80049a2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004982:	2b00      	cmp	r3, #0
 8004984:	d012      	beq.n	80049ac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	3324      	adds	r3, #36	; 0x24
 800498a:	4618      	mov	r0, r3
 800498c:	f000 fe4c 	bl	8005628 <xTaskRemoveFromEventList>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d001      	beq.n	800499a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004996:	f000 ff25 	bl	80057e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800499a:	7bfb      	ldrb	r3, [r7, #15]
 800499c:	3b01      	subs	r3, #1
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80049a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	dce9      	bgt.n	800497e <prvUnlockQueue+0x16>
 80049aa:	e000      	b.n	80049ae <prvUnlockQueue+0x46>
					break;
 80049ac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	22ff      	movs	r2, #255	; 0xff
 80049b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80049b6:	f001 fd69 	bl	800648c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80049ba:	f001 fd35 	bl	8006428 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80049c4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80049c6:	e011      	b.n	80049ec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	691b      	ldr	r3, [r3, #16]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d012      	beq.n	80049f6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	3310      	adds	r3, #16
 80049d4:	4618      	mov	r0, r3
 80049d6:	f000 fe27 	bl	8005628 <xTaskRemoveFromEventList>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d001      	beq.n	80049e4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80049e0:	f000 ff00 	bl	80057e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80049e4:	7bbb      	ldrb	r3, [r7, #14]
 80049e6:	3b01      	subs	r3, #1
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80049ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	dce9      	bgt.n	80049c8 <prvUnlockQueue+0x60>
 80049f4:	e000      	b.n	80049f8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80049f6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	22ff      	movs	r2, #255	; 0xff
 80049fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004a00:	f001 fd44 	bl	800648c <vPortExitCritical>
}
 8004a04:	bf00      	nop
 8004a06:	3710      	adds	r7, #16
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004a14:	f001 fd08 	bl	8006428 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d102      	bne.n	8004a26 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004a20:	2301      	movs	r3, #1
 8004a22:	60fb      	str	r3, [r7, #12]
 8004a24:	e001      	b.n	8004a2a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004a26:	2300      	movs	r3, #0
 8004a28:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004a2a:	f001 fd2f 	bl	800648c <vPortExitCritical>

	return xReturn;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3710      	adds	r7, #16
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004a40:	f001 fcf2 	bl	8006428 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d102      	bne.n	8004a56 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004a50:	2301      	movs	r3, #1
 8004a52:	60fb      	str	r3, [r7, #12]
 8004a54:	e001      	b.n	8004a5a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004a56:	2300      	movs	r3, #0
 8004a58:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004a5a:	f001 fd17 	bl	800648c <vPortExitCritical>

	return xReturn;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3710      	adds	r7, #16
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004a68:	b480      	push	{r7}
 8004a6a:	b085      	sub	sp, #20
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004a72:	2300      	movs	r3, #0
 8004a74:	60fb      	str	r3, [r7, #12]
 8004a76:	e014      	b.n	8004aa2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004a78:	4a0e      	ldr	r2, [pc, #56]	; (8004ab4 <vQueueAddToRegistry+0x4c>)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d10b      	bne.n	8004a9c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004a84:	490b      	ldr	r1, [pc, #44]	; (8004ab4 <vQueueAddToRegistry+0x4c>)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	683a      	ldr	r2, [r7, #0]
 8004a8a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004a8e:	4a09      	ldr	r2, [pc, #36]	; (8004ab4 <vQueueAddToRegistry+0x4c>)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	00db      	lsls	r3, r3, #3
 8004a94:	4413      	add	r3, r2
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004a9a:	e005      	b.n	8004aa8 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	60fb      	str	r3, [r7, #12]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2b07      	cmp	r3, #7
 8004aa6:	d9e7      	bls.n	8004a78 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004aa8:	bf00      	nop
 8004aaa:	3714      	adds	r7, #20
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr
 8004ab4:	20004e08 	.word	0x20004e08

08004ab8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b086      	sub	sp, #24
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	60f8      	str	r0, [r7, #12]
 8004ac0:	60b9      	str	r1, [r7, #8]
 8004ac2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004ac8:	f001 fcae 	bl	8006428 <vPortEnterCritical>
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ad2:	b25b      	sxtb	r3, r3
 8004ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ad8:	d103      	bne.n	8004ae2 <vQueueWaitForMessageRestricted+0x2a>
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ae8:	b25b      	sxtb	r3, r3
 8004aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aee:	d103      	bne.n	8004af8 <vQueueWaitForMessageRestricted+0x40>
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	2200      	movs	r2, #0
 8004af4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004af8:	f001 fcc8 	bl	800648c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d106      	bne.n	8004b12 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	3324      	adds	r3, #36	; 0x24
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	68b9      	ldr	r1, [r7, #8]
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f000 fd5f 	bl	80055d0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004b12:	6978      	ldr	r0, [r7, #20]
 8004b14:	f7ff ff28 	bl	8004968 <prvUnlockQueue>
	}
 8004b18:	bf00      	nop
 8004b1a:	3718      	adds	r7, #24
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}

08004b20 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b08e      	sub	sp, #56	; 0x38
 8004b24:	af04      	add	r7, sp, #16
 8004b26:	60f8      	str	r0, [r7, #12]
 8004b28:	60b9      	str	r1, [r7, #8]
 8004b2a:	607a      	str	r2, [r7, #4]
 8004b2c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d10b      	bne.n	8004b4c <xTaskCreateStatic+0x2c>
 8004b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b38:	b672      	cpsid	i
 8004b3a:	f383 8811 	msr	BASEPRI, r3
 8004b3e:	f3bf 8f6f 	isb	sy
 8004b42:	f3bf 8f4f 	dsb	sy
 8004b46:	b662      	cpsie	i
 8004b48:	623b      	str	r3, [r7, #32]
 8004b4a:	e7fe      	b.n	8004b4a <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8004b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d10b      	bne.n	8004b6a <xTaskCreateStatic+0x4a>
 8004b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b56:	b672      	cpsid	i
 8004b58:	f383 8811 	msr	BASEPRI, r3
 8004b5c:	f3bf 8f6f 	isb	sy
 8004b60:	f3bf 8f4f 	dsb	sy
 8004b64:	b662      	cpsie	i
 8004b66:	61fb      	str	r3, [r7, #28]
 8004b68:	e7fe      	b.n	8004b68 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004b6a:	235c      	movs	r3, #92	; 0x5c
 8004b6c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	2b5c      	cmp	r3, #92	; 0x5c
 8004b72:	d00b      	beq.n	8004b8c <xTaskCreateStatic+0x6c>
 8004b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b78:	b672      	cpsid	i
 8004b7a:	f383 8811 	msr	BASEPRI, r3
 8004b7e:	f3bf 8f6f 	isb	sy
 8004b82:	f3bf 8f4f 	dsb	sy
 8004b86:	b662      	cpsie	i
 8004b88:	61bb      	str	r3, [r7, #24]
 8004b8a:	e7fe      	b.n	8004b8a <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004b8c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d01e      	beq.n	8004bd2 <xTaskCreateStatic+0xb2>
 8004b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d01b      	beq.n	8004bd2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b9c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ba2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba6:	2202      	movs	r2, #2
 8004ba8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004bac:	2300      	movs	r3, #0
 8004bae:	9303      	str	r3, [sp, #12]
 8004bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb2:	9302      	str	r3, [sp, #8]
 8004bb4:	f107 0314 	add.w	r3, r7, #20
 8004bb8:	9301      	str	r3, [sp, #4]
 8004bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bbc:	9300      	str	r3, [sp, #0]
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	68b9      	ldr	r1, [r7, #8]
 8004bc4:	68f8      	ldr	r0, [r7, #12]
 8004bc6:	f000 f850 	bl	8004c6a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004bca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004bcc:	f000 f8de 	bl	8004d8c <prvAddNewTaskToReadyList>
 8004bd0:	e001      	b.n	8004bd6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004bd6:	697b      	ldr	r3, [r7, #20]
	}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3728      	adds	r7, #40	; 0x28
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}

08004be0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b08c      	sub	sp, #48	; 0x30
 8004be4:	af04      	add	r7, sp, #16
 8004be6:	60f8      	str	r0, [r7, #12]
 8004be8:	60b9      	str	r1, [r7, #8]
 8004bea:	603b      	str	r3, [r7, #0]
 8004bec:	4613      	mov	r3, r2
 8004bee:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004bf0:	88fb      	ldrh	r3, [r7, #6]
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f001 fd39 	bl	800666c <pvPortMalloc>
 8004bfa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d00e      	beq.n	8004c20 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004c02:	205c      	movs	r0, #92	; 0x5c
 8004c04:	f001 fd32 	bl	800666c <pvPortMalloc>
 8004c08:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004c0a:	69fb      	ldr	r3, [r7, #28]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d003      	beq.n	8004c18 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004c10:	69fb      	ldr	r3, [r7, #28]
 8004c12:	697a      	ldr	r2, [r7, #20]
 8004c14:	631a      	str	r2, [r3, #48]	; 0x30
 8004c16:	e005      	b.n	8004c24 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004c18:	6978      	ldr	r0, [r7, #20]
 8004c1a:	f001 fdef 	bl	80067fc <vPortFree>
 8004c1e:	e001      	b.n	8004c24 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004c20:	2300      	movs	r3, #0
 8004c22:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d017      	beq.n	8004c5a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004c32:	88fa      	ldrh	r2, [r7, #6]
 8004c34:	2300      	movs	r3, #0
 8004c36:	9303      	str	r3, [sp, #12]
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	9302      	str	r3, [sp, #8]
 8004c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c3e:	9301      	str	r3, [sp, #4]
 8004c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c42:	9300      	str	r3, [sp, #0]
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	68b9      	ldr	r1, [r7, #8]
 8004c48:	68f8      	ldr	r0, [r7, #12]
 8004c4a:	f000 f80e 	bl	8004c6a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004c4e:	69f8      	ldr	r0, [r7, #28]
 8004c50:	f000 f89c 	bl	8004d8c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004c54:	2301      	movs	r3, #1
 8004c56:	61bb      	str	r3, [r7, #24]
 8004c58:	e002      	b.n	8004c60 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c5e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004c60:	69bb      	ldr	r3, [r7, #24]
	}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3720      	adds	r7, #32
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}

08004c6a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004c6a:	b580      	push	{r7, lr}
 8004c6c:	b088      	sub	sp, #32
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	60f8      	str	r0, [r7, #12]
 8004c72:	60b9      	str	r1, [r7, #8]
 8004c74:	607a      	str	r2, [r7, #4]
 8004c76:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c7a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	461a      	mov	r2, r3
 8004c82:	21a5      	movs	r1, #165	; 0xa5
 8004c84:	f001 ff01 	bl	8006a8a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c8c:	6879      	ldr	r1, [r7, #4]
 8004c8e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8004c92:	440b      	add	r3, r1
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	4413      	add	r3, r2
 8004c98:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004c9a:	69bb      	ldr	r3, [r7, #24]
 8004c9c:	f023 0307 	bic.w	r3, r3, #7
 8004ca0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	f003 0307 	and.w	r3, r3, #7
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d00b      	beq.n	8004cc4 <prvInitialiseNewTask+0x5a>
 8004cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb0:	b672      	cpsid	i
 8004cb2:	f383 8811 	msr	BASEPRI, r3
 8004cb6:	f3bf 8f6f 	isb	sy
 8004cba:	f3bf 8f4f 	dsb	sy
 8004cbe:	b662      	cpsie	i
 8004cc0:	617b      	str	r3, [r7, #20]
 8004cc2:	e7fe      	b.n	8004cc2 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d01f      	beq.n	8004d0a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004cca:	2300      	movs	r3, #0
 8004ccc:	61fb      	str	r3, [r7, #28]
 8004cce:	e012      	b.n	8004cf6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004cd0:	68ba      	ldr	r2, [r7, #8]
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	4413      	add	r3, r2
 8004cd6:	7819      	ldrb	r1, [r3, #0]
 8004cd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	4413      	add	r3, r2
 8004cde:	3334      	adds	r3, #52	; 0x34
 8004ce0:	460a      	mov	r2, r1
 8004ce2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004ce4:	68ba      	ldr	r2, [r7, #8]
 8004ce6:	69fb      	ldr	r3, [r7, #28]
 8004ce8:	4413      	add	r3, r2
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d006      	beq.n	8004cfe <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	61fb      	str	r3, [r7, #28]
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	2b0f      	cmp	r3, #15
 8004cfa:	d9e9      	bls.n	8004cd0 <prvInitialiseNewTask+0x66>
 8004cfc:	e000      	b.n	8004d00 <prvInitialiseNewTask+0x96>
			{
				break;
 8004cfe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d02:	2200      	movs	r2, #0
 8004d04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d08:	e003      	b.n	8004d12 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d14:	2b37      	cmp	r3, #55	; 0x37
 8004d16:	d901      	bls.n	8004d1c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004d18:	2337      	movs	r3, #55	; 0x37
 8004d1a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d20:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d26:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d30:	3304      	adds	r3, #4
 8004d32:	4618      	mov	r0, r3
 8004d34:	f7ff f96a 	bl	800400c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d3a:	3318      	adds	r3, #24
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f7ff f965 	bl	800400c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d46:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d4a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d50:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d56:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d60:	2200      	movs	r2, #0
 8004d62:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004d66:	683a      	ldr	r2, [r7, #0]
 8004d68:	68f9      	ldr	r1, [r7, #12]
 8004d6a:	69b8      	ldr	r0, [r7, #24]
 8004d6c:	f001 fa50 	bl	8006210 <pxPortInitialiseStack>
 8004d70:	4602      	mov	r2, r0
 8004d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d74:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d002      	beq.n	8004d82 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d82:	bf00      	nop
 8004d84:	3720      	adds	r7, #32
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
	...

08004d8c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004d94:	f001 fb48 	bl	8006428 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004d98:	4b2d      	ldr	r3, [pc, #180]	; (8004e50 <prvAddNewTaskToReadyList+0xc4>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	3301      	adds	r3, #1
 8004d9e:	4a2c      	ldr	r2, [pc, #176]	; (8004e50 <prvAddNewTaskToReadyList+0xc4>)
 8004da0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004da2:	4b2c      	ldr	r3, [pc, #176]	; (8004e54 <prvAddNewTaskToReadyList+0xc8>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d109      	bne.n	8004dbe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004daa:	4a2a      	ldr	r2, [pc, #168]	; (8004e54 <prvAddNewTaskToReadyList+0xc8>)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004db0:	4b27      	ldr	r3, [pc, #156]	; (8004e50 <prvAddNewTaskToReadyList+0xc4>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d110      	bne.n	8004dda <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004db8:	f000 fd38 	bl	800582c <prvInitialiseTaskLists>
 8004dbc:	e00d      	b.n	8004dda <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004dbe:	4b26      	ldr	r3, [pc, #152]	; (8004e58 <prvAddNewTaskToReadyList+0xcc>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d109      	bne.n	8004dda <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004dc6:	4b23      	ldr	r3, [pc, #140]	; (8004e54 <prvAddNewTaskToReadyList+0xc8>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d802      	bhi.n	8004dda <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004dd4:	4a1f      	ldr	r2, [pc, #124]	; (8004e54 <prvAddNewTaskToReadyList+0xc8>)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004dda:	4b20      	ldr	r3, [pc, #128]	; (8004e5c <prvAddNewTaskToReadyList+0xd0>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	3301      	adds	r3, #1
 8004de0:	4a1e      	ldr	r2, [pc, #120]	; (8004e5c <prvAddNewTaskToReadyList+0xd0>)
 8004de2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004de4:	4b1d      	ldr	r3, [pc, #116]	; (8004e5c <prvAddNewTaskToReadyList+0xd0>)
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004df0:	4b1b      	ldr	r3, [pc, #108]	; (8004e60 <prvAddNewTaskToReadyList+0xd4>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d903      	bls.n	8004e00 <prvAddNewTaskToReadyList+0x74>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dfc:	4a18      	ldr	r2, [pc, #96]	; (8004e60 <prvAddNewTaskToReadyList+0xd4>)
 8004dfe:	6013      	str	r3, [r2, #0]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e04:	4613      	mov	r3, r2
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	4413      	add	r3, r2
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	4a15      	ldr	r2, [pc, #84]	; (8004e64 <prvAddNewTaskToReadyList+0xd8>)
 8004e0e:	441a      	add	r2, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	3304      	adds	r3, #4
 8004e14:	4619      	mov	r1, r3
 8004e16:	4610      	mov	r0, r2
 8004e18:	f7ff f905 	bl	8004026 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004e1c:	f001 fb36 	bl	800648c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004e20:	4b0d      	ldr	r3, [pc, #52]	; (8004e58 <prvAddNewTaskToReadyList+0xcc>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d00e      	beq.n	8004e46 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004e28:	4b0a      	ldr	r3, [pc, #40]	; (8004e54 <prvAddNewTaskToReadyList+0xc8>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d207      	bcs.n	8004e46 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004e36:	4b0c      	ldr	r3, [pc, #48]	; (8004e68 <prvAddNewTaskToReadyList+0xdc>)
 8004e38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e3c:	601a      	str	r2, [r3, #0]
 8004e3e:	f3bf 8f4f 	dsb	sy
 8004e42:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e46:	bf00      	nop
 8004e48:	3708      	adds	r7, #8
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	20000bc0 	.word	0x20000bc0
 8004e54:	200006ec 	.word	0x200006ec
 8004e58:	20000bcc 	.word	0x20000bcc
 8004e5c:	20000bdc 	.word	0x20000bdc
 8004e60:	20000bc8 	.word	0x20000bc8
 8004e64:	200006f0 	.word	0x200006f0
 8004e68:	e000ed04 	.word	0xe000ed04

08004e6c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b084      	sub	sp, #16
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004e74:	2300      	movs	r3, #0
 8004e76:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d018      	beq.n	8004eb0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004e7e:	4b14      	ldr	r3, [pc, #80]	; (8004ed0 <vTaskDelay+0x64>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00b      	beq.n	8004e9e <vTaskDelay+0x32>
 8004e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e8a:	b672      	cpsid	i
 8004e8c:	f383 8811 	msr	BASEPRI, r3
 8004e90:	f3bf 8f6f 	isb	sy
 8004e94:	f3bf 8f4f 	dsb	sy
 8004e98:	b662      	cpsie	i
 8004e9a:	60bb      	str	r3, [r7, #8]
 8004e9c:	e7fe      	b.n	8004e9c <vTaskDelay+0x30>
			vTaskSuspendAll();
 8004e9e:	f000 f98b 	bl	80051b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004ea2:	2100      	movs	r1, #0
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f000 fe0b 	bl	8005ac0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004eaa:	f000 f993 	bl	80051d4 <xTaskResumeAll>
 8004eae:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d107      	bne.n	8004ec6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004eb6:	4b07      	ldr	r3, [pc, #28]	; (8004ed4 <vTaskDelay+0x68>)
 8004eb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ebc:	601a      	str	r2, [r3, #0]
 8004ebe:	f3bf 8f4f 	dsb	sy
 8004ec2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004ec6:	bf00      	nop
 8004ec8:	3710      	adds	r7, #16
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	20000be8 	.word	0x20000be8
 8004ed4:	e000ed04 	.word	0xe000ed04

08004ed8 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b084      	sub	sp, #16
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8004ee0:	f001 faa2 	bl	8006428 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d102      	bne.n	8004ef0 <vTaskSuspend+0x18>
 8004eea:	4b30      	ldr	r3, [pc, #192]	; (8004fac <vTaskSuspend+0xd4>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	e000      	b.n	8004ef2 <vTaskSuspend+0x1a>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	3304      	adds	r3, #4
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f7ff f8f1 	bl	80040e0 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d004      	beq.n	8004f10 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	3318      	adds	r3, #24
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f7ff f8e8 	bl	80040e0 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	3304      	adds	r3, #4
 8004f14:	4619      	mov	r1, r3
 8004f16:	4826      	ldr	r0, [pc, #152]	; (8004fb0 <vTaskSuspend+0xd8>)
 8004f18:	f7ff f885 	bl	8004026 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d103      	bne.n	8004f30 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8004f30:	f001 faac 	bl	800648c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8004f34:	4b1f      	ldr	r3, [pc, #124]	; (8004fb4 <vTaskSuspend+0xdc>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d005      	beq.n	8004f48 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8004f3c:	f001 fa74 	bl	8006428 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8004f40:	f000 fd10 	bl	8005964 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8004f44:	f001 faa2 	bl	800648c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8004f48:	4b18      	ldr	r3, [pc, #96]	; (8004fac <vTaskSuspend+0xd4>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d128      	bne.n	8004fa4 <vTaskSuspend+0xcc>
		{
			if( xSchedulerRunning != pdFALSE )
 8004f52:	4b18      	ldr	r3, [pc, #96]	; (8004fb4 <vTaskSuspend+0xdc>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d018      	beq.n	8004f8c <vTaskSuspend+0xb4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8004f5a:	4b17      	ldr	r3, [pc, #92]	; (8004fb8 <vTaskSuspend+0xe0>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d00b      	beq.n	8004f7a <vTaskSuspend+0xa2>
 8004f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f66:	b672      	cpsid	i
 8004f68:	f383 8811 	msr	BASEPRI, r3
 8004f6c:	f3bf 8f6f 	isb	sy
 8004f70:	f3bf 8f4f 	dsb	sy
 8004f74:	b662      	cpsie	i
 8004f76:	60bb      	str	r3, [r7, #8]
 8004f78:	e7fe      	b.n	8004f78 <vTaskSuspend+0xa0>
				portYIELD_WITHIN_API();
 8004f7a:	4b10      	ldr	r3, [pc, #64]	; (8004fbc <vTaskSuspend+0xe4>)
 8004f7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f80:	601a      	str	r2, [r3, #0]
 8004f82:	f3bf 8f4f 	dsb	sy
 8004f86:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004f8a:	e00b      	b.n	8004fa4 <vTaskSuspend+0xcc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8004f8c:	4b08      	ldr	r3, [pc, #32]	; (8004fb0 <vTaskSuspend+0xd8>)
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	4b0b      	ldr	r3, [pc, #44]	; (8004fc0 <vTaskSuspend+0xe8>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d103      	bne.n	8004fa0 <vTaskSuspend+0xc8>
					pxCurrentTCB = NULL;
 8004f98:	4b04      	ldr	r3, [pc, #16]	; (8004fac <vTaskSuspend+0xd4>)
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	601a      	str	r2, [r3, #0]
	}
 8004f9e:	e001      	b.n	8004fa4 <vTaskSuspend+0xcc>
					vTaskSwitchContext();
 8004fa0:	f000 fa92 	bl	80054c8 <vTaskSwitchContext>
	}
 8004fa4:	bf00      	nop
 8004fa6:	3710      	adds	r7, #16
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	200006ec 	.word	0x200006ec
 8004fb0:	20000bac 	.word	0x20000bac
 8004fb4:	20000bcc 	.word	0x20000bcc
 8004fb8:	20000be8 	.word	0x20000be8
 8004fbc:	e000ed04 	.word	0xe000ed04
 8004fc0:	20000bc0 	.word	0x20000bc0

08004fc4 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b087      	sub	sp, #28
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d10b      	bne.n	8004ff2 <prvTaskIsTaskSuspended+0x2e>
 8004fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fde:	b672      	cpsid	i
 8004fe0:	f383 8811 	msr	BASEPRI, r3
 8004fe4:	f3bf 8f6f 	isb	sy
 8004fe8:	f3bf 8f4f 	dsb	sy
 8004fec:	b662      	cpsie	i
 8004fee:	60fb      	str	r3, [r7, #12]
 8004ff0:	e7fe      	b.n	8004ff0 <prvTaskIsTaskSuspended+0x2c>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	695b      	ldr	r3, [r3, #20]
 8004ff6:	4a0a      	ldr	r2, [pc, #40]	; (8005020 <prvTaskIsTaskSuspended+0x5c>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d10a      	bne.n	8005012 <prvTaskIsTaskSuspended+0x4e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005000:	4a08      	ldr	r2, [pc, #32]	; (8005024 <prvTaskIsTaskSuspended+0x60>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d005      	beq.n	8005012 <prvTaskIsTaskSuspended+0x4e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800500a:	2b00      	cmp	r3, #0
 800500c:	d101      	bne.n	8005012 <prvTaskIsTaskSuspended+0x4e>
				{
					xReturn = pdTRUE;
 800500e:	2301      	movs	r3, #1
 8005010:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005012:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8005014:	4618      	mov	r0, r3
 8005016:	371c      	adds	r7, #28
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr
 8005020:	20000bac 	.word	0x20000bac
 8005024:	20000b80 	.word	0x20000b80

08005028 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8005028:	b580      	push	{r7, lr}
 800502a:	b084      	sub	sp, #16
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d10b      	bne.n	8005052 <vTaskResume+0x2a>
 800503a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800503e:	b672      	cpsid	i
 8005040:	f383 8811 	msr	BASEPRI, r3
 8005044:	f3bf 8f6f 	isb	sy
 8005048:	f3bf 8f4f 	dsb	sy
 800504c:	b662      	cpsie	i
 800504e:	60bb      	str	r3, [r7, #8]
 8005050:	e7fe      	b.n	8005050 <vTaskResume+0x28>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8005052:	4b21      	ldr	r3, [pc, #132]	; (80050d8 <vTaskResume+0xb0>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	68fa      	ldr	r2, [r7, #12]
 8005058:	429a      	cmp	r2, r3
 800505a:	d038      	beq.n	80050ce <vTaskResume+0xa6>
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d035      	beq.n	80050ce <vTaskResume+0xa6>
		{
			taskENTER_CRITICAL();
 8005062:	f001 f9e1 	bl	8006428 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8005066:	68f8      	ldr	r0, [r7, #12]
 8005068:	f7ff ffac 	bl	8004fc4 <prvTaskIsTaskSuspended>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d02b      	beq.n	80050ca <vTaskResume+0xa2>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	3304      	adds	r3, #4
 8005076:	4618      	mov	r0, r3
 8005078:	f7ff f832 	bl	80040e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005080:	4b16      	ldr	r3, [pc, #88]	; (80050dc <vTaskResume+0xb4>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	429a      	cmp	r2, r3
 8005086:	d903      	bls.n	8005090 <vTaskResume+0x68>
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800508c:	4a13      	ldr	r2, [pc, #76]	; (80050dc <vTaskResume+0xb4>)
 800508e:	6013      	str	r3, [r2, #0]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005094:	4613      	mov	r3, r2
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	4413      	add	r3, r2
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	4a10      	ldr	r2, [pc, #64]	; (80050e0 <vTaskResume+0xb8>)
 800509e:	441a      	add	r2, r3
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	3304      	adds	r3, #4
 80050a4:	4619      	mov	r1, r3
 80050a6:	4610      	mov	r0, r2
 80050a8:	f7fe ffbd 	bl	8004026 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050b0:	4b09      	ldr	r3, [pc, #36]	; (80050d8 <vTaskResume+0xb0>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d307      	bcc.n	80050ca <vTaskResume+0xa2>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 80050ba:	4b0a      	ldr	r3, [pc, #40]	; (80050e4 <vTaskResume+0xbc>)
 80050bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050c0:	601a      	str	r2, [r3, #0]
 80050c2:	f3bf 8f4f 	dsb	sy
 80050c6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 80050ca:	f001 f9df 	bl	800648c <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80050ce:	bf00      	nop
 80050d0:	3710      	adds	r7, #16
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	bf00      	nop
 80050d8:	200006ec 	.word	0x200006ec
 80050dc:	20000bc8 	.word	0x20000bc8
 80050e0:	200006f0 	.word	0x200006f0
 80050e4:	e000ed04 	.word	0xe000ed04

080050e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b08a      	sub	sp, #40	; 0x28
 80050ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80050ee:	2300      	movs	r3, #0
 80050f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80050f2:	2300      	movs	r3, #0
 80050f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80050f6:	463a      	mov	r2, r7
 80050f8:	1d39      	adds	r1, r7, #4
 80050fa:	f107 0308 	add.w	r3, r7, #8
 80050fe:	4618      	mov	r0, r3
 8005100:	f7fe ff30 	bl	8003f64 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005104:	6839      	ldr	r1, [r7, #0]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	68ba      	ldr	r2, [r7, #8]
 800510a:	9202      	str	r2, [sp, #8]
 800510c:	9301      	str	r3, [sp, #4]
 800510e:	2300      	movs	r3, #0
 8005110:	9300      	str	r3, [sp, #0]
 8005112:	2300      	movs	r3, #0
 8005114:	460a      	mov	r2, r1
 8005116:	4922      	ldr	r1, [pc, #136]	; (80051a0 <vTaskStartScheduler+0xb8>)
 8005118:	4822      	ldr	r0, [pc, #136]	; (80051a4 <vTaskStartScheduler+0xbc>)
 800511a:	f7ff fd01 	bl	8004b20 <xTaskCreateStatic>
 800511e:	4602      	mov	r2, r0
 8005120:	4b21      	ldr	r3, [pc, #132]	; (80051a8 <vTaskStartScheduler+0xc0>)
 8005122:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005124:	4b20      	ldr	r3, [pc, #128]	; (80051a8 <vTaskStartScheduler+0xc0>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d002      	beq.n	8005132 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800512c:	2301      	movs	r3, #1
 800512e:	617b      	str	r3, [r7, #20]
 8005130:	e001      	b.n	8005136 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005132:	2300      	movs	r3, #0
 8005134:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	2b01      	cmp	r3, #1
 800513a:	d102      	bne.n	8005142 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800513c:	f000 fd14 	bl	8005b68 <xTimerCreateTimerTask>
 8005140:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	2b01      	cmp	r3, #1
 8005146:	d117      	bne.n	8005178 <vTaskStartScheduler+0x90>
 8005148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800514c:	b672      	cpsid	i
 800514e:	f383 8811 	msr	BASEPRI, r3
 8005152:	f3bf 8f6f 	isb	sy
 8005156:	f3bf 8f4f 	dsb	sy
 800515a:	b662      	cpsie	i
 800515c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800515e:	4b13      	ldr	r3, [pc, #76]	; (80051ac <vTaskStartScheduler+0xc4>)
 8005160:	f04f 32ff 	mov.w	r2, #4294967295
 8005164:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005166:	4b12      	ldr	r3, [pc, #72]	; (80051b0 <vTaskStartScheduler+0xc8>)
 8005168:	2201      	movs	r2, #1
 800516a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800516c:	4b11      	ldr	r3, [pc, #68]	; (80051b4 <vTaskStartScheduler+0xcc>)
 800516e:	2200      	movs	r2, #0
 8005170:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005172:	f001 f8dd 	bl	8006330 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005176:	e00f      	b.n	8005198 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800517e:	d10b      	bne.n	8005198 <vTaskStartScheduler+0xb0>
 8005180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005184:	b672      	cpsid	i
 8005186:	f383 8811 	msr	BASEPRI, r3
 800518a:	f3bf 8f6f 	isb	sy
 800518e:	f3bf 8f4f 	dsb	sy
 8005192:	b662      	cpsie	i
 8005194:	60fb      	str	r3, [r7, #12]
 8005196:	e7fe      	b.n	8005196 <vTaskStartScheduler+0xae>
}
 8005198:	bf00      	nop
 800519a:	3718      	adds	r7, #24
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	08006ac4 	.word	0x08006ac4
 80051a4:	080057fd 	.word	0x080057fd
 80051a8:	20000be4 	.word	0x20000be4
 80051ac:	20000be0 	.word	0x20000be0
 80051b0:	20000bcc 	.word	0x20000bcc
 80051b4:	20000bc4 	.word	0x20000bc4

080051b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80051b8:	b480      	push	{r7}
 80051ba:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80051bc:	4b04      	ldr	r3, [pc, #16]	; (80051d0 <vTaskSuspendAll+0x18>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	3301      	adds	r3, #1
 80051c2:	4a03      	ldr	r2, [pc, #12]	; (80051d0 <vTaskSuspendAll+0x18>)
 80051c4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80051c6:	bf00      	nop
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr
 80051d0:	20000be8 	.word	0x20000be8

080051d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b084      	sub	sp, #16
 80051d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80051da:	2300      	movs	r3, #0
 80051dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80051de:	2300      	movs	r3, #0
 80051e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80051e2:	4b42      	ldr	r3, [pc, #264]	; (80052ec <xTaskResumeAll+0x118>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d10b      	bne.n	8005202 <xTaskResumeAll+0x2e>
 80051ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ee:	b672      	cpsid	i
 80051f0:	f383 8811 	msr	BASEPRI, r3
 80051f4:	f3bf 8f6f 	isb	sy
 80051f8:	f3bf 8f4f 	dsb	sy
 80051fc:	b662      	cpsie	i
 80051fe:	603b      	str	r3, [r7, #0]
 8005200:	e7fe      	b.n	8005200 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005202:	f001 f911 	bl	8006428 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005206:	4b39      	ldr	r3, [pc, #228]	; (80052ec <xTaskResumeAll+0x118>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	3b01      	subs	r3, #1
 800520c:	4a37      	ldr	r2, [pc, #220]	; (80052ec <xTaskResumeAll+0x118>)
 800520e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005210:	4b36      	ldr	r3, [pc, #216]	; (80052ec <xTaskResumeAll+0x118>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d162      	bne.n	80052de <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005218:	4b35      	ldr	r3, [pc, #212]	; (80052f0 <xTaskResumeAll+0x11c>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d05e      	beq.n	80052de <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005220:	e02f      	b.n	8005282 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005222:	4b34      	ldr	r3, [pc, #208]	; (80052f4 <xTaskResumeAll+0x120>)
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	3318      	adds	r3, #24
 800522e:	4618      	mov	r0, r3
 8005230:	f7fe ff56 	bl	80040e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	3304      	adds	r3, #4
 8005238:	4618      	mov	r0, r3
 800523a:	f7fe ff51 	bl	80040e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005242:	4b2d      	ldr	r3, [pc, #180]	; (80052f8 <xTaskResumeAll+0x124>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	429a      	cmp	r2, r3
 8005248:	d903      	bls.n	8005252 <xTaskResumeAll+0x7e>
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800524e:	4a2a      	ldr	r2, [pc, #168]	; (80052f8 <xTaskResumeAll+0x124>)
 8005250:	6013      	str	r3, [r2, #0]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005256:	4613      	mov	r3, r2
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	4413      	add	r3, r2
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	4a27      	ldr	r2, [pc, #156]	; (80052fc <xTaskResumeAll+0x128>)
 8005260:	441a      	add	r2, r3
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	3304      	adds	r3, #4
 8005266:	4619      	mov	r1, r3
 8005268:	4610      	mov	r0, r2
 800526a:	f7fe fedc 	bl	8004026 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005272:	4b23      	ldr	r3, [pc, #140]	; (8005300 <xTaskResumeAll+0x12c>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005278:	429a      	cmp	r2, r3
 800527a:	d302      	bcc.n	8005282 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800527c:	4b21      	ldr	r3, [pc, #132]	; (8005304 <xTaskResumeAll+0x130>)
 800527e:	2201      	movs	r2, #1
 8005280:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005282:	4b1c      	ldr	r3, [pc, #112]	; (80052f4 <xTaskResumeAll+0x120>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d1cb      	bne.n	8005222 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d001      	beq.n	8005294 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005290:	f000 fb68 	bl	8005964 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005294:	4b1c      	ldr	r3, [pc, #112]	; (8005308 <xTaskResumeAll+0x134>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d010      	beq.n	80052c2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80052a0:	f000 f858 	bl	8005354 <xTaskIncrementTick>
 80052a4:	4603      	mov	r3, r0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d002      	beq.n	80052b0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80052aa:	4b16      	ldr	r3, [pc, #88]	; (8005304 <xTaskResumeAll+0x130>)
 80052ac:	2201      	movs	r2, #1
 80052ae:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	3b01      	subs	r3, #1
 80052b4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d1f1      	bne.n	80052a0 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80052bc:	4b12      	ldr	r3, [pc, #72]	; (8005308 <xTaskResumeAll+0x134>)
 80052be:	2200      	movs	r2, #0
 80052c0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80052c2:	4b10      	ldr	r3, [pc, #64]	; (8005304 <xTaskResumeAll+0x130>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d009      	beq.n	80052de <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80052ca:	2301      	movs	r3, #1
 80052cc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80052ce:	4b0f      	ldr	r3, [pc, #60]	; (800530c <xTaskResumeAll+0x138>)
 80052d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052d4:	601a      	str	r2, [r3, #0]
 80052d6:	f3bf 8f4f 	dsb	sy
 80052da:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80052de:	f001 f8d5 	bl	800648c <vPortExitCritical>

	return xAlreadyYielded;
 80052e2:	68bb      	ldr	r3, [r7, #8]
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3710      	adds	r7, #16
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	20000be8 	.word	0x20000be8
 80052f0:	20000bc0 	.word	0x20000bc0
 80052f4:	20000b80 	.word	0x20000b80
 80052f8:	20000bc8 	.word	0x20000bc8
 80052fc:	200006f0 	.word	0x200006f0
 8005300:	200006ec 	.word	0x200006ec
 8005304:	20000bd4 	.word	0x20000bd4
 8005308:	20000bd0 	.word	0x20000bd0
 800530c:	e000ed04 	.word	0xe000ed04

08005310 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005316:	4b05      	ldr	r3, [pc, #20]	; (800532c <xTaskGetTickCount+0x1c>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800531c:	687b      	ldr	r3, [r7, #4]
}
 800531e:	4618      	mov	r0, r3
 8005320:	370c      	adds	r7, #12
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr
 800532a:	bf00      	nop
 800532c:	20000bc4 	.word	0x20000bc4

08005330 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b082      	sub	sp, #8
 8005334:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005336:	f001 f957 	bl	80065e8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800533a:	2300      	movs	r3, #0
 800533c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800533e:	4b04      	ldr	r3, [pc, #16]	; (8005350 <xTaskGetTickCountFromISR+0x20>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005344:	683b      	ldr	r3, [r7, #0]
}
 8005346:	4618      	mov	r0, r3
 8005348:	3708      	adds	r7, #8
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
 800534e:	bf00      	nop
 8005350:	20000bc4 	.word	0x20000bc4

08005354 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b086      	sub	sp, #24
 8005358:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800535a:	2300      	movs	r3, #0
 800535c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800535e:	4b4f      	ldr	r3, [pc, #316]	; (800549c <xTaskIncrementTick+0x148>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	2b00      	cmp	r3, #0
 8005364:	f040 808a 	bne.w	800547c <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005368:	4b4d      	ldr	r3, [pc, #308]	; (80054a0 <xTaskIncrementTick+0x14c>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	3301      	adds	r3, #1
 800536e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005370:	4a4b      	ldr	r2, [pc, #300]	; (80054a0 <xTaskIncrementTick+0x14c>)
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d121      	bne.n	80053c0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800537c:	4b49      	ldr	r3, [pc, #292]	; (80054a4 <xTaskIncrementTick+0x150>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d00b      	beq.n	800539e <xTaskIncrementTick+0x4a>
 8005386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800538a:	b672      	cpsid	i
 800538c:	f383 8811 	msr	BASEPRI, r3
 8005390:	f3bf 8f6f 	isb	sy
 8005394:	f3bf 8f4f 	dsb	sy
 8005398:	b662      	cpsie	i
 800539a:	603b      	str	r3, [r7, #0]
 800539c:	e7fe      	b.n	800539c <xTaskIncrementTick+0x48>
 800539e:	4b41      	ldr	r3, [pc, #260]	; (80054a4 <xTaskIncrementTick+0x150>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	60fb      	str	r3, [r7, #12]
 80053a4:	4b40      	ldr	r3, [pc, #256]	; (80054a8 <xTaskIncrementTick+0x154>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a3e      	ldr	r2, [pc, #248]	; (80054a4 <xTaskIncrementTick+0x150>)
 80053aa:	6013      	str	r3, [r2, #0]
 80053ac:	4a3e      	ldr	r2, [pc, #248]	; (80054a8 <xTaskIncrementTick+0x154>)
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6013      	str	r3, [r2, #0]
 80053b2:	4b3e      	ldr	r3, [pc, #248]	; (80054ac <xTaskIncrementTick+0x158>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	3301      	adds	r3, #1
 80053b8:	4a3c      	ldr	r2, [pc, #240]	; (80054ac <xTaskIncrementTick+0x158>)
 80053ba:	6013      	str	r3, [r2, #0]
 80053bc:	f000 fad2 	bl	8005964 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80053c0:	4b3b      	ldr	r3, [pc, #236]	; (80054b0 <xTaskIncrementTick+0x15c>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	693a      	ldr	r2, [r7, #16]
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d349      	bcc.n	800545e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80053ca:	4b36      	ldr	r3, [pc, #216]	; (80054a4 <xTaskIncrementTick+0x150>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d104      	bne.n	80053de <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053d4:	4b36      	ldr	r3, [pc, #216]	; (80054b0 <xTaskIncrementTick+0x15c>)
 80053d6:	f04f 32ff 	mov.w	r2, #4294967295
 80053da:	601a      	str	r2, [r3, #0]
					break;
 80053dc:	e03f      	b.n	800545e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053de:	4b31      	ldr	r3, [pc, #196]	; (80054a4 <xTaskIncrementTick+0x150>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80053ee:	693a      	ldr	r2, [r7, #16]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d203      	bcs.n	80053fe <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80053f6:	4a2e      	ldr	r2, [pc, #184]	; (80054b0 <xTaskIncrementTick+0x15c>)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80053fc:	e02f      	b.n	800545e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	3304      	adds	r3, #4
 8005402:	4618      	mov	r0, r3
 8005404:	f7fe fe6c 	bl	80040e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800540c:	2b00      	cmp	r3, #0
 800540e:	d004      	beq.n	800541a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	3318      	adds	r3, #24
 8005414:	4618      	mov	r0, r3
 8005416:	f7fe fe63 	bl	80040e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800541e:	4b25      	ldr	r3, [pc, #148]	; (80054b4 <xTaskIncrementTick+0x160>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	429a      	cmp	r2, r3
 8005424:	d903      	bls.n	800542e <xTaskIncrementTick+0xda>
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800542a:	4a22      	ldr	r2, [pc, #136]	; (80054b4 <xTaskIncrementTick+0x160>)
 800542c:	6013      	str	r3, [r2, #0]
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005432:	4613      	mov	r3, r2
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	4413      	add	r3, r2
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	4a1f      	ldr	r2, [pc, #124]	; (80054b8 <xTaskIncrementTick+0x164>)
 800543c:	441a      	add	r2, r3
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	3304      	adds	r3, #4
 8005442:	4619      	mov	r1, r3
 8005444:	4610      	mov	r0, r2
 8005446:	f7fe fdee 	bl	8004026 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800544e:	4b1b      	ldr	r3, [pc, #108]	; (80054bc <xTaskIncrementTick+0x168>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005454:	429a      	cmp	r2, r3
 8005456:	d3b8      	bcc.n	80053ca <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005458:	2301      	movs	r3, #1
 800545a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800545c:	e7b5      	b.n	80053ca <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800545e:	4b17      	ldr	r3, [pc, #92]	; (80054bc <xTaskIncrementTick+0x168>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005464:	4914      	ldr	r1, [pc, #80]	; (80054b8 <xTaskIncrementTick+0x164>)
 8005466:	4613      	mov	r3, r2
 8005468:	009b      	lsls	r3, r3, #2
 800546a:	4413      	add	r3, r2
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	440b      	add	r3, r1
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	2b01      	cmp	r3, #1
 8005474:	d907      	bls.n	8005486 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8005476:	2301      	movs	r3, #1
 8005478:	617b      	str	r3, [r7, #20]
 800547a:	e004      	b.n	8005486 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800547c:	4b10      	ldr	r3, [pc, #64]	; (80054c0 <xTaskIncrementTick+0x16c>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	3301      	adds	r3, #1
 8005482:	4a0f      	ldr	r2, [pc, #60]	; (80054c0 <xTaskIncrementTick+0x16c>)
 8005484:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005486:	4b0f      	ldr	r3, [pc, #60]	; (80054c4 <xTaskIncrementTick+0x170>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d001      	beq.n	8005492 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800548e:	2301      	movs	r3, #1
 8005490:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005492:	697b      	ldr	r3, [r7, #20]
}
 8005494:	4618      	mov	r0, r3
 8005496:	3718      	adds	r7, #24
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}
 800549c:	20000be8 	.word	0x20000be8
 80054a0:	20000bc4 	.word	0x20000bc4
 80054a4:	20000b78 	.word	0x20000b78
 80054a8:	20000b7c 	.word	0x20000b7c
 80054ac:	20000bd8 	.word	0x20000bd8
 80054b0:	20000be0 	.word	0x20000be0
 80054b4:	20000bc8 	.word	0x20000bc8
 80054b8:	200006f0 	.word	0x200006f0
 80054bc:	200006ec 	.word	0x200006ec
 80054c0:	20000bd0 	.word	0x20000bd0
 80054c4:	20000bd4 	.word	0x20000bd4

080054c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80054c8:	b480      	push	{r7}
 80054ca:	b085      	sub	sp, #20
 80054cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80054ce:	4b28      	ldr	r3, [pc, #160]	; (8005570 <vTaskSwitchContext+0xa8>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d003      	beq.n	80054de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80054d6:	4b27      	ldr	r3, [pc, #156]	; (8005574 <vTaskSwitchContext+0xac>)
 80054d8:	2201      	movs	r2, #1
 80054da:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80054dc:	e042      	b.n	8005564 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80054de:	4b25      	ldr	r3, [pc, #148]	; (8005574 <vTaskSwitchContext+0xac>)
 80054e0:	2200      	movs	r2, #0
 80054e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054e4:	4b24      	ldr	r3, [pc, #144]	; (8005578 <vTaskSwitchContext+0xb0>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	60fb      	str	r3, [r7, #12]
 80054ea:	e011      	b.n	8005510 <vTaskSwitchContext+0x48>
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d10b      	bne.n	800550a <vTaskSwitchContext+0x42>
 80054f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f6:	b672      	cpsid	i
 80054f8:	f383 8811 	msr	BASEPRI, r3
 80054fc:	f3bf 8f6f 	isb	sy
 8005500:	f3bf 8f4f 	dsb	sy
 8005504:	b662      	cpsie	i
 8005506:	607b      	str	r3, [r7, #4]
 8005508:	e7fe      	b.n	8005508 <vTaskSwitchContext+0x40>
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	3b01      	subs	r3, #1
 800550e:	60fb      	str	r3, [r7, #12]
 8005510:	491a      	ldr	r1, [pc, #104]	; (800557c <vTaskSwitchContext+0xb4>)
 8005512:	68fa      	ldr	r2, [r7, #12]
 8005514:	4613      	mov	r3, r2
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	4413      	add	r3, r2
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	440b      	add	r3, r1
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d0e3      	beq.n	80054ec <vTaskSwitchContext+0x24>
 8005524:	68fa      	ldr	r2, [r7, #12]
 8005526:	4613      	mov	r3, r2
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	4413      	add	r3, r2
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	4a13      	ldr	r2, [pc, #76]	; (800557c <vTaskSwitchContext+0xb4>)
 8005530:	4413      	add	r3, r2
 8005532:	60bb      	str	r3, [r7, #8]
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	685a      	ldr	r2, [r3, #4]
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	605a      	str	r2, [r3, #4]
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	685a      	ldr	r2, [r3, #4]
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	3308      	adds	r3, #8
 8005546:	429a      	cmp	r2, r3
 8005548:	d104      	bne.n	8005554 <vTaskSwitchContext+0x8c>
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	685a      	ldr	r2, [r3, #4]
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	605a      	str	r2, [r3, #4]
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	4a09      	ldr	r2, [pc, #36]	; (8005580 <vTaskSwitchContext+0xb8>)
 800555c:	6013      	str	r3, [r2, #0]
 800555e:	4a06      	ldr	r2, [pc, #24]	; (8005578 <vTaskSwitchContext+0xb0>)
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6013      	str	r3, [r2, #0]
}
 8005564:	bf00      	nop
 8005566:	3714      	adds	r7, #20
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr
 8005570:	20000be8 	.word	0x20000be8
 8005574:	20000bd4 	.word	0x20000bd4
 8005578:	20000bc8 	.word	0x20000bc8
 800557c:	200006f0 	.word	0x200006f0
 8005580:	200006ec 	.word	0x200006ec

08005584 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d10b      	bne.n	80055ac <vTaskPlaceOnEventList+0x28>
 8005594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005598:	b672      	cpsid	i
 800559a:	f383 8811 	msr	BASEPRI, r3
 800559e:	f3bf 8f6f 	isb	sy
 80055a2:	f3bf 8f4f 	dsb	sy
 80055a6:	b662      	cpsie	i
 80055a8:	60fb      	str	r3, [r7, #12]
 80055aa:	e7fe      	b.n	80055aa <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80055ac:	4b07      	ldr	r3, [pc, #28]	; (80055cc <vTaskPlaceOnEventList+0x48>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	3318      	adds	r3, #24
 80055b2:	4619      	mov	r1, r3
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f7fe fd5a 	bl	800406e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80055ba:	2101      	movs	r1, #1
 80055bc:	6838      	ldr	r0, [r7, #0]
 80055be:	f000 fa7f 	bl	8005ac0 <prvAddCurrentTaskToDelayedList>
}
 80055c2:	bf00      	nop
 80055c4:	3710      	adds	r7, #16
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	200006ec 	.word	0x200006ec

080055d0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b086      	sub	sp, #24
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d10b      	bne.n	80055fa <vTaskPlaceOnEventListRestricted+0x2a>
 80055e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e6:	b672      	cpsid	i
 80055e8:	f383 8811 	msr	BASEPRI, r3
 80055ec:	f3bf 8f6f 	isb	sy
 80055f0:	f3bf 8f4f 	dsb	sy
 80055f4:	b662      	cpsie	i
 80055f6:	617b      	str	r3, [r7, #20]
 80055f8:	e7fe      	b.n	80055f8 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80055fa:	4b0a      	ldr	r3, [pc, #40]	; (8005624 <vTaskPlaceOnEventListRestricted+0x54>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	3318      	adds	r3, #24
 8005600:	4619      	mov	r1, r3
 8005602:	68f8      	ldr	r0, [r7, #12]
 8005604:	f7fe fd0f 	bl	8004026 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d002      	beq.n	8005614 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800560e:	f04f 33ff 	mov.w	r3, #4294967295
 8005612:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005614:	6879      	ldr	r1, [r7, #4]
 8005616:	68b8      	ldr	r0, [r7, #8]
 8005618:	f000 fa52 	bl	8005ac0 <prvAddCurrentTaskToDelayedList>
	}
 800561c:	bf00      	nop
 800561e:	3718      	adds	r7, #24
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}
 8005624:	200006ec 	.word	0x200006ec

08005628 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b086      	sub	sp, #24
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d10b      	bne.n	8005656 <xTaskRemoveFromEventList+0x2e>
 800563e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005642:	b672      	cpsid	i
 8005644:	f383 8811 	msr	BASEPRI, r3
 8005648:	f3bf 8f6f 	isb	sy
 800564c:	f3bf 8f4f 	dsb	sy
 8005650:	b662      	cpsie	i
 8005652:	60fb      	str	r3, [r7, #12]
 8005654:	e7fe      	b.n	8005654 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	3318      	adds	r3, #24
 800565a:	4618      	mov	r0, r3
 800565c:	f7fe fd40 	bl	80040e0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005660:	4b1d      	ldr	r3, [pc, #116]	; (80056d8 <xTaskRemoveFromEventList+0xb0>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d11d      	bne.n	80056a4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	3304      	adds	r3, #4
 800566c:	4618      	mov	r0, r3
 800566e:	f7fe fd37 	bl	80040e0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005676:	4b19      	ldr	r3, [pc, #100]	; (80056dc <xTaskRemoveFromEventList+0xb4>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	429a      	cmp	r2, r3
 800567c:	d903      	bls.n	8005686 <xTaskRemoveFromEventList+0x5e>
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005682:	4a16      	ldr	r2, [pc, #88]	; (80056dc <xTaskRemoveFromEventList+0xb4>)
 8005684:	6013      	str	r3, [r2, #0]
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800568a:	4613      	mov	r3, r2
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	4413      	add	r3, r2
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	4a13      	ldr	r2, [pc, #76]	; (80056e0 <xTaskRemoveFromEventList+0xb8>)
 8005694:	441a      	add	r2, r3
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	3304      	adds	r3, #4
 800569a:	4619      	mov	r1, r3
 800569c:	4610      	mov	r0, r2
 800569e:	f7fe fcc2 	bl	8004026 <vListInsertEnd>
 80056a2:	e005      	b.n	80056b0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	3318      	adds	r3, #24
 80056a8:	4619      	mov	r1, r3
 80056aa:	480e      	ldr	r0, [pc, #56]	; (80056e4 <xTaskRemoveFromEventList+0xbc>)
 80056ac:	f7fe fcbb 	bl	8004026 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056b4:	4b0c      	ldr	r3, [pc, #48]	; (80056e8 <xTaskRemoveFromEventList+0xc0>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d905      	bls.n	80056ca <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80056be:	2301      	movs	r3, #1
 80056c0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80056c2:	4b0a      	ldr	r3, [pc, #40]	; (80056ec <xTaskRemoveFromEventList+0xc4>)
 80056c4:	2201      	movs	r2, #1
 80056c6:	601a      	str	r2, [r3, #0]
 80056c8:	e001      	b.n	80056ce <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80056ca:	2300      	movs	r3, #0
 80056cc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80056ce:	697b      	ldr	r3, [r7, #20]
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3718      	adds	r7, #24
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}
 80056d8:	20000be8 	.word	0x20000be8
 80056dc:	20000bc8 	.word	0x20000bc8
 80056e0:	200006f0 	.word	0x200006f0
 80056e4:	20000b80 	.word	0x20000b80
 80056e8:	200006ec 	.word	0x200006ec
 80056ec:	20000bd4 	.word	0x20000bd4

080056f0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80056f8:	4b06      	ldr	r3, [pc, #24]	; (8005714 <vTaskInternalSetTimeOutState+0x24>)
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005700:	4b05      	ldr	r3, [pc, #20]	; (8005718 <vTaskInternalSetTimeOutState+0x28>)
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	605a      	str	r2, [r3, #4]
}
 8005708:	bf00      	nop
 800570a:	370c      	adds	r7, #12
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr
 8005714:	20000bd8 	.word	0x20000bd8
 8005718:	20000bc4 	.word	0x20000bc4

0800571c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b088      	sub	sp, #32
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d10b      	bne.n	8005744 <xTaskCheckForTimeOut+0x28>
 800572c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005730:	b672      	cpsid	i
 8005732:	f383 8811 	msr	BASEPRI, r3
 8005736:	f3bf 8f6f 	isb	sy
 800573a:	f3bf 8f4f 	dsb	sy
 800573e:	b662      	cpsie	i
 8005740:	613b      	str	r3, [r7, #16]
 8005742:	e7fe      	b.n	8005742 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d10b      	bne.n	8005762 <xTaskCheckForTimeOut+0x46>
 800574a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800574e:	b672      	cpsid	i
 8005750:	f383 8811 	msr	BASEPRI, r3
 8005754:	f3bf 8f6f 	isb	sy
 8005758:	f3bf 8f4f 	dsb	sy
 800575c:	b662      	cpsie	i
 800575e:	60fb      	str	r3, [r7, #12]
 8005760:	e7fe      	b.n	8005760 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 8005762:	f000 fe61 	bl	8006428 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005766:	4b1d      	ldr	r3, [pc, #116]	; (80057dc <xTaskCheckForTimeOut+0xc0>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	69ba      	ldr	r2, [r7, #24]
 8005772:	1ad3      	subs	r3, r2, r3
 8005774:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800577e:	d102      	bne.n	8005786 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005780:	2300      	movs	r3, #0
 8005782:	61fb      	str	r3, [r7, #28]
 8005784:	e023      	b.n	80057ce <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	4b15      	ldr	r3, [pc, #84]	; (80057e0 <xTaskCheckForTimeOut+0xc4>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	429a      	cmp	r2, r3
 8005790:	d007      	beq.n	80057a2 <xTaskCheckForTimeOut+0x86>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	69ba      	ldr	r2, [r7, #24]
 8005798:	429a      	cmp	r2, r3
 800579a:	d302      	bcc.n	80057a2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800579c:	2301      	movs	r3, #1
 800579e:	61fb      	str	r3, [r7, #28]
 80057a0:	e015      	b.n	80057ce <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	697a      	ldr	r2, [r7, #20]
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d20b      	bcs.n	80057c4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	1ad2      	subs	r2, r2, r3
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f7ff ff99 	bl	80056f0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80057be:	2300      	movs	r3, #0
 80057c0:	61fb      	str	r3, [r7, #28]
 80057c2:	e004      	b.n	80057ce <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	2200      	movs	r2, #0
 80057c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80057ca:	2301      	movs	r3, #1
 80057cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80057ce:	f000 fe5d 	bl	800648c <vPortExitCritical>

	return xReturn;
 80057d2:	69fb      	ldr	r3, [r7, #28]
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3720      	adds	r7, #32
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}
 80057dc:	20000bc4 	.word	0x20000bc4
 80057e0:	20000bd8 	.word	0x20000bd8

080057e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80057e4:	b480      	push	{r7}
 80057e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80057e8:	4b03      	ldr	r3, [pc, #12]	; (80057f8 <vTaskMissedYield+0x14>)
 80057ea:	2201      	movs	r2, #1
 80057ec:	601a      	str	r2, [r3, #0]
}
 80057ee:	bf00      	nop
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr
 80057f8:	20000bd4 	.word	0x20000bd4

080057fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b082      	sub	sp, #8
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005804:	f000 f852 	bl	80058ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005808:	4b06      	ldr	r3, [pc, #24]	; (8005824 <prvIdleTask+0x28>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	2b01      	cmp	r3, #1
 800580e:	d9f9      	bls.n	8005804 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005810:	4b05      	ldr	r3, [pc, #20]	; (8005828 <prvIdleTask+0x2c>)
 8005812:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005816:	601a      	str	r2, [r3, #0]
 8005818:	f3bf 8f4f 	dsb	sy
 800581c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005820:	e7f0      	b.n	8005804 <prvIdleTask+0x8>
 8005822:	bf00      	nop
 8005824:	200006f0 	.word	0x200006f0
 8005828:	e000ed04 	.word	0xe000ed04

0800582c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b082      	sub	sp, #8
 8005830:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005832:	2300      	movs	r3, #0
 8005834:	607b      	str	r3, [r7, #4]
 8005836:	e00c      	b.n	8005852 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	4613      	mov	r3, r2
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	4413      	add	r3, r2
 8005840:	009b      	lsls	r3, r3, #2
 8005842:	4a12      	ldr	r2, [pc, #72]	; (800588c <prvInitialiseTaskLists+0x60>)
 8005844:	4413      	add	r3, r2
 8005846:	4618      	mov	r0, r3
 8005848:	f7fe fbc0 	bl	8003fcc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	3301      	adds	r3, #1
 8005850:	607b      	str	r3, [r7, #4]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2b37      	cmp	r3, #55	; 0x37
 8005856:	d9ef      	bls.n	8005838 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005858:	480d      	ldr	r0, [pc, #52]	; (8005890 <prvInitialiseTaskLists+0x64>)
 800585a:	f7fe fbb7 	bl	8003fcc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800585e:	480d      	ldr	r0, [pc, #52]	; (8005894 <prvInitialiseTaskLists+0x68>)
 8005860:	f7fe fbb4 	bl	8003fcc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005864:	480c      	ldr	r0, [pc, #48]	; (8005898 <prvInitialiseTaskLists+0x6c>)
 8005866:	f7fe fbb1 	bl	8003fcc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800586a:	480c      	ldr	r0, [pc, #48]	; (800589c <prvInitialiseTaskLists+0x70>)
 800586c:	f7fe fbae 	bl	8003fcc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005870:	480b      	ldr	r0, [pc, #44]	; (80058a0 <prvInitialiseTaskLists+0x74>)
 8005872:	f7fe fbab 	bl	8003fcc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005876:	4b0b      	ldr	r3, [pc, #44]	; (80058a4 <prvInitialiseTaskLists+0x78>)
 8005878:	4a05      	ldr	r2, [pc, #20]	; (8005890 <prvInitialiseTaskLists+0x64>)
 800587a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800587c:	4b0a      	ldr	r3, [pc, #40]	; (80058a8 <prvInitialiseTaskLists+0x7c>)
 800587e:	4a05      	ldr	r2, [pc, #20]	; (8005894 <prvInitialiseTaskLists+0x68>)
 8005880:	601a      	str	r2, [r3, #0]
}
 8005882:	bf00      	nop
 8005884:	3708      	adds	r7, #8
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
 800588a:	bf00      	nop
 800588c:	200006f0 	.word	0x200006f0
 8005890:	20000b50 	.word	0x20000b50
 8005894:	20000b64 	.word	0x20000b64
 8005898:	20000b80 	.word	0x20000b80
 800589c:	20000b94 	.word	0x20000b94
 80058a0:	20000bac 	.word	0x20000bac
 80058a4:	20000b78 	.word	0x20000b78
 80058a8:	20000b7c 	.word	0x20000b7c

080058ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b082      	sub	sp, #8
 80058b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80058b2:	e019      	b.n	80058e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80058b4:	f000 fdb8 	bl	8006428 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058b8:	4b0f      	ldr	r3, [pc, #60]	; (80058f8 <prvCheckTasksWaitingTermination+0x4c>)
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	3304      	adds	r3, #4
 80058c4:	4618      	mov	r0, r3
 80058c6:	f7fe fc0b 	bl	80040e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80058ca:	4b0c      	ldr	r3, [pc, #48]	; (80058fc <prvCheckTasksWaitingTermination+0x50>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	3b01      	subs	r3, #1
 80058d0:	4a0a      	ldr	r2, [pc, #40]	; (80058fc <prvCheckTasksWaitingTermination+0x50>)
 80058d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80058d4:	4b0a      	ldr	r3, [pc, #40]	; (8005900 <prvCheckTasksWaitingTermination+0x54>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	3b01      	subs	r3, #1
 80058da:	4a09      	ldr	r2, [pc, #36]	; (8005900 <prvCheckTasksWaitingTermination+0x54>)
 80058dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80058de:	f000 fdd5 	bl	800648c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f000 f80e 	bl	8005904 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80058e8:	4b05      	ldr	r3, [pc, #20]	; (8005900 <prvCheckTasksWaitingTermination+0x54>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d1e1      	bne.n	80058b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80058f0:	bf00      	nop
 80058f2:	3708      	adds	r7, #8
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	20000b94 	.word	0x20000b94
 80058fc:	20000bc0 	.word	0x20000bc0
 8005900:	20000ba8 	.word	0x20000ba8

08005904 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005904:	b580      	push	{r7, lr}
 8005906:	b084      	sub	sp, #16
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005912:	2b00      	cmp	r3, #0
 8005914:	d108      	bne.n	8005928 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800591a:	4618      	mov	r0, r3
 800591c:	f000 ff6e 	bl	80067fc <vPortFree>
				vPortFree( pxTCB );
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f000 ff6b 	bl	80067fc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005926:	e019      	b.n	800595c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800592e:	2b01      	cmp	r3, #1
 8005930:	d103      	bne.n	800593a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f000 ff62 	bl	80067fc <vPortFree>
	}
 8005938:	e010      	b.n	800595c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005940:	2b02      	cmp	r3, #2
 8005942:	d00b      	beq.n	800595c <prvDeleteTCB+0x58>
 8005944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005948:	b672      	cpsid	i
 800594a:	f383 8811 	msr	BASEPRI, r3
 800594e:	f3bf 8f6f 	isb	sy
 8005952:	f3bf 8f4f 	dsb	sy
 8005956:	b662      	cpsie	i
 8005958:	60fb      	str	r3, [r7, #12]
 800595a:	e7fe      	b.n	800595a <prvDeleteTCB+0x56>
	}
 800595c:	bf00      	nop
 800595e:	3710      	adds	r7, #16
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}

08005964 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005964:	b480      	push	{r7}
 8005966:	b083      	sub	sp, #12
 8005968:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800596a:	4b0c      	ldr	r3, [pc, #48]	; (800599c <prvResetNextTaskUnblockTime+0x38>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d104      	bne.n	800597e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005974:	4b0a      	ldr	r3, [pc, #40]	; (80059a0 <prvResetNextTaskUnblockTime+0x3c>)
 8005976:	f04f 32ff 	mov.w	r2, #4294967295
 800597a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800597c:	e008      	b.n	8005990 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800597e:	4b07      	ldr	r3, [pc, #28]	; (800599c <prvResetNextTaskUnblockTime+0x38>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	4a04      	ldr	r2, [pc, #16]	; (80059a0 <prvResetNextTaskUnblockTime+0x3c>)
 800598e:	6013      	str	r3, [r2, #0]
}
 8005990:	bf00      	nop
 8005992:	370c      	adds	r7, #12
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr
 800599c:	20000b78 	.word	0x20000b78
 80059a0:	20000be0 	.word	0x20000be0

080059a4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80059aa:	4b0b      	ldr	r3, [pc, #44]	; (80059d8 <xTaskGetSchedulerState+0x34>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d102      	bne.n	80059b8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80059b2:	2301      	movs	r3, #1
 80059b4:	607b      	str	r3, [r7, #4]
 80059b6:	e008      	b.n	80059ca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059b8:	4b08      	ldr	r3, [pc, #32]	; (80059dc <xTaskGetSchedulerState+0x38>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d102      	bne.n	80059c6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80059c0:	2302      	movs	r3, #2
 80059c2:	607b      	str	r3, [r7, #4]
 80059c4:	e001      	b.n	80059ca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80059c6:	2300      	movs	r3, #0
 80059c8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80059ca:	687b      	ldr	r3, [r7, #4]
	}
 80059cc:	4618      	mov	r0, r3
 80059ce:	370c      	adds	r7, #12
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr
 80059d8:	20000bcc 	.word	0x20000bcc
 80059dc:	20000be8 	.word	0x20000be8

080059e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b086      	sub	sp, #24
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80059ec:	2300      	movs	r3, #0
 80059ee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d058      	beq.n	8005aa8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80059f6:	4b2f      	ldr	r3, [pc, #188]	; (8005ab4 <xTaskPriorityDisinherit+0xd4>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	693a      	ldr	r2, [r7, #16]
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d00b      	beq.n	8005a18 <xTaskPriorityDisinherit+0x38>
 8005a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a04:	b672      	cpsid	i
 8005a06:	f383 8811 	msr	BASEPRI, r3
 8005a0a:	f3bf 8f6f 	isb	sy
 8005a0e:	f3bf 8f4f 	dsb	sy
 8005a12:	b662      	cpsie	i
 8005a14:	60fb      	str	r3, [r7, #12]
 8005a16:	e7fe      	b.n	8005a16 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d10b      	bne.n	8005a38 <xTaskPriorityDisinherit+0x58>
 8005a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a24:	b672      	cpsid	i
 8005a26:	f383 8811 	msr	BASEPRI, r3
 8005a2a:	f3bf 8f6f 	isb	sy
 8005a2e:	f3bf 8f4f 	dsb	sy
 8005a32:	b662      	cpsie	i
 8005a34:	60bb      	str	r3, [r7, #8]
 8005a36:	e7fe      	b.n	8005a36 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a3c:	1e5a      	subs	r2, r3, #1
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d02c      	beq.n	8005aa8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d128      	bne.n	8005aa8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	3304      	adds	r3, #4
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f7fe fb40 	bl	80040e0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a6c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a78:	4b0f      	ldr	r3, [pc, #60]	; (8005ab8 <xTaskPriorityDisinherit+0xd8>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d903      	bls.n	8005a88 <xTaskPriorityDisinherit+0xa8>
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a84:	4a0c      	ldr	r2, [pc, #48]	; (8005ab8 <xTaskPriorityDisinherit+0xd8>)
 8005a86:	6013      	str	r3, [r2, #0]
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a8c:	4613      	mov	r3, r2
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	4413      	add	r3, r2
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	4a09      	ldr	r2, [pc, #36]	; (8005abc <xTaskPriorityDisinherit+0xdc>)
 8005a96:	441a      	add	r2, r3
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	3304      	adds	r3, #4
 8005a9c:	4619      	mov	r1, r3
 8005a9e:	4610      	mov	r0, r2
 8005aa0:	f7fe fac1 	bl	8004026 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005aa8:	697b      	ldr	r3, [r7, #20]
	}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3718      	adds	r7, #24
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	200006ec 	.word	0x200006ec
 8005ab8:	20000bc8 	.word	0x20000bc8
 8005abc:	200006f0 	.word	0x200006f0

08005ac0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b084      	sub	sp, #16
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005aca:	4b21      	ldr	r3, [pc, #132]	; (8005b50 <prvAddCurrentTaskToDelayedList+0x90>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ad0:	4b20      	ldr	r3, [pc, #128]	; (8005b54 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	3304      	adds	r3, #4
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f7fe fb02 	bl	80040e0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ae2:	d10a      	bne.n	8005afa <prvAddCurrentTaskToDelayedList+0x3a>
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d007      	beq.n	8005afa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005aea:	4b1a      	ldr	r3, [pc, #104]	; (8005b54 <prvAddCurrentTaskToDelayedList+0x94>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	3304      	adds	r3, #4
 8005af0:	4619      	mov	r1, r3
 8005af2:	4819      	ldr	r0, [pc, #100]	; (8005b58 <prvAddCurrentTaskToDelayedList+0x98>)
 8005af4:	f7fe fa97 	bl	8004026 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005af8:	e026      	b.n	8005b48 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005afa:	68fa      	ldr	r2, [r7, #12]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4413      	add	r3, r2
 8005b00:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005b02:	4b14      	ldr	r3, [pc, #80]	; (8005b54 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	68ba      	ldr	r2, [r7, #8]
 8005b08:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005b0a:	68ba      	ldr	r2, [r7, #8]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d209      	bcs.n	8005b26 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b12:	4b12      	ldr	r3, [pc, #72]	; (8005b5c <prvAddCurrentTaskToDelayedList+0x9c>)
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	4b0f      	ldr	r3, [pc, #60]	; (8005b54 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	3304      	adds	r3, #4
 8005b1c:	4619      	mov	r1, r3
 8005b1e:	4610      	mov	r0, r2
 8005b20:	f7fe faa5 	bl	800406e <vListInsert>
}
 8005b24:	e010      	b.n	8005b48 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b26:	4b0e      	ldr	r3, [pc, #56]	; (8005b60 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	4b0a      	ldr	r3, [pc, #40]	; (8005b54 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	3304      	adds	r3, #4
 8005b30:	4619      	mov	r1, r3
 8005b32:	4610      	mov	r0, r2
 8005b34:	f7fe fa9b 	bl	800406e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005b38:	4b0a      	ldr	r3, [pc, #40]	; (8005b64 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	68ba      	ldr	r2, [r7, #8]
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d202      	bcs.n	8005b48 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005b42:	4a08      	ldr	r2, [pc, #32]	; (8005b64 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	6013      	str	r3, [r2, #0]
}
 8005b48:	bf00      	nop
 8005b4a:	3710      	adds	r7, #16
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}
 8005b50:	20000bc4 	.word	0x20000bc4
 8005b54:	200006ec 	.word	0x200006ec
 8005b58:	20000bac 	.word	0x20000bac
 8005b5c:	20000b7c 	.word	0x20000b7c
 8005b60:	20000b78 	.word	0x20000b78
 8005b64:	20000be0 	.word	0x20000be0

08005b68 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b08a      	sub	sp, #40	; 0x28
 8005b6c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005b72:	f000 fb0d 	bl	8006190 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005b76:	4b1d      	ldr	r3, [pc, #116]	; (8005bec <xTimerCreateTimerTask+0x84>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d021      	beq.n	8005bc2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005b82:	2300      	movs	r3, #0
 8005b84:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005b86:	1d3a      	adds	r2, r7, #4
 8005b88:	f107 0108 	add.w	r1, r7, #8
 8005b8c:	f107 030c 	add.w	r3, r7, #12
 8005b90:	4618      	mov	r0, r3
 8005b92:	f7fe fa01 	bl	8003f98 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005b96:	6879      	ldr	r1, [r7, #4]
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	68fa      	ldr	r2, [r7, #12]
 8005b9c:	9202      	str	r2, [sp, #8]
 8005b9e:	9301      	str	r3, [sp, #4]
 8005ba0:	2302      	movs	r3, #2
 8005ba2:	9300      	str	r3, [sp, #0]
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	460a      	mov	r2, r1
 8005ba8:	4911      	ldr	r1, [pc, #68]	; (8005bf0 <xTimerCreateTimerTask+0x88>)
 8005baa:	4812      	ldr	r0, [pc, #72]	; (8005bf4 <xTimerCreateTimerTask+0x8c>)
 8005bac:	f7fe ffb8 	bl	8004b20 <xTaskCreateStatic>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	4b11      	ldr	r3, [pc, #68]	; (8005bf8 <xTimerCreateTimerTask+0x90>)
 8005bb4:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005bb6:	4b10      	ldr	r3, [pc, #64]	; (8005bf8 <xTimerCreateTimerTask+0x90>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d001      	beq.n	8005bc2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d10b      	bne.n	8005be0 <xTimerCreateTimerTask+0x78>
 8005bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bcc:	b672      	cpsid	i
 8005bce:	f383 8811 	msr	BASEPRI, r3
 8005bd2:	f3bf 8f6f 	isb	sy
 8005bd6:	f3bf 8f4f 	dsb	sy
 8005bda:	b662      	cpsie	i
 8005bdc:	613b      	str	r3, [r7, #16]
 8005bde:	e7fe      	b.n	8005bde <xTimerCreateTimerTask+0x76>
	return xReturn;
 8005be0:	697b      	ldr	r3, [r7, #20]
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3718      	adds	r7, #24
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
 8005bea:	bf00      	nop
 8005bec:	20000c1c 	.word	0x20000c1c
 8005bf0:	08006acc 	.word	0x08006acc
 8005bf4:	08005d35 	.word	0x08005d35
 8005bf8:	20000c20 	.word	0x20000c20

08005bfc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b08a      	sub	sp, #40	; 0x28
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	60f8      	str	r0, [r7, #12]
 8005c04:	60b9      	str	r1, [r7, #8]
 8005c06:	607a      	str	r2, [r7, #4]
 8005c08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d10b      	bne.n	8005c2c <xTimerGenericCommand+0x30>
 8005c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c18:	b672      	cpsid	i
 8005c1a:	f383 8811 	msr	BASEPRI, r3
 8005c1e:	f3bf 8f6f 	isb	sy
 8005c22:	f3bf 8f4f 	dsb	sy
 8005c26:	b662      	cpsie	i
 8005c28:	623b      	str	r3, [r7, #32]
 8005c2a:	e7fe      	b.n	8005c2a <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005c2c:	4b19      	ldr	r3, [pc, #100]	; (8005c94 <xTimerGenericCommand+0x98>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d02a      	beq.n	8005c8a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	2b05      	cmp	r3, #5
 8005c44:	dc18      	bgt.n	8005c78 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005c46:	f7ff fead 	bl	80059a4 <xTaskGetSchedulerState>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	2b02      	cmp	r3, #2
 8005c4e:	d109      	bne.n	8005c64 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005c50:	4b10      	ldr	r3, [pc, #64]	; (8005c94 <xTimerGenericCommand+0x98>)
 8005c52:	6818      	ldr	r0, [r3, #0]
 8005c54:	f107 0110 	add.w	r1, r7, #16
 8005c58:	2300      	movs	r3, #0
 8005c5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c5c:	f7fe fb74 	bl	8004348 <xQueueGenericSend>
 8005c60:	6278      	str	r0, [r7, #36]	; 0x24
 8005c62:	e012      	b.n	8005c8a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005c64:	4b0b      	ldr	r3, [pc, #44]	; (8005c94 <xTimerGenericCommand+0x98>)
 8005c66:	6818      	ldr	r0, [r3, #0]
 8005c68:	f107 0110 	add.w	r1, r7, #16
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f7fe fb6a 	bl	8004348 <xQueueGenericSend>
 8005c74:	6278      	str	r0, [r7, #36]	; 0x24
 8005c76:	e008      	b.n	8005c8a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005c78:	4b06      	ldr	r3, [pc, #24]	; (8005c94 <xTimerGenericCommand+0x98>)
 8005c7a:	6818      	ldr	r0, [r3, #0]
 8005c7c:	f107 0110 	add.w	r1, r7, #16
 8005c80:	2300      	movs	r3, #0
 8005c82:	683a      	ldr	r2, [r7, #0]
 8005c84:	f7fe fc62 	bl	800454c <xQueueGenericSendFromISR>
 8005c88:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3728      	adds	r7, #40	; 0x28
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}
 8005c94:	20000c1c 	.word	0x20000c1c

08005c98 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b088      	sub	sp, #32
 8005c9c:	af02      	add	r7, sp, #8
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ca2:	4b23      	ldr	r3, [pc, #140]	; (8005d30 <prvProcessExpiredTimer+0x98>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	68db      	ldr	r3, [r3, #12]
 8005caa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	3304      	adds	r3, #4
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f7fe fa15 	bl	80040e0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005cbc:	f003 0304 	and.w	r3, r3, #4
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d023      	beq.n	8005d0c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	699a      	ldr	r2, [r3, #24]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	18d1      	adds	r1, r2, r3
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	683a      	ldr	r2, [r7, #0]
 8005cd0:	6978      	ldr	r0, [r7, #20]
 8005cd2:	f000 f8d3 	bl	8005e7c <prvInsertTimerInActiveList>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d020      	beq.n	8005d1e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005cdc:	2300      	movs	r3, #0
 8005cde:	9300      	str	r3, [sp, #0]
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	687a      	ldr	r2, [r7, #4]
 8005ce4:	2100      	movs	r1, #0
 8005ce6:	6978      	ldr	r0, [r7, #20]
 8005ce8:	f7ff ff88 	bl	8005bfc <xTimerGenericCommand>
 8005cec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d114      	bne.n	8005d1e <prvProcessExpiredTimer+0x86>
 8005cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf8:	b672      	cpsid	i
 8005cfa:	f383 8811 	msr	BASEPRI, r3
 8005cfe:	f3bf 8f6f 	isb	sy
 8005d02:	f3bf 8f4f 	dsb	sy
 8005d06:	b662      	cpsie	i
 8005d08:	60fb      	str	r3, [r7, #12]
 8005d0a:	e7fe      	b.n	8005d0a <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d12:	f023 0301 	bic.w	r3, r3, #1
 8005d16:	b2da      	uxtb	r2, r3
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	6a1b      	ldr	r3, [r3, #32]
 8005d22:	6978      	ldr	r0, [r7, #20]
 8005d24:	4798      	blx	r3
}
 8005d26:	bf00      	nop
 8005d28:	3718      	adds	r7, #24
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}
 8005d2e:	bf00      	nop
 8005d30:	20000c14 	.word	0x20000c14

08005d34 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b084      	sub	sp, #16
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005d3c:	f107 0308 	add.w	r3, r7, #8
 8005d40:	4618      	mov	r0, r3
 8005d42:	f000 f857 	bl	8005df4 <prvGetNextExpireTime>
 8005d46:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	4619      	mov	r1, r3
 8005d4c:	68f8      	ldr	r0, [r7, #12]
 8005d4e:	f000 f803 	bl	8005d58 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005d52:	f000 f8d5 	bl	8005f00 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005d56:	e7f1      	b.n	8005d3c <prvTimerTask+0x8>

08005d58 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b084      	sub	sp, #16
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005d62:	f7ff fa29 	bl	80051b8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005d66:	f107 0308 	add.w	r3, r7, #8
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f000 f866 	bl	8005e3c <prvSampleTimeNow>
 8005d70:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d130      	bne.n	8005dda <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d10a      	bne.n	8005d94 <prvProcessTimerOrBlockTask+0x3c>
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d806      	bhi.n	8005d94 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005d86:	f7ff fa25 	bl	80051d4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005d8a:	68f9      	ldr	r1, [r7, #12]
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f7ff ff83 	bl	8005c98 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005d92:	e024      	b.n	8005dde <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d008      	beq.n	8005dac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005d9a:	4b13      	ldr	r3, [pc, #76]	; (8005de8 <prvProcessTimerOrBlockTask+0x90>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d101      	bne.n	8005da8 <prvProcessTimerOrBlockTask+0x50>
 8005da4:	2301      	movs	r3, #1
 8005da6:	e000      	b.n	8005daa <prvProcessTimerOrBlockTask+0x52>
 8005da8:	2300      	movs	r3, #0
 8005daa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005dac:	4b0f      	ldr	r3, [pc, #60]	; (8005dec <prvProcessTimerOrBlockTask+0x94>)
 8005dae:	6818      	ldr	r0, [r3, #0]
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	1ad3      	subs	r3, r2, r3
 8005db6:	683a      	ldr	r2, [r7, #0]
 8005db8:	4619      	mov	r1, r3
 8005dba:	f7fe fe7d 	bl	8004ab8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005dbe:	f7ff fa09 	bl	80051d4 <xTaskResumeAll>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d10a      	bne.n	8005dde <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005dc8:	4b09      	ldr	r3, [pc, #36]	; (8005df0 <prvProcessTimerOrBlockTask+0x98>)
 8005dca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dce:	601a      	str	r2, [r3, #0]
 8005dd0:	f3bf 8f4f 	dsb	sy
 8005dd4:	f3bf 8f6f 	isb	sy
}
 8005dd8:	e001      	b.n	8005dde <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005dda:	f7ff f9fb 	bl	80051d4 <xTaskResumeAll>
}
 8005dde:	bf00      	nop
 8005de0:	3710      	adds	r7, #16
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	20000c18 	.word	0x20000c18
 8005dec:	20000c1c 	.word	0x20000c1c
 8005df0:	e000ed04 	.word	0xe000ed04

08005df4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005df4:	b480      	push	{r7}
 8005df6:	b085      	sub	sp, #20
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005dfc:	4b0e      	ldr	r3, [pc, #56]	; (8005e38 <prvGetNextExpireTime+0x44>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d101      	bne.n	8005e0a <prvGetNextExpireTime+0x16>
 8005e06:	2201      	movs	r2, #1
 8005e08:	e000      	b.n	8005e0c <prvGetNextExpireTime+0x18>
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d105      	bne.n	8005e24 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005e18:	4b07      	ldr	r3, [pc, #28]	; (8005e38 <prvGetNextExpireTime+0x44>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	68db      	ldr	r3, [r3, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	60fb      	str	r3, [r7, #12]
 8005e22:	e001      	b.n	8005e28 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005e24:	2300      	movs	r3, #0
 8005e26:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005e28:	68fb      	ldr	r3, [r7, #12]
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3714      	adds	r7, #20
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr
 8005e36:	bf00      	nop
 8005e38:	20000c14 	.word	0x20000c14

08005e3c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b084      	sub	sp, #16
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005e44:	f7ff fa64 	bl	8005310 <xTaskGetTickCount>
 8005e48:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005e4a:	4b0b      	ldr	r3, [pc, #44]	; (8005e78 <prvSampleTimeNow+0x3c>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	68fa      	ldr	r2, [r7, #12]
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d205      	bcs.n	8005e60 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005e54:	f000 f936 	bl	80060c4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	601a      	str	r2, [r3, #0]
 8005e5e:	e002      	b.n	8005e66 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005e66:	4a04      	ldr	r2, [pc, #16]	; (8005e78 <prvSampleTimeNow+0x3c>)
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3710      	adds	r7, #16
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop
 8005e78:	20000c24 	.word	0x20000c24

08005e7c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b086      	sub	sp, #24
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	60f8      	str	r0, [r7, #12]
 8005e84:	60b9      	str	r1, [r7, #8]
 8005e86:	607a      	str	r2, [r7, #4]
 8005e88:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	68ba      	ldr	r2, [r7, #8]
 8005e92:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	68fa      	ldr	r2, [r7, #12]
 8005e98:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005e9a:	68ba      	ldr	r2, [r7, #8]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d812      	bhi.n	8005ec8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	1ad2      	subs	r2, r2, r3
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	699b      	ldr	r3, [r3, #24]
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d302      	bcc.n	8005eb6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	617b      	str	r3, [r7, #20]
 8005eb4:	e01b      	b.n	8005eee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005eb6:	4b10      	ldr	r3, [pc, #64]	; (8005ef8 <prvInsertTimerInActiveList+0x7c>)
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	3304      	adds	r3, #4
 8005ebe:	4619      	mov	r1, r3
 8005ec0:	4610      	mov	r0, r2
 8005ec2:	f7fe f8d4 	bl	800406e <vListInsert>
 8005ec6:	e012      	b.n	8005eee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005ec8:	687a      	ldr	r2, [r7, #4]
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d206      	bcs.n	8005ede <prvInsertTimerInActiveList+0x62>
 8005ed0:	68ba      	ldr	r2, [r7, #8]
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d302      	bcc.n	8005ede <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	617b      	str	r3, [r7, #20]
 8005edc:	e007      	b.n	8005eee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005ede:	4b07      	ldr	r3, [pc, #28]	; (8005efc <prvInsertTimerInActiveList+0x80>)
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	3304      	adds	r3, #4
 8005ee6:	4619      	mov	r1, r3
 8005ee8:	4610      	mov	r0, r2
 8005eea:	f7fe f8c0 	bl	800406e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005eee:	697b      	ldr	r3, [r7, #20]
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	3718      	adds	r7, #24
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}
 8005ef8:	20000c18 	.word	0x20000c18
 8005efc:	20000c14 	.word	0x20000c14

08005f00 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b08e      	sub	sp, #56	; 0x38
 8005f04:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005f06:	e0cc      	b.n	80060a2 <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	da19      	bge.n	8005f42 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005f0e:	1d3b      	adds	r3, r7, #4
 8005f10:	3304      	adds	r3, #4
 8005f12:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d10b      	bne.n	8005f32 <prvProcessReceivedCommands+0x32>
 8005f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f1e:	b672      	cpsid	i
 8005f20:	f383 8811 	msr	BASEPRI, r3
 8005f24:	f3bf 8f6f 	isb	sy
 8005f28:	f3bf 8f4f 	dsb	sy
 8005f2c:	b662      	cpsie	i
 8005f2e:	61fb      	str	r3, [r7, #28]
 8005f30:	e7fe      	b.n	8005f30 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f38:	6850      	ldr	r0, [r2, #4]
 8005f3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f3c:	6892      	ldr	r2, [r2, #8]
 8005f3e:	4611      	mov	r1, r2
 8005f40:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	f2c0 80ab 	blt.w	80060a0 <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f50:	695b      	ldr	r3, [r3, #20]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d004      	beq.n	8005f60 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f58:	3304      	adds	r3, #4
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f7fe f8c0 	bl	80040e0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005f60:	463b      	mov	r3, r7
 8005f62:	4618      	mov	r0, r3
 8005f64:	f7ff ff6a 	bl	8005e3c <prvSampleTimeNow>
 8005f68:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2b09      	cmp	r3, #9
 8005f6e:	f200 8098 	bhi.w	80060a2 <prvProcessReceivedCommands+0x1a2>
 8005f72:	a201      	add	r2, pc, #4	; (adr r2, 8005f78 <prvProcessReceivedCommands+0x78>)
 8005f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f78:	08005fa1 	.word	0x08005fa1
 8005f7c:	08005fa1 	.word	0x08005fa1
 8005f80:	08005fa1 	.word	0x08005fa1
 8005f84:	08006017 	.word	0x08006017
 8005f88:	0800602b 	.word	0x0800602b
 8005f8c:	08006077 	.word	0x08006077
 8005f90:	08005fa1 	.word	0x08005fa1
 8005f94:	08005fa1 	.word	0x08005fa1
 8005f98:	08006017 	.word	0x08006017
 8005f9c:	0800602b 	.word	0x0800602b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005fa6:	f043 0301 	orr.w	r3, r3, #1
 8005faa:	b2da      	uxtb	r2, r3
 8005fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005fb2:	68ba      	ldr	r2, [r7, #8]
 8005fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb6:	699b      	ldr	r3, [r3, #24]
 8005fb8:	18d1      	adds	r1, r2, r3
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fc0:	f7ff ff5c 	bl	8005e7c <prvInsertTimerInActiveList>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d06b      	beq.n	80060a2 <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fcc:	6a1b      	ldr	r3, [r3, #32]
 8005fce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fd0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005fd8:	f003 0304 	and.w	r3, r3, #4
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d060      	beq.n	80060a2 <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005fe0:	68ba      	ldr	r2, [r7, #8]
 8005fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe4:	699b      	ldr	r3, [r3, #24]
 8005fe6:	441a      	add	r2, r3
 8005fe8:	2300      	movs	r3, #0
 8005fea:	9300      	str	r3, [sp, #0]
 8005fec:	2300      	movs	r3, #0
 8005fee:	2100      	movs	r1, #0
 8005ff0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ff2:	f7ff fe03 	bl	8005bfc <xTimerGenericCommand>
 8005ff6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005ff8:	6a3b      	ldr	r3, [r7, #32]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d151      	bne.n	80060a2 <prvProcessReceivedCommands+0x1a2>
 8005ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006002:	b672      	cpsid	i
 8006004:	f383 8811 	msr	BASEPRI, r3
 8006008:	f3bf 8f6f 	isb	sy
 800600c:	f3bf 8f4f 	dsb	sy
 8006010:	b662      	cpsie	i
 8006012:	61bb      	str	r3, [r7, #24]
 8006014:	e7fe      	b.n	8006014 <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006018:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800601c:	f023 0301 	bic.w	r3, r3, #1
 8006020:	b2da      	uxtb	r2, r3
 8006022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006024:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006028:	e03b      	b.n	80060a2 <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800602a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800602c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006030:	f043 0301 	orr.w	r3, r3, #1
 8006034:	b2da      	uxtb	r2, r3
 8006036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006038:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800603c:	68ba      	ldr	r2, [r7, #8]
 800603e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006040:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006044:	699b      	ldr	r3, [r3, #24]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d10b      	bne.n	8006062 <prvProcessReceivedCommands+0x162>
 800604a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800604e:	b672      	cpsid	i
 8006050:	f383 8811 	msr	BASEPRI, r3
 8006054:	f3bf 8f6f 	isb	sy
 8006058:	f3bf 8f4f 	dsb	sy
 800605c:	b662      	cpsie	i
 800605e:	617b      	str	r3, [r7, #20]
 8006060:	e7fe      	b.n	8006060 <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006064:	699a      	ldr	r2, [r3, #24]
 8006066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006068:	18d1      	adds	r1, r2, r3
 800606a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800606e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006070:	f7ff ff04 	bl	8005e7c <prvInsertTimerInActiveList>
					break;
 8006074:	e015      	b.n	80060a2 <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006078:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800607c:	f003 0302 	and.w	r3, r3, #2
 8006080:	2b00      	cmp	r3, #0
 8006082:	d103      	bne.n	800608c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006084:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006086:	f000 fbb9 	bl	80067fc <vPortFree>
 800608a:	e00a      	b.n	80060a2 <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800608c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800608e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006092:	f023 0301 	bic.w	r3, r3, #1
 8006096:	b2da      	uxtb	r2, r3
 8006098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800609a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800609e:	e000      	b.n	80060a2 <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80060a0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80060a2:	4b07      	ldr	r3, [pc, #28]	; (80060c0 <prvProcessReceivedCommands+0x1c0>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	1d39      	adds	r1, r7, #4
 80060a8:	2200      	movs	r2, #0
 80060aa:	4618      	mov	r0, r3
 80060ac:	f7fe faea 	bl	8004684 <xQueueReceive>
 80060b0:	4603      	mov	r3, r0
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	f47f af28 	bne.w	8005f08 <prvProcessReceivedCommands+0x8>
	}
}
 80060b8:	bf00      	nop
 80060ba:	3730      	adds	r7, #48	; 0x30
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}
 80060c0:	20000c1c 	.word	0x20000c1c

080060c4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b088      	sub	sp, #32
 80060c8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80060ca:	e049      	b.n	8006160 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80060cc:	4b2e      	ldr	r3, [pc, #184]	; (8006188 <prvSwitchTimerLists+0xc4>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	68db      	ldr	r3, [r3, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060d6:	4b2c      	ldr	r3, [pc, #176]	; (8006188 <prvSwitchTimerLists+0xc4>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	68db      	ldr	r3, [r3, #12]
 80060dc:	68db      	ldr	r3, [r3, #12]
 80060de:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	3304      	adds	r3, #4
 80060e4:	4618      	mov	r0, r3
 80060e6:	f7fd fffb 	bl	80040e0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	6a1b      	ldr	r3, [r3, #32]
 80060ee:	68f8      	ldr	r0, [r7, #12]
 80060f0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060f8:	f003 0304 	and.w	r3, r3, #4
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d02f      	beq.n	8006160 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	699b      	ldr	r3, [r3, #24]
 8006104:	693a      	ldr	r2, [r7, #16]
 8006106:	4413      	add	r3, r2
 8006108:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800610a:	68ba      	ldr	r2, [r7, #8]
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	429a      	cmp	r2, r3
 8006110:	d90e      	bls.n	8006130 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	68ba      	ldr	r2, [r7, #8]
 8006116:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	68fa      	ldr	r2, [r7, #12]
 800611c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800611e:	4b1a      	ldr	r3, [pc, #104]	; (8006188 <prvSwitchTimerLists+0xc4>)
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	3304      	adds	r3, #4
 8006126:	4619      	mov	r1, r3
 8006128:	4610      	mov	r0, r2
 800612a:	f7fd ffa0 	bl	800406e <vListInsert>
 800612e:	e017      	b.n	8006160 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006130:	2300      	movs	r3, #0
 8006132:	9300      	str	r3, [sp, #0]
 8006134:	2300      	movs	r3, #0
 8006136:	693a      	ldr	r2, [r7, #16]
 8006138:	2100      	movs	r1, #0
 800613a:	68f8      	ldr	r0, [r7, #12]
 800613c:	f7ff fd5e 	bl	8005bfc <xTimerGenericCommand>
 8006140:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d10b      	bne.n	8006160 <prvSwitchTimerLists+0x9c>
 8006148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800614c:	b672      	cpsid	i
 800614e:	f383 8811 	msr	BASEPRI, r3
 8006152:	f3bf 8f6f 	isb	sy
 8006156:	f3bf 8f4f 	dsb	sy
 800615a:	b662      	cpsie	i
 800615c:	603b      	str	r3, [r7, #0]
 800615e:	e7fe      	b.n	800615e <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006160:	4b09      	ldr	r3, [pc, #36]	; (8006188 <prvSwitchTimerLists+0xc4>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d1b0      	bne.n	80060cc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800616a:	4b07      	ldr	r3, [pc, #28]	; (8006188 <prvSwitchTimerLists+0xc4>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006170:	4b06      	ldr	r3, [pc, #24]	; (800618c <prvSwitchTimerLists+0xc8>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a04      	ldr	r2, [pc, #16]	; (8006188 <prvSwitchTimerLists+0xc4>)
 8006176:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006178:	4a04      	ldr	r2, [pc, #16]	; (800618c <prvSwitchTimerLists+0xc8>)
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	6013      	str	r3, [r2, #0]
}
 800617e:	bf00      	nop
 8006180:	3718      	adds	r7, #24
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}
 8006186:	bf00      	nop
 8006188:	20000c14 	.word	0x20000c14
 800618c:	20000c18 	.word	0x20000c18

08006190 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b082      	sub	sp, #8
 8006194:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006196:	f000 f947 	bl	8006428 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800619a:	4b15      	ldr	r3, [pc, #84]	; (80061f0 <prvCheckForValidListAndQueue+0x60>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d120      	bne.n	80061e4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80061a2:	4814      	ldr	r0, [pc, #80]	; (80061f4 <prvCheckForValidListAndQueue+0x64>)
 80061a4:	f7fd ff12 	bl	8003fcc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80061a8:	4813      	ldr	r0, [pc, #76]	; (80061f8 <prvCheckForValidListAndQueue+0x68>)
 80061aa:	f7fd ff0f 	bl	8003fcc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80061ae:	4b13      	ldr	r3, [pc, #76]	; (80061fc <prvCheckForValidListAndQueue+0x6c>)
 80061b0:	4a10      	ldr	r2, [pc, #64]	; (80061f4 <prvCheckForValidListAndQueue+0x64>)
 80061b2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80061b4:	4b12      	ldr	r3, [pc, #72]	; (8006200 <prvCheckForValidListAndQueue+0x70>)
 80061b6:	4a10      	ldr	r2, [pc, #64]	; (80061f8 <prvCheckForValidListAndQueue+0x68>)
 80061b8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80061ba:	2300      	movs	r3, #0
 80061bc:	9300      	str	r3, [sp, #0]
 80061be:	4b11      	ldr	r3, [pc, #68]	; (8006204 <prvCheckForValidListAndQueue+0x74>)
 80061c0:	4a11      	ldr	r2, [pc, #68]	; (8006208 <prvCheckForValidListAndQueue+0x78>)
 80061c2:	2110      	movs	r1, #16
 80061c4:	200a      	movs	r0, #10
 80061c6:	f7fe f81f 	bl	8004208 <xQueueGenericCreateStatic>
 80061ca:	4602      	mov	r2, r0
 80061cc:	4b08      	ldr	r3, [pc, #32]	; (80061f0 <prvCheckForValidListAndQueue+0x60>)
 80061ce:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80061d0:	4b07      	ldr	r3, [pc, #28]	; (80061f0 <prvCheckForValidListAndQueue+0x60>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d005      	beq.n	80061e4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80061d8:	4b05      	ldr	r3, [pc, #20]	; (80061f0 <prvCheckForValidListAndQueue+0x60>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	490b      	ldr	r1, [pc, #44]	; (800620c <prvCheckForValidListAndQueue+0x7c>)
 80061de:	4618      	mov	r0, r3
 80061e0:	f7fe fc42 	bl	8004a68 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80061e4:	f000 f952 	bl	800648c <vPortExitCritical>
}
 80061e8:	bf00      	nop
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
 80061ee:	bf00      	nop
 80061f0:	20000c1c 	.word	0x20000c1c
 80061f4:	20000bec 	.word	0x20000bec
 80061f8:	20000c00 	.word	0x20000c00
 80061fc:	20000c14 	.word	0x20000c14
 8006200:	20000c18 	.word	0x20000c18
 8006204:	20000cc8 	.word	0x20000cc8
 8006208:	20000c28 	.word	0x20000c28
 800620c:	08006ad4 	.word	0x08006ad4

08006210 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006210:	b480      	push	{r7}
 8006212:	b085      	sub	sp, #20
 8006214:	af00      	add	r7, sp, #0
 8006216:	60f8      	str	r0, [r7, #12]
 8006218:	60b9      	str	r1, [r7, #8]
 800621a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	3b04      	subs	r3, #4
 8006220:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006228:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	3b04      	subs	r3, #4
 800622e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	f023 0201 	bic.w	r2, r3, #1
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	3b04      	subs	r3, #4
 800623e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006240:	4a0c      	ldr	r2, [pc, #48]	; (8006274 <pxPortInitialiseStack+0x64>)
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	3b14      	subs	r3, #20
 800624a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800624c:	687a      	ldr	r2, [r7, #4]
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	3b04      	subs	r3, #4
 8006256:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f06f 0202 	mvn.w	r2, #2
 800625e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	3b20      	subs	r3, #32
 8006264:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006266:	68fb      	ldr	r3, [r7, #12]
}
 8006268:	4618      	mov	r0, r3
 800626a:	3714      	adds	r7, #20
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr
 8006274:	08006279 	.word	0x08006279

08006278 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006278:	b480      	push	{r7}
 800627a:	b085      	sub	sp, #20
 800627c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800627e:	2300      	movs	r3, #0
 8006280:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006282:	4b13      	ldr	r3, [pc, #76]	; (80062d0 <prvTaskExitError+0x58>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800628a:	d00b      	beq.n	80062a4 <prvTaskExitError+0x2c>
 800628c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006290:	b672      	cpsid	i
 8006292:	f383 8811 	msr	BASEPRI, r3
 8006296:	f3bf 8f6f 	isb	sy
 800629a:	f3bf 8f4f 	dsb	sy
 800629e:	b662      	cpsie	i
 80062a0:	60fb      	str	r3, [r7, #12]
 80062a2:	e7fe      	b.n	80062a2 <prvTaskExitError+0x2a>
 80062a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a8:	b672      	cpsid	i
 80062aa:	f383 8811 	msr	BASEPRI, r3
 80062ae:	f3bf 8f6f 	isb	sy
 80062b2:	f3bf 8f4f 	dsb	sy
 80062b6:	b662      	cpsie	i
 80062b8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80062ba:	bf00      	nop
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d0fc      	beq.n	80062bc <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80062c2:	bf00      	nop
 80062c4:	3714      	adds	r7, #20
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr
 80062ce:	bf00      	nop
 80062d0:	2000000c 	.word	0x2000000c
	...

080062e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80062e0:	4b07      	ldr	r3, [pc, #28]	; (8006300 <pxCurrentTCBConst2>)
 80062e2:	6819      	ldr	r1, [r3, #0]
 80062e4:	6808      	ldr	r0, [r1, #0]
 80062e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062ea:	f380 8809 	msr	PSP, r0
 80062ee:	f3bf 8f6f 	isb	sy
 80062f2:	f04f 0000 	mov.w	r0, #0
 80062f6:	f380 8811 	msr	BASEPRI, r0
 80062fa:	4770      	bx	lr
 80062fc:	f3af 8000 	nop.w

08006300 <pxCurrentTCBConst2>:
 8006300:	200006ec 	.word	0x200006ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006304:	bf00      	nop
 8006306:	bf00      	nop

08006308 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006308:	4808      	ldr	r0, [pc, #32]	; (800632c <prvPortStartFirstTask+0x24>)
 800630a:	6800      	ldr	r0, [r0, #0]
 800630c:	6800      	ldr	r0, [r0, #0]
 800630e:	f380 8808 	msr	MSP, r0
 8006312:	f04f 0000 	mov.w	r0, #0
 8006316:	f380 8814 	msr	CONTROL, r0
 800631a:	b662      	cpsie	i
 800631c:	b661      	cpsie	f
 800631e:	f3bf 8f4f 	dsb	sy
 8006322:	f3bf 8f6f 	isb	sy
 8006326:	df00      	svc	0
 8006328:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800632a:	bf00      	nop
 800632c:	e000ed08 	.word	0xe000ed08

08006330 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b084      	sub	sp, #16
 8006334:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006336:	4b36      	ldr	r3, [pc, #216]	; (8006410 <xPortStartScheduler+0xe0>)
 8006338:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	b2db      	uxtb	r3, r3
 8006340:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	22ff      	movs	r2, #255	; 0xff
 8006346:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	781b      	ldrb	r3, [r3, #0]
 800634c:	b2db      	uxtb	r3, r3
 800634e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006350:	78fb      	ldrb	r3, [r7, #3]
 8006352:	b2db      	uxtb	r3, r3
 8006354:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006358:	b2da      	uxtb	r2, r3
 800635a:	4b2e      	ldr	r3, [pc, #184]	; (8006414 <xPortStartScheduler+0xe4>)
 800635c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800635e:	4b2e      	ldr	r3, [pc, #184]	; (8006418 <xPortStartScheduler+0xe8>)
 8006360:	2207      	movs	r2, #7
 8006362:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006364:	e009      	b.n	800637a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006366:	4b2c      	ldr	r3, [pc, #176]	; (8006418 <xPortStartScheduler+0xe8>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	3b01      	subs	r3, #1
 800636c:	4a2a      	ldr	r2, [pc, #168]	; (8006418 <xPortStartScheduler+0xe8>)
 800636e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006370:	78fb      	ldrb	r3, [r7, #3]
 8006372:	b2db      	uxtb	r3, r3
 8006374:	005b      	lsls	r3, r3, #1
 8006376:	b2db      	uxtb	r3, r3
 8006378:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800637a:	78fb      	ldrb	r3, [r7, #3]
 800637c:	b2db      	uxtb	r3, r3
 800637e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006382:	2b80      	cmp	r3, #128	; 0x80
 8006384:	d0ef      	beq.n	8006366 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006386:	4b24      	ldr	r3, [pc, #144]	; (8006418 <xPortStartScheduler+0xe8>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f1c3 0307 	rsb	r3, r3, #7
 800638e:	2b04      	cmp	r3, #4
 8006390:	d00b      	beq.n	80063aa <xPortStartScheduler+0x7a>
 8006392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006396:	b672      	cpsid	i
 8006398:	f383 8811 	msr	BASEPRI, r3
 800639c:	f3bf 8f6f 	isb	sy
 80063a0:	f3bf 8f4f 	dsb	sy
 80063a4:	b662      	cpsie	i
 80063a6:	60bb      	str	r3, [r7, #8]
 80063a8:	e7fe      	b.n	80063a8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80063aa:	4b1b      	ldr	r3, [pc, #108]	; (8006418 <xPortStartScheduler+0xe8>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	021b      	lsls	r3, r3, #8
 80063b0:	4a19      	ldr	r2, [pc, #100]	; (8006418 <xPortStartScheduler+0xe8>)
 80063b2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80063b4:	4b18      	ldr	r3, [pc, #96]	; (8006418 <xPortStartScheduler+0xe8>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80063bc:	4a16      	ldr	r2, [pc, #88]	; (8006418 <xPortStartScheduler+0xe8>)
 80063be:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	b2da      	uxtb	r2, r3
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80063c8:	4b14      	ldr	r3, [pc, #80]	; (800641c <xPortStartScheduler+0xec>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a13      	ldr	r2, [pc, #76]	; (800641c <xPortStartScheduler+0xec>)
 80063ce:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80063d2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80063d4:	4b11      	ldr	r3, [pc, #68]	; (800641c <xPortStartScheduler+0xec>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a10      	ldr	r2, [pc, #64]	; (800641c <xPortStartScheduler+0xec>)
 80063da:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80063de:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80063e0:	f000 f8d4 	bl	800658c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80063e4:	4b0e      	ldr	r3, [pc, #56]	; (8006420 <xPortStartScheduler+0xf0>)
 80063e6:	2200      	movs	r2, #0
 80063e8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80063ea:	f000 f8f3 	bl	80065d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80063ee:	4b0d      	ldr	r3, [pc, #52]	; (8006424 <xPortStartScheduler+0xf4>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a0c      	ldr	r2, [pc, #48]	; (8006424 <xPortStartScheduler+0xf4>)
 80063f4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80063f8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80063fa:	f7ff ff85 	bl	8006308 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80063fe:	f7ff f863 	bl	80054c8 <vTaskSwitchContext>
	prvTaskExitError();
 8006402:	f7ff ff39 	bl	8006278 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006406:	2300      	movs	r3, #0
}
 8006408:	4618      	mov	r0, r3
 800640a:	3710      	adds	r7, #16
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}
 8006410:	e000e400 	.word	0xe000e400
 8006414:	20000d18 	.word	0x20000d18
 8006418:	20000d1c 	.word	0x20000d1c
 800641c:	e000ed20 	.word	0xe000ed20
 8006420:	2000000c 	.word	0x2000000c
 8006424:	e000ef34 	.word	0xe000ef34

08006428 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006428:	b480      	push	{r7}
 800642a:	b083      	sub	sp, #12
 800642c:	af00      	add	r7, sp, #0
 800642e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006432:	b672      	cpsid	i
 8006434:	f383 8811 	msr	BASEPRI, r3
 8006438:	f3bf 8f6f 	isb	sy
 800643c:	f3bf 8f4f 	dsb	sy
 8006440:	b662      	cpsie	i
 8006442:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006444:	4b0f      	ldr	r3, [pc, #60]	; (8006484 <vPortEnterCritical+0x5c>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	3301      	adds	r3, #1
 800644a:	4a0e      	ldr	r2, [pc, #56]	; (8006484 <vPortEnterCritical+0x5c>)
 800644c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800644e:	4b0d      	ldr	r3, [pc, #52]	; (8006484 <vPortEnterCritical+0x5c>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	2b01      	cmp	r3, #1
 8006454:	d110      	bne.n	8006478 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006456:	4b0c      	ldr	r3, [pc, #48]	; (8006488 <vPortEnterCritical+0x60>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	b2db      	uxtb	r3, r3
 800645c:	2b00      	cmp	r3, #0
 800645e:	d00b      	beq.n	8006478 <vPortEnterCritical+0x50>
 8006460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006464:	b672      	cpsid	i
 8006466:	f383 8811 	msr	BASEPRI, r3
 800646a:	f3bf 8f6f 	isb	sy
 800646e:	f3bf 8f4f 	dsb	sy
 8006472:	b662      	cpsie	i
 8006474:	603b      	str	r3, [r7, #0]
 8006476:	e7fe      	b.n	8006476 <vPortEnterCritical+0x4e>
	}
}
 8006478:	bf00      	nop
 800647a:	370c      	adds	r7, #12
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr
 8006484:	2000000c 	.word	0x2000000c
 8006488:	e000ed04 	.word	0xe000ed04

0800648c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800648c:	b480      	push	{r7}
 800648e:	b083      	sub	sp, #12
 8006490:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006492:	4b12      	ldr	r3, [pc, #72]	; (80064dc <vPortExitCritical+0x50>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d10b      	bne.n	80064b2 <vPortExitCritical+0x26>
 800649a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800649e:	b672      	cpsid	i
 80064a0:	f383 8811 	msr	BASEPRI, r3
 80064a4:	f3bf 8f6f 	isb	sy
 80064a8:	f3bf 8f4f 	dsb	sy
 80064ac:	b662      	cpsie	i
 80064ae:	607b      	str	r3, [r7, #4]
 80064b0:	e7fe      	b.n	80064b0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 80064b2:	4b0a      	ldr	r3, [pc, #40]	; (80064dc <vPortExitCritical+0x50>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	3b01      	subs	r3, #1
 80064b8:	4a08      	ldr	r2, [pc, #32]	; (80064dc <vPortExitCritical+0x50>)
 80064ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80064bc:	4b07      	ldr	r3, [pc, #28]	; (80064dc <vPortExitCritical+0x50>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d104      	bne.n	80064ce <vPortExitCritical+0x42>
 80064c4:	2300      	movs	r3, #0
 80064c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80064ce:	bf00      	nop
 80064d0:	370c      	adds	r7, #12
 80064d2:	46bd      	mov	sp, r7
 80064d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d8:	4770      	bx	lr
 80064da:	bf00      	nop
 80064dc:	2000000c 	.word	0x2000000c

080064e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80064e0:	f3ef 8009 	mrs	r0, PSP
 80064e4:	f3bf 8f6f 	isb	sy
 80064e8:	4b15      	ldr	r3, [pc, #84]	; (8006540 <pxCurrentTCBConst>)
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	f01e 0f10 	tst.w	lr, #16
 80064f0:	bf08      	it	eq
 80064f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80064f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064fa:	6010      	str	r0, [r2, #0]
 80064fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006500:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006504:	b672      	cpsid	i
 8006506:	f380 8811 	msr	BASEPRI, r0
 800650a:	f3bf 8f4f 	dsb	sy
 800650e:	f3bf 8f6f 	isb	sy
 8006512:	b662      	cpsie	i
 8006514:	f7fe ffd8 	bl	80054c8 <vTaskSwitchContext>
 8006518:	f04f 0000 	mov.w	r0, #0
 800651c:	f380 8811 	msr	BASEPRI, r0
 8006520:	bc09      	pop	{r0, r3}
 8006522:	6819      	ldr	r1, [r3, #0]
 8006524:	6808      	ldr	r0, [r1, #0]
 8006526:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800652a:	f01e 0f10 	tst.w	lr, #16
 800652e:	bf08      	it	eq
 8006530:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006534:	f380 8809 	msr	PSP, r0
 8006538:	f3bf 8f6f 	isb	sy
 800653c:	4770      	bx	lr
 800653e:	bf00      	nop

08006540 <pxCurrentTCBConst>:
 8006540:	200006ec 	.word	0x200006ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006544:	bf00      	nop
 8006546:	bf00      	nop

08006548 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b082      	sub	sp, #8
 800654c:	af00      	add	r7, sp, #0
	__asm volatile
 800654e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006552:	b672      	cpsid	i
 8006554:	f383 8811 	msr	BASEPRI, r3
 8006558:	f3bf 8f6f 	isb	sy
 800655c:	f3bf 8f4f 	dsb	sy
 8006560:	b662      	cpsie	i
 8006562:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006564:	f7fe fef6 	bl	8005354 <xTaskIncrementTick>
 8006568:	4603      	mov	r3, r0
 800656a:	2b00      	cmp	r3, #0
 800656c:	d003      	beq.n	8006576 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800656e:	4b06      	ldr	r3, [pc, #24]	; (8006588 <SysTick_Handler+0x40>)
 8006570:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006574:	601a      	str	r2, [r3, #0]
 8006576:	2300      	movs	r3, #0
 8006578:	603b      	str	r3, [r7, #0]
	__asm volatile
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8006580:	bf00      	nop
 8006582:	3708      	adds	r7, #8
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}
 8006588:	e000ed04 	.word	0xe000ed04

0800658c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800658c:	b480      	push	{r7}
 800658e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006590:	4b0b      	ldr	r3, [pc, #44]	; (80065c0 <vPortSetupTimerInterrupt+0x34>)
 8006592:	2200      	movs	r2, #0
 8006594:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006596:	4b0b      	ldr	r3, [pc, #44]	; (80065c4 <vPortSetupTimerInterrupt+0x38>)
 8006598:	2200      	movs	r2, #0
 800659a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800659c:	4b0a      	ldr	r3, [pc, #40]	; (80065c8 <vPortSetupTimerInterrupt+0x3c>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a0a      	ldr	r2, [pc, #40]	; (80065cc <vPortSetupTimerInterrupt+0x40>)
 80065a2:	fba2 2303 	umull	r2, r3, r2, r3
 80065a6:	099b      	lsrs	r3, r3, #6
 80065a8:	4a09      	ldr	r2, [pc, #36]	; (80065d0 <vPortSetupTimerInterrupt+0x44>)
 80065aa:	3b01      	subs	r3, #1
 80065ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80065ae:	4b04      	ldr	r3, [pc, #16]	; (80065c0 <vPortSetupTimerInterrupt+0x34>)
 80065b0:	2207      	movs	r2, #7
 80065b2:	601a      	str	r2, [r3, #0]
}
 80065b4:	bf00      	nop
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr
 80065be:	bf00      	nop
 80065c0:	e000e010 	.word	0xe000e010
 80065c4:	e000e018 	.word	0xe000e018
 80065c8:	20000000 	.word	0x20000000
 80065cc:	10624dd3 	.word	0x10624dd3
 80065d0:	e000e014 	.word	0xe000e014

080065d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80065d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80065e4 <vPortEnableVFP+0x10>
 80065d8:	6801      	ldr	r1, [r0, #0]
 80065da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80065de:	6001      	str	r1, [r0, #0]
 80065e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80065e2:	bf00      	nop
 80065e4:	e000ed88 	.word	0xe000ed88

080065e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80065e8:	b480      	push	{r7}
 80065ea:	b085      	sub	sp, #20
 80065ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80065ee:	f3ef 8305 	mrs	r3, IPSR
 80065f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2b0f      	cmp	r3, #15
 80065f8:	d915      	bls.n	8006626 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80065fa:	4a18      	ldr	r2, [pc, #96]	; (800665c <vPortValidateInterruptPriority+0x74>)
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	4413      	add	r3, r2
 8006600:	781b      	ldrb	r3, [r3, #0]
 8006602:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006604:	4b16      	ldr	r3, [pc, #88]	; (8006660 <vPortValidateInterruptPriority+0x78>)
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	7afa      	ldrb	r2, [r7, #11]
 800660a:	429a      	cmp	r2, r3
 800660c:	d20b      	bcs.n	8006626 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800660e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006612:	b672      	cpsid	i
 8006614:	f383 8811 	msr	BASEPRI, r3
 8006618:	f3bf 8f6f 	isb	sy
 800661c:	f3bf 8f4f 	dsb	sy
 8006620:	b662      	cpsie	i
 8006622:	607b      	str	r3, [r7, #4]
 8006624:	e7fe      	b.n	8006624 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006626:	4b0f      	ldr	r3, [pc, #60]	; (8006664 <vPortValidateInterruptPriority+0x7c>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800662e:	4b0e      	ldr	r3, [pc, #56]	; (8006668 <vPortValidateInterruptPriority+0x80>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	429a      	cmp	r2, r3
 8006634:	d90b      	bls.n	800664e <vPortValidateInterruptPriority+0x66>
 8006636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800663a:	b672      	cpsid	i
 800663c:	f383 8811 	msr	BASEPRI, r3
 8006640:	f3bf 8f6f 	isb	sy
 8006644:	f3bf 8f4f 	dsb	sy
 8006648:	b662      	cpsie	i
 800664a:	603b      	str	r3, [r7, #0]
 800664c:	e7fe      	b.n	800664c <vPortValidateInterruptPriority+0x64>
	}
 800664e:	bf00      	nop
 8006650:	3714      	adds	r7, #20
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr
 800665a:	bf00      	nop
 800665c:	e000e3f0 	.word	0xe000e3f0
 8006660:	20000d18 	.word	0x20000d18
 8006664:	e000ed0c 	.word	0xe000ed0c
 8006668:	20000d1c 	.word	0x20000d1c

0800666c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b08a      	sub	sp, #40	; 0x28
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006674:	2300      	movs	r3, #0
 8006676:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006678:	f7fe fd9e 	bl	80051b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800667c:	4b5a      	ldr	r3, [pc, #360]	; (80067e8 <pvPortMalloc+0x17c>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d101      	bne.n	8006688 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006684:	f000 f916 	bl	80068b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006688:	4b58      	ldr	r3, [pc, #352]	; (80067ec <pvPortMalloc+0x180>)
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	4013      	ands	r3, r2
 8006690:	2b00      	cmp	r3, #0
 8006692:	f040 8090 	bne.w	80067b6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d01e      	beq.n	80066da <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800669c:	2208      	movs	r2, #8
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	4413      	add	r3, r2
 80066a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f003 0307 	and.w	r3, r3, #7
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d015      	beq.n	80066da <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f023 0307 	bic.w	r3, r3, #7
 80066b4:	3308      	adds	r3, #8
 80066b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f003 0307 	and.w	r3, r3, #7
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d00b      	beq.n	80066da <pvPortMalloc+0x6e>
 80066c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066c6:	b672      	cpsid	i
 80066c8:	f383 8811 	msr	BASEPRI, r3
 80066cc:	f3bf 8f6f 	isb	sy
 80066d0:	f3bf 8f4f 	dsb	sy
 80066d4:	b662      	cpsie	i
 80066d6:	617b      	str	r3, [r7, #20]
 80066d8:	e7fe      	b.n	80066d8 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d06a      	beq.n	80067b6 <pvPortMalloc+0x14a>
 80066e0:	4b43      	ldr	r3, [pc, #268]	; (80067f0 <pvPortMalloc+0x184>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	687a      	ldr	r2, [r7, #4]
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d865      	bhi.n	80067b6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80066ea:	4b42      	ldr	r3, [pc, #264]	; (80067f4 <pvPortMalloc+0x188>)
 80066ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80066ee:	4b41      	ldr	r3, [pc, #260]	; (80067f4 <pvPortMalloc+0x188>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80066f4:	e004      	b.n	8006700 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80066f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80066fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	429a      	cmp	r2, r3
 8006708:	d903      	bls.n	8006712 <pvPortMalloc+0xa6>
 800670a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d1f1      	bne.n	80066f6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006712:	4b35      	ldr	r3, [pc, #212]	; (80067e8 <pvPortMalloc+0x17c>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006718:	429a      	cmp	r2, r3
 800671a:	d04c      	beq.n	80067b6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800671c:	6a3b      	ldr	r3, [r7, #32]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	2208      	movs	r2, #8
 8006722:	4413      	add	r3, r2
 8006724:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	6a3b      	ldr	r3, [r7, #32]
 800672c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800672e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006730:	685a      	ldr	r2, [r3, #4]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	1ad2      	subs	r2, r2, r3
 8006736:	2308      	movs	r3, #8
 8006738:	005b      	lsls	r3, r3, #1
 800673a:	429a      	cmp	r2, r3
 800673c:	d920      	bls.n	8006780 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800673e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	4413      	add	r3, r2
 8006744:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006746:	69bb      	ldr	r3, [r7, #24]
 8006748:	f003 0307 	and.w	r3, r3, #7
 800674c:	2b00      	cmp	r3, #0
 800674e:	d00b      	beq.n	8006768 <pvPortMalloc+0xfc>
 8006750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006754:	b672      	cpsid	i
 8006756:	f383 8811 	msr	BASEPRI, r3
 800675a:	f3bf 8f6f 	isb	sy
 800675e:	f3bf 8f4f 	dsb	sy
 8006762:	b662      	cpsie	i
 8006764:	613b      	str	r3, [r7, #16]
 8006766:	e7fe      	b.n	8006766 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676a:	685a      	ldr	r2, [r3, #4]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	1ad2      	subs	r2, r2, r3
 8006770:	69bb      	ldr	r3, [r7, #24]
 8006772:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800677a:	69b8      	ldr	r0, [r7, #24]
 800677c:	f000 f8fc 	bl	8006978 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006780:	4b1b      	ldr	r3, [pc, #108]	; (80067f0 <pvPortMalloc+0x184>)
 8006782:	681a      	ldr	r2, [r3, #0]
 8006784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	1ad3      	subs	r3, r2, r3
 800678a:	4a19      	ldr	r2, [pc, #100]	; (80067f0 <pvPortMalloc+0x184>)
 800678c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800678e:	4b18      	ldr	r3, [pc, #96]	; (80067f0 <pvPortMalloc+0x184>)
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	4b19      	ldr	r3, [pc, #100]	; (80067f8 <pvPortMalloc+0x18c>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	429a      	cmp	r2, r3
 8006798:	d203      	bcs.n	80067a2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800679a:	4b15      	ldr	r3, [pc, #84]	; (80067f0 <pvPortMalloc+0x184>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a16      	ldr	r2, [pc, #88]	; (80067f8 <pvPortMalloc+0x18c>)
 80067a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80067a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a4:	685a      	ldr	r2, [r3, #4]
 80067a6:	4b11      	ldr	r3, [pc, #68]	; (80067ec <pvPortMalloc+0x180>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	431a      	orrs	r2, r3
 80067ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80067b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b2:	2200      	movs	r2, #0
 80067b4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80067b6:	f7fe fd0d 	bl	80051d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80067ba:	69fb      	ldr	r3, [r7, #28]
 80067bc:	f003 0307 	and.w	r3, r3, #7
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d00b      	beq.n	80067dc <pvPortMalloc+0x170>
 80067c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c8:	b672      	cpsid	i
 80067ca:	f383 8811 	msr	BASEPRI, r3
 80067ce:	f3bf 8f6f 	isb	sy
 80067d2:	f3bf 8f4f 	dsb	sy
 80067d6:	b662      	cpsie	i
 80067d8:	60fb      	str	r3, [r7, #12]
 80067da:	e7fe      	b.n	80067da <pvPortMalloc+0x16e>
	return pvReturn;
 80067dc:	69fb      	ldr	r3, [r7, #28]
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3728      	adds	r7, #40	; 0x28
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
 80067e6:	bf00      	nop
 80067e8:	20004928 	.word	0x20004928
 80067ec:	20004934 	.word	0x20004934
 80067f0:	2000492c 	.word	0x2000492c
 80067f4:	20004920 	.word	0x20004920
 80067f8:	20004930 	.word	0x20004930

080067fc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b086      	sub	sp, #24
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d04a      	beq.n	80068a4 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800680e:	2308      	movs	r3, #8
 8006810:	425b      	negs	r3, r3
 8006812:	697a      	ldr	r2, [r7, #20]
 8006814:	4413      	add	r3, r2
 8006816:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	685a      	ldr	r2, [r3, #4]
 8006820:	4b22      	ldr	r3, [pc, #136]	; (80068ac <vPortFree+0xb0>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4013      	ands	r3, r2
 8006826:	2b00      	cmp	r3, #0
 8006828:	d10b      	bne.n	8006842 <vPortFree+0x46>
 800682a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800682e:	b672      	cpsid	i
 8006830:	f383 8811 	msr	BASEPRI, r3
 8006834:	f3bf 8f6f 	isb	sy
 8006838:	f3bf 8f4f 	dsb	sy
 800683c:	b662      	cpsie	i
 800683e:	60fb      	str	r3, [r7, #12]
 8006840:	e7fe      	b.n	8006840 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00b      	beq.n	8006862 <vPortFree+0x66>
 800684a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800684e:	b672      	cpsid	i
 8006850:	f383 8811 	msr	BASEPRI, r3
 8006854:	f3bf 8f6f 	isb	sy
 8006858:	f3bf 8f4f 	dsb	sy
 800685c:	b662      	cpsie	i
 800685e:	60bb      	str	r3, [r7, #8]
 8006860:	e7fe      	b.n	8006860 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	685a      	ldr	r2, [r3, #4]
 8006866:	4b11      	ldr	r3, [pc, #68]	; (80068ac <vPortFree+0xb0>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4013      	ands	r3, r2
 800686c:	2b00      	cmp	r3, #0
 800686e:	d019      	beq.n	80068a4 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d115      	bne.n	80068a4 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	685a      	ldr	r2, [r3, #4]
 800687c:	4b0b      	ldr	r3, [pc, #44]	; (80068ac <vPortFree+0xb0>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	43db      	mvns	r3, r3
 8006882:	401a      	ands	r2, r3
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006888:	f7fe fc96 	bl	80051b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	685a      	ldr	r2, [r3, #4]
 8006890:	4b07      	ldr	r3, [pc, #28]	; (80068b0 <vPortFree+0xb4>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4413      	add	r3, r2
 8006896:	4a06      	ldr	r2, [pc, #24]	; (80068b0 <vPortFree+0xb4>)
 8006898:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800689a:	6938      	ldr	r0, [r7, #16]
 800689c:	f000 f86c 	bl	8006978 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80068a0:	f7fe fc98 	bl	80051d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80068a4:	bf00      	nop
 80068a6:	3718      	adds	r7, #24
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}
 80068ac:	20004934 	.word	0x20004934
 80068b0:	2000492c 	.word	0x2000492c

080068b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80068b4:	b480      	push	{r7}
 80068b6:	b085      	sub	sp, #20
 80068b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80068ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80068be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80068c0:	4b27      	ldr	r3, [pc, #156]	; (8006960 <prvHeapInit+0xac>)
 80068c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	f003 0307 	and.w	r3, r3, #7
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d00c      	beq.n	80068e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	3307      	adds	r3, #7
 80068d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f023 0307 	bic.w	r3, r3, #7
 80068da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80068dc:	68ba      	ldr	r2, [r7, #8]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	1ad3      	subs	r3, r2, r3
 80068e2:	4a1f      	ldr	r2, [pc, #124]	; (8006960 <prvHeapInit+0xac>)
 80068e4:	4413      	add	r3, r2
 80068e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80068ec:	4a1d      	ldr	r2, [pc, #116]	; (8006964 <prvHeapInit+0xb0>)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80068f2:	4b1c      	ldr	r3, [pc, #112]	; (8006964 <prvHeapInit+0xb0>)
 80068f4:	2200      	movs	r2, #0
 80068f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	68ba      	ldr	r2, [r7, #8]
 80068fc:	4413      	add	r3, r2
 80068fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006900:	2208      	movs	r2, #8
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	1a9b      	subs	r3, r3, r2
 8006906:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f023 0307 	bic.w	r3, r3, #7
 800690e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	4a15      	ldr	r2, [pc, #84]	; (8006968 <prvHeapInit+0xb4>)
 8006914:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006916:	4b14      	ldr	r3, [pc, #80]	; (8006968 <prvHeapInit+0xb4>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	2200      	movs	r2, #0
 800691c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800691e:	4b12      	ldr	r3, [pc, #72]	; (8006968 <prvHeapInit+0xb4>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	2200      	movs	r2, #0
 8006924:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	68fa      	ldr	r2, [r7, #12]
 800692e:	1ad2      	subs	r2, r2, r3
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006934:	4b0c      	ldr	r3, [pc, #48]	; (8006968 <prvHeapInit+0xb4>)
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	4a0a      	ldr	r2, [pc, #40]	; (800696c <prvHeapInit+0xb8>)
 8006942:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	4a09      	ldr	r2, [pc, #36]	; (8006970 <prvHeapInit+0xbc>)
 800694a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800694c:	4b09      	ldr	r3, [pc, #36]	; (8006974 <prvHeapInit+0xc0>)
 800694e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006952:	601a      	str	r2, [r3, #0]
}
 8006954:	bf00      	nop
 8006956:	3714      	adds	r7, #20
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr
 8006960:	20000d20 	.word	0x20000d20
 8006964:	20004920 	.word	0x20004920
 8006968:	20004928 	.word	0x20004928
 800696c:	20004930 	.word	0x20004930
 8006970:	2000492c 	.word	0x2000492c
 8006974:	20004934 	.word	0x20004934

08006978 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006978:	b480      	push	{r7}
 800697a:	b085      	sub	sp, #20
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006980:	4b28      	ldr	r3, [pc, #160]	; (8006a24 <prvInsertBlockIntoFreeList+0xac>)
 8006982:	60fb      	str	r3, [r7, #12]
 8006984:	e002      	b.n	800698c <prvInsertBlockIntoFreeList+0x14>
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	60fb      	str	r3, [r7, #12]
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	687a      	ldr	r2, [r7, #4]
 8006992:	429a      	cmp	r2, r3
 8006994:	d8f7      	bhi.n	8006986 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	68ba      	ldr	r2, [r7, #8]
 80069a0:	4413      	add	r3, r2
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d108      	bne.n	80069ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	685a      	ldr	r2, [r3, #4]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	441a      	add	r2, r3
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	68ba      	ldr	r2, [r7, #8]
 80069c4:	441a      	add	r2, r3
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d118      	bne.n	8006a00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681a      	ldr	r2, [r3, #0]
 80069d2:	4b15      	ldr	r3, [pc, #84]	; (8006a28 <prvInsertBlockIntoFreeList+0xb0>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	429a      	cmp	r2, r3
 80069d8:	d00d      	beq.n	80069f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	685a      	ldr	r2, [r3, #4]
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	441a      	add	r2, r3
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	681a      	ldr	r2, [r3, #0]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	601a      	str	r2, [r3, #0]
 80069f4:	e008      	b.n	8006a08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80069f6:	4b0c      	ldr	r3, [pc, #48]	; (8006a28 <prvInsertBlockIntoFreeList+0xb0>)
 80069f8:	681a      	ldr	r2, [r3, #0]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	601a      	str	r2, [r3, #0]
 80069fe:	e003      	b.n	8006a08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006a08:	68fa      	ldr	r2, [r7, #12]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d002      	beq.n	8006a16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a16:	bf00      	nop
 8006a18:	3714      	adds	r7, #20
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr
 8006a22:	bf00      	nop
 8006a24:	20004920 	.word	0x20004920
 8006a28:	20004928 	.word	0x20004928

08006a2c <__libc_init_array>:
 8006a2c:	b570      	push	{r4, r5, r6, lr}
 8006a2e:	4e0d      	ldr	r6, [pc, #52]	; (8006a64 <__libc_init_array+0x38>)
 8006a30:	4c0d      	ldr	r4, [pc, #52]	; (8006a68 <__libc_init_array+0x3c>)
 8006a32:	1ba4      	subs	r4, r4, r6
 8006a34:	10a4      	asrs	r4, r4, #2
 8006a36:	2500      	movs	r5, #0
 8006a38:	42a5      	cmp	r5, r4
 8006a3a:	d109      	bne.n	8006a50 <__libc_init_array+0x24>
 8006a3c:	4e0b      	ldr	r6, [pc, #44]	; (8006a6c <__libc_init_array+0x40>)
 8006a3e:	4c0c      	ldr	r4, [pc, #48]	; (8006a70 <__libc_init_array+0x44>)
 8006a40:	f000 f82c 	bl	8006a9c <_init>
 8006a44:	1ba4      	subs	r4, r4, r6
 8006a46:	10a4      	asrs	r4, r4, #2
 8006a48:	2500      	movs	r5, #0
 8006a4a:	42a5      	cmp	r5, r4
 8006a4c:	d105      	bne.n	8006a5a <__libc_init_array+0x2e>
 8006a4e:	bd70      	pop	{r4, r5, r6, pc}
 8006a50:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006a54:	4798      	blx	r3
 8006a56:	3501      	adds	r5, #1
 8006a58:	e7ee      	b.n	8006a38 <__libc_init_array+0xc>
 8006a5a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006a5e:	4798      	blx	r3
 8006a60:	3501      	adds	r5, #1
 8006a62:	e7f2      	b.n	8006a4a <__libc_init_array+0x1e>
 8006a64:	08006b44 	.word	0x08006b44
 8006a68:	08006b44 	.word	0x08006b44
 8006a6c:	08006b44 	.word	0x08006b44
 8006a70:	08006b48 	.word	0x08006b48

08006a74 <memcpy>:
 8006a74:	b510      	push	{r4, lr}
 8006a76:	1e43      	subs	r3, r0, #1
 8006a78:	440a      	add	r2, r1
 8006a7a:	4291      	cmp	r1, r2
 8006a7c:	d100      	bne.n	8006a80 <memcpy+0xc>
 8006a7e:	bd10      	pop	{r4, pc}
 8006a80:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a84:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a88:	e7f7      	b.n	8006a7a <memcpy+0x6>

08006a8a <memset>:
 8006a8a:	4402      	add	r2, r0
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d100      	bne.n	8006a94 <memset+0xa>
 8006a92:	4770      	bx	lr
 8006a94:	f803 1b01 	strb.w	r1, [r3], #1
 8006a98:	e7f9      	b.n	8006a8e <memset+0x4>
	...

08006a9c <_init>:
 8006a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a9e:	bf00      	nop
 8006aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aa2:	bc08      	pop	{r3}
 8006aa4:	469e      	mov	lr, r3
 8006aa6:	4770      	bx	lr

08006aa8 <_fini>:
 8006aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aaa:	bf00      	nop
 8006aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aae:	bc08      	pop	{r3}
 8006ab0:	469e      	mov	lr, r3
 8006ab2:	4770      	bx	lr
