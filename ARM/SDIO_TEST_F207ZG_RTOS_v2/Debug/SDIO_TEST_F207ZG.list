
SDIO_TEST_F207ZG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af88  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0002199c  0800b118  0800b118  0001b118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802cab4  0802cab4  00040074  2**0
                  CONTENTS
  4 .ARM          00000008  0802cab4  0802cab4  0003cab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802cabc  0802cabc  00040074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802cabc  0802cabc  0003cabc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802cac0  0802cac0  0003cac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0802cac4  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004cdc  20000074  0802cb38  00040074  2**2
                  ALLOC
 10 ._user_heap_stack 00002000  20004d50  0802cb38  00044d50  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00040074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001de52  00000000  00000000  0004009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000426b  00000000  00000000  0005deef  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001960  00000000  00000000  00062160  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001758  00000000  00000000  00063ac0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000248b2  00000000  00000000  00065218  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000170f2  00000000  00000000  00089aca  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d1c43  00000000  00000000  000a0bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001727ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b08  00000000  00000000  0017287c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b100 	.word	0x0800b100

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800b100 	.word	0x0800b100

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	468c      	mov	ip, r1
 8000206:	4604      	mov	r4, r0
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0c03 	orr.w	ip, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	fbbc f7fe 	udiv	r7, ip, lr
 8000236:	fa1f f885 	uxth.w	r8, r5
 800023a:	fb0e c317 	mls	r3, lr, r7, ip
 800023e:	fb07 f908 	mul.w	r9, r7, r8
 8000242:	0c21      	lsrs	r1, r4, #16
 8000244:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000248:	4599      	cmp	r9, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 31ff 	add.w	r1, r7, #4294967295
 8000252:	f080 811c 	bcs.w	800048e <__udivmoddi4+0x28e>
 8000256:	4599      	cmp	r9, r3
 8000258:	f240 8119 	bls.w	800048e <__udivmoddi4+0x28e>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	eba3 0309 	sub.w	r3, r3, r9
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	fb00 f108 	mul.w	r1, r0, r8
 8000270:	b2a4      	uxth	r4, r4
 8000272:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000276:	42a1      	cmp	r1, r4
 8000278:	d909      	bls.n	800028e <__udivmoddi4+0x8e>
 800027a:	192c      	adds	r4, r5, r4
 800027c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000280:	f080 8107 	bcs.w	8000492 <__udivmoddi4+0x292>
 8000284:	42a1      	cmp	r1, r4
 8000286:	f240 8104 	bls.w	8000492 <__udivmoddi4+0x292>
 800028a:	3802      	subs	r0, #2
 800028c:	442c      	add	r4, r5
 800028e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000292:	2700      	movs	r7, #0
 8000294:	1a64      	subs	r4, r4, r1
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	2300      	movs	r3, #0
 800029a:	40d4      	lsrs	r4, r2
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80ec 	beq.w	8000488 <__udivmoddi4+0x288>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d148      	bne.n	8000358 <__udivmoddi4+0x158>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fb 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	469c      	mov	ip, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4c00 	strd	r4, ip, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	2701      	movs	r7, #1
 80002f4:	1b49      	subs	r1, r1, r5
 80002f6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80002fa:	fa1f f985 	uxth.w	r9, r5
 80002fe:	fbb1 fef8 	udiv	lr, r1, r8
 8000302:	fb08 111e 	mls	r1, r8, lr, r1
 8000306:	fb09 f00e 	mul.w	r0, r9, lr
 800030a:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800030e:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000312:	4298      	cmp	r0, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x126>
 8000316:	18eb      	adds	r3, r5, r3
 8000318:	f10e 31ff 	add.w	r1, lr, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x124>
 800031e:	4298      	cmp	r0, r3
 8000320:	f200 80cd 	bhi.w	80004be <__udivmoddi4+0x2be>
 8000324:	468e      	mov	lr, r1
 8000326:	1a1b      	subs	r3, r3, r0
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	fb09 f900 	mul.w	r9, r9, r0
 8000334:	b2a4      	uxth	r4, r4
 8000336:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800033a:	45a1      	cmp	r9, r4
 800033c:	d907      	bls.n	800034e <__udivmoddi4+0x14e>
 800033e:	192c      	adds	r4, r5, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x14c>
 8000346:	45a1      	cmp	r9, r4
 8000348:	f200 80b6 	bhi.w	80004b8 <__udivmoddi4+0x2b8>
 800034c:	4618      	mov	r0, r3
 800034e:	eba4 0409 	sub.w	r4, r4, r9
 8000352:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000356:	e79e      	b.n	8000296 <__udivmoddi4+0x96>
 8000358:	f1c7 0520 	rsb	r5, r7, #32
 800035c:	40bb      	lsls	r3, r7
 800035e:	fa22 fc05 	lsr.w	ip, r2, r5
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa21 f405 	lsr.w	r4, r1, r5
 800036a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800036e:	fbb4 f9fe 	udiv	r9, r4, lr
 8000372:	fa1f f88c 	uxth.w	r8, ip
 8000376:	fb0e 4419 	mls	r4, lr, r9, r4
 800037a:	fa20 f305 	lsr.w	r3, r0, r5
 800037e:	40b9      	lsls	r1, r7
 8000380:	fb09 fa08 	mul.w	sl, r9, r8
 8000384:	4319      	orrs	r1, r3
 8000386:	0c0b      	lsrs	r3, r1, #16
 8000388:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800038c:	45a2      	cmp	sl, r4
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f307 	lsl.w	r3, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2b4>
 80003a4:	45a2      	cmp	sl, r4
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2b4>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4464      	add	r4, ip
 80003b0:	eba4 040a 	sub.w	r4, r4, sl
 80003b4:	fbb4 f0fe 	udiv	r0, r4, lr
 80003b8:	fb0e 4410 	mls	r4, lr, r0, r4
 80003bc:	fb00 fa08 	mul.w	sl, r0, r8
 80003c0:	b289      	uxth	r1, r1
 80003c2:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 80003c6:	45a2      	cmp	sl, r4
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x1dc>
 80003ca:	eb1c 0404 	adds.w	r4, ip, r4
 80003ce:	f100 31ff 	add.w	r1, r0, #4294967295
 80003d2:	d26b      	bcs.n	80004ac <__udivmoddi4+0x2ac>
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d969      	bls.n	80004ac <__udivmoddi4+0x2ac>
 80003d8:	3802      	subs	r0, #2
 80003da:	4464      	add	r4, ip
 80003dc:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e0:	fba0 8902 	umull	r8, r9, r0, r2
 80003e4:	eba4 040a 	sub.w	r4, r4, sl
 80003e8:	454c      	cmp	r4, r9
 80003ea:	4641      	mov	r1, r8
 80003ec:	46ce      	mov	lr, r9
 80003ee:	d354      	bcc.n	800049a <__udivmoddi4+0x29a>
 80003f0:	d051      	beq.n	8000496 <__udivmoddi4+0x296>
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d069      	beq.n	80004ca <__udivmoddi4+0x2ca>
 80003f6:	1a5a      	subs	r2, r3, r1
 80003f8:	eb64 040e 	sbc.w	r4, r4, lr
 80003fc:	fa04 f505 	lsl.w	r5, r4, r5
 8000400:	fa22 f307 	lsr.w	r3, r2, r7
 8000404:	40fc      	lsrs	r4, r7
 8000406:	431d      	orrs	r5, r3
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	4095      	lsls	r5, r2
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	fa21 f003 	lsr.w	r0, r1, r3
 800041a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800041e:	fbb0 f7f8 	udiv	r7, r0, r8
 8000422:	fa1f f985 	uxth.w	r9, r5
 8000426:	fb08 0017 	mls	r0, r8, r7, r0
 800042a:	fa24 f303 	lsr.w	r3, r4, r3
 800042e:	4091      	lsls	r1, r2
 8000430:	fb07 fc09 	mul.w	ip, r7, r9
 8000434:	430b      	orrs	r3, r1
 8000436:	0c19      	lsrs	r1, r3, #16
 8000438:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800043c:	458c      	cmp	ip, r1
 800043e:	fa04 f402 	lsl.w	r4, r4, r2
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x254>
 8000444:	1869      	adds	r1, r5, r1
 8000446:	f107 30ff 	add.w	r0, r7, #4294967295
 800044a:	d231      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 800044c:	458c      	cmp	ip, r1
 800044e:	d92f      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000450:	3f02      	subs	r7, #2
 8000452:	4429      	add	r1, r5
 8000454:	eba1 010c 	sub.w	r1, r1, ip
 8000458:	fbb1 f0f8 	udiv	r0, r1, r8
 800045c:	fb08 1c10 	mls	ip, r8, r0, r1
 8000460:	fb00 fe09 	mul.w	lr, r0, r9
 8000464:	b299      	uxth	r1, r3
 8000466:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800046a:	458e      	cmp	lr, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 33ff 	add.w	r3, r0, #4294967295
 8000474:	d218      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000476:	458e      	cmp	lr, r1
 8000478:	d916      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	eba1 010e 	sub.w	r1, r1, lr
 8000482:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000486:	e73a      	b.n	80002fe <__udivmoddi4+0xfe>
 8000488:	4637      	mov	r7, r6
 800048a:	4630      	mov	r0, r6
 800048c:	e708      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048e:	460f      	mov	r7, r1
 8000490:	e6e6      	b.n	8000260 <__udivmoddi4+0x60>
 8000492:	4618      	mov	r0, r3
 8000494:	e6fb      	b.n	800028e <__udivmoddi4+0x8e>
 8000496:	4543      	cmp	r3, r8
 8000498:	d2ab      	bcs.n	80003f2 <__udivmoddi4+0x1f2>
 800049a:	ebb8 0102 	subs.w	r1, r8, r2
 800049e:	eb69 020c 	sbc.w	r2, r9, ip
 80004a2:	3801      	subs	r0, #1
 80004a4:	4696      	mov	lr, r2
 80004a6:	e7a4      	b.n	80003f2 <__udivmoddi4+0x1f2>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e7e8      	b.n	800047e <__udivmoddi4+0x27e>
 80004ac:	4608      	mov	r0, r1
 80004ae:	e795      	b.n	80003dc <__udivmoddi4+0x1dc>
 80004b0:	4607      	mov	r7, r0
 80004b2:	e7cf      	b.n	8000454 <__udivmoddi4+0x254>
 80004b4:	4681      	mov	r9, r0
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b8:	3802      	subs	r0, #2
 80004ba:	442c      	add	r4, r5
 80004bc:	e747      	b.n	800034e <__udivmoddi4+0x14e>
 80004be:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c2:	442b      	add	r3, r5
 80004c4:	e72f      	b.n	8000326 <__udivmoddi4+0x126>
 80004c6:	4638      	mov	r0, r7
 80004c8:	e707      	b.n	80002da <__udivmoddi4+0xda>
 80004ca:	4637      	mov	r7, r6
 80004cc:	e6e8      	b.n	80002a0 <__udivmoddi4+0xa0>
 80004ce:	bf00      	nop

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80004d8:	bf00      	nop
 80004da:	46bd      	mov	sp, r7
 80004dc:	bc80      	pop	{r7}
 80004de:	4770      	bx	lr

080004e0 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b083      	sub	sp, #12
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
 80004e8:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80004ea:	bf00      	nop
 80004ec:	370c      	adds	r7, #12
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bc80      	pop	{r7}
 80004f2:	4770      	bx	lr

080004f4 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80004f8:	bf00      	nop
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bc80      	pop	{r7}
 80004fe:	4770      	bx	lr

08000500 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	4603      	mov	r3, r0
 8000508:	80fb      	strh	r3, [r7, #6]
	 break;
	 case GPIO_PIN_14:
	 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
	 break;
	 }*/
	if (GPIO_Pin == GPIO_PIN_13)
 800050a:	88fb      	ldrh	r3, [r7, #6]
 800050c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000510:	d108      	bne.n	8000524 <HAL_GPIO_EXTI_Callback+0x24>
	{
		b1PushCounter = B1SWITCH_SLICE_PUSH_TIME;
 8000512:	4b06      	ldr	r3, [pc, #24]	; (800052c <HAL_GPIO_EXTI_Callback+0x2c>)
 8000514:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000518:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 800051a:	2200      	movs	r2, #0
 800051c:	2140      	movs	r1, #64	; 0x40
 800051e:	4804      	ldr	r0, [pc, #16]	; (8000530 <HAL_GPIO_EXTI_Callback+0x30>)
 8000520:	f001 fcbd 	bl	8001e9e <HAL_GPIO_WritePin>
	}
}
 8000524:	bf00      	nop
 8000526:	3708      	adds	r7, #8
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}
 800052c:	20004850 	.word	0x20004850
 8000530:	40021800 	.word	0x40021800

08000534 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000534:	b5b0      	push	{r4, r5, r7, lr}
 8000536:	b092      	sub	sp, #72	; 0x48
 8000538:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800053a:	f000 feb3 	bl	80012a4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800053e:	f000 f87b 	bl	8000638 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000542:	f000 f933 	bl	80007ac <MX_GPIO_Init>
	MX_DMA_Init();
 8000546:	f000 f909 	bl	800075c <MX_DMA_Init>
	MX_USART3_UART_Init();
 800054a:	f000 f8dd 	bl	8000708 <MX_USART3_UART_Init>
	MX_SDIO_SD_Init();
 800054e:	f000 f8bb 	bl	80006c8 <MX_SDIO_SD_Init>
	MX_FATFS_Init();
 8000552:	f004 feaf 	bl	80052b4 <MX_FATFS_Init>
	/* USER CODE BEGIN 2 */
	b1PushCounter = 0;
 8000556:	4b2d      	ldr	r3, [pc, #180]	; (800060c <main+0xd8>)
 8000558:	2200      	movs	r2, #0
 800055a:	801a      	strh	r2, [r3, #0]
	//  buffSel = 0;
	dataIdx = 0;
 800055c:	4b2c      	ldr	r3, [pc, #176]	; (8000610 <main+0xdc>)
 800055e:	2200      	movs	r2, #0
 8000560:	801a      	strh	r2, [r3, #0]
	/* add mutexes, ... */
	/* USER CODE END RTOS_MUTEX */

	/* Create the semaphores(s) */
	/* definition and creation of sdReadBinarySem */
	osSemaphoreDef(sdReadBinarySem);
 8000562:	2300      	movs	r3, #0
 8000564:	647b      	str	r3, [r7, #68]	; 0x44
	sdReadBinarySemHandle = osSemaphoreCreate(osSemaphore(sdReadBinarySem), 1);
 8000566:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800056a:	2101      	movs	r1, #1
 800056c:	4618      	mov	r0, r3
 800056e:	f008 fa66 	bl	8008a3e <osSemaphoreCreate>
 8000572:	4602      	mov	r2, r0
 8000574:	4b27      	ldr	r3, [pc, #156]	; (8000614 <main+0xe0>)
 8000576:	601a      	str	r2, [r3, #0]

	/* definition and creation of sdWriteBinarySem */
	osSemaphoreDef(sdWriteBinarySem);
 8000578:	2300      	movs	r3, #0
 800057a:	643b      	str	r3, [r7, #64]	; 0x40
	sdWriteBinarySemHandle = osSemaphoreCreate(osSemaphore(sdWriteBinarySem),
 800057c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000580:	2101      	movs	r1, #1
 8000582:	4618      	mov	r0, r3
 8000584:	f008 fa5b 	bl	8008a3e <osSemaphoreCreate>
 8000588:	4602      	mov	r2, r0
 800058a:	4b23      	ldr	r3, [pc, #140]	; (8000618 <main+0xe4>)
 800058c:	601a      	str	r2, [r3, #0]
			1);

	/* definition and creation of sdFormatBinarySem */
	osSemaphoreDef(sdFormatBinarySem);
 800058e:	2300      	movs	r3, #0
 8000590:	63fb      	str	r3, [r7, #60]	; 0x3c
	sdFormatBinarySemHandle = osSemaphoreCreate(osSemaphore(sdFormatBinarySem),
 8000592:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000596:	2101      	movs	r1, #1
 8000598:	4618      	mov	r0, r3
 800059a:	f008 fa50 	bl	8008a3e <osSemaphoreCreate>
 800059e:	4602      	mov	r2, r0
 80005a0:	4b1e      	ldr	r3, [pc, #120]	; (800061c <main+0xe8>)
 80005a2:	601a      	str	r2, [r3, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 80005a4:	4b1e      	ldr	r3, [pc, #120]	; (8000620 <main+0xec>)
 80005a6:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80005aa:	461d      	mov	r5, r3
 80005ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005b0:	682b      	ldr	r3, [r5, #0]
 80005b2:	6023      	str	r3, [r4, #0]
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005b8:	2100      	movs	r1, #0
 80005ba:	4618      	mov	r0, r3
 80005bc:	f008 fa04 	bl	80089c8 <osThreadCreate>
 80005c0:	4602      	mov	r2, r0
 80005c2:	4b18      	ldr	r3, [pc, #96]	; (8000624 <main+0xf0>)
 80005c4:	601a      	str	r2, [r3, #0]

	/* definition and creation of sdReadTask */
	osThreadDef(sdReadTask, StartSdReadTask, osPriorityIdle, 0, 256);
 80005c6:	4b18      	ldr	r3, [pc, #96]	; (8000628 <main+0xf4>)
 80005c8:	f107 0414 	add.w	r4, r7, #20
 80005cc:	461d      	mov	r5, r3
 80005ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d2:	682b      	ldr	r3, [r5, #0]
 80005d4:	6023      	str	r3, [r4, #0]
	sdReadTaskHandle = osThreadCreate(osThread(sdReadTask), NULL);
 80005d6:	f107 0314 	add.w	r3, r7, #20
 80005da:	2100      	movs	r1, #0
 80005dc:	4618      	mov	r0, r3
 80005de:	f008 f9f3 	bl	80089c8 <osThreadCreate>
 80005e2:	4602      	mov	r2, r0
 80005e4:	4b11      	ldr	r3, [pc, #68]	; (800062c <main+0xf8>)
 80005e6:	601a      	str	r2, [r3, #0]

	/* definition and creation of sdWriteTask */
	osThreadDef(sdWriteTask, StartSdWriteTask, osPriorityIdle, 0, 256);
 80005e8:	4b11      	ldr	r3, [pc, #68]	; (8000630 <main+0xfc>)
 80005ea:	463c      	mov	r4, r7
 80005ec:	461d      	mov	r5, r3
 80005ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f2:	682b      	ldr	r3, [r5, #0]
 80005f4:	6023      	str	r3, [r4, #0]
	sdWriteTaskHandle = osThreadCreate(osThread(sdWriteTask), NULL);
 80005f6:	463b      	mov	r3, r7
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f008 f9e4 	bl	80089c8 <osThreadCreate>
 8000600:	4602      	mov	r2, r0
 8000602:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <main+0x100>)
 8000604:	601a      	str	r2, [r3, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8000606:	f008 f9d8 	bl	80089ba <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 800060a:	e7fe      	b.n	800060a <main+0xd6>
 800060c:	20004850 	.word	0x20004850
 8000610:	20004858 	.word	0x20004858
 8000614:	2000484c 	.word	0x2000484c
 8000618:	20004848 	.word	0x20004848
 800061c:	20004854 	.word	0x20004854
 8000620:	0800b124 	.word	0x0800b124
 8000624:	20003e78 	.word	0x20003e78
 8000628:	0800b144 	.word	0x0800b144
 800062c:	20003ecc 	.word	0x20003ecc
 8000630:	0800b164 	.word	0x0800b164
 8000634:	20003ec8 	.word	0x20003ec8

08000638 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b092      	sub	sp, #72	; 0x48
 800063c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 800063e:	f107 0318 	add.w	r3, r7, #24
 8000642:	2230      	movs	r2, #48	; 0x30
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f00a fc61 	bl	800af0e <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 800064c:	1d3b      	adds	r3, r7, #4
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
 8000652:	605a      	str	r2, [r3, #4]
 8000654:	609a      	str	r2, [r3, #8]
 8000656:	60da      	str	r2, [r3, #12]
 8000658:	611a      	str	r2, [r3, #16]
	{ 0 };

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800065a:	2302      	movs	r3, #2
 800065c:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800065e:	2301      	movs	r3, #1
 8000660:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000662:	2310      	movs	r3, #16
 8000664:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000666:	2302      	movs	r3, #2
 8000668:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800066a:	2300      	movs	r3, #0
 800066c:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLM = 13;
 800066e:	230d      	movs	r3, #13
 8000670:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLN = 195;
 8000672:	23c3      	movs	r3, #195	; 0xc3
 8000674:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000676:	2302      	movs	r3, #2
 8000678:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLQ = 5;
 800067a:	2305      	movs	r3, #5
 800067c:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067e:	f107 0318 	add.w	r3, r7, #24
 8000682:	4618      	mov	r0, r3
 8000684:	f001 fc3c 	bl	8001f00 <HAL_RCC_OscConfig>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <SystemClock_Config+0x5a>
	{
		Error_Handler();
 800068e:	f000 fb49 	bl	8000d24 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000692:	230f      	movs	r3, #15
 8000694:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000696:	2302      	movs	r3, #2
 8000698:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069a:	2300      	movs	r3, #0
 800069c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800069e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006a2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a8:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	2103      	movs	r1, #3
 80006ae:	4618      	mov	r0, r3
 80006b0:	f001 fe76 	bl	80023a0 <HAL_RCC_ClockConfig>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0x86>
	{
		Error_Handler();
 80006ba:	f000 fb33 	bl	8000d24 <Error_Handler>
	}
}
 80006be:	bf00      	nop
 80006c0:	3748      	adds	r7, #72	; 0x48
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
	...

080006c8 <MX_SDIO_SD_Init>:
 * @brief SDIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDIO_SD_Init(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
	/* USER CODE END SDIO_Init 0 */

	/* USER CODE BEGIN SDIO_Init 1 */

	/* USER CODE END SDIO_Init 1 */
	hsd.Instance = SDIO;
 80006cc:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <MX_SDIO_SD_Init+0x38>)
 80006ce:	4a0d      	ldr	r2, [pc, #52]	; (8000704 <MX_SDIO_SD_Init+0x3c>)
 80006d0:	601a      	str	r2, [r3, #0]
	hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80006d2:	4b0b      	ldr	r3, [pc, #44]	; (8000700 <MX_SDIO_SD_Init+0x38>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	605a      	str	r2, [r3, #4]
	hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80006d8:	4b09      	ldr	r3, [pc, #36]	; (8000700 <MX_SDIO_SD_Init+0x38>)
 80006da:	2200      	movs	r2, #0
 80006dc:	609a      	str	r2, [r3, #8]
	hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80006de:	4b08      	ldr	r3, [pc, #32]	; (8000700 <MX_SDIO_SD_Init+0x38>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	60da      	str	r2, [r3, #12]
	hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80006e4:	4b06      	ldr	r3, [pc, #24]	; (8000700 <MX_SDIO_SD_Init+0x38>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	611a      	str	r2, [r3, #16]
	hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80006ea:	4b05      	ldr	r3, [pc, #20]	; (8000700 <MX_SDIO_SD_Init+0x38>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	615a      	str	r2, [r3, #20]
	hsd.Init.ClockDiv = 3;
 80006f0:	4b03      	ldr	r3, [pc, #12]	; (8000700 <MX_SDIO_SD_Init+0x38>)
 80006f2:	2203      	movs	r2, #3
 80006f4:	619a      	str	r2, [r3, #24]
	/* USER CODE BEGIN SDIO_Init 2 */

	/* USER CODE END SDIO_Init 2 */

}
 80006f6:	bf00      	nop
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bc80      	pop	{r7}
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	20004570 	.word	0x20004570
 8000704:	40012c00 	.word	0x40012c00

08000708 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 800070c:	4b11      	ldr	r3, [pc, #68]	; (8000754 <MX_USART3_UART_Init+0x4c>)
 800070e:	4a12      	ldr	r2, [pc, #72]	; (8000758 <MX_USART3_UART_Init+0x50>)
 8000710:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8000712:	4b10      	ldr	r3, [pc, #64]	; (8000754 <MX_USART3_UART_Init+0x4c>)
 8000714:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000718:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800071a:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <MX_USART3_UART_Init+0x4c>)
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000720:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <MX_USART3_UART_Init+0x4c>)
 8000722:	2200      	movs	r2, #0
 8000724:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000726:	4b0b      	ldr	r3, [pc, #44]	; (8000754 <MX_USART3_UART_Init+0x4c>)
 8000728:	2200      	movs	r2, #0
 800072a:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 800072c:	4b09      	ldr	r3, [pc, #36]	; (8000754 <MX_USART3_UART_Init+0x4c>)
 800072e:	220c      	movs	r2, #12
 8000730:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000732:	4b08      	ldr	r3, [pc, #32]	; (8000754 <MX_USART3_UART_Init+0x4c>)
 8000734:	2200      	movs	r2, #0
 8000736:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000738:	4b06      	ldr	r3, [pc, #24]	; (8000754 <MX_USART3_UART_Init+0x4c>)
 800073a:	2200      	movs	r2, #0
 800073c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 800073e:	4805      	ldr	r0, [pc, #20]	; (8000754 <MX_USART3_UART_Init+0x4c>)
 8000740:	f003 ff24 	bl	800458c <HAL_UART_Init>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_USART3_UART_Init+0x46>
	{
		Error_Handler();
 800074a:	f000 faeb 	bl	8000d24 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	20003e7c 	.word	0x20003e7c
 8000758:	40004800 	.word	0x40004800

0800075c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	607b      	str	r3, [r7, #4]
 8000766:	4b10      	ldr	r3, [pc, #64]	; (80007a8 <MX_DMA_Init+0x4c>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a0f      	ldr	r2, [pc, #60]	; (80007a8 <MX_DMA_Init+0x4c>)
 800076c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b0d      	ldr	r3, [pc, #52]	; (80007a8 <MX_DMA_Init+0x4c>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 6, 0);
 800077e:	2200      	movs	r2, #0
 8000780:	2106      	movs	r1, #6
 8000782:	203b      	movs	r0, #59	; 0x3b
 8000784:	f000 fea3 	bl	80014ce <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000788:	203b      	movs	r0, #59	; 0x3b
 800078a:	f000 febc 	bl	8001506 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 6, 0);
 800078e:	2200      	movs	r2, #0
 8000790:	2106      	movs	r1, #6
 8000792:	2045      	movs	r0, #69	; 0x45
 8000794:	f000 fe9b 	bl	80014ce <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000798:	2045      	movs	r0, #69	; 0x45
 800079a:	f000 feb4 	bl	8001506 <HAL_NVIC_EnableIRQ>

}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40023800 	.word	0x40023800

080007ac <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08c      	sub	sp, #48	; 0x30
 80007b0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct =
 80007b2:	f107 031c 	add.w	r3, r7, #28
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
 80007c0:	611a      	str	r2, [r3, #16]
	{ 0 };

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	61bb      	str	r3, [r7, #24]
 80007c6:	4b97      	ldr	r3, [pc, #604]	; (8000a24 <MX_GPIO_Init+0x278>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a96      	ldr	r2, [pc, #600]	; (8000a24 <MX_GPIO_Init+0x278>)
 80007cc:	f043 0304 	orr.w	r3, r3, #4
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b94      	ldr	r3, [pc, #592]	; (8000a24 <MX_GPIO_Init+0x278>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0304 	and.w	r3, r3, #4
 80007da:	61bb      	str	r3, [r7, #24]
 80007dc:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	617b      	str	r3, [r7, #20]
 80007e2:	4b90      	ldr	r3, [pc, #576]	; (8000a24 <MX_GPIO_Init+0x278>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a8f      	ldr	r2, [pc, #572]	; (8000a24 <MX_GPIO_Init+0x278>)
 80007e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b8d      	ldr	r3, [pc, #564]	; (8000a24 <MX_GPIO_Init+0x278>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007f6:	617b      	str	r3, [r7, #20]
 80007f8:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	613b      	str	r3, [r7, #16]
 80007fe:	4b89      	ldr	r3, [pc, #548]	; (8000a24 <MX_GPIO_Init+0x278>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a88      	ldr	r2, [pc, #544]	; (8000a24 <MX_GPIO_Init+0x278>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b86      	ldr	r3, [pc, #536]	; (8000a24 <MX_GPIO_Init+0x278>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	613b      	str	r3, [r7, #16]
 8000814:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	60fb      	str	r3, [r7, #12]
 800081a:	4b82      	ldr	r3, [pc, #520]	; (8000a24 <MX_GPIO_Init+0x278>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a81      	ldr	r2, [pc, #516]	; (8000a24 <MX_GPIO_Init+0x278>)
 8000820:	f043 0302 	orr.w	r3, r3, #2
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b7f      	ldr	r3, [pc, #508]	; (8000a24 <MX_GPIO_Init+0x278>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0302 	and.w	r3, r3, #2
 800082e:	60fb      	str	r3, [r7, #12]
 8000830:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	60bb      	str	r3, [r7, #8]
 8000836:	4b7b      	ldr	r3, [pc, #492]	; (8000a24 <MX_GPIO_Init+0x278>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a7a      	ldr	r2, [pc, #488]	; (8000a24 <MX_GPIO_Init+0x278>)
 800083c:	f043 0310 	orr.w	r3, r3, #16
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b78      	ldr	r3, [pc, #480]	; (8000a24 <MX_GPIO_Init+0x278>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0310 	and.w	r3, r3, #16
 800084a:	60bb      	str	r3, [r7, #8]
 800084c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	607b      	str	r3, [r7, #4]
 8000852:	4b74      	ldr	r3, [pc, #464]	; (8000a24 <MX_GPIO_Init+0x278>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a73      	ldr	r2, [pc, #460]	; (8000a24 <MX_GPIO_Init+0x278>)
 8000858:	f043 0308 	orr.w	r3, r3, #8
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b71      	ldr	r3, [pc, #452]	; (8000a24 <MX_GPIO_Init+0x278>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0308 	and.w	r3, r3, #8
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	603b      	str	r3, [r7, #0]
 800086e:	4b6d      	ldr	r3, [pc, #436]	; (8000a24 <MX_GPIO_Init+0x278>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a6c      	ldr	r2, [pc, #432]	; (8000a24 <MX_GPIO_Init+0x278>)
 8000874:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b6a      	ldr	r3, [pc, #424]	; (8000a24 <MX_GPIO_Init+0x278>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000882:	603b      	str	r3, [r7, #0]
 8000884:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	f244 0181 	movw	r1, #16513	; 0x4081
 800088c:	4866      	ldr	r0, [pc, #408]	; (8000a28 <MX_GPIO_Init+0x27c>)
 800088e:	f001 fb06 	bl	8001e9e <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin,
 8000892:	2200      	movs	r2, #0
 8000894:	2140      	movs	r1, #64	; 0x40
 8000896:	4865      	ldr	r0, [pc, #404]	; (8000a2c <MX_GPIO_Init+0x280>)
 8000898:	f001 fb01 	bl	8001e9e <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : USER_Btn_Pin PC6 PC7 */
	GPIO_InitStruct.Pin = USER_Btn_Pin | GPIO_PIN_6 | GPIO_PIN_7;
 800089c:	f44f 5303 	mov.w	r3, #8384	; 0x20c0
 80008a0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008a2:	4b63      	ldr	r3, [pc, #396]	; (8000a30 <MX_GPIO_Init+0x284>)
 80008a4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	4619      	mov	r1, r3
 80008b0:	4860      	ldr	r0, [pc, #384]	; (8000a34 <MX_GPIO_Init+0x288>)
 80008b2:	f001 f93f 	bl	8001b34 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
	GPIO_InitStruct.Pin = RMII_MDC_Pin | RMII_RXD0_Pin | RMII_RXD1_Pin;
 80008b6:	2332      	movs	r3, #50	; 0x32
 80008b8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ba:	2302      	movs	r3, #2
 80008bc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c2:	2303      	movs	r3, #3
 80008c4:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008c6:	230b      	movs	r3, #11
 80008c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ca:	f107 031c 	add.w	r3, r7, #28
 80008ce:	4619      	mov	r1, r3
 80008d0:	4858      	ldr	r0, [pc, #352]	; (8000a34 <MX_GPIO_Init+0x288>)
 80008d2:	f001 f92f 	bl	8001b34 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin */
	GPIO_InitStruct.Pin = RMII_REF_CLK_Pin | RMII_MDIO_Pin;
 80008d6:	2306      	movs	r3, #6
 80008d8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008da:	2302      	movs	r3, #2
 80008dc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e2:	2303      	movs	r3, #3
 80008e4:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008e6:	230b      	movs	r3, #11
 80008e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	4619      	mov	r1, r3
 80008f0:	4851      	ldr	r0, [pc, #324]	; (8000a38 <MX_GPIO_Init+0x28c>)
 80008f2:	f001 f91f 	bl	8001b34 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | LD2_Pin;
 80008f6:	f244 0381 	movw	r3, #16513	; 0x4081
 80008fa:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fc:	2301      	movs	r3, #1
 80008fe:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000904:	2300      	movs	r3, #0
 8000906:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000908:	f107 031c 	add.w	r3, r7, #28
 800090c:	4619      	mov	r1, r3
 800090e:	4846      	ldr	r0, [pc, #280]	; (8000a28 <MX_GPIO_Init+0x27c>)
 8000910:	f001 f910 	bl	8001b34 <HAL_GPIO_Init>

	/*Configure GPIO pins : PE10 PE11 PE14 */
	GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_14;
 8000914:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 8000918:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800091a:	4b45      	ldr	r3, [pc, #276]	; (8000a30 <MX_GPIO_Init+0x284>)
 800091c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000922:	f107 031c 	add.w	r3, r7, #28
 8000926:	4619      	mov	r1, r3
 8000928:	4844      	ldr	r0, [pc, #272]	; (8000a3c <MX_GPIO_Init+0x290>)
 800092a:	f001 f903 	bl	8001b34 <HAL_GPIO_Init>

	/*Configure GPIO pin : RMII_TXD1_Pin */
	GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800092e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000932:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000934:	2302      	movs	r3, #2
 8000936:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800093c:	2303      	movs	r3, #3
 800093e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000940:	230b      	movs	r3, #11
 8000942:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000944:	f107 031c 	add.w	r3, r7, #28
 8000948:	4619      	mov	r1, r3
 800094a:	4837      	ldr	r0, [pc, #220]	; (8000a28 <MX_GPIO_Init+0x27c>)
 800094c:	f001 f8f2 	bl	8001b34 <HAL_GPIO_Init>

	/*Configure GPIO pin : PG2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000950:	2304      	movs	r3, #4
 8000952:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000954:	2300      	movs	r3, #0
 8000956:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000958:	2301      	movs	r3, #1
 800095a:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800095c:	f107 031c 	add.w	r3, r7, #28
 8000960:	4619      	mov	r1, r3
 8000962:	4832      	ldr	r0, [pc, #200]	; (8000a2c <MX_GPIO_Init+0x280>)
 8000964:	f001 f8e6 	bl	8001b34 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000968:	2340      	movs	r3, #64	; 0x40
 800096a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096c:	2301      	movs	r3, #1
 800096e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000974:	2300      	movs	r3, #0
 8000976:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000978:	f107 031c 	add.w	r3, r7, #28
 800097c:	4619      	mov	r1, r3
 800097e:	482b      	ldr	r0, [pc, #172]	; (8000a2c <MX_GPIO_Init+0x280>)
 8000980:	f001 f8d8 	bl	8001b34 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000984:	2380      	movs	r3, #128	; 0x80
 8000986:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000988:	2300      	movs	r3, #0
 800098a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000990:	f107 031c 	add.w	r3, r7, #28
 8000994:	4619      	mov	r1, r3
 8000996:	4825      	ldr	r0, [pc, #148]	; (8000a2c <MX_GPIO_Init+0x280>)
 8000998:	f001 f8cc 	bl	8001b34 <HAL_GPIO_Init>

	/*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
	GPIO_InitStruct.Pin = USB_SOF_Pin | USB_ID_Pin | USB_DM_Pin | USB_DP_Pin;
 800099c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80009a0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a2:	2302      	movs	r3, #2
 80009a4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009aa:	2303      	movs	r3, #3
 80009ac:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009ae:	230a      	movs	r3, #10
 80009b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	4619      	mov	r1, r3
 80009b8:	481f      	ldr	r0, [pc, #124]	; (8000a38 <MX_GPIO_Init+0x28c>)
 80009ba:	f001 f8bb 	bl	8001b34 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_VBUS_Pin */
	GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80009be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009c2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c4:	2300      	movs	r3, #0
 80009c6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80009cc:	f107 031c 	add.w	r3, r7, #28
 80009d0:	4619      	mov	r1, r3
 80009d2:	4819      	ldr	r0, [pc, #100]	; (8000a38 <MX_GPIO_Init+0x28c>)
 80009d4:	f001 f8ae 	bl	8001b34 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
	GPIO_InitStruct.Pin = RMII_TX_EN_Pin | RMII_TXD0_Pin;
 80009d8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80009dc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009de:	2302      	movs	r3, #2
 80009e0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e6:	2303      	movs	r3, #3
 80009e8:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009ea:	230b      	movs	r3, #11
 80009ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009ee:	f107 031c 	add.w	r3, r7, #28
 80009f2:	4619      	mov	r1, r3
 80009f4:	480d      	ldr	r0, [pc, #52]	; (8000a2c <MX_GPIO_Init+0x280>)
 80009f6:	f001 f89d 	bl	8001b34 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80009fa:	2200      	movs	r2, #0
 80009fc:	2105      	movs	r1, #5
 80009fe:	2017      	movs	r0, #23
 8000a00:	f000 fd65 	bl	80014ce <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000a04:	2017      	movs	r0, #23
 8000a06:	f000 fd7e 	bl	8001506 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2105      	movs	r1, #5
 8000a0e:	2028      	movs	r0, #40	; 0x28
 8000a10:	f000 fd5d 	bl	80014ce <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a14:	2028      	movs	r0, #40	; 0x28
 8000a16:	f000 fd76 	bl	8001506 <HAL_NVIC_EnableIRQ>

}
 8000a1a:	bf00      	nop
 8000a1c:	3730      	adds	r7, #48	; 0x30
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40023800 	.word	0x40023800
 8000a28:	40020400 	.word	0x40020400
 8000a2c:	40021800 	.word	0x40021800
 8000a30:	10110000 	.word	0x10110000
 8000a34:	40020800 	.word	0x40020800
 8000a38:	40020000 	.word	0x40020000
 8000a3c:	40021000 	.word	0x40021000

08000a40 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const *argument)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* init code for FATFS */
	//MX_FATFS_Init();
	/*## Register the file system object to the FatFs module ##############*/
	if (f_mount(&SDFatFs, (TCHAR const*) SDPath, 0) != FR_OK)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	491e      	ldr	r1, [pc, #120]	; (8000ac4 <StartDefaultTask+0x84>)
 8000a4c:	481e      	ldr	r0, [pc, #120]	; (8000ac8 <StartDefaultTask+0x88>)
 8000a4e:	f006 fe89 	bl	8007764 <f_mount>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d002      	beq.n	8000a5e <StartDefaultTask+0x1e>
	{
		/* FatFs Initialization Error */
		Error_Handler();
 8000a58:	f000 f964 	bl	8000d24 <Error_Handler>
 8000a5c:	e004      	b.n	8000a68 <StartDefaultTask+0x28>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_SET);
 8000a5e:	2201      	movs	r2, #1
 8000a60:	2140      	movs	r1, #64	; 0x40
 8000a62:	481a      	ldr	r0, [pc, #104]	; (8000acc <StartDefaultTask+0x8c>)
 8000a64:	f001 fa1b 	bl	8001e9e <HAL_GPIO_WritePin>
	{
		/*
		 HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
		 osDelay(100);
		 */
		osDelay(1);
 8000a68:	2001      	movs	r0, #1
 8000a6a:	f007 ffd4 	bl	8008a16 <osDelay>
		if (b1PushCounter > 0)
 8000a6e:	4b18      	ldr	r3, [pc, #96]	; (8000ad0 <StartDefaultTask+0x90>)
 8000a70:	881b      	ldrh	r3, [r3, #0]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d0f8      	beq.n	8000a68 <StartDefaultTask+0x28>
		{
			if (--b1PushCounter
 8000a76:	4b16      	ldr	r3, [pc, #88]	; (8000ad0 <StartDefaultTask+0x90>)
 8000a78:	881b      	ldrh	r3, [r3, #0]
 8000a7a:	3b01      	subs	r3, #1
 8000a7c:	b29a      	uxth	r2, r3
 8000a7e:	4b14      	ldr	r3, [pc, #80]	; (8000ad0 <StartDefaultTask+0x90>)
 8000a80:	801a      	strh	r2, [r3, #0]
 8000a82:	4b13      	ldr	r3, [pc, #76]	; (8000ad0 <StartDefaultTask+0x90>)
 8000a84:	881b      	ldrh	r3, [r3, #0]
 8000a86:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d8ec      	bhi.n	8000a68 <StartDefaultTask+0x28>
					< (B1SWITCH_SLICE_PUSH_TIME - CHATTERING_REMOVE_TIME))
			{
				if (HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin)
 8000a8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a92:	4810      	ldr	r0, [pc, #64]	; (8000ad4 <StartDefaultTask+0x94>)
 8000a94:	f001 f9ec 	bl	8001e70 <HAL_GPIO_ReadPin>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d108      	bne.n	8000ab0 <StartDefaultTask+0x70>
				{
					//				  if(b1PushCounter < 2000){
					//					  osSemaphoreRelease(sdWriteBinarySemHandle);
					//				  }
					//				  else{
					osSemaphoreRelease(sdReadBinarySemHandle);
 8000a9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ad8 <StartDefaultTask+0x98>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f008 f83e 	bl	8008b24 <osSemaphoreRelease>
					//				  }
					b1PushCounter = 0;
 8000aa8:	4b09      	ldr	r3, [pc, #36]	; (8000ad0 <StartDefaultTask+0x90>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	801a      	strh	r2, [r3, #0]
 8000aae:	e7db      	b.n	8000a68 <StartDefaultTask+0x28>
				}
				else
				{
					if (b1PushCounter == 0)
 8000ab0:	4b07      	ldr	r3, [pc, #28]	; (8000ad0 <StartDefaultTask+0x90>)
 8000ab2:	881b      	ldrh	r3, [r3, #0]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d1d7      	bne.n	8000a68 <StartDefaultTask+0x28>
					{
						osSemaphoreRelease(sdFormatBinarySemHandle);
 8000ab8:	4b08      	ldr	r3, [pc, #32]	; (8000adc <StartDefaultTask+0x9c>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4618      	mov	r0, r3
 8000abe:	f008 f831 	bl	8008b24 <osSemaphoreRelease>
		osDelay(1);
 8000ac2:	e7d1      	b.n	8000a68 <StartDefaultTask+0x28>
 8000ac4:	200042d0 	.word	0x200042d0
 8000ac8:	200042d4 	.word	0x200042d4
 8000acc:	40021800 	.word	0x40021800
 8000ad0:	20004850 	.word	0x20004850
 8000ad4:	40020800 	.word	0x40020800
 8000ad8:	2000484c 	.word	0x2000484c
 8000adc:	20004854 	.word	0x20004854

08000ae0 <StartSdReadTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartSdReadTask */
void StartSdReadTask(void const *argument)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b086      	sub	sp, #24
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
	uint16_t readDataIdx;
	uint16_t buffIdx;
	uint16_t sendBuffIdx;
	HAL_StatusTypeDef status;

	osSemaphoreWait(sdReadBinarySemHandle, 0);
 8000ae8:	4b38      	ldr	r3, [pc, #224]	; (8000bcc <StartSdReadTask+0xec>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	2100      	movs	r1, #0
 8000aee:	4618      	mov	r0, r3
 8000af0:	f007 ffca 	bl	8008a88 <osSemaphoreWait>
	/* Infinite loop */
	for (;;)
	{
		osSemaphoreWait(sdReadBinarySemHandle, osWaitForever);
 8000af4:	4b35      	ldr	r3, [pc, #212]	; (8000bcc <StartSdReadTask+0xec>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f04f 31ff 	mov.w	r1, #4294967295
 8000afc:	4618      	mov	r0, r3
 8000afe:	f007 ffc3 	bl	8008a88 <osSemaphoreWait>

		/*## Open the text file object with read access ###############*/
		f_open(&MyFile, "STM32.TXT", FA_WRITE | FA_CREATE_ALWAYS);
 8000b02:	220a      	movs	r2, #10
 8000b04:	4932      	ldr	r1, [pc, #200]	; (8000bd0 <StartSdReadTask+0xf0>)
 8000b06:	4833      	ldr	r0, [pc, #204]	; (8000bd4 <StartSdReadTask+0xf4>)
 8000b08:	f006 fe94 	bl	8007834 <f_open>
		/*Error_Handler();
		 }*/
		/*else
		 {*/
		/*## Read data from the text file ###########################*/
		fileSize = MyFile.fsize; //.obj.objsize;
 8000b0c:	4b31      	ldr	r3, [pc, #196]	; (8000bd4 <StartSdReadTask+0xf4>)
 8000b0e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8000b12:	827b      	strh	r3, [r7, #18]
		readDataIdx = 0;
 8000b14:	2300      	movs	r3, #0
 8000b16:	82fb      	strh	r3, [r7, #22]
		buffIdx = 0;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	82bb      	strh	r3, [r7, #20]
		tickRec[3] = HAL_GetTick();
 8000b1c:	f000 fbf6 	bl	800130c <HAL_GetTick>
 8000b20:	4602      	mov	r2, r0
 8000b22:	4b2d      	ldr	r3, [pc, #180]	; (8000bd8 <StartSdReadTask+0xf8>)
 8000b24:	60da      	str	r2, [r3, #12]
		do
		{
			readSize =
					((fileSize - readDataIdx) > _MAX_SS) ?
 8000b26:	8a7a      	ldrh	r2, [r7, #18]
 8000b28:	8afb      	ldrh	r3, [r7, #22]
 8000b2a:	1ad3      	subs	r3, r2, r3
							_MAX_SS : fileSize - readDataIdx;
 8000b2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b30:	bfa8      	it	ge
 8000b32:	f44f 7300 	movge.w	r3, #512	; 0x200
			readSize =
 8000b36:	823b      	strh	r3, [r7, #16]
			tickRec[5] = HAL_GetTick();
 8000b38:	f000 fbe8 	bl	800130c <HAL_GetTick>
 8000b3c:	4602      	mov	r2, r0
 8000b3e:	4b26      	ldr	r3, [pc, #152]	; (8000bd8 <StartSdReadTask+0xf8>)
 8000b40:	615a      	str	r2, [r3, #20]
			res = f_read(&MyFile, &workBuffer[buffIdx], readSize,
 8000b42:	8abb      	ldrh	r3, [r7, #20]
 8000b44:	4a25      	ldr	r2, [pc, #148]	; (8000bdc <StartSdReadTask+0xfc>)
 8000b46:	1899      	adds	r1, r3, r2
 8000b48:	8a3a      	ldrh	r2, [r7, #16]
 8000b4a:	f107 0308 	add.w	r3, r7, #8
 8000b4e:	4821      	ldr	r0, [pc, #132]	; (8000bd4 <StartSdReadTask+0xf4>)
 8000b50:	f007 f866 	bl	8007c20 <f_read>
 8000b54:	4603      	mov	r3, r0
 8000b56:	73fb      	strb	r3, [r7, #15]
					(UINT*) &bytesread);
			tickRec[6] = HAL_GetTick();
 8000b58:	f000 fbd8 	bl	800130c <HAL_GetTick>
 8000b5c:	4602      	mov	r2, r0
 8000b5e:	4b1e      	ldr	r3, [pc, #120]	; (8000bd8 <StartSdReadTask+0xf8>)
 8000b60:	619a      	str	r2, [r3, #24]
			if ((bytesread == 0) || (res != FR_OK))
 8000b62:	68bb      	ldr	r3, [r7, #8]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d002      	beq.n	8000b6e <StartSdReadTask+0x8e>
 8000b68:	7bfb      	ldrb	r3, [r7, #15]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <StartSdReadTask+0x92>
			{
				/* 'STM32.TXT' file Read or EOF Error */
				Error_Handler();
 8000b6e:	f000 f8d9 	bl	8000d24 <Error_Handler>
			}
			else
			{

			}
			buffIdx += readSize;
 8000b72:	8aba      	ldrh	r2, [r7, #20]
 8000b74:	8a3b      	ldrh	r3, [r7, #16]
 8000b76:	4413      	add	r3, r2
 8000b78:	82bb      	strh	r3, [r7, #20]
			if (buffIdx > _MAX_SS)
 8000b7a:	8abb      	ldrh	r3, [r7, #20]
 8000b7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b80:	d905      	bls.n	8000b8e <StartSdReadTask+0xae>
			{
				buffIdx = 0;
 8000b82:	2300      	movs	r3, #0
 8000b84:	82bb      	strh	r3, [r7, #20]
				sendBuffIdx = _MAX_SS;
 8000b86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b8a:	81bb      	strh	r3, [r7, #12]
 8000b8c:	e004      	b.n	8000b98 <StartSdReadTask+0xb8>
			}
			else
			{
				buffIdx = _MAX_SS;
 8000b8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b92:	82bb      	strh	r3, [r7, #20]
				sendBuffIdx = 0;
 8000b94:	2300      	movs	r3, #0
 8000b96:	81bb      	strh	r3, [r7, #12]
			 {
			 status = HAL_UART_Transmit_IT(&huart6,
			 &workBuffer[sendBuffIdx], readSize);
			 } while (status == HAL_BUSY);
			 */
			readDataIdx += readSize;
 8000b98:	8afa      	ldrh	r2, [r7, #22]
 8000b9a:	8a3b      	ldrh	r3, [r7, #16]
 8000b9c:	4413      	add	r3, r2
 8000b9e:	82fb      	strh	r3, [r7, #22]
		} while (readDataIdx < fileSize);
 8000ba0:	8afa      	ldrh	r2, [r7, #22]
 8000ba2:	8a7b      	ldrh	r3, [r7, #18]
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	d3be      	bcc.n	8000b26 <StartSdReadTask+0x46>
		tickRec[4] = HAL_GetTick();
 8000ba8:	f000 fbb0 	bl	800130c <HAL_GetTick>
 8000bac:	4602      	mov	r2, r0
 8000bae:	4b0a      	ldr	r3, [pc, #40]	; (8000bd8 <StartSdReadTask+0xf8>)
 8000bb0:	611a      	str	r2, [r3, #16]
		/*## Close the open text file #############################*/
		f_close(&MyFile);
 8000bb2:	4808      	ldr	r0, [pc, #32]	; (8000bd4 <StartSdReadTask+0xf4>)
 8000bb4:	f007 fc73 	bl	800849e <f_close>
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000bb8:	2201      	movs	r2, #1
 8000bba:	2101      	movs	r1, #1
 8000bbc:	4808      	ldr	r0, [pc, #32]	; (8000be0 <StartSdReadTask+0x100>)
 8000bbe:	f001 f96e 	bl	8001e9e <HAL_GPIO_WritePin>
		/*}*/
		osDelay(1);
 8000bc2:	2001      	movs	r0, #1
 8000bc4:	f007 ff27 	bl	8008a16 <osDelay>
		osSemaphoreWait(sdReadBinarySemHandle, osWaitForever);
 8000bc8:	e794      	b.n	8000af4 <StartSdReadTask+0x14>
 8000bca:	bf00      	nop
 8000bcc:	2000484c 	.word	0x2000484c
 8000bd0:	0800b178 	.word	0x0800b178
 8000bd4:	200045f4 	.word	0x200045f4
 8000bd8:	20004820 	.word	0x20004820
 8000bdc:	20003ed0 	.word	0x20003ed0
 8000be0:	40020400 	.word	0x40020400

08000be4 <StartSdWriteTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartSdWriteTask */
void StartSdWriteTask(void const *argument)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b088      	sub	sp, #32
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartSdWriteTask */
	FRESULT res; /* FatFs function common result code */
	uint32_t byteswritten; /* File write/read counts */
	char tmpFileName[] = "1234567890\0";
 8000bec:	4a3a      	ldr	r2, [pc, #232]	; (8000cd8 <StartSdWriteTask+0xf4>)
 8000bee:	f107 030c 	add.w	r3, r7, #12
 8000bf2:	ca07      	ldmia	r2, {r0, r1, r2}
 8000bf4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	osSemaphoreWait(sdWriteBinarySemHandle, 0);
 8000bf8:	4b38      	ldr	r3, [pc, #224]	; (8000cdc <StartSdWriteTask+0xf8>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f007 ff42 	bl	8008a88 <osSemaphoreWait>
	/* Infinite loop */
	for (;;)
	{
		osSemaphoreWait(sdWriteBinarySemHandle, osWaitForever);
 8000c04:	4b35      	ldr	r3, [pc, #212]	; (8000cdc <StartSdWriteTask+0xf8>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f04f 31ff 	mov.w	r1, #4294967295
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f007 ff3b 	bl	8008a88 <osSemaphoreWait>

		tickRec[0] = HAL_GetTick();
 8000c12:	f000 fb7b 	bl	800130c <HAL_GetTick>
 8000c16:	4602      	mov	r2, r0
 8000c18:	4b31      	ldr	r3, [pc, #196]	; (8000ce0 <StartSdWriteTask+0xfc>)
 8000c1a:	601a      	str	r2, [r3, #0]

		strncpy(tmpFileName, (char*) &workBuffer[writedataIdx], 10);
 8000c1c:	4b31      	ldr	r3, [pc, #196]	; (8000ce4 <StartSdWriteTask+0x100>)
 8000c1e:	881b      	ldrh	r3, [r3, #0]
 8000c20:	461a      	mov	r2, r3
 8000c22:	4b31      	ldr	r3, [pc, #196]	; (8000ce8 <StartSdWriteTask+0x104>)
 8000c24:	18d1      	adds	r1, r2, r3
 8000c26:	f107 030c 	add.w	r3, r7, #12
 8000c2a:	220a      	movs	r2, #10
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f00a fa35 	bl	800b09c <strncpy>
		if (strstr(tmpFileName, ".txt") != NULL)
 8000c32:	f107 030c 	add.w	r3, r7, #12
 8000c36:	492d      	ldr	r1, [pc, #180]	; (8000cec <StartSdWriteTask+0x108>)
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f00a fa44 	bl	800b0c6 <strstr>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d00d      	beq.n	8000c60 <StartSdWriteTask+0x7c>
		{
			/*## Create and Open a new text file object with write access #####*/
			strcpy(fileName, tmpFileName);
 8000c44:	f107 030c 	add.w	r3, r7, #12
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4829      	ldr	r0, [pc, #164]	; (8000cf0 <StartSdWriteTask+0x10c>)
 8000c4c:	f00a fa1e 	bl	800b08c <strcpy>
			res = f_open(&MyFile, fileName, FA_CREATE_ALWAYS | FA_WRITE);
 8000c50:	220a      	movs	r2, #10
 8000c52:	4927      	ldr	r1, [pc, #156]	; (8000cf0 <StartSdWriteTask+0x10c>)
 8000c54:	4827      	ldr	r0, [pc, #156]	; (8000cf4 <StartSdWriteTask+0x110>)
 8000c56:	f006 fded 	bl	8007834 <f_open>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	77fb      	strb	r3, [r7, #31]
 8000c5e:	e006      	b.n	8000c6e <StartSdWriteTask+0x8a>
		}
		else
		{
			res = f_open(&MyFile, fileName, FA_OPEN_ALWAYS | FA_WRITE);
 8000c60:	2212      	movs	r2, #18
 8000c62:	4923      	ldr	r1, [pc, #140]	; (8000cf0 <StartSdWriteTask+0x10c>)
 8000c64:	4823      	ldr	r0, [pc, #140]	; (8000cf4 <StartSdWriteTask+0x110>)
 8000c66:	f006 fde5 	bl	8007834 <f_open>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	77fb      	strb	r3, [r7, #31]
		}
		if (res != FR_OK)
 8000c6e:	7ffb      	ldrb	r3, [r7, #31]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d002      	beq.n	8000c7a <StartSdWriteTask+0x96>
		{
			/* 'STM32.TXT' file Open for write Error */
			Error_Handler();
 8000c74:	f000 f856 	bl	8000d24 <Error_Handler>
 8000c78:	e029      	b.n	8000cce <StartSdWriteTask+0xea>
		}
		else
		{
			/*## Write data to the text file ################################*/
			tickRec[1] = HAL_GetTick();
 8000c7a:	f000 fb47 	bl	800130c <HAL_GetTick>
 8000c7e:	4602      	mov	r2, r0
 8000c80:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <StartSdWriteTask+0xfc>)
 8000c82:	605a      	str	r2, [r3, #4]
			res = f_write(&MyFile, &workBuffer[writedataIdx], writeSize,
 8000c84:	4b17      	ldr	r3, [pc, #92]	; (8000ce4 <StartSdWriteTask+0x100>)
 8000c86:	881b      	ldrh	r3, [r3, #0]
 8000c88:	461a      	mov	r2, r3
 8000c8a:	4b17      	ldr	r3, [pc, #92]	; (8000ce8 <StartSdWriteTask+0x104>)
 8000c8c:	18d1      	adds	r1, r2, r3
 8000c8e:	4b1a      	ldr	r3, [pc, #104]	; (8000cf8 <StartSdWriteTask+0x114>)
 8000c90:	881b      	ldrh	r3, [r3, #0]
 8000c92:	461a      	mov	r2, r3
 8000c94:	f107 0318 	add.w	r3, r7, #24
 8000c98:	4816      	ldr	r0, [pc, #88]	; (8000cf4 <StartSdWriteTask+0x110>)
 8000c9a:	f007 f976 	bl	8007f8a <f_write>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	77fb      	strb	r3, [r7, #31]
					(void*) &byteswritten);
			tickRec[2] = HAL_GetTick();
 8000ca2:	f000 fb33 	bl	800130c <HAL_GetTick>
 8000ca6:	4602      	mov	r2, r0
 8000ca8:	4b0d      	ldr	r3, [pc, #52]	; (8000ce0 <StartSdWriteTask+0xfc>)
 8000caa:	609a      	str	r2, [r3, #8]
			if ((byteswritten == 0) || (res != FR_OK))
 8000cac:	69bb      	ldr	r3, [r7, #24]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d002      	beq.n	8000cb8 <StartSdWriteTask+0xd4>
 8000cb2:	7ffb      	ldrb	r3, [r7, #31]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d002      	beq.n	8000cbe <StartSdWriteTask+0xda>
			{
				/* 'STM32.TXT' file Write or EOF Error */
				Error_Handler();
 8000cb8:	f000 f834 	bl	8000d24 <Error_Handler>
 8000cbc:	e007      	b.n	8000cce <StartSdWriteTask+0xea>
			}
			else
			{
				/*## Close the open text file #################################*/
				f_close(&MyFile);
 8000cbe:	480d      	ldr	r0, [pc, #52]	; (8000cf4 <StartSdWriteTask+0x110>)
 8000cc0:	f007 fbed 	bl	800849e <f_close>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	2180      	movs	r1, #128	; 0x80
 8000cc8:	480c      	ldr	r0, [pc, #48]	; (8000cfc <StartSdWriteTask+0x118>)
 8000cca:	f001 f8e8 	bl	8001e9e <HAL_GPIO_WritePin>
			}
		}
		osDelay(1);
 8000cce:	2001      	movs	r0, #1
 8000cd0:	f007 fea1 	bl	8008a16 <osDelay>
		osSemaphoreWait(sdWriteBinarySemHandle, osWaitForever);
 8000cd4:	e796      	b.n	8000c04 <StartSdWriteTask+0x20>
 8000cd6:	bf00      	nop
 8000cd8:	0800b18c 	.word	0x0800b18c
 8000cdc:	20004848 	.word	0x20004848
 8000ce0:	20004820 	.word	0x20004820
 8000ce4:	20003e14 	.word	0x20003e14
 8000ce8:	20003ed0 	.word	0x20003ed0
 8000cec:	0800b184 	.word	0x0800b184
 8000cf0:	20003ebc 	.word	0x20003ebc
 8000cf4:	200045f4 	.word	0x200045f4
 8000cf8:	20004852 	.word	0x20004852
 8000cfc:	40020400 	.word	0x40020400

08000d00 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM9)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a04      	ldr	r2, [pc, #16]	; (8000d20 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d101      	bne.n	8000d16 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		HAL_IncTick();
 8000d12:	f000 fae9 	bl	80012e8 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000d16:	bf00      	nop
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40014000 	.word	0x40014000

08000d24 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000d28:	2201      	movs	r2, #1
 8000d2a:	2101      	movs	r1, #1
 8000d2c:	4807      	ldr	r0, [pc, #28]	; (8000d4c <Error_Handler+0x28>)
 8000d2e:	f001 f8b6 	bl	8001e9e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000d32:	2201      	movs	r2, #1
 8000d34:	2180      	movs	r1, #128	; 0x80
 8000d36:	4805      	ldr	r0, [pc, #20]	; (8000d4c <Error_Handler+0x28>)
 8000d38:	f001 f8b1 	bl	8001e9e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d42:	4802      	ldr	r0, [pc, #8]	; (8000d4c <Error_Handler+0x28>)
 8000d44:	f001 f8ab 	bl	8001e9e <HAL_GPIO_WritePin>
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000d48:	bf00      	nop
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40020400 	.word	0x40020400

08000d50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	607b      	str	r3, [r7, #4]
 8000d5a:	4b12      	ldr	r3, [pc, #72]	; (8000da4 <HAL_MspInit+0x54>)
 8000d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5e:	4a11      	ldr	r2, [pc, #68]	; (8000da4 <HAL_MspInit+0x54>)
 8000d60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d64:	6453      	str	r3, [r2, #68]	; 0x44
 8000d66:	4b0f      	ldr	r3, [pc, #60]	; (8000da4 <HAL_MspInit+0x54>)
 8000d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d6e:	607b      	str	r3, [r7, #4]
 8000d70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	603b      	str	r3, [r7, #0]
 8000d76:	4b0b      	ldr	r3, [pc, #44]	; (8000da4 <HAL_MspInit+0x54>)
 8000d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7a:	4a0a      	ldr	r2, [pc, #40]	; (8000da4 <HAL_MspInit+0x54>)
 8000d7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d80:	6413      	str	r3, [r2, #64]	; 0x40
 8000d82:	4b08      	ldr	r3, [pc, #32]	; (8000da4 <HAL_MspInit+0x54>)
 8000d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d8a:	603b      	str	r3, [r7, #0]
 8000d8c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	210f      	movs	r1, #15
 8000d92:	f06f 0001 	mvn.w	r0, #1
 8000d96:	f000 fb9a 	bl	80014ce <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40023800 	.word	0x40023800

08000da8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b08a      	sub	sp, #40	; 0x28
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db0:	f107 0314 	add.w	r3, r7, #20
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	60da      	str	r2, [r3, #12]
 8000dbe:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a68      	ldr	r2, [pc, #416]	; (8000f68 <HAL_SD_MspInit+0x1c0>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	f040 80c9 	bne.w	8000f5e <HAL_SD_MspInit+0x1b6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000dcc:	2300      	movs	r3, #0
 8000dce:	613b      	str	r3, [r7, #16]
 8000dd0:	4b66      	ldr	r3, [pc, #408]	; (8000f6c <HAL_SD_MspInit+0x1c4>)
 8000dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd4:	4a65      	ldr	r2, [pc, #404]	; (8000f6c <HAL_SD_MspInit+0x1c4>)
 8000dd6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000dda:	6453      	str	r3, [r2, #68]	; 0x44
 8000ddc:	4b63      	ldr	r3, [pc, #396]	; (8000f6c <HAL_SD_MspInit+0x1c4>)
 8000dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000de4:	613b      	str	r3, [r7, #16]
 8000de6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000de8:	2300      	movs	r3, #0
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	4b5f      	ldr	r3, [pc, #380]	; (8000f6c <HAL_SD_MspInit+0x1c4>)
 8000dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df0:	4a5e      	ldr	r2, [pc, #376]	; (8000f6c <HAL_SD_MspInit+0x1c4>)
 8000df2:	f043 0304 	orr.w	r3, r3, #4
 8000df6:	6313      	str	r3, [r2, #48]	; 0x30
 8000df8:	4b5c      	ldr	r3, [pc, #368]	; (8000f6c <HAL_SD_MspInit+0x1c4>)
 8000dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfc:	f003 0304 	and.w	r3, r3, #4
 8000e00:	60fb      	str	r3, [r7, #12]
 8000e02:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e04:	2300      	movs	r3, #0
 8000e06:	60bb      	str	r3, [r7, #8]
 8000e08:	4b58      	ldr	r3, [pc, #352]	; (8000f6c <HAL_SD_MspInit+0x1c4>)
 8000e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0c:	4a57      	ldr	r2, [pc, #348]	; (8000f6c <HAL_SD_MspInit+0x1c4>)
 8000e0e:	f043 0308 	orr.w	r3, r3, #8
 8000e12:	6313      	str	r3, [r2, #48]	; 0x30
 8000e14:	4b55      	ldr	r3, [pc, #340]	; (8000f6c <HAL_SD_MspInit+0x1c4>)
 8000e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e18:	f003 0308 	and.w	r3, r3, #8
 8000e1c:	60bb      	str	r3, [r7, #8]
 8000e1e:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000e20:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000e24:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e26:	2302      	movs	r3, #2
 8000e28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2e:	2303      	movs	r3, #3
 8000e30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000e32:	230c      	movs	r3, #12
 8000e34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e36:	f107 0314 	add.w	r3, r7, #20
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	484c      	ldr	r0, [pc, #304]	; (8000f70 <HAL_SD_MspInit+0x1c8>)
 8000e3e:	f000 fe79 	bl	8001b34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e42:	2304      	movs	r3, #4
 8000e44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e46:	2302      	movs	r3, #2
 8000e48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e4e:	2303      	movs	r3, #3
 8000e50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000e52:	230c      	movs	r3, #12
 8000e54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e56:	f107 0314 	add.w	r3, r7, #20
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4845      	ldr	r0, [pc, #276]	; (8000f74 <HAL_SD_MspInit+0x1cc>)
 8000e5e:	f000 fe69 	bl	8001b34 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8000e62:	4b45      	ldr	r3, [pc, #276]	; (8000f78 <HAL_SD_MspInit+0x1d0>)
 8000e64:	4a45      	ldr	r2, [pc, #276]	; (8000f7c <HAL_SD_MspInit+0x1d4>)
 8000e66:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8000e68:	4b43      	ldr	r3, [pc, #268]	; (8000f78 <HAL_SD_MspInit+0x1d0>)
 8000e6a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e6e:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e70:	4b41      	ldr	r3, [pc, #260]	; (8000f78 <HAL_SD_MspInit+0x1d0>)
 8000e72:	2240      	movs	r2, #64	; 0x40
 8000e74:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e76:	4b40      	ldr	r3, [pc, #256]	; (8000f78 <HAL_SD_MspInit+0x1d0>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e7c:	4b3e      	ldr	r3, [pc, #248]	; (8000f78 <HAL_SD_MspInit+0x1d0>)
 8000e7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e82:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e84:	4b3c      	ldr	r3, [pc, #240]	; (8000f78 <HAL_SD_MspInit+0x1d0>)
 8000e86:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e8a:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e8c:	4b3a      	ldr	r3, [pc, #232]	; (8000f78 <HAL_SD_MspInit+0x1d0>)
 8000e8e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e92:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8000e94:	4b38      	ldr	r3, [pc, #224]	; (8000f78 <HAL_SD_MspInit+0x1d0>)
 8000e96:	2220      	movs	r2, #32
 8000e98:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e9a:	4b37      	ldr	r3, [pc, #220]	; (8000f78 <HAL_SD_MspInit+0x1d0>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000ea0:	4b35      	ldr	r3, [pc, #212]	; (8000f78 <HAL_SD_MspInit+0x1d0>)
 8000ea2:	2204      	movs	r2, #4
 8000ea4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000ea6:	4b34      	ldr	r3, [pc, #208]	; (8000f78 <HAL_SD_MspInit+0x1d0>)
 8000ea8:	2203      	movs	r2, #3
 8000eaa:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8000eac:	4b32      	ldr	r3, [pc, #200]	; (8000f78 <HAL_SD_MspInit+0x1d0>)
 8000eae:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000eb2:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000eb4:	4b30      	ldr	r3, [pc, #192]	; (8000f78 <HAL_SD_MspInit+0x1d0>)
 8000eb6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000eba:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8000ebc:	482e      	ldr	r0, [pc, #184]	; (8000f78 <HAL_SD_MspInit+0x1d0>)
 8000ebe:	f000 fb31 	bl	8001524 <HAL_DMA_Init>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 8000ec8:	f7ff ff2c 	bl	8000d24 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	4a2a      	ldr	r2, [pc, #168]	; (8000f78 <HAL_SD_MspInit+0x1d0>)
 8000ed0:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ed2:	4a29      	ldr	r2, [pc, #164]	; (8000f78 <HAL_SD_MspInit+0x1d0>)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8000ed8:	4b29      	ldr	r3, [pc, #164]	; (8000f80 <HAL_SD_MspInit+0x1d8>)
 8000eda:	4a2a      	ldr	r2, [pc, #168]	; (8000f84 <HAL_SD_MspInit+0x1dc>)
 8000edc:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8000ede:	4b28      	ldr	r3, [pc, #160]	; (8000f80 <HAL_SD_MspInit+0x1d8>)
 8000ee0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ee4:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ee6:	4b26      	ldr	r3, [pc, #152]	; (8000f80 <HAL_SD_MspInit+0x1d8>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eec:	4b24      	ldr	r3, [pc, #144]	; (8000f80 <HAL_SD_MspInit+0x1d8>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ef2:	4b23      	ldr	r3, [pc, #140]	; (8000f80 <HAL_SD_MspInit+0x1d8>)
 8000ef4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ef8:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000efa:	4b21      	ldr	r3, [pc, #132]	; (8000f80 <HAL_SD_MspInit+0x1d8>)
 8000efc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f00:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000f02:	4b1f      	ldr	r3, [pc, #124]	; (8000f80 <HAL_SD_MspInit+0x1d8>)
 8000f04:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f08:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8000f0a:	4b1d      	ldr	r3, [pc, #116]	; (8000f80 <HAL_SD_MspInit+0x1d8>)
 8000f0c:	2220      	movs	r2, #32
 8000f0e:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f10:	4b1b      	ldr	r3, [pc, #108]	; (8000f80 <HAL_SD_MspInit+0x1d8>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000f16:	4b1a      	ldr	r3, [pc, #104]	; (8000f80 <HAL_SD_MspInit+0x1d8>)
 8000f18:	2204      	movs	r2, #4
 8000f1a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000f1c:	4b18      	ldr	r3, [pc, #96]	; (8000f80 <HAL_SD_MspInit+0x1d8>)
 8000f1e:	2203      	movs	r2, #3
 8000f20:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8000f22:	4b17      	ldr	r3, [pc, #92]	; (8000f80 <HAL_SD_MspInit+0x1d8>)
 8000f24:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000f28:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000f2a:	4b15      	ldr	r3, [pc, #84]	; (8000f80 <HAL_SD_MspInit+0x1d8>)
 8000f2c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000f30:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8000f32:	4813      	ldr	r0, [pc, #76]	; (8000f80 <HAL_SD_MspInit+0x1d8>)
 8000f34:	f000 faf6 	bl	8001524 <HAL_DMA_Init>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 8000f3e:	f7ff fef1 	bl	8000d24 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a0e      	ldr	r2, [pc, #56]	; (8000f80 <HAL_SD_MspInit+0x1d8>)
 8000f46:	641a      	str	r2, [r3, #64]	; 0x40
 8000f48:	4a0d      	ldr	r2, [pc, #52]	; (8000f80 <HAL_SD_MspInit+0x1d8>)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2105      	movs	r1, #5
 8000f52:	2031      	movs	r0, #49	; 0x31
 8000f54:	f000 fabb 	bl	80014ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8000f58:	2031      	movs	r0, #49	; 0x31
 8000f5a:	f000 fad4 	bl	8001506 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000f5e:	bf00      	nop
 8000f60:	3728      	adds	r7, #40	; 0x28
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40012c00 	.word	0x40012c00
 8000f6c:	40023800 	.word	0x40023800
 8000f70:	40020800 	.word	0x40020800
 8000f74:	40020c00 	.word	0x40020c00
 8000f78:	2000450c 	.word	0x2000450c
 8000f7c:	400264a0 	.word	0x400264a0
 8000f80:	20003e18 	.word	0x20003e18
 8000f84:	40026458 	.word	0x40026458

08000f88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b08a      	sub	sp, #40	; 0x28
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f90:	f107 0314 	add.w	r3, r7, #20
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
 8000f9e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a19      	ldr	r2, [pc, #100]	; (800100c <HAL_UART_MspInit+0x84>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d12c      	bne.n	8001004 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	613b      	str	r3, [r7, #16]
 8000fae:	4b18      	ldr	r3, [pc, #96]	; (8001010 <HAL_UART_MspInit+0x88>)
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb2:	4a17      	ldr	r2, [pc, #92]	; (8001010 <HAL_UART_MspInit+0x88>)
 8000fb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fba:	4b15      	ldr	r3, [pc, #84]	; (8001010 <HAL_UART_MspInit+0x88>)
 8000fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fc2:	613b      	str	r3, [r7, #16]
 8000fc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	4b11      	ldr	r3, [pc, #68]	; (8001010 <HAL_UART_MspInit+0x88>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	4a10      	ldr	r2, [pc, #64]	; (8001010 <HAL_UART_MspInit+0x88>)
 8000fd0:	f043 0308 	orr.w	r3, r3, #8
 8000fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd6:	4b0e      	ldr	r3, [pc, #56]	; (8001010 <HAL_UART_MspInit+0x88>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	f003 0308 	and.w	r3, r3, #8
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000fe2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000fe6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ff4:	2307      	movs	r3, #7
 8000ff6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ff8:	f107 0314 	add.w	r3, r7, #20
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4805      	ldr	r0, [pc, #20]	; (8001014 <HAL_UART_MspInit+0x8c>)
 8001000:	f000 fd98 	bl	8001b34 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001004:	bf00      	nop
 8001006:	3728      	adds	r7, #40	; 0x28
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40004800 	.word	0x40004800
 8001010:	40023800 	.word	0x40023800
 8001014:	40020c00 	.word	0x40020c00

08001018 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b08c      	sub	sp, #48	; 0x30
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001020:	2300      	movs	r3, #0
 8001022:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001024:	2300      	movs	r3, #0
 8001026:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM9 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority ,0);
 8001028:	2200      	movs	r2, #0
 800102a:	6879      	ldr	r1, [r7, #4]
 800102c:	2018      	movs	r0, #24
 800102e:	f000 fa4e 	bl	80014ce <HAL_NVIC_SetPriority>

  /* Enable the TIM9 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001032:	2018      	movs	r0, #24
 8001034:	f000 fa67 	bl	8001506 <HAL_NVIC_EnableIRQ>
  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 8001038:	2300      	movs	r3, #0
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	4b1f      	ldr	r3, [pc, #124]	; (80010bc <HAL_InitTick+0xa4>)
 800103e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001040:	4a1e      	ldr	r2, [pc, #120]	; (80010bc <HAL_InitTick+0xa4>)
 8001042:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001046:	6453      	str	r3, [r2, #68]	; 0x44
 8001048:	4b1c      	ldr	r3, [pc, #112]	; (80010bc <HAL_InitTick+0xa4>)
 800104a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001050:	60fb      	str	r3, [r7, #12]
 8001052:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001054:	f107 0210 	add.w	r2, r7, #16
 8001058:	f107 0314 	add.w	r3, r7, #20
 800105c:	4611      	mov	r1, r2
 800105e:	4618      	mov	r0, r3
 8001060:	f001 fbb0 	bl	80027c4 <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001064:	f001 fb8c 	bl	8002780 <HAL_RCC_GetPCLK2Freq>
 8001068:	4603      	mov	r3, r0
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800106e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001070:	4a13      	ldr	r2, [pc, #76]	; (80010c0 <HAL_InitTick+0xa8>)
 8001072:	fba2 2303 	umull	r2, r3, r2, r3
 8001076:	0c9b      	lsrs	r3, r3, #18
 8001078:	3b01      	subs	r3, #1
 800107a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 800107c:	4b11      	ldr	r3, [pc, #68]	; (80010c4 <HAL_InitTick+0xac>)
 800107e:	4a12      	ldr	r2, [pc, #72]	; (80010c8 <HAL_InitTick+0xb0>)
 8001080:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 8001082:	4b10      	ldr	r3, [pc, #64]	; (80010c4 <HAL_InitTick+0xac>)
 8001084:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001088:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 800108a:	4a0e      	ldr	r2, [pc, #56]	; (80010c4 <HAL_InitTick+0xac>)
 800108c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800108e:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 8001090:	4b0c      	ldr	r3, [pc, #48]	; (80010c4 <HAL_InitTick+0xac>)
 8001092:	2200      	movs	r2, #0
 8001094:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001096:	4b0b      	ldr	r3, [pc, #44]	; (80010c4 <HAL_InitTick+0xac>)
 8001098:	2200      	movs	r2, #0
 800109a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim9) == HAL_OK)
 800109c:	4809      	ldr	r0, [pc, #36]	; (80010c4 <HAL_InitTick+0xac>)
 800109e:	f002 ffd3 	bl	8004048 <HAL_TIM_Base_Init>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d104      	bne.n	80010b2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim9);
 80010a8:	4806      	ldr	r0, [pc, #24]	; (80010c4 <HAL_InitTick+0xac>)
 80010aa:	f003 f825 	bl	80040f8 <HAL_TIM_Base_Start_IT>
 80010ae:	4603      	mov	r3, r0
 80010b0:	e000      	b.n	80010b4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3730      	adds	r7, #48	; 0x30
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	40023800 	.word	0x40023800
 80010c0:	431bde83 	.word	0x431bde83
 80010c4:	2000485c 	.word	0x2000485c
 80010c8:	40014000 	.word	0x40014000

080010cc <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */

	/* USER CODE END NonMaskableInt_IRQn 1 */
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bc80      	pop	{r7}
 80010d6:	4770      	bx	lr

080010d8 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1)
 80010dc:	e7fe      	b.n	80010dc <HardFault_Handler+0x4>

080010de <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 80010de:	b480      	push	{r7}
 80010e0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1)
 80010e2:	e7fe      	b.n	80010e2 <MemManage_Handler+0x4>

080010e4 <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1)
 80010e8:	e7fe      	b.n	80010e8 <BusFault_Handler+0x4>

080010ea <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 80010ea:	b480      	push	{r7}
 80010ec:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1)
 80010ee:	e7fe      	b.n	80010ee <UsageFault_Handler+0x4>

080010f0 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bc80      	pop	{r7}
 80010fa:	4770      	bx	lr

080010fc <EXTI9_5_IRQHandler>:

/**
 * @brief This function handles EXTI line[9:5] interrupts.
 */
void EXTI9_5_IRQHandler(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI9_5_IRQn 0 */

	/* USER CODE END EXTI9_5_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001100:	2040      	movs	r0, #64	; 0x40
 8001102:	f000 fee5 	bl	8001ed0 <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001106:	2080      	movs	r0, #128	; 0x80
 8001108:	f000 fee2 	bl	8001ed0 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI9_5_IRQn 1 */

	/* USER CODE END EXTI9_5_IRQn 1 */
}
 800110c:	bf00      	nop
 800110e:	bd80      	pop	{r7, pc}

08001110 <TIM1_BRK_TIM9_IRQHandler>:

/**
 * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
 */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

	/* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
	HAL_TIM_IRQHandler(&htim9);
 8001114:	4802      	ldr	r0, [pc, #8]	; (8001120 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001116:	f003 f85d 	bl	80041d4 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

	/* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	2000485c 	.word	0x2000485c

08001124 <EXTI15_10_IRQHandler>:

/**
 * @brief This function handles EXTI Line[15:10] interrupts.
 */
void EXTI15_10_IRQHandler(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI15_10_IRQn 0 */

	/* USER CODE END EXTI15_10_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001128:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800112c:	f000 fed0 	bl	8001ed0 <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001130:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001134:	f000 fecc 	bl	8001ed0 <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001138:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800113c:	f000 fec8 	bl	8001ed0 <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001140:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001144:	f000 fec4 	bl	8001ed0 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI15_10_IRQn 1 */

	/* USER CODE END EXTI15_10_IRQn 1 */
}
 8001148:	bf00      	nop
 800114a:	bd80      	pop	{r7, pc}

0800114c <SDIO_IRQHandler>:

/**
 * @brief This function handles SDIO global interrupt.
 */
void SDIO_IRQHandler(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SDIO_IRQn 0 */

	/* USER CODE END SDIO_IRQn 0 */
	HAL_SD_IRQHandler(&hsd);
 8001150:	4802      	ldr	r0, [pc, #8]	; (800115c <SDIO_IRQHandler+0x10>)
 8001152:	f001 ff93 	bl	800307c <HAL_SD_IRQHandler>
	/* USER CODE BEGIN SDIO_IRQn 1 */

	/* USER CODE END SDIO_IRQn 1 */
}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	20004570 	.word	0x20004570

08001160 <DMA2_Stream3_IRQHandler>:

/**
 * @brief This function handles DMA2 Stream3 global interrupt.
 */
void DMA2_Stream3_IRQHandler(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

	/* USER CODE END DMA2_Stream3_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8001164:	4802      	ldr	r0, [pc, #8]	; (8001170 <DMA2_Stream3_IRQHandler+0x10>)
 8001166:	f000 faad 	bl	80016c4 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

	/* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20003e18 	.word	0x20003e18

08001174 <DMA2_Stream6_IRQHandler>:

/**
 * @brief This function handles DMA2 Stream6 global interrupt.
 */
void DMA2_Stream6_IRQHandler(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

	/* USER CODE END DMA2_Stream6_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8001178:	4802      	ldr	r0, [pc, #8]	; (8001184 <DMA2_Stream6_IRQHandler+0x10>)
 800117a:	f000 faa3 	bl	80016c4 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

	/* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	2000450c 	.word	0x2000450c

08001188 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001190:	4a14      	ldr	r2, [pc, #80]	; (80011e4 <_sbrk+0x5c>)
 8001192:	4b15      	ldr	r3, [pc, #84]	; (80011e8 <_sbrk+0x60>)
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800119c:	4b13      	ldr	r3, [pc, #76]	; (80011ec <_sbrk+0x64>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d102      	bne.n	80011aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011a4:	4b11      	ldr	r3, [pc, #68]	; (80011ec <_sbrk+0x64>)
 80011a6:	4a12      	ldr	r2, [pc, #72]	; (80011f0 <_sbrk+0x68>)
 80011a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011aa:	4b10      	ldr	r3, [pc, #64]	; (80011ec <_sbrk+0x64>)
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4413      	add	r3, r2
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d207      	bcs.n	80011c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011b8:	f009 fe64 	bl	800ae84 <__errno>
 80011bc:	4602      	mov	r2, r0
 80011be:	230c      	movs	r3, #12
 80011c0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80011c2:	f04f 33ff 	mov.w	r3, #4294967295
 80011c6:	e009      	b.n	80011dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011c8:	4b08      	ldr	r3, [pc, #32]	; (80011ec <_sbrk+0x64>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011ce:	4b07      	ldr	r3, [pc, #28]	; (80011ec <_sbrk+0x64>)
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4413      	add	r3, r2
 80011d6:	4a05      	ldr	r2, [pc, #20]	; (80011ec <_sbrk+0x64>)
 80011d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011da:	68fb      	ldr	r3, [r7, #12]
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3718      	adds	r7, #24
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	20020000 	.word	0x20020000
 80011e8:	00001000 	.word	0x00001000
 80011ec:	20000090 	.word	0x20000090
 80011f0:	20004d50 	.word	0x20004d50

080011f4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80011f8:	4b12      	ldr	r3, [pc, #72]	; (8001244 <SystemInit+0x50>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a11      	ldr	r2, [pc, #68]	; (8001244 <SystemInit+0x50>)
 80011fe:	f043 0301 	orr.w	r3, r3, #1
 8001202:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001204:	4b0f      	ldr	r3, [pc, #60]	; (8001244 <SystemInit+0x50>)
 8001206:	2200      	movs	r2, #0
 8001208:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800120a:	4b0e      	ldr	r3, [pc, #56]	; (8001244 <SystemInit+0x50>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a0d      	ldr	r2, [pc, #52]	; (8001244 <SystemInit+0x50>)
 8001210:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001214:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001218:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800121a:	4b0a      	ldr	r3, [pc, #40]	; (8001244 <SystemInit+0x50>)
 800121c:	4a0a      	ldr	r2, [pc, #40]	; (8001248 <SystemInit+0x54>)
 800121e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001220:	4b08      	ldr	r3, [pc, #32]	; (8001244 <SystemInit+0x50>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a07      	ldr	r2, [pc, #28]	; (8001244 <SystemInit+0x50>)
 8001226:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800122a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800122c:	4b05      	ldr	r3, [pc, #20]	; (8001244 <SystemInit+0x50>)
 800122e:	2200      	movs	r2, #0
 8001230:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <SystemInit+0x58>)
 8001234:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001238:	609a      	str	r2, [r3, #8]
#endif
}
 800123a:	bf00      	nop
 800123c:	46bd      	mov	sp, r7
 800123e:	bc80      	pop	{r7}
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	40023800 	.word	0x40023800
 8001248:	24003010 	.word	0x24003010
 800124c:	e000ed00 	.word	0xe000ed00

08001250 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001250:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001288 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8001254:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001256:	e003      	b.n	8001260 <LoopCopyDataInit>

08001258 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001258:	4b0c      	ldr	r3, [pc, #48]	; (800128c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800125a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800125c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800125e:	3104      	adds	r1, #4

08001260 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8001260:	480b      	ldr	r0, [pc, #44]	; (8001290 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001262:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001264:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001266:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001268:	d3f6      	bcc.n	8001258 <CopyDataInit>
  ldr  r2, =_sbss
 800126a:	4a0b      	ldr	r2, [pc, #44]	; (8001298 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800126c:	e002      	b.n	8001274 <LoopFillZerobss>

0800126e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800126e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001270:	f842 3b04 	str.w	r3, [r2], #4

08001274 <LoopFillZerobss>:

LoopFillZerobss:
  ldr  r3, = _ebss
 8001274:	4b09      	ldr	r3, [pc, #36]	; (800129c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001276:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001278:	d3f9      	bcc.n	800126e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800127a:	f7ff ffbb 	bl	80011f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800127e:	f009 fe07 	bl	800ae90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001282:	f7ff f957 	bl	8000534 <main>
  bx  lr
 8001286:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001288:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800128c:	0802cac4 	.word	0x0802cac4
  ldr  r0, =_sdata
 8001290:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001294:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8001298:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 800129c:	20004d50 	.word	0x20004d50

080012a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012a0:	e7fe      	b.n	80012a0 <ADC_IRQHandler>
	...

080012a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012a8:	4b0e      	ldr	r3, [pc, #56]	; (80012e4 <HAL_Init+0x40>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a0d      	ldr	r2, [pc, #52]	; (80012e4 <HAL_Init+0x40>)
 80012ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80012b4:	4b0b      	ldr	r3, [pc, #44]	; (80012e4 <HAL_Init+0x40>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a0a      	ldr	r2, [pc, #40]	; (80012e4 <HAL_Init+0x40>)
 80012ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012c0:	4b08      	ldr	r3, [pc, #32]	; (80012e4 <HAL_Init+0x40>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a07      	ldr	r2, [pc, #28]	; (80012e4 <HAL_Init+0x40>)
 80012c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012cc:	2003      	movs	r0, #3
 80012ce:	f000 f8f3 	bl	80014b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012d2:	2000      	movs	r0, #0
 80012d4:	f7ff fea0 	bl	8001018 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80012d8:	f7ff fd3a 	bl	8000d50 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80012dc:	2300      	movs	r3, #0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40023c00 	.word	0x40023c00

080012e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012ec:	4b05      	ldr	r3, [pc, #20]	; (8001304 <HAL_IncTick+0x1c>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	461a      	mov	r2, r3
 80012f2:	4b05      	ldr	r3, [pc, #20]	; (8001308 <HAL_IncTick+0x20>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4413      	add	r3, r2
 80012f8:	4a03      	ldr	r2, [pc, #12]	; (8001308 <HAL_IncTick+0x20>)
 80012fa:	6013      	str	r3, [r2, #0]
}
 80012fc:	bf00      	nop
 80012fe:	46bd      	mov	sp, r7
 8001300:	bc80      	pop	{r7}
 8001302:	4770      	bx	lr
 8001304:	20000008 	.word	0x20000008
 8001308:	200048a4 	.word	0x200048a4

0800130c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  return uwTick;
 8001310:	4b02      	ldr	r3, [pc, #8]	; (800131c <HAL_GetTick+0x10>)
 8001312:	681b      	ldr	r3, [r3, #0]
}
 8001314:	4618      	mov	r0, r3
 8001316:	46bd      	mov	sp, r7
 8001318:	bc80      	pop	{r7}
 800131a:	4770      	bx	lr
 800131c:	200048a4 	.word	0x200048a4

08001320 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001328:	f7ff fff0 	bl	800130c <HAL_GetTick>
 800132c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001338:	d005      	beq.n	8001346 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800133a:	4b09      	ldr	r3, [pc, #36]	; (8001360 <HAL_Delay+0x40>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	461a      	mov	r2, r3
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	4413      	add	r3, r2
 8001344:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001346:	bf00      	nop
 8001348:	f7ff ffe0 	bl	800130c <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	68fa      	ldr	r2, [r7, #12]
 8001354:	429a      	cmp	r2, r3
 8001356:	d8f7      	bhi.n	8001348 <HAL_Delay+0x28>
  {
  }
}
 8001358:	bf00      	nop
 800135a:	3710      	adds	r7, #16
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	20000008 	.word	0x20000008

08001364 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001364:	b480      	push	{r7}
 8001366:	b085      	sub	sp, #20
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f003 0307 	and.w	r3, r3, #7
 8001372:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001374:	4b0c      	ldr	r3, [pc, #48]	; (80013a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800137a:	68ba      	ldr	r2, [r7, #8]
 800137c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001380:	4013      	ands	r3, r2
 8001382:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800138c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001390:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001394:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001396:	4a04      	ldr	r2, [pc, #16]	; (80013a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	60d3      	str	r3, [r2, #12]
}
 800139c:	bf00      	nop
 800139e:	3714      	adds	r7, #20
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bc80      	pop	{r7}
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	e000ed00 	.word	0xe000ed00

080013ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013b0:	4b04      	ldr	r3, [pc, #16]	; (80013c4 <__NVIC_GetPriorityGrouping+0x18>)
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	0a1b      	lsrs	r3, r3, #8
 80013b6:	f003 0307 	and.w	r3, r3, #7
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	46bd      	mov	sp, r7
 80013be:	bc80      	pop	{r7}
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	e000ed00 	.word	0xe000ed00

080013c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	db0b      	blt.n	80013f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013da:	79fb      	ldrb	r3, [r7, #7]
 80013dc:	f003 021f 	and.w	r2, r3, #31
 80013e0:	4906      	ldr	r1, [pc, #24]	; (80013fc <__NVIC_EnableIRQ+0x34>)
 80013e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e6:	095b      	lsrs	r3, r3, #5
 80013e8:	2001      	movs	r0, #1
 80013ea:	fa00 f202 	lsl.w	r2, r0, r2
 80013ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013f2:	bf00      	nop
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bc80      	pop	{r7}
 80013fa:	4770      	bx	lr
 80013fc:	e000e100 	.word	0xe000e100

08001400 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	6039      	str	r1, [r7, #0]
 800140a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800140c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001410:	2b00      	cmp	r3, #0
 8001412:	db0a      	blt.n	800142a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	b2da      	uxtb	r2, r3
 8001418:	490c      	ldr	r1, [pc, #48]	; (800144c <__NVIC_SetPriority+0x4c>)
 800141a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141e:	0112      	lsls	r2, r2, #4
 8001420:	b2d2      	uxtb	r2, r2
 8001422:	440b      	add	r3, r1
 8001424:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001428:	e00a      	b.n	8001440 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	b2da      	uxtb	r2, r3
 800142e:	4908      	ldr	r1, [pc, #32]	; (8001450 <__NVIC_SetPriority+0x50>)
 8001430:	79fb      	ldrb	r3, [r7, #7]
 8001432:	f003 030f 	and.w	r3, r3, #15
 8001436:	3b04      	subs	r3, #4
 8001438:	0112      	lsls	r2, r2, #4
 800143a:	b2d2      	uxtb	r2, r2
 800143c:	440b      	add	r3, r1
 800143e:	761a      	strb	r2, [r3, #24]
}
 8001440:	bf00      	nop
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	bc80      	pop	{r7}
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	e000e100 	.word	0xe000e100
 8001450:	e000ed00 	.word	0xe000ed00

08001454 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001454:	b480      	push	{r7}
 8001456:	b089      	sub	sp, #36	; 0x24
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	60b9      	str	r1, [r7, #8]
 800145e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	f003 0307 	and.w	r3, r3, #7
 8001466:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	f1c3 0307 	rsb	r3, r3, #7
 800146e:	2b04      	cmp	r3, #4
 8001470:	bf28      	it	cs
 8001472:	2304      	movcs	r3, #4
 8001474:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	3304      	adds	r3, #4
 800147a:	2b06      	cmp	r3, #6
 800147c:	d902      	bls.n	8001484 <NVIC_EncodePriority+0x30>
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	3b03      	subs	r3, #3
 8001482:	e000      	b.n	8001486 <NVIC_EncodePriority+0x32>
 8001484:	2300      	movs	r3, #0
 8001486:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001488:	f04f 32ff 	mov.w	r2, #4294967295
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	43da      	mvns	r2, r3
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	401a      	ands	r2, r3
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800149c:	f04f 31ff 	mov.w	r1, #4294967295
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	fa01 f303 	lsl.w	r3, r1, r3
 80014a6:	43d9      	mvns	r1, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ac:	4313      	orrs	r3, r2
         );
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3724      	adds	r7, #36	; 0x24
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr

080014b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f7ff ff4f 	bl	8001364 <__NVIC_SetPriorityGrouping>
}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b086      	sub	sp, #24
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	4603      	mov	r3, r0
 80014d6:	60b9      	str	r1, [r7, #8]
 80014d8:	607a      	str	r2, [r7, #4]
 80014da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014dc:	2300      	movs	r3, #0
 80014de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014e0:	f7ff ff64 	bl	80013ac <__NVIC_GetPriorityGrouping>
 80014e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	68b9      	ldr	r1, [r7, #8]
 80014ea:	6978      	ldr	r0, [r7, #20]
 80014ec:	f7ff ffb2 	bl	8001454 <NVIC_EncodePriority>
 80014f0:	4602      	mov	r2, r0
 80014f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014f6:	4611      	mov	r1, r2
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff ff81 	bl	8001400 <__NVIC_SetPriority>
}
 80014fe:	bf00      	nop
 8001500:	3718      	adds	r7, #24
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b082      	sub	sp, #8
 800150a:	af00      	add	r7, sp, #0
 800150c:	4603      	mov	r3, r0
 800150e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff ff57 	bl	80013c8 <__NVIC_EnableIRQ>
}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
	...

08001524 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800152c:	2300      	movs	r3, #0
 800152e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001530:	f7ff feec 	bl	800130c <HAL_GetTick>
 8001534:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d101      	bne.n	8001540 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e099      	b.n	8001674 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2200      	movs	r2, #0
 8001544:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2202      	movs	r2, #2
 800154c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f022 0201 	bic.w	r2, r2, #1
 800155e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001560:	e00f      	b.n	8001582 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001562:	f7ff fed3 	bl	800130c <HAL_GetTick>
 8001566:	4602      	mov	r2, r0
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	2b05      	cmp	r3, #5
 800156e:	d908      	bls.n	8001582 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2220      	movs	r2, #32
 8001574:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2203      	movs	r2, #3
 800157a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e078      	b.n	8001674 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 0301 	and.w	r3, r3, #1
 800158c:	2b00      	cmp	r3, #0
 800158e:	d1e8      	bne.n	8001562 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001598:	697a      	ldr	r2, [r7, #20]
 800159a:	4b38      	ldr	r3, [pc, #224]	; (800167c <HAL_DMA_Init+0x158>)
 800159c:	4013      	ands	r3, r2
 800159e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	685a      	ldr	r2, [r3, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	691b      	ldr	r3, [r3, #16]
 80015b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6a1b      	ldr	r3, [r3, #32]
 80015cc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015ce:	697a      	ldr	r2, [r7, #20]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d8:	2b04      	cmp	r3, #4
 80015da:	d107      	bne.n	80015ec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e4:	4313      	orrs	r3, r2
 80015e6:	697a      	ldr	r2, [r7, #20]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	697a      	ldr	r2, [r7, #20]
 80015f2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	695b      	ldr	r3, [r3, #20]
 80015fa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	f023 0307 	bic.w	r3, r3, #7
 8001602:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001608:	697a      	ldr	r2, [r7, #20]
 800160a:	4313      	orrs	r3, r2
 800160c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001612:	2b04      	cmp	r3, #4
 8001614:	d117      	bne.n	8001646 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800161a:	697a      	ldr	r2, [r7, #20]
 800161c:	4313      	orrs	r3, r2
 800161e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001624:	2b00      	cmp	r3, #0
 8001626:	d00e      	beq.n	8001646 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f000 fa09 	bl	8001a40 <DMA_CheckFifoParam>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d008      	beq.n	8001646 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2240      	movs	r2, #64	; 0x40
 8001638:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2201      	movs	r2, #1
 800163e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001642:	2301      	movs	r3, #1
 8001644:	e016      	b.n	8001674 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	697a      	ldr	r2, [r7, #20]
 800164c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f000 f9c2 	bl	80019d8 <DMA_CalcBaseAndBitshift>
 8001654:	4603      	mov	r3, r0
 8001656:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800165c:	223f      	movs	r2, #63	; 0x3f
 800165e:	409a      	lsls	r2, r3
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2200      	movs	r2, #0
 8001668:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2201      	movs	r2, #1
 800166e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001672:	2300      	movs	r3, #0
}
 8001674:	4618      	mov	r0, r3
 8001676:	3718      	adds	r7, #24
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	f010803f 	.word	0xf010803f

08001680 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800168e:	b2db      	uxtb	r3, r3
 8001690:	2b02      	cmp	r3, #2
 8001692:	d004      	beq.n	800169e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2280      	movs	r2, #128	; 0x80
 8001698:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e00c      	b.n	80016b8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2205      	movs	r2, #5
 80016a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f022 0201 	bic.w	r2, r2, #1
 80016b4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80016b6:	2300      	movs	r3, #0
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	bc80      	pop	{r7}
 80016c0:	4770      	bx	lr
	...

080016c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80016cc:	2300      	movs	r3, #0
 80016ce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80016d0:	4b92      	ldr	r3, [pc, #584]	; (800191c <HAL_DMA_IRQHandler+0x258>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a92      	ldr	r2, [pc, #584]	; (8001920 <HAL_DMA_IRQHandler+0x25c>)
 80016d6:	fba2 2303 	umull	r2, r3, r2, r3
 80016da:	0a9b      	lsrs	r3, r3, #10
 80016dc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016e2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ee:	2208      	movs	r2, #8
 80016f0:	409a      	lsls	r2, r3
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	4013      	ands	r3, r2
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d01a      	beq.n	8001730 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0304 	and.w	r3, r3, #4
 8001704:	2b00      	cmp	r3, #0
 8001706:	d013      	beq.n	8001730 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f022 0204 	bic.w	r2, r2, #4
 8001716:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800171c:	2208      	movs	r2, #8
 800171e:	409a      	lsls	r2, r3
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001728:	f043 0201 	orr.w	r2, r3, #1
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001734:	2201      	movs	r2, #1
 8001736:	409a      	lsls	r2, r3
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	4013      	ands	r3, r2
 800173c:	2b00      	cmp	r3, #0
 800173e:	d012      	beq.n	8001766 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	695b      	ldr	r3, [r3, #20]
 8001746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800174a:	2b00      	cmp	r3, #0
 800174c:	d00b      	beq.n	8001766 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001752:	2201      	movs	r2, #1
 8001754:	409a      	lsls	r2, r3
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800175e:	f043 0202 	orr.w	r2, r3, #2
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800176a:	2204      	movs	r2, #4
 800176c:	409a      	lsls	r2, r3
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	4013      	ands	r3, r2
 8001772:	2b00      	cmp	r3, #0
 8001774:	d012      	beq.n	800179c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0302 	and.w	r3, r3, #2
 8001780:	2b00      	cmp	r3, #0
 8001782:	d00b      	beq.n	800179c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001788:	2204      	movs	r2, #4
 800178a:	409a      	lsls	r2, r3
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001794:	f043 0204 	orr.w	r2, r3, #4
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017a0:	2210      	movs	r2, #16
 80017a2:	409a      	lsls	r2, r3
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	4013      	ands	r3, r2
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d043      	beq.n	8001834 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0308 	and.w	r3, r3, #8
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d03c      	beq.n	8001834 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017be:	2210      	movs	r2, #16
 80017c0:	409a      	lsls	r2, r3
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d018      	beq.n	8001806 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d108      	bne.n	80017f4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d024      	beq.n	8001834 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	4798      	blx	r3
 80017f2:	e01f      	b.n	8001834 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d01b      	beq.n	8001834 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	4798      	blx	r3
 8001804:	e016      	b.n	8001834 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001810:	2b00      	cmp	r3, #0
 8001812:	d107      	bne.n	8001824 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f022 0208 	bic.w	r2, r2, #8
 8001822:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001828:	2b00      	cmp	r3, #0
 800182a:	d003      	beq.n	8001834 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001838:	2220      	movs	r2, #32
 800183a:	409a      	lsls	r2, r3
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	4013      	ands	r3, r2
 8001840:	2b00      	cmp	r3, #0
 8001842:	f000 808e 	beq.w	8001962 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0310 	and.w	r3, r3, #16
 8001850:	2b00      	cmp	r3, #0
 8001852:	f000 8086 	beq.w	8001962 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800185a:	2220      	movs	r2, #32
 800185c:	409a      	lsls	r2, r3
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001868:	b2db      	uxtb	r3, r3
 800186a:	2b05      	cmp	r3, #5
 800186c:	d136      	bne.n	80018dc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f022 0216 	bic.w	r2, r2, #22
 800187c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	695a      	ldr	r2, [r3, #20]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800188c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001892:	2b00      	cmp	r3, #0
 8001894:	d103      	bne.n	800189e <HAL_DMA_IRQHandler+0x1da>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800189a:	2b00      	cmp	r3, #0
 800189c:	d007      	beq.n	80018ae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f022 0208 	bic.w	r2, r2, #8
 80018ac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018b2:	223f      	movs	r2, #63	; 0x3f
 80018b4:	409a      	lsls	r2, r3
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2200      	movs	r2, #0
 80018be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2201      	movs	r2, #1
 80018c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d07d      	beq.n	80019ce <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	4798      	blx	r3
        }
        return;
 80018da:	e078      	b.n	80019ce <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d01c      	beq.n	8001924 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d108      	bne.n	800190a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d030      	beq.n	8001962 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	4798      	blx	r3
 8001908:	e02b      	b.n	8001962 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800190e:	2b00      	cmp	r3, #0
 8001910:	d027      	beq.n	8001962 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	4798      	blx	r3
 800191a:	e022      	b.n	8001962 <HAL_DMA_IRQHandler+0x29e>
 800191c:	20000000 	.word	0x20000000
 8001920:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800192e:	2b00      	cmp	r3, #0
 8001930:	d10f      	bne.n	8001952 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f022 0210 	bic.w	r2, r2, #16
 8001940:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2201      	movs	r2, #1
 800194e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001956:	2b00      	cmp	r3, #0
 8001958:	d003      	beq.n	8001962 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001966:	2b00      	cmp	r3, #0
 8001968:	d032      	beq.n	80019d0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	2b00      	cmp	r3, #0
 8001974:	d022      	beq.n	80019bc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2205      	movs	r2, #5
 800197a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f022 0201 	bic.w	r2, r2, #1
 800198c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	3301      	adds	r3, #1
 8001992:	60bb      	str	r3, [r7, #8]
 8001994:	697a      	ldr	r2, [r7, #20]
 8001996:	429a      	cmp	r2, r3
 8001998:	d307      	bcc.n	80019aa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0301 	and.w	r3, r3, #1
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d1f2      	bne.n	800198e <HAL_DMA_IRQHandler+0x2ca>
 80019a8:	e000      	b.n	80019ac <HAL_DMA_IRQHandler+0x2e8>
          break;
 80019aa:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2200      	movs	r2, #0
 80019b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2201      	movs	r2, #1
 80019b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d005      	beq.n	80019d0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	4798      	blx	r3
 80019cc:	e000      	b.n	80019d0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80019ce:	bf00      	nop
    }
  }
}
 80019d0:	3718      	adds	r7, #24
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop

080019d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80019d8:	b480      	push	{r7}
 80019da:	b085      	sub	sp, #20
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	3b10      	subs	r3, #16
 80019e8:	4a13      	ldr	r2, [pc, #76]	; (8001a38 <DMA_CalcBaseAndBitshift+0x60>)
 80019ea:	fba2 2303 	umull	r2, r3, r2, r3
 80019ee:	091b      	lsrs	r3, r3, #4
 80019f0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80019f2:	4a12      	ldr	r2, [pc, #72]	; (8001a3c <DMA_CalcBaseAndBitshift+0x64>)
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	4413      	add	r3, r2
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	461a      	mov	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2b03      	cmp	r3, #3
 8001a04:	d909      	bls.n	8001a1a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001a0e:	f023 0303 	bic.w	r3, r3, #3
 8001a12:	1d1a      	adds	r2, r3, #4
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	659a      	str	r2, [r3, #88]	; 0x58
 8001a18:	e007      	b.n	8001a2a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001a22:	f023 0303 	bic.w	r3, r3, #3
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3714      	adds	r7, #20
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bc80      	pop	{r7}
 8001a36:	4770      	bx	lr
 8001a38:	aaaaaaab 	.word	0xaaaaaaab
 8001a3c:	0800b200 	.word	0x0800b200

08001a40 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a50:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	699b      	ldr	r3, [r3, #24]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d11f      	bne.n	8001a9a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	2b03      	cmp	r3, #3
 8001a5e:	d855      	bhi.n	8001b0c <DMA_CheckFifoParam+0xcc>
 8001a60:	a201      	add	r2, pc, #4	; (adr r2, 8001a68 <DMA_CheckFifoParam+0x28>)
 8001a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a66:	bf00      	nop
 8001a68:	08001a79 	.word	0x08001a79
 8001a6c:	08001a8b 	.word	0x08001a8b
 8001a70:	08001a79 	.word	0x08001a79
 8001a74:	08001b0d 	.word	0x08001b0d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d045      	beq.n	8001b10 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a88:	e042      	b.n	8001b10 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a8e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a92:	d13f      	bne.n	8001b14 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a98:	e03c      	b.n	8001b14 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	699b      	ldr	r3, [r3, #24]
 8001a9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001aa2:	d121      	bne.n	8001ae8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	2b03      	cmp	r3, #3
 8001aa8:	d836      	bhi.n	8001b18 <DMA_CheckFifoParam+0xd8>
 8001aaa:	a201      	add	r2, pc, #4	; (adr r2, 8001ab0 <DMA_CheckFifoParam+0x70>)
 8001aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ab0:	08001ac1 	.word	0x08001ac1
 8001ab4:	08001ac7 	.word	0x08001ac7
 8001ab8:	08001ac1 	.word	0x08001ac1
 8001abc:	08001ad9 	.word	0x08001ad9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	73fb      	strb	r3, [r7, #15]
      break;
 8001ac4:	e02f      	b.n	8001b26 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d024      	beq.n	8001b1c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ad6:	e021      	b.n	8001b1c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001adc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ae0:	d11e      	bne.n	8001b20 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001ae6:	e01b      	b.n	8001b20 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d902      	bls.n	8001af4 <DMA_CheckFifoParam+0xb4>
 8001aee:	2b03      	cmp	r3, #3
 8001af0:	d003      	beq.n	8001afa <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001af2:	e018      	b.n	8001b26 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	73fb      	strb	r3, [r7, #15]
      break;
 8001af8:	e015      	b.n	8001b26 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001afe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d00e      	beq.n	8001b24 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	73fb      	strb	r3, [r7, #15]
      break;
 8001b0a:	e00b      	b.n	8001b24 <DMA_CheckFifoParam+0xe4>
      break;
 8001b0c:	bf00      	nop
 8001b0e:	e00a      	b.n	8001b26 <DMA_CheckFifoParam+0xe6>
      break;
 8001b10:	bf00      	nop
 8001b12:	e008      	b.n	8001b26 <DMA_CheckFifoParam+0xe6>
      break;
 8001b14:	bf00      	nop
 8001b16:	e006      	b.n	8001b26 <DMA_CheckFifoParam+0xe6>
      break;
 8001b18:	bf00      	nop
 8001b1a:	e004      	b.n	8001b26 <DMA_CheckFifoParam+0xe6>
      break;
 8001b1c:	bf00      	nop
 8001b1e:	e002      	b.n	8001b26 <DMA_CheckFifoParam+0xe6>
      break;   
 8001b20:	bf00      	nop
 8001b22:	e000      	b.n	8001b26 <DMA_CheckFifoParam+0xe6>
      break;
 8001b24:	bf00      	nop
    }
  } 
  
  return status; 
 8001b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3714      	adds	r7, #20
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bc80      	pop	{r7}
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop

08001b34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b087      	sub	sp, #28
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b42:	e16f      	b.n	8001e24 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	2101      	movs	r1, #1
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b50:	4013      	ands	r3, r2
 8001b52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	f000 8161 	beq.w	8001e1e <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d00b      	beq.n	8001b7c <HAL_GPIO_Init+0x48>
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d007      	beq.n	8001b7c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b70:	2b11      	cmp	r3, #17
 8001b72:	d003      	beq.n	8001b7c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	2b12      	cmp	r3, #18
 8001b7a:	d130      	bne.n	8001bde <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	2203      	movs	r2, #3
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	4013      	ands	r3, r2
 8001b92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	68da      	ldr	r2, [r3, #12]
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	693a      	ldr	r2, [r7, #16]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	693a      	ldr	r2, [r7, #16]
 8001baa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bba:	43db      	mvns	r3, r3
 8001bbc:	693a      	ldr	r2, [r7, #16]
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	091b      	lsrs	r3, r3, #4
 8001bc8:	f003 0201 	and.w	r2, r3, #1
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	2203      	movs	r2, #3
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	693a      	ldr	r2, [r7, #16]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	689a      	ldr	r2, [r3, #8]
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	60da      	str	r2, [r3, #12]

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d003      	beq.n	8001c1e <HAL_GPIO_Init+0xea>
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	2b12      	cmp	r3, #18
 8001c1c:	d123      	bne.n	8001c66 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	08da      	lsrs	r2, r3, #3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	3208      	adds	r2, #8
 8001c26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	f003 0307 	and.w	r3, r3, #7
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	220f      	movs	r2, #15
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	693a      	ldr	r2, [r7, #16]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	691a      	ldr	r2, [r3, #16]
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	f003 0307 	and.w	r3, r3, #7
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	08da      	lsrs	r2, r3, #3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	3208      	adds	r2, #8
 8001c60:	6939      	ldr	r1, [r7, #16]
 8001c62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	2203      	movs	r2, #3
 8001c72:	fa02 f303 	lsl.w	r3, r2, r3
 8001c76:	43db      	mvns	r3, r3
 8001c78:	693a      	ldr	r2, [r7, #16]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f003 0203 	and.w	r2, r3, #3
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	693a      	ldr	r2, [r7, #16]
 8001c98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	f000 80bb 	beq.w	8001e1e <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ca8:	2300      	movs	r3, #0
 8001caa:	60bb      	str	r3, [r7, #8]
 8001cac:	4b64      	ldr	r3, [pc, #400]	; (8001e40 <HAL_GPIO_Init+0x30c>)
 8001cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb0:	4a63      	ldr	r2, [pc, #396]	; (8001e40 <HAL_GPIO_Init+0x30c>)
 8001cb2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cb6:	6453      	str	r3, [r2, #68]	; 0x44
 8001cb8:	4b61      	ldr	r3, [pc, #388]	; (8001e40 <HAL_GPIO_Init+0x30c>)
 8001cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cc0:	60bb      	str	r3, [r7, #8]
 8001cc2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001cc4:	4a5f      	ldr	r2, [pc, #380]	; (8001e44 <HAL_GPIO_Init+0x310>)
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	089b      	lsrs	r3, r3, #2
 8001cca:	3302      	adds	r3, #2
 8001ccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	f003 0303 	and.w	r3, r3, #3
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	220f      	movs	r2, #15
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	4a57      	ldr	r2, [pc, #348]	; (8001e48 <HAL_GPIO_Init+0x314>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d031      	beq.n	8001d54 <HAL_GPIO_Init+0x220>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	4a56      	ldr	r2, [pc, #344]	; (8001e4c <HAL_GPIO_Init+0x318>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d02b      	beq.n	8001d50 <HAL_GPIO_Init+0x21c>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4a55      	ldr	r2, [pc, #340]	; (8001e50 <HAL_GPIO_Init+0x31c>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d025      	beq.n	8001d4c <HAL_GPIO_Init+0x218>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	4a54      	ldr	r2, [pc, #336]	; (8001e54 <HAL_GPIO_Init+0x320>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d01f      	beq.n	8001d48 <HAL_GPIO_Init+0x214>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	4a53      	ldr	r2, [pc, #332]	; (8001e58 <HAL_GPIO_Init+0x324>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d019      	beq.n	8001d44 <HAL_GPIO_Init+0x210>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	4a52      	ldr	r2, [pc, #328]	; (8001e5c <HAL_GPIO_Init+0x328>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d013      	beq.n	8001d40 <HAL_GPIO_Init+0x20c>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4a51      	ldr	r2, [pc, #324]	; (8001e60 <HAL_GPIO_Init+0x32c>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d00d      	beq.n	8001d3c <HAL_GPIO_Init+0x208>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	4a50      	ldr	r2, [pc, #320]	; (8001e64 <HAL_GPIO_Init+0x330>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d007      	beq.n	8001d38 <HAL_GPIO_Init+0x204>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	4a4f      	ldr	r2, [pc, #316]	; (8001e68 <HAL_GPIO_Init+0x334>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d101      	bne.n	8001d34 <HAL_GPIO_Init+0x200>
 8001d30:	2308      	movs	r3, #8
 8001d32:	e010      	b.n	8001d56 <HAL_GPIO_Init+0x222>
 8001d34:	2309      	movs	r3, #9
 8001d36:	e00e      	b.n	8001d56 <HAL_GPIO_Init+0x222>
 8001d38:	2307      	movs	r3, #7
 8001d3a:	e00c      	b.n	8001d56 <HAL_GPIO_Init+0x222>
 8001d3c:	2306      	movs	r3, #6
 8001d3e:	e00a      	b.n	8001d56 <HAL_GPIO_Init+0x222>
 8001d40:	2305      	movs	r3, #5
 8001d42:	e008      	b.n	8001d56 <HAL_GPIO_Init+0x222>
 8001d44:	2304      	movs	r3, #4
 8001d46:	e006      	b.n	8001d56 <HAL_GPIO_Init+0x222>
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e004      	b.n	8001d56 <HAL_GPIO_Init+0x222>
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	e002      	b.n	8001d56 <HAL_GPIO_Init+0x222>
 8001d50:	2301      	movs	r3, #1
 8001d52:	e000      	b.n	8001d56 <HAL_GPIO_Init+0x222>
 8001d54:	2300      	movs	r3, #0
 8001d56:	697a      	ldr	r2, [r7, #20]
 8001d58:	f002 0203 	and.w	r2, r2, #3
 8001d5c:	0092      	lsls	r2, r2, #2
 8001d5e:	4093      	lsls	r3, r2
 8001d60:	461a      	mov	r2, r3
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d68:	4936      	ldr	r1, [pc, #216]	; (8001e44 <HAL_GPIO_Init+0x310>)
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	089b      	lsrs	r3, r3, #2
 8001d6e:	3302      	adds	r3, #2
 8001d70:	693a      	ldr	r2, [r7, #16]
 8001d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d76:	4b3d      	ldr	r3, [pc, #244]	; (8001e6c <HAL_GPIO_Init+0x338>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	43db      	mvns	r3, r3
 8001d80:	693a      	ldr	r2, [r7, #16]
 8001d82:	4013      	ands	r3, r2
 8001d84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d003      	beq.n	8001d9a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d9a:	4a34      	ldr	r2, [pc, #208]	; (8001e6c <HAL_GPIO_Init+0x338>)
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001da0:	4b32      	ldr	r3, [pc, #200]	; (8001e6c <HAL_GPIO_Init+0x338>)
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	43db      	mvns	r3, r3
 8001daa:	693a      	ldr	r2, [r7, #16]
 8001dac:	4013      	ands	r3, r2
 8001dae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d003      	beq.n	8001dc4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001dbc:	693a      	ldr	r2, [r7, #16]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001dc4:	4a29      	ldr	r2, [pc, #164]	; (8001e6c <HAL_GPIO_Init+0x338>)
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dca:	4b28      	ldr	r3, [pc, #160]	; (8001e6c <HAL_GPIO_Init+0x338>)
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	43db      	mvns	r3, r3
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d003      	beq.n	8001dee <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001dee:	4a1f      	ldr	r2, [pc, #124]	; (8001e6c <HAL_GPIO_Init+0x338>)
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001df4:	4b1d      	ldr	r3, [pc, #116]	; (8001e6c <HAL_GPIO_Init+0x338>)
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	4013      	ands	r3, r2
 8001e02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d003      	beq.n	8001e18 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001e18:	4a14      	ldr	r2, [pc, #80]	; (8001e6c <HAL_GPIO_Init+0x338>)
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	3301      	adds	r3, #1
 8001e22:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	f47f ae88 	bne.w	8001b44 <HAL_GPIO_Init+0x10>
  }
}
 8001e34:	bf00      	nop
 8001e36:	371c      	adds	r7, #28
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bc80      	pop	{r7}
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	40023800 	.word	0x40023800
 8001e44:	40013800 	.word	0x40013800
 8001e48:	40020000 	.word	0x40020000
 8001e4c:	40020400 	.word	0x40020400
 8001e50:	40020800 	.word	0x40020800
 8001e54:	40020c00 	.word	0x40020c00
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	40021400 	.word	0x40021400
 8001e60:	40021800 	.word	0x40021800
 8001e64:	40021c00 	.word	0x40021c00
 8001e68:	40022000 	.word	0x40022000
 8001e6c:	40013c00 	.word	0x40013c00

08001e70 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b085      	sub	sp, #20
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	460b      	mov	r3, r1
 8001e7a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	691a      	ldr	r2, [r3, #16]
 8001e80:	887b      	ldrh	r3, [r7, #2]
 8001e82:	4013      	ands	r3, r2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d002      	beq.n	8001e8e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	73fb      	strb	r3, [r7, #15]
 8001e8c:	e001      	b.n	8001e92 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3714      	adds	r7, #20
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bc80      	pop	{r7}
 8001e9c:	4770      	bx	lr

08001e9e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	b083      	sub	sp, #12
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	807b      	strh	r3, [r7, #2]
 8001eaa:	4613      	mov	r3, r2
 8001eac:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001eae:	787b      	ldrb	r3, [r7, #1]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d003      	beq.n	8001ebc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001eb4:	887a      	ldrh	r2, [r7, #2]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001eba:	e003      	b.n	8001ec4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ebc:	887b      	ldrh	r3, [r7, #2]
 8001ebe:	041a      	lsls	r2, r3, #16
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	619a      	str	r2, [r3, #24]
}
 8001ec4:	bf00      	nop
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bc80      	pop	{r7}
 8001ecc:	4770      	bx	lr
	...

08001ed0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001eda:	4b08      	ldr	r3, [pc, #32]	; (8001efc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001edc:	695a      	ldr	r2, [r3, #20]
 8001ede:	88fb      	ldrh	r3, [r7, #6]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d006      	beq.n	8001ef4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ee6:	4a05      	ldr	r2, [pc, #20]	; (8001efc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ee8:	88fb      	ldrh	r3, [r7, #6]
 8001eea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001eec:	88fb      	ldrh	r3, [r7, #6]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7fe fb06 	bl	8000500 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ef4:	bf00      	nop
 8001ef6:	3708      	adds	r7, #8
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	40013c00 	.word	0x40013c00

08001f00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b08a      	sub	sp, #40	; 0x28
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d101      	bne.n	8001f12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e237      	b.n	8002382 <HAL_RCC_OscConfig+0x482>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d050      	beq.n	8001fc0 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f1e:	4ba3      	ldr	r3, [pc, #652]	; (80021ac <HAL_RCC_OscConfig+0x2ac>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f003 030c 	and.w	r3, r3, #12
 8001f26:	2b04      	cmp	r3, #4
 8001f28:	d00c      	beq.n	8001f44 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f2a:	4ba0      	ldr	r3, [pc, #640]	; (80021ac <HAL_RCC_OscConfig+0x2ac>)
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f32:	2b08      	cmp	r3, #8
 8001f34:	d112      	bne.n	8001f5c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f36:	4b9d      	ldr	r3, [pc, #628]	; (80021ac <HAL_RCC_OscConfig+0x2ac>)
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f42:	d10b      	bne.n	8001f5c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f44:	4b99      	ldr	r3, [pc, #612]	; (80021ac <HAL_RCC_OscConfig+0x2ac>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d036      	beq.n	8001fbe <HAL_RCC_OscConfig+0xbe>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d132      	bne.n	8001fbe <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e212      	b.n	8002382 <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685a      	ldr	r2, [r3, #4]
 8001f60:	4b93      	ldr	r3, [pc, #588]	; (80021b0 <HAL_RCC_OscConfig+0x2b0>)
 8001f62:	b2d2      	uxtb	r2, r2
 8001f64:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d013      	beq.n	8001f96 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f6e:	f7ff f9cd 	bl	800130c <HAL_GetTick>
 8001f72:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f74:	e008      	b.n	8001f88 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f76:	f7ff f9c9 	bl	800130c <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	6a3b      	ldr	r3, [r7, #32]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	2b64      	cmp	r3, #100	; 0x64
 8001f82:	d901      	bls.n	8001f88 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	e1fc      	b.n	8002382 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f88:	4b88      	ldr	r3, [pc, #544]	; (80021ac <HAL_RCC_OscConfig+0x2ac>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d0f0      	beq.n	8001f76 <HAL_RCC_OscConfig+0x76>
 8001f94:	e014      	b.n	8001fc0 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f96:	f7ff f9b9 	bl	800130c <HAL_GetTick>
 8001f9a:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f9c:	e008      	b.n	8001fb0 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f9e:	f7ff f9b5 	bl	800130c <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	6a3b      	ldr	r3, [r7, #32]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	2b64      	cmp	r3, #100	; 0x64
 8001faa:	d901      	bls.n	8001fb0 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	e1e8      	b.n	8002382 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fb0:	4b7e      	ldr	r3, [pc, #504]	; (80021ac <HAL_RCC_OscConfig+0x2ac>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d1f0      	bne.n	8001f9e <HAL_RCC_OscConfig+0x9e>
 8001fbc:	e000      	b.n	8001fc0 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fbe:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0302 	and.w	r3, r3, #2
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d077      	beq.n	80020bc <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fcc:	4b77      	ldr	r3, [pc, #476]	; (80021ac <HAL_RCC_OscConfig+0x2ac>)
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f003 030c 	and.w	r3, r3, #12
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d00b      	beq.n	8001ff0 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fd8:	4b74      	ldr	r3, [pc, #464]	; (80021ac <HAL_RCC_OscConfig+0x2ac>)
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fe0:	2b08      	cmp	r3, #8
 8001fe2:	d126      	bne.n	8002032 <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fe4:	4b71      	ldr	r3, [pc, #452]	; (80021ac <HAL_RCC_OscConfig+0x2ac>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d120      	bne.n	8002032 <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ff0:	4b6e      	ldr	r3, [pc, #440]	; (80021ac <HAL_RCC_OscConfig+0x2ac>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0302 	and.w	r3, r3, #2
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d005      	beq.n	8002008 <HAL_RCC_OscConfig+0x108>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	2b01      	cmp	r3, #1
 8002002:	d001      	beq.n	8002008 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e1bc      	b.n	8002382 <HAL_RCC_OscConfig+0x482>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002008:	4b68      	ldr	r3, [pc, #416]	; (80021ac <HAL_RCC_OscConfig+0x2ac>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	691b      	ldr	r3, [r3, #16]
 8002014:	21f8      	movs	r1, #248	; 0xf8
 8002016:	61b9      	str	r1, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002018:	69b9      	ldr	r1, [r7, #24]
 800201a:	fa91 f1a1 	rbit	r1, r1
 800201e:	6179      	str	r1, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002020:	6979      	ldr	r1, [r7, #20]
 8002022:	fab1 f181 	clz	r1, r1
 8002026:	b2c9      	uxtb	r1, r1
 8002028:	408b      	lsls	r3, r1
 800202a:	4960      	ldr	r1, [pc, #384]	; (80021ac <HAL_RCC_OscConfig+0x2ac>)
 800202c:	4313      	orrs	r3, r2
 800202e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002030:	e044      	b.n	80020bc <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d02a      	beq.n	8002090 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800203a:	4b5e      	ldr	r3, [pc, #376]	; (80021b4 <HAL_RCC_OscConfig+0x2b4>)
 800203c:	2201      	movs	r2, #1
 800203e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002040:	f7ff f964 	bl	800130c <HAL_GetTick>
 8002044:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002046:	e008      	b.n	800205a <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002048:	f7ff f960 	bl	800130c <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	6a3b      	ldr	r3, [r7, #32]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e193      	b.n	8002382 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800205a:	4b54      	ldr	r3, [pc, #336]	; (80021ac <HAL_RCC_OscConfig+0x2ac>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d0f0      	beq.n	8002048 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002066:	4b51      	ldr	r3, [pc, #324]	; (80021ac <HAL_RCC_OscConfig+0x2ac>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	21f8      	movs	r1, #248	; 0xf8
 8002074:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002076:	6939      	ldr	r1, [r7, #16]
 8002078:	fa91 f1a1 	rbit	r1, r1
 800207c:	60f9      	str	r1, [r7, #12]
  return result;
 800207e:	68f9      	ldr	r1, [r7, #12]
 8002080:	fab1 f181 	clz	r1, r1
 8002084:	b2c9      	uxtb	r1, r1
 8002086:	408b      	lsls	r3, r1
 8002088:	4948      	ldr	r1, [pc, #288]	; (80021ac <HAL_RCC_OscConfig+0x2ac>)
 800208a:	4313      	orrs	r3, r2
 800208c:	600b      	str	r3, [r1, #0]
 800208e:	e015      	b.n	80020bc <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002090:	4b48      	ldr	r3, [pc, #288]	; (80021b4 <HAL_RCC_OscConfig+0x2b4>)
 8002092:	2200      	movs	r2, #0
 8002094:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002096:	f7ff f939 	bl	800130c <HAL_GetTick>
 800209a:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800209c:	e008      	b.n	80020b0 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800209e:	f7ff f935 	bl	800130c <HAL_GetTick>
 80020a2:	4602      	mov	r2, r0
 80020a4:	6a3b      	ldr	r3, [r7, #32]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d901      	bls.n	80020b0 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80020ac:	2303      	movs	r3, #3
 80020ae:	e168      	b.n	8002382 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020b0:	4b3e      	ldr	r3, [pc, #248]	; (80021ac <HAL_RCC_OscConfig+0x2ac>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0302 	and.w	r3, r3, #2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d1f0      	bne.n	800209e <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0308 	and.w	r3, r3, #8
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d030      	beq.n	800212a <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	695b      	ldr	r3, [r3, #20]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d016      	beq.n	80020fe <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020d0:	4b39      	ldr	r3, [pc, #228]	; (80021b8 <HAL_RCC_OscConfig+0x2b8>)
 80020d2:	2201      	movs	r2, #1
 80020d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020d6:	f7ff f919 	bl	800130c <HAL_GetTick>
 80020da:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020dc:	e008      	b.n	80020f0 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020de:	f7ff f915 	bl	800130c <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	6a3b      	ldr	r3, [r7, #32]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d901      	bls.n	80020f0 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e148      	b.n	8002382 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020f0:	4b2e      	ldr	r3, [pc, #184]	; (80021ac <HAL_RCC_OscConfig+0x2ac>)
 80020f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020f4:	f003 0302 	and.w	r3, r3, #2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d0f0      	beq.n	80020de <HAL_RCC_OscConfig+0x1de>
 80020fc:	e015      	b.n	800212a <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020fe:	4b2e      	ldr	r3, [pc, #184]	; (80021b8 <HAL_RCC_OscConfig+0x2b8>)
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002104:	f7ff f902 	bl	800130c <HAL_GetTick>
 8002108:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800210a:	e008      	b.n	800211e <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800210c:	f7ff f8fe 	bl	800130c <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	6a3b      	ldr	r3, [r7, #32]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b02      	cmp	r3, #2
 8002118:	d901      	bls.n	800211e <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e131      	b.n	8002382 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800211e:	4b23      	ldr	r3, [pc, #140]	; (80021ac <HAL_RCC_OscConfig+0x2ac>)
 8002120:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1f0      	bne.n	800210c <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0304 	and.w	r3, r3, #4
 8002132:	2b00      	cmp	r3, #0
 8002134:	f000 8088 	beq.w	8002248 <HAL_RCC_OscConfig+0x348>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002138:	2300      	movs	r3, #0
 800213a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800213e:	4b1b      	ldr	r3, [pc, #108]	; (80021ac <HAL_RCC_OscConfig+0x2ac>)
 8002140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d110      	bne.n	800216c <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800214a:	2300      	movs	r3, #0
 800214c:	60bb      	str	r3, [r7, #8]
 800214e:	4b17      	ldr	r3, [pc, #92]	; (80021ac <HAL_RCC_OscConfig+0x2ac>)
 8002150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002152:	4a16      	ldr	r2, [pc, #88]	; (80021ac <HAL_RCC_OscConfig+0x2ac>)
 8002154:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002158:	6413      	str	r3, [r2, #64]	; 0x40
 800215a:	4b14      	ldr	r3, [pc, #80]	; (80021ac <HAL_RCC_OscConfig+0x2ac>)
 800215c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002162:	60bb      	str	r3, [r7, #8]
 8002164:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002166:	2301      	movs	r3, #1
 8002168:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800216c:	4b13      	ldr	r3, [pc, #76]	; (80021bc <HAL_RCC_OscConfig+0x2bc>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a12      	ldr	r2, [pc, #72]	; (80021bc <HAL_RCC_OscConfig+0x2bc>)
 8002172:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002176:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002178:	4b10      	ldr	r3, [pc, #64]	; (80021bc <HAL_RCC_OscConfig+0x2bc>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002180:	2b00      	cmp	r3, #0
 8002182:	d123      	bne.n	80021cc <HAL_RCC_OscConfig+0x2cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002184:	4b0d      	ldr	r3, [pc, #52]	; (80021bc <HAL_RCC_OscConfig+0x2bc>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a0c      	ldr	r2, [pc, #48]	; (80021bc <HAL_RCC_OscConfig+0x2bc>)
 800218a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800218e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002190:	f7ff f8bc 	bl	800130c <HAL_GetTick>
 8002194:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002196:	e013      	b.n	80021c0 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002198:	f7ff f8b8 	bl	800130c <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	6a3b      	ldr	r3, [r7, #32]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d90c      	bls.n	80021c0 <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e0eb      	b.n	8002382 <HAL_RCC_OscConfig+0x482>
 80021aa:	bf00      	nop
 80021ac:	40023800 	.word	0x40023800
 80021b0:	40023802 	.word	0x40023802
 80021b4:	42470000 	.word	0x42470000
 80021b8:	42470e80 	.word	0x42470e80
 80021bc:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021c0:	4b72      	ldr	r3, [pc, #456]	; (800238c <HAL_RCC_OscConfig+0x48c>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d0e5      	beq.n	8002198 <HAL_RCC_OscConfig+0x298>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689a      	ldr	r2, [r3, #8]
 80021d0:	4b6f      	ldr	r3, [pc, #444]	; (8002390 <HAL_RCC_OscConfig+0x490>)
 80021d2:	b2d2      	uxtb	r2, r2
 80021d4:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d015      	beq.n	800220a <HAL_RCC_OscConfig+0x30a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021de:	f7ff f895 	bl	800130c <HAL_GetTick>
 80021e2:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021e4:	e00a      	b.n	80021fc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021e6:	f7ff f891 	bl	800130c <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	6a3b      	ldr	r3, [r7, #32]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d901      	bls.n	80021fc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e0c2      	b.n	8002382 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021fc:	4b65      	ldr	r3, [pc, #404]	; (8002394 <HAL_RCC_OscConfig+0x494>)
 80021fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	2b00      	cmp	r3, #0
 8002206:	d0ee      	beq.n	80021e6 <HAL_RCC_OscConfig+0x2e6>
 8002208:	e014      	b.n	8002234 <HAL_RCC_OscConfig+0x334>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800220a:	f7ff f87f 	bl	800130c <HAL_GetTick>
 800220e:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002210:	e00a      	b.n	8002228 <HAL_RCC_OscConfig+0x328>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002212:	f7ff f87b 	bl	800130c <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	6a3b      	ldr	r3, [r7, #32]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002220:	4293      	cmp	r3, r2
 8002222:	d901      	bls.n	8002228 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e0ac      	b.n	8002382 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002228:	4b5a      	ldr	r3, [pc, #360]	; (8002394 <HAL_RCC_OscConfig+0x494>)
 800222a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800222c:	f003 0302 	and.w	r3, r3, #2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d1ee      	bne.n	8002212 <HAL_RCC_OscConfig+0x312>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002234:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002238:	2b01      	cmp	r3, #1
 800223a:	d105      	bne.n	8002248 <HAL_RCC_OscConfig+0x348>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800223c:	4b55      	ldr	r3, [pc, #340]	; (8002394 <HAL_RCC_OscConfig+0x494>)
 800223e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002240:	4a54      	ldr	r2, [pc, #336]	; (8002394 <HAL_RCC_OscConfig+0x494>)
 8002242:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002246:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	2b00      	cmp	r3, #0
 800224e:	f000 8097 	beq.w	8002380 <HAL_RCC_OscConfig+0x480>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002252:	4b50      	ldr	r3, [pc, #320]	; (8002394 <HAL_RCC_OscConfig+0x494>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f003 030c 	and.w	r3, r3, #12
 800225a:	2b08      	cmp	r3, #8
 800225c:	d061      	beq.n	8002322 <HAL_RCC_OscConfig+0x422>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	699b      	ldr	r3, [r3, #24]
 8002262:	2b02      	cmp	r3, #2
 8002264:	d146      	bne.n	80022f4 <HAL_RCC_OscConfig+0x3f4>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002266:	4b4c      	ldr	r3, [pc, #304]	; (8002398 <HAL_RCC_OscConfig+0x498>)
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800226c:	f7ff f84e 	bl	800130c <HAL_GetTick>
 8002270:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002272:	e008      	b.n	8002286 <HAL_RCC_OscConfig+0x386>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002274:	f7ff f84a 	bl	800130c <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	6a3b      	ldr	r3, [r7, #32]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b64      	cmp	r3, #100	; 0x64
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0x386>
          {
            return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e07d      	b.n	8002382 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002286:	4b43      	ldr	r3, [pc, #268]	; (8002394 <HAL_RCC_OscConfig+0x494>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d1f0      	bne.n	8002274 <HAL_RCC_OscConfig+0x374>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002292:	4b40      	ldr	r3, [pc, #256]	; (8002394 <HAL_RCC_OscConfig+0x494>)
 8002294:	685a      	ldr	r2, [r3, #4]
 8002296:	4b41      	ldr	r3, [pc, #260]	; (800239c <HAL_RCC_OscConfig+0x49c>)
 8002298:	4013      	ands	r3, r2
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	69d1      	ldr	r1, [r2, #28]
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	6a12      	ldr	r2, [r2, #32]
 80022a2:	4311      	orrs	r1, r2
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022a8:	0192      	lsls	r2, r2, #6
 80022aa:	4311      	orrs	r1, r2
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80022b0:	0612      	lsls	r2, r2, #24
 80022b2:	4311      	orrs	r1, r2
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80022b8:	0852      	lsrs	r2, r2, #1
 80022ba:	3a01      	subs	r2, #1
 80022bc:	0412      	lsls	r2, r2, #16
 80022be:	430a      	orrs	r2, r1
 80022c0:	4934      	ldr	r1, [pc, #208]	; (8002394 <HAL_RCC_OscConfig+0x494>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022c6:	4b34      	ldr	r3, [pc, #208]	; (8002398 <HAL_RCC_OscConfig+0x498>)
 80022c8:	2201      	movs	r2, #1
 80022ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022cc:	f7ff f81e 	bl	800130c <HAL_GetTick>
 80022d0:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022d2:	e008      	b.n	80022e6 <HAL_RCC_OscConfig+0x3e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022d4:	f7ff f81a 	bl	800130c <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	6a3b      	ldr	r3, [r7, #32]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b64      	cmp	r3, #100	; 0x64
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0x3e6>
          {
            return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e04d      	b.n	8002382 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022e6:	4b2b      	ldr	r3, [pc, #172]	; (8002394 <HAL_RCC_OscConfig+0x494>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d0f0      	beq.n	80022d4 <HAL_RCC_OscConfig+0x3d4>
 80022f2:	e045      	b.n	8002380 <HAL_RCC_OscConfig+0x480>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022f4:	4b28      	ldr	r3, [pc, #160]	; (8002398 <HAL_RCC_OscConfig+0x498>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022fa:	f7ff f807 	bl	800130c <HAL_GetTick>
 80022fe:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002300:	e008      	b.n	8002314 <HAL_RCC_OscConfig+0x414>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002302:	f7ff f803 	bl	800130c <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	6a3b      	ldr	r3, [r7, #32]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	2b64      	cmp	r3, #100	; 0x64
 800230e:	d901      	bls.n	8002314 <HAL_RCC_OscConfig+0x414>
          {
            return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e036      	b.n	8002382 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002314:	4b1f      	ldr	r3, [pc, #124]	; (8002394 <HAL_RCC_OscConfig+0x494>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d1f0      	bne.n	8002302 <HAL_RCC_OscConfig+0x402>
 8002320:	e02e      	b.n	8002380 <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d101      	bne.n	800232e <HAL_RCC_OscConfig+0x42e>
      {
        return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e029      	b.n	8002382 <HAL_RCC_OscConfig+0x482>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 800232e:	4b19      	ldr	r3, [pc, #100]	; (8002394 <HAL_RCC_OscConfig+0x494>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	69db      	ldr	r3, [r3, #28]
 800233e:	429a      	cmp	r2, r3
 8002340:	d11c      	bne.n	800237c <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800234c:	429a      	cmp	r2, r3
 800234e:	d115      	bne.n	800237c <HAL_RCC_OscConfig+0x47c>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	099b      	lsrs	r3, r3, #6
 8002354:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800235c:	429a      	cmp	r2, r3
 800235e:	d10d      	bne.n	800237c <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800236a:	429a      	cmp	r2, r3
 800236c:	d106      	bne.n	800237c <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002378:	429a      	cmp	r2, r3
 800237a:	d001      	beq.n	8002380 <HAL_RCC_OscConfig+0x480>
        {
          return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e000      	b.n	8002382 <HAL_RCC_OscConfig+0x482>
        }
      }
    }
  }
  return HAL_OK;
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	3728      	adds	r7, #40	; 0x28
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	40007000 	.word	0x40007000
 8002390:	40023870 	.word	0x40023870
 8002394:	40023800 	.word	0x40023800
 8002398:	42470060 	.word	0x42470060
 800239c:	f0bc8000 	.word	0xf0bc8000

080023a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b086      	sub	sp, #24
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d101      	bne.n	80023b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e0d2      	b.n	800255a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023b4:	4b6b      	ldr	r3, [pc, #428]	; (8002564 <HAL_RCC_ClockConfig+0x1c4>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 030f 	and.w	r3, r3, #15
 80023bc:	683a      	ldr	r2, [r7, #0]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d90c      	bls.n	80023dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023c2:	4b68      	ldr	r3, [pc, #416]	; (8002564 <HAL_RCC_ClockConfig+0x1c4>)
 80023c4:	683a      	ldr	r2, [r7, #0]
 80023c6:	b2d2      	uxtb	r2, r2
 80023c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ca:	4b66      	ldr	r3, [pc, #408]	; (8002564 <HAL_RCC_ClockConfig+0x1c4>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 030f 	and.w	r3, r3, #15
 80023d2:	683a      	ldr	r2, [r7, #0]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d001      	beq.n	80023dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e0be      	b.n	800255a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0302 	and.w	r3, r3, #2
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d020      	beq.n	800242a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0304 	and.w	r3, r3, #4
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d005      	beq.n	8002400 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023f4:	4b5c      	ldr	r3, [pc, #368]	; (8002568 <HAL_RCC_ClockConfig+0x1c8>)
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	4a5b      	ldr	r2, [pc, #364]	; (8002568 <HAL_RCC_ClockConfig+0x1c8>)
 80023fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0308 	and.w	r3, r3, #8
 8002408:	2b00      	cmp	r3, #0
 800240a:	d005      	beq.n	8002418 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 800240c:	4b56      	ldr	r3, [pc, #344]	; (8002568 <HAL_RCC_ClockConfig+0x1c8>)
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	4a55      	ldr	r2, [pc, #340]	; (8002568 <HAL_RCC_ClockConfig+0x1c8>)
 8002412:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002416:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002418:	4b53      	ldr	r3, [pc, #332]	; (8002568 <HAL_RCC_ClockConfig+0x1c8>)
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	4950      	ldr	r1, [pc, #320]	; (8002568 <HAL_RCC_ClockConfig+0x1c8>)
 8002426:	4313      	orrs	r3, r2
 8002428:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	2b00      	cmp	r3, #0
 8002434:	d040      	beq.n	80024b8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d107      	bne.n	800244e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800243e:	4b4a      	ldr	r3, [pc, #296]	; (8002568 <HAL_RCC_ClockConfig+0x1c8>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d115      	bne.n	8002476 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e085      	b.n	800255a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	2b02      	cmp	r3, #2
 8002454:	d107      	bne.n	8002466 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002456:	4b44      	ldr	r3, [pc, #272]	; (8002568 <HAL_RCC_ClockConfig+0x1c8>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d109      	bne.n	8002476 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e079      	b.n	800255a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002466:	4b40      	ldr	r3, [pc, #256]	; (8002568 <HAL_RCC_ClockConfig+0x1c8>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d101      	bne.n	8002476 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e071      	b.n	800255a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002476:	4b3c      	ldr	r3, [pc, #240]	; (8002568 <HAL_RCC_ClockConfig+0x1c8>)
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f023 0203 	bic.w	r2, r3, #3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	4939      	ldr	r1, [pc, #228]	; (8002568 <HAL_RCC_ClockConfig+0x1c8>)
 8002484:	4313      	orrs	r3, r2
 8002486:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002488:	f7fe ff40 	bl	800130c <HAL_GetTick>
 800248c:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800248e:	e00a      	b.n	80024a6 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002490:	f7fe ff3c 	bl	800130c <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	f241 3288 	movw	r2, #5000	; 0x1388
 800249e:	4293      	cmp	r3, r2
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e059      	b.n	800255a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024a6:	4b30      	ldr	r3, [pc, #192]	; (8002568 <HAL_RCC_ClockConfig+0x1c8>)
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f003 020c 	and.w	r2, r3, #12
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d1eb      	bne.n	8002490 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024b8:	4b2a      	ldr	r3, [pc, #168]	; (8002564 <HAL_RCC_ClockConfig+0x1c4>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 030f 	and.w	r3, r3, #15
 80024c0:	683a      	ldr	r2, [r7, #0]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d20c      	bcs.n	80024e0 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024c6:	4b27      	ldr	r3, [pc, #156]	; (8002564 <HAL_RCC_ClockConfig+0x1c4>)
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	b2d2      	uxtb	r2, r2
 80024cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ce:	4b25      	ldr	r3, [pc, #148]	; (8002564 <HAL_RCC_ClockConfig+0x1c4>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 030f 	and.w	r3, r3, #15
 80024d6:	683a      	ldr	r2, [r7, #0]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d001      	beq.n	80024e0 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e03c      	b.n	800255a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0304 	and.w	r3, r3, #4
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d008      	beq.n	80024fe <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024ec:	4b1e      	ldr	r3, [pc, #120]	; (8002568 <HAL_RCC_ClockConfig+0x1c8>)
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	491b      	ldr	r1, [pc, #108]	; (8002568 <HAL_RCC_ClockConfig+0x1c8>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0308 	and.w	r3, r3, #8
 8002506:	2b00      	cmp	r3, #0
 8002508:	d009      	beq.n	800251e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800250a:	4b17      	ldr	r3, [pc, #92]	; (8002568 <HAL_RCC_ClockConfig+0x1c8>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	00db      	lsls	r3, r3, #3
 8002518:	4913      	ldr	r1, [pc, #76]	; (8002568 <HAL_RCC_ClockConfig+0x1c8>)
 800251a:	4313      	orrs	r3, r2
 800251c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 800251e:	f000 f82b 	bl	8002578 <HAL_RCC_GetSysClockFreq>
 8002522:	4601      	mov	r1, r0
 8002524:	4b10      	ldr	r3, [pc, #64]	; (8002568 <HAL_RCC_ClockConfig+0x1c8>)
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800252c:	22f0      	movs	r2, #240	; 0xf0
 800252e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002530:	693a      	ldr	r2, [r7, #16]
 8002532:	fa92 f2a2 	rbit	r2, r2
 8002536:	60fa      	str	r2, [r7, #12]
  return result;
 8002538:	68fa      	ldr	r2, [r7, #12]
 800253a:	fab2 f282 	clz	r2, r2
 800253e:	b2d2      	uxtb	r2, r2
 8002540:	40d3      	lsrs	r3, r2
 8002542:	4a0a      	ldr	r2, [pc, #40]	; (800256c <HAL_RCC_ClockConfig+0x1cc>)
 8002544:	5cd3      	ldrb	r3, [r2, r3]
 8002546:	fa21 f303 	lsr.w	r3, r1, r3
 800254a:	4a09      	ldr	r2, [pc, #36]	; (8002570 <HAL_RCC_ClockConfig+0x1d0>)
 800254c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800254e:	4b09      	ldr	r3, [pc, #36]	; (8002574 <HAL_RCC_ClockConfig+0x1d4>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4618      	mov	r0, r3
 8002554:	f7fe fd60 	bl	8001018 <HAL_InitTick>

  return HAL_OK;
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3718      	adds	r7, #24
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	40023c00 	.word	0x40023c00
 8002568:	40023800 	.word	0x40023800
 800256c:	0800b1e8 	.word	0x0800b1e8
 8002570:	20000000 	.word	0x20000000
 8002574:	20000004 	.word	0x20000004

08002578 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800257e:	2300      	movs	r3, #0
 8002580:	607b      	str	r3, [r7, #4]
 8002582:	2300      	movs	r3, #0
 8002584:	60fb      	str	r3, [r7, #12]
 8002586:	2300      	movs	r3, #0
 8002588:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800258a:	2300      	movs	r3, #0
 800258c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800258e:	4b63      	ldr	r3, [pc, #396]	; (800271c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f003 030c 	and.w	r3, r3, #12
 8002596:	2b04      	cmp	r3, #4
 8002598:	d007      	beq.n	80025aa <HAL_RCC_GetSysClockFreq+0x32>
 800259a:	2b08      	cmp	r3, #8
 800259c:	d008      	beq.n	80025b0 <HAL_RCC_GetSysClockFreq+0x38>
 800259e:	2b00      	cmp	r3, #0
 80025a0:	f040 80b4 	bne.w	800270c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025a4:	4b5e      	ldr	r3, [pc, #376]	; (8002720 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80025a6:	60bb      	str	r3, [r7, #8]
       break;
 80025a8:	e0b3      	b.n	8002712 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025aa:	4b5e      	ldr	r3, [pc, #376]	; (8002724 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80025ac:	60bb      	str	r3, [r7, #8]
      break;
 80025ae:	e0b0      	b.n	8002712 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025b0:	4b5a      	ldr	r3, [pc, #360]	; (800271c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025b8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025ba:	4b58      	ldr	r3, [pc, #352]	; (800271c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d04a      	beq.n	800265c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025c6:	4b55      	ldr	r3, [pc, #340]	; (800271c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	099b      	lsrs	r3, r3, #6
 80025cc:	f04f 0400 	mov.w	r4, #0
 80025d0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80025d4:	f04f 0200 	mov.w	r2, #0
 80025d8:	ea03 0501 	and.w	r5, r3, r1
 80025dc:	ea04 0602 	and.w	r6, r4, r2
 80025e0:	4629      	mov	r1, r5
 80025e2:	4632      	mov	r2, r6
 80025e4:	f04f 0300 	mov.w	r3, #0
 80025e8:	f04f 0400 	mov.w	r4, #0
 80025ec:	0154      	lsls	r4, r2, #5
 80025ee:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80025f2:	014b      	lsls	r3, r1, #5
 80025f4:	4619      	mov	r1, r3
 80025f6:	4622      	mov	r2, r4
 80025f8:	1b49      	subs	r1, r1, r5
 80025fa:	eb62 0206 	sbc.w	r2, r2, r6
 80025fe:	f04f 0300 	mov.w	r3, #0
 8002602:	f04f 0400 	mov.w	r4, #0
 8002606:	0194      	lsls	r4, r2, #6
 8002608:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800260c:	018b      	lsls	r3, r1, #6
 800260e:	1a5b      	subs	r3, r3, r1
 8002610:	eb64 0402 	sbc.w	r4, r4, r2
 8002614:	f04f 0100 	mov.w	r1, #0
 8002618:	f04f 0200 	mov.w	r2, #0
 800261c:	00e2      	lsls	r2, r4, #3
 800261e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002622:	00d9      	lsls	r1, r3, #3
 8002624:	460b      	mov	r3, r1
 8002626:	4614      	mov	r4, r2
 8002628:	195b      	adds	r3, r3, r5
 800262a:	eb44 0406 	adc.w	r4, r4, r6
 800262e:	f04f 0100 	mov.w	r1, #0
 8002632:	f04f 0200 	mov.w	r2, #0
 8002636:	0262      	lsls	r2, r4, #9
 8002638:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800263c:	0259      	lsls	r1, r3, #9
 800263e:	460b      	mov	r3, r1
 8002640:	4614      	mov	r4, r2
 8002642:	4618      	mov	r0, r3
 8002644:	4621      	mov	r1, r4
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f04f 0400 	mov.w	r4, #0
 800264c:	461a      	mov	r2, r3
 800264e:	4623      	mov	r3, r4
 8002650:	f7fd fdbe 	bl	80001d0 <__aeabi_uldivmod>
 8002654:	4603      	mov	r3, r0
 8002656:	460c      	mov	r4, r1
 8002658:	60fb      	str	r3, [r7, #12]
 800265a:	e049      	b.n	80026f0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800265c:	4b2f      	ldr	r3, [pc, #188]	; (800271c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	099b      	lsrs	r3, r3, #6
 8002662:	f04f 0400 	mov.w	r4, #0
 8002666:	f240 11ff 	movw	r1, #511	; 0x1ff
 800266a:	f04f 0200 	mov.w	r2, #0
 800266e:	ea03 0501 	and.w	r5, r3, r1
 8002672:	ea04 0602 	and.w	r6, r4, r2
 8002676:	4629      	mov	r1, r5
 8002678:	4632      	mov	r2, r6
 800267a:	f04f 0300 	mov.w	r3, #0
 800267e:	f04f 0400 	mov.w	r4, #0
 8002682:	0154      	lsls	r4, r2, #5
 8002684:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002688:	014b      	lsls	r3, r1, #5
 800268a:	4619      	mov	r1, r3
 800268c:	4622      	mov	r2, r4
 800268e:	1b49      	subs	r1, r1, r5
 8002690:	eb62 0206 	sbc.w	r2, r2, r6
 8002694:	f04f 0300 	mov.w	r3, #0
 8002698:	f04f 0400 	mov.w	r4, #0
 800269c:	0194      	lsls	r4, r2, #6
 800269e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80026a2:	018b      	lsls	r3, r1, #6
 80026a4:	1a5b      	subs	r3, r3, r1
 80026a6:	eb64 0402 	sbc.w	r4, r4, r2
 80026aa:	f04f 0100 	mov.w	r1, #0
 80026ae:	f04f 0200 	mov.w	r2, #0
 80026b2:	00e2      	lsls	r2, r4, #3
 80026b4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80026b8:	00d9      	lsls	r1, r3, #3
 80026ba:	460b      	mov	r3, r1
 80026bc:	4614      	mov	r4, r2
 80026be:	195b      	adds	r3, r3, r5
 80026c0:	eb44 0406 	adc.w	r4, r4, r6
 80026c4:	f04f 0100 	mov.w	r1, #0
 80026c8:	f04f 0200 	mov.w	r2, #0
 80026cc:	02a2      	lsls	r2, r4, #10
 80026ce:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80026d2:	0299      	lsls	r1, r3, #10
 80026d4:	460b      	mov	r3, r1
 80026d6:	4614      	mov	r4, r2
 80026d8:	4618      	mov	r0, r3
 80026da:	4621      	mov	r1, r4
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f04f 0400 	mov.w	r4, #0
 80026e2:	461a      	mov	r2, r3
 80026e4:	4623      	mov	r3, r4
 80026e6:	f7fd fd73 	bl	80001d0 <__aeabi_uldivmod>
 80026ea:	4603      	mov	r3, r0
 80026ec:	460c      	mov	r4, r1
 80026ee:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80026f0:	4b0a      	ldr	r3, [pc, #40]	; (800271c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	0c1b      	lsrs	r3, r3, #16
 80026f6:	f003 0303 	and.w	r3, r3, #3
 80026fa:	3301      	adds	r3, #1
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002700:	68fa      	ldr	r2, [r7, #12]
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	fbb2 f3f3 	udiv	r3, r2, r3
 8002708:	60bb      	str	r3, [r7, #8]
      break;
 800270a:	e002      	b.n	8002712 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800270c:	4b04      	ldr	r3, [pc, #16]	; (8002720 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800270e:	60bb      	str	r3, [r7, #8]
      break;
 8002710:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002712:	68bb      	ldr	r3, [r7, #8]
}
 8002714:	4618      	mov	r0, r3
 8002716:	3714      	adds	r7, #20
 8002718:	46bd      	mov	sp, r7
 800271a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800271c:	40023800 	.word	0x40023800
 8002720:	00f42400 	.word	0x00f42400
 8002724:	007a1200 	.word	0x007a1200

08002728 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800272c:	4b02      	ldr	r3, [pc, #8]	; (8002738 <HAL_RCC_GetHCLKFreq+0x10>)
 800272e:	681b      	ldr	r3, [r3, #0]
}
 8002730:	4618      	mov	r0, r3
 8002732:	46bd      	mov	sp, r7
 8002734:	bc80      	pop	{r7}
 8002736:	4770      	bx	lr
 8002738:	20000000 	.word	0x20000000

0800273c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8002742:	f7ff fff1 	bl	8002728 <HAL_RCC_GetHCLKFreq>
 8002746:	4601      	mov	r1, r0
 8002748:	4b0b      	ldr	r3, [pc, #44]	; (8002778 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8002750:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8002754:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	fa92 f2a2 	rbit	r2, r2
 800275c:	603a      	str	r2, [r7, #0]
  return result;
 800275e:	683a      	ldr	r2, [r7, #0]
 8002760:	fab2 f282 	clz	r2, r2
 8002764:	b2d2      	uxtb	r2, r2
 8002766:	40d3      	lsrs	r3, r2
 8002768:	4a04      	ldr	r2, [pc, #16]	; (800277c <HAL_RCC_GetPCLK1Freq+0x40>)
 800276a:	5cd3      	ldrb	r3, [r2, r3]
 800276c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002770:	4618      	mov	r0, r3
 8002772:	3708      	adds	r7, #8
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	40023800 	.word	0x40023800
 800277c:	0800b1f8 	.word	0x0800b1f8

08002780 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8002786:	f7ff ffcf 	bl	8002728 <HAL_RCC_GetHCLKFreq>
 800278a:	4601      	mov	r1, r0
 800278c:	4b0b      	ldr	r3, [pc, #44]	; (80027bc <HAL_RCC_GetPCLK2Freq+0x3c>)
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002794:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8002798:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	fa92 f2a2 	rbit	r2, r2
 80027a0:	603a      	str	r2, [r7, #0]
  return result;
 80027a2:	683a      	ldr	r2, [r7, #0]
 80027a4:	fab2 f282 	clz	r2, r2
 80027a8:	b2d2      	uxtb	r2, r2
 80027aa:	40d3      	lsrs	r3, r2
 80027ac:	4a04      	ldr	r2, [pc, #16]	; (80027c0 <HAL_RCC_GetPCLK2Freq+0x40>)
 80027ae:	5cd3      	ldrb	r3, [r2, r3]
 80027b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3708      	adds	r7, #8
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	40023800 	.word	0x40023800
 80027c0:	0800b1f8 	.word	0x0800b1f8

080027c4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	220f      	movs	r2, #15
 80027d2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80027d4:	4b11      	ldr	r3, [pc, #68]	; (800281c <HAL_RCC_GetClockConfig+0x58>)
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f003 0203 	and.w	r2, r3, #3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80027e0:	4b0e      	ldr	r3, [pc, #56]	; (800281c <HAL_RCC_GetClockConfig+0x58>)
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80027ec:	4b0b      	ldr	r3, [pc, #44]	; (800281c <HAL_RCC_GetClockConfig+0x58>)
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80027f8:	4b08      	ldr	r3, [pc, #32]	; (800281c <HAL_RCC_GetClockConfig+0x58>)
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	08db      	lsrs	r3, r3, #3
 80027fe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002806:	4b06      	ldr	r3, [pc, #24]	; (8002820 <HAL_RCC_GetClockConfig+0x5c>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 020f 	and.w	r2, r3, #15
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	601a      	str	r2, [r3, #0]
}
 8002812:	bf00      	nop
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	bc80      	pop	{r7}
 800281a:	4770      	bx	lr
 800281c:	40023800 	.word	0x40023800
 8002820:	40023c00 	.word	0x40023c00

08002824 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d101      	bne.n	8002836 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e022      	b.n	800287c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2b00      	cmp	r3, #0
 8002840:	d105      	bne.n	800284e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f7fe faad 	bl	8000da8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2203      	movs	r2, #3
 8002852:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 f814 	bl	8002884 <HAL_SD_InitCard>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e00a      	b.n	800287c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2201      	movs	r2, #1
 8002876:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800287a:	2300      	movs	r3, #0
}
 800287c:	4618      	mov	r0, r3
 800287e:	3708      	adds	r7, #8
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}

08002884 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002884:	b5b0      	push	{r4, r5, r7, lr}
 8002886:	b08e      	sub	sp, #56	; 0x38
 8002888:	af04      	add	r7, sp, #16
 800288a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800288c:	2300      	movs	r3, #0
 800288e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8002890:	2300      	movs	r3, #0
 8002892:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002894:	2300      	movs	r3, #0
 8002896:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8002898:	2300      	movs	r3, #0
 800289a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800289c:	2300      	movs	r3, #0
 800289e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80028a0:	2376      	movs	r3, #118	; 0x76
 80028a2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681d      	ldr	r5, [r3, #0]
 80028a8:	466c      	mov	r4, sp
 80028aa:	f107 0314 	add.w	r3, r7, #20
 80028ae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80028b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80028b6:	f107 0308 	add.w	r3, r7, #8
 80028ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028bc:	4628      	mov	r0, r5
 80028be:	f001 ff9d 	bl	80047fc <SDIO_Init>
 80028c2:	4603      	mov	r3, r0
 80028c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80028c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e031      	b.n	8002938 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80028d4:	4b1a      	ldr	r3, [pc, #104]	; (8002940 <HAL_SD_InitCard+0xbc>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4618      	mov	r0, r3
 80028e0:	f001 ffd2 	bl	8004888 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80028e4:	4b16      	ldr	r3, [pc, #88]	; (8002940 <HAL_SD_InitCard+0xbc>)
 80028e6:	2201      	movs	r2, #1
 80028e8:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f001 f8f0 	bl	8003ad0 <SD_PowerON>
 80028f0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80028f2:	6a3b      	ldr	r3, [r7, #32]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d00b      	beq.n	8002910 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002904:	6a3b      	ldr	r3, [r7, #32]
 8002906:	431a      	orrs	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e013      	b.n	8002938 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f001 f80f 	bl	8003934 <SD_InitCard>
 8002916:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002918:	6a3b      	ldr	r3, [r7, #32]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d00b      	beq.n	8002936 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800292a:	6a3b      	ldr	r3, [r7, #32]
 800292c:	431a      	orrs	r2, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e000      	b.n	8002938 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8002936:	2300      	movs	r3, #0
}
 8002938:	4618      	mov	r0, r3
 800293a:	3728      	adds	r7, #40	; 0x28
 800293c:	46bd      	mov	sp, r7
 800293e:	bdb0      	pop	{r4, r5, r7, pc}
 8002940:	422580a0 	.word	0x422580a0

08002944 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b092      	sub	sp, #72	; 0x48
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	607a      	str	r2, [r7, #4]
 8002950:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002952:	f7fe fcdb 	bl	800130c <HAL_GetTick>
 8002956:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d107      	bne.n	8002976 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800296a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e1d9      	b.n	8002d2a <HAL_SD_ReadBlocks+0x3e6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800297c:	b2db      	uxtb	r3, r3
 800297e:	2b01      	cmp	r3, #1
 8002980:	f040 81cc 	bne.w	8002d1c <HAL_SD_ReadBlocks+0x3d8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2200      	movs	r2, #0
 8002988:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800298a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	441a      	add	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002994:	429a      	cmp	r2, r3
 8002996:	d907      	bls.n	80029a8 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800299c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e1c0      	b.n	8002d2a <HAL_SD_ReadBlocks+0x3e6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2203      	movs	r2, #3
 80029ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2200      	movs	r2, #0
 80029b6:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d002      	beq.n	80029c6 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80029c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029c2:	025b      	lsls	r3, r3, #9
 80029c4:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80029ce:	4618      	mov	r0, r3
 80029d0:	f001 ffe8 	bl	80049a4 <SDMMC_CmdBlockLength>
 80029d4:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 80029d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d00f      	beq.n	80029fc <HAL_SD_ReadBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a9b      	ldr	r2, [pc, #620]	; (8002c50 <HAL_SD_ReadBlocks+0x30c>)
 80029e2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029ea:	431a      	orrs	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e196      	b.n	8002d2a <HAL_SD_ReadBlocks+0x3e6>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80029fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002a00:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	025b      	lsls	r3, r3, #9
 8002a06:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002a08:	2390      	movs	r3, #144	; 0x90
 8002a0a:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002a10:	2300      	movs	r3, #0
 8002a12:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8002a14:	2301      	movs	r3, #1
 8002a16:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f107 0214 	add.w	r2, r7, #20
 8002a20:	4611      	mov	r1, r2
 8002a22:	4618      	mov	r0, r3
 8002a24:	f001 ff93 	bl	800494e <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d90a      	bls.n	8002a44 <HAL_SD_ReadBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2202      	movs	r2, #2
 8002a32:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f001 fff6 	bl	8004a2c <SDMMC_CmdReadMultiBlock>
 8002a40:	6478      	str	r0, [r7, #68]	; 0x44
 8002a42:	e009      	b.n	8002a58 <HAL_SD_ReadBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2201      	movs	r2, #1
 8002a48:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002a50:	4618      	mov	r0, r3
 8002a52:	f001 ffc9 	bl	80049e8 <SDMMC_CmdReadSingleBlock>
 8002a56:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002a58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d012      	beq.n	8002a84 <HAL_SD_ReadBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a7b      	ldr	r2, [pc, #492]	; (8002c50 <HAL_SD_ReadBlocks+0x30c>)
 8002a64:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a6c:	431a      	orrs	r2, r3
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2201      	movs	r2, #1
 8002a76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e152      	b.n	8002d2a <HAL_SD_ReadBlocks+0x3e6>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002a88:	e061      	b.n	8002b4e <HAL_SD_ReadBlocks+0x20a>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d03c      	beq.n	8002b12 <HAL_SD_ReadBlocks+0x1ce>
 8002a98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d039      	beq.n	8002b12 <HAL_SD_ReadBlocks+0x1ce>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	643b      	str	r3, [r7, #64]	; 0x40
 8002aa2:	e033      	b.n	8002b0c <HAL_SD_ReadBlocks+0x1c8>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f001 fed1 	bl	8004850 <SDIO_ReadFIFO>
 8002aae:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8002ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ab2:	b2da      	uxtb	r2, r3
 8002ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ab6:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aba:	3301      	adds	r3, #1
 8002abc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002abe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ac0:	3b01      	subs	r3, #1
 8002ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8002ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac6:	0a1b      	lsrs	r3, r3, #8
 8002ac8:	b2da      	uxtb	r2, r3
 8002aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002acc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002ad4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8002ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002adc:	0c1b      	lsrs	r3, r3, #16
 8002ade:	b2da      	uxtb	r2, r3
 8002ae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ae2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002aea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002aec:	3b01      	subs	r3, #1
 8002aee:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002af2:	0e1b      	lsrs	r3, r3, #24
 8002af4:	b2da      	uxtb	r2, r3
 8002af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002af8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002afc:	3301      	adds	r3, #1
 8002afe:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002b00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b02:	3b01      	subs	r3, #1
 8002b04:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8002b06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b08:	3301      	adds	r3, #1
 8002b0a:	643b      	str	r3, [r7, #64]	; 0x40
 8002b0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b0e:	2b07      	cmp	r3, #7
 8002b10:	d9c8      	bls.n	8002aa4 <HAL_SD_ReadBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002b12:	f7fe fbfb 	bl	800130c <HAL_GetTick>
 8002b16:	4602      	mov	r2, r0
 8002b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d902      	bls.n	8002b28 <HAL_SD_ReadBlocks+0x1e4>
 8002b22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d112      	bne.n	8002b4e <HAL_SD_ReadBlocks+0x20a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a48      	ldr	r2, [pc, #288]	; (8002c50 <HAL_SD_ReadBlocks+0x30c>)
 8002b2e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b34:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2200      	movs	r2, #0
 8002b48:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e0ed      	b.n	8002d2a <HAL_SD_ReadBlocks+0x3e6>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b54:	f240 332a 	movw	r3, #810	; 0x32a
 8002b58:	4013      	ands	r3, r2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d095      	beq.n	8002a8a <HAL_SD_ReadBlocks+0x146>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d022      	beq.n	8002bb2 <HAL_SD_ReadBlocks+0x26e>
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d91f      	bls.n	8002bb2 <HAL_SD_ReadBlocks+0x26e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b76:	2b03      	cmp	r3, #3
 8002b78:	d01b      	beq.n	8002bb2 <HAL_SD_ReadBlocks+0x26e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f001 ffba 	bl	8004af8 <SDMMC_CmdStopTransfer>
 8002b84:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8002b86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d012      	beq.n	8002bb2 <HAL_SD_ReadBlocks+0x26e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a2f      	ldr	r2, [pc, #188]	; (8002c50 <HAL_SD_ReadBlocks+0x30c>)
 8002b92:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b9a:	431a      	orrs	r2, r3
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2200      	movs	r2, #0
 8002bac:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e0bb      	b.n	8002d2a <HAL_SD_ReadBlocks+0x3e6>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bb8:	f003 0308 	and.w	r3, r3, #8
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d012      	beq.n	8002be6 <HAL_SD_ReadBlocks+0x2a2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a22      	ldr	r2, [pc, #136]	; (8002c50 <HAL_SD_ReadBlocks+0x30c>)
 8002bc6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bcc:	f043 0208 	orr.w	r2, r3, #8
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2200      	movs	r2, #0
 8002be0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e0a1      	b.n	8002d2a <HAL_SD_ReadBlocks+0x3e6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bec:	f003 0302 	and.w	r3, r3, #2
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d012      	beq.n	8002c1a <HAL_SD_ReadBlocks+0x2d6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a15      	ldr	r2, [pc, #84]	; (8002c50 <HAL_SD_ReadBlocks+0x30c>)
 8002bfa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c00:	f043 0202 	orr.w	r2, r3, #2
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2200      	movs	r2, #0
 8002c14:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e087      	b.n	8002d2a <HAL_SD_ReadBlocks+0x3e6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c20:	f003 0320 	and.w	r3, r3, #32
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d064      	beq.n	8002cf2 <HAL_SD_ReadBlocks+0x3ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a08      	ldr	r2, [pc, #32]	; (8002c50 <HAL_SD_ReadBlocks+0x30c>)
 8002c2e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c34:	f043 0220 	orr.w	r2, r3, #32
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2200      	movs	r2, #0
 8002c48:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e06d      	b.n	8002d2a <HAL_SD_ReadBlocks+0x3e6>
 8002c4e:	bf00      	nop
 8002c50:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f001 fdf9 	bl	8004850 <SDIO_ReadFIFO>
 8002c5e:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8002c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c62:	b2da      	uxtb	r2, r3
 8002c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c66:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002c68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002c6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c70:	3b01      	subs	r3, #1
 8002c72:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8002c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c76:	0a1b      	lsrs	r3, r3, #8
 8002c78:	b2da      	uxtb	r2, r3
 8002c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c7c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c80:	3301      	adds	r3, #1
 8002c82:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002c84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c86:	3b01      	subs	r3, #1
 8002c88:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8002c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c8c:	0c1b      	lsrs	r3, r3, #16
 8002c8e:	b2da      	uxtb	r2, r3
 8002c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c92:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002c94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c96:	3301      	adds	r3, #1
 8002c98:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002c9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ca2:	0e1b      	lsrs	r3, r3, #24
 8002ca4:	b2da      	uxtb	r2, r3
 8002ca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ca8:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cac:	3301      	adds	r3, #1
 8002cae:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002cb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002cb6:	f7fe fb29 	bl	800130c <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d902      	bls.n	8002ccc <HAL_SD_ReadBlocks+0x388>
 8002cc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d112      	bne.n	8002cf2 <HAL_SD_ReadBlocks+0x3ae>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a18      	ldr	r2, [pc, #96]	; (8002d34 <HAL_SD_ReadBlocks+0x3f0>)
 8002cd2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2200      	movs	r2, #0
 8002cec:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e01b      	b.n	8002d2a <HAL_SD_ReadBlocks+0x3e6>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d002      	beq.n	8002d06 <HAL_SD_ReadBlocks+0x3c2>
 8002d00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1a6      	bne.n	8002c54 <HAL_SD_ReadBlocks+0x310>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f240 523a 	movw	r2, #1338	; 0x53a
 8002d0e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	e006      	b.n	8002d2a <HAL_SD_ReadBlocks+0x3e6>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d20:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
  }
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3748      	adds	r7, #72	; 0x48
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	004005ff 	.word	0x004005ff

08002d38 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b092      	sub	sp, #72	; 0x48
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	607a      	str	r2, [r7, #4]
 8002d44:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002d46:	f7fe fae1 	bl	800130c <HAL_GetTick>
 8002d4a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d107      	bne.n	8002d6a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d5e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e184      	b.n	8003074 <HAL_SD_WriteBlocks+0x33c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	f040 8177 	bne.w	8003066 <HAL_SD_WriteBlocks+0x32e>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002d7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	441a      	add	r2, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d907      	bls.n	8002d9c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d90:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e16b      	b.n	8003074 <HAL_SD_WriteBlocks+0x33c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2203      	movs	r2, #3
 8002da0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2200      	movs	r2, #0
 8002daa:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d002      	beq.n	8002dba <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8002db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002db6:	025b      	lsls	r3, r3, #9
 8002db8:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f001 fdee 	bl	80049a4 <SDMMC_CmdBlockLength>
 8002dc8:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 8002dca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d00f      	beq.n	8002df0 <HAL_SD_WriteBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a9d      	ldr	r2, [pc, #628]	; (800304c <HAL_SD_WriteBlocks+0x314>)
 8002dd6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ddc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dde:	431a      	orrs	r2, r3
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e141      	b.n	8003074 <HAL_SD_WriteBlocks+0x33c>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002df0:	f04f 33ff 	mov.w	r3, #4294967295
 8002df4:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	025b      	lsls	r3, r3, #9
 8002dfa:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002dfc:	2390      	movs	r3, #144	; 0x90
 8002dfe:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8002e00:	2300      	movs	r3, #0
 8002e02:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002e04:	2300      	movs	r3, #0
 8002e06:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f107 0218 	add.w	r2, r7, #24
 8002e14:	4611      	mov	r1, r2
 8002e16:	4618      	mov	r0, r3
 8002e18:	f001 fd99 	bl	800494e <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d90a      	bls.n	8002e38 <HAL_SD_WriteBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2220      	movs	r2, #32
 8002e26:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f001 fe40 	bl	8004ab4 <SDMMC_CmdWriteMultiBlock>
 8002e34:	6478      	str	r0, [r7, #68]	; 0x44
 8002e36:	e009      	b.n	8002e4c <HAL_SD_WriteBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2210      	movs	r2, #16
 8002e3c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002e44:	4618      	mov	r0, r3
 8002e46:	f001 fe13 	bl	8004a70 <SDMMC_CmdWriteSingleBlock>
 8002e4a:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002e4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d012      	beq.n	8002e78 <HAL_SD_WriteBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a7d      	ldr	r2, [pc, #500]	; (800304c <HAL_SD_WriteBlocks+0x314>)
 8002e58:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e60:	431a      	orrs	r2, r3
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2200      	movs	r2, #0
 8002e72:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e0fd      	b.n	8003074 <HAL_SD_WriteBlocks+0x33c>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002e7c:	e065      	b.n	8002f4a <HAL_SD_WriteBlocks+0x212>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d040      	beq.n	8002f0e <HAL_SD_WriteBlocks+0x1d6>
 8002e8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d03d      	beq.n	8002f0e <HAL_SD_WriteBlocks+0x1d6>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8002e92:	2300      	movs	r3, #0
 8002e94:	643b      	str	r3, [r7, #64]	; 0x40
 8002e96:	e037      	b.n	8002f08 <HAL_SD_WriteBlocks+0x1d0>
        {
          data = (uint32_t)(*tempbuff);
 8002e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002ea4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8002eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	021a      	lsls	r2, r3, #8
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eb8:	3301      	adds	r3, #1
 8002eba:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002ebc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8002ec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	041a      	lsls	r2, r3, #16
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002ed4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8002eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	061a      	lsls	r2, r3, #24
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002ee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ee8:	3301      	adds	r3, #1
 8002eea:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002eec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f107 0214 	add.w	r2, r7, #20
 8002efa:	4611      	mov	r1, r2
 8002efc:	4618      	mov	r0, r3
 8002efe:	f001 fcb3 	bl	8004868 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8002f02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f04:	3301      	adds	r3, #1
 8002f06:	643b      	str	r3, [r7, #64]	; 0x40
 8002f08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f0a:	2b07      	cmp	r3, #7
 8002f0c:	d9c4      	bls.n	8002e98 <HAL_SD_WriteBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002f0e:	f7fe f9fd 	bl	800130c <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d902      	bls.n	8002f24 <HAL_SD_WriteBlocks+0x1ec>
 8002f1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d112      	bne.n	8002f4a <HAL_SD_WriteBlocks+0x212>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a48      	ldr	r2, [pc, #288]	; (800304c <HAL_SD_WriteBlocks+0x314>)
 8002f2a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f32:	431a      	orrs	r2, r3
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2200      	movs	r2, #0
 8002f44:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e094      	b.n	8003074 <HAL_SD_WriteBlocks+0x33c>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f50:	f240 331a 	movw	r3, #794	; 0x31a
 8002f54:	4013      	ands	r3, r2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d091      	beq.n	8002e7e <HAL_SD_WriteBlocks+0x146>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d022      	beq.n	8002fae <HAL_SD_WriteBlocks+0x276>
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d91f      	bls.n	8002fae <HAL_SD_WriteBlocks+0x276>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f72:	2b03      	cmp	r3, #3
 8002f74:	d01b      	beq.n	8002fae <HAL_SD_WriteBlocks+0x276>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f001 fdbc 	bl	8004af8 <SDMMC_CmdStopTransfer>
 8002f80:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8002f82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d012      	beq.n	8002fae <HAL_SD_WriteBlocks+0x276>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a2f      	ldr	r2, [pc, #188]	; (800304c <HAL_SD_WriteBlocks+0x314>)
 8002f8e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f96:	431a      	orrs	r2, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e062      	b.n	8003074 <HAL_SD_WriteBlocks+0x33c>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fb4:	f003 0308 	and.w	r3, r3, #8
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d012      	beq.n	8002fe2 <HAL_SD_WriteBlocks+0x2aa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a22      	ldr	r2, [pc, #136]	; (800304c <HAL_SD_WriteBlocks+0x314>)
 8002fc2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc8:	f043 0208 	orr.w	r2, r3, #8
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e048      	b.n	8003074 <HAL_SD_WriteBlocks+0x33c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fe8:	f003 0302 	and.w	r3, r3, #2
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d012      	beq.n	8003016 <HAL_SD_WriteBlocks+0x2de>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a15      	ldr	r2, [pc, #84]	; (800304c <HAL_SD_WriteBlocks+0x314>)
 8002ff6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ffc:	f043 0202 	orr.w	r2, r3, #2
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2200      	movs	r2, #0
 8003010:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e02e      	b.n	8003074 <HAL_SD_WriteBlocks+0x33c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800301c:	f003 0310 	and.w	r3, r3, #16
 8003020:	2b00      	cmp	r3, #0
 8003022:	d015      	beq.n	8003050 <HAL_SD_WriteBlocks+0x318>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a08      	ldr	r2, [pc, #32]	; (800304c <HAL_SD_WriteBlocks+0x314>)
 800302a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003030:	f043 0210 	orr.w	r2, r3, #16
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2200      	movs	r2, #0
 8003044:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e014      	b.n	8003074 <HAL_SD_WriteBlocks+0x33c>
 800304a:	bf00      	nop
 800304c:	004005ff 	.word	0x004005ff
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f240 523a 	movw	r2, #1338	; 0x53a
 8003058:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2201      	movs	r2, #1
 800305e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8003062:	2300      	movs	r3, #0
 8003064:	e006      	b.n	8003074 <HAL_SD_WriteBlocks+0x33c>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800306a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
  }
}
 8003074:	4618      	mov	r0, r3
 8003076:	3748      	adds	r7, #72	; 0x48
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003088:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003090:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d008      	beq.n	80030aa <HAL_SD_IRQHandler+0x2e>
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f003 0308 	and.w	r3, r3, #8
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d003      	beq.n	80030aa <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 ff2a 	bl	8003efc <SD_Read_IT>
 80030a8:	e157      	b.n	800335a <HAL_SD_IRQHandler+0x2de>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	f000 808f 	beq.w	80031d8 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030c2:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	6812      	ldr	r2, [r2, #0]
 80030ce:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 80030d2:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80030d6:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f022 0201 	bic.w	r2, r2, #1
 80030e6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f003 0308 	and.w	r3, r3, #8
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d039      	beq.n	8003166 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	f003 0302 	and.w	r3, r3, #2
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d104      	bne.n	8003106 <HAL_SD_IRQHandler+0x8a>
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f003 0320 	and.w	r3, r3, #32
 8003102:	2b00      	cmp	r3, #0
 8003104:	d011      	beq.n	800312a <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4618      	mov	r0, r3
 800310c:	f001 fcf4 	bl	8004af8 <SDMMC_CmdStopTransfer>
 8003110:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d008      	beq.n	800312a <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	431a      	orrs	r2, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f000 f921 	bl	800336c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f240 523a 	movw	r2, #1338	; 0x53a
 8003132:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f003 0301 	and.w	r3, r3, #1
 8003148:	2b00      	cmp	r3, #0
 800314a:	d104      	bne.n	8003156 <HAL_SD_IRQHandler+0xda>
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	2b00      	cmp	r3, #0
 8003154:	d003      	beq.n	800315e <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f002 f95a 	bl	8005410 <HAL_SD_RxCpltCallback>
 800315c:	e0fd      	b.n	800335a <HAL_SD_IRQHandler+0x2de>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f002 f94c 	bl	80053fc <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003164:	e0f9      	b.n	800335a <HAL_SD_IRQHandler+0x2de>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800316c:	2b00      	cmp	r3, #0
 800316e:	f000 80f4 	beq.w	800335a <HAL_SD_IRQHandler+0x2de>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	f003 0320 	and.w	r3, r3, #32
 8003178:	2b00      	cmp	r3, #0
 800317a:	d011      	beq.n	80031a0 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4618      	mov	r0, r3
 8003182:	f001 fcb9 	bl	8004af8 <SDMMC_CmdStopTransfer>
 8003186:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d008      	beq.n	80031a0 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	431a      	orrs	r2, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 f8e6 	bl	800336c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	f040 80d7 	bne.w	800335a <HAL_SD_IRQHandler+0x2de>
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	f040 80d1 	bne.w	800335a <HAL_SD_IRQHandler+0x2de>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f022 0208 	bic.w	r2, r2, #8
 80031c6:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f002 f913 	bl	80053fc <HAL_SD_TxCpltCallback>
}
 80031d6:	e0c0      	b.n	800335a <HAL_SD_IRQHandler+0x2de>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d008      	beq.n	80031f8 <HAL_SD_IRQHandler+0x17c>
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	f003 0308 	and.w	r3, r3, #8
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d003      	beq.n	80031f8 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f000 fed4 	bl	8003f9e <SD_Write_IT>
 80031f6:	e0b0      	b.n	800335a <HAL_SD_IRQHandler+0x2de>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031fe:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8003202:	2b00      	cmp	r3, #0
 8003204:	f000 80a9 	beq.w	800335a <HAL_SD_IRQHandler+0x2de>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	2b00      	cmp	r3, #0
 8003214:	d005      	beq.n	8003222 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800321a:	f043 0202 	orr.w	r2, r3, #2
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003228:	f003 0308 	and.w	r3, r3, #8
 800322c:	2b00      	cmp	r3, #0
 800322e:	d005      	beq.n	800323c <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003234:	f043 0208 	orr.w	r2, r3, #8
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003242:	f003 0320 	and.w	r3, r3, #32
 8003246:	2b00      	cmp	r3, #0
 8003248:	d005      	beq.n	8003256 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800324e:	f043 0220 	orr.w	r2, r3, #32
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800325c:	f003 0310 	and.w	r3, r3, #16
 8003260:	2b00      	cmp	r3, #0
 8003262:	d005      	beq.n	8003270 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003268:	f043 0210 	orr.w	r2, r3, #16
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f240 723a 	movw	r2, #1850	; 0x73a
 8003278:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	6812      	ldr	r2, [r2, #0]
 8003284:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8003288:	f023 0302 	bic.w	r3, r3, #2
 800328c:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4618      	mov	r0, r3
 8003294:	f001 fc30 	bl	8004af8 <SDMMC_CmdStopTransfer>
 8003298:	4602      	mov	r2, r0
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800329e:	431a      	orrs	r2, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f003 0308 	and.w	r3, r3, #8
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00a      	beq.n	80032c4 <HAL_SD_IRQHandler+0x248>
      hsd->State = HAL_SD_STATE_READY;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2201      	movs	r2, #1
 80032b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f000 f855 	bl	800336c <HAL_SD_ErrorCallback>
}
 80032c2:	e04a      	b.n	800335a <HAL_SD_IRQHandler+0x2de>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d045      	beq.n	800335a <HAL_SD_IRQHandler+0x2de>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	f003 0310 	and.w	r3, r3, #16
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d104      	bne.n	80032e2 <HAL_SD_IRQHandler+0x266>
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f003 0320 	and.w	r3, r3, #32
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d011      	beq.n	8003306 <HAL_SD_IRQHandler+0x28a>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032e6:	4a1f      	ldr	r2, [pc, #124]	; (8003364 <HAL_SD_IRQHandler+0x2e8>)
 80032e8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7fe f9c6 	bl	8001680 <HAL_DMA_Abort_IT>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d02f      	beq.n	800335a <HAL_SD_IRQHandler+0x2de>
          SD_DMATxAbort(hsd->hdmatx);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032fe:	4618      	mov	r0, r3
 8003300:	f000 faaa 	bl	8003858 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003304:	e029      	b.n	800335a <HAL_SD_IRQHandler+0x2de>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	f003 0301 	and.w	r3, r3, #1
 800330c:	2b00      	cmp	r3, #0
 800330e:	d104      	bne.n	800331a <HAL_SD_IRQHandler+0x29e>
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b00      	cmp	r3, #0
 8003318:	d011      	beq.n	800333e <HAL_SD_IRQHandler+0x2c2>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	4a12      	ldr	r2, [pc, #72]	; (8003368 <HAL_SD_IRQHandler+0x2ec>)
 8003320:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003326:	4618      	mov	r0, r3
 8003328:	f7fe f9aa 	bl	8001680 <HAL_DMA_Abort_IT>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d013      	beq.n	800335a <HAL_SD_IRQHandler+0x2de>
          SD_DMARxAbort(hsd->hdmarx);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003336:	4618      	mov	r0, r3
 8003338:	f000 fac5 	bl	80038c6 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800333c:	e00d      	b.n	800335a <HAL_SD_IRQHandler+0x2de>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f002 f848 	bl	80053e8 <HAL_SD_AbortCallback>
}
 8003358:	e7ff      	b.n	800335a <HAL_SD_IRQHandler+0x2de>
 800335a:	bf00      	nop
 800335c:	3710      	adds	r7, #16
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	08003859 	.word	0x08003859
 8003368:	080038c7 	.word	0x080038c7

0800336c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8003374:	bf00      	nop
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	bc80      	pop	{r7}
 800337c:	4770      	bx	lr
	...

08003380 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800338e:	0f9b      	lsrs	r3, r3, #30
 8003390:	b2da      	uxtb	r2, r3
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800339a:	0e9b      	lsrs	r3, r3, #26
 800339c:	b2db      	uxtb	r3, r3
 800339e:	f003 030f 	and.w	r3, r3, #15
 80033a2:	b2da      	uxtb	r2, r3
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033ac:	0e1b      	lsrs	r3, r3, #24
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	f003 0303 	and.w	r3, r3, #3
 80033b4:	b2da      	uxtb	r2, r3
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033be:	0c1b      	lsrs	r3, r3, #16
 80033c0:	b2da      	uxtb	r2, r3
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033ca:	0a1b      	lsrs	r3, r3, #8
 80033cc:	b2da      	uxtb	r2, r3
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033d6:	b2da      	uxtb	r2, r3
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033e0:	0d1b      	lsrs	r3, r3, #20
 80033e2:	b29a      	uxth	r2, r3
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033ec:	0c1b      	lsrs	r3, r3, #16
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	f003 030f 	and.w	r3, r3, #15
 80033f4:	b2da      	uxtb	r2, r3
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033fe:	0bdb      	lsrs	r3, r3, #15
 8003400:	b2db      	uxtb	r3, r3
 8003402:	f003 0301 	and.w	r3, r3, #1
 8003406:	b2da      	uxtb	r2, r3
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003410:	0b9b      	lsrs	r3, r3, #14
 8003412:	b2db      	uxtb	r3, r3
 8003414:	f003 0301 	and.w	r3, r3, #1
 8003418:	b2da      	uxtb	r2, r3
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003422:	0b5b      	lsrs	r3, r3, #13
 8003424:	b2db      	uxtb	r3, r3
 8003426:	f003 0301 	and.w	r3, r3, #1
 800342a:	b2da      	uxtb	r2, r3
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003434:	0b1b      	lsrs	r3, r3, #12
 8003436:	b2db      	uxtb	r3, r3
 8003438:	f003 0301 	and.w	r3, r3, #1
 800343c:	b2da      	uxtb	r2, r3
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	2200      	movs	r2, #0
 8003446:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800344c:	2b00      	cmp	r3, #0
 800344e:	d163      	bne.n	8003518 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003454:	009a      	lsls	r2, r3, #2
 8003456:	f640 73fc 	movw	r3, #4092	; 0xffc
 800345a:	4013      	ands	r3, r2
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003460:	0f92      	lsrs	r2, r2, #30
 8003462:	431a      	orrs	r2, r3
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800346c:	0edb      	lsrs	r3, r3, #27
 800346e:	b2db      	uxtb	r3, r3
 8003470:	f003 0307 	and.w	r3, r3, #7
 8003474:	b2da      	uxtb	r2, r3
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800347e:	0e1b      	lsrs	r3, r3, #24
 8003480:	b2db      	uxtb	r3, r3
 8003482:	f003 0307 	and.w	r3, r3, #7
 8003486:	b2da      	uxtb	r2, r3
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003490:	0d5b      	lsrs	r3, r3, #21
 8003492:	b2db      	uxtb	r3, r3
 8003494:	f003 0307 	and.w	r3, r3, #7
 8003498:	b2da      	uxtb	r2, r3
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034a2:	0c9b      	lsrs	r3, r3, #18
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	f003 0307 	and.w	r3, r3, #7
 80034aa:	b2da      	uxtb	r2, r3
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034b4:	0bdb      	lsrs	r3, r3, #15
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	f003 0307 	and.w	r3, r3, #7
 80034bc:	b2da      	uxtb	r2, r3
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	1c5a      	adds	r2, r3, #1
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	7e1b      	ldrb	r3, [r3, #24]
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	f003 0307 	and.w	r3, r3, #7
 80034d6:	3302      	adds	r3, #2
 80034d8:	2201      	movs	r2, #1
 80034da:	fa02 f303 	lsl.w	r3, r2, r3
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80034e2:	fb02 f203 	mul.w	r2, r2, r3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	7a1b      	ldrb	r3, [r3, #8]
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	f003 030f 	and.w	r3, r3, #15
 80034f4:	2201      	movs	r2, #1
 80034f6:	409a      	lsls	r2, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003504:	0a52      	lsrs	r2, r2, #9
 8003506:	fb02 f203 	mul.w	r2, r2, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003514:	661a      	str	r2, [r3, #96]	; 0x60
 8003516:	e031      	b.n	800357c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800351c:	2b01      	cmp	r3, #1
 800351e:	d11d      	bne.n	800355c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003524:	041b      	lsls	r3, r3, #16
 8003526:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800352e:	0c1b      	lsrs	r3, r3, #16
 8003530:	431a      	orrs	r2, r3
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	3301      	adds	r3, #1
 800353c:	029a      	lsls	r2, r3, #10
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003550:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	661a      	str	r2, [r3, #96]	; 0x60
 800355a:	e00f      	b.n	800357c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a58      	ldr	r2, [pc, #352]	; (80036c4 <HAL_SD_GetCardCSD+0x344>)
 8003562:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003568:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e09d      	b.n	80036b8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003580:	0b9b      	lsrs	r3, r3, #14
 8003582:	b2db      	uxtb	r3, r3
 8003584:	f003 0301 	and.w	r3, r3, #1
 8003588:	b2da      	uxtb	r2, r3
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003592:	09db      	lsrs	r3, r3, #7
 8003594:	b2db      	uxtb	r3, r3
 8003596:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800359a:	b2da      	uxtb	r2, r3
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035aa:	b2da      	uxtb	r2, r3
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b4:	0fdb      	lsrs	r3, r3, #31
 80035b6:	b2da      	uxtb	r2, r3
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c0:	0f5b      	lsrs	r3, r3, #29
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	f003 0303 	and.w	r3, r3, #3
 80035c8:	b2da      	uxtb	r2, r3
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d2:	0e9b      	lsrs	r3, r3, #26
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	f003 0307 	and.w	r3, r3, #7
 80035da:	b2da      	uxtb	r2, r3
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e4:	0d9b      	lsrs	r3, r3, #22
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	f003 030f 	and.w	r3, r3, #15
 80035ec:	b2da      	uxtb	r2, r3
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f6:	0d5b      	lsrs	r3, r3, #21
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	f003 0301 	and.w	r3, r3, #1
 80035fe:	b2da      	uxtb	r2, r3
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003612:	0c1b      	lsrs	r3, r3, #16
 8003614:	b2db      	uxtb	r3, r3
 8003616:	f003 0301 	and.w	r3, r3, #1
 800361a:	b2da      	uxtb	r2, r3
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003626:	0bdb      	lsrs	r3, r3, #15
 8003628:	b2db      	uxtb	r3, r3
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	b2da      	uxtb	r2, r3
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800363a:	0b9b      	lsrs	r3, r3, #14
 800363c:	b2db      	uxtb	r3, r3
 800363e:	f003 0301 	and.w	r3, r3, #1
 8003642:	b2da      	uxtb	r2, r3
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800364e:	0b5b      	lsrs	r3, r3, #13
 8003650:	b2db      	uxtb	r3, r3
 8003652:	f003 0301 	and.w	r3, r3, #1
 8003656:	b2da      	uxtb	r2, r3
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003662:	0b1b      	lsrs	r3, r3, #12
 8003664:	b2db      	uxtb	r3, r3
 8003666:	f003 0301 	and.w	r3, r3, #1
 800366a:	b2da      	uxtb	r2, r3
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003676:	0a9b      	lsrs	r3, r3, #10
 8003678:	b2db      	uxtb	r3, r3
 800367a:	f003 0303 	and.w	r3, r3, #3
 800367e:	b2da      	uxtb	r2, r3
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800368a:	0a1b      	lsrs	r3, r3, #8
 800368c:	b2db      	uxtb	r3, r3
 800368e:	f003 0303 	and.w	r3, r3, #3
 8003692:	b2da      	uxtb	r2, r3
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800369e:	085b      	lsrs	r3, r3, #1
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036a6:	b2da      	uxtb	r2, r3
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	2201      	movs	r2, #1
 80036b2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	370c      	adds	r7, #12
 80036bc:	46bd      	mov	sp, r7
 80036be:	bc80      	pop	{r7}
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	004005ff 	.word	0x004005ff

080036c8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8003712:	2300      	movs	r3, #0
}
 8003714:	4618      	mov	r0, r3
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	bc80      	pop	{r7}
 800371c:	4770      	bx	lr
	...

08003720 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8003720:	b5b0      	push	{r4, r5, r7, lr}
 8003722:	b08e      	sub	sp, #56	; 0x38
 8003724:	af04      	add	r7, sp, #16
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2203      	movs	r2, #3
 800372e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003736:	2b03      	cmp	r3, #3
 8003738:	d02e      	beq.n	8003798 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003740:	d106      	bne.n	8003750 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003746:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	639a      	str	r2, [r3, #56]	; 0x38
 800374e:	e029      	b.n	80037a4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003756:	d10a      	bne.n	800376e <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 fa6f 	bl	8003c3c <SD_WideBus_Enable>
 800375e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003766:	431a      	orrs	r2, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	639a      	str	r2, [r3, #56]	; 0x38
 800376c:	e01a      	b.n	80037a4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d10a      	bne.n	800378a <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f000 faac 	bl	8003cd2 <SD_WideBus_Disable>
 800377a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003782:	431a      	orrs	r2, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	639a      	str	r2, [r3, #56]	; 0x38
 8003788:	e00c      	b.n	80037a4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800378e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	639a      	str	r2, [r3, #56]	; 0x38
 8003796:	e005      	b.n	80037a4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800379c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d009      	beq.n	80037c0 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a18      	ldr	r2, [pc, #96]	; (8003814 <HAL_SD_ConfigWideBusOperation+0xf4>)
 80037b2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e024      	b.n	800380a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	695b      	ldr	r3, [r3, #20]
 80037da:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	699b      	ldr	r3, [r3, #24]
 80037e0:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681d      	ldr	r5, [r3, #0]
 80037e6:	466c      	mov	r4, sp
 80037e8:	f107 0318 	add.w	r3, r7, #24
 80037ec:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80037f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80037f4:	f107 030c 	add.w	r3, r7, #12
 80037f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037fa:	4628      	mov	r0, r5
 80037fc:	f000 fffe 	bl	80047fc <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3728      	adds	r7, #40	; 0x28
 800380e:	46bd      	mov	sp, r7
 8003810:	bdb0      	pop	{r4, r5, r7, pc}
 8003812:	bf00      	nop
 8003814:	004005ff 	.word	0x004005ff

08003818 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b086      	sub	sp, #24
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003820:	2300      	movs	r3, #0
 8003822:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003824:	f107 030c 	add.w	r3, r7, #12
 8003828:	4619      	mov	r1, r3
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 f9de 	bl	8003bec <SD_SendStatus>
 8003830:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d005      	beq.n	8003844 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	431a      	orrs	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	0a5b      	lsrs	r3, r3, #9
 8003848:	f003 030f 	and.w	r3, r3, #15
 800384c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800384e:	693b      	ldr	r3, [r7, #16]
}
 8003850:	4618      	mov	r0, r3
 8003852:	3718      	adds	r7, #24
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003864:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f240 523a 	movw	r2, #1338	; 0x53a
 800386e:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8003870:	68f8      	ldr	r0, [r7, #12]
 8003872:	f7ff ffd1 	bl	8003818 <HAL_SD_GetCardState>
 8003876:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2200      	movs	r2, #0
 8003884:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	2b06      	cmp	r3, #6
 800388a:	d002      	beq.n	8003892 <SD_DMATxAbort+0x3a>
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	2b05      	cmp	r3, #5
 8003890:	d10a      	bne.n	80038a8 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4618      	mov	r0, r3
 8003898:	f001 f92e 	bl	8004af8 <SDMMC_CmdStopTransfer>
 800389c:	4602      	mov	r2, r0
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a2:	431a      	orrs	r2, r3
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d103      	bne.n	80038b8 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80038b0:	68f8      	ldr	r0, [r7, #12]
 80038b2:	f001 fd99 	bl	80053e8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80038b6:	e002      	b.n	80038be <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80038b8:	68f8      	ldr	r0, [r7, #12]
 80038ba:	f7ff fd57 	bl	800336c <HAL_SD_ErrorCallback>
}
 80038be:	bf00      	nop
 80038c0:	3710      	adds	r7, #16
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}

080038c6 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80038c6:	b580      	push	{r7, lr}
 80038c8:	b084      	sub	sp, #16
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d2:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f240 523a 	movw	r2, #1338	; 0x53a
 80038dc:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80038de:	68f8      	ldr	r0, [r7, #12]
 80038e0:	f7ff ff9a 	bl	8003818 <HAL_SD_GetCardState>
 80038e4:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2201      	movs	r2, #1
 80038ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2200      	movs	r2, #0
 80038f2:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	2b06      	cmp	r3, #6
 80038f8:	d002      	beq.n	8003900 <SD_DMARxAbort+0x3a>
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	2b05      	cmp	r3, #5
 80038fe:	d10a      	bne.n	8003916 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4618      	mov	r0, r3
 8003906:	f001 f8f7 	bl	8004af8 <SDMMC_CmdStopTransfer>
 800390a:	4602      	mov	r2, r0
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003910:	431a      	orrs	r2, r3
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800391a:	2b00      	cmp	r3, #0
 800391c:	d103      	bne.n	8003926 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800391e:	68f8      	ldr	r0, [r7, #12]
 8003920:	f001 fd62 	bl	80053e8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003924:	e002      	b.n	800392c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003926:	68f8      	ldr	r0, [r7, #12]
 8003928:	f7ff fd20 	bl	800336c <HAL_SD_ErrorCallback>
}
 800392c:	bf00      	nop
 800392e:	3710      	adds	r7, #16
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003934:	b5b0      	push	{r4, r5, r7, lr}
 8003936:	b094      	sub	sp, #80	; 0x50
 8003938:	af04      	add	r7, sp, #16
 800393a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800393c:	2301      	movs	r3, #1
 800393e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4618      	mov	r0, r3
 8003946:	f000 ffae 	bl	80048a6 <SDIO_GetPowerState>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d102      	bne.n	8003956 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003950:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003954:	e0b7      	b.n	8003ac6 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800395a:	2b03      	cmp	r3, #3
 800395c:	d02f      	beq.n	80039be <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4618      	mov	r0, r3
 8003964:	f001 f9d2 	bl	8004d0c <SDMMC_CmdSendCID>
 8003968:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800396a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800396c:	2b00      	cmp	r3, #0
 800396e:	d001      	beq.n	8003974 <SD_InitCard+0x40>
    {
      return errorstate;
 8003970:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003972:	e0a8      	b.n	8003ac6 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2100      	movs	r1, #0
 800397a:	4618      	mov	r0, r3
 800397c:	f000 ffd5 	bl	800492a <SDIO_GetResponse>
 8003980:	4602      	mov	r2, r0
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2104      	movs	r1, #4
 800398c:	4618      	mov	r0, r3
 800398e:	f000 ffcc 	bl	800492a <SDIO_GetResponse>
 8003992:	4602      	mov	r2, r0
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2108      	movs	r1, #8
 800399e:	4618      	mov	r0, r3
 80039a0:	f000 ffc3 	bl	800492a <SDIO_GetResponse>
 80039a4:	4602      	mov	r2, r0
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	210c      	movs	r1, #12
 80039b0:	4618      	mov	r0, r3
 80039b2:	f000 ffba 	bl	800492a <SDIO_GetResponse>
 80039b6:	4602      	mov	r2, r0
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c2:	2b03      	cmp	r3, #3
 80039c4:	d00d      	beq.n	80039e2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f107 020e 	add.w	r2, r7, #14
 80039ce:	4611      	mov	r1, r2
 80039d0:	4618      	mov	r0, r3
 80039d2:	f001 f9d8 	bl	8004d86 <SDMMC_CmdSetRelAdd>
 80039d6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80039d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d001      	beq.n	80039e2 <SD_InitCard+0xae>
    {
      return errorstate;
 80039de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039e0:	e071      	b.n	8003ac6 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e6:	2b03      	cmp	r3, #3
 80039e8:	d036      	beq.n	8003a58 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80039ea:	89fb      	ldrh	r3, [r7, #14]
 80039ec:	461a      	mov	r2, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039fa:	041b      	lsls	r3, r3, #16
 80039fc:	4619      	mov	r1, r3
 80039fe:	4610      	mov	r0, r2
 8003a00:	f001 f9a2 	bl	8004d48 <SDMMC_CmdSendCSD>
 8003a04:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003a06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d001      	beq.n	8003a10 <SD_InitCard+0xdc>
    {
      return errorstate;
 8003a0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a0e:	e05a      	b.n	8003ac6 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2100      	movs	r1, #0
 8003a16:	4618      	mov	r0, r3
 8003a18:	f000 ff87 	bl	800492a <SDIO_GetResponse>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2104      	movs	r1, #4
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f000 ff7e 	bl	800492a <SDIO_GetResponse>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	2108      	movs	r1, #8
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f000 ff75 	bl	800492a <SDIO_GetResponse>
 8003a40:	4602      	mov	r2, r0
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	210c      	movs	r1, #12
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f000 ff6c 	bl	800492a <SDIO_GetResponse>
 8003a52:	4602      	mov	r2, r0
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2104      	movs	r1, #4
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f000 ff63 	bl	800492a <SDIO_GetResponse>
 8003a64:	4603      	mov	r3, r0
 8003a66:	0d1a      	lsrs	r2, r3, #20
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003a6c:	f107 0310 	add.w	r3, r7, #16
 8003a70:	4619      	mov	r1, r3
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f7ff fc84 	bl	8003380 <HAL_SD_GetCardCSD>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d002      	beq.n	8003a84 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003a7e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003a82:	e020      	b.n	8003ac6 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6819      	ldr	r1, [r3, #0]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a8c:	041b      	lsls	r3, r3, #16
 8003a8e:	f04f 0400 	mov.w	r4, #0
 8003a92:	461a      	mov	r2, r3
 8003a94:	4623      	mov	r3, r4
 8003a96:	4608      	mov	r0, r1
 8003a98:	f001 f850 	bl	8004b3c <SDMMC_CmdSelDesel>
 8003a9c:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003a9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d001      	beq.n	8003aa8 <SD_InitCard+0x174>
  {
    return errorstate;
 8003aa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003aa6:	e00e      	b.n	8003ac6 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681d      	ldr	r5, [r3, #0]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	466c      	mov	r4, sp
 8003ab0:	f103 0210 	add.w	r2, r3, #16
 8003ab4:	ca07      	ldmia	r2, {r0, r1, r2}
 8003ab6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003aba:	3304      	adds	r3, #4
 8003abc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003abe:	4628      	mov	r0, r5
 8003ac0:	f000 fe9c 	bl	80047fc <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3740      	adds	r7, #64	; 0x40
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003ad0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b086      	sub	sp, #24
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003adc:	2300      	movs	r3, #0
 8003ade:	617b      	str	r3, [r7, #20]
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f001 f84a 	bl	8004b82 <SDMMC_CmdGoIdleState>
 8003aee:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d001      	beq.n	8003afa <SD_PowerON+0x2a>
  {
    return errorstate;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	e072      	b.n	8003be0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4618      	mov	r0, r3
 8003b00:	f001 f85d 	bl	8004bbe <SDMMC_CmdOperCond>
 8003b04:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d00d      	beq.n	8003b28 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4618      	mov	r0, r3
 8003b18:	f001 f833 	bl	8004b82 <SDMMC_CmdGoIdleState>
 8003b1c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d004      	beq.n	8003b2e <SD_PowerON+0x5e>
    {
      return errorstate;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	e05b      	b.n	8003be0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d137      	bne.n	8003ba6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2100      	movs	r1, #0
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f001 f85d 	bl	8004bfc <SDMMC_CmdAppCommand>
 8003b42:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d02d      	beq.n	8003ba6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003b4a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003b4e:	e047      	b.n	8003be0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2100      	movs	r1, #0
 8003b56:	4618      	mov	r0, r3
 8003b58:	f001 f850 	bl	8004bfc <SDMMC_CmdAppCommand>
 8003b5c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d001      	beq.n	8003b68 <SD_PowerON+0x98>
    {
      return errorstate;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	e03b      	b.n	8003be0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	491e      	ldr	r1, [pc, #120]	; (8003be8 <SD_PowerON+0x118>)
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f001 f866 	bl	8004c40 <SDMMC_CmdAppOperCommand>
 8003b74:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d002      	beq.n	8003b82 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003b7c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003b80:	e02e      	b.n	8003be0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2100      	movs	r1, #0
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f000 fece 	bl	800492a <SDIO_GetResponse>
 8003b8e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	0fdb      	lsrs	r3, r3, #31
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d101      	bne.n	8003b9c <SD_PowerON+0xcc>
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e000      	b.n	8003b9e <SD_PowerON+0xce>
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	613b      	str	r3, [r7, #16]

    count++;
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d802      	bhi.n	8003bb6 <SD_PowerON+0xe6>
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d0cc      	beq.n	8003b50 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d902      	bls.n	8003bc6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003bc0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003bc4:	e00c      	b.n	8003be0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d003      	beq.n	8003bd8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	645a      	str	r2, [r3, #68]	; 0x44
 8003bd6:	e002      	b.n	8003bde <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8003bde:	2300      	movs	r3, #0
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3718      	adds	r7, #24
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	c1100000 	.word	0xc1100000

08003bec <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d102      	bne.n	8003c02 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8003bfc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003c00:	e018      	b.n	8003c34 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c0a:	041b      	lsls	r3, r3, #16
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	4610      	mov	r0, r2
 8003c10:	f001 f8da 	bl	8004dc8 <SDMMC_CmdSendStatus>
 8003c14:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d001      	beq.n	8003c20 <SD_SendStatus+0x34>
  {
    return errorstate;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	e009      	b.n	8003c34 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2100      	movs	r1, #0
 8003c26:	4618      	mov	r0, r3
 8003c28:	f000 fe7f 	bl	800492a <SDIO_GetResponse>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3710      	adds	r7, #16
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b086      	sub	sp, #24
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003c44:	2300      	movs	r3, #0
 8003c46:	60fb      	str	r3, [r7, #12]
 8003c48:	2300      	movs	r3, #0
 8003c4a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2100      	movs	r1, #0
 8003c52:	4618      	mov	r0, r3
 8003c54:	f000 fe69 	bl	800492a <SDIO_GetResponse>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c62:	d102      	bne.n	8003c6a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003c64:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003c68:	e02f      	b.n	8003cca <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003c6a:	f107 030c 	add.w	r3, r7, #12
 8003c6e:	4619      	mov	r1, r3
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f000 f879 	bl	8003d68 <SD_FindSCR>
 8003c76:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d001      	beq.n	8003c82 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	e023      	b.n	8003cca <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d01c      	beq.n	8003cc6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c94:	041b      	lsls	r3, r3, #16
 8003c96:	4619      	mov	r1, r3
 8003c98:	4610      	mov	r0, r2
 8003c9a:	f000 ffaf 	bl	8004bfc <SDMMC_CmdAppCommand>
 8003c9e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d001      	beq.n	8003caa <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	e00f      	b.n	8003cca <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2102      	movs	r1, #2
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f000 ffe8 	bl	8004c86 <SDMMC_CmdBusWidth>
 8003cb6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d001      	beq.n	8003cc2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	e003      	b.n	8003cca <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	e001      	b.n	8003cca <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003cc6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3718      	adds	r7, #24
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}

08003cd2 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8003cd2:	b580      	push	{r7, lr}
 8003cd4:	b086      	sub	sp, #24
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003cda:	2300      	movs	r3, #0
 8003cdc:	60fb      	str	r3, [r7, #12]
 8003cde:	2300      	movs	r3, #0
 8003ce0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2100      	movs	r1, #0
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f000 fe1e 	bl	800492a <SDIO_GetResponse>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cf4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003cf8:	d102      	bne.n	8003d00 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003cfa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003cfe:	e02f      	b.n	8003d60 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003d00:	f107 030c 	add.w	r3, r7, #12
 8003d04:	4619      	mov	r1, r3
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f000 f82e 	bl	8003d68 <SD_FindSCR>
 8003d0c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d001      	beq.n	8003d18 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	e023      	b.n	8003d60 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d01c      	beq.n	8003d5c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d2a:	041b      	lsls	r3, r3, #16
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	4610      	mov	r0, r2
 8003d30:	f000 ff64 	bl	8004bfc <SDMMC_CmdAppCommand>
 8003d34:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d001      	beq.n	8003d40 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	e00f      	b.n	8003d60 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2100      	movs	r1, #0
 8003d46:	4618      	mov	r0, r3
 8003d48:	f000 ff9d 	bl	8004c86 <SDMMC_CmdBusWidth>
 8003d4c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d001      	beq.n	8003d58 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	e003      	b.n	8003d60 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	e001      	b.n	8003d60 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003d5c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3718      	adds	r7, #24
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8003d68:	b590      	push	{r4, r7, lr}
 8003d6a:	b08f      	sub	sp, #60	; 0x3c
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003d72:	f7fd facb 	bl	800130c <HAL_GetTick>
 8003d76:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	60bb      	str	r3, [r7, #8]
 8003d80:	2300      	movs	r3, #0
 8003d82:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2108      	movs	r1, #8
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f000 fe08 	bl	80049a4 <SDMMC_CmdBlockLength>
 8003d94:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d001      	beq.n	8003da0 <SD_FindSCR+0x38>
  {
    return errorstate;
 8003d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d9e:	e0a9      	b.n	8003ef4 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003da8:	041b      	lsls	r3, r3, #16
 8003daa:	4619      	mov	r1, r3
 8003dac:	4610      	mov	r0, r2
 8003dae:	f000 ff25 	bl	8004bfc <SDMMC_CmdAppCommand>
 8003db2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d001      	beq.n	8003dbe <SD_FindSCR+0x56>
  {
    return errorstate;
 8003dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dbc:	e09a      	b.n	8003ef4 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8003dc2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8003dc4:	2308      	movs	r3, #8
 8003dc6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8003dc8:	2330      	movs	r3, #48	; 0x30
 8003dca:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003dcc:	2302      	movs	r3, #2
 8003dce:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f107 0210 	add.w	r2, r7, #16
 8003de0:	4611      	mov	r1, r2
 8003de2:	4618      	mov	r0, r3
 8003de4:	f000 fdb3 	bl	800494e <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4618      	mov	r0, r3
 8003dee:	f000 ff6c 	bl	8004cca <SDMMC_CmdSendSCR>
 8003df2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d022      	beq.n	8003e40 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8003dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dfc:	e07a      	b.n	8003ef4 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d00e      	beq.n	8003e2a <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6819      	ldr	r1, [r3, #0]
 8003e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	f107 0208 	add.w	r2, r7, #8
 8003e18:	18d4      	adds	r4, r2, r3
 8003e1a:	4608      	mov	r0, r1
 8003e1c:	f000 fd18 	bl	8004850 <SDIO_ReadFIFO>
 8003e20:	4603      	mov	r3, r0
 8003e22:	6023      	str	r3, [r4, #0]
      index++;
 8003e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e26:	3301      	adds	r3, #1
 8003e28:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8003e2a:	f7fd fa6f 	bl	800130c <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e38:	d102      	bne.n	8003e40 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8003e3a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003e3e:	e059      	b.n	8003ef4 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e46:	f240 432a 	movw	r3, #1066	; 0x42a
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d0d6      	beq.n	8003dfe <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e56:	f003 0308 	and.w	r3, r3, #8
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d005      	beq.n	8003e6a <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2208      	movs	r2, #8
 8003e64:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8003e66:	2308      	movs	r3, #8
 8003e68:	e044      	b.n	8003ef4 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e70:	f003 0302 	and.w	r3, r3, #2
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d005      	beq.n	8003e84 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2202      	movs	r2, #2
 8003e7e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8003e80:	2302      	movs	r3, #2
 8003e82:	e037      	b.n	8003ef4 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e8a:	f003 0320 	and.w	r3, r3, #32
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d005      	beq.n	8003e9e <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2220      	movs	r2, #32
 8003e98:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8003e9a:	2320      	movs	r3, #32
 8003e9c:	e02a      	b.n	8003ef4 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f240 523a 	movw	r2, #1338	; 0x53a
 8003ea6:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	061a      	lsls	r2, r3, #24
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	021b      	lsls	r3, r3, #8
 8003eb0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003eb4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	0a1b      	lsrs	r3, r3, #8
 8003eba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003ebe:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	0e1b      	lsrs	r3, r3, #24
 8003ec4:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ec8:	601a      	str	r2, [r3, #0]
    scr++;
 8003eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ecc:	3304      	adds	r3, #4
 8003ece:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	061a      	lsls	r2, r3, #24
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	021b      	lsls	r3, r3, #8
 8003ed8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003edc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	0a1b      	lsrs	r3, r3, #8
 8003ee2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003ee6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	0e1b      	lsrs	r3, r3, #24
 8003eec:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8003ef2:	2300      	movs	r3, #0
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	373c      	adds	r7, #60	; 0x3c
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd90      	pop	{r4, r7, pc}

08003efc <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b086      	sub	sp, #24
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f08:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d03f      	beq.n	8003f96 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8003f16:	2300      	movs	r3, #0
 8003f18:	617b      	str	r3, [r7, #20]
 8003f1a:	e033      	b.n	8003f84 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4618      	mov	r0, r3
 8003f22:	f000 fc95 	bl	8004850 <SDIO_ReadFIFO>
 8003f26:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	b2da      	uxtb	r2, r3
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	3301      	adds	r3, #1
 8003f34:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	0a1b      	lsrs	r3, r3, #8
 8003f40:	b2da      	uxtb	r2, r3
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	3301      	adds	r3, #1
 8003f4a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	0c1b      	lsrs	r3, r3, #16
 8003f56:	b2da      	uxtb	r2, r3
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	3301      	adds	r3, #1
 8003f60:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	3b01      	subs	r3, #1
 8003f66:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	0e1b      	lsrs	r3, r3, #24
 8003f6c:	b2da      	uxtb	r2, r3
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	3301      	adds	r3, #1
 8003f76:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	3301      	adds	r3, #1
 8003f82:	617b      	str	r3, [r7, #20]
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	2b07      	cmp	r3, #7
 8003f88:	d9c8      	bls.n	8003f1c <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	68fa      	ldr	r2, [r7, #12]
 8003f8e:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	693a      	ldr	r2, [r7, #16]
 8003f94:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8003f96:	bf00      	nop
 8003f98:	3718      	adds	r7, #24
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}

08003f9e <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8003f9e:	b580      	push	{r7, lr}
 8003fa0:	b086      	sub	sp, #24
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a1b      	ldr	r3, [r3, #32]
 8003faa:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb0:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d043      	beq.n	8004040 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8003fb8:	2300      	movs	r3, #0
 8003fba:	617b      	str	r3, [r7, #20]
 8003fbc:	e037      	b.n	800402e <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	3b01      	subs	r3, #1
 8003fce:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	021a      	lsls	r2, r3, #8
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	3301      	adds	r3, #1
 8003fe0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	3b01      	subs	r3, #1
 8003fe6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	041a      	lsls	r2, r3, #16
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	3301      	adds	r3, #1
 8003ff8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	3b01      	subs	r3, #1
 8003ffe:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	061a      	lsls	r2, r3, #24
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	4313      	orrs	r3, r2
 800400a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	3301      	adds	r3, #1
 8004010:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	3b01      	subs	r3, #1
 8004016:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f107 0208 	add.w	r2, r7, #8
 8004020:	4611      	mov	r1, r2
 8004022:	4618      	mov	r0, r3
 8004024:	f000 fc20 	bl	8004868 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	3301      	adds	r3, #1
 800402c:	617b      	str	r3, [r7, #20]
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	2b07      	cmp	r3, #7
 8004032:	d9c4      	bls.n	8003fbe <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	693a      	ldr	r2, [r7, #16]
 800403e:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8004040:	bf00      	nop
 8004042:	3718      	adds	r7, #24
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d101      	bne.n	800405a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e041      	b.n	80040de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004060:	b2db      	uxtb	r3, r3
 8004062:	2b00      	cmp	r3, #0
 8004064:	d106      	bne.n	8004074 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 f839 	bl	80040e6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2202      	movs	r2, #2
 8004078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	3304      	adds	r3, #4
 8004084:	4619      	mov	r1, r3
 8004086:	4610      	mov	r0, r2
 8004088:	f000 f9d0 	bl	800442c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3708      	adds	r7, #8
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}

080040e6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80040e6:	b480      	push	{r7}
 80040e8:	b083      	sub	sp, #12
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80040ee:	bf00      	nop
 80040f0:	370c      	adds	r7, #12
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bc80      	pop	{r7}
 80040f6:	4770      	bx	lr

080040f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b085      	sub	sp, #20
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004106:	b2db      	uxtb	r3, r3
 8004108:	2b01      	cmp	r3, #1
 800410a:	d001      	beq.n	8004110 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e04e      	b.n	80041ae <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2202      	movs	r2, #2
 8004114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	68da      	ldr	r2, [r3, #12]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f042 0201 	orr.w	r2, r2, #1
 8004126:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a22      	ldr	r2, [pc, #136]	; (80041b8 <HAL_TIM_Base_Start_IT+0xc0>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d022      	beq.n	8004178 <HAL_TIM_Base_Start_IT+0x80>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800413a:	d01d      	beq.n	8004178 <HAL_TIM_Base_Start_IT+0x80>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a1e      	ldr	r2, [pc, #120]	; (80041bc <HAL_TIM_Base_Start_IT+0xc4>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d018      	beq.n	8004178 <HAL_TIM_Base_Start_IT+0x80>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a1d      	ldr	r2, [pc, #116]	; (80041c0 <HAL_TIM_Base_Start_IT+0xc8>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d013      	beq.n	8004178 <HAL_TIM_Base_Start_IT+0x80>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a1b      	ldr	r2, [pc, #108]	; (80041c4 <HAL_TIM_Base_Start_IT+0xcc>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d00e      	beq.n	8004178 <HAL_TIM_Base_Start_IT+0x80>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a1a      	ldr	r2, [pc, #104]	; (80041c8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d009      	beq.n	8004178 <HAL_TIM_Base_Start_IT+0x80>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a18      	ldr	r2, [pc, #96]	; (80041cc <HAL_TIM_Base_Start_IT+0xd4>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d004      	beq.n	8004178 <HAL_TIM_Base_Start_IT+0x80>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a17      	ldr	r2, [pc, #92]	; (80041d0 <HAL_TIM_Base_Start_IT+0xd8>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d111      	bne.n	800419c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f003 0307 	and.w	r3, r3, #7
 8004182:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2b06      	cmp	r3, #6
 8004188:	d010      	beq.n	80041ac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f042 0201 	orr.w	r2, r2, #1
 8004198:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800419a:	e007      	b.n	80041ac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f042 0201 	orr.w	r2, r2, #1
 80041aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3714      	adds	r7, #20
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bc80      	pop	{r7}
 80041b6:	4770      	bx	lr
 80041b8:	40010000 	.word	0x40010000
 80041bc:	40000400 	.word	0x40000400
 80041c0:	40000800 	.word	0x40000800
 80041c4:	40000c00 	.word	0x40000c00
 80041c8:	40010400 	.word	0x40010400
 80041cc:	40014000 	.word	0x40014000
 80041d0:	40001800 	.word	0x40001800

080041d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	f003 0302 	and.w	r3, r3, #2
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d122      	bne.n	8004230 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	f003 0302 	and.w	r3, r3, #2
 80041f4:	2b02      	cmp	r3, #2
 80041f6:	d11b      	bne.n	8004230 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f06f 0202 	mvn.w	r2, #2
 8004200:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2201      	movs	r2, #1
 8004206:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	699b      	ldr	r3, [r3, #24]
 800420e:	f003 0303 	and.w	r3, r3, #3
 8004212:	2b00      	cmp	r3, #0
 8004214:	d003      	beq.n	800421e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 f8ed 	bl	80043f6 <HAL_TIM_IC_CaptureCallback>
 800421c:	e005      	b.n	800422a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f000 f8e0 	bl	80043e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f000 f8ef 	bl	8004408 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	f003 0304 	and.w	r3, r3, #4
 800423a:	2b04      	cmp	r3, #4
 800423c:	d122      	bne.n	8004284 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	f003 0304 	and.w	r3, r3, #4
 8004248:	2b04      	cmp	r3, #4
 800424a:	d11b      	bne.n	8004284 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f06f 0204 	mvn.w	r2, #4
 8004254:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2202      	movs	r2, #2
 800425a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	699b      	ldr	r3, [r3, #24]
 8004262:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004266:	2b00      	cmp	r3, #0
 8004268:	d003      	beq.n	8004272 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 f8c3 	bl	80043f6 <HAL_TIM_IC_CaptureCallback>
 8004270:	e005      	b.n	800427e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 f8b6 	bl	80043e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f000 f8c5 	bl	8004408 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	f003 0308 	and.w	r3, r3, #8
 800428e:	2b08      	cmp	r3, #8
 8004290:	d122      	bne.n	80042d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	f003 0308 	and.w	r3, r3, #8
 800429c:	2b08      	cmp	r3, #8
 800429e:	d11b      	bne.n	80042d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f06f 0208 	mvn.w	r2, #8
 80042a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2204      	movs	r2, #4
 80042ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	69db      	ldr	r3, [r3, #28]
 80042b6:	f003 0303 	and.w	r3, r3, #3
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d003      	beq.n	80042c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f000 f899 	bl	80043f6 <HAL_TIM_IC_CaptureCallback>
 80042c4:	e005      	b.n	80042d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 f88c 	bl	80043e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f000 f89b 	bl	8004408 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	f003 0310 	and.w	r3, r3, #16
 80042e2:	2b10      	cmp	r3, #16
 80042e4:	d122      	bne.n	800432c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	f003 0310 	and.w	r3, r3, #16
 80042f0:	2b10      	cmp	r3, #16
 80042f2:	d11b      	bne.n	800432c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f06f 0210 	mvn.w	r2, #16
 80042fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2208      	movs	r2, #8
 8004302:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	69db      	ldr	r3, [r3, #28]
 800430a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800430e:	2b00      	cmp	r3, #0
 8004310:	d003      	beq.n	800431a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 f86f 	bl	80043f6 <HAL_TIM_IC_CaptureCallback>
 8004318:	e005      	b.n	8004326 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 f862 	bl	80043e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f000 f871 	bl	8004408 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	f003 0301 	and.w	r3, r3, #1
 8004336:	2b01      	cmp	r3, #1
 8004338:	d10e      	bne.n	8004358 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	f003 0301 	and.w	r3, r3, #1
 8004344:	2b01      	cmp	r3, #1
 8004346:	d107      	bne.n	8004358 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f06f 0201 	mvn.w	r2, #1
 8004350:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f7fc fcd4 	bl	8000d00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004362:	2b80      	cmp	r3, #128	; 0x80
 8004364:	d10e      	bne.n	8004384 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004370:	2b80      	cmp	r3, #128	; 0x80
 8004372:	d107      	bne.n	8004384 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800437c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f000 f8fb 	bl	800457a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800438e:	2b40      	cmp	r3, #64	; 0x40
 8004390:	d10e      	bne.n	80043b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800439c:	2b40      	cmp	r3, #64	; 0x40
 800439e:	d107      	bne.n	80043b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80043a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 f835 	bl	800441a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	f003 0320 	and.w	r3, r3, #32
 80043ba:	2b20      	cmp	r3, #32
 80043bc:	d10e      	bne.n	80043dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	f003 0320 	and.w	r3, r3, #32
 80043c8:	2b20      	cmp	r3, #32
 80043ca:	d107      	bne.n	80043dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f06f 0220 	mvn.w	r2, #32
 80043d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 f8c6 	bl	8004568 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043dc:	bf00      	nop
 80043de:	3708      	adds	r7, #8
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043ec:	bf00      	nop
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bc80      	pop	{r7}
 80043f4:	4770      	bx	lr

080043f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043f6:	b480      	push	{r7}
 80043f8:	b083      	sub	sp, #12
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80043fe:	bf00      	nop
 8004400:	370c      	adds	r7, #12
 8004402:	46bd      	mov	sp, r7
 8004404:	bc80      	pop	{r7}
 8004406:	4770      	bx	lr

08004408 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004410:	bf00      	nop
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	bc80      	pop	{r7}
 8004418:	4770      	bx	lr

0800441a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800441a:	b480      	push	{r7}
 800441c:	b083      	sub	sp, #12
 800441e:	af00      	add	r7, sp, #0
 8004420:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004422:	bf00      	nop
 8004424:	370c      	adds	r7, #12
 8004426:	46bd      	mov	sp, r7
 8004428:	bc80      	pop	{r7}
 800442a:	4770      	bx	lr

0800442c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800442c:	b480      	push	{r7}
 800442e:	b085      	sub	sp, #20
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	4a3f      	ldr	r2, [pc, #252]	; (800453c <TIM_Base_SetConfig+0x110>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d013      	beq.n	800446c <TIM_Base_SetConfig+0x40>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800444a:	d00f      	beq.n	800446c <TIM_Base_SetConfig+0x40>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4a3c      	ldr	r2, [pc, #240]	; (8004540 <TIM_Base_SetConfig+0x114>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d00b      	beq.n	800446c <TIM_Base_SetConfig+0x40>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	4a3b      	ldr	r2, [pc, #236]	; (8004544 <TIM_Base_SetConfig+0x118>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d007      	beq.n	800446c <TIM_Base_SetConfig+0x40>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a3a      	ldr	r2, [pc, #232]	; (8004548 <TIM_Base_SetConfig+0x11c>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d003      	beq.n	800446c <TIM_Base_SetConfig+0x40>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4a39      	ldr	r2, [pc, #228]	; (800454c <TIM_Base_SetConfig+0x120>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d108      	bne.n	800447e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004472:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	68fa      	ldr	r2, [r7, #12]
 800447a:	4313      	orrs	r3, r2
 800447c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a2e      	ldr	r2, [pc, #184]	; (800453c <TIM_Base_SetConfig+0x110>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d02b      	beq.n	80044de <TIM_Base_SetConfig+0xb2>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800448c:	d027      	beq.n	80044de <TIM_Base_SetConfig+0xb2>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a2b      	ldr	r2, [pc, #172]	; (8004540 <TIM_Base_SetConfig+0x114>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d023      	beq.n	80044de <TIM_Base_SetConfig+0xb2>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a2a      	ldr	r2, [pc, #168]	; (8004544 <TIM_Base_SetConfig+0x118>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d01f      	beq.n	80044de <TIM_Base_SetConfig+0xb2>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a29      	ldr	r2, [pc, #164]	; (8004548 <TIM_Base_SetConfig+0x11c>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d01b      	beq.n	80044de <TIM_Base_SetConfig+0xb2>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a28      	ldr	r2, [pc, #160]	; (800454c <TIM_Base_SetConfig+0x120>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d017      	beq.n	80044de <TIM_Base_SetConfig+0xb2>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a27      	ldr	r2, [pc, #156]	; (8004550 <TIM_Base_SetConfig+0x124>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d013      	beq.n	80044de <TIM_Base_SetConfig+0xb2>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a26      	ldr	r2, [pc, #152]	; (8004554 <TIM_Base_SetConfig+0x128>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d00f      	beq.n	80044de <TIM_Base_SetConfig+0xb2>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a25      	ldr	r2, [pc, #148]	; (8004558 <TIM_Base_SetConfig+0x12c>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d00b      	beq.n	80044de <TIM_Base_SetConfig+0xb2>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a24      	ldr	r2, [pc, #144]	; (800455c <TIM_Base_SetConfig+0x130>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d007      	beq.n	80044de <TIM_Base_SetConfig+0xb2>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a23      	ldr	r2, [pc, #140]	; (8004560 <TIM_Base_SetConfig+0x134>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d003      	beq.n	80044de <TIM_Base_SetConfig+0xb2>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a22      	ldr	r2, [pc, #136]	; (8004564 <TIM_Base_SetConfig+0x138>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d108      	bne.n	80044f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	695b      	ldr	r3, [r3, #20]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	68fa      	ldr	r2, [r7, #12]
 8004502:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	689a      	ldr	r2, [r3, #8]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a09      	ldr	r2, [pc, #36]	; (800453c <TIM_Base_SetConfig+0x110>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d003      	beq.n	8004524 <TIM_Base_SetConfig+0xf8>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	4a0b      	ldr	r2, [pc, #44]	; (800454c <TIM_Base_SetConfig+0x120>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d103      	bne.n	800452c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	691a      	ldr	r2, [r3, #16]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	615a      	str	r2, [r3, #20]
}
 8004532:	bf00      	nop
 8004534:	3714      	adds	r7, #20
 8004536:	46bd      	mov	sp, r7
 8004538:	bc80      	pop	{r7}
 800453a:	4770      	bx	lr
 800453c:	40010000 	.word	0x40010000
 8004540:	40000400 	.word	0x40000400
 8004544:	40000800 	.word	0x40000800
 8004548:	40000c00 	.word	0x40000c00
 800454c:	40010400 	.word	0x40010400
 8004550:	40014000 	.word	0x40014000
 8004554:	40014400 	.word	0x40014400
 8004558:	40014800 	.word	0x40014800
 800455c:	40001800 	.word	0x40001800
 8004560:	40001c00 	.word	0x40001c00
 8004564:	40002000 	.word	0x40002000

08004568 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004570:	bf00      	nop
 8004572:	370c      	adds	r7, #12
 8004574:	46bd      	mov	sp, r7
 8004576:	bc80      	pop	{r7}
 8004578:	4770      	bx	lr

0800457a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800457a:	b480      	push	{r7}
 800457c:	b083      	sub	sp, #12
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004582:	bf00      	nop
 8004584:	370c      	adds	r7, #12
 8004586:	46bd      	mov	sp, r7
 8004588:	bc80      	pop	{r7}
 800458a:	4770      	bx	lr

0800458c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b082      	sub	sp, #8
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d101      	bne.n	800459e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e03f      	b.n	800461e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d106      	bne.n	80045b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f7fc fce8 	bl	8000f88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2224      	movs	r2, #36	; 0x24
 80045bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	68da      	ldr	r2, [r3, #12]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f000 f829 	bl	8004628 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	691a      	ldr	r2, [r3, #16]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	695a      	ldr	r2, [r3, #20]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	68da      	ldr	r2, [r3, #12]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004604:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2220      	movs	r2, #32
 8004610:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2220      	movs	r2, #32
 8004618:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800461c:	2300      	movs	r3, #0
}
 800461e:	4618      	mov	r0, r3
 8004620:	3708      	adds	r7, #8
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
	...

08004628 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	68da      	ldr	r2, [r3, #12]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	430a      	orrs	r2, r1
 8004644:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	689a      	ldr	r2, [r3, #8]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	431a      	orrs	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	695b      	ldr	r3, [r3, #20]
 8004654:	431a      	orrs	r2, r3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	69db      	ldr	r3, [r3, #28]
 800465a:	4313      	orrs	r3, r2
 800465c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004668:	f023 030c 	bic.w	r3, r3, #12
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	6812      	ldr	r2, [r2, #0]
 8004670:	68b9      	ldr	r1, [r7, #8]
 8004672:	430b      	orrs	r3, r1
 8004674:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	695b      	ldr	r3, [r3, #20]
 800467c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	699a      	ldr	r2, [r3, #24]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	430a      	orrs	r2, r1
 800468a:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1) || (huart->Instance == USART6))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a57      	ldr	r2, [pc, #348]	; (80047f0 <UART_SetConfig+0x1c8>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d004      	beq.n	80046a0 <UART_SetConfig+0x78>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a56      	ldr	r2, [pc, #344]	; (80047f4 <UART_SetConfig+0x1cc>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d103      	bne.n	80046a8 <UART_SetConfig+0x80>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80046a0:	f7fe f86e 	bl	8002780 <HAL_RCC_GetPCLK2Freq>
 80046a4:	60f8      	str	r0, [r7, #12]
 80046a6:	e002      	b.n	80046ae <UART_SetConfig+0x86>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80046a8:	f7fe f848 	bl	800273c <HAL_RCC_GetPCLK1Freq>
 80046ac:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	69db      	ldr	r3, [r3, #28]
 80046b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046b6:	d14c      	bne.n	8004752 <UART_SetConfig+0x12a>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80046b8:	68fa      	ldr	r2, [r7, #12]
 80046ba:	4613      	mov	r3, r2
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	4413      	add	r3, r2
 80046c0:	009a      	lsls	r2, r3, #2
 80046c2:	441a      	add	r2, r3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	005b      	lsls	r3, r3, #1
 80046ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ce:	4a4a      	ldr	r2, [pc, #296]	; (80047f8 <UART_SetConfig+0x1d0>)
 80046d0:	fba2 2303 	umull	r2, r3, r2, r3
 80046d4:	095b      	lsrs	r3, r3, #5
 80046d6:	0119      	lsls	r1, r3, #4
 80046d8:	68fa      	ldr	r2, [r7, #12]
 80046da:	4613      	mov	r3, r2
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	4413      	add	r3, r2
 80046e0:	009a      	lsls	r2, r3, #2
 80046e2:	441a      	add	r2, r3
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	005b      	lsls	r3, r3, #1
 80046ea:	fbb2 f2f3 	udiv	r2, r2, r3
 80046ee:	4b42      	ldr	r3, [pc, #264]	; (80047f8 <UART_SetConfig+0x1d0>)
 80046f0:	fba3 0302 	umull	r0, r3, r3, r2
 80046f4:	095b      	lsrs	r3, r3, #5
 80046f6:	2064      	movs	r0, #100	; 0x64
 80046f8:	fb00 f303 	mul.w	r3, r0, r3
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	00db      	lsls	r3, r3, #3
 8004700:	3332      	adds	r3, #50	; 0x32
 8004702:	4a3d      	ldr	r2, [pc, #244]	; (80047f8 <UART_SetConfig+0x1d0>)
 8004704:	fba2 2303 	umull	r2, r3, r2, r3
 8004708:	095b      	lsrs	r3, r3, #5
 800470a:	005b      	lsls	r3, r3, #1
 800470c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004710:	4419      	add	r1, r3
 8004712:	68fa      	ldr	r2, [r7, #12]
 8004714:	4613      	mov	r3, r2
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	4413      	add	r3, r2
 800471a:	009a      	lsls	r2, r3, #2
 800471c:	441a      	add	r2, r3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	005b      	lsls	r3, r3, #1
 8004724:	fbb2 f2f3 	udiv	r2, r2, r3
 8004728:	4b33      	ldr	r3, [pc, #204]	; (80047f8 <UART_SetConfig+0x1d0>)
 800472a:	fba3 0302 	umull	r0, r3, r3, r2
 800472e:	095b      	lsrs	r3, r3, #5
 8004730:	2064      	movs	r0, #100	; 0x64
 8004732:	fb00 f303 	mul.w	r3, r0, r3
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	00db      	lsls	r3, r3, #3
 800473a:	3332      	adds	r3, #50	; 0x32
 800473c:	4a2e      	ldr	r2, [pc, #184]	; (80047f8 <UART_SetConfig+0x1d0>)
 800473e:	fba2 2303 	umull	r2, r3, r2, r3
 8004742:	095b      	lsrs	r3, r3, #5
 8004744:	f003 0207 	and.w	r2, r3, #7
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	440a      	add	r2, r1
 800474e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004750:	e04a      	b.n	80047e8 <UART_SetConfig+0x1c0>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004752:	68fa      	ldr	r2, [r7, #12]
 8004754:	4613      	mov	r3, r2
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	4413      	add	r3, r2
 800475a:	009a      	lsls	r2, r3, #2
 800475c:	441a      	add	r2, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	fbb2 f3f3 	udiv	r3, r2, r3
 8004768:	4a23      	ldr	r2, [pc, #140]	; (80047f8 <UART_SetConfig+0x1d0>)
 800476a:	fba2 2303 	umull	r2, r3, r2, r3
 800476e:	095b      	lsrs	r3, r3, #5
 8004770:	0119      	lsls	r1, r3, #4
 8004772:	68fa      	ldr	r2, [r7, #12]
 8004774:	4613      	mov	r3, r2
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	4413      	add	r3, r2
 800477a:	009a      	lsls	r2, r3, #2
 800477c:	441a      	add	r2, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	fbb2 f2f3 	udiv	r2, r2, r3
 8004788:	4b1b      	ldr	r3, [pc, #108]	; (80047f8 <UART_SetConfig+0x1d0>)
 800478a:	fba3 0302 	umull	r0, r3, r3, r2
 800478e:	095b      	lsrs	r3, r3, #5
 8004790:	2064      	movs	r0, #100	; 0x64
 8004792:	fb00 f303 	mul.w	r3, r0, r3
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	011b      	lsls	r3, r3, #4
 800479a:	3332      	adds	r3, #50	; 0x32
 800479c:	4a16      	ldr	r2, [pc, #88]	; (80047f8 <UART_SetConfig+0x1d0>)
 800479e:	fba2 2303 	umull	r2, r3, r2, r3
 80047a2:	095b      	lsrs	r3, r3, #5
 80047a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047a8:	4419      	add	r1, r3
 80047aa:	68fa      	ldr	r2, [r7, #12]
 80047ac:	4613      	mov	r3, r2
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	4413      	add	r3, r2
 80047b2:	009a      	lsls	r2, r3, #2
 80047b4:	441a      	add	r2, r3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80047c0:	4b0d      	ldr	r3, [pc, #52]	; (80047f8 <UART_SetConfig+0x1d0>)
 80047c2:	fba3 0302 	umull	r0, r3, r3, r2
 80047c6:	095b      	lsrs	r3, r3, #5
 80047c8:	2064      	movs	r0, #100	; 0x64
 80047ca:	fb00 f303 	mul.w	r3, r0, r3
 80047ce:	1ad3      	subs	r3, r2, r3
 80047d0:	011b      	lsls	r3, r3, #4
 80047d2:	3332      	adds	r3, #50	; 0x32
 80047d4:	4a08      	ldr	r2, [pc, #32]	; (80047f8 <UART_SetConfig+0x1d0>)
 80047d6:	fba2 2303 	umull	r2, r3, r2, r3
 80047da:	095b      	lsrs	r3, r3, #5
 80047dc:	f003 020f 	and.w	r2, r3, #15
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	440a      	add	r2, r1
 80047e6:	609a      	str	r2, [r3, #8]
}
 80047e8:	bf00      	nop
 80047ea:	3710      	adds	r7, #16
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	40011000 	.word	0x40011000
 80047f4:	40011400 	.word	0x40011400
 80047f8:	51eb851f 	.word	0x51eb851f

080047fc <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80047fc:	b084      	sub	sp, #16
 80047fe:	b480      	push	{r7}
 8004800:	b085      	sub	sp, #20
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
 8004806:	f107 001c 	add.w	r0, r7, #28
 800480a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800480e:	2300      	movs	r3, #0
 8004810:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8004812:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8004814:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8004816:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8004818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800481a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800481c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800481e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8004822:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8004826:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004828:	68fa      	ldr	r2, [r7, #12]
 800482a:	4313      	orrs	r3, r2
 800482c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8004836:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800483a:	68fa      	ldr	r2, [r7, #12]
 800483c:	431a      	orrs	r2, r3
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004842:	2300      	movs	r3, #0
}
 8004844:	4618      	mov	r0, r3
 8004846:	3714      	adds	r7, #20
 8004848:	46bd      	mov	sp, r7
 800484a:	bc80      	pop	{r7}
 800484c:	b004      	add	sp, #16
 800484e:	4770      	bx	lr

08004850 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8004850:	b480      	push	{r7}
 8004852:	b083      	sub	sp, #12
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800485e:	4618      	mov	r0, r3
 8004860:	370c      	adds	r7, #12
 8004862:	46bd      	mov	sp, r7
 8004864:	bc80      	pop	{r7}
 8004866:	4770      	bx	lr

08004868 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800487c:	2300      	movs	r3, #0
}
 800487e:	4618      	mov	r0, r3
 8004880:	370c      	adds	r7, #12
 8004882:	46bd      	mov	sp, r7
 8004884:	bc80      	pop	{r7}
 8004886:	4770      	bx	lr

08004888 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2203      	movs	r2, #3
 8004894:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8004896:	2002      	movs	r0, #2
 8004898:	f7fc fd42 	bl	8001320 <HAL_Delay>
  
  return HAL_OK;
 800489c:	2300      	movs	r3, #0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3708      	adds	r7, #8
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}

080048a6 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80048a6:	b480      	push	{r7}
 80048a8:	b083      	sub	sp, #12
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0303 	and.w	r3, r3, #3
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	370c      	adds	r7, #12
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bc80      	pop	{r7}
 80048be:	4770      	bx	lr

080048c0 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b085      	sub	sp, #20
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80048ca:	2300      	movs	r3, #0
 80048cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80048de:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80048e4:	431a      	orrs	r2, r3
                       Command->CPSM);
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80048ea:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80048ec:	68fa      	ldr	r2, [r7, #12]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80048fa:	f023 030f 	bic.w	r3, r3, #15
 80048fe:	68fa      	ldr	r2, [r7, #12]
 8004900:	431a      	orrs	r2, r3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8004906:	2300      	movs	r3, #0
}
 8004908:	4618      	mov	r0, r3
 800490a:	3714      	adds	r7, #20
 800490c:	46bd      	mov	sp, r7
 800490e:	bc80      	pop	{r7}
 8004910:	4770      	bx	lr

08004912 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8004912:	b480      	push	{r7}
 8004914:	b083      	sub	sp, #12
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	b2db      	uxtb	r3, r3
}
 8004920:	4618      	mov	r0, r3
 8004922:	370c      	adds	r7, #12
 8004924:	46bd      	mov	sp, r7
 8004926:	bc80      	pop	{r7}
 8004928:	4770      	bx	lr

0800492a <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800492a:	b480      	push	{r7}
 800492c:	b085      	sub	sp, #20
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
 8004932:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	3314      	adds	r3, #20
 8004938:	461a      	mov	r2, r3
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	4413      	add	r3, r2
 800493e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
}  
 8004944:	4618      	mov	r0, r3
 8004946:	3714      	adds	r7, #20
 8004948:	46bd      	mov	sp, r7
 800494a:	bc80      	pop	{r7}
 800494c:	4770      	bx	lr

0800494e <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800494e:	b480      	push	{r7}
 8004950:	b085      	sub	sp, #20
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
 8004956:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004958:	2300      	movs	r3, #0
 800495a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	685a      	ldr	r2, [r3, #4]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004974:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800497a:	431a      	orrs	r2, r3
                       Data->DPSM);
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8004980:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004982:	68fa      	ldr	r2, [r7, #12]
 8004984:	4313      	orrs	r3, r2
 8004986:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800498c:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	431a      	orrs	r2, r3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004998:	2300      	movs	r3, #0

}
 800499a:	4618      	mov	r0, r3
 800499c:	3714      	adds	r7, #20
 800499e:	46bd      	mov	sp, r7
 80049a0:	bc80      	pop	{r7}
 80049a2:	4770      	bx	lr

080049a4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b088      	sub	sp, #32
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80049b2:	2310      	movs	r3, #16
 80049b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80049b6:	2340      	movs	r3, #64	; 0x40
 80049b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80049ba:	2300      	movs	r3, #0
 80049bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80049be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049c2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80049c4:	f107 0308 	add.w	r3, r7, #8
 80049c8:	4619      	mov	r1, r3
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f7ff ff78 	bl	80048c0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80049d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80049d4:	2110      	movs	r1, #16
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 fa40 	bl	8004e5c <SDMMC_GetCmdResp1>
 80049dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80049de:	69fb      	ldr	r3, [r7, #28]
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3720      	adds	r7, #32
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b088      	sub	sp, #32
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80049f6:	2311      	movs	r3, #17
 80049f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80049fa:	2340      	movs	r3, #64	; 0x40
 80049fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80049fe:	2300      	movs	r3, #0
 8004a00:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004a02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a06:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004a08:	f107 0308 	add.w	r3, r7, #8
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f7ff ff56 	bl	80048c0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004a14:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a18:	2111      	movs	r1, #17
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 fa1e 	bl	8004e5c <SDMMC_GetCmdResp1>
 8004a20:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004a22:	69fb      	ldr	r3, [r7, #28]
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3720      	adds	r7, #32
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}

08004a2c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b088      	sub	sp, #32
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8004a3a:	2312      	movs	r3, #18
 8004a3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004a3e:	2340      	movs	r3, #64	; 0x40
 8004a40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004a42:	2300      	movs	r3, #0
 8004a44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004a46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a4a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004a4c:	f107 0308 	add.w	r3, r7, #8
 8004a50:	4619      	mov	r1, r3
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f7ff ff34 	bl	80048c0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004a58:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a5c:	2112      	movs	r1, #18
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 f9fc 	bl	8004e5c <SDMMC_GetCmdResp1>
 8004a64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004a66:	69fb      	ldr	r3, [r7, #28]
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3720      	adds	r7, #32
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}

08004a70 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b088      	sub	sp, #32
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8004a7e:	2318      	movs	r3, #24
 8004a80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004a82:	2340      	movs	r3, #64	; 0x40
 8004a84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004a86:	2300      	movs	r3, #0
 8004a88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004a8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a8e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004a90:	f107 0308 	add.w	r3, r7, #8
 8004a94:	4619      	mov	r1, r3
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f7ff ff12 	bl	80048c0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004a9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aa0:	2118      	movs	r1, #24
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 f9da 	bl	8004e5c <SDMMC_GetCmdResp1>
 8004aa8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004aaa:	69fb      	ldr	r3, [r7, #28]
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3720      	adds	r7, #32
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b088      	sub	sp, #32
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8004ac2:	2319      	movs	r3, #25
 8004ac4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004ac6:	2340      	movs	r3, #64	; 0x40
 8004ac8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004aca:	2300      	movs	r3, #0
 8004acc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004ace:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ad2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004ad4:	f107 0308 	add.w	r3, r7, #8
 8004ad8:	4619      	mov	r1, r3
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f7ff fef0 	bl	80048c0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004ae0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ae4:	2119      	movs	r1, #25
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f000 f9b8 	bl	8004e5c <SDMMC_GetCmdResp1>
 8004aec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004aee:	69fb      	ldr	r3, [r7, #28]
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3720      	adds	r7, #32
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b088      	sub	sp, #32
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8004b00:	2300      	movs	r3, #0
 8004b02:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8004b04:	230c      	movs	r3, #12
 8004b06:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004b08:	2340      	movs	r3, #64	; 0x40
 8004b0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004b10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b14:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004b16:	f107 0308 	add.w	r3, r7, #8
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f7ff fecf 	bl	80048c0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8004b22:	4a05      	ldr	r2, [pc, #20]	; (8004b38 <SDMMC_CmdStopTransfer+0x40>)
 8004b24:	210c      	movs	r1, #12
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 f998 	bl	8004e5c <SDMMC_GetCmdResp1>
 8004b2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004b2e:	69fb      	ldr	r3, [r7, #28]
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3720      	adds	r7, #32
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}
 8004b38:	05f5e100 	.word	0x05f5e100

08004b3c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b08a      	sub	sp, #40	; 0x28
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	60f8      	str	r0, [r7, #12]
 8004b44:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004b4c:	2307      	movs	r3, #7
 8004b4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004b50:	2340      	movs	r3, #64	; 0x40
 8004b52:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004b54:	2300      	movs	r3, #0
 8004b56:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004b58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b5c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004b5e:	f107 0310 	add.w	r3, r7, #16
 8004b62:	4619      	mov	r1, r3
 8004b64:	68f8      	ldr	r0, [r7, #12]
 8004b66:	f7ff feab 	bl	80048c0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8004b6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b6e:	2107      	movs	r1, #7
 8004b70:	68f8      	ldr	r0, [r7, #12]
 8004b72:	f000 f973 	bl	8004e5c <SDMMC_GetCmdResp1>
 8004b76:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8004b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3728      	adds	r7, #40	; 0x28
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}

08004b82 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8004b82:	b580      	push	{r7, lr}
 8004b84:	b088      	sub	sp, #32
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8004b92:	2300      	movs	r3, #0
 8004b94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004b96:	2300      	movs	r3, #0
 8004b98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004b9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b9e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004ba0:	f107 0308 	add.w	r3, r7, #8
 8004ba4:	4619      	mov	r1, r3
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f7ff fe8a 	bl	80048c0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f000 f92d 	bl	8004e0c <SDMMC_GetCmdError>
 8004bb2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004bb4:	69fb      	ldr	r3, [r7, #28]
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3720      	adds	r7, #32
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}

08004bbe <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8004bbe:	b580      	push	{r7, lr}
 8004bc0:	b088      	sub	sp, #32
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8004bc6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8004bca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004bcc:	2308      	movs	r3, #8
 8004bce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004bd0:	2340      	movs	r3, #64	; 0x40
 8004bd2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004bd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bdc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004bde:	f107 0308 	add.w	r3, r7, #8
 8004be2:	4619      	mov	r1, r3
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f7ff fe6b 	bl	80048c0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f000 fb16 	bl	800521c <SDMMC_GetCmdResp7>
 8004bf0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004bf2:	69fb      	ldr	r3, [r7, #28]
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3720      	adds	r7, #32
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b088      	sub	sp, #32
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8004c0a:	2337      	movs	r3, #55	; 0x37
 8004c0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004c0e:	2340      	movs	r3, #64	; 0x40
 8004c10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004c12:	2300      	movs	r3, #0
 8004c14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004c16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c1a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004c1c:	f107 0308 	add.w	r3, r7, #8
 8004c20:	4619      	mov	r1, r3
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f7ff fe4c 	bl	80048c0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8004c28:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c2c:	2137      	movs	r1, #55	; 0x37
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 f914 	bl	8004e5c <SDMMC_GetCmdResp1>
 8004c34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004c36:	69fb      	ldr	r3, [r7, #28]
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3720      	adds	r7, #32
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b088      	sub	sp, #32
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004c50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8004c56:	2329      	movs	r3, #41	; 0x29
 8004c58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004c5a:	2340      	movs	r3, #64	; 0x40
 8004c5c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004c62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c66:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004c68:	f107 0308 	add.w	r3, r7, #8
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f7ff fe26 	bl	80048c0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f000 fa23 	bl	80050c0 <SDMMC_GetCmdResp3>
 8004c7a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004c7c:	69fb      	ldr	r3, [r7, #28]
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3720      	adds	r7, #32
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}

08004c86 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8004c86:	b580      	push	{r7, lr}
 8004c88:	b088      	sub	sp, #32
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	6078      	str	r0, [r7, #4]
 8004c8e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8004c94:	2306      	movs	r3, #6
 8004c96:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004c98:	2340      	movs	r3, #64	; 0x40
 8004c9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004ca0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ca4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004ca6:	f107 0308 	add.w	r3, r7, #8
 8004caa:	4619      	mov	r1, r3
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f7ff fe07 	bl	80048c0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8004cb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cb6:	2106      	movs	r1, #6
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f000 f8cf 	bl	8004e5c <SDMMC_GetCmdResp1>
 8004cbe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004cc0:	69fb      	ldr	r3, [r7, #28]
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3720      	adds	r7, #32
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}

08004cca <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8004cca:	b580      	push	{r7, lr}
 8004ccc:	b088      	sub	sp, #32
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8004cd6:	2333      	movs	r3, #51	; 0x33
 8004cd8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004cda:	2340      	movs	r3, #64	; 0x40
 8004cdc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004ce2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ce6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004ce8:	f107 0308 	add.w	r3, r7, #8
 8004cec:	4619      	mov	r1, r3
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f7ff fde6 	bl	80048c0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8004cf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cf8:	2133      	movs	r1, #51	; 0x33
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 f8ae 	bl	8004e5c <SDMMC_GetCmdResp1>
 8004d00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004d02:	69fb      	ldr	r3, [r7, #28]
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3720      	adds	r7, #32
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b088      	sub	sp, #32
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8004d14:	2300      	movs	r3, #0
 8004d16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8004d18:	2302      	movs	r3, #2
 8004d1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004d1c:	23c0      	movs	r3, #192	; 0xc0
 8004d1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004d20:	2300      	movs	r3, #0
 8004d22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004d24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d28:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004d2a:	f107 0308 	add.w	r3, r7, #8
 8004d2e:	4619      	mov	r1, r3
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f7ff fdc5 	bl	80048c0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f000 f97c 	bl	8005034 <SDMMC_GetCmdResp2>
 8004d3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004d3e:	69fb      	ldr	r3, [r7, #28]
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3720      	adds	r7, #32
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b088      	sub	sp, #32
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8004d56:	2309      	movs	r3, #9
 8004d58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004d5a:	23c0      	movs	r3, #192	; 0xc0
 8004d5c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004d62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d66:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004d68:	f107 0308 	add.w	r3, r7, #8
 8004d6c:	4619      	mov	r1, r3
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f7ff fda6 	bl	80048c0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f000 f95d 	bl	8005034 <SDMMC_GetCmdResp2>
 8004d7a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004d7c:	69fb      	ldr	r3, [r7, #28]
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3720      	adds	r7, #32
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8004d86:	b580      	push	{r7, lr}
 8004d88:	b088      	sub	sp, #32
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
 8004d8e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8004d90:	2300      	movs	r3, #0
 8004d92:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004d94:	2303      	movs	r3, #3
 8004d96:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004d98:	2340      	movs	r3, #64	; 0x40
 8004d9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004da0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004da4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004da6:	f107 0308 	add.w	r3, r7, #8
 8004daa:	4619      	mov	r1, r3
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f7ff fd87 	bl	80048c0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004db2:	683a      	ldr	r2, [r7, #0]
 8004db4:	2103      	movs	r1, #3
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 f9bc 	bl	8005134 <SDMMC_GetCmdResp6>
 8004dbc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004dbe:	69fb      	ldr	r3, [r7, #28]
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3720      	adds	r7, #32
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}

08004dc8 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b088      	sub	sp, #32
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8004dd6:	230d      	movs	r3, #13
 8004dd8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004dda:	2340      	movs	r3, #64	; 0x40
 8004ddc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004dde:	2300      	movs	r3, #0
 8004de0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004de2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004de6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004de8:	f107 0308 	add.w	r3, r7, #8
 8004dec:	4619      	mov	r1, r3
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f7ff fd66 	bl	80048c0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8004df4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004df8:	210d      	movs	r1, #13
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 f82e 	bl	8004e5c <SDMMC_GetCmdResp1>
 8004e00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004e02:	69fb      	ldr	r3, [r7, #28]
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3720      	adds	r7, #32
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8004e0c:	b490      	push	{r4, r7}
 8004e0e:	b082      	sub	sp, #8
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004e14:	4b0f      	ldr	r3, [pc, #60]	; (8004e54 <SDMMC_GetCmdError+0x48>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a0f      	ldr	r2, [pc, #60]	; (8004e58 <SDMMC_GetCmdError+0x4c>)
 8004e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e1e:	0a5b      	lsrs	r3, r3, #9
 8004e20:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e24:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004e28:	4623      	mov	r3, r4
 8004e2a:	1e5c      	subs	r4, r3, #1
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d102      	bne.n	8004e36 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004e30:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004e34:	e009      	b.n	8004e4a <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d0f2      	beq.n	8004e28 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	22c5      	movs	r2, #197	; 0xc5
 8004e46:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3708      	adds	r7, #8
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bc90      	pop	{r4, r7}
 8004e52:	4770      	bx	lr
 8004e54:	20000000 	.word	0x20000000
 8004e58:	10624dd3 	.word	0x10624dd3

08004e5c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8004e5c:	b590      	push	{r4, r7, lr}
 8004e5e:	b087      	sub	sp, #28
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	460b      	mov	r3, r1
 8004e66:	607a      	str	r2, [r7, #4]
 8004e68:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004e6a:	4b6f      	ldr	r3, [pc, #444]	; (8005028 <SDMMC_GetCmdResp1+0x1cc>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a6f      	ldr	r2, [pc, #444]	; (800502c <SDMMC_GetCmdResp1+0x1d0>)
 8004e70:	fba2 2303 	umull	r2, r3, r2, r3
 8004e74:	0a5b      	lsrs	r3, r3, #9
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004e7c:	4623      	mov	r3, r4
 8004e7e:	1e5c      	subs	r4, r3, #1
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d102      	bne.n	8004e8a <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004e84:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004e88:	e0c9      	b.n	800501e <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e8e:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d0f0      	beq.n	8004e7c <SDMMC_GetCmdResp1+0x20>
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d1eb      	bne.n	8004e7c <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ea8:	f003 0304 	and.w	r3, r3, #4
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d004      	beq.n	8004eba <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2204      	movs	r2, #4
 8004eb4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004eb6:	2304      	movs	r3, #4
 8004eb8:	e0b1      	b.n	800501e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ebe:	f003 0301 	and.w	r3, r3, #1
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d004      	beq.n	8004ed0 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2201      	movs	r2, #1
 8004eca:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e0a6      	b.n	800501e <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	22c5      	movs	r2, #197	; 0xc5
 8004ed4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004ed6:	68f8      	ldr	r0, [r7, #12]
 8004ed8:	f7ff fd1b 	bl	8004912 <SDIO_GetCommandResponse>
 8004edc:	4603      	mov	r3, r0
 8004ede:	461a      	mov	r2, r3
 8004ee0:	7afb      	ldrb	r3, [r7, #11]
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d001      	beq.n	8004eea <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e099      	b.n	800501e <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004eea:	2100      	movs	r1, #0
 8004eec:	68f8      	ldr	r0, [r7, #12]
 8004eee:	f7ff fd1c 	bl	800492a <SDIO_GetResponse>
 8004ef2:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004ef4:	693a      	ldr	r2, [r7, #16]
 8004ef6:	4b4e      	ldr	r3, [pc, #312]	; (8005030 <SDMMC_GetCmdResp1+0x1d4>)
 8004ef8:	4013      	ands	r3, r2
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d101      	bne.n	8004f02 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8004efe:	2300      	movs	r3, #0
 8004f00:	e08d      	b.n	800501e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	da02      	bge.n	8004f0e <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004f08:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f0c:	e087      	b.n	800501e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d001      	beq.n	8004f1c <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004f18:	2340      	movs	r3, #64	; 0x40
 8004f1a:	e080      	b.n	800501e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d001      	beq.n	8004f2a <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004f26:	2380      	movs	r3, #128	; 0x80
 8004f28:	e079      	b.n	800501e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d002      	beq.n	8004f3a <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004f34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f38:	e071      	b.n	800501e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d002      	beq.n	8004f4a <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004f44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f48:	e069      	b.n	800501e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d002      	beq.n	8004f5a <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004f54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f58:	e061      	b.n	800501e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d002      	beq.n	8004f6a <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004f64:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004f68:	e059      	b.n	800501e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d002      	beq.n	8004f7a <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004f74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f78:	e051      	b.n	800501e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d002      	beq.n	8004f8a <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004f84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004f88:	e049      	b.n	800501e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d002      	beq.n	8004f9a <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8004f94:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004f98:	e041      	b.n	800501e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d002      	beq.n	8004faa <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8004fa4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fa8:	e039      	b.n	800501e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d002      	beq.n	8004fba <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8004fb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004fb8:	e031      	b.n	800501e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d002      	beq.n	8004fca <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8004fc4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004fc8:	e029      	b.n	800501e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d002      	beq.n	8004fda <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8004fd4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004fd8:	e021      	b.n	800501e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d002      	beq.n	8004fea <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8004fe4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004fe8:	e019      	b.n	800501e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d002      	beq.n	8004ffa <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004ff4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004ff8:	e011      	b.n	800501e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005000:	2b00      	cmp	r3, #0
 8005002:	d002      	beq.n	800500a <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005004:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005008:	e009      	b.n	800501e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	f003 0308 	and.w	r3, r3, #8
 8005010:	2b00      	cmp	r3, #0
 8005012:	d002      	beq.n	800501a <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005014:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005018:	e001      	b.n	800501e <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800501a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800501e:	4618      	mov	r0, r3
 8005020:	371c      	adds	r7, #28
 8005022:	46bd      	mov	sp, r7
 8005024:	bd90      	pop	{r4, r7, pc}
 8005026:	bf00      	nop
 8005028:	20000000 	.word	0x20000000
 800502c:	10624dd3 	.word	0x10624dd3
 8005030:	fdffe008 	.word	0xfdffe008

08005034 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8005034:	b490      	push	{r4, r7}
 8005036:	b084      	sub	sp, #16
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800503c:	4b1e      	ldr	r3, [pc, #120]	; (80050b8 <SDMMC_GetCmdResp2+0x84>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a1e      	ldr	r2, [pc, #120]	; (80050bc <SDMMC_GetCmdResp2+0x88>)
 8005042:	fba2 2303 	umull	r2, r3, r2, r3
 8005046:	0a5b      	lsrs	r3, r3, #9
 8005048:	f241 3288 	movw	r2, #5000	; 0x1388
 800504c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005050:	4623      	mov	r3, r4
 8005052:	1e5c      	subs	r4, r3, #1
 8005054:	2b00      	cmp	r3, #0
 8005056:	d102      	bne.n	800505e <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005058:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800505c:	e026      	b.n	80050ac <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005062:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800506a:	2b00      	cmp	r3, #0
 800506c:	d0f0      	beq.n	8005050 <SDMMC_GetCmdResp2+0x1c>
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005074:	2b00      	cmp	r3, #0
 8005076:	d1eb      	bne.n	8005050 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800507c:	f003 0304 	and.w	r3, r3, #4
 8005080:	2b00      	cmp	r3, #0
 8005082:	d004      	beq.n	800508e <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2204      	movs	r2, #4
 8005088:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800508a:	2304      	movs	r3, #4
 800508c:	e00e      	b.n	80050ac <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005092:	f003 0301 	and.w	r3, r3, #1
 8005096:	2b00      	cmp	r3, #0
 8005098:	d004      	beq.n	80050a4 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2201      	movs	r2, #1
 800509e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e003      	b.n	80050ac <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	22c5      	movs	r2, #197	; 0xc5
 80050a8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80050aa:	2300      	movs	r3, #0
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3710      	adds	r7, #16
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bc90      	pop	{r4, r7}
 80050b4:	4770      	bx	lr
 80050b6:	bf00      	nop
 80050b8:	20000000 	.word	0x20000000
 80050bc:	10624dd3 	.word	0x10624dd3

080050c0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80050c0:	b490      	push	{r4, r7}
 80050c2:	b084      	sub	sp, #16
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80050c8:	4b18      	ldr	r3, [pc, #96]	; (800512c <SDMMC_GetCmdResp3+0x6c>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a18      	ldr	r2, [pc, #96]	; (8005130 <SDMMC_GetCmdResp3+0x70>)
 80050ce:	fba2 2303 	umull	r2, r3, r2, r3
 80050d2:	0a5b      	lsrs	r3, r3, #9
 80050d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80050d8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80050dc:	4623      	mov	r3, r4
 80050de:	1e5c      	subs	r4, r3, #1
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d102      	bne.n	80050ea <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80050e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80050e8:	e01b      	b.n	8005122 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050ee:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d0f0      	beq.n	80050dc <SDMMC_GetCmdResp3+0x1c>
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005100:	2b00      	cmp	r3, #0
 8005102:	d1eb      	bne.n	80050dc <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005108:	f003 0304 	and.w	r3, r3, #4
 800510c:	2b00      	cmp	r3, #0
 800510e:	d004      	beq.n	800511a <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2204      	movs	r2, #4
 8005114:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005116:	2304      	movs	r3, #4
 8005118:	e003      	b.n	8005122 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	22c5      	movs	r2, #197	; 0xc5
 800511e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005120:	2300      	movs	r3, #0
}
 8005122:	4618      	mov	r0, r3
 8005124:	3710      	adds	r7, #16
 8005126:	46bd      	mov	sp, r7
 8005128:	bc90      	pop	{r4, r7}
 800512a:	4770      	bx	lr
 800512c:	20000000 	.word	0x20000000
 8005130:	10624dd3 	.word	0x10624dd3

08005134 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005134:	b590      	push	{r4, r7, lr}
 8005136:	b087      	sub	sp, #28
 8005138:	af00      	add	r7, sp, #0
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	460b      	mov	r3, r1
 800513e:	607a      	str	r2, [r7, #4]
 8005140:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005142:	4b34      	ldr	r3, [pc, #208]	; (8005214 <SDMMC_GetCmdResp6+0xe0>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a34      	ldr	r2, [pc, #208]	; (8005218 <SDMMC_GetCmdResp6+0xe4>)
 8005148:	fba2 2303 	umull	r2, r3, r2, r3
 800514c:	0a5b      	lsrs	r3, r3, #9
 800514e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005152:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005156:	4623      	mov	r3, r4
 8005158:	1e5c      	subs	r4, r3, #1
 800515a:	2b00      	cmp	r3, #0
 800515c:	d102      	bne.n	8005164 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800515e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005162:	e052      	b.n	800520a <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005168:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005170:	2b00      	cmp	r3, #0
 8005172:	d0f0      	beq.n	8005156 <SDMMC_GetCmdResp6+0x22>
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800517a:	2b00      	cmp	r3, #0
 800517c:	d1eb      	bne.n	8005156 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005182:	f003 0304 	and.w	r3, r3, #4
 8005186:	2b00      	cmp	r3, #0
 8005188:	d004      	beq.n	8005194 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2204      	movs	r2, #4
 800518e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005190:	2304      	movs	r3, #4
 8005192:	e03a      	b.n	800520a <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005198:	f003 0301 	and.w	r3, r3, #1
 800519c:	2b00      	cmp	r3, #0
 800519e:	d004      	beq.n	80051aa <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2201      	movs	r2, #1
 80051a4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e02f      	b.n	800520a <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80051aa:	68f8      	ldr	r0, [r7, #12]
 80051ac:	f7ff fbb1 	bl	8004912 <SDIO_GetCommandResponse>
 80051b0:	4603      	mov	r3, r0
 80051b2:	461a      	mov	r2, r3
 80051b4:	7afb      	ldrb	r3, [r7, #11]
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d001      	beq.n	80051be <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e025      	b.n	800520a <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	22c5      	movs	r2, #197	; 0xc5
 80051c2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80051c4:	2100      	movs	r1, #0
 80051c6:	68f8      	ldr	r0, [r7, #12]
 80051c8:	f7ff fbaf 	bl	800492a <SDIO_GetResponse>
 80051cc:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d106      	bne.n	80051e6 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	0c1b      	lsrs	r3, r3, #16
 80051dc:	b29a      	uxth	r2, r3
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80051e2:	2300      	movs	r3, #0
 80051e4:	e011      	b.n	800520a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d002      	beq.n	80051f6 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80051f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80051f4:	e009      	b.n	800520a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d002      	beq.n	8005206 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005200:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005204:	e001      	b.n	800520a <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005206:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800520a:	4618      	mov	r0, r3
 800520c:	371c      	adds	r7, #28
 800520e:	46bd      	mov	sp, r7
 8005210:	bd90      	pop	{r4, r7, pc}
 8005212:	bf00      	nop
 8005214:	20000000 	.word	0x20000000
 8005218:	10624dd3 	.word	0x10624dd3

0800521c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800521c:	b490      	push	{r4, r7}
 800521e:	b084      	sub	sp, #16
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005224:	4b21      	ldr	r3, [pc, #132]	; (80052ac <SDMMC_GetCmdResp7+0x90>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a21      	ldr	r2, [pc, #132]	; (80052b0 <SDMMC_GetCmdResp7+0x94>)
 800522a:	fba2 2303 	umull	r2, r3, r2, r3
 800522e:	0a5b      	lsrs	r3, r3, #9
 8005230:	f241 3288 	movw	r2, #5000	; 0x1388
 8005234:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005238:	4623      	mov	r3, r4
 800523a:	1e5c      	subs	r4, r3, #1
 800523c:	2b00      	cmp	r3, #0
 800523e:	d102      	bne.n	8005246 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005240:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005244:	e02c      	b.n	80052a0 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800524a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005252:	2b00      	cmp	r3, #0
 8005254:	d0f0      	beq.n	8005238 <SDMMC_GetCmdResp7+0x1c>
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800525c:	2b00      	cmp	r3, #0
 800525e:	d1eb      	bne.n	8005238 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005264:	f003 0304 	and.w	r3, r3, #4
 8005268:	2b00      	cmp	r3, #0
 800526a:	d004      	beq.n	8005276 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2204      	movs	r2, #4
 8005270:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005272:	2304      	movs	r3, #4
 8005274:	e014      	b.n	80052a0 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800527a:	f003 0301 	and.w	r3, r3, #1
 800527e:	2b00      	cmp	r3, #0
 8005280:	d004      	beq.n	800528c <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2201      	movs	r2, #1
 8005286:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005288:	2301      	movs	r3, #1
 800528a:	e009      	b.n	80052a0 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005294:	2b00      	cmp	r3, #0
 8005296:	d002      	beq.n	800529e <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2240      	movs	r2, #64	; 0x40
 800529c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800529e:	2300      	movs	r3, #0
  
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3710      	adds	r7, #16
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bc90      	pop	{r4, r7}
 80052a8:	4770      	bx	lr
 80052aa:	bf00      	nop
 80052ac:	20000000 	.word	0x20000000
 80052b0:	10624dd3 	.word	0x10624dd3

080052b4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80052b8:	4904      	ldr	r1, [pc, #16]	; (80052cc <MX_FATFS_Init+0x18>)
 80052ba:	4805      	ldr	r0, [pc, #20]	; (80052d0 <MX_FATFS_Init+0x1c>)
 80052bc:	f003 f96a 	bl	8008594 <FATFS_LinkDriver>
 80052c0:	4603      	mov	r3, r0
 80052c2:	461a      	mov	r2, r3
 80052c4:	4b03      	ldr	r3, [pc, #12]	; (80052d4 <MX_FATFS_Init+0x20>)
 80052c6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80052c8:	bf00      	nop
 80052ca:	bd80      	pop	{r7, pc}
 80052cc:	200042d0 	.word	0x200042d0
 80052d0:	0800b218 	.word	0x0800b218
 80052d4:	200048a8 	.word	0x200048a8

080052d8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80052d8:	b480      	push	{r7}
 80052da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80052dc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80052de:	4618      	mov	r0, r3
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bc80      	pop	{r7}
 80052e4:	4770      	bx	lr
	...

080052e8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b082      	sub	sp, #8
 80052ec:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80052ee:	2300      	movs	r3, #0
 80052f0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80052f2:	f000 f8a9 	bl	8005448 <BSP_SD_IsDetected>
 80052f6:	4603      	mov	r3, r0
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d001      	beq.n	8005300 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	e012      	b.n	8005326 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8005300:	480b      	ldr	r0, [pc, #44]	; (8005330 <BSP_SD_Init+0x48>)
 8005302:	f7fd fa8f 	bl	8002824 <HAL_SD_Init>
 8005306:	4603      	mov	r3, r0
 8005308:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800530a:	79fb      	ldrb	r3, [r7, #7]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d109      	bne.n	8005324 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8005310:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005314:	4806      	ldr	r0, [pc, #24]	; (8005330 <BSP_SD_Init+0x48>)
 8005316:	f7fe fa03 	bl	8003720 <HAL_SD_ConfigWideBusOperation>
 800531a:	4603      	mov	r3, r0
 800531c:	2b00      	cmp	r3, #0
 800531e:	d001      	beq.n	8005324 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8005324:	79fb      	ldrb	r3, [r7, #7]
}
 8005326:	4618      	mov	r0, r3
 8005328:	3708      	adds	r7, #8
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop
 8005330:	20004570 	.word	0x20004570

08005334 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b088      	sub	sp, #32
 8005338:	af02      	add	r7, sp, #8
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	60b9      	str	r1, [r7, #8]
 800533e:	607a      	str	r2, [r7, #4]
 8005340:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8005342:	2300      	movs	r3, #0
 8005344:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	9300      	str	r3, [sp, #0]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	68ba      	ldr	r2, [r7, #8]
 800534e:	68f9      	ldr	r1, [r7, #12]
 8005350:	4806      	ldr	r0, [pc, #24]	; (800536c <BSP_SD_ReadBlocks+0x38>)
 8005352:	f7fd faf7 	bl	8002944 <HAL_SD_ReadBlocks>
 8005356:	4603      	mov	r3, r0
 8005358:	2b00      	cmp	r3, #0
 800535a:	d001      	beq.n	8005360 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005360:	7dfb      	ldrb	r3, [r7, #23]
}
 8005362:	4618      	mov	r0, r3
 8005364:	3718      	adds	r7, #24
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	20004570 	.word	0x20004570

08005370 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b088      	sub	sp, #32
 8005374:	af02      	add	r7, sp, #8
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	607a      	str	r2, [r7, #4]
 800537c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800537e:	2300      	movs	r3, #0
 8005380:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	9300      	str	r3, [sp, #0]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	68ba      	ldr	r2, [r7, #8]
 800538a:	68f9      	ldr	r1, [r7, #12]
 800538c:	4806      	ldr	r0, [pc, #24]	; (80053a8 <BSP_SD_WriteBlocks+0x38>)
 800538e:	f7fd fcd3 	bl	8002d38 <HAL_SD_WriteBlocks>
 8005392:	4603      	mov	r3, r0
 8005394:	2b00      	cmp	r3, #0
 8005396:	d001      	beq.n	800539c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800539c:	7dfb      	ldrb	r3, [r7, #23]
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3718      	adds	r7, #24
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	bf00      	nop
 80053a8:	20004570 	.word	0x20004570

080053ac <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80053b0:	4805      	ldr	r0, [pc, #20]	; (80053c8 <BSP_SD_GetCardState+0x1c>)
 80053b2:	f7fe fa31 	bl	8003818 <HAL_SD_GetCardState>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b04      	cmp	r3, #4
 80053ba:	bf14      	ite	ne
 80053bc:	2301      	movne	r3, #1
 80053be:	2300      	moveq	r3, #0
 80053c0:	b2db      	uxtb	r3, r3
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	20004570 	.word	0x20004570

080053cc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b082      	sub	sp, #8
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80053d4:	6879      	ldr	r1, [r7, #4]
 80053d6:	4803      	ldr	r0, [pc, #12]	; (80053e4 <BSP_SD_GetCardInfo+0x18>)
 80053d8:	f7fe f976 	bl	80036c8 <HAL_SD_GetCardInfo>
}
 80053dc:	bf00      	nop
 80053de:	3708      	adds	r7, #8
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	20004570 	.word	0x20004570

080053e8 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80053f0:	f000 f818 	bl	8005424 <BSP_SD_AbortCallback>
}
 80053f4:	bf00      	nop
 80053f6:	3708      	adds	r7, #8
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b082      	sub	sp, #8
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8005404:	f000 f814 	bl	8005430 <BSP_SD_WriteCpltCallback>
}
 8005408:	bf00      	nop
 800540a:	3708      	adds	r7, #8
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}

08005410 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b082      	sub	sp, #8
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8005418:	f000 f810 	bl	800543c <BSP_SD_ReadCpltCallback>
}
 800541c:	bf00      	nop
 800541e:	3708      	adds	r7, #8
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}

08005424 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8005424:	b480      	push	{r7}
 8005426:	af00      	add	r7, sp, #0

}
 8005428:	bf00      	nop
 800542a:	46bd      	mov	sp, r7
 800542c:	bc80      	pop	{r7}
 800542e:	4770      	bx	lr

08005430 <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 8005430:	b480      	push	{r7}
 8005432:	af00      	add	r7, sp, #0

}
 8005434:	bf00      	nop
 8005436:	46bd      	mov	sp, r7
 8005438:	bc80      	pop	{r7}
 800543a:	4770      	bx	lr

0800543c <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 800543c:	b480      	push	{r7}
 800543e:	af00      	add	r7, sp, #0

}
 8005440:	bf00      	nop
 8005442:	46bd      	mov	sp, r7
 8005444:	bc80      	pop	{r7}
 8005446:	4770      	bx	lr

08005448 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b082      	sub	sp, #8
 800544c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800544e:	2301      	movs	r3, #1
 8005450:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8005452:	f000 f80b 	bl	800546c <BSP_PlatformIsDetected>
 8005456:	4603      	mov	r3, r0
 8005458:	2b00      	cmp	r3, #0
 800545a:	d101      	bne.n	8005460 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800545c:	2300      	movs	r3, #0
 800545e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8005460:	79fb      	ldrb	r3, [r7, #7]
 8005462:	b2db      	uxtb	r3, r3
}
 8005464:	4618      	mov	r0, r3
 8005466:	3708      	adds	r7, #8
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800546c:	b580      	push	{r7, lr}
 800546e:	b082      	sub	sp, #8
 8005470:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8005472:	2301      	movs	r3, #1
 8005474:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8005476:	2104      	movs	r1, #4
 8005478:	4806      	ldr	r0, [pc, #24]	; (8005494 <BSP_PlatformIsDetected+0x28>)
 800547a:	f7fc fcf9 	bl	8001e70 <HAL_GPIO_ReadPin>
 800547e:	4603      	mov	r3, r0
 8005480:	2b00      	cmp	r3, #0
 8005482:	d001      	beq.n	8005488 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8005484:	2300      	movs	r3, #0
 8005486:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8005488:	79fb      	ldrb	r3, [r7, #7]
}
 800548a:	4618      	mov	r0, r3
 800548c:	3708      	adds	r7, #8
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}
 8005492:	bf00      	nop
 8005494:	40021800 	.word	0x40021800

08005498 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b084      	sub	sp, #16
 800549c:	af00      	add	r7, sp, #0
 800549e:	4603      	mov	r3, r0
 80054a0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80054a2:	79fb      	ldrb	r3, [r7, #7]
 80054a4:	4a08      	ldr	r2, [pc, #32]	; (80054c8 <disk_status+0x30>)
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	4413      	add	r3, r2
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	79fa      	ldrb	r2, [r7, #7]
 80054b0:	4905      	ldr	r1, [pc, #20]	; (80054c8 <disk_status+0x30>)
 80054b2:	440a      	add	r2, r1
 80054b4:	7a12      	ldrb	r2, [r2, #8]
 80054b6:	4610      	mov	r0, r2
 80054b8:	4798      	blx	r3
 80054ba:	4603      	mov	r3, r0
 80054bc:	73fb      	strb	r3, [r7, #15]
  return stat;
 80054be:	7bfb      	ldrb	r3, [r7, #15]
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3710      	adds	r7, #16
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}
 80054c8:	200000b4 	.word	0x200000b4

080054cc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b084      	sub	sp, #16
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	4603      	mov	r3, r0
 80054d4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80054d6:	2300      	movs	r3, #0
 80054d8:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 80054da:	79fb      	ldrb	r3, [r7, #7]
 80054dc:	4a0d      	ldr	r2, [pc, #52]	; (8005514 <disk_initialize+0x48>)
 80054de:	5cd3      	ldrb	r3, [r2, r3]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d111      	bne.n	8005508 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 80054e4:	79fb      	ldrb	r3, [r7, #7]
 80054e6:	4a0b      	ldr	r2, [pc, #44]	; (8005514 <disk_initialize+0x48>)
 80054e8:	2101      	movs	r1, #1
 80054ea:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80054ec:	79fb      	ldrb	r3, [r7, #7]
 80054ee:	4a09      	ldr	r2, [pc, #36]	; (8005514 <disk_initialize+0x48>)
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	4413      	add	r3, r2
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	79fa      	ldrb	r2, [r7, #7]
 80054fa:	4906      	ldr	r1, [pc, #24]	; (8005514 <disk_initialize+0x48>)
 80054fc:	440a      	add	r2, r1
 80054fe:	7a12      	ldrb	r2, [r2, #8]
 8005500:	4610      	mov	r0, r2
 8005502:	4798      	blx	r3
 8005504:	4603      	mov	r3, r0
 8005506:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005508:	7bfb      	ldrb	r3, [r7, #15]
}
 800550a:	4618      	mov	r0, r3
 800550c:	3710      	adds	r7, #16
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop
 8005514:	200000b4 	.word	0x200000b4

08005518 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005518:	b590      	push	{r4, r7, lr}
 800551a:	b087      	sub	sp, #28
 800551c:	af00      	add	r7, sp, #0
 800551e:	60b9      	str	r1, [r7, #8]
 8005520:	607a      	str	r2, [r7, #4]
 8005522:	603b      	str	r3, [r7, #0]
 8005524:	4603      	mov	r3, r0
 8005526:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005528:	7bfb      	ldrb	r3, [r7, #15]
 800552a:	4a0a      	ldr	r2, [pc, #40]	; (8005554 <disk_read+0x3c>)
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	4413      	add	r3, r2
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	689c      	ldr	r4, [r3, #8]
 8005534:	7bfb      	ldrb	r3, [r7, #15]
 8005536:	4a07      	ldr	r2, [pc, #28]	; (8005554 <disk_read+0x3c>)
 8005538:	4413      	add	r3, r2
 800553a:	7a18      	ldrb	r0, [r3, #8]
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	68b9      	ldr	r1, [r7, #8]
 8005542:	47a0      	blx	r4
 8005544:	4603      	mov	r3, r0
 8005546:	75fb      	strb	r3, [r7, #23]
  return res;
 8005548:	7dfb      	ldrb	r3, [r7, #23]
}
 800554a:	4618      	mov	r0, r3
 800554c:	371c      	adds	r7, #28
 800554e:	46bd      	mov	sp, r7
 8005550:	bd90      	pop	{r4, r7, pc}
 8005552:	bf00      	nop
 8005554:	200000b4 	.word	0x200000b4

08005558 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005558:	b590      	push	{r4, r7, lr}
 800555a:	b087      	sub	sp, #28
 800555c:	af00      	add	r7, sp, #0
 800555e:	60b9      	str	r1, [r7, #8]
 8005560:	607a      	str	r2, [r7, #4]
 8005562:	603b      	str	r3, [r7, #0]
 8005564:	4603      	mov	r3, r0
 8005566:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005568:	7bfb      	ldrb	r3, [r7, #15]
 800556a:	4a0a      	ldr	r2, [pc, #40]	; (8005594 <disk_write+0x3c>)
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	4413      	add	r3, r2
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	68dc      	ldr	r4, [r3, #12]
 8005574:	7bfb      	ldrb	r3, [r7, #15]
 8005576:	4a07      	ldr	r2, [pc, #28]	; (8005594 <disk_write+0x3c>)
 8005578:	4413      	add	r3, r2
 800557a:	7a18      	ldrb	r0, [r3, #8]
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	68b9      	ldr	r1, [r7, #8]
 8005582:	47a0      	blx	r4
 8005584:	4603      	mov	r3, r0
 8005586:	75fb      	strb	r3, [r7, #23]
  return res;
 8005588:	7dfb      	ldrb	r3, [r7, #23]
}
 800558a:	4618      	mov	r0, r3
 800558c:	371c      	adds	r7, #28
 800558e:	46bd      	mov	sp, r7
 8005590:	bd90      	pop	{r4, r7, pc}
 8005592:	bf00      	nop
 8005594:	200000b4 	.word	0x200000b4

08005598 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b084      	sub	sp, #16
 800559c:	af00      	add	r7, sp, #0
 800559e:	4603      	mov	r3, r0
 80055a0:	603a      	str	r2, [r7, #0]
 80055a2:	71fb      	strb	r3, [r7, #7]
 80055a4:	460b      	mov	r3, r1
 80055a6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80055a8:	79fb      	ldrb	r3, [r7, #7]
 80055aa:	4a09      	ldr	r2, [pc, #36]	; (80055d0 <disk_ioctl+0x38>)
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	4413      	add	r3, r2
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	691b      	ldr	r3, [r3, #16]
 80055b4:	79fa      	ldrb	r2, [r7, #7]
 80055b6:	4906      	ldr	r1, [pc, #24]	; (80055d0 <disk_ioctl+0x38>)
 80055b8:	440a      	add	r2, r1
 80055ba:	7a10      	ldrb	r0, [r2, #8]
 80055bc:	79b9      	ldrb	r1, [r7, #6]
 80055be:	683a      	ldr	r2, [r7, #0]
 80055c0:	4798      	blx	r3
 80055c2:	4603      	mov	r3, r0
 80055c4:	73fb      	strb	r3, [r7, #15]
  return res;
 80055c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3710      	adds	r7, #16
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}
 80055d0:	200000b4 	.word	0x200000b4

080055d4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80055d4:	b480      	push	{r7}
 80055d6:	b087      	sub	sp, #28
 80055d8:	af00      	add	r7, sp, #0
 80055da:	60f8      	str	r0, [r7, #12]
 80055dc:	60b9      	str	r1, [r7, #8]
 80055de:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	613b      	str	r3, [r7, #16]

#if _WORD_ACCESS == 1
	while (cnt >= sizeof (int)) {
 80055e8:	e00c      	b.n	8005604 <mem_cpy+0x30>
		*(int*)d = *(int*)s;
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	601a      	str	r2, [r3, #0]
		d += sizeof (int); s += sizeof (int);
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	3304      	adds	r3, #4
 80055f6:	617b      	str	r3, [r7, #20]
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	3304      	adds	r3, #4
 80055fc:	613b      	str	r3, [r7, #16]
		cnt -= sizeof (int);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	3b04      	subs	r3, #4
 8005602:	607b      	str	r3, [r7, #4]
	while (cnt >= sizeof (int)) {
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2b03      	cmp	r3, #3
 8005608:	d8ef      	bhi.n	80055ea <mem_cpy+0x16>
	}
#endif
	while (cnt--)
 800560a:	e007      	b.n	800561c <mem_cpy+0x48>
		*d++ = *s++;
 800560c:	693a      	ldr	r2, [r7, #16]
 800560e:	1c53      	adds	r3, r2, #1
 8005610:	613b      	str	r3, [r7, #16]
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	1c59      	adds	r1, r3, #1
 8005616:	6179      	str	r1, [r7, #20]
 8005618:	7812      	ldrb	r2, [r2, #0]
 800561a:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	1e5a      	subs	r2, r3, #1
 8005620:	607a      	str	r2, [r7, #4]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d1f2      	bne.n	800560c <mem_cpy+0x38>
}
 8005626:	bf00      	nop
 8005628:	371c      	adds	r7, #28
 800562a:	46bd      	mov	sp, r7
 800562c:	bc80      	pop	{r7}
 800562e:	4770      	bx	lr

08005630 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005630:	b480      	push	{r7}
 8005632:	b087      	sub	sp, #28
 8005634:	af00      	add	r7, sp, #0
 8005636:	60f8      	str	r0, [r7, #12]
 8005638:	60b9      	str	r1, [r7, #8]
 800563a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8005640:	e005      	b.n	800564e <mem_set+0x1e>
		*d++ = (BYTE)val;
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	1c5a      	adds	r2, r3, #1
 8005646:	617a      	str	r2, [r7, #20]
 8005648:	68ba      	ldr	r2, [r7, #8]
 800564a:	b2d2      	uxtb	r2, r2
 800564c:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	1e5a      	subs	r2, r3, #1
 8005652:	607a      	str	r2, [r7, #4]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d1f4      	bne.n	8005642 <mem_set+0x12>
}
 8005658:	bf00      	nop
 800565a:	371c      	adds	r7, #28
 800565c:	46bd      	mov	sp, r7
 800565e:	bc80      	pop	{r7}
 8005660:	4770      	bx	lr

08005662 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8005662:	b480      	push	{r7}
 8005664:	b089      	sub	sp, #36	; 0x24
 8005666:	af00      	add	r7, sp, #0
 8005668:	60f8      	str	r0, [r7, #12]
 800566a:	60b9      	str	r1, [r7, #8]
 800566c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	61fb      	str	r3, [r7, #28]
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005676:	2300      	movs	r3, #0
 8005678:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 800567a:	bf00      	nop
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	1e5a      	subs	r2, r3, #1
 8005680:	607a      	str	r2, [r7, #4]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d00d      	beq.n	80056a2 <mem_cmp+0x40>
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	1c5a      	adds	r2, r3, #1
 800568a:	61fa      	str	r2, [r7, #28]
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	4619      	mov	r1, r3
 8005690:	69bb      	ldr	r3, [r7, #24]
 8005692:	1c5a      	adds	r2, r3, #1
 8005694:	61ba      	str	r2, [r7, #24]
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	1acb      	subs	r3, r1, r3
 800569a:	617b      	str	r3, [r7, #20]
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d0ec      	beq.n	800567c <mem_cmp+0x1a>
	return r;
 80056a2:	697b      	ldr	r3, [r7, #20]
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3724      	adds	r7, #36	; 0x24
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bc80      	pop	{r7}
 80056ac:	4770      	bx	lr

080056ae <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 80056ae:	b480      	push	{r7}
 80056b0:	b083      	sub	sp, #12
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	6078      	str	r0, [r7, #4]
 80056b6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80056b8:	e002      	b.n	80056c0 <chk_chr+0x12>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	3301      	adds	r3, #1
 80056be:	607b      	str	r3, [r7, #4]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d005      	beq.n	80056d4 <chk_chr+0x26>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	461a      	mov	r2, r3
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d1f2      	bne.n	80056ba <chk_chr+0xc>
	return *str;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	781b      	ldrb	r3, [r3, #0]
}
 80056d8:	4618      	mov	r0, r3
 80056da:	370c      	adds	r7, #12
 80056dc:	46bd      	mov	sp, r7
 80056de:	bc80      	pop	{r7}
 80056e0:	4770      	bx	lr

080056e2 <lock_fs>:
#if _FS_REENTRANT
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 80056e2:	b580      	push	{r7, lr}
 80056e4:	b082      	sub	sp, #8
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	6078      	str	r0, [r7, #4]
	return ff_req_grant(fs->sobj);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80056f0:	4618      	mov	r0, r3
 80056f2:	f003 f903 	bl	80088fc <ff_req_grant>
 80056f6:	4603      	mov	r3, r0
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3708      	adds	r7, #8
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}

08005700 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b082      	sub	sp, #8
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	460b      	mov	r3, r1
 800570a:	70fb      	strb	r3, [r7, #3]
	if (fs &&
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d011      	beq.n	8005736 <unlock_fs+0x36>
 8005712:	78fb      	ldrb	r3, [r7, #3]
 8005714:	2b0c      	cmp	r3, #12
 8005716:	d00e      	beq.n	8005736 <unlock_fs+0x36>
		res != FR_NOT_ENABLED &&
 8005718:	78fb      	ldrb	r3, [r7, #3]
 800571a:	2b0b      	cmp	r3, #11
 800571c:	d00b      	beq.n	8005736 <unlock_fs+0x36>
		res != FR_INVALID_DRIVE &&
 800571e:	78fb      	ldrb	r3, [r7, #3]
 8005720:	2b09      	cmp	r3, #9
 8005722:	d008      	beq.n	8005736 <unlock_fs+0x36>
		res != FR_INVALID_OBJECT &&
 8005724:	78fb      	ldrb	r3, [r7, #3]
 8005726:	2b0f      	cmp	r3, #15
 8005728:	d005      	beq.n	8005736 <unlock_fs+0x36>
		res != FR_TIMEOUT) {
		ff_rel_grant(fs->sobj);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005730:	4618      	mov	r0, r3
 8005732:	f003 f8f8 	bl	8008926 <ff_rel_grant>
	}
}
 8005736:	bf00      	nop
 8005738:	3708      	adds	r7, #8
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
	...

08005740 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005740:	b480      	push	{r7}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800574a:	2300      	movs	r3, #0
 800574c:	60bb      	str	r3, [r7, #8]
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	60fb      	str	r3, [r7, #12]
 8005752:	e038      	b.n	80057c6 <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 8005754:	492f      	ldr	r1, [pc, #188]	; (8005814 <chk_lock+0xd4>)
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	4613      	mov	r3, r2
 800575a:	005b      	lsls	r3, r3, #1
 800575c:	4413      	add	r3, r2
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	440b      	add	r3, r1
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d029      	beq.n	80057bc <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8005768:	492a      	ldr	r1, [pc, #168]	; (8005814 <chk_lock+0xd4>)
 800576a:	68fa      	ldr	r2, [r7, #12]
 800576c:	4613      	mov	r3, r2
 800576e:	005b      	lsls	r3, r3, #1
 8005770:	4413      	add	r3, r2
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	440b      	add	r3, r1
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800577e:	429a      	cmp	r2, r3
 8005780:	d11e      	bne.n	80057c0 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 8005782:	4924      	ldr	r1, [pc, #144]	; (8005814 <chk_lock+0xd4>)
 8005784:	68fa      	ldr	r2, [r7, #12]
 8005786:	4613      	mov	r3, r2
 8005788:	005b      	lsls	r3, r3, #1
 800578a:	4413      	add	r3, r2
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	440b      	add	r3, r1
 8005790:	3304      	adds	r3, #4
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800579a:	429a      	cmp	r2, r3
 800579c:	d110      	bne.n	80057c0 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 800579e:	491d      	ldr	r1, [pc, #116]	; (8005814 <chk_lock+0xd4>)
 80057a0:	68fa      	ldr	r2, [r7, #12]
 80057a2:	4613      	mov	r3, r2
 80057a4:	005b      	lsls	r3, r3, #1
 80057a6:	4413      	add	r3, r2
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	440b      	add	r3, r1
 80057ac:	3308      	adds	r3, #8
 80057ae:	881a      	ldrh	r2, [r3, #0]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
				Files[i].clu == dp->sclust &&
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d102      	bne.n	80057c0 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 80057ba:	e007      	b.n	80057cc <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 80057bc:	2301      	movs	r3, #1
 80057be:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	3301      	adds	r3, #1
 80057c4:	60fb      	str	r3, [r7, #12]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d9c3      	bls.n	8005754 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2b02      	cmp	r3, #2
 80057d0:	d109      	bne.n	80057e6 <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d102      	bne.n	80057de <chk_lock+0x9e>
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	2b02      	cmp	r3, #2
 80057dc:	d101      	bne.n	80057e2 <chk_lock+0xa2>
 80057de:	2300      	movs	r3, #0
 80057e0:	e013      	b.n	800580a <chk_lock+0xca>
 80057e2:	2312      	movs	r3, #18
 80057e4:	e011      	b.n	800580a <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d10b      	bne.n	8005804 <chk_lock+0xc4>
 80057ec:	4909      	ldr	r1, [pc, #36]	; (8005814 <chk_lock+0xd4>)
 80057ee:	68fa      	ldr	r2, [r7, #12]
 80057f0:	4613      	mov	r3, r2
 80057f2:	005b      	lsls	r3, r3, #1
 80057f4:	4413      	add	r3, r2
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	440b      	add	r3, r1
 80057fa:	330a      	adds	r3, #10
 80057fc:	881b      	ldrh	r3, [r3, #0]
 80057fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005802:	d101      	bne.n	8005808 <chk_lock+0xc8>
 8005804:	2310      	movs	r3, #16
 8005806:	e000      	b.n	800580a <chk_lock+0xca>
 8005808:	2300      	movs	r3, #0
}
 800580a:	4618      	mov	r0, r3
 800580c:	3714      	adds	r7, #20
 800580e:	46bd      	mov	sp, r7
 8005810:	bc80      	pop	{r7}
 8005812:	4770      	bx	lr
 8005814:	2000009c 	.word	0x2000009c

08005818 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005818:	b480      	push	{r7}
 800581a:	b083      	sub	sp, #12
 800581c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800581e:	2300      	movs	r3, #0
 8005820:	607b      	str	r3, [r7, #4]
 8005822:	e002      	b.n	800582a <enq_lock+0x12>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	3301      	adds	r3, #1
 8005828:	607b      	str	r3, [r7, #4]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2b01      	cmp	r3, #1
 800582e:	d809      	bhi.n	8005844 <enq_lock+0x2c>
 8005830:	490a      	ldr	r1, [pc, #40]	; (800585c <enq_lock+0x44>)
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	4613      	mov	r3, r2
 8005836:	005b      	lsls	r3, r3, #1
 8005838:	4413      	add	r3, r2
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	440b      	add	r3, r1
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d1ef      	bne.n	8005824 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2b02      	cmp	r3, #2
 8005848:	bf14      	ite	ne
 800584a:	2301      	movne	r3, #1
 800584c:	2300      	moveq	r3, #0
 800584e:	b2db      	uxtb	r3, r3
}
 8005850:	4618      	mov	r0, r3
 8005852:	370c      	adds	r7, #12
 8005854:	46bd      	mov	sp, r7
 8005856:	bc80      	pop	{r7}
 8005858:	4770      	bx	lr
 800585a:	bf00      	nop
 800585c:	2000009c 	.word	0x2000009c

08005860 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005860:	b480      	push	{r7}
 8005862:	b085      	sub	sp, #20
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800586a:	2300      	movs	r3, #0
 800586c:	60fb      	str	r3, [r7, #12]
 800586e:	e02b      	b.n	80058c8 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 8005870:	4955      	ldr	r1, [pc, #340]	; (80059c8 <inc_lock+0x168>)
 8005872:	68fa      	ldr	r2, [r7, #12]
 8005874:	4613      	mov	r3, r2
 8005876:	005b      	lsls	r3, r3, #1
 8005878:	4413      	add	r3, r2
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	440b      	add	r3, r1
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005886:	429a      	cmp	r2, r3
 8005888:	d11b      	bne.n	80058c2 <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 800588a:	494f      	ldr	r1, [pc, #316]	; (80059c8 <inc_lock+0x168>)
 800588c:	68fa      	ldr	r2, [r7, #12]
 800588e:	4613      	mov	r3, r2
 8005890:	005b      	lsls	r3, r3, #1
 8005892:	4413      	add	r3, r2
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	440b      	add	r3, r1
 8005898:	3304      	adds	r3, #4
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d10d      	bne.n	80058c2 <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 80058a6:	4948      	ldr	r1, [pc, #288]	; (80059c8 <inc_lock+0x168>)
 80058a8:	68fa      	ldr	r2, [r7, #12]
 80058aa:	4613      	mov	r3, r2
 80058ac:	005b      	lsls	r3, r3, #1
 80058ae:	4413      	add	r3, r2
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	440b      	add	r3, r1
 80058b4:	3308      	adds	r3, #8
 80058b6:	881a      	ldrh	r2, [r3, #0]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 80058be:	429a      	cmp	r2, r3
 80058c0:	d006      	beq.n	80058d0 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	3301      	adds	r3, #1
 80058c6:	60fb      	str	r3, [r7, #12]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d9d0      	bls.n	8005870 <inc_lock+0x10>
 80058ce:	e000      	b.n	80058d2 <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 80058d0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2b02      	cmp	r3, #2
 80058d6:	d145      	bne.n	8005964 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80058d8:	2300      	movs	r3, #0
 80058da:	60fb      	str	r3, [r7, #12]
 80058dc:	e002      	b.n	80058e4 <inc_lock+0x84>
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	3301      	adds	r3, #1
 80058e2:	60fb      	str	r3, [r7, #12]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d809      	bhi.n	80058fe <inc_lock+0x9e>
 80058ea:	4937      	ldr	r1, [pc, #220]	; (80059c8 <inc_lock+0x168>)
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	4613      	mov	r3, r2
 80058f0:	005b      	lsls	r3, r3, #1
 80058f2:	4413      	add	r3, r2
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	440b      	add	r3, r1
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d1ef      	bne.n	80058de <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2b02      	cmp	r3, #2
 8005902:	d101      	bne.n	8005908 <inc_lock+0xa8>
 8005904:	2300      	movs	r3, #0
 8005906:	e05a      	b.n	80059be <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 800590e:	482e      	ldr	r0, [pc, #184]	; (80059c8 <inc_lock+0x168>)
 8005910:	68fa      	ldr	r2, [r7, #12]
 8005912:	4613      	mov	r3, r2
 8005914:	005b      	lsls	r3, r3, #1
 8005916:	4413      	add	r3, r2
 8005918:	009b      	lsls	r3, r3, #2
 800591a:	4403      	add	r3, r0
 800591c:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 8005924:	4828      	ldr	r0, [pc, #160]	; (80059c8 <inc_lock+0x168>)
 8005926:	68fa      	ldr	r2, [r7, #12]
 8005928:	4613      	mov	r3, r2
 800592a:	005b      	lsls	r3, r3, #1
 800592c:	4413      	add	r3, r2
 800592e:	009b      	lsls	r3, r3, #2
 8005930:	4403      	add	r3, r0
 8005932:	3304      	adds	r3, #4
 8005934:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 800593c:	4922      	ldr	r1, [pc, #136]	; (80059c8 <inc_lock+0x168>)
 800593e:	68fa      	ldr	r2, [r7, #12]
 8005940:	4613      	mov	r3, r2
 8005942:	005b      	lsls	r3, r3, #1
 8005944:	4413      	add	r3, r2
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	440b      	add	r3, r1
 800594a:	3308      	adds	r3, #8
 800594c:	4602      	mov	r2, r0
 800594e:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8005950:	491d      	ldr	r1, [pc, #116]	; (80059c8 <inc_lock+0x168>)
 8005952:	68fa      	ldr	r2, [r7, #12]
 8005954:	4613      	mov	r3, r2
 8005956:	005b      	lsls	r3, r3, #1
 8005958:	4413      	add	r3, r2
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	440b      	add	r3, r1
 800595e:	330a      	adds	r3, #10
 8005960:	2200      	movs	r2, #0
 8005962:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d00c      	beq.n	8005984 <inc_lock+0x124>
 800596a:	4917      	ldr	r1, [pc, #92]	; (80059c8 <inc_lock+0x168>)
 800596c:	68fa      	ldr	r2, [r7, #12]
 800596e:	4613      	mov	r3, r2
 8005970:	005b      	lsls	r3, r3, #1
 8005972:	4413      	add	r3, r2
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	440b      	add	r3, r1
 8005978:	330a      	adds	r3, #10
 800597a:	881b      	ldrh	r3, [r3, #0]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d001      	beq.n	8005984 <inc_lock+0x124>
 8005980:	2300      	movs	r3, #0
 8005982:	e01c      	b.n	80059be <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d10b      	bne.n	80059a2 <inc_lock+0x142>
 800598a:	490f      	ldr	r1, [pc, #60]	; (80059c8 <inc_lock+0x168>)
 800598c:	68fa      	ldr	r2, [r7, #12]
 800598e:	4613      	mov	r3, r2
 8005990:	005b      	lsls	r3, r3, #1
 8005992:	4413      	add	r3, r2
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	440b      	add	r3, r1
 8005998:	330a      	adds	r3, #10
 800599a:	881b      	ldrh	r3, [r3, #0]
 800599c:	3301      	adds	r3, #1
 800599e:	b299      	uxth	r1, r3
 80059a0:	e001      	b.n	80059a6 <inc_lock+0x146>
 80059a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80059a6:	4808      	ldr	r0, [pc, #32]	; (80059c8 <inc_lock+0x168>)
 80059a8:	68fa      	ldr	r2, [r7, #12]
 80059aa:	4613      	mov	r3, r2
 80059ac:	005b      	lsls	r3, r3, #1
 80059ae:	4413      	add	r3, r2
 80059b0:	009b      	lsls	r3, r3, #2
 80059b2:	4403      	add	r3, r0
 80059b4:	330a      	adds	r3, #10
 80059b6:	460a      	mov	r2, r1
 80059b8:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	3301      	adds	r3, #1
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3714      	adds	r7, #20
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bc80      	pop	{r7}
 80059c6:	4770      	bx	lr
 80059c8:	2000009c 	.word	0x2000009c

080059cc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b085      	sub	sp, #20
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	3b01      	subs	r3, #1
 80059d8:	607b      	str	r3, [r7, #4]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d82e      	bhi.n	8005a3e <dec_lock+0x72>
		n = Files[i].ctr;
 80059e0:	491b      	ldr	r1, [pc, #108]	; (8005a50 <dec_lock+0x84>)
 80059e2:	687a      	ldr	r2, [r7, #4]
 80059e4:	4613      	mov	r3, r2
 80059e6:	005b      	lsls	r3, r3, #1
 80059e8:	4413      	add	r3, r2
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	440b      	add	r3, r1
 80059ee:	330a      	adds	r3, #10
 80059f0:	881b      	ldrh	r3, [r3, #0]
 80059f2:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80059f4:	89fb      	ldrh	r3, [r7, #14]
 80059f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059fa:	d101      	bne.n	8005a00 <dec_lock+0x34>
 80059fc:	2300      	movs	r3, #0
 80059fe:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8005a00:	89fb      	ldrh	r3, [r7, #14]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d002      	beq.n	8005a0c <dec_lock+0x40>
 8005a06:	89fb      	ldrh	r3, [r7, #14]
 8005a08:	3b01      	subs	r3, #1
 8005a0a:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005a0c:	4910      	ldr	r1, [pc, #64]	; (8005a50 <dec_lock+0x84>)
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	4613      	mov	r3, r2
 8005a12:	005b      	lsls	r3, r3, #1
 8005a14:	4413      	add	r3, r2
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	440b      	add	r3, r1
 8005a1a:	330a      	adds	r3, #10
 8005a1c:	89fa      	ldrh	r2, [r7, #14]
 8005a1e:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005a20:	89fb      	ldrh	r3, [r7, #14]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d108      	bne.n	8005a38 <dec_lock+0x6c>
 8005a26:	490a      	ldr	r1, [pc, #40]	; (8005a50 <dec_lock+0x84>)
 8005a28:	687a      	ldr	r2, [r7, #4]
 8005a2a:	4613      	mov	r3, r2
 8005a2c:	005b      	lsls	r3, r3, #1
 8005a2e:	4413      	add	r3, r2
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	440b      	add	r3, r1
 8005a34:	2200      	movs	r2, #0
 8005a36:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	737b      	strb	r3, [r7, #13]
 8005a3c:	e001      	b.n	8005a42 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005a3e:	2302      	movs	r3, #2
 8005a40:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005a42:	7b7b      	ldrb	r3, [r7, #13]
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3714      	adds	r7, #20
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bc80      	pop	{r7}
 8005a4c:	4770      	bx	lr
 8005a4e:	bf00      	nop
 8005a50:	2000009c 	.word	0x2000009c

08005a54 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b085      	sub	sp, #20
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	60fb      	str	r3, [r7, #12]
 8005a60:	e016      	b.n	8005a90 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005a62:	490f      	ldr	r1, [pc, #60]	; (8005aa0 <clear_lock+0x4c>)
 8005a64:	68fa      	ldr	r2, [r7, #12]
 8005a66:	4613      	mov	r3, r2
 8005a68:	005b      	lsls	r3, r3, #1
 8005a6a:	4413      	add	r3, r2
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	440b      	add	r3, r1
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d108      	bne.n	8005a8a <clear_lock+0x36>
 8005a78:	4909      	ldr	r1, [pc, #36]	; (8005aa0 <clear_lock+0x4c>)
 8005a7a:	68fa      	ldr	r2, [r7, #12]
 8005a7c:	4613      	mov	r3, r2
 8005a7e:	005b      	lsls	r3, r3, #1
 8005a80:	4413      	add	r3, r2
 8005a82:	009b      	lsls	r3, r3, #2
 8005a84:	440b      	add	r3, r1
 8005a86:	2200      	movs	r2, #0
 8005a88:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	60fb      	str	r3, [r7, #12]
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d9e5      	bls.n	8005a62 <clear_lock+0xe>
	}
}
 8005a96:	bf00      	nop
 8005a98:	3714      	adds	r7, #20
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bc80      	pop	{r7}
 8005a9e:	4770      	bx	lr
 8005aa0:	2000009c 	.word	0x2000009c

08005aa4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b086      	sub	sp, #24
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005aac:	2300      	movs	r3, #0
 8005aae:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d038      	beq.n	8005b2c <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 8005ac0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8005ac8:	6879      	ldr	r1, [r7, #4]
 8005aca:	2301      	movs	r3, #1
 8005acc:	697a      	ldr	r2, [r7, #20]
 8005ace:	f7ff fd43 	bl	8005558 <disk_write>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d002      	beq.n	8005ade <sync_window+0x3a>
			res = FR_DISK_ERR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	73fb      	strb	r3, [r7, #15]
 8005adc:	e026      	b.n	8005b2c <sync_window+0x88>
		} else {
			fs->wflag = 0;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8005aec:	697a      	ldr	r2, [r7, #20]
 8005aee:	1ad2      	subs	r2, r2, r3
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d218      	bcs.n	8005b2c <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8005b00:	613b      	str	r3, [r7, #16]
 8005b02:	e010      	b.n	8005b26 <sync_window+0x82>
					wsect += fs->fsize;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8005b0a:	697a      	ldr	r2, [r7, #20]
 8005b0c:	4413      	add	r3, r2
 8005b0e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8005b16:	6879      	ldr	r1, [r7, #4]
 8005b18:	2301      	movs	r3, #1
 8005b1a:	697a      	ldr	r2, [r7, #20]
 8005b1c:	f7ff fd1c 	bl	8005558 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	3b01      	subs	r3, #1
 8005b24:	613b      	str	r3, [r7, #16]
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d8eb      	bhi.n	8005b04 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 8005b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3718      	adds	r7, #24
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}

08005b36 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8005b36:	b580      	push	{r7, lr}
 8005b38:	b084      	sub	sp, #16
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	6078      	str	r0, [r7, #4]
 8005b3e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005b40:	2300      	movs	r3, #0
 8005b42:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 8005b4a:	683a      	ldr	r2, [r7, #0]
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d01b      	beq.n	8005b88 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f7ff ffa7 	bl	8005aa4 <sync_window>
 8005b56:	4603      	mov	r3, r0
 8005b58:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005b5a:	7bfb      	ldrb	r3, [r7, #15]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d113      	bne.n	8005b88 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8005b66:	6879      	ldr	r1, [r7, #4]
 8005b68:	2301      	movs	r3, #1
 8005b6a:	683a      	ldr	r2, [r7, #0]
 8005b6c:	f7ff fcd4 	bl	8005518 <disk_read>
 8005b70:	4603      	mov	r3, r0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d004      	beq.n	8005b80 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005b76:	f04f 33ff 	mov.w	r3, #4294967295
 8005b7a:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	683a      	ldr	r2, [r7, #0]
 8005b84:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
		}
	}
	return res;
 8005b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3710      	adds	r7, #16
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}
	...

08005b94 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b084      	sub	sp, #16
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f7ff ff81 	bl	8005aa4 <sync_window>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005ba6:	7bfb      	ldrb	r3, [r7, #15]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d14e      	bne.n	8005c4a <sync_fs+0xb6>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005bb2:	2b03      	cmp	r3, #3
 8005bb4:	d13c      	bne.n	8005c30 <sync_fs+0x9c>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d137      	bne.n	8005c30 <sync_fs+0x9c>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bc6:	2100      	movs	r1, #0
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f7ff fd31 	bl	8005630 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005bd4:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8005bd8:	801a      	strh	r2, [r3, #0]
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4a1d      	ldr	r2, [pc, #116]	; (8005c54 <sync_fs+0xc0>)
 8005bde:	601a      	str	r2, [r3, #0]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005be6:	4a1c      	ldr	r2, [pc, #112]	; (8005c58 <sync_fs+0xc4>)
 8005be8:	601a      	str	r2, [r3, #0]
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	f8d2 2214 	ldr.w	r2, [r2, #532]	; 0x214
 8005bf6:	601a      	str	r2, [r3, #0]
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	f8d2 2210 	ldr.w	r2, [r2, #528]	; 0x210
 8005c04:	601a      	str	r2, [r3, #0]
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8005c0c:	1c5a      	adds	r2, r3, #1
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8005c1a:	6879      	ldr	r1, [r7, #4]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f8d3 2230 	ldr.w	r2, [r3, #560]	; 0x230
 8005c22:	2301      	movs	r3, #1
 8005c24:	f7ff fc98 	bl	8005558 <disk_write>
			fs->fsi_flag = 0;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005c36:	2200      	movs	r2, #0
 8005c38:	2100      	movs	r1, #0
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f7ff fcac 	bl	8005598 <disk_ioctl>
 8005c40:	4603      	mov	r3, r0
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d001      	beq.n	8005c4a <sync_fs+0xb6>
			res = FR_DISK_ERR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3710      	adds	r7, #16
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}
 8005c54:	41615252 	.word	0x41615252
 8005c58:	61417272 	.word	0x61417272

08005c5c <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b083      	sub	sp, #12
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	3b02      	subs	r3, #2
 8005c6a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005c72:	3b02      	subs	r3, #2
 8005c74:	683a      	ldr	r2, [r7, #0]
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d301      	bcc.n	8005c7e <clust2sect+0x22>
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	e00a      	b.n	8005c94 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8005c84:	461a      	mov	r2, r3
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	fb03 f202 	mul.w	r2, r3, r2
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8005c92:	4413      	add	r3, r2
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	370c      	adds	r7, #12
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bc80      	pop	{r7}
 8005c9c:	4770      	bx	lr

08005c9e <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8005c9e:	b580      	push	{r7, lr}
 8005ca0:	b086      	sub	sp, #24
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6078      	str	r0, [r7, #4]
 8005ca6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d905      	bls.n	8005cba <get_fat+0x1c>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005cb4:	683a      	ldr	r2, [r7, #0]
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d302      	bcc.n	8005cc0 <get_fat+0x22>
		val = 1;	/* Internal error */
 8005cba:	2301      	movs	r3, #1
 8005cbc:	617b      	str	r3, [r7, #20]
 8005cbe:	e087      	b.n	8005dd0 <get_fat+0x132>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8005cc4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005ccc:	2b02      	cmp	r3, #2
 8005cce:	d043      	beq.n	8005d58 <get_fat+0xba>
 8005cd0:	2b03      	cmp	r3, #3
 8005cd2:	d059      	beq.n	8005d88 <get_fat+0xea>
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d171      	bne.n	8005dbc <get_fat+0x11e>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	60fb      	str	r3, [r7, #12]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	085b      	lsrs	r3, r3, #1
 8005ce0:	68fa      	ldr	r2, [r7, #12]
 8005ce2:	4413      	add	r3, r2
 8005ce4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	0a5b      	lsrs	r3, r3, #9
 8005cf0:	4413      	add	r3, r2
 8005cf2:	4619      	mov	r1, r3
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f7ff ff1e 	bl	8005b36 <move_window>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d160      	bne.n	8005dc2 <get_fat+0x124>
			wc = fs->win.d8[bc++ % SS(fs)];
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	1c5a      	adds	r2, r3, #1
 8005d04:	60fa      	str	r2, [r7, #12]
 8005d06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	5cd3      	ldrb	r3, [r2, r3]
 8005d0e:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	0a5b      	lsrs	r3, r3, #9
 8005d1a:	4413      	add	r3, r2
 8005d1c:	4619      	mov	r1, r3
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f7ff ff09 	bl	8005b36 <move_window>
 8005d24:	4603      	mov	r3, r0
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d14d      	bne.n	8005dc6 <get_fat+0x128>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	5cd3      	ldrb	r3, [r2, r3]
 8005d34:	021b      	lsls	r3, r3, #8
 8005d36:	461a      	mov	r2, r3
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	f003 0301 	and.w	r3, r3, #1
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d002      	beq.n	8005d4e <get_fat+0xb0>
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	091b      	lsrs	r3, r3, #4
 8005d4c:	e002      	b.n	8005d54 <get_fat+0xb6>
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d54:	617b      	str	r3, [r7, #20]
			break;
 8005d56:	e03b      	b.n	8005dd0 <get_fat+0x132>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	0a1b      	lsrs	r3, r3, #8
 8005d62:	4413      	add	r3, r2
 8005d64:	4619      	mov	r1, r3
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f7ff fee5 	bl	8005b36 <move_window>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d12b      	bne.n	8005dca <get_fat+0x12c>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	005b      	lsls	r3, r3, #1
 8005d76:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	4413      	add	r3, r2
 8005d7e:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	881b      	ldrh	r3, [r3, #0]
 8005d84:	617b      	str	r3, [r7, #20]
			break;
 8005d86:	e023      	b.n	8005dd0 <get_fat+0x132>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	09db      	lsrs	r3, r3, #7
 8005d92:	4413      	add	r3, r2
 8005d94:	4619      	mov	r1, r3
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f7ff fecd 	bl	8005b36 <move_window>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d115      	bne.n	8005dce <get_fat+0x130>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	4413      	add	r3, r2
 8005dae:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005db8:	617b      	str	r3, [r7, #20]
			break;
 8005dba:	e009      	b.n	8005dd0 <get_fat+0x132>

		default:
			val = 1;	/* Internal error */
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	617b      	str	r3, [r7, #20]
 8005dc0:	e006      	b.n	8005dd0 <get_fat+0x132>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005dc2:	bf00      	nop
 8005dc4:	e004      	b.n	8005dd0 <get_fat+0x132>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005dc6:	bf00      	nop
 8005dc8:	e002      	b.n	8005dd0 <get_fat+0x132>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005dca:	bf00      	nop
 8005dcc:	e000      	b.n	8005dd0 <get_fat+0x132>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005dce:	bf00      	nop
		}
	}

	return val;
 8005dd0:	697b      	ldr	r3, [r7, #20]
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3718      	adds	r7, #24
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}

08005dda <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8005dda:	b580      	push	{r7, lr}
 8005ddc:	b088      	sub	sp, #32
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	60f8      	str	r0, [r7, #12]
 8005de2:	60b9      	str	r1, [r7, #8]
 8005de4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d905      	bls.n	8005df8 <put_fat+0x1e>
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005df2:	68ba      	ldr	r2, [r7, #8]
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d302      	bcc.n	8005dfe <put_fat+0x24>
		res = FR_INT_ERR;
 8005df8:	2302      	movs	r3, #2
 8005dfa:	77fb      	strb	r3, [r7, #31]
 8005dfc:	e0c6      	b.n	8005f8c <put_fat+0x1b2>

	} else {
		switch (fs->fs_type) {
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005e04:	2b02      	cmp	r3, #2
 8005e06:	d073      	beq.n	8005ef0 <put_fat+0x116>
 8005e08:	2b03      	cmp	r3, #3
 8005e0a:	f000 8090 	beq.w	8005f2e <put_fat+0x154>
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	f040 80b2 	bne.w	8005f78 <put_fat+0x19e>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	617b      	str	r3, [r7, #20]
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	085b      	lsrs	r3, r3, #1
 8005e1c:	697a      	ldr	r2, [r7, #20]
 8005e1e:	4413      	add	r3, r2
 8005e20:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	0a5b      	lsrs	r3, r3, #9
 8005e2c:	4413      	add	r3, r2
 8005e2e:	4619      	mov	r1, r3
 8005e30:	68f8      	ldr	r0, [r7, #12]
 8005e32:	f7ff fe80 	bl	8005b36 <move_window>
 8005e36:	4603      	mov	r3, r0
 8005e38:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005e3a:	7ffb      	ldrb	r3, [r7, #31]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	f040 809e 	bne.w	8005f7e <put_fat+0x1a4>
			p = &fs->win.d8[bc++ % SS(fs)];
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	1c5a      	adds	r2, r3, #1
 8005e46:	617a      	str	r2, [r7, #20]
 8005e48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e4c:	68fa      	ldr	r2, [r7, #12]
 8005e4e:	4413      	add	r3, r2
 8005e50:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	f003 0301 	and.w	r3, r3, #1
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d00d      	beq.n	8005e78 <put_fat+0x9e>
 8005e5c:	69bb      	ldr	r3, [r7, #24]
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	b25b      	sxtb	r3, r3
 8005e62:	f003 030f 	and.w	r3, r3, #15
 8005e66:	b25a      	sxtb	r2, r3
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	b2db      	uxtb	r3, r3
 8005e6c:	011b      	lsls	r3, r3, #4
 8005e6e:	b25b      	sxtb	r3, r3
 8005e70:	4313      	orrs	r3, r2
 8005e72:	b25b      	sxtb	r3, r3
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	e001      	b.n	8005e7c <put_fat+0xa2>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	69ba      	ldr	r2, [r7, #24]
 8005e7e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	0a5b      	lsrs	r3, r3, #9
 8005e92:	4413      	add	r3, r2
 8005e94:	4619      	mov	r1, r3
 8005e96:	68f8      	ldr	r0, [r7, #12]
 8005e98:	f7ff fe4d 	bl	8005b36 <move_window>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005ea0:	7ffb      	ldrb	r3, [r7, #31]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d16d      	bne.n	8005f82 <put_fat+0x1a8>
			p = &fs->win.d8[bc % SS(fs)];
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eac:	68fa      	ldr	r2, [r7, #12]
 8005eae:	4413      	add	r3, r2
 8005eb0:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	f003 0301 	and.w	r3, r3, #1
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d003      	beq.n	8005ec4 <put_fat+0xea>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	091b      	lsrs	r3, r3, #4
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	e00e      	b.n	8005ee2 <put_fat+0x108>
 8005ec4:	69bb      	ldr	r3, [r7, #24]
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	b25b      	sxtb	r3, r3
 8005eca:	f023 030f 	bic.w	r3, r3, #15
 8005ece:	b25a      	sxtb	r2, r3
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	0a1b      	lsrs	r3, r3, #8
 8005ed4:	b25b      	sxtb	r3, r3
 8005ed6:	f003 030f 	and.w	r3, r3, #15
 8005eda:	b25b      	sxtb	r3, r3
 8005edc:	4313      	orrs	r3, r2
 8005ede:	b25b      	sxtb	r3, r3
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	69ba      	ldr	r2, [r7, #24]
 8005ee4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2201      	movs	r2, #1
 8005eea:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8005eee:	e04d      	b.n	8005f8c <put_fat+0x1b2>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	0a1b      	lsrs	r3, r3, #8
 8005efa:	4413      	add	r3, r2
 8005efc:	4619      	mov	r1, r3
 8005efe:	68f8      	ldr	r0, [r7, #12]
 8005f00:	f7ff fe19 	bl	8005b36 <move_window>
 8005f04:	4603      	mov	r3, r0
 8005f06:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005f08:	7ffb      	ldrb	r3, [r7, #31]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d13b      	bne.n	8005f86 <put_fat+0x1ac>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	005b      	lsls	r3, r3, #1
 8005f12:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005f16:	68fa      	ldr	r2, [r7, #12]
 8005f18:	4413      	add	r3, r2
 8005f1a:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	b29a      	uxth	r2, r3
 8005f20:	69bb      	ldr	r3, [r7, #24]
 8005f22:	801a      	strh	r2, [r3, #0]
			fs->wflag = 1;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8005f2c:	e02e      	b.n	8005f8c <put_fat+0x1b2>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	09db      	lsrs	r3, r3, #7
 8005f38:	4413      	add	r3, r2
 8005f3a:	4619      	mov	r1, r3
 8005f3c:	68f8      	ldr	r0, [r7, #12]
 8005f3e:	f7ff fdfa 	bl	8005b36 <move_window>
 8005f42:	4603      	mov	r3, r0
 8005f44:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005f46:	7ffb      	ldrb	r3, [r7, #31]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d11e      	bne.n	8005f8a <put_fat+0x1b0>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005f54:	68fa      	ldr	r2, [r7, #12]
 8005f56:	4413      	add	r3, r2
 8005f58:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8005f5a:	69bb      	ldr	r3, [r7, #24]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	4313      	orrs	r3, r2
 8005f66:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8005f68:	69bb      	ldr	r3, [r7, #24]
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	601a      	str	r2, [r3, #0]
			fs->wflag = 1;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2201      	movs	r2, #1
 8005f72:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8005f76:	e009      	b.n	8005f8c <put_fat+0x1b2>

		default :
			res = FR_INT_ERR;
 8005f78:	2302      	movs	r3, #2
 8005f7a:	77fb      	strb	r3, [r7, #31]
 8005f7c:	e006      	b.n	8005f8c <put_fat+0x1b2>
			if (res != FR_OK) break;
 8005f7e:	bf00      	nop
 8005f80:	e004      	b.n	8005f8c <put_fat+0x1b2>
			if (res != FR_OK) break;
 8005f82:	bf00      	nop
 8005f84:	e002      	b.n	8005f8c <put_fat+0x1b2>
			if (res != FR_OK) break;
 8005f86:	bf00      	nop
 8005f88:	e000      	b.n	8005f8c <put_fat+0x1b2>
			if (res != FR_OK) break;
 8005f8a:	bf00      	nop
		}
	}

	return res;
 8005f8c:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3720      	adds	r7, #32
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}

08005f96 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8005f96:	b580      	push	{r7, lr}
 8005f98:	b084      	sub	sp, #16
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	6078      	str	r0, [r7, #4]
 8005f9e:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	d905      	bls.n	8005fb2 <remove_chain+0x1c>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005fac:	683a      	ldr	r2, [r7, #0]
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d302      	bcc.n	8005fb8 <remove_chain+0x22>
		res = FR_INT_ERR;
 8005fb2:	2302      	movs	r3, #2
 8005fb4:	73fb      	strb	r3, [r7, #15]
 8005fb6:	e043      	b.n	8006040 <remove_chain+0xaa>

	} else {
		res = FR_OK;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8005fbc:	e036      	b.n	800602c <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8005fbe:	6839      	ldr	r1, [r7, #0]
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f7ff fe6c 	bl	8005c9e <get_fat>
 8005fc6:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d035      	beq.n	800603a <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d102      	bne.n	8005fda <remove_chain+0x44>
 8005fd4:	2302      	movs	r3, #2
 8005fd6:	73fb      	strb	r3, [r7, #15]
 8005fd8:	e032      	b.n	8006040 <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fe0:	d102      	bne.n	8005fe8 <remove_chain+0x52>
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	73fb      	strb	r3, [r7, #15]
 8005fe6:	e02b      	b.n	8006040 <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8005fe8:	2200      	movs	r2, #0
 8005fea:	6839      	ldr	r1, [r7, #0]
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f7ff fef4 	bl	8005dda <put_fat>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8005ff6:	7bfb      	ldrb	r3, [r7, #15]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d120      	bne.n	800603e <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006006:	d00f      	beq.n	8006028 <remove_chain+0x92>
				fs->free_clust++;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800600e:	1c5a      	adds	r2, r3, #1
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				fs->fsi_flag |= 1;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800601c:	f043 0301 	orr.w	r3, r3, #1
 8006020:	b2da      	uxtb	r2, r3
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006032:	683a      	ldr	r2, [r7, #0]
 8006034:	429a      	cmp	r2, r3
 8006036:	d3c2      	bcc.n	8005fbe <remove_chain+0x28>
 8006038:	e002      	b.n	8006040 <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 800603a:	bf00      	nop
 800603c:	e000      	b.n	8006040 <remove_chain+0xaa>
			if (res != FR_OK) break;
 800603e:	bf00      	nop
		}
	}

	return res;
 8006040:	7bfb      	ldrb	r3, [r7, #15]
}
 8006042:	4618      	mov	r0, r3
 8006044:	3710      	adds	r7, #16
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}

0800604a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 800604a:	b580      	push	{r7, lr}
 800604c:	b086      	sub	sp, #24
 800604e:	af00      	add	r7, sp, #0
 8006050:	6078      	str	r0, [r7, #4]
 8006052:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d10f      	bne.n	800607a <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006060:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d005      	beq.n	8006074 <create_chain+0x2a>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800606e:	693a      	ldr	r2, [r7, #16]
 8006070:	429a      	cmp	r2, r3
 8006072:	d31c      	bcc.n	80060ae <create_chain+0x64>
 8006074:	2301      	movs	r3, #1
 8006076:	613b      	str	r3, [r7, #16]
 8006078:	e019      	b.n	80060ae <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800607a:	6839      	ldr	r1, [r7, #0]
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f7ff fe0e 	bl	8005c9e <get_fat>
 8006082:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	2b01      	cmp	r3, #1
 8006088:	d801      	bhi.n	800608e <create_chain+0x44>
 800608a:	2301      	movs	r3, #1
 800608c:	e076      	b.n	800617c <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006094:	d101      	bne.n	800609a <create_chain+0x50>
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	e070      	b.n	800617c <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80060a0:	68ba      	ldr	r2, [r7, #8]
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d201      	bcs.n	80060aa <create_chain+0x60>
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	e068      	b.n	800617c <create_chain+0x132>
		scl = clst;
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	3301      	adds	r3, #1
 80060b6:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80060be:	697a      	ldr	r2, [r7, #20]
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d307      	bcc.n	80060d4 <create_chain+0x8a>
			ncl = 2;
 80060c4:	2302      	movs	r3, #2
 80060c6:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 80060c8:	697a      	ldr	r2, [r7, #20]
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d901      	bls.n	80060d4 <create_chain+0x8a>
 80060d0:	2300      	movs	r3, #0
 80060d2:	e053      	b.n	800617c <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 80060d4:	6979      	ldr	r1, [r7, #20]
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f7ff fde1 	bl	8005c9e <get_fat>
 80060dc:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d00e      	beq.n	8006102 <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ea:	d002      	beq.n	80060f2 <create_chain+0xa8>
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d101      	bne.n	80060f6 <create_chain+0xac>
			return cs;
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	e042      	b.n	800617c <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 80060f6:	697a      	ldr	r2, [r7, #20]
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d1d9      	bne.n	80060b2 <create_chain+0x68>
 80060fe:	2300      	movs	r3, #0
 8006100:	e03c      	b.n	800617c <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 8006102:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8006104:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8006108:	6979      	ldr	r1, [r7, #20]
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f7ff fe65 	bl	8005dda <put_fat>
 8006110:	4603      	mov	r3, r0
 8006112:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8006114:	7bfb      	ldrb	r3, [r7, #15]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d109      	bne.n	800612e <create_chain+0xe4>
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d006      	beq.n	800612e <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8006120:	697a      	ldr	r2, [r7, #20]
 8006122:	6839      	ldr	r1, [r7, #0]
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f7ff fe58 	bl	8005dda <put_fat>
 800612a:	4603      	mov	r3, r0
 800612c:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800612e:	7bfb      	ldrb	r3, [r7, #15]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d11a      	bne.n	800616a <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	697a      	ldr	r2, [r7, #20]
 8006138:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
		if (fs->free_clust != 0xFFFFFFFF) {
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006146:	d018      	beq.n	800617a <create_chain+0x130>
			fs->free_clust--;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800614e:	1e5a      	subs	r2, r3, #1
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			fs->fsi_flag |= 1;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800615c:	f043 0301 	orr.w	r3, r3, #1
 8006160:	b2da      	uxtb	r2, r3
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 8006168:	e007      	b.n	800617a <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800616a:	7bfb      	ldrb	r3, [r7, #15]
 800616c:	2b01      	cmp	r3, #1
 800616e:	d102      	bne.n	8006176 <create_chain+0x12c>
 8006170:	f04f 33ff 	mov.w	r3, #4294967295
 8006174:	e000      	b.n	8006178 <create_chain+0x12e>
 8006176:	2301      	movs	r3, #1
 8006178:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 800617a:	697b      	ldr	r3, [r7, #20]
}
 800617c:	4618      	mov	r0, r3
 800617e:	3718      	adds	r7, #24
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}

08006184 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8006184:	b480      	push	{r7}
 8006186:	b087      	sub	sp, #28
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8006194:	3304      	adds	r3, #4
 8006196:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	0a5b      	lsrs	r3, r3, #9
 800619c:	687a      	ldr	r2, [r7, #4]
 800619e:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 80061a2:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80061a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80061aa:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	1d1a      	adds	r2, r3, #4
 80061b0:	613a      	str	r2, [r7, #16]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d101      	bne.n	80061c0 <clmt_clust+0x3c>
 80061bc:	2300      	movs	r3, #0
 80061be:	e010      	b.n	80061e2 <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 80061c0:	697a      	ldr	r2, [r7, #20]
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d307      	bcc.n	80061d8 <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 80061c8:	697a      	ldr	r2, [r7, #20]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	1ad3      	subs	r3, r2, r3
 80061ce:	617b      	str	r3, [r7, #20]
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	3304      	adds	r3, #4
 80061d4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80061d6:	e7e9      	b.n	80061ac <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 80061d8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	681a      	ldr	r2, [r3, #0]
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	4413      	add	r3, r2
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	371c      	adds	r7, #28
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bc80      	pop	{r7}
 80061ea:	4770      	bx	lr

080061ec <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b086      	sub	sp, #24
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
 80061f4:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	b29a      	uxth	r2, r3
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8006206:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	2b01      	cmp	r3, #1
 800620c:	d007      	beq.n	800621e <dir_sdi+0x32>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006214:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006218:	697a      	ldr	r2, [r7, #20]
 800621a:	429a      	cmp	r2, r3
 800621c:	d301      	bcc.n	8006222 <dir_sdi+0x36>
		return FR_INT_ERR;
 800621e:	2302      	movs	r3, #2
 8006220:	e074      	b.n	800630c <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d10c      	bne.n	8006242 <dir_sdi+0x56>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800622e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006232:	2b03      	cmp	r3, #3
 8006234:	d105      	bne.n	8006242 <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800623c:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8006240:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d111      	bne.n	800626c <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800624e:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8006252:	461a      	mov	r2, r3
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	4293      	cmp	r3, r2
 8006258:	d301      	bcc.n	800625e <dir_sdi+0x72>
			return FR_INT_ERR;
 800625a:	2302      	movs	r3, #2
 800625c:	e056      	b.n	800630c <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006264:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8006268:	613b      	str	r3, [r7, #16]
 800626a:	e032      	b.n	80062d2 <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006272:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8006276:	011b      	lsls	r3, r3, #4
 8006278:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800627a:	e01e      	b.n	80062ba <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006282:	6979      	ldr	r1, [r7, #20]
 8006284:	4618      	mov	r0, r3
 8006286:	f7ff fd0a 	bl	8005c9e <get_fat>
 800628a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006292:	d101      	bne.n	8006298 <dir_sdi+0xac>
 8006294:	2301      	movs	r3, #1
 8006296:	e039      	b.n	800630c <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	2b01      	cmp	r3, #1
 800629c:	d907      	bls.n	80062ae <dir_sdi+0xc2>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80062a4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80062a8:	697a      	ldr	r2, [r7, #20]
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d301      	bcc.n	80062b2 <dir_sdi+0xc6>
				return FR_INT_ERR;
 80062ae:	2302      	movs	r3, #2
 80062b0:	e02c      	b.n	800630c <dir_sdi+0x120>
			idx -= ic;
 80062b2:	683a      	ldr	r2, [r7, #0]
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	1ad3      	subs	r3, r2, r3
 80062b8:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 80062ba:	683a      	ldr	r2, [r7, #0]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	429a      	cmp	r2, r3
 80062c0:	d2dc      	bcs.n	800627c <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80062c8:	6979      	ldr	r1, [r7, #20]
 80062ca:	4618      	mov	r0, r3
 80062cc:	f7ff fcc6 	bl	8005c5c <clust2sect>
 80062d0:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	697a      	ldr	r2, [r7, #20]
 80062d6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d101      	bne.n	80062e4 <dir_sdi+0xf8>
 80062e0:	2302      	movs	r3, #2
 80062e2:	e013      	b.n	800630c <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	091a      	lsrs	r2, r3, #4
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	441a      	add	r2, r3
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80062f8:	461a      	mov	r2, r3
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	f003 030f 	and.w	r3, r3, #15
 8006300:	015b      	lsls	r3, r3, #5
 8006302:	441a      	add	r2, r3
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 800630a:	2300      	movs	r3, #0
}
 800630c:	4618      	mov	r0, r3
 800630e:	3718      	adds	r7, #24
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006314:	b590      	push	{r4, r7, lr}
 8006316:	b087      	sub	sp, #28
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 8006324:	3301      	adds	r3, #1
 8006326:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	b29b      	uxth	r3, r3
 800632c:	2b00      	cmp	r3, #0
 800632e:	d004      	beq.n	800633a <dir_next+0x26>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006336:	2b00      	cmp	r3, #0
 8006338:	d101      	bne.n	800633e <dir_next+0x2a>
		return FR_NO_FILE;
 800633a:	2304      	movs	r3, #4
 800633c:	e0dd      	b.n	80064fa <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	f003 030f 	and.w	r3, r3, #15
 8006344:	2b00      	cmp	r3, #0
 8006346:	f040 80c6 	bne.w	80064d6 <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006350:	1c5a      	adds	r2, r3, #1
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800635e:	2b00      	cmp	r3, #0
 8006360:	d10b      	bne.n	800637a <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006368:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800636c:	461a      	mov	r2, r3
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	4293      	cmp	r3, r2
 8006372:	f0c0 80b0 	bcc.w	80064d6 <dir_next+0x1c2>
				return FR_NO_FILE;
 8006376:	2304      	movs	r3, #4
 8006378:	e0bf      	b.n	80064fa <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	091b      	lsrs	r3, r3, #4
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8006384:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8006388:	3a01      	subs	r2, #1
 800638a:	4013      	ands	r3, r2
 800638c:	2b00      	cmp	r3, #0
 800638e:	f040 80a2 	bne.w	80064d6 <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800639e:	4619      	mov	r1, r3
 80063a0:	4610      	mov	r0, r2
 80063a2:	f7ff fc7c 	bl	8005c9e <get_fat>
 80063a6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d801      	bhi.n	80063b2 <dir_next+0x9e>
 80063ae:	2302      	movs	r3, #2
 80063b0:	e0a3      	b.n	80064fa <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063b8:	d101      	bne.n	80063be <dir_next+0xaa>
 80063ba:	2301      	movs	r3, #1
 80063bc:	e09d      	b.n	80064fa <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80063c4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80063c8:	697a      	ldr	r2, [r7, #20]
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d374      	bcc.n	80064b8 <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d101      	bne.n	80063d8 <dir_next+0xc4>
 80063d4:	2304      	movs	r3, #4
 80063d6:	e090      	b.n	80064fa <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80063e4:	4619      	mov	r1, r3
 80063e6:	4610      	mov	r0, r2
 80063e8:	f7ff fe2f 	bl	800604a <create_chain>
 80063ec:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d101      	bne.n	80063f8 <dir_next+0xe4>
 80063f4:	2307      	movs	r3, #7
 80063f6:	e080      	b.n	80064fa <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d101      	bne.n	8006402 <dir_next+0xee>
 80063fe:	2302      	movs	r3, #2
 8006400:	e07b      	b.n	80064fa <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006408:	d101      	bne.n	800640e <dir_next+0xfa>
 800640a:	2301      	movs	r3, #1
 800640c:	e075      	b.n	80064fa <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006414:	4618      	mov	r0, r3
 8006416:	f7ff fb45 	bl	8005aa4 <sync_window>
 800641a:	4603      	mov	r3, r0
 800641c:	2b00      	cmp	r3, #0
 800641e:	d001      	beq.n	8006424 <dir_next+0x110>
 8006420:	2301      	movs	r3, #1
 8006422:	e06a      	b.n	80064fa <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800642a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800642e:	2100      	movs	r1, #0
 8006430:	4618      	mov	r0, r3
 8006432:	f7ff f8fd 	bl	8005630 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 8006442:	6979      	ldr	r1, [r7, #20]
 8006444:	4610      	mov	r0, r2
 8006446:	f7ff fc09 	bl	8005c5c <clust2sect>
 800644a:	4603      	mov	r3, r0
 800644c:	f8c4 3230 	str.w	r3, [r4, #560]	; 0x230
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8006450:	2300      	movs	r3, #0
 8006452:	613b      	str	r3, [r7, #16]
 8006454:	e01b      	b.n	800648e <dir_next+0x17a>
						dp->fs->wflag = 1;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800645c:	2201      	movs	r2, #1
 800645e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006468:	4618      	mov	r0, r3
 800646a:	f7ff fb1b 	bl	8005aa4 <sync_window>
 800646e:	4603      	mov	r3, r0
 8006470:	2b00      	cmp	r3, #0
 8006472:	d001      	beq.n	8006478 <dir_next+0x164>
 8006474:	2301      	movs	r3, #1
 8006476:	e040      	b.n	80064fa <dir_next+0x1e6>
						dp->fs->winsect++;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800647e:	f8d3 2230 	ldr.w	r2, [r3, #560]	; 0x230
 8006482:	3201      	adds	r2, #1
 8006484:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	3301      	adds	r3, #1
 800648c:	613b      	str	r3, [r7, #16]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006494:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8006498:	461a      	mov	r2, r3
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	4293      	cmp	r3, r2
 800649e:	d3da      	bcc.n	8006456 <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80064a6:	f8d3 1230 	ldr.w	r1, [r3, #560]	; 0x230
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80064b0:	693a      	ldr	r2, [r7, #16]
 80064b2:	1a8a      	subs	r2, r1, r2
 80064b4:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	697a      	ldr	r2, [r7, #20]
 80064bc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80064c6:	6979      	ldr	r1, [r7, #20]
 80064c8:	4618      	mov	r0, r3
 80064ca:	f7ff fbc7 	bl	8005c5c <clust2sect>
 80064ce:	4602      	mov	r2, r0
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	b29a      	uxth	r2, r3
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80064e6:	461a      	mov	r2, r3
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f003 030f 	and.w	r3, r3, #15
 80064ee:	015b      	lsls	r3, r3, #5
 80064f0:	441a      	add	r2, r3
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 80064f8:	2300      	movs	r3, #0
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	371c      	adds	r7, #28
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd90      	pop	{r4, r7, pc}

08006502 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8006502:	b580      	push	{r7, lr}
 8006504:	b084      	sub	sp, #16
 8006506:	af00      	add	r7, sp, #0
 8006508:	6078      	str	r0, [r7, #4]
 800650a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800650c:	2100      	movs	r1, #0
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f7ff fe6c 	bl	80061ec <dir_sdi>
 8006514:	4603      	mov	r3, r0
 8006516:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006518:	7bfb      	ldrb	r3, [r7, #15]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d131      	bne.n	8006582 <dir_alloc+0x80>
		n = 0;
 800651e:	2300      	movs	r3, #0
 8006520:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800652e:	4619      	mov	r1, r3
 8006530:	4610      	mov	r0, r2
 8006532:	f7ff fb00 	bl	8005b36 <move_window>
 8006536:	4603      	mov	r3, r0
 8006538:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800653a:	7bfb      	ldrb	r3, [r7, #15]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d11f      	bne.n	8006580 <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006546:	781b      	ldrb	r3, [r3, #0]
 8006548:	2be5      	cmp	r3, #229	; 0xe5
 800654a:	d005      	beq.n	8006558 <dir_alloc+0x56>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006552:	781b      	ldrb	r3, [r3, #0]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d107      	bne.n	8006568 <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	3301      	adds	r3, #1
 800655c:	60bb      	str	r3, [r7, #8]
 800655e:	68ba      	ldr	r2, [r7, #8]
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	429a      	cmp	r2, r3
 8006564:	d102      	bne.n	800656c <dir_alloc+0x6a>
 8006566:	e00c      	b.n	8006582 <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006568:	2300      	movs	r3, #0
 800656a:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800656c:	2101      	movs	r1, #1
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f7ff fed0 	bl	8006314 <dir_next>
 8006574:	4603      	mov	r3, r0
 8006576:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8006578:	7bfb      	ldrb	r3, [r7, #15]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d0d1      	beq.n	8006522 <dir_alloc+0x20>
 800657e:	e000      	b.n	8006582 <dir_alloc+0x80>
			if (res != FR_OK) break;
 8006580:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006582:	7bfb      	ldrb	r3, [r7, #15]
 8006584:	2b04      	cmp	r3, #4
 8006586:	d101      	bne.n	800658c <dir_alloc+0x8a>
 8006588:	2307      	movs	r3, #7
 800658a:	73fb      	strb	r3, [r7, #15]
	return res;
 800658c:	7bfb      	ldrb	r3, [r7, #15]
}
 800658e:	4618      	mov	r0, r3
 8006590:	3710      	adds	r7, #16
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}

08006596 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8006596:	b480      	push	{r7}
 8006598:	b085      	sub	sp, #20
 800659a:	af00      	add	r7, sp, #0
 800659c:	6078      	str	r0, [r7, #4]
 800659e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	331a      	adds	r3, #26
 80065a4:	881b      	ldrh	r3, [r3, #0]
 80065a6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80065ae:	2b03      	cmp	r3, #3
 80065b0:	d106      	bne.n	80065c0 <ld_clust+0x2a>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	3314      	adds	r3, #20
 80065b6:	881b      	ldrh	r3, [r3, #0]
 80065b8:	041b      	lsls	r3, r3, #16
 80065ba:	68fa      	ldr	r2, [r7, #12]
 80065bc:	4313      	orrs	r3, r2
 80065be:	60fb      	str	r3, [r7, #12]

	return cl;
 80065c0:	68fb      	ldr	r3, [r7, #12]
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3714      	adds	r7, #20
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bc80      	pop	{r7}
 80065ca:	4770      	bx	lr

080065cc <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b083      	sub	sp, #12
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	331a      	adds	r3, #26
 80065da:	683a      	ldr	r2, [r7, #0]
 80065dc:	b292      	uxth	r2, r2
 80065de:	801a      	strh	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	0c1a      	lsrs	r2, r3, #16
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	3314      	adds	r3, #20
 80065e8:	b292      	uxth	r2, r2
 80065ea:	801a      	strh	r2, [r3, #0]
}
 80065ec:	bf00      	nop
 80065ee:	370c      	adds	r7, #12
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bc80      	pop	{r7}
 80065f4:	4770      	bx	lr
	...

080065f8 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b086      	sub	sp, #24
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800660a:	1e5a      	subs	r2, r3, #1
 800660c:	4613      	mov	r3, r2
 800660e:	005b      	lsls	r3, r3, #1
 8006610:	4413      	add	r3, r2
 8006612:	009b      	lsls	r3, r3, #2
 8006614:	4413      	add	r3, r2
 8006616:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 8006618:	2300      	movs	r3, #0
 800661a:	613b      	str	r3, [r7, #16]
 800661c:	2301      	movs	r3, #1
 800661e:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 8006620:	4a24      	ldr	r2, [pc, #144]	; (80066b4 <cmp_lfn+0xbc>)
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	4413      	add	r3, r2
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	461a      	mov	r2, r3
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	4413      	add	r3, r2
 800662e:	881b      	ldrh	r3, [r3, #0]
 8006630:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 8006632:	89fb      	ldrh	r3, [r7, #14]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d019      	beq.n	800666c <cmp_lfn+0x74>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8006638:	89bb      	ldrh	r3, [r7, #12]
 800663a:	4618      	mov	r0, r3
 800663c:	f002 f906 	bl	800884c <ff_wtoupper>
 8006640:	4603      	mov	r3, r0
 8006642:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	2bfe      	cmp	r3, #254	; 0xfe
 8006648:	d80e      	bhi.n	8006668 <cmp_lfn+0x70>
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	1c5a      	adds	r2, r3, #1
 800664e:	617a      	str	r2, [r7, #20]
 8006650:	005b      	lsls	r3, r3, #1
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	4413      	add	r3, r2
 8006656:	881b      	ldrh	r3, [r3, #0]
 8006658:	4618      	mov	r0, r3
 800665a:	f002 f8f7 	bl	800884c <ff_wtoupper>
 800665e:	4603      	mov	r3, r0
 8006660:	461a      	mov	r2, r3
 8006662:	89fb      	ldrh	r3, [r7, #14]
 8006664:	4293      	cmp	r3, r2
 8006666:	d008      	beq.n	800667a <cmp_lfn+0x82>
				return 0;				/* Not matched */
 8006668:	2300      	movs	r3, #0
 800666a:	e01f      	b.n	80066ac <cmp_lfn+0xb4>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 800666c:	89bb      	ldrh	r3, [r7, #12]
 800666e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006672:	4293      	cmp	r3, r2
 8006674:	d001      	beq.n	800667a <cmp_lfn+0x82>
 8006676:	2300      	movs	r3, #0
 8006678:	e018      	b.n	80066ac <cmp_lfn+0xb4>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	3301      	adds	r3, #1
 800667e:	613b      	str	r3, [r7, #16]
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	2b0c      	cmp	r3, #12
 8006684:	d9cc      	bls.n	8006620 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	781b      	ldrb	r3, [r3, #0]
 800668a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800668e:	2b00      	cmp	r3, #0
 8006690:	d00b      	beq.n	80066aa <cmp_lfn+0xb2>
 8006692:	89fb      	ldrh	r3, [r7, #14]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d008      	beq.n	80066aa <cmp_lfn+0xb2>
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	005b      	lsls	r3, r3, #1
 800669c:	687a      	ldr	r2, [r7, #4]
 800669e:	4413      	add	r3, r2
 80066a0:	881b      	ldrh	r3, [r3, #0]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d001      	beq.n	80066aa <cmp_lfn+0xb2>
		return 0;
 80066a6:	2300      	movs	r3, #0
 80066a8:	e000      	b.n	80066ac <cmp_lfn+0xb4>

	return 1;						/* The part of LFN matched */
 80066aa:	2301      	movs	r3, #1
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3718      	adds	r7, #24
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}
 80066b4:	0800b208 	.word	0x0800b208

080066b8 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b089      	sub	sp, #36	; 0x24
 80066bc:	af00      	add	r7, sp, #0
 80066be:	60f8      	str	r0, [r7, #12]
 80066c0:	60b9      	str	r1, [r7, #8]
 80066c2:	4611      	mov	r1, r2
 80066c4:	461a      	mov	r2, r3
 80066c6:	460b      	mov	r3, r1
 80066c8:	71fb      	strb	r3, [r7, #7]
 80066ca:	4613      	mov	r3, r2
 80066cc:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	330d      	adds	r3, #13
 80066d2:	79ba      	ldrb	r2, [r7, #6]
 80066d4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	330b      	adds	r3, #11
 80066da:	220f      	movs	r2, #15
 80066dc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	330c      	adds	r3, #12
 80066e2:	2200      	movs	r2, #0
 80066e4:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	331a      	adds	r3, #26
 80066ea:	2200      	movs	r2, #0
 80066ec:	801a      	strh	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 80066ee:	79fb      	ldrb	r3, [r7, #7]
 80066f0:	1e5a      	subs	r2, r3, #1
 80066f2:	4613      	mov	r3, r2
 80066f4:	005b      	lsls	r3, r3, #1
 80066f6:	4413      	add	r3, r2
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	4413      	add	r3, r2
 80066fc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80066fe:	2300      	movs	r3, #0
 8006700:	82fb      	strh	r3, [r7, #22]
 8006702:	2300      	movs	r3, #0
 8006704:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8006706:	8afb      	ldrh	r3, [r7, #22]
 8006708:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800670c:	4293      	cmp	r3, r2
 800670e:	d007      	beq.n	8006720 <fit_lfn+0x68>
 8006710:	69fb      	ldr	r3, [r7, #28]
 8006712:	1c5a      	adds	r2, r3, #1
 8006714:	61fa      	str	r2, [r7, #28]
 8006716:	005b      	lsls	r3, r3, #1
 8006718:	68fa      	ldr	r2, [r7, #12]
 800671a:	4413      	add	r3, r2
 800671c:	881b      	ldrh	r3, [r3, #0]
 800671e:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8006720:	4a16      	ldr	r2, [pc, #88]	; (800677c <fit_lfn+0xc4>)
 8006722:	69bb      	ldr	r3, [r7, #24]
 8006724:	4413      	add	r3, r2
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	461a      	mov	r2, r3
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	4413      	add	r3, r2
 800672e:	8afa      	ldrh	r2, [r7, #22]
 8006730:	801a      	strh	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8006732:	8afb      	ldrh	r3, [r7, #22]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d102      	bne.n	800673e <fit_lfn+0x86>
 8006738:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800673c:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800673e:	69bb      	ldr	r3, [r7, #24]
 8006740:	3301      	adds	r3, #1
 8006742:	61bb      	str	r3, [r7, #24]
 8006744:	69bb      	ldr	r3, [r7, #24]
 8006746:	2b0c      	cmp	r3, #12
 8006748:	d9dd      	bls.n	8006706 <fit_lfn+0x4e>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 800674a:	8afb      	ldrh	r3, [r7, #22]
 800674c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006750:	4293      	cmp	r3, r2
 8006752:	d006      	beq.n	8006762 <fit_lfn+0xaa>
 8006754:	69fb      	ldr	r3, [r7, #28]
 8006756:	005b      	lsls	r3, r3, #1
 8006758:	68fa      	ldr	r2, [r7, #12]
 800675a:	4413      	add	r3, r2
 800675c:	881b      	ldrh	r3, [r3, #0]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d103      	bne.n	800676a <fit_lfn+0xb2>
 8006762:	79fb      	ldrb	r3, [r7, #7]
 8006764:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006768:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	79fa      	ldrb	r2, [r7, #7]
 800676e:	701a      	strb	r2, [r3, #0]
}
 8006770:	bf00      	nop
 8006772:	3724      	adds	r7, #36	; 0x24
 8006774:	46bd      	mov	sp, r7
 8006776:	bc80      	pop	{r7}
 8006778:	4770      	bx	lr
 800677a:	bf00      	nop
 800677c:	0800b208 	.word	0x0800b208

08006780 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b08c      	sub	sp, #48	; 0x30
 8006784:	af00      	add	r7, sp, #0
 8006786:	60f8      	str	r0, [r7, #12]
 8006788:	60b9      	str	r1, [r7, #8]
 800678a:	607a      	str	r2, [r7, #4]
 800678c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800678e:	220b      	movs	r2, #11
 8006790:	68b9      	ldr	r1, [r7, #8]
 8006792:	68f8      	ldr	r0, [r7, #12]
 8006794:	f7fe ff1e 	bl	80055d4 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	2b05      	cmp	r3, #5
 800679c:	d92b      	bls.n	80067f6 <gen_numname+0x76>
		sr = seq;
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80067a2:	e022      	b.n	80067ea <gen_numname+0x6a>
			wc = *lfn++;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	1c9a      	adds	r2, r3, #2
 80067a8:	607a      	str	r2, [r7, #4]
 80067aa:	881b      	ldrh	r3, [r3, #0]
 80067ac:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80067ae:	2300      	movs	r3, #0
 80067b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80067b2:	e017      	b.n	80067e4 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80067b4:	69fb      	ldr	r3, [r7, #28]
 80067b6:	005a      	lsls	r2, r3, #1
 80067b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80067ba:	f003 0301 	and.w	r3, r3, #1
 80067be:	4413      	add	r3, r2
 80067c0:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80067c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80067c4:	085b      	lsrs	r3, r3, #1
 80067c6:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80067c8:	69fb      	ldr	r3, [r7, #28]
 80067ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d005      	beq.n	80067de <gen_numname+0x5e>
 80067d2:	69fb      	ldr	r3, [r7, #28]
 80067d4:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80067d8:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80067dc:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80067de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067e0:	3301      	adds	r3, #1
 80067e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80067e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067e6:	2b0f      	cmp	r3, #15
 80067e8:	d9e4      	bls.n	80067b4 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	881b      	ldrh	r3, [r3, #0]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d1d8      	bne.n	80067a4 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80067f2:	69fb      	ldr	r3, [r7, #28]
 80067f4:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80067f6:	2307      	movs	r3, #7
 80067f8:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	f003 030f 	and.w	r3, r3, #15
 8006802:	b2db      	uxtb	r3, r3
 8006804:	3330      	adds	r3, #48	; 0x30
 8006806:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800680a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800680e:	2b39      	cmp	r3, #57	; 0x39
 8006810:	d904      	bls.n	800681c <gen_numname+0x9c>
 8006812:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006816:	3307      	adds	r3, #7
 8006818:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800681c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800681e:	1e5a      	subs	r2, r3, #1
 8006820:	62ba      	str	r2, [r7, #40]	; 0x28
 8006822:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006826:	4413      	add	r3, r2
 8006828:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800682c:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	091b      	lsrs	r3, r3, #4
 8006834:	603b      	str	r3, [r7, #0]
	} while (seq);
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d1de      	bne.n	80067fa <gen_numname+0x7a>
	ns[i] = '~';
 800683c:	f107 0214 	add.w	r2, r7, #20
 8006840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006842:	4413      	add	r3, r2
 8006844:	227e      	movs	r2, #126	; 0x7e
 8006846:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8006848:	2300      	movs	r3, #0
 800684a:	627b      	str	r3, [r7, #36]	; 0x24
 800684c:	e016      	b.n	800687c <gen_numname+0xfc>
		if (IsDBCS1(dst[j])) {
 800684e:	68fa      	ldr	r2, [r7, #12]
 8006850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006852:	4413      	add	r3, r2
 8006854:	781b      	ldrb	r3, [r3, #0]
 8006856:	2b80      	cmp	r3, #128	; 0x80
 8006858:	d90d      	bls.n	8006876 <gen_numname+0xf6>
 800685a:	68fa      	ldr	r2, [r7, #12]
 800685c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800685e:	4413      	add	r3, r2
 8006860:	781b      	ldrb	r3, [r3, #0]
 8006862:	2bff      	cmp	r3, #255	; 0xff
 8006864:	d007      	beq.n	8006876 <gen_numname+0xf6>
			if (j == i - 1) break;
 8006866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006868:	3b01      	subs	r3, #1
 800686a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800686c:	429a      	cmp	r2, r3
 800686e:	d010      	beq.n	8006892 <gen_numname+0x112>
			j++;
 8006870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006872:	3301      	adds	r3, #1
 8006874:	627b      	str	r3, [r7, #36]	; 0x24
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8006876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006878:	3301      	adds	r3, #1
 800687a:	627b      	str	r3, [r7, #36]	; 0x24
 800687c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800687e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006880:	429a      	cmp	r2, r3
 8006882:	d207      	bcs.n	8006894 <gen_numname+0x114>
 8006884:	68fa      	ldr	r2, [r7, #12]
 8006886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006888:	4413      	add	r3, r2
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	2b20      	cmp	r3, #32
 800688e:	d1de      	bne.n	800684e <gen_numname+0xce>
 8006890:	e000      	b.n	8006894 <gen_numname+0x114>
			if (j == i - 1) break;
 8006892:	bf00      	nop
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006896:	2b07      	cmp	r3, #7
 8006898:	d808      	bhi.n	80068ac <gen_numname+0x12c>
 800689a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800689c:	1c5a      	adds	r2, r3, #1
 800689e:	62ba      	str	r2, [r7, #40]	; 0x28
 80068a0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80068a4:	4413      	add	r3, r2
 80068a6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80068aa:	e000      	b.n	80068ae <gen_numname+0x12e>
 80068ac:	2120      	movs	r1, #32
 80068ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b0:	1c5a      	adds	r2, r3, #1
 80068b2:	627a      	str	r2, [r7, #36]	; 0x24
 80068b4:	68fa      	ldr	r2, [r7, #12]
 80068b6:	4413      	add	r3, r2
 80068b8:	460a      	mov	r2, r1
 80068ba:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80068bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068be:	2b07      	cmp	r3, #7
 80068c0:	d9e8      	bls.n	8006894 <gen_numname+0x114>
}
 80068c2:	bf00      	nop
 80068c4:	3730      	adds	r7, #48	; 0x30
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}

080068ca <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80068ca:	b480      	push	{r7}
 80068cc:	b085      	sub	sp, #20
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80068d2:	2300      	movs	r3, #0
 80068d4:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80068d6:	230b      	movs	r3, #11
 80068d8:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 80068da:	7bfb      	ldrb	r3, [r7, #15]
 80068dc:	b2da      	uxtb	r2, r3
 80068de:	0852      	lsrs	r2, r2, #1
 80068e0:	01db      	lsls	r3, r3, #7
 80068e2:	4313      	orrs	r3, r2
 80068e4:	b2da      	uxtb	r2, r3
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	1c59      	adds	r1, r3, #1
 80068ea:	6079      	str	r1, [r7, #4]
 80068ec:	781b      	ldrb	r3, [r3, #0]
 80068ee:	4413      	add	r3, r2
 80068f0:	73fb      	strb	r3, [r7, #15]
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	3b01      	subs	r3, #1
 80068f6:	60bb      	str	r3, [r7, #8]
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d1ed      	bne.n	80068da <sum_sfn+0x10>
	return sum;
 80068fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006900:	4618      	mov	r0, r3
 8006902:	3714      	adds	r7, #20
 8006904:	46bd      	mov	sp, r7
 8006906:	bc80      	pop	{r7}
 8006908:	4770      	bx	lr

0800690a <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800690a:	b580      	push	{r7, lr}
 800690c:	b086      	sub	sp, #24
 800690e:	af00      	add	r7, sp, #0
 8006910:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006912:	2100      	movs	r1, #0
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f7ff fc69 	bl	80061ec <dir_sdi>
 800691a:	4603      	mov	r3, r0
 800691c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800691e:	7dfb      	ldrb	r3, [r7, #23]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d001      	beq.n	8006928 <dir_find+0x1e>
 8006924:	7dfb      	ldrb	r3, [r7, #23]
 8006926:	e0ac      	b.n	8006a82 <dir_find+0x178>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8006928:	23ff      	movs	r3, #255	; 0xff
 800692a:	753b      	strb	r3, [r7, #20]
 800692c:	7d3b      	ldrb	r3, [r7, #20]
 800692e:	757b      	strb	r3, [r7, #21]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006936:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006946:	4619      	mov	r1, r3
 8006948:	4610      	mov	r0, r2
 800694a:	f7ff f8f4 	bl	8005b36 <move_window>
 800694e:	4603      	mov	r3, r0
 8006950:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006952:	7dfb      	ldrb	r3, [r7, #23]
 8006954:	2b00      	cmp	r3, #0
 8006956:	f040 808e 	bne.w	8006a76 <dir_find+0x16c>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006960:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006968:	7dbb      	ldrb	r3, [r7, #22]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d102      	bne.n	8006974 <dir_find+0x6a>
 800696e:	2304      	movs	r3, #4
 8006970:	75fb      	strb	r3, [r7, #23]
 8006972:	e085      	b.n	8006a80 <dir_find+0x176>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	330b      	adds	r3, #11
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800697e:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8006980:	7dbb      	ldrb	r3, [r7, #22]
 8006982:	2be5      	cmp	r3, #229	; 0xe5
 8006984:	d007      	beq.n	8006996 <dir_find+0x8c>
 8006986:	7bfb      	ldrb	r3, [r7, #15]
 8006988:	f003 0308 	and.w	r3, r3, #8
 800698c:	2b00      	cmp	r3, #0
 800698e:	d00a      	beq.n	80069a6 <dir_find+0x9c>
 8006990:	7bfb      	ldrb	r3, [r7, #15]
 8006992:	2b0f      	cmp	r3, #15
 8006994:	d007      	beq.n	80069a6 <dir_find+0x9c>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8006996:	23ff      	movs	r3, #255	; 0xff
 8006998:	757b      	strb	r3, [r7, #21]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80069a0:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224
 80069a4:	e05c      	b.n	8006a60 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80069a6:	7bfb      	ldrb	r3, [r7, #15]
 80069a8:	2b0f      	cmp	r3, #15
 80069aa:	d133      	bne.n	8006a14 <dir_find+0x10a>
				if (dp->lfn) {
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d054      	beq.n	8006a60 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80069b6:	7dbb      	ldrb	r3, [r7, #22]
 80069b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d00e      	beq.n	80069de <dir_find+0xd4>
						sum = dir[LDIR_Chksum];
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	7b5b      	ldrb	r3, [r3, #13]
 80069c4:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 80069c6:	7dbb      	ldrb	r3, [r7, #22]
 80069c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069cc:	75bb      	strb	r3, [r7, #22]
 80069ce:	7dbb      	ldrb	r3, [r7, #22]
 80069d0:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 80069de:	7dba      	ldrb	r2, [r7, #22]
 80069e0:	7d7b      	ldrb	r3, [r7, #21]
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d113      	bne.n	8006a0e <dir_find+0x104>
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	330d      	adds	r3, #13
 80069ea:	781b      	ldrb	r3, [r3, #0]
 80069ec:	7d3a      	ldrb	r2, [r7, #20]
 80069ee:	429a      	cmp	r2, r3
 80069f0:	d10d      	bne.n	8006a0e <dir_find+0x104>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80069f8:	6939      	ldr	r1, [r7, #16]
 80069fa:	4618      	mov	r0, r3
 80069fc:	f7ff fdfc 	bl	80065f8 <cmp_lfn>
 8006a00:	4603      	mov	r3, r0
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d003      	beq.n	8006a0e <dir_find+0x104>
 8006a06:	7d7b      	ldrb	r3, [r7, #21]
 8006a08:	3b01      	subs	r3, #1
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	e000      	b.n	8006a10 <dir_find+0x106>
 8006a0e:	23ff      	movs	r3, #255	; 0xff
 8006a10:	757b      	strb	r3, [r7, #21]
 8006a12:	e025      	b.n	8006a60 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8006a14:	7d7b      	ldrb	r3, [r7, #21]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d107      	bne.n	8006a2a <dir_find+0x120>
 8006a1a:	6938      	ldr	r0, [r7, #16]
 8006a1c:	f7ff ff55 	bl	80068ca <sum_sfn>
 8006a20:	4603      	mov	r3, r0
 8006a22:	461a      	mov	r2, r3
 8006a24:	7d3b      	ldrb	r3, [r7, #20]
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d027      	beq.n	8006a7a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006a30:	330b      	adds	r3, #11
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	f003 0301 	and.w	r3, r3, #1
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d10a      	bne.n	8006a52 <dir_find+0x148>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006a42:	220b      	movs	r2, #11
 8006a44:	4619      	mov	r1, r3
 8006a46:	6938      	ldr	r0, [r7, #16]
 8006a48:	f7fe fe0b 	bl	8005662 <mem_cmp>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d015      	beq.n	8006a7e <dir_find+0x174>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8006a52:	23ff      	movs	r3, #255	; 0xff
 8006a54:	757b      	strb	r3, [r7, #21]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006a5c:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8006a60:	2100      	movs	r1, #0
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f7ff fc56 	bl	8006314 <dir_next>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006a6c:	7dfb      	ldrb	r3, [r7, #23]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	f43f af63 	beq.w	800693a <dir_find+0x30>
 8006a74:	e004      	b.n	8006a80 <dir_find+0x176>
		if (res != FR_OK) break;
 8006a76:	bf00      	nop
 8006a78:	e002      	b.n	8006a80 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8006a7a:	bf00      	nop
 8006a7c:	e000      	b.n	8006a80 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8006a7e:	bf00      	nop

	return res;
 8006a80:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3718      	adds	r7, #24
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}
	...

08006a8c <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b08c      	sub	sp, #48	; 0x30
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006a9a:	623b      	str	r3, [r7, #32]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8006aa2:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 8006aa4:	f107 030c 	add.w	r3, r7, #12
 8006aa8:	220c      	movs	r2, #12
 8006aaa:	6a39      	ldr	r1, [r7, #32]
 8006aac:	4618      	mov	r0, r3
 8006aae:	f7fe fd91 	bl	80055d4 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8006ab2:	7dfb      	ldrb	r3, [r7, #23]
 8006ab4:	f003 0301 	and.w	r3, r3, #1
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d037      	beq.n	8006b2c <dir_register+0xa0>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 8006abc:	6a3b      	ldr	r3, [r7, #32]
 8006abe:	330b      	adds	r3, #11
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	701a      	strb	r2, [r3, #0]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
		for (n = 1; n < 100; n++) {
 8006acc:	2301      	movs	r3, #1
 8006ace:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ad0:	e013      	b.n	8006afa <dir_register+0x6e>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 8006ad2:	f107 010c 	add.w	r1, r7, #12
 8006ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ad8:	69fa      	ldr	r2, [r7, #28]
 8006ada:	6a38      	ldr	r0, [r7, #32]
 8006adc:	f7ff fe50 	bl	8006780 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f7ff ff12 	bl	800690a <dir_find>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8006aec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d106      	bne.n	8006b02 <dir_register+0x76>
		for (n = 1; n < 100; n++) {
 8006af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006af6:	3301      	adds	r3, #1
 8006af8:	62bb      	str	r3, [r7, #40]	; 0x28
 8006afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006afc:	2b63      	cmp	r3, #99	; 0x63
 8006afe:	d9e8      	bls.n	8006ad2 <dir_register+0x46>
 8006b00:	e000      	b.n	8006b04 <dir_register+0x78>
			if (res != FR_OK) break;
 8006b02:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8006b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b06:	2b64      	cmp	r3, #100	; 0x64
 8006b08:	d101      	bne.n	8006b0e <dir_register+0x82>
 8006b0a:	2307      	movs	r3, #7
 8006b0c:	e0c5      	b.n	8006c9a <dir_register+0x20e>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8006b0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006b12:	2b04      	cmp	r3, #4
 8006b14:	d002      	beq.n	8006b1c <dir_register+0x90>
 8006b16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006b1a:	e0be      	b.n	8006c9a <dir_register+0x20e>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 8006b1c:	6a3b      	ldr	r3, [r7, #32]
 8006b1e:	330b      	adds	r3, #11
 8006b20:	7dfa      	ldrb	r2, [r7, #23]
 8006b22:	701a      	strb	r2, [r3, #0]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	69fa      	ldr	r2, [r7, #28]
 8006b28:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 8006b2c:	7dfb      	ldrb	r3, [r7, #23]
 8006b2e:	f003 0302 	and.w	r3, r3, #2
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d014      	beq.n	8006b60 <dir_register+0xd4>
		for (n = 0; lfn[n]; n++) ;
 8006b36:	2300      	movs	r3, #0
 8006b38:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b3a:	e002      	b.n	8006b42 <dir_register+0xb6>
 8006b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b3e:	3301      	adds	r3, #1
 8006b40:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b44:	005b      	lsls	r3, r3, #1
 8006b46:	69fa      	ldr	r2, [r7, #28]
 8006b48:	4413      	add	r3, r2
 8006b4a:	881b      	ldrh	r3, [r3, #0]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d1f5      	bne.n	8006b3c <dir_register+0xb0>
		nent = (n + 25) / 13;
 8006b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b52:	3319      	adds	r3, #25
 8006b54:	4a53      	ldr	r2, [pc, #332]	; (8006ca4 <dir_register+0x218>)
 8006b56:	fba2 2303 	umull	r2, r3, r2, r3
 8006b5a:	089b      	lsrs	r3, r3, #2
 8006b5c:	627b      	str	r3, [r7, #36]	; 0x24
 8006b5e:	e001      	b.n	8006b64 <dir_register+0xd8>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 8006b60:	2301      	movs	r3, #1
 8006b62:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8006b64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f7ff fccb 	bl	8006502 <dir_alloc>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8006b72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d153      	bne.n	8006c22 <dir_register+0x196>
 8006b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7c:	3b01      	subs	r3, #1
 8006b7e:	627b      	str	r3, [r7, #36]	; 0x24
 8006b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d04d      	beq.n	8006c22 <dir_register+0x196>
		res = dir_sdi(dp, dp->index - nent);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b90:	1ad3      	subs	r3, r2, r3
 8006b92:	4619      	mov	r1, r3
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f7ff fb29 	bl	80061ec <dir_sdi>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006ba0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d13c      	bne.n	8006c22 <dir_register+0x196>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f7ff fe8b 	bl	80068ca <sum_sfn>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006bc4:	4619      	mov	r1, r3
 8006bc6:	4610      	mov	r0, r2
 8006bc8:	f7fe ffb5 	bl	8005b36 <move_window>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8006bd2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d122      	bne.n	8006c20 <dir_register+0x194>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f8d3 1214 	ldr.w	r1, [r3, #532]	; 0x214
 8006be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be8:	b2da      	uxtb	r2, r3
 8006bea:	7efb      	ldrb	r3, [r7, #27]
 8006bec:	f7ff fd64 	bl	80066b8 <fit_lfn>
				dp->fs->wflag = 1;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = dir_next(dp, 0);	/* Next entry */
 8006bfc:	2100      	movs	r1, #0
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f7ff fb88 	bl	8006314 <dir_next>
 8006c04:	4603      	mov	r3, r0
 8006c06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8006c0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d107      	bne.n	8006c22 <dir_register+0x196>
 8006c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c14:	3b01      	subs	r3, #1
 8006c16:	627b      	str	r3, [r7, #36]	; 0x24
 8006c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d1cc      	bne.n	8006bb8 <dir_register+0x12c>
 8006c1e:	e000      	b.n	8006c22 <dir_register+0x196>
				if (res != FR_OK) break;
 8006c20:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8006c22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d135      	bne.n	8006c96 <dir_register+0x20a>
		res = move_window(dp->fs, dp->sect);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006c36:	4619      	mov	r1, r3
 8006c38:	4610      	mov	r0, r2
 8006c3a:	f7fe ff7c 	bl	8005b36 <move_window>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006c44:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d124      	bne.n	8006c96 <dir_register+0x20a>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006c52:	2220      	movs	r2, #32
 8006c54:	2100      	movs	r1, #0
 8006c56:	4618      	mov	r0, r3
 8006c58:	f7fe fcea 	bl	8005630 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006c68:	220b      	movs	r2, #11
 8006c6a:	4619      	mov	r1, r3
 8006c6c:	f7fe fcb2 	bl	80055d4 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006c76:	330b      	adds	r3, #11
 8006c78:	781a      	ldrb	r2, [r3, #0]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006c80:	330c      	adds	r3, #12
 8006c82:	f002 0218 	and.w	r2, r2, #24
 8006c86:	b2d2      	uxtb	r2, r2
 8006c88:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006c90:	2201      	movs	r2, #1
 8006c92:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 8006c96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3730      	adds	r7, #48	; 0x30
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}
 8006ca2:	bf00      	nop
 8006ca4:	4ec4ec4f 	.word	0x4ec4ec4f

08006ca8 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b08a      	sub	sp, #40	; 0x28
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
 8006cb0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	613b      	str	r3, [r7, #16]
 8006cb8:	e002      	b.n	8006cc0 <create_name+0x18>
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	3301      	adds	r3, #1
 8006cbe:	613b      	str	r3, [r7, #16]
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	781b      	ldrb	r3, [r3, #0]
 8006cc4:	2b2f      	cmp	r3, #47	; 0x2f
 8006cc6:	d0f8      	beq.n	8006cba <create_name+0x12>
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	2b5c      	cmp	r3, #92	; 0x5c
 8006cce:	d0f4      	beq.n	8006cba <create_name+0x12>
	lfn = dp->lfn;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8006cd6:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	617b      	str	r3, [r7, #20]
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8006ce0:	69bb      	ldr	r3, [r7, #24]
 8006ce2:	1c5a      	adds	r2, r3, #1
 8006ce4:	61ba      	str	r2, [r7, #24]
 8006ce6:	693a      	ldr	r2, [r7, #16]
 8006ce8:	4413      	add	r3, r2
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8006cee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006cf0:	2b1f      	cmp	r3, #31
 8006cf2:	d961      	bls.n	8006db8 <create_name+0x110>
 8006cf4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006cf6:	2b2f      	cmp	r3, #47	; 0x2f
 8006cf8:	d05e      	beq.n	8006db8 <create_name+0x110>
 8006cfa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006cfc:	2b5c      	cmp	r3, #92	; 0x5c
 8006cfe:	d05b      	beq.n	8006db8 <create_name+0x110>
		if (di >= _MAX_LFN)				/* Reject too long name */
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	2bfe      	cmp	r3, #254	; 0xfe
 8006d04:	d901      	bls.n	8006d0a <create_name+0x62>
			return FR_INVALID_NAME;
 8006d06:	2306      	movs	r3, #6
 8006d08:	e1cc      	b.n	80070a4 <create_name+0x3fc>
#if !_LFN_UNICODE
		w &= 0xFF;
 8006d0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
 8006d10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	2b80      	cmp	r3, #128	; 0x80
 8006d16:	d92d      	bls.n	8006d74 <create_name+0xcc>
 8006d18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	2bff      	cmp	r3, #255	; 0xff
 8006d1e:	d029      	beq.n	8006d74 <create_name+0xcc>
#if _DF1S
			b = (BYTE)p[si++];			/* Get 2nd byte */
 8006d20:	69bb      	ldr	r3, [r7, #24]
 8006d22:	1c5a      	adds	r2, r3, #1
 8006d24:	61ba      	str	r2, [r7, #24]
 8006d26:	693a      	ldr	r2, [r7, #16]
 8006d28:	4413      	add	r3, r2
 8006d2a:	781b      	ldrb	r3, [r3, #0]
 8006d2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			w = (w << 8) + b;			/* Create a DBC */
 8006d30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d32:	021b      	lsls	r3, r3, #8
 8006d34:	b29a      	uxth	r2, r3
 8006d36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	4413      	add	r3, r2
 8006d3e:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (!IsDBCS2(b))
 8006d40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d44:	2b40      	cmp	r3, #64	; 0x40
 8006d46:	d903      	bls.n	8006d50 <create_name+0xa8>
 8006d48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d4c:	2b5a      	cmp	r3, #90	; 0x5a
 8006d4e:	d911      	bls.n	8006d74 <create_name+0xcc>
 8006d50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d54:	2b60      	cmp	r3, #96	; 0x60
 8006d56:	d903      	bls.n	8006d60 <create_name+0xb8>
 8006d58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d5c:	2b7a      	cmp	r3, #122	; 0x7a
 8006d5e:	d909      	bls.n	8006d74 <create_name+0xcc>
 8006d60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d64:	2b80      	cmp	r3, #128	; 0x80
 8006d66:	d903      	bls.n	8006d70 <create_name+0xc8>
 8006d68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d6c:	2bff      	cmp	r3, #255	; 0xff
 8006d6e:	d101      	bne.n	8006d74 <create_name+0xcc>
				return FR_INVALID_NAME;	/* Reject invalid sequence */
 8006d70:	2306      	movs	r3, #6
 8006d72:	e197      	b.n	80070a4 <create_name+0x3fc>
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8006d74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d76:	2101      	movs	r1, #1
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f001 fd09 	bl	8008790 <ff_convert>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8006d82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d101      	bne.n	8006d8c <create_name+0xe4>
 8006d88:	2306      	movs	r3, #6
 8006d8a:	e18b      	b.n	80070a4 <create_name+0x3fc>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 8006d8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d8e:	2b7f      	cmp	r3, #127	; 0x7f
 8006d90:	d809      	bhi.n	8006da6 <create_name+0xfe>
 8006d92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d94:	4619      	mov	r1, r3
 8006d96:	489b      	ldr	r0, [pc, #620]	; (8007004 <create_name+0x35c>)
 8006d98:	f7fe fc89 	bl	80056ae <chk_chr>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d001      	beq.n	8006da6 <create_name+0xfe>
			return FR_INVALID_NAME;
 8006da2:	2306      	movs	r3, #6
 8006da4:	e17e      	b.n	80070a4 <create_name+0x3fc>
		lfn[di++] = w;					/* Store the Unicode character */
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	1c5a      	adds	r2, r3, #1
 8006daa:	617a      	str	r2, [r7, #20]
 8006dac:	005b      	lsls	r3, r3, #1
 8006dae:	68fa      	ldr	r2, [r7, #12]
 8006db0:	4413      	add	r3, r2
 8006db2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006db4:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8006db6:	e793      	b.n	8006ce0 <create_name+0x38>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8006db8:	693a      	ldr	r2, [r7, #16]
 8006dba:	69bb      	ldr	r3, [r7, #24]
 8006dbc:	441a      	add	r2, r3
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8006dc2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006dc4:	2b1f      	cmp	r3, #31
 8006dc6:	d801      	bhi.n	8006dcc <create_name+0x124>
 8006dc8:	2304      	movs	r3, #4
 8006dca:	e000      	b.n	8006dce <create_name+0x126>
 8006dcc:	2300      	movs	r3, #0
 8006dce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 8006dd2:	e011      	b.n	8006df8 <create_name+0x150>
		w = lfn[di - 1];
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006dda:	3b01      	subs	r3, #1
 8006ddc:	005b      	lsls	r3, r3, #1
 8006dde:	68fa      	ldr	r2, [r7, #12]
 8006de0:	4413      	add	r3, r2
 8006de2:	881b      	ldrh	r3, [r3, #0]
 8006de4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8006de6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006de8:	2b20      	cmp	r3, #32
 8006dea:	d002      	beq.n	8006df2 <create_name+0x14a>
 8006dec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006dee:	2b2e      	cmp	r3, #46	; 0x2e
 8006df0:	d106      	bne.n	8006e00 <create_name+0x158>
		di--;
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	3b01      	subs	r3, #1
 8006df6:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d1ea      	bne.n	8006dd4 <create_name+0x12c>
 8006dfe:	e000      	b.n	8006e02 <create_name+0x15a>
		if (w != ' ' && w != '.') break;
 8006e00:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d101      	bne.n	8006e0c <create_name+0x164>
 8006e08:	2306      	movs	r3, #6
 8006e0a:	e14b      	b.n	80070a4 <create_name+0x3fc>

	lfn[di] = 0;						/* LFN is created */
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	005b      	lsls	r3, r3, #1
 8006e10:	68fa      	ldr	r2, [r7, #12]
 8006e12:	4413      	add	r3, r2
 8006e14:	2200      	movs	r2, #0
 8006e16:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006e1e:	220b      	movs	r2, #11
 8006e20:	2120      	movs	r1, #32
 8006e22:	4618      	mov	r0, r3
 8006e24:	f7fe fc04 	bl	8005630 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8006e28:	2300      	movs	r3, #0
 8006e2a:	61bb      	str	r3, [r7, #24]
 8006e2c:	e002      	b.n	8006e34 <create_name+0x18c>
 8006e2e:	69bb      	ldr	r3, [r7, #24]
 8006e30:	3301      	adds	r3, #1
 8006e32:	61bb      	str	r3, [r7, #24]
 8006e34:	69bb      	ldr	r3, [r7, #24]
 8006e36:	005b      	lsls	r3, r3, #1
 8006e38:	68fa      	ldr	r2, [r7, #12]
 8006e3a:	4413      	add	r3, r2
 8006e3c:	881b      	ldrh	r3, [r3, #0]
 8006e3e:	2b20      	cmp	r3, #32
 8006e40:	d0f5      	beq.n	8006e2e <create_name+0x186>
 8006e42:	69bb      	ldr	r3, [r7, #24]
 8006e44:	005b      	lsls	r3, r3, #1
 8006e46:	68fa      	ldr	r2, [r7, #12]
 8006e48:	4413      	add	r3, r2
 8006e4a:	881b      	ldrh	r3, [r3, #0]
 8006e4c:	2b2e      	cmp	r3, #46	; 0x2e
 8006e4e:	d0ee      	beq.n	8006e2e <create_name+0x186>
	if (si) cf |= NS_LOSS | NS_LFN;
 8006e50:	69bb      	ldr	r3, [r7, #24]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d009      	beq.n	8006e6a <create_name+0x1c2>
 8006e56:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006e5a:	f043 0303 	orr.w	r3, r3, #3
 8006e5e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8006e62:	e002      	b.n	8006e6a <create_name+0x1c2>
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	3b01      	subs	r3, #1
 8006e68:	617b      	str	r3, [r7, #20]
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d009      	beq.n	8006e84 <create_name+0x1dc>
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006e76:	3b01      	subs	r3, #1
 8006e78:	005b      	lsls	r3, r3, #1
 8006e7a:	68fa      	ldr	r2, [r7, #12]
 8006e7c:	4413      	add	r3, r2
 8006e7e:	881b      	ldrh	r3, [r3, #0]
 8006e80:	2b2e      	cmp	r3, #46	; 0x2e
 8006e82:	d1ef      	bne.n	8006e64 <create_name+0x1bc>

	b = i = 0; ni = 8;
 8006e84:	2300      	movs	r3, #0
 8006e86:	623b      	str	r3, [r7, #32]
 8006e88:	2300      	movs	r3, #0
 8006e8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006e8e:	2308      	movs	r3, #8
 8006e90:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8006e92:	69bb      	ldr	r3, [r7, #24]
 8006e94:	1c5a      	adds	r2, r3, #1
 8006e96:	61ba      	str	r2, [r7, #24]
 8006e98:	005b      	lsls	r3, r3, #1
 8006e9a:	68fa      	ldr	r2, [r7, #12]
 8006e9c:	4413      	add	r3, r2
 8006e9e:	881b      	ldrh	r3, [r3, #0]
 8006ea0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8006ea2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	f000 80aa 	beq.w	8006ffe <create_name+0x356>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8006eaa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006eac:	2b20      	cmp	r3, #32
 8006eae:	d006      	beq.n	8006ebe <create_name+0x216>
 8006eb0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006eb2:	2b2e      	cmp	r3, #46	; 0x2e
 8006eb4:	d10a      	bne.n	8006ecc <create_name+0x224>
 8006eb6:	69ba      	ldr	r2, [r7, #24]
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	d006      	beq.n	8006ecc <create_name+0x224>
			cf |= NS_LOSS | NS_LFN; continue;
 8006ebe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006ec2:	f043 0303 	orr.w	r3, r3, #3
 8006ec6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006eca:	e097      	b.n	8006ffc <create_name+0x354>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8006ecc:	6a3a      	ldr	r2, [r7, #32]
 8006ece:	69fb      	ldr	r3, [r7, #28]
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	d203      	bcs.n	8006edc <create_name+0x234>
 8006ed4:	69ba      	ldr	r2, [r7, #24]
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d123      	bne.n	8006f24 <create_name+0x27c>
			if (ni == 11) {				/* Long extension */
 8006edc:	69fb      	ldr	r3, [r7, #28]
 8006ede:	2b0b      	cmp	r3, #11
 8006ee0:	d106      	bne.n	8006ef0 <create_name+0x248>
				cf |= NS_LOSS | NS_LFN; break;
 8006ee2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006ee6:	f043 0303 	orr.w	r3, r3, #3
 8006eea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006eee:	e08e      	b.n	800700e <create_name+0x366>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8006ef0:	69ba      	ldr	r2, [r7, #24]
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	d005      	beq.n	8006f04 <create_name+0x25c>
 8006ef8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006efc:	f043 0303 	orr.w	r3, r3, #3
 8006f00:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (si > di) break;			/* No extension */
 8006f04:	69ba      	ldr	r2, [r7, #24]
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	d87f      	bhi.n	800700c <create_name+0x364>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	61bb      	str	r3, [r7, #24]
 8006f10:	2308      	movs	r3, #8
 8006f12:	623b      	str	r3, [r7, #32]
 8006f14:	230b      	movs	r3, #11
 8006f16:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8006f18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f1c:	009b      	lsls	r3, r3, #2
 8006f1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006f22:	e06b      	b.n	8006ffc <create_name+0x354>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8006f24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f26:	2b7f      	cmp	r3, #127	; 0x7f
 8006f28:	d910      	bls.n	8006f4c <create_name+0x2a4>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
 8006f2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f001 fc8d 	bl	800884c <ff_wtoupper>
 8006f32:	4603      	mov	r3, r0
 8006f34:	2100      	movs	r1, #0
 8006f36:	4618      	mov	r0, r3
 8006f38:	f001 fc2a 	bl	8008790 <ff_convert>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	84bb      	strh	r3, [r7, #36]	; 0x24
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8006f40:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006f44:	f043 0302 	orr.w	r3, r3, #2
 8006f48:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		}

		if (_DF1S && w >= 0x100) {		/* DBC (always false at SBCS cfg) */
 8006f4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f4e:	2bff      	cmp	r3, #255	; 0xff
 8006f50:	d91a      	bls.n	8006f88 <create_name+0x2e0>
			if (i >= ni - 1) {
 8006f52:	69fb      	ldr	r3, [r7, #28]
 8006f54:	3b01      	subs	r3, #1
 8006f56:	6a3a      	ldr	r2, [r7, #32]
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d308      	bcc.n	8006f6e <create_name+0x2c6>
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
 8006f5c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006f60:	f043 0303 	orr.w	r3, r3, #3
 8006f64:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006f68:	69fb      	ldr	r3, [r7, #28]
 8006f6a:	623b      	str	r3, [r7, #32]
 8006f6c:	e046      	b.n	8006ffc <create_name+0x354>
			}
			dp->fn[i++] = (BYTE)(w >> 8);
 8006f6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f70:	0a1b      	lsrs	r3, r3, #8
 8006f72:	b298      	uxth	r0, r3
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8006f7a:	6a3b      	ldr	r3, [r7, #32]
 8006f7c:	1c59      	adds	r1, r3, #1
 8006f7e:	6239      	str	r1, [r7, #32]
 8006f80:	4413      	add	r3, r2
 8006f82:	b2c2      	uxtb	r2, r0
 8006f84:	701a      	strb	r2, [r3, #0]
 8006f86:	e02f      	b.n	8006fe8 <create_name+0x340>
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8006f88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d007      	beq.n	8006f9e <create_name+0x2f6>
 8006f8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f90:	4619      	mov	r1, r3
 8006f92:	481d      	ldr	r0, [pc, #116]	; (8007008 <create_name+0x360>)
 8006f94:	f7fe fb8b 	bl	80056ae <chk_chr>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d008      	beq.n	8006fb0 <create_name+0x308>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8006f9e:	235f      	movs	r3, #95	; 0x5f
 8006fa0:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006fa2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006fa6:	f043 0303 	orr.w	r3, r3, #3
 8006faa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006fae:	e01b      	b.n	8006fe8 <create_name+0x340>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8006fb0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006fb2:	2b40      	cmp	r3, #64	; 0x40
 8006fb4:	d909      	bls.n	8006fca <create_name+0x322>
 8006fb6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006fb8:	2b5a      	cmp	r3, #90	; 0x5a
 8006fba:	d806      	bhi.n	8006fca <create_name+0x322>
					b |= 2;
 8006fbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006fc0:	f043 0302 	orr.w	r3, r3, #2
 8006fc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006fc8:	e00e      	b.n	8006fe8 <create_name+0x340>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8006fca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006fcc:	2b60      	cmp	r3, #96	; 0x60
 8006fce:	d90b      	bls.n	8006fe8 <create_name+0x340>
 8006fd0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006fd2:	2b7a      	cmp	r3, #122	; 0x7a
 8006fd4:	d808      	bhi.n	8006fe8 <create_name+0x340>
						b |= 1; w -= 0x20;
 8006fd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006fda:	f043 0301 	orr.w	r3, r3, #1
 8006fde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006fe2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006fe4:	3b20      	subs	r3, #32
 8006fe6:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8006fee:	6a3b      	ldr	r3, [r7, #32]
 8006ff0:	1c59      	adds	r1, r3, #1
 8006ff2:	6239      	str	r1, [r7, #32]
 8006ff4:	4413      	add	r3, r2
 8006ff6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006ff8:	b2d2      	uxtb	r2, r2
 8006ffa:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 8006ffc:	e749      	b.n	8006e92 <create_name+0x1ea>
		if (!w) break;					/* Break on end of the LFN */
 8006ffe:	bf00      	nop
 8007000:	e005      	b.n	800700e <create_name+0x366>
 8007002:	bf00      	nop
 8007004:	0800b198 	.word	0x0800b198
 8007008:	0800b1a4 	.word	0x0800b1a4
			if (si > di) break;			/* No extension */
 800700c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007014:	781b      	ldrb	r3, [r3, #0]
 8007016:	2be5      	cmp	r3, #229	; 0xe5
 8007018:	d104      	bne.n	8007024 <create_name+0x37c>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007020:	2205      	movs	r2, #5
 8007022:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8007024:	69fb      	ldr	r3, [r7, #28]
 8007026:	2b08      	cmp	r3, #8
 8007028:	d104      	bne.n	8007034 <create_name+0x38c>
 800702a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800702e:	009b      	lsls	r3, r3, #2
 8007030:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 8007034:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007038:	f003 030c 	and.w	r3, r3, #12
 800703c:	2b0c      	cmp	r3, #12
 800703e:	d005      	beq.n	800704c <create_name+0x3a4>
 8007040:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007044:	f003 0303 	and.w	r3, r3, #3
 8007048:	2b03      	cmp	r3, #3
 800704a:	d105      	bne.n	8007058 <create_name+0x3b0>
		cf |= NS_LFN;
 800704c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007050:	f043 0302 	orr.w	r3, r3, #2
 8007054:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8007058:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800705c:	f003 0302 	and.w	r3, r3, #2
 8007060:	2b00      	cmp	r3, #0
 8007062:	d117      	bne.n	8007094 <create_name+0x3ec>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8007064:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007068:	f003 0303 	and.w	r3, r3, #3
 800706c:	2b01      	cmp	r3, #1
 800706e:	d105      	bne.n	800707c <create_name+0x3d4>
 8007070:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007074:	f043 0310 	orr.w	r3, r3, #16
 8007078:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800707c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007080:	f003 030c 	and.w	r3, r3, #12
 8007084:	2b04      	cmp	r3, #4
 8007086:	d105      	bne.n	8007094 <create_name+0x3ec>
 8007088:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800708c:	f043 0308 	orr.w	r3, r3, #8
 8007090:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800709a:	330b      	adds	r3, #11
 800709c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80070a0:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80070a2:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3728      	adds	r7, #40	; 0x28
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}

080070ac <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b084      	sub	sp, #16
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	781b      	ldrb	r3, [r3, #0]
 80070ba:	2b2f      	cmp	r3, #47	; 0x2f
 80070bc:	d003      	beq.n	80070c6 <follow_path+0x1a>
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	781b      	ldrb	r3, [r3, #0]
 80070c2:	2b5c      	cmp	r3, #92	; 0x5c
 80070c4:	d102      	bne.n	80070cc <follow_path+0x20>
		path++;
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	3301      	adds	r3, #1
 80070ca:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2200      	movs	r2, #0
 80070d0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	2b1f      	cmp	r3, #31
 80070da:	d80a      	bhi.n	80070f2 <follow_path+0x46>
		res = dir_sdi(dp, 0);
 80070dc:	2100      	movs	r1, #0
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f7ff f884 	bl	80061ec <dir_sdi>
 80070e4:	4603      	mov	r3, r0
 80070e6:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2200      	movs	r2, #0
 80070ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80070f0:	e045      	b.n	800717e <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80070f2:	463b      	mov	r3, r7
 80070f4:	4619      	mov	r1, r3
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f7ff fdd6 	bl	8006ca8 <create_name>
 80070fc:	4603      	mov	r3, r0
 80070fe:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8007100:	7bfb      	ldrb	r3, [r7, #15]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d136      	bne.n	8007174 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f7ff fbff 	bl	800690a <dir_find>
 800710c:	4603      	mov	r3, r0
 800710e:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007116:	7adb      	ldrb	r3, [r3, #11]
 8007118:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800711a:	7bfb      	ldrb	r3, [r7, #15]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d00a      	beq.n	8007136 <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007120:	7bfb      	ldrb	r3, [r7, #15]
 8007122:	2b04      	cmp	r3, #4
 8007124:	d128      	bne.n	8007178 <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007126:	7bbb      	ldrb	r3, [r7, #14]
 8007128:	f003 0304 	and.w	r3, r3, #4
 800712c:	2b00      	cmp	r3, #0
 800712e:	d123      	bne.n	8007178 <follow_path+0xcc>
 8007130:	2305      	movs	r3, #5
 8007132:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8007134:	e020      	b.n	8007178 <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007136:	7bbb      	ldrb	r3, [r7, #14]
 8007138:	f003 0304 	and.w	r3, r3, #4
 800713c:	2b00      	cmp	r3, #0
 800713e:	d11d      	bne.n	800717c <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007146:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	330b      	adds	r3, #11
 800714c:	781b      	ldrb	r3, [r3, #0]
 800714e:	f003 0310 	and.w	r3, r3, #16
 8007152:	2b00      	cmp	r3, #0
 8007154:	d102      	bne.n	800715c <follow_path+0xb0>
				res = FR_NO_PATH; break;
 8007156:	2305      	movs	r3, #5
 8007158:	73fb      	strb	r3, [r7, #15]
 800715a:	e010      	b.n	800717e <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007162:	68b9      	ldr	r1, [r7, #8]
 8007164:	4618      	mov	r0, r3
 8007166:	f7ff fa16 	bl	8006596 <ld_clust>
 800716a:	4602      	mov	r2, r0
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007172:	e7be      	b.n	80070f2 <follow_path+0x46>
			if (res != FR_OK) break;
 8007174:	bf00      	nop
 8007176:	e002      	b.n	800717e <follow_path+0xd2>
				break;
 8007178:	bf00      	nop
 800717a:	e000      	b.n	800717e <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800717c:	bf00      	nop
		}
	}

	return res;
 800717e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007180:	4618      	mov	r0, r3
 8007182:	3710      	adds	r7, #16
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007188:	b480      	push	{r7}
 800718a:	b087      	sub	sp, #28
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007190:	f04f 33ff 	mov.w	r3, #4294967295
 8007194:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d031      	beq.n	8007202 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	617b      	str	r3, [r7, #20]
 80071a4:	e002      	b.n	80071ac <get_ldnumber+0x24>
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	3301      	adds	r3, #1
 80071aa:	617b      	str	r3, [r7, #20]
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	2b1f      	cmp	r3, #31
 80071b2:	d903      	bls.n	80071bc <get_ldnumber+0x34>
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	2b3a      	cmp	r3, #58	; 0x3a
 80071ba:	d1f4      	bne.n	80071a6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	781b      	ldrb	r3, [r3, #0]
 80071c0:	2b3a      	cmp	r3, #58	; 0x3a
 80071c2:	d11c      	bne.n	80071fe <get_ldnumber+0x76>
			tp = *path;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	1c5a      	adds	r2, r3, #1
 80071ce:	60fa      	str	r2, [r7, #12]
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	3b30      	subs	r3, #48	; 0x30
 80071d4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	2b09      	cmp	r3, #9
 80071da:	d80e      	bhi.n	80071fa <get_ldnumber+0x72>
 80071dc:	68fa      	ldr	r2, [r7, #12]
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d10a      	bne.n	80071fa <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d107      	bne.n	80071fa <get_ldnumber+0x72>
					vol = (int)i;
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	3301      	adds	r3, #1
 80071f2:	617b      	str	r3, [r7, #20]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	697a      	ldr	r2, [r7, #20]
 80071f8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	e002      	b.n	8007204 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80071fe:	2300      	movs	r3, #0
 8007200:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007202:	693b      	ldr	r3, [r7, #16]
}
 8007204:	4618      	mov	r0, r3
 8007206:	371c      	adds	r7, #28
 8007208:	46bd      	mov	sp, r7
 800720a:	bc80      	pop	{r7}
 800720c:	4770      	bx	lr
	...

08007210 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b082      	sub	sp, #8
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
 8007218:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2200      	movs	r2, #0
 800721e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f04f 32ff 	mov.w	r2, #4294967295
 8007228:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800722c:	6839      	ldr	r1, [r7, #0]
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f7fe fc81 	bl	8005b36 <move_window>
 8007234:	4603      	mov	r3, r0
 8007236:	2b00      	cmp	r3, #0
 8007238:	d001      	beq.n	800723e <check_fs+0x2e>
		return 3;
 800723a:	2303      	movs	r3, #3
 800723c:	e01e      	b.n	800727c <check_fs+0x6c>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007244:	881b      	ldrh	r3, [r3, #0]
 8007246:	f64a 2255 	movw	r2, #43605	; 0xaa55
 800724a:	4293      	cmp	r3, r2
 800724c:	d001      	beq.n	8007252 <check_fs+0x42>
		return 2;
 800724e:	2302      	movs	r3, #2
 8007250:	e014      	b.n	800727c <check_fs+0x6c>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	3336      	adds	r3, #54	; 0x36
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800725c:	4a09      	ldr	r2, [pc, #36]	; (8007284 <check_fs+0x74>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d101      	bne.n	8007266 <check_fs+0x56>
		return 0;
 8007262:	2300      	movs	r3, #0
 8007264:	e00a      	b.n	800727c <check_fs+0x6c>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	3352      	adds	r3, #82	; 0x52
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007270:	4a04      	ldr	r2, [pc, #16]	; (8007284 <check_fs+0x74>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d101      	bne.n	800727a <check_fs+0x6a>
		return 0;
 8007276:	2300      	movs	r3, #0
 8007278:	e000      	b.n	800727c <check_fs+0x6c>

	return 1;
 800727a:	2301      	movs	r3, #1
}
 800727c:	4618      	mov	r0, r3
 800727e:	3708      	adds	r7, #8
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}
 8007284:	00544146 	.word	0x00544146

08007288 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b096      	sub	sp, #88	; 0x58
 800728c:	af00      	add	r7, sp, #0
 800728e:	60f8      	str	r0, [r7, #12]
 8007290:	60b9      	str	r1, [r7, #8]
 8007292:	4613      	mov	r3, r2
 8007294:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2200      	movs	r2, #0
 800729a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800729c:	68b8      	ldr	r0, [r7, #8]
 800729e:	f7ff ff73 	bl	8007188 <get_ldnumber>
 80072a2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80072a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	da01      	bge.n	80072ae <find_volume+0x26>
 80072aa:	230b      	movs	r3, #11
 80072ac:	e211      	b.n	80076d2 <find_volume+0x44a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80072ae:	4aa2      	ldr	r2, [pc, #648]	; (8007538 <find_volume+0x2b0>)
 80072b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072b6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80072b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d101      	bne.n	80072c2 <find_volume+0x3a>
 80072be:	230c      	movs	r3, #12
 80072c0:	e207      	b.n	80076d2 <find_volume+0x44a>

	ENTER_FF(fs);						/* Lock the volume */
 80072c2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80072c4:	f7fe fa0d 	bl	80056e2 <lock_fs>
 80072c8:	4603      	mov	r3, r0
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d101      	bne.n	80072d2 <find_volume+0x4a>
 80072ce:	230f      	movs	r3, #15
 80072d0:	e1ff      	b.n	80076d2 <find_volume+0x44a>
	*rfs = fs;							/* Return pointer to the file system object */
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80072d6:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 80072d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072da:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d01b      	beq.n	800731a <find_volume+0x92>
		stat = disk_status(fs->drv);
 80072e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072e4:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80072e8:	4618      	mov	r0, r3
 80072ea:	f7fe f8d5 	bl	8005498 <disk_status>
 80072ee:	4603      	mov	r3, r0
 80072f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80072f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80072f8:	f003 0301 	and.w	r3, r3, #1
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d10c      	bne.n	800731a <find_volume+0x92>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8007300:	79fb      	ldrb	r3, [r7, #7]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d007      	beq.n	8007316 <find_volume+0x8e>
 8007306:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800730a:	f003 0304 	and.w	r3, r3, #4
 800730e:	2b00      	cmp	r3, #0
 8007310:	d001      	beq.n	8007316 <find_volume+0x8e>
				return FR_WRITE_PROTECTED;
 8007312:	230a      	movs	r3, #10
 8007314:	e1dd      	b.n	80076d2 <find_volume+0x44a>
			return FR_OK;				/* The file system object is valid */
 8007316:	2300      	movs	r3, #0
 8007318:	e1db      	b.n	80076d2 <find_volume+0x44a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800731a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800731c:	2200      	movs	r2, #0
 800731e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007322:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007324:	b2da      	uxtb	r2, r3
 8007326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007328:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800732c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800732e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007332:	4618      	mov	r0, r3
 8007334:	f7fe f8ca 	bl	80054cc <disk_initialize>
 8007338:	4603      	mov	r3, r0
 800733a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800733e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007342:	f003 0301 	and.w	r3, r3, #1
 8007346:	2b00      	cmp	r3, #0
 8007348:	d001      	beq.n	800734e <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800734a:	2303      	movs	r3, #3
 800734c:	e1c1      	b.n	80076d2 <find_volume+0x44a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800734e:	79fb      	ldrb	r3, [r7, #7]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d007      	beq.n	8007364 <find_volume+0xdc>
 8007354:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007358:	f003 0304 	and.w	r3, r3, #4
 800735c:	2b00      	cmp	r3, #0
 800735e:	d001      	beq.n	8007364 <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 8007360:	230a      	movs	r3, #10
 8007362:	e1b6      	b.n	80076d2 <find_volume+0x44a>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8007364:	2300      	movs	r3, #0
 8007366:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8007368:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800736a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800736c:	f7ff ff50 	bl	8007210 <check_fs>
 8007370:	4603      	mov	r3, r0
 8007372:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8007376:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800737a:	2b01      	cmp	r3, #1
 800737c:	d146      	bne.n	800740c <find_volume+0x184>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800737e:	2300      	movs	r3, #0
 8007380:	643b      	str	r3, [r7, #64]	; 0x40
 8007382:	e01a      	b.n	80073ba <find_volume+0x132>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8007384:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007386:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007388:	011b      	lsls	r3, r3, #4
 800738a:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800738e:	4413      	add	r3, r2
 8007390:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8007392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007394:	3304      	adds	r3, #4
 8007396:	781b      	ldrb	r3, [r3, #0]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d003      	beq.n	80073a4 <find_volume+0x11c>
 800739c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800739e:	3308      	adds	r3, #8
 80073a0:	681a      	ldr	r2, [r3, #0]
 80073a2:	e000      	b.n	80073a6 <find_volume+0x11e>
 80073a4:	2200      	movs	r2, #0
 80073a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073a8:	009b      	lsls	r3, r3, #2
 80073aa:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80073ae:	440b      	add	r3, r1
 80073b0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80073b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073b6:	3301      	adds	r3, #1
 80073b8:	643b      	str	r3, [r7, #64]	; 0x40
 80073ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073bc:	2b03      	cmp	r3, #3
 80073be:	d9e1      	bls.n	8007384 <find_volume+0xfc>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 80073c0:	2300      	movs	r3, #0
 80073c2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80073c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d002      	beq.n	80073d0 <find_volume+0x148>
 80073ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073cc:	3b01      	subs	r3, #1
 80073ce:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 80073d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073d2:	009b      	lsls	r3, r3, #2
 80073d4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80073d8:	4413      	add	r3, r2
 80073da:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80073de:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 80073e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d005      	beq.n	80073f2 <find_volume+0x16a>
 80073e6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80073e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80073ea:	f7ff ff11 	bl	8007210 <check_fs>
 80073ee:	4603      	mov	r3, r0
 80073f0:	e000      	b.n	80073f4 <find_volume+0x16c>
 80073f2:	2302      	movs	r3, #2
 80073f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 80073f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d005      	beq.n	800740c <find_volume+0x184>
 8007400:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007402:	3301      	adds	r3, #1
 8007404:	643b      	str	r3, [r7, #64]	; 0x40
 8007406:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007408:	2b03      	cmp	r3, #3
 800740a:	d9e1      	bls.n	80073d0 <find_volume+0x148>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800740c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007410:	2b03      	cmp	r3, #3
 8007412:	d101      	bne.n	8007418 <find_volume+0x190>
 8007414:	2301      	movs	r3, #1
 8007416:	e15c      	b.n	80076d2 <find_volume+0x44a>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8007418:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800741c:	2b00      	cmp	r3, #0
 800741e:	d001      	beq.n	8007424 <find_volume+0x19c>
 8007420:	230d      	movs	r3, #13
 8007422:	e156      	b.n	80076d2 <find_volume+0x44a>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007426:	330b      	adds	r3, #11
 8007428:	881b      	ldrh	r3, [r3, #0]
 800742a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800742e:	d001      	beq.n	8007434 <find_volume+0x1ac>
		return FR_NO_FILESYSTEM;
 8007430:	230d      	movs	r3, #13
 8007432:	e14e      	b.n	80076d2 <find_volume+0x44a>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8007434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007436:	3316      	adds	r3, #22
 8007438:	881b      	ldrh	r3, [r3, #0]
 800743a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800743c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800743e:	2b00      	cmp	r3, #0
 8007440:	d103      	bne.n	800744a <find_volume+0x1c2>
 8007442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007444:	3324      	adds	r3, #36	; 0x24
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 800744a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800744c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800744e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8007452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007454:	7c1a      	ldrb	r2, [r3, #16]
 8007456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007458:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800745c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800745e:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8007462:	2b01      	cmp	r3, #1
 8007464:	d006      	beq.n	8007474 <find_volume+0x1ec>
 8007466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007468:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800746c:	2b02      	cmp	r3, #2
 800746e:	d001      	beq.n	8007474 <find_volume+0x1ec>
		return FR_NO_FILESYSTEM;
 8007470:	230d      	movs	r3, #13
 8007472:	e12e      	b.n	80076d2 <find_volume+0x44a>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8007474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007476:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800747a:	461a      	mov	r2, r3
 800747c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800747e:	fb02 f303 	mul.w	r3, r2, r3
 8007482:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8007484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007486:	7b5a      	ldrb	r2, [r3, #13]
 8007488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800748a:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800748e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007490:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8007494:	2b00      	cmp	r3, #0
 8007496:	d00a      	beq.n	80074ae <find_volume+0x226>
 8007498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800749a:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800749e:	461a      	mov	r2, r3
 80074a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074a2:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80074a6:	3b01      	subs	r3, #1
 80074a8:	4013      	ands	r3, r2
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d001      	beq.n	80074b2 <find_volume+0x22a>
		return FR_NO_FILESYSTEM;
 80074ae:	230d      	movs	r3, #13
 80074b0:	e10f      	b.n	80076d2 <find_volume+0x44a>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 80074b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074b4:	3311      	adds	r3, #17
 80074b6:	881a      	ldrh	r2, [r3, #0]
 80074b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ba:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 80074be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074c0:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80074c4:	f003 030f 	and.w	r3, r3, #15
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d001      	beq.n	80074d2 <find_volume+0x24a>
		return FR_NO_FILESYSTEM;
 80074ce:	230d      	movs	r3, #13
 80074d0:	e0ff      	b.n	80076d2 <find_volume+0x44a>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 80074d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074d4:	3313      	adds	r3, #19
 80074d6:	881b      	ldrh	r3, [r3, #0]
 80074d8:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 80074da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d103      	bne.n	80074e8 <find_volume+0x260>
 80074e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e2:	3320      	adds	r3, #32
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 80074e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ea:	330e      	adds	r3, #14
 80074ec:	881b      	ldrh	r3, [r3, #0]
 80074ee:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 80074f0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d101      	bne.n	80074fa <find_volume+0x272>
 80074f6:	230d      	movs	r3, #13
 80074f8:	e0eb      	b.n	80076d2 <find_volume+0x44a>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 80074fa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80074fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074fe:	4413      	add	r3, r2
 8007500:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007502:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 8007506:	0912      	lsrs	r2, r2, #4
 8007508:	b292      	uxth	r2, r2
 800750a:	4413      	add	r3, r2
 800750c:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800750e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007512:	429a      	cmp	r2, r3
 8007514:	d201      	bcs.n	800751a <find_volume+0x292>
 8007516:	230d      	movs	r3, #13
 8007518:	e0db      	b.n	80076d2 <find_volume+0x44a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800751a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800751c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800751e:	1ad3      	subs	r3, r2, r3
 8007520:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007522:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8007526:	fbb3 f3f2 	udiv	r3, r3, r2
 800752a:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800752c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800752e:	2b00      	cmp	r3, #0
 8007530:	d104      	bne.n	800753c <find_volume+0x2b4>
 8007532:	230d      	movs	r3, #13
 8007534:	e0cd      	b.n	80076d2 <find_volume+0x44a>
 8007536:	bf00      	nop
 8007538:	20000094 	.word	0x20000094
	fmt = FS_FAT12;
 800753c:	2301      	movs	r3, #1
 800753e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8007542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007544:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007548:	4293      	cmp	r3, r2
 800754a:	d902      	bls.n	8007552 <find_volume+0x2ca>
 800754c:	2302      	movs	r3, #2
 800754e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8007552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007554:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007558:	4293      	cmp	r3, r2
 800755a:	d902      	bls.n	8007562 <find_volume+0x2da>
 800755c:	2303      	movs	r3, #3
 800755e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8007562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007564:	1c9a      	adds	r2, r3, #2
 8007566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007568:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
	fs->volbase = bsect;								/* Volume start sector */
 800756c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800756e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007570:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8007574:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007576:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007578:	441a      	add	r2, r3
 800757a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800757c:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
	fs->database = bsect + sysect;						/* Data start sector */
 8007580:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007584:	441a      	add	r2, r3
 8007586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007588:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (fmt == FS_FAT32) {
 800758c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007590:	2b03      	cmp	r3, #3
 8007592:	d112      	bne.n	80075ba <find_volume+0x332>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8007594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007596:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800759a:	2b00      	cmp	r3, #0
 800759c:	d001      	beq.n	80075a2 <find_volume+0x31a>
 800759e:	230d      	movs	r3, #13
 80075a0:	e097      	b.n	80076d2 <find_volume+0x44a>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 80075a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075a4:	332c      	adds	r3, #44	; 0x2c
 80075a6:	681a      	ldr	r2, [r3, #0]
 80075a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075aa:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 80075ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075b0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80075b4:	009b      	lsls	r3, r3, #2
 80075b6:	647b      	str	r3, [r7, #68]	; 0x44
 80075b8:	e025      	b.n	8007606 <find_volume+0x37e>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 80075ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075bc:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d101      	bne.n	80075c8 <find_volume+0x340>
 80075c4:	230d      	movs	r3, #13
 80075c6:	e084      	b.n	80076d2 <find_volume+0x44a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 80075c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ca:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 80075ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075d0:	441a      	add	r2, r3
 80075d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075d4:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80075d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80075dc:	2b02      	cmp	r3, #2
 80075de:	d104      	bne.n	80075ea <find_volume+0x362>
 80075e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075e2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80075e6:	005b      	lsls	r3, r3, #1
 80075e8:	e00c      	b.n	8007604 <find_volume+0x37c>
 80075ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ec:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80075f0:	4613      	mov	r3, r2
 80075f2:	005b      	lsls	r3, r3, #1
 80075f4:	4413      	add	r3, r2
 80075f6:	085a      	lsrs	r2, r3, #1
 80075f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075fa:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80075fe:	f003 0301 	and.w	r3, r3, #1
 8007602:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8007604:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8007606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007608:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800760c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800760e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8007612:	0a5b      	lsrs	r3, r3, #9
 8007614:	429a      	cmp	r2, r3
 8007616:	d201      	bcs.n	800761c <find_volume+0x394>
		return FR_NO_FILESYSTEM;
 8007618:	230d      	movs	r3, #13
 800761a:	e05a      	b.n	80076d2 <find_volume+0x44a>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800761c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800761e:	f04f 32ff 	mov.w	r2, #4294967295
 8007622:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8007626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007628:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800762c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800762e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8007632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007634:	2280      	movs	r2, #128	; 0x80
 8007636:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800763a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800763e:	2b03      	cmp	r3, #3
 8007640:	d133      	bne.n	80076aa <find_volume+0x422>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8007642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007644:	3330      	adds	r3, #48	; 0x30
 8007646:	881b      	ldrh	r3, [r3, #0]
 8007648:	2b01      	cmp	r3, #1
 800764a:	d12e      	bne.n	80076aa <find_volume+0x422>
		&& move_window(fs, bsect + 1) == FR_OK)
 800764c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800764e:	3301      	adds	r3, #1
 8007650:	4619      	mov	r1, r3
 8007652:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007654:	f7fe fa6f 	bl	8005b36 <move_window>
 8007658:	4603      	mov	r3, r0
 800765a:	2b00      	cmp	r3, #0
 800765c:	d125      	bne.n	80076aa <find_volume+0x422>
	{
		fs->fsi_flag = 0;
 800765e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007660:	2200      	movs	r2, #0
 8007662:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007668:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800766c:	881b      	ldrh	r3, [r3, #0]
 800766e:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8007672:	4293      	cmp	r3, r2
 8007674:	d119      	bne.n	80076aa <find_volume+0x422>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8007676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a18      	ldr	r2, [pc, #96]	; (80076dc <find_volume+0x454>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d114      	bne.n	80076aa <find_volume+0x422>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8007680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007682:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a15      	ldr	r2, [pc, #84]	; (80076e0 <find_volume+0x458>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d10d      	bne.n	80076aa <find_volume+0x422>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800768e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007690:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8007694:	681a      	ldr	r2, [r3, #0]
 8007696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007698:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800769c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800769e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80076a2:	681a      	ldr	r2, [r3, #0]
 80076a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076a6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 80076aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ac:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80076b0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 80076b4:	4b0b      	ldr	r3, [pc, #44]	; (80076e4 <find_volume+0x45c>)
 80076b6:	881b      	ldrh	r3, [r3, #0]
 80076b8:	3301      	adds	r3, #1
 80076ba:	b29a      	uxth	r2, r3
 80076bc:	4b09      	ldr	r3, [pc, #36]	; (80076e4 <find_volume+0x45c>)
 80076be:	801a      	strh	r2, [r3, #0]
 80076c0:	4b08      	ldr	r3, [pc, #32]	; (80076e4 <find_volume+0x45c>)
 80076c2:	881a      	ldrh	r2, [r3, #0]
 80076c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076c6:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 80076ca:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80076cc:	f7fe f9c2 	bl	8005a54 <clear_lock>
#endif

	return FR_OK;
 80076d0:	2300      	movs	r3, #0
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3758      	adds	r7, #88	; 0x58
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}
 80076da:	bf00      	nop
 80076dc:	41615252 	.word	0x41615252
 80076e0:	61417272 	.word	0x61417272
 80076e4:	20000098 	.word	0x20000098

080076e8 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b084      	sub	sp, #16
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d022      	beq.n	8007740 <validate+0x58>
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007700:	2b00      	cmp	r3, #0
 8007702:	d01d      	beq.n	8007740 <validate+0x58>
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800770a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800770e:	2b00      	cmp	r3, #0
 8007710:	d016      	beq.n	8007740 <validate+0x58>
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007718:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 8007722:	429a      	cmp	r2, r3
 8007724:	d10c      	bne.n	8007740 <validate+0x58>
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800772c:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007730:	4618      	mov	r0, r3
 8007732:	f7fd feb1 	bl	8005498 <disk_status>
 8007736:	4603      	mov	r3, r0
 8007738:	f003 0301 	and.w	r3, r3, #1
 800773c:	2b00      	cmp	r3, #0
 800773e:	d001      	beq.n	8007744 <validate+0x5c>
		return FR_INVALID_OBJECT;
 8007740:	2309      	movs	r3, #9
 8007742:	e00b      	b.n	800775c <validate+0x74>

	ENTER_FF(fil->fs);		/* Lock file system */
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800774a:	4618      	mov	r0, r3
 800774c:	f7fd ffc9 	bl	80056e2 <lock_fs>
 8007750:	4603      	mov	r3, r0
 8007752:	2b00      	cmp	r3, #0
 8007754:	d101      	bne.n	800775a <validate+0x72>
 8007756:	230f      	movs	r3, #15
 8007758:	e000      	b.n	800775c <validate+0x74>

	return FR_OK;
 800775a:	2300      	movs	r3, #0
}
 800775c:	4618      	mov	r0, r3
 800775e:	3710      	adds	r7, #16
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}

08007764 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b088      	sub	sp, #32
 8007768:	af00      	add	r7, sp, #0
 800776a:	60f8      	str	r0, [r7, #12]
 800776c:	60b9      	str	r1, [r7, #8]
 800776e:	4613      	mov	r3, r2
 8007770:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8007776:	f107 0310 	add.w	r3, r7, #16
 800777a:	4618      	mov	r0, r3
 800777c:	f7ff fd04 	bl	8007188 <get_ldnumber>
 8007780:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007782:	69fb      	ldr	r3, [r7, #28]
 8007784:	2b00      	cmp	r3, #0
 8007786:	da01      	bge.n	800778c <f_mount+0x28>
 8007788:	230b      	movs	r3, #11
 800778a:	e04c      	b.n	8007826 <f_mount+0xc2>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800778c:	4a28      	ldr	r2, [pc, #160]	; (8007830 <f_mount+0xcc>)
 800778e:	69fb      	ldr	r3, [r7, #28]
 8007790:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007794:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007796:	69bb      	ldr	r3, [r7, #24]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d011      	beq.n	80077c0 <f_mount+0x5c>
#if _FS_LOCK
		clear_lock(cfs);
 800779c:	69b8      	ldr	r0, [r7, #24]
 800779e:	f7fe f959 	bl	8005a54 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 80077a2:	69bb      	ldr	r3, [r7, #24]
 80077a4:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80077a8:	4618      	mov	r0, r3
 80077aa:	f001 f89b 	bl	80088e4 <ff_del_syncobj>
 80077ae:	4603      	mov	r3, r0
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d101      	bne.n	80077b8 <f_mount+0x54>
 80077b4:	2302      	movs	r3, #2
 80077b6:	e036      	b.n	8007826 <f_mount+0xc2>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80077b8:	69bb      	ldr	r3, [r7, #24]
 80077ba:	2200      	movs	r2, #0
 80077bc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d011      	beq.n	80077ea <f_mount+0x86>
		fs->fs_type = 0;				/* Clear new fs object */
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2200      	movs	r2, #0
 80077ca:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 80077ce:	69fb      	ldr	r3, [r7, #28]
 80077d0:	b2da      	uxtb	r2, r3
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 80077d8:	4619      	mov	r1, r3
 80077da:	4610      	mov	r0, r2
 80077dc:	f001 f864 	bl	80088a8 <ff_cre_syncobj>
 80077e0:	4603      	mov	r3, r0
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d101      	bne.n	80077ea <f_mount+0x86>
 80077e6:	2302      	movs	r3, #2
 80077e8:	e01d      	b.n	8007826 <f_mount+0xc2>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80077ea:	68fa      	ldr	r2, [r7, #12]
 80077ec:	4910      	ldr	r1, [pc, #64]	; (8007830 <f_mount+0xcc>)
 80077ee:	69fb      	ldr	r3, [r7, #28]
 80077f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d002      	beq.n	8007800 <f_mount+0x9c>
 80077fa:	79fb      	ldrb	r3, [r7, #7]
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	d001      	beq.n	8007804 <f_mount+0xa0>
 8007800:	2300      	movs	r3, #0
 8007802:	e010      	b.n	8007826 <f_mount+0xc2>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8007804:	f107 0108 	add.w	r1, r7, #8
 8007808:	f107 030c 	add.w	r3, r7, #12
 800780c:	2200      	movs	r2, #0
 800780e:	4618      	mov	r0, r3
 8007810:	f7ff fd3a 	bl	8007288 <find_volume>
 8007814:	4603      	mov	r3, r0
 8007816:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	7dfa      	ldrb	r2, [r7, #23]
 800781c:	4611      	mov	r1, r2
 800781e:	4618      	mov	r0, r3
 8007820:	f7fd ff6e 	bl	8005700 <unlock_fs>
 8007824:	7dfb      	ldrb	r3, [r7, #23]
}
 8007826:	4618      	mov	r0, r3
 8007828:	3720      	adds	r7, #32
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}
 800782e:	bf00      	nop
 8007830:	20000094 	.word	0x20000094

08007834 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 800783a:	af00      	add	r7, sp, #0
 800783c:	f107 030c 	add.w	r3, r7, #12
 8007840:	6018      	str	r0, [r3, #0]
 8007842:	f107 0308 	add.w	r3, r7, #8
 8007846:	6019      	str	r1, [r3, #0]
 8007848:	1dfb      	adds	r3, r7, #7
 800784a:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800784c:	f107 030c 	add.w	r3, r7, #12
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d101      	bne.n	800785a <f_open+0x26>
 8007856:	2309      	movs	r3, #9
 8007858:	e1dd      	b.n	8007c16 <f_open+0x3e2>
	fp->fs = 0;			/* Clear file object */
 800785a:	f107 030c 	add.w	r3, r7, #12
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	2200      	movs	r2, #0
 8007862:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8007866:	1dfb      	adds	r3, r7, #7
 8007868:	1dfa      	adds	r2, r7, #7
 800786a:	7812      	ldrb	r2, [r2, #0]
 800786c:	f002 021f 	and.w	r2, r2, #31
 8007870:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8007872:	1dfb      	adds	r3, r7, #7
 8007874:	781b      	ldrb	r3, [r3, #0]
 8007876:	f023 0301 	bic.w	r3, r3, #1
 800787a:	b2da      	uxtb	r2, r3
 800787c:	f107 0108 	add.w	r1, r7, #8
 8007880:	f107 031c 	add.w	r3, r7, #28
 8007884:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007888:	4618      	mov	r0, r3
 800788a:	f7ff fcfd 	bl	8007288 <find_volume>
 800788e:	4603      	mov	r3, r0
 8007890:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8007894:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 8007898:	2b00      	cmp	r3, #0
 800789a:	f040 81b0 	bne.w	8007bfe <f_open+0x3ca>
		INIT_BUF(dj);
 800789e:	f44f 7000 	mov.w	r0, #512	; 0x200
 80078a2:	f001 f84b 	bl	800893c <ff_memalloc>
 80078a6:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 80078aa:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d109      	bne.n	80078c6 <f_open+0x92>
 80078b2:	f107 031c 	add.w	r3, r7, #28
 80078b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80078ba:	2111      	movs	r1, #17
 80078bc:	4618      	mov	r0, r3
 80078be:	f7fd ff1f 	bl	8005700 <unlock_fs>
 80078c2:	2311      	movs	r3, #17
 80078c4:	e1a7      	b.n	8007c16 <f_open+0x3e2>
 80078c6:	f107 031c 	add.w	r3, r7, #28
 80078ca:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80078ce:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
 80078d2:	f107 031c 	add.w	r3, r7, #28
 80078d6:	f107 0210 	add.w	r2, r7, #16
 80078da:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 80078de:	f107 0308 	add.w	r3, r7, #8
 80078e2:	681a      	ldr	r2, [r3, #0]
 80078e4:	f107 031c 	add.w	r3, r7, #28
 80078e8:	4611      	mov	r1, r2
 80078ea:	4618      	mov	r0, r3
 80078ec:	f7ff fbde 	bl	80070ac <follow_path>
 80078f0:	4603      	mov	r3, r0
 80078f2:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
		dir = dj.dir;
 80078f6:	f107 031c 	add.w	r3, r7, #28
 80078fa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80078fe:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007902:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 8007906:	2b00      	cmp	r3, #0
 8007908:	d11a      	bne.n	8007940 <f_open+0x10c>
			if (!dir)	/* Default directory itself */
 800790a:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800790e:	2b00      	cmp	r3, #0
 8007910:	d103      	bne.n	800791a <f_open+0xe6>
				res = FR_INVALID_NAME;
 8007912:	2306      	movs	r3, #6
 8007914:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
 8007918:	e012      	b.n	8007940 <f_open+0x10c>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800791a:	1dfb      	adds	r3, r7, #7
 800791c:	781b      	ldrb	r3, [r3, #0]
 800791e:	f023 0301 	bic.w	r3, r3, #1
 8007922:	2b00      	cmp	r3, #0
 8007924:	bf14      	ite	ne
 8007926:	2301      	movne	r3, #1
 8007928:	2300      	moveq	r3, #0
 800792a:	b2db      	uxtb	r3, r3
 800792c:	461a      	mov	r2, r3
 800792e:	f107 031c 	add.w	r3, r7, #28
 8007932:	4611      	mov	r1, r2
 8007934:	4618      	mov	r0, r3
 8007936:	f7fd ff03 	bl	8005740 <chk_lock>
 800793a:	4603      	mov	r3, r0
 800793c:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007940:	1dfb      	adds	r3, r7, #7
 8007942:	781b      	ldrb	r3, [r3, #0]
 8007944:	f003 031c 	and.w	r3, r3, #28
 8007948:	2b00      	cmp	r3, #0
 800794a:	f000 80a1 	beq.w	8007a90 <f_open+0x25c>
			if (res != FR_OK) {					/* No file, create new */
 800794e:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 8007952:	2b00      	cmp	r3, #0
 8007954:	d01f      	beq.n	8007996 <f_open+0x162>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8007956:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 800795a:	2b04      	cmp	r3, #4
 800795c:	d10e      	bne.n	800797c <f_open+0x148>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800795e:	f7fd ff5b 	bl	8005818 <enq_lock>
 8007962:	4603      	mov	r3, r0
 8007964:	2b00      	cmp	r3, #0
 8007966:	d006      	beq.n	8007976 <f_open+0x142>
 8007968:	f107 031c 	add.w	r3, r7, #28
 800796c:	4618      	mov	r0, r3
 800796e:	f7ff f88d 	bl	8006a8c <dir_register>
 8007972:	4603      	mov	r3, r0
 8007974:	e000      	b.n	8007978 <f_open+0x144>
 8007976:	2312      	movs	r3, #18
 8007978:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800797c:	1dfb      	adds	r3, r7, #7
 800797e:	1dfa      	adds	r2, r7, #7
 8007980:	7812      	ldrb	r2, [r2, #0]
 8007982:	f042 0208 	orr.w	r2, r2, #8
 8007986:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 8007988:	f107 031c 	add.w	r3, r7, #28
 800798c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007990:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8007994:	e014      	b.n	80079c0 <f_open+0x18c>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007996:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800799a:	330b      	adds	r3, #11
 800799c:	781b      	ldrb	r3, [r3, #0]
 800799e:	f003 0311 	and.w	r3, r3, #17
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d003      	beq.n	80079ae <f_open+0x17a>
					res = FR_DENIED;
 80079a6:	2307      	movs	r3, #7
 80079a8:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
 80079ac:	e008      	b.n	80079c0 <f_open+0x18c>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 80079ae:	1dfb      	adds	r3, r7, #7
 80079b0:	781b      	ldrb	r3, [r3, #0]
 80079b2:	f003 0304 	and.w	r3, r3, #4
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d002      	beq.n	80079c0 <f_open+0x18c>
						res = FR_EXIST;
 80079ba:	2308      	movs	r3, #8
 80079bc:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80079c0:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	f040 8084 	bne.w	8007ad2 <f_open+0x29e>
 80079ca:	1dfb      	adds	r3, r7, #7
 80079cc:	781b      	ldrb	r3, [r3, #0]
 80079ce:	f003 0308 	and.w	r3, r3, #8
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d07d      	beq.n	8007ad2 <f_open+0x29e>
				dw = GET_FATTIME();				/* Created time */
 80079d6:	f7fd fc7f 	bl	80052d8 <get_fattime>
 80079da:	f8c7 0248 	str.w	r0, [r7, #584]	; 0x248
				ST_DWORD(dir + DIR_CrtTime, dw);
 80079de:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80079e2:	330e      	adds	r3, #14
 80079e4:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 80079e8:	601a      	str	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 80079ea:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80079ee:	330b      	adds	r3, #11
 80079f0:	2200      	movs	r2, #0
 80079f2:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 80079f4:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80079f8:	331c      	adds	r3, #28
 80079fa:	2200      	movs	r2, #0
 80079fc:	601a      	str	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 80079fe:	f107 031c 	add.w	r3, r7, #28
 8007a02:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007a06:	f8d7 1250 	ldr.w	r1, [r7, #592]	; 0x250
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f7fe fdc3 	bl	8006596 <ld_clust>
 8007a10:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
				st_clust(dir, 0);				/* cluster = 0 */
 8007a14:	2100      	movs	r1, #0
 8007a16:	f8d7 0250 	ldr.w	r0, [r7, #592]	; 0x250
 8007a1a:	f7fe fdd7 	bl	80065cc <st_clust>
				dj.fs->wflag = 1;
 8007a1e:	f107 031c 	add.w	r3, r7, #28
 8007a22:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007a26:	2201      	movs	r2, #1
 8007a28:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 8007a2c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d04e      	beq.n	8007ad2 <f_open+0x29e>
					dw = dj.fs->winsect;
 8007a34:	f107 031c 	add.w	r3, r7, #28
 8007a38:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007a3c:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 8007a40:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
					res = remove_chain(dj.fs, cl);
 8007a44:	f107 031c 	add.w	r3, r7, #28
 8007a48:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007a4c:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8007a50:	4618      	mov	r0, r3
 8007a52:	f7fe faa0 	bl	8005f96 <remove_chain>
 8007a56:	4603      	mov	r3, r0
 8007a58:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
					if (res == FR_OK) {
 8007a5c:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d136      	bne.n	8007ad2 <f_open+0x29e>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8007a64:	f107 031c 	add.w	r3, r7, #28
 8007a68:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007a6c:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8007a70:	3a01      	subs	r2, #1
 8007a72:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
						res = move_window(dj.fs, dw);
 8007a76:	f107 031c 	add.w	r3, r7, #28
 8007a7a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007a7e:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8007a82:	4618      	mov	r0, r3
 8007a84:	f7fe f857 	bl	8005b36 <move_window>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
 8007a8e:	e020      	b.n	8007ad2 <f_open+0x29e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8007a90:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d11c      	bne.n	8007ad2 <f_open+0x29e>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8007a98:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8007a9c:	330b      	adds	r3, #11
 8007a9e:	781b      	ldrb	r3, [r3, #0]
 8007aa0:	f003 0310 	and.w	r3, r3, #16
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d003      	beq.n	8007ab0 <f_open+0x27c>
					res = FR_NO_FILE;
 8007aa8:	2304      	movs	r3, #4
 8007aaa:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
 8007aae:	e010      	b.n	8007ad2 <f_open+0x29e>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8007ab0:	1dfb      	adds	r3, r7, #7
 8007ab2:	781b      	ldrb	r3, [r3, #0]
 8007ab4:	f003 0302 	and.w	r3, r3, #2
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d00a      	beq.n	8007ad2 <f_open+0x29e>
 8007abc:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8007ac0:	330b      	adds	r3, #11
 8007ac2:	781b      	ldrb	r3, [r3, #0]
 8007ac4:	f003 0301 	and.w	r3, r3, #1
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d002      	beq.n	8007ad2 <f_open+0x29e>
						res = FR_DENIED;
 8007acc:	2307      	movs	r3, #7
 8007ace:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
				}
			}
		}
		if (res == FR_OK) {
 8007ad2:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d13d      	bne.n	8007b56 <f_open+0x322>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007ada:	1dfb      	adds	r3, r7, #7
 8007adc:	781b      	ldrb	r3, [r3, #0]
 8007ade:	f003 0308 	and.w	r3, r3, #8
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d005      	beq.n	8007af2 <f_open+0x2be>
				mode |= FA__WRITTEN;
 8007ae6:	1dfb      	adds	r3, r7, #7
 8007ae8:	1dfa      	adds	r2, r7, #7
 8007aea:	7812      	ldrb	r2, [r2, #0]
 8007aec:	f042 0220 	orr.w	r2, r2, #32
 8007af0:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8007af2:	f107 031c 	add.w	r3, r7, #28
 8007af6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007afa:	f8d3 2230 	ldr.w	r2, [r3, #560]	; 0x230
 8007afe:	f107 030c 	add.w	r3, r7, #12
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			fp->dir_ptr = dir;
 8007b08:	f107 030c 	add.w	r3, r7, #12
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 8007b12:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007b16:	1dfb      	adds	r3, r7, #7
 8007b18:	781b      	ldrb	r3, [r3, #0]
 8007b1a:	f023 0301 	bic.w	r3, r3, #1
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	bf14      	ite	ne
 8007b22:	2301      	movne	r3, #1
 8007b24:	2300      	moveq	r3, #0
 8007b26:	b2db      	uxtb	r3, r3
 8007b28:	461a      	mov	r2, r3
 8007b2a:	f107 031c 	add.w	r3, r7, #28
 8007b2e:	4611      	mov	r1, r2
 8007b30:	4618      	mov	r0, r3
 8007b32:	f7fd fe95 	bl	8005860 <inc_lock>
 8007b36:	4602      	mov	r2, r0
 8007b38:	f107 030c 	add.w	r3, r7, #12
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 8007b42:	f107 030c 	add.w	r3, r7, #12
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d102      	bne.n	8007b56 <f_open+0x322>
 8007b50:	2302      	movs	r3, #2
 8007b52:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
				if (dir[DIR_Attr] & AM_DIR)	/* It is a directory */
					res = FR_NO_FILE;
			}
		}
#endif
		FREE_BUF();
 8007b56:	f8d7 024c 	ldr.w	r0, [r7, #588]	; 0x24c
 8007b5a:	f000 fefb 	bl	8008954 <ff_memfree>

		if (res == FR_OK) {
 8007b5e:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d14b      	bne.n	8007bfe <f_open+0x3ca>
			fp->flag = mode;					/* File access mode */
 8007b66:	f107 030c 	add.w	r3, r7, #12
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	1dfa      	adds	r2, r7, #7
 8007b6e:	7812      	ldrb	r2, [r2, #0]
 8007b70:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 8007b74:	f107 030c 	add.w	r3, r7, #12
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8007b80:	f107 031c 	add.w	r3, r7, #28
 8007b84:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007b88:	f8d7 1250 	ldr.w	r1, [r7, #592]	; 0x250
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f7fe fd02 	bl	8006596 <ld_clust>
 8007b92:	4602      	mov	r2, r0
 8007b94:	f107 030c 	add.w	r3, r7, #12
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8007b9e:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8007ba2:	331c      	adds	r3, #28
 8007ba4:	681a      	ldr	r2, [r3, #0]
 8007ba6:	f107 030c 	add.w	r3, r7, #12
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->fptr = 0;						/* File pointer */
 8007bb0:	f107 030c 	add.w	r3, r7, #12
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			fp->dsect = 0;
 8007bbc:	f107 030c 	add.w	r3, r7, #12
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8007bc8:	f107 030c 	add.w	r3, r7, #12
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8007bd4:	f107 031c 	add.w	r3, r7, #28
 8007bd8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007bdc:	f107 030c 	add.w	r3, r7, #12
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			fp->id = fp->fs->id;
 8007be6:	f107 030c 	add.w	r3, r7, #12
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007bf0:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8007bf4:	f107 030c 	add.w	r3, r7, #12
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 8007bfe:	f107 031c 	add.w	r3, r7, #28
 8007c02:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007c06:	f897 2257 	ldrb.w	r2, [r7, #599]	; 0x257
 8007c0a:	4611      	mov	r1, r2
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f7fd fd77 	bl	8005700 <unlock_fs>
 8007c12:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	f507 7716 	add.w	r7, r7, #600	; 0x258
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}

08007c20 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b08c      	sub	sp, #48	; 0x30
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	60f8      	str	r0, [r7, #12]
 8007c28:	60b9      	str	r1, [r7, #8]
 8007c2a:	607a      	str	r2, [r7, #4]
 8007c2c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	2200      	movs	r2, #0
 8007c36:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 8007c38:	68f8      	ldr	r0, [r7, #12]
 8007c3a:	f7ff fd55 	bl	80076e8 <validate>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8007c42:	7ffb      	ldrb	r3, [r7, #31]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d009      	beq.n	8007c5c <f_read+0x3c>
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007c4e:	7ffa      	ldrb	r2, [r7, #31]
 8007c50:	4611      	mov	r1, r2
 8007c52:	4618      	mov	r0, r3
 8007c54:	f7fd fd54 	bl	8005700 <unlock_fs>
 8007c58:	7ffb      	ldrb	r3, [r7, #31]
 8007c5a:	e192      	b.n	8007f82 <f_read+0x362>
	if (fp->err)								/* Check error */
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d00d      	beq.n	8007c82 <f_read+0x62>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8007c72:	4619      	mov	r1, r3
 8007c74:	4610      	mov	r0, r2
 8007c76:	f7fd fd43 	bl	8005700 <unlock_fs>
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8007c80:	e17f      	b.n	8007f82 <f_read+0x362>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007c88:	f003 0301 	and.w	r3, r3, #1
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d108      	bne.n	8007ca2 <f_read+0x82>
		LEAVE_FF(fp->fs, FR_DENIED);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007c96:	2107      	movs	r1, #7
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f7fd fd31 	bl	8005700 <unlock_fs>
 8007c9e:	2307      	movs	r3, #7
 8007ca0:	e16f      	b.n	8007f82 <f_read+0x362>
	remain = fp->fsize - fp->fptr;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007cae:	1ad3      	subs	r3, r2, r3
 8007cb0:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8007cb2:	687a      	ldr	r2, [r7, #4]
 8007cb4:	69bb      	ldr	r3, [r7, #24]
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	f240 8157 	bls.w	8007f6a <f_read+0x34a>
 8007cbc:	69bb      	ldr	r3, [r7, #24]
 8007cbe:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8007cc0:	e153      	b.n	8007f6a <f_read+0x34a>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007cc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	f040 811c 	bne.w	8007f0a <f_read+0x2ea>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007cd8:	0a5b      	lsrs	r3, r3, #9
 8007cda:	b2da      	uxtb	r2, r3
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007ce2:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8007ce6:	3b01      	subs	r3, #1
 8007ce8:	b2db      	uxtb	r3, r3
 8007cea:	4013      	ands	r3, r2
 8007cec:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 8007cee:	7dfb      	ldrb	r3, [r7, #23]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d147      	bne.n	8007d84 <f_read+0x164>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d104      	bne.n	8007d08 <f_read+0xe8>
					clst = fp->sclust;			/* Follow from the origin */
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007d04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d06:	e018      	b.n	8007d3a <f_read+0x11a>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d008      	beq.n	8007d24 <f_read+0x104>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007d18:	4619      	mov	r1, r3
 8007d1a:	68f8      	ldr	r0, [r7, #12]
 8007d1c:	f7fe fa32 	bl	8006184 <clmt_clust>
 8007d20:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007d22:	e00a      	b.n	8007d3a <f_read+0x11a>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007d30:	4619      	mov	r1, r3
 8007d32:	4610      	mov	r0, r2
 8007d34:	f7fd ffb3 	bl	8005c9e <get_fat>
 8007d38:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 8007d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d3c:	2b01      	cmp	r3, #1
 8007d3e:	d80c      	bhi.n	8007d5a <f_read+0x13a>
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2202      	movs	r2, #2
 8007d44:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007d4e:	2102      	movs	r1, #2
 8007d50:	4618      	mov	r0, r3
 8007d52:	f7fd fcd5 	bl	8005700 <unlock_fs>
 8007d56:	2302      	movs	r3, #2
 8007d58:	e113      	b.n	8007f82 <f_read+0x362>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8007d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d60:	d10c      	bne.n	8007d7c <f_read+0x15c>
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	2201      	movs	r2, #1
 8007d66:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007d70:	2101      	movs	r1, #1
 8007d72:	4618      	mov	r0, r3
 8007d74:	f7fd fcc4 	bl	8005700 <unlock_fs>
 8007d78:	2301      	movs	r3, #1
 8007d7a:	e102      	b.n	8007f82 <f_read+0x362>
				fp->clust = clst;				/* Update current cluster */
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d80:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007d90:	4619      	mov	r1, r3
 8007d92:	4610      	mov	r0, r2
 8007d94:	f7fd ff62 	bl	8005c5c <clust2sect>
 8007d98:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d10c      	bne.n	8007dba <f_read+0x19a>
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	2202      	movs	r2, #2
 8007da4:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007dae:	2102      	movs	r1, #2
 8007db0:	4618      	mov	r0, r3
 8007db2:	f7fd fca5 	bl	8005700 <unlock_fs>
 8007db6:	2302      	movs	r3, #2
 8007db8:	e0e3      	b.n	8007f82 <f_read+0x362>
			sect += csect;
 8007dba:	7dfb      	ldrb	r3, [r7, #23]
 8007dbc:	693a      	ldr	r2, [r7, #16]
 8007dbe:	4413      	add	r3, r2
 8007dc0:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	0a5b      	lsrs	r3, r3, #9
 8007dc6:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 8007dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d04d      	beq.n	8007e6a <f_read+0x24a>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8007dce:	7dfa      	ldrb	r2, [r7, #23]
 8007dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd2:	4413      	add	r3, r2
 8007dd4:	68fa      	ldr	r2, [r7, #12]
 8007dd6:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8007dda:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d908      	bls.n	8007df4 <f_read+0x1d4>
					cc = fp->fs->csize - csect;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007de8:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8007dec:	461a      	mov	r2, r3
 8007dee:	7dfb      	ldrb	r3, [r7, #23]
 8007df0:	1ad3      	subs	r3, r2, r3
 8007df2:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007dfa:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8007dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e00:	693a      	ldr	r2, [r7, #16]
 8007e02:	6a39      	ldr	r1, [r7, #32]
 8007e04:	f7fd fb88 	bl	8005518 <disk_read>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d00c      	beq.n	8007e28 <f_read+0x208>
					ABORT(fp->fs, FR_DISK_ERR);
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	2201      	movs	r2, #1
 8007e12:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007e1c:	2101      	movs	r1, #1
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f7fd fc6e 	bl	8005700 <unlock_fs>
 8007e24:	2301      	movs	r3, #1
 8007e26:	e0ac      	b.n	8007f82 <f_read+0x362>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d015      	beq.n	8007e62 <f_read+0x242>
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8007e3c:	693b      	ldr	r3, [r7, #16]
 8007e3e:	1ad3      	subs	r3, r2, r3
 8007e40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e42:	429a      	cmp	r2, r3
 8007e44:	d90d      	bls.n	8007e62 <f_read+0x242>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	1ad3      	subs	r3, r2, r3
 8007e50:	025b      	lsls	r3, r3, #9
 8007e52:	6a3a      	ldr	r2, [r7, #32]
 8007e54:	4413      	add	r3, r2
 8007e56:	68f9      	ldr	r1, [r7, #12]
 8007e58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	f7fd fbb9 	bl	80055d4 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 8007e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e64:	025b      	lsls	r3, r3, #9
 8007e66:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 8007e68:	e069      	b.n	8007f3e <f_read+0x31e>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007e70:	693a      	ldr	r2, [r7, #16]
 8007e72:	429a      	cmp	r2, r3
 8007e74:	d045      	beq.n	8007f02 <f_read+0x2e2>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d024      	beq.n	8007ece <f_read+0x2ae>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007e8a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8007e8e:	68f9      	ldr	r1, [r7, #12]
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8007e96:	2301      	movs	r3, #1
 8007e98:	f7fd fb5e 	bl	8005558 <disk_write>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d00c      	beq.n	8007ebc <f_read+0x29c>
						ABORT(fp->fs, FR_DISK_ERR);
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2201      	movs	r2, #1
 8007ea6:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007eb0:	2101      	movs	r1, #1
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f7fd fc24 	bl	8005700 <unlock_fs>
 8007eb8:	2301      	movs	r3, #1
 8007eba:	e062      	b.n	8007f82 <f_read+0x362>
					fp->flag &= ~FA__DIRTY;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007ec2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ec6:	b2da      	uxtb	r2, r3
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007ed4:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8007ed8:	68f9      	ldr	r1, [r7, #12]
 8007eda:	2301      	movs	r3, #1
 8007edc:	693a      	ldr	r2, [r7, #16]
 8007ede:	f7fd fb1b 	bl	8005518 <disk_read>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d00c      	beq.n	8007f02 <f_read+0x2e2>
					ABORT(fp->fs, FR_DISK_ERR);
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2201      	movs	r2, #1
 8007eec:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007ef6:	2101      	movs	r1, #1
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f7fd fc01 	bl	8005700 <unlock_fs>
 8007efe:	2301      	movs	r3, #1
 8007f00:	e03f      	b.n	8007f82 <f_read+0x362>
			}
#endif
			fp->dsect = sect;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	693a      	ldr	r2, [r7, #16]
 8007f06:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007f10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f14:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8007f18:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 8007f1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	429a      	cmp	r2, r3
 8007f20:	d901      	bls.n	8007f26 <f_read+0x306>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007f2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f30:	68fa      	ldr	r2, [r7, #12]
 8007f32:	4413      	add	r3, r2
 8007f34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f36:	4619      	mov	r1, r3
 8007f38:	6a38      	ldr	r0, [r7, #32]
 8007f3a:	f7fd fb4b 	bl	80055d4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8007f3e:	6a3a      	ldr	r2, [r7, #32]
 8007f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f42:	4413      	add	r3, r2
 8007f44:	623b      	str	r3, [r7, #32]
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f4e:	441a      	add	r2, r3
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	681a      	ldr	r2, [r3, #0]
 8007f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f5c:	441a      	add	r2, r3
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	601a      	str	r2, [r3, #0]
 8007f62:	687a      	ldr	r2, [r7, #4]
 8007f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f66:	1ad3      	subs	r3, r2, r3
 8007f68:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	f47f aea8 	bne.w	8007cc2 <f_read+0xa2>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007f78:	2100      	movs	r1, #0
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f7fd fbc0 	bl	8005700 <unlock_fs>
 8007f80:	2300      	movs	r3, #0
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3730      	adds	r7, #48	; 0x30
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}

08007f8a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8007f8a:	b580      	push	{r7, lr}
 8007f8c:	b08a      	sub	sp, #40	; 0x28
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	60f8      	str	r0, [r7, #12]
 8007f92:	60b9      	str	r1, [r7, #8]
 8007f94:	607a      	str	r2, [r7, #4]
 8007f96:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8007fa2:	68f8      	ldr	r0, [r7, #12]
 8007fa4:	f7ff fba0 	bl	80076e8 <validate>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8007fac:	7dfb      	ldrb	r3, [r7, #23]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d009      	beq.n	8007fc6 <f_write+0x3c>
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007fb8:	7dfa      	ldrb	r2, [r7, #23]
 8007fba:	4611      	mov	r1, r2
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f7fd fb9f 	bl	8005700 <unlock_fs>
 8007fc2:	7dfb      	ldrb	r3, [r7, #23]
 8007fc4:	e1d4      	b.n	8008370 <f_write+0x3e6>
	if (fp->err)							/* Check error */
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d00d      	beq.n	8007fec <f_write+0x62>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8007fdc:	4619      	mov	r1, r3
 8007fde:	4610      	mov	r0, r2
 8007fe0:	f7fd fb8e 	bl	8005700 <unlock_fs>
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8007fea:	e1c1      	b.n	8008370 <f_write+0x3e6>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007ff2:	f003 0302 	and.w	r3, r3, #2
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d108      	bne.n	800800c <f_write+0x82>
		LEAVE_FF(fp->fs, FR_DENIED);
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008000:	2107      	movs	r1, #7
 8008002:	4618      	mov	r0, r3
 8008004:	f7fd fb7c 	bl	8005700 <unlock_fs>
 8008008:	2307      	movs	r3, #7
 800800a:	e1b1      	b.n	8008370 <f_write+0x3e6>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	441a      	add	r2, r3
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800801c:	429a      	cmp	r2, r3
 800801e:	f080 8182 	bcs.w	8008326 <f_write+0x39c>
 8008022:	2300      	movs	r3, #0
 8008024:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8008026:	e17e      	b.n	8008326 <f_write+0x39c>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800802e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008032:	2b00      	cmp	r3, #0
 8008034:	f040 813e 	bne.w	80082b4 <f_write+0x32a>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800803e:	0a5b      	lsrs	r3, r3, #9
 8008040:	b2da      	uxtb	r2, r3
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008048:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800804c:	3b01      	subs	r3, #1
 800804e:	b2db      	uxtb	r3, r3
 8008050:	4013      	ands	r3, r2
 8008052:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 8008054:	7dbb      	ldrb	r3, [r7, #22]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d15f      	bne.n	800811a <f_write+0x190>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8008060:	2b00      	cmp	r3, #0
 8008062:	d10f      	bne.n	8008084 <f_write+0xfa>
					clst = fp->sclust;		/* Follow from the origin */
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800806a:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 800806c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800806e:	2b00      	cmp	r3, #0
 8008070:	d121      	bne.n	80080b6 <f_write+0x12c>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008078:	2100      	movs	r1, #0
 800807a:	4618      	mov	r0, r3
 800807c:	f7fd ffe5 	bl	800604a <create_chain>
 8008080:	6278      	str	r0, [r7, #36]	; 0x24
 8008082:	e018      	b.n	80080b6 <f_write+0x12c>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800808a:	2b00      	cmp	r3, #0
 800808c:	d008      	beq.n	80080a0 <f_write+0x116>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8008094:	4619      	mov	r1, r3
 8008096:	68f8      	ldr	r0, [r7, #12]
 8008098:	f7fe f874 	bl	8006184 <clmt_clust>
 800809c:	6278      	str	r0, [r7, #36]	; 0x24
 800809e:	e00a      	b.n	80080b6 <f_write+0x12c>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80080ac:	4619      	mov	r1, r3
 80080ae:	4610      	mov	r0, r2
 80080b0:	f7fd ffcb 	bl	800604a <create_chain>
 80080b4:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80080b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	f000 8139 	beq.w	8008330 <f_write+0x3a6>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 80080be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	d10c      	bne.n	80080de <f_write+0x154>
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	2202      	movs	r2, #2
 80080c8:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80080d2:	2102      	movs	r1, #2
 80080d4:	4618      	mov	r0, r3
 80080d6:	f7fd fb13 	bl	8005700 <unlock_fs>
 80080da:	2302      	movs	r3, #2
 80080dc:	e148      	b.n	8008370 <f_write+0x3e6>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80080de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080e4:	d10c      	bne.n	8008100 <f_write+0x176>
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	2201      	movs	r2, #1
 80080ea:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80080f4:	2101      	movs	r1, #1
 80080f6:	4618      	mov	r0, r3
 80080f8:	f7fd fb02 	bl	8005700 <unlock_fs>
 80080fc:	2301      	movs	r3, #1
 80080fe:	e137      	b.n	8008370 <f_write+0x3e6>
				fp->clust = clst;			/* Update current cluster */
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008104:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800810e:	2b00      	cmp	r3, #0
 8008110:	d103      	bne.n	800811a <f_write+0x190>
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008116:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8008120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008124:	2b00      	cmp	r3, #0
 8008126:	d024      	beq.n	8008172 <f_write+0x1e8>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800812e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8008132:	68f9      	ldr	r1, [r7, #12]
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800813a:	2301      	movs	r3, #1
 800813c:	f7fd fa0c 	bl	8005558 <disk_write>
 8008140:	4603      	mov	r3, r0
 8008142:	2b00      	cmp	r3, #0
 8008144:	d00c      	beq.n	8008160 <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	2201      	movs	r2, #1
 800814a:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008154:	2101      	movs	r1, #1
 8008156:	4618      	mov	r0, r3
 8008158:	f7fd fad2 	bl	8005700 <unlock_fs>
 800815c:	2301      	movs	r3, #1
 800815e:	e107      	b.n	8008370 <f_write+0x3e6>
				fp->flag &= ~FA__DIRTY;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8008166:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800816a:	b2da      	uxtb	r2, r3
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800817e:	4619      	mov	r1, r3
 8008180:	4610      	mov	r0, r2
 8008182:	f7fd fd6b 	bl	8005c5c <clust2sect>
 8008186:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8008188:	693b      	ldr	r3, [r7, #16]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d10c      	bne.n	80081a8 <f_write+0x21e>
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	2202      	movs	r2, #2
 8008192:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800819c:	2102      	movs	r1, #2
 800819e:	4618      	mov	r0, r3
 80081a0:	f7fd faae 	bl	8005700 <unlock_fs>
 80081a4:	2302      	movs	r3, #2
 80081a6:	e0e3      	b.n	8008370 <f_write+0x3e6>
			sect += csect;
 80081a8:	7dbb      	ldrb	r3, [r7, #22]
 80081aa:	693a      	ldr	r2, [r7, #16]
 80081ac:	4413      	add	r3, r2
 80081ae:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	0a5b      	lsrs	r3, r3, #9
 80081b4:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80081b6:	69fb      	ldr	r3, [r7, #28]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d04f      	beq.n	800825c <f_write+0x2d2>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 80081bc:	7dba      	ldrb	r2, [r7, #22]
 80081be:	69fb      	ldr	r3, [r7, #28]
 80081c0:	4413      	add	r3, r2
 80081c2:	68fa      	ldr	r2, [r7, #12]
 80081c4:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 80081c8:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d908      	bls.n	80081e2 <f_write+0x258>
					cc = fp->fs->csize - csect;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80081d6:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80081da:	461a      	mov	r2, r3
 80081dc:	7dbb      	ldrb	r3, [r7, #22]
 80081de:	1ad3      	subs	r3, r2, r3
 80081e0:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80081e8:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80081ec:	69fb      	ldr	r3, [r7, #28]
 80081ee:	693a      	ldr	r2, [r7, #16]
 80081f0:	69b9      	ldr	r1, [r7, #24]
 80081f2:	f7fd f9b1 	bl	8005558 <disk_write>
 80081f6:	4603      	mov	r3, r0
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d00c      	beq.n	8008216 <f_write+0x28c>
					ABORT(fp->fs, FR_DISK_ERR);
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	2201      	movs	r2, #1
 8008200:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800820a:	2101      	movs	r1, #1
 800820c:	4618      	mov	r0, r3
 800820e:	f7fd fa77 	bl	8005700 <unlock_fs>
 8008212:	2301      	movs	r3, #1
 8008214:	e0ac      	b.n	8008370 <f_write+0x3e6>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	1ad3      	subs	r3, r2, r3
 8008220:	69fa      	ldr	r2, [r7, #28]
 8008222:	429a      	cmp	r2, r3
 8008224:	d916      	bls.n	8008254 <f_write+0x2ca>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8008226:	68f8      	ldr	r0, [r7, #12]
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	1ad3      	subs	r3, r2, r3
 8008232:	025b      	lsls	r3, r3, #9
 8008234:	69ba      	ldr	r2, [r7, #24]
 8008236:	4413      	add	r3, r2
 8008238:	f44f 7200 	mov.w	r2, #512	; 0x200
 800823c:	4619      	mov	r1, r3
 800823e:	f7fd f9c9 	bl	80055d4 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8008248:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800824c:	b2da      	uxtb	r2, r3
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8008254:	69fb      	ldr	r3, [r7, #28]
 8008256:	025b      	lsls	r3, r3, #9
 8008258:	623b      	str	r3, [r7, #32]
				continue;
 800825a:	e04e      	b.n	80082fa <f_write+0x370>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008262:	693a      	ldr	r2, [r7, #16]
 8008264:	429a      	cmp	r2, r3
 8008266:	d021      	beq.n	80082ac <f_write+0x322>
				if (fp->fptr < fp->fsize &&
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8008274:	429a      	cmp	r2, r3
 8008276:	d219      	bcs.n	80082ac <f_write+0x322>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800827e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8008282:	68f9      	ldr	r1, [r7, #12]
 8008284:	2301      	movs	r3, #1
 8008286:	693a      	ldr	r2, [r7, #16]
 8008288:	f7fd f946 	bl	8005518 <disk_read>
 800828c:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 800828e:	2b00      	cmp	r3, #0
 8008290:	d00c      	beq.n	80082ac <f_write+0x322>
						ABORT(fp->fs, FR_DISK_ERR);
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	2201      	movs	r2, #1
 8008296:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80082a0:	2101      	movs	r1, #1
 80082a2:	4618      	mov	r0, r3
 80082a4:	f7fd fa2c 	bl	8005700 <unlock_fs>
 80082a8:	2301      	movs	r3, #1
 80082aa:	e061      	b.n	8008370 <f_write+0x3e6>
			}
#endif
			fp->dsect = sect;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	693a      	ldr	r2, [r7, #16]
 80082b0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80082ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082be:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80082c2:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 80082c4:	6a3a      	ldr	r2, [r7, #32]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	429a      	cmp	r2, r3
 80082ca:	d901      	bls.n	80082d0 <f_write+0x346>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80082d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082da:	68fa      	ldr	r2, [r7, #12]
 80082dc:	4413      	add	r3, r2
 80082de:	6a3a      	ldr	r2, [r7, #32]
 80082e0:	69b9      	ldr	r1, [r7, #24]
 80082e2:	4618      	mov	r0, r3
 80082e4:	f7fd f976 	bl	80055d4 <mem_cpy>
		fp->flag |= FA__DIRTY;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80082ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082f2:	b2da      	uxtb	r2, r3
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 80082fa:	69ba      	ldr	r2, [r7, #24]
 80082fc:	6a3b      	ldr	r3, [r7, #32]
 80082fe:	4413      	add	r3, r2
 8008300:	61bb      	str	r3, [r7, #24]
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008308:	6a3b      	ldr	r3, [r7, #32]
 800830a:	441a      	add	r2, r3
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	681a      	ldr	r2, [r3, #0]
 8008316:	6a3b      	ldr	r3, [r7, #32]
 8008318:	441a      	add	r2, r3
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	601a      	str	r2, [r3, #0]
 800831e:	687a      	ldr	r2, [r7, #4]
 8008320:	6a3b      	ldr	r3, [r7, #32]
 8008322:	1ad3      	subs	r3, r2, r3
 8008324:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2b00      	cmp	r3, #0
 800832a:	f47f ae7d 	bne.w	8008028 <f_write+0x9e>
 800832e:	e000      	b.n	8008332 <f_write+0x3a8>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008330:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800833e:	429a      	cmp	r2, r3
 8008340:	d905      	bls.n	800834e <f_write+0x3c4>
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8008354:	f043 0320 	orr.w	r3, r3, #32
 8008358:	b2da      	uxtb	r2, r3
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206

	LEAVE_FF(fp->fs, FR_OK);
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008366:	2100      	movs	r1, #0
 8008368:	4618      	mov	r0, r3
 800836a:	f7fd f9c9 	bl	8005700 <unlock_fs>
 800836e:	2300      	movs	r3, #0
}
 8008370:	4618      	mov	r0, r3
 8008372:	3728      	adds	r7, #40	; 0x28
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}

08008378 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b086      	sub	sp, #24
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f7ff f9b1 	bl	80076e8 <validate>
 8008386:	4603      	mov	r3, r0
 8008388:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800838a:	7dfb      	ldrb	r3, [r7, #23]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d179      	bne.n	8008484 <f_sync+0x10c>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8008396:	f003 0320 	and.w	r3, r3, #32
 800839a:	2b00      	cmp	r3, #0
 800839c:	d072      	beq.n	8008484 <f_sync+0x10c>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80083a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d020      	beq.n	80083ee <f_sync+0x76>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80083b2:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80083b6:	6879      	ldr	r1, [r7, #4]
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80083be:	2301      	movs	r3, #1
 80083c0:	f7fd f8ca 	bl	8005558 <disk_write>
 80083c4:	4603      	mov	r3, r0
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d008      	beq.n	80083dc <f_sync+0x64>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80083d0:	2101      	movs	r1, #1
 80083d2:	4618      	mov	r0, r3
 80083d4:	f7fd f994 	bl	8005700 <unlock_fs>
 80083d8:	2301      	movs	r3, #1
 80083da:	e05c      	b.n	8008496 <f_sync+0x11e>
				fp->flag &= ~FA__DIRTY;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80083e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083e6:	b2da      	uxtb	r2, r3
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80083fa:	4619      	mov	r1, r3
 80083fc:	4610      	mov	r0, r2
 80083fe:	f7fd fb9a 	bl	8005b36 <move_window>
 8008402:	4603      	mov	r3, r0
 8008404:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8008406:	7dfb      	ldrb	r3, [r7, #23]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d13b      	bne.n	8008484 <f_sync+0x10c>
				dir = fp->dir_ptr;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8008412:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8008414:	693b      	ldr	r3, [r7, #16]
 8008416:	330b      	adds	r3, #11
 8008418:	781a      	ldrb	r2, [r3, #0]
 800841a:	693b      	ldr	r3, [r7, #16]
 800841c:	330b      	adds	r3, #11
 800841e:	f042 0220 	orr.w	r2, r2, #32
 8008422:	b2d2      	uxtb	r2, r2
 8008424:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8008426:	693b      	ldr	r3, [r7, #16]
 8008428:	331c      	adds	r3, #28
 800842a:	687a      	ldr	r2, [r7, #4]
 800842c:	f8d2 220c 	ldr.w	r2, [r2, #524]	; 0x20c
 8008430:	601a      	str	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008438:	4619      	mov	r1, r3
 800843a:	6938      	ldr	r0, [r7, #16]
 800843c:	f7fe f8c6 	bl	80065cc <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8008440:	f7fc ff4a 	bl	80052d8 <get_fattime>
 8008444:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	3316      	adds	r3, #22
 800844a:	68fa      	ldr	r2, [r7, #12]
 800844c:	601a      	str	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800844e:	693b      	ldr	r3, [r7, #16]
 8008450:	3312      	adds	r3, #18
 8008452:	2200      	movs	r2, #0
 8008454:	801a      	strh	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800845c:	f023 0320 	bic.w	r3, r3, #32
 8008460:	b2da      	uxtb	r2, r3
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				fp->fs->wflag = 1;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800846e:	2201      	movs	r2, #1
 8008470:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800847a:	4618      	mov	r0, r3
 800847c:	f7fd fb8a 	bl	8005b94 <sync_fs>
 8008480:	4603      	mov	r3, r0
 8008482:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800848a:	7dfa      	ldrb	r2, [r7, #23]
 800848c:	4611      	mov	r1, r2
 800848e:	4618      	mov	r0, r3
 8008490:	f7fd f936 	bl	8005700 <unlock_fs>
 8008494:	7dfb      	ldrb	r3, [r7, #23]
}
 8008496:	4618      	mov	r0, r3
 8008498:	3718      	adds	r7, #24
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}

0800849e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800849e:	b580      	push	{r7, lr}
 80084a0:	b084      	sub	sp, #16
 80084a2:	af00      	add	r7, sp, #0
 80084a4:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f7ff ff66 	bl	8008378 <f_sync>
 80084ac:	4603      	mov	r3, r0
 80084ae:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80084b0:	7bfb      	ldrb	r3, [r7, #15]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d11e      	bne.n	80084f4 <f_close+0x56>
#endif
	{
		res = validate(fp);				/* Lock volume */
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f7ff f916 	bl	80076e8 <validate>
 80084bc:	4603      	mov	r3, r0
 80084be:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80084c0:	7bfb      	ldrb	r3, [r7, #15]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d116      	bne.n	80084f4 <f_close+0x56>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80084cc:	60bb      	str	r3, [r7, #8]
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 80084d4:	4618      	mov	r0, r3
 80084d6:	f7fd fa79 	bl	80059cc <dec_lock>
 80084da:	4603      	mov	r3, r0
 80084dc:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80084de:	7bfb      	ldrb	r3, [r7, #15]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d103      	bne.n	80084ec <f_close+0x4e>
#endif
				fp->fs = 0;				/* Invalidate file object */
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2200      	movs	r2, #0
 80084e8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 80084ec:	2100      	movs	r1, #0
 80084ee:	68b8      	ldr	r0, [r7, #8]
 80084f0:	f7fd f906 	bl	8005700 <unlock_fs>
#endif
		}
	}
	return res;
 80084f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3710      	adds	r7, #16
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}
	...

08008500 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008500:	b480      	push	{r7}
 8008502:	b087      	sub	sp, #28
 8008504:	af00      	add	r7, sp, #0
 8008506:	60f8      	str	r0, [r7, #12]
 8008508:	60b9      	str	r1, [r7, #8]
 800850a:	4613      	mov	r3, r2
 800850c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800850e:	2301      	movs	r3, #1
 8008510:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008512:	2300      	movs	r3, #0
 8008514:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8008516:	4b1e      	ldr	r3, [pc, #120]	; (8008590 <FATFS_LinkDriverEx+0x90>)
 8008518:	7a5b      	ldrb	r3, [r3, #9]
 800851a:	b2db      	uxtb	r3, r3
 800851c:	2b01      	cmp	r3, #1
 800851e:	d831      	bhi.n	8008584 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008520:	4b1b      	ldr	r3, [pc, #108]	; (8008590 <FATFS_LinkDriverEx+0x90>)
 8008522:	7a5b      	ldrb	r3, [r3, #9]
 8008524:	b2db      	uxtb	r3, r3
 8008526:	461a      	mov	r2, r3
 8008528:	4b19      	ldr	r3, [pc, #100]	; (8008590 <FATFS_LinkDriverEx+0x90>)
 800852a:	2100      	movs	r1, #0
 800852c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800852e:	4b18      	ldr	r3, [pc, #96]	; (8008590 <FATFS_LinkDriverEx+0x90>)
 8008530:	7a5b      	ldrb	r3, [r3, #9]
 8008532:	b2db      	uxtb	r3, r3
 8008534:	4a16      	ldr	r2, [pc, #88]	; (8008590 <FATFS_LinkDriverEx+0x90>)
 8008536:	009b      	lsls	r3, r3, #2
 8008538:	4413      	add	r3, r2
 800853a:	68fa      	ldr	r2, [r7, #12]
 800853c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800853e:	4b14      	ldr	r3, [pc, #80]	; (8008590 <FATFS_LinkDriverEx+0x90>)
 8008540:	7a5b      	ldrb	r3, [r3, #9]
 8008542:	b2db      	uxtb	r3, r3
 8008544:	461a      	mov	r2, r3
 8008546:	4b12      	ldr	r3, [pc, #72]	; (8008590 <FATFS_LinkDriverEx+0x90>)
 8008548:	4413      	add	r3, r2
 800854a:	79fa      	ldrb	r2, [r7, #7]
 800854c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800854e:	4b10      	ldr	r3, [pc, #64]	; (8008590 <FATFS_LinkDriverEx+0x90>)
 8008550:	7a5b      	ldrb	r3, [r3, #9]
 8008552:	b2db      	uxtb	r3, r3
 8008554:	1c5a      	adds	r2, r3, #1
 8008556:	b2d1      	uxtb	r1, r2
 8008558:	4a0d      	ldr	r2, [pc, #52]	; (8008590 <FATFS_LinkDriverEx+0x90>)
 800855a:	7251      	strb	r1, [r2, #9]
 800855c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800855e:	7dbb      	ldrb	r3, [r7, #22]
 8008560:	3330      	adds	r3, #48	; 0x30
 8008562:	b2da      	uxtb	r2, r3
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	3301      	adds	r3, #1
 800856c:	223a      	movs	r2, #58	; 0x3a
 800856e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	3302      	adds	r3, #2
 8008574:	222f      	movs	r2, #47	; 0x2f
 8008576:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	3303      	adds	r3, #3
 800857c:	2200      	movs	r2, #0
 800857e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008580:	2300      	movs	r3, #0
 8008582:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8008584:	7dfb      	ldrb	r3, [r7, #23]
}
 8008586:	4618      	mov	r0, r3
 8008588:	371c      	adds	r7, #28
 800858a:	46bd      	mov	sp, r7
 800858c:	bc80      	pop	{r7}
 800858e:	4770      	bx	lr
 8008590:	200000b4 	.word	0x200000b4

08008594 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b082      	sub	sp, #8
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
 800859c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800859e:	2200      	movs	r2, #0
 80085a0:	6839      	ldr	r1, [r7, #0]
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f7ff ffac 	bl	8008500 <FATFS_LinkDriverEx>
 80085a8:	4603      	mov	r3, r0
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3708      	adds	r7, #8
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}
	...

080085b4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b082      	sub	sp, #8
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	4603      	mov	r3, r0
 80085bc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80085be:	4b0b      	ldr	r3, [pc, #44]	; (80085ec <SD_initialize+0x38>)
 80085c0:	2201      	movs	r2, #1
 80085c2:	701a      	strb	r2, [r3, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 80085c4:	f7fc fe90 	bl	80052e8 <BSP_SD_Init>
 80085c8:	4603      	mov	r3, r0
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d107      	bne.n	80085de <SD_initialize+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80085ce:	4b07      	ldr	r3, [pc, #28]	; (80085ec <SD_initialize+0x38>)
 80085d0:	781b      	ldrb	r3, [r3, #0]
 80085d2:	b2db      	uxtb	r3, r3
 80085d4:	f023 0301 	bic.w	r3, r3, #1
 80085d8:	b2da      	uxtb	r2, r3
 80085da:	4b04      	ldr	r3, [pc, #16]	; (80085ec <SD_initialize+0x38>)
 80085dc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80085de:	4b03      	ldr	r3, [pc, #12]	; (80085ec <SD_initialize+0x38>)
 80085e0:	781b      	ldrb	r3, [r3, #0]
 80085e2:	b2db      	uxtb	r3, r3
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3708      	adds	r7, #8
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}
 80085ec:	20000009 	.word	0x20000009

080085f0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b082      	sub	sp, #8
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	4603      	mov	r3, r0
 80085f8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80085fa:	4b0b      	ldr	r3, [pc, #44]	; (8008628 <SD_status+0x38>)
 80085fc:	2201      	movs	r2, #1
 80085fe:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8008600:	f7fc fed4 	bl	80053ac <BSP_SD_GetCardState>
 8008604:	4603      	mov	r3, r0
 8008606:	2b00      	cmp	r3, #0
 8008608:	d107      	bne.n	800861a <SD_status+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800860a:	4b07      	ldr	r3, [pc, #28]	; (8008628 <SD_status+0x38>)
 800860c:	781b      	ldrb	r3, [r3, #0]
 800860e:	b2db      	uxtb	r3, r3
 8008610:	f023 0301 	bic.w	r3, r3, #1
 8008614:	b2da      	uxtb	r2, r3
 8008616:	4b04      	ldr	r3, [pc, #16]	; (8008628 <SD_status+0x38>)
 8008618:	701a      	strb	r2, [r3, #0]
  }
  
  return Stat;
 800861a:	4b03      	ldr	r3, [pc, #12]	; (8008628 <SD_status+0x38>)
 800861c:	781b      	ldrb	r3, [r3, #0]
 800861e:	b2db      	uxtb	r3, r3
}
 8008620:	4618      	mov	r0, r3
 8008622:	3708      	adds	r7, #8
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}
 8008628:	20000009 	.word	0x20000009

0800862c <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b086      	sub	sp, #24
 8008630:	af00      	add	r7, sp, #0
 8008632:	60b9      	str	r1, [r7, #8]
 8008634:	607a      	str	r2, [r7, #4]
 8008636:	603b      	str	r3, [r7, #0]
 8008638:	4603      	mov	r3, r0
 800863a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800863c:	2301      	movs	r3, #1
 800863e:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 8008640:	4b0f      	ldr	r3, [pc, #60]	; (8008680 <SD_read+0x54>)
 8008642:	613b      	str	r3, [r7, #16]

  if(BSP_SD_ReadBlocks((uint32_t*)buff, 
 8008644:	4b0f      	ldr	r3, [pc, #60]	; (8008684 <SD_read+0x58>)
 8008646:	683a      	ldr	r2, [r7, #0]
 8008648:	6879      	ldr	r1, [r7, #4]
 800864a:	68b8      	ldr	r0, [r7, #8]
 800864c:	f7fc fe72 	bl	8005334 <BSP_SD_ReadBlocks>
 8008650:	4603      	mov	r3, r0
 8008652:	2b00      	cmp	r3, #0
 8008654:	d10e      	bne.n	8008674 <SD_read+0x48>
                       (uint32_t) (sector), 
                       count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 8008656:	e006      	b.n	8008666 <SD_read+0x3a>
    {
      if (timeout-- == 0)
 8008658:	693b      	ldr	r3, [r7, #16]
 800865a:	1e5a      	subs	r2, r3, #1
 800865c:	613a      	str	r2, [r7, #16]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d101      	bne.n	8008666 <SD_read+0x3a>
      {
        return RES_ERROR;
 8008662:	2301      	movs	r3, #1
 8008664:	e007      	b.n	8008676 <SD_read+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 8008666:	f7fc fea1 	bl	80053ac <BSP_SD_GetCardState>
 800866a:	4603      	mov	r3, r0
 800866c:	2b00      	cmp	r3, #0
 800866e:	d1f3      	bne.n	8008658 <SD_read+0x2c>
      }
    }
    res = RES_OK;
 8008670:	2300      	movs	r3, #0
 8008672:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 8008674:	7dfb      	ldrb	r3, [r7, #23]
}
 8008676:	4618      	mov	r0, r3
 8008678:	3718      	adds	r7, #24
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}
 800867e:	bf00      	nop
 8008680:	000186a0 	.word	0x000186a0
 8008684:	05f5e100 	.word	0x05f5e100

08008688 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b086      	sub	sp, #24
 800868c:	af00      	add	r7, sp, #0
 800868e:	60b9      	str	r1, [r7, #8]
 8008690:	607a      	str	r2, [r7, #4]
 8008692:	603b      	str	r3, [r7, #0]
 8008694:	4603      	mov	r3, r0
 8008696:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008698:	2301      	movs	r3, #1
 800869a:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 800869c:	4b0f      	ldr	r3, [pc, #60]	; (80086dc <SD_write+0x54>)
 800869e:	613b      	str	r3, [r7, #16]

  if(BSP_SD_WriteBlocks((uint32_t*)buff, 
 80086a0:	4b0f      	ldr	r3, [pc, #60]	; (80086e0 <SD_write+0x58>)
 80086a2:	683a      	ldr	r2, [r7, #0]
 80086a4:	6879      	ldr	r1, [r7, #4]
 80086a6:	68b8      	ldr	r0, [r7, #8]
 80086a8:	f7fc fe62 	bl	8005370 <BSP_SD_WriteBlocks>
 80086ac:	4603      	mov	r3, r0
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d10e      	bne.n	80086d0 <SD_write+0x48>
                        (uint32_t)(sector), 
                        count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 80086b2:	e006      	b.n	80086c2 <SD_write+0x3a>
    {
      if (timeout-- == 0)
 80086b4:	693b      	ldr	r3, [r7, #16]
 80086b6:	1e5a      	subs	r2, r3, #1
 80086b8:	613a      	str	r2, [r7, #16]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d101      	bne.n	80086c2 <SD_write+0x3a>
      {
        return RES_ERROR;
 80086be:	2301      	movs	r3, #1
 80086c0:	e007      	b.n	80086d2 <SD_write+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 80086c2:	f7fc fe73 	bl	80053ac <BSP_SD_GetCardState>
 80086c6:	4603      	mov	r3, r0
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d1f3      	bne.n	80086b4 <SD_write+0x2c>
      }
    }    
    res = RES_OK;
 80086cc:	2300      	movs	r3, #0
 80086ce:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 80086d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3718      	adds	r7, #24
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}
 80086da:	bf00      	nop
 80086dc:	000186a0 	.word	0x000186a0
 80086e0:	05f5e100 	.word	0x05f5e100

080086e4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b08c      	sub	sp, #48	; 0x30
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	4603      	mov	r3, r0
 80086ec:	603a      	str	r2, [r7, #0]
 80086ee:	71fb      	strb	r3, [r7, #7]
 80086f0:	460b      	mov	r3, r1
 80086f2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80086f4:	2301      	movs	r3, #1
 80086f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80086fa:	4b24      	ldr	r3, [pc, #144]	; (800878c <SD_ioctl+0xa8>)
 80086fc:	781b      	ldrb	r3, [r3, #0]
 80086fe:	b2db      	uxtb	r3, r3
 8008700:	f003 0301 	and.w	r3, r3, #1
 8008704:	2b00      	cmp	r3, #0
 8008706:	d001      	beq.n	800870c <SD_ioctl+0x28>
 8008708:	2303      	movs	r3, #3
 800870a:	e03b      	b.n	8008784 <SD_ioctl+0xa0>
  
  switch (cmd)
 800870c:	79bb      	ldrb	r3, [r7, #6]
 800870e:	2b03      	cmp	r3, #3
 8008710:	d833      	bhi.n	800877a <SD_ioctl+0x96>
 8008712:	a201      	add	r2, pc, #4	; (adr r2, 8008718 <SD_ioctl+0x34>)
 8008714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008718:	08008729 	.word	0x08008729
 800871c:	08008731 	.word	0x08008731
 8008720:	08008749 	.word	0x08008749
 8008724:	08008763 	.word	0x08008763
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8008728:	2300      	movs	r3, #0
 800872a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800872e:	e027      	b.n	8008780 <SD_ioctl+0x9c>
  
  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8008730:	f107 030c 	add.w	r3, r7, #12
 8008734:	4618      	mov	r0, r3
 8008736:	f7fc fe49 	bl	80053cc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800873a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008740:	2300      	movs	r3, #0
 8008742:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008746:	e01b      	b.n	8008780 <SD_ioctl+0x9c>
  
  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008748:	f107 030c 	add.w	r3, r7, #12
 800874c:	4618      	mov	r0, r3
 800874e:	f7fc fe3d 	bl	80053cc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8008752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008754:	b29a      	uxth	r2, r3
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800875a:	2300      	movs	r3, #0
 800875c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008760:	e00e      	b.n	8008780 <SD_ioctl+0x9c>
  
  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008762:	f107 030c 	add.w	r3, r7, #12
 8008766:	4618      	mov	r0, r3
 8008768:	f7fc fe30 	bl	80053cc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize;
 800876c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008772:	2300      	movs	r3, #0
 8008774:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008778:	e002      	b.n	8008780 <SD_ioctl+0x9c>
  
  default:
    res = RES_PARERR;
 800877a:	2304      	movs	r3, #4
 800877c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }
  
  return res;
 8008780:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008784:	4618      	mov	r0, r3
 8008786:	3730      	adds	r7, #48	; 0x30
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}
 800878c:	20000009 	.word	0x20000009

08008790 <ff_convert>:

WCHAR ff_convert (	/* Converted code, 0 means conversion error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 8008790:	b480      	push	{r7}
 8008792:	b089      	sub	sp, #36	; 0x24
 8008794:	af00      	add	r7, sp, #0
 8008796:	4603      	mov	r3, r0
 8008798:	6039      	str	r1, [r7, #0]
 800879a:	80fb      	strh	r3, [r7, #6]
	const WCHAR *p;
	WCHAR c;
	int i, n, li, hi;


	if (chr < 0x80) {	/* ASCII */
 800879c:	88fb      	ldrh	r3, [r7, #6]
 800879e:	2b7f      	cmp	r3, #127	; 0x7f
 80087a0:	d802      	bhi.n	80087a8 <ff_convert+0x18>
		c = chr;
 80087a2:	88fb      	ldrh	r3, [r7, #6]
 80087a4:	837b      	strh	r3, [r7, #26]
 80087a6:	e047      	b.n	8008838 <ff_convert+0xa8>
	} else {
		if (dir) {		/* OEMCP to unicode */
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d005      	beq.n	80087ba <ff_convert+0x2a>
			p = oem2uni;
 80087ae:	4b25      	ldr	r3, [pc, #148]	; (8008844 <ff_convert+0xb4>)
 80087b0:	61fb      	str	r3, [r7, #28]
			hi = sizeof oem2uni / 4 - 1;
 80087b2:	f244 2398 	movw	r3, #17048	; 0x4298
 80087b6:	60bb      	str	r3, [r7, #8]
 80087b8:	e004      	b.n	80087c4 <ff_convert+0x34>
		} else {		/* Unicode to OEMCP */
			p = uni2oem;
 80087ba:	4b23      	ldr	r3, [pc, #140]	; (8008848 <ff_convert+0xb8>)
 80087bc:	61fb      	str	r3, [r7, #28]
			hi = sizeof uni2oem / 4 - 1;
 80087be:	f244 2398 	movw	r3, #17048	; 0x4298
 80087c2:	60bb      	str	r3, [r7, #8]
		}
		li = 0;
 80087c4:	2300      	movs	r3, #0
 80087c6:	60fb      	str	r3, [r7, #12]
		for (n = 16; n; n--) {
 80087c8:	2310      	movs	r3, #16
 80087ca:	613b      	str	r3, [r7, #16]
 80087cc:	e023      	b.n	8008816 <ff_convert+0x86>
			i = li + (hi - li) / 2;
 80087ce:	68ba      	ldr	r2, [r7, #8]
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	1ad3      	subs	r3, r2, r3
 80087d4:	0fda      	lsrs	r2, r3, #31
 80087d6:	4413      	add	r3, r2
 80087d8:	105b      	asrs	r3, r3, #1
 80087da:	461a      	mov	r2, r3
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	4413      	add	r3, r2
 80087e0:	617b      	str	r3, [r7, #20]
			if (chr == p[i * 2]) break;
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	009b      	lsls	r3, r3, #2
 80087e6:	461a      	mov	r2, r3
 80087e8:	69fb      	ldr	r3, [r7, #28]
 80087ea:	4413      	add	r3, r2
 80087ec:	881b      	ldrh	r3, [r3, #0]
 80087ee:	88fa      	ldrh	r2, [r7, #6]
 80087f0:	429a      	cmp	r2, r3
 80087f2:	d014      	beq.n	800881e <ff_convert+0x8e>
			if (chr > p[i * 2])
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	009b      	lsls	r3, r3, #2
 80087f8:	461a      	mov	r2, r3
 80087fa:	69fb      	ldr	r3, [r7, #28]
 80087fc:	4413      	add	r3, r2
 80087fe:	881b      	ldrh	r3, [r3, #0]
 8008800:	88fa      	ldrh	r2, [r7, #6]
 8008802:	429a      	cmp	r2, r3
 8008804:	d902      	bls.n	800880c <ff_convert+0x7c>
				li = i;
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	60fb      	str	r3, [r7, #12]
 800880a:	e001      	b.n	8008810 <ff_convert+0x80>
			else
				hi = i;
 800880c:	697b      	ldr	r3, [r7, #20]
 800880e:	60bb      	str	r3, [r7, #8]
		for (n = 16; n; n--) {
 8008810:	693b      	ldr	r3, [r7, #16]
 8008812:	3b01      	subs	r3, #1
 8008814:	613b      	str	r3, [r7, #16]
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d1d8      	bne.n	80087ce <ff_convert+0x3e>
 800881c:	e000      	b.n	8008820 <ff_convert+0x90>
			if (chr == p[i * 2]) break;
 800881e:	bf00      	nop
		}
		c = n ? p[i * 2 + 1] : 0;
 8008820:	693b      	ldr	r3, [r7, #16]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d006      	beq.n	8008834 <ff_convert+0xa4>
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	009b      	lsls	r3, r3, #2
 800882a:	3302      	adds	r3, #2
 800882c:	69fa      	ldr	r2, [r7, #28]
 800882e:	4413      	add	r3, r2
 8008830:	881b      	ldrh	r3, [r3, #0]
 8008832:	e000      	b.n	8008836 <ff_convert+0xa6>
 8008834:	2300      	movs	r3, #0
 8008836:	837b      	strh	r3, [r7, #26]
	}

	return c;
 8008838:	8b7b      	ldrh	r3, [r7, #26]
}
 800883a:	4618      	mov	r0, r3
 800883c:	3724      	adds	r7, #36	; 0x24
 800883e:	46bd      	mov	sp, r7
 8008840:	bc80      	pop	{r7}
 8008842:	4770      	bx	lr
 8008844:	0801bc90 	.word	0x0801bc90
 8008848:	0800b22c 	.word	0x0800b22c

0800884c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 800884c:	b480      	push	{r7}
 800884e:	b085      	sub	sp, #20
 8008850:	af00      	add	r7, sp, #0
 8008852:	4603      	mov	r3, r0
 8008854:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 8008856:	2300      	movs	r3, #0
 8008858:	60fb      	str	r3, [r7, #12]
 800885a:	e002      	b.n	8008862 <ff_wtoupper+0x16>
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	3301      	adds	r3, #1
 8008860:	60fb      	str	r3, [r7, #12]
 8008862:	4a0f      	ldr	r2, [pc, #60]	; (80088a0 <ff_wtoupper+0x54>)
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d006      	beq.n	800887c <ff_wtoupper+0x30>
 800886e:	4a0c      	ldr	r2, [pc, #48]	; (80088a0 <ff_wtoupper+0x54>)
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008876:	88fa      	ldrh	r2, [r7, #6]
 8008878:	429a      	cmp	r2, r3
 800887a:	d1ef      	bne.n	800885c <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 800887c:	4a08      	ldr	r2, [pc, #32]	; (80088a0 <ff_wtoupper+0x54>)
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d004      	beq.n	8008892 <ff_wtoupper+0x46>
 8008888:	4a06      	ldr	r2, [pc, #24]	; (80088a4 <ff_wtoupper+0x58>)
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008890:	e000      	b.n	8008894 <ff_wtoupper+0x48>
 8008892:	88fb      	ldrh	r3, [r7, #6]
}
 8008894:	4618      	mov	r0, r3
 8008896:	3714      	adds	r7, #20
 8008898:	46bd      	mov	sp, r7
 800889a:	bc80      	pop	{r7}
 800889c:	4770      	bx	lr
 800889e:	bf00      	nop
 80088a0:	0802c6f4 	.word	0x0802c6f4
 80088a4:	0802c8d4 	.word	0x0802c8d4

080088a8 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* TRUE:Function succeeded, FALSE:Could not create due to any error */
	BYTE vol,			/* Corresponding logical drive being processed */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b084      	sub	sp, #16
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	4603      	mov	r3, r0
 80088b0:	6039      	str	r1, [r7, #0]
 80088b2:	71fb      	strb	r3, [r7, #7]
  int ret;
  
  osSemaphoreDef(SEM);
 80088b4:	2300      	movs	r3, #0
 80088b6:	60bb      	str	r3, [r7, #8]
  *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);		
 80088b8:	f107 0308 	add.w	r3, r7, #8
 80088bc:	2101      	movs	r1, #1
 80088be:	4618      	mov	r0, r3
 80088c0:	f000 f8bd 	bl	8008a3e <osSemaphoreCreate>
 80088c4:	4602      	mov	r2, r0
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	601a      	str	r2, [r3, #0]
  ret = (*sobj != NULL);
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	bf14      	ite	ne
 80088d2:	2301      	movne	r3, #1
 80088d4:	2300      	moveq	r3, #0
 80088d6:	b2db      	uxtb	r3, r3
 80088d8:	60fb      	str	r3, [r7, #12]
  
  return ret;
 80088da:	68fb      	ldr	r3, [r7, #12]
}
 80088dc:	4618      	mov	r0, r3
 80088de:	3710      	adds	r7, #16
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}

080088e4 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* TRUE:Function succeeded, FALSE:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b082      	sub	sp, #8
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
  osSemaphoreDelete (sobj);
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f000 f94f 	bl	8008b90 <osSemaphoreDelete>
  return 1;
 80088f2:	2301      	movs	r3, #1
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	3708      	adds	r7, #8
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}

080088fc <ff_req_grant>:
*/

int ff_req_grant (	/* TRUE:Got a grant to access the volume, FALSE:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b084      	sub	sp, #16
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8008904:	2300      	movs	r3, #0
 8008906:	60fb      	str	r3, [r7, #12]
  
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 8008908:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f000 f8bb 	bl	8008a88 <osSemaphoreWait>
 8008912:	4603      	mov	r3, r0
 8008914:	2b00      	cmp	r3, #0
 8008916:	d101      	bne.n	800891c <ff_req_grant+0x20>
  {
    ret = 1;
 8008918:	2301      	movs	r3, #1
 800891a:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 800891c:	68fb      	ldr	r3, [r7, #12]
}
 800891e:	4618      	mov	r0, r3
 8008920:	3710      	adds	r7, #16
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}

08008926 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8008926:	b580      	push	{r7, lr}
 8008928:	b082      	sub	sp, #8
 800892a:	af00      	add	r7, sp, #0
 800892c:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(sobj);
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f000 f8f8 	bl	8008b24 <osSemaphoreRelease>
}
 8008934:	bf00      	nop
 8008936:	3708      	adds	r7, #8
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}

0800893c <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b082      	sub	sp, #8
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
	return malloc(msize);	/* Allocate a new memory block with POSIX API */
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f002 fac7 	bl	800aed8 <malloc>
 800894a:	4603      	mov	r3, r0
}
 800894c:	4618      	mov	r0, r3
 800894e:	3708      	adds	r7, #8
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}

08008954 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b082      	sub	sp, #8
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
	free(mblock);	/* Discard the memory block with POSIX API */
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f002 fac3 	bl	800aee8 <free>
}
 8008962:	bf00      	nop
 8008964:	3708      	adds	r7, #8
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}

0800896a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800896a:	b480      	push	{r7}
 800896c:	b085      	sub	sp, #20
 800896e:	af00      	add	r7, sp, #0
 8008970:	4603      	mov	r3, r0
 8008972:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008974:	2300      	movs	r3, #0
 8008976:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008978:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800897c:	2b84      	cmp	r3, #132	; 0x84
 800897e:	d005      	beq.n	800898c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008980:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	4413      	add	r3, r2
 8008988:	3303      	adds	r3, #3
 800898a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800898c:	68fb      	ldr	r3, [r7, #12]
}
 800898e:	4618      	mov	r0, r3
 8008990:	3714      	adds	r7, #20
 8008992:	46bd      	mov	sp, r7
 8008994:	bc80      	pop	{r7}
 8008996:	4770      	bx	lr

08008998 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8008998:	b480      	push	{r7}
 800899a:	b083      	sub	sp, #12
 800899c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800899e:	f3ef 8305 	mrs	r3, IPSR
 80089a2:	607b      	str	r3, [r7, #4]
  return(result);
 80089a4:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	bf14      	ite	ne
 80089aa:	2301      	movne	r3, #1
 80089ac:	2300      	moveq	r3, #0
 80089ae:	b2db      	uxtb	r3, r3
}
 80089b0:	4618      	mov	r0, r3
 80089b2:	370c      	adds	r7, #12
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bc80      	pop	{r7}
 80089b8:	4770      	bx	lr

080089ba <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80089ba:	b580      	push	{r7, lr}
 80089bc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80089be:	f001 f879 	bl	8009ab4 <vTaskStartScheduler>
  
  return osOK;
 80089c2:	2300      	movs	r3, #0
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	bd80      	pop	{r7, pc}

080089c8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80089c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089ca:	b087      	sub	sp, #28
 80089cc:	af02      	add	r7, sp, #8
 80089ce:	6078      	str	r0, [r7, #4]
 80089d0:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	685c      	ldr	r4, [r3, #4]
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80089de:	b29e      	uxth	r6, r3
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80089e6:	4618      	mov	r0, r3
 80089e8:	f7ff ffbf 	bl	800896a <makeFreeRtosPriority>
 80089ec:	4602      	mov	r2, r0
 80089ee:	f107 030c 	add.w	r3, r7, #12
 80089f2:	9301      	str	r3, [sp, #4]
 80089f4:	9200      	str	r2, [sp, #0]
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	4632      	mov	r2, r6
 80089fa:	4629      	mov	r1, r5
 80089fc:	4620      	mov	r0, r4
 80089fe:	f000 fef1 	bl	80097e4 <xTaskCreate>
 8008a02:	4603      	mov	r3, r0
 8008a04:	2b01      	cmp	r3, #1
 8008a06:	d001      	beq.n	8008a0c <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	e000      	b.n	8008a0e <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3714      	adds	r7, #20
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008a16 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008a16:	b580      	push	{r7, lr}
 8008a18:	b084      	sub	sp, #16
 8008a1a:	af00      	add	r7, sp, #0
 8008a1c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d001      	beq.n	8008a2c <osDelay+0x16>
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	e000      	b.n	8008a2e <osDelay+0x18>
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f001 f80c 	bl	8009a4c <vTaskDelay>
  
  return osOK;
 8008a34:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3710      	adds	r7, #16
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}

08008a3e <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8008a3e:	b580      	push	{r7, lr}
 8008a40:	b084      	sub	sp, #16
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	6078      	str	r0, [r7, #4]
 8008a46:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	2b01      	cmp	r3, #1
 8008a4c:	d110      	bne.n	8008a70 <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 8008a4e:	2203      	movs	r2, #3
 8008a50:	2100      	movs	r1, #0
 8008a52:	2001      	movs	r0, #1
 8008a54:	f000 f9c6 	bl	8008de4 <xQueueGenericCreate>
 8008a58:	60f8      	str	r0, [r7, #12]
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d005      	beq.n	8008a6c <osSemaphoreCreate+0x2e>
 8008a60:	2300      	movs	r3, #0
 8008a62:	2200      	movs	r2, #0
 8008a64:	2100      	movs	r1, #0
 8008a66:	68f8      	ldr	r0, [r7, #12]
 8008a68:	f000 fa46 	bl	8008ef8 <xQueueGenericSend>
    return sema;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	e006      	b.n	8008a7e <osSemaphoreCreate+0x40>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	683a      	ldr	r2, [r7, #0]
 8008a74:	4611      	mov	r1, r2
 8008a76:	4618      	mov	r0, r3
 8008a78:	f000 fa0c 	bl	8008e94 <xQueueCreateCountingSemaphore>
 8008a7c:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3710      	adds	r7, #16
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}
	...

08008a88 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b084      	sub	sp, #16
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
 8008a90:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8008a92:	2300      	movs	r3, #0
 8008a94:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d101      	bne.n	8008aa0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8008a9c:	2380      	movs	r3, #128	; 0x80
 8008a9e:	e03a      	b.n	8008b16 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aaa:	d103      	bne.n	8008ab4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8008aac:	f04f 33ff 	mov.w	r3, #4294967295
 8008ab0:	60fb      	str	r3, [r7, #12]
 8008ab2:	e009      	b.n	8008ac8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d006      	beq.n	8008ac8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d101      	bne.n	8008ac8 <osSemaphoreWait+0x40>
      ticks = 1;
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8008ac8:	f7ff ff66 	bl	8008998 <inHandlerMode>
 8008acc:	4603      	mov	r3, r0
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d017      	beq.n	8008b02 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8008ad2:	f107 0308 	add.w	r3, r7, #8
 8008ad6:	461a      	mov	r2, r3
 8008ad8:	2100      	movs	r1, #0
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f000 fc98 	bl	8009410 <xQueueReceiveFromISR>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	d001      	beq.n	8008aea <osSemaphoreWait+0x62>
      return osErrorOS;
 8008ae6:	23ff      	movs	r3, #255	; 0xff
 8008ae8:	e015      	b.n	8008b16 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d011      	beq.n	8008b14 <osSemaphoreWait+0x8c>
 8008af0:	4b0b      	ldr	r3, [pc, #44]	; (8008b20 <osSemaphoreWait+0x98>)
 8008af2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008af6:	601a      	str	r2, [r3, #0]
 8008af8:	f3bf 8f4f 	dsb	sy
 8008afc:	f3bf 8f6f 	isb	sy
 8008b00:	e008      	b.n	8008b14 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8008b02:	68f9      	ldr	r1, [r7, #12]
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f000 fb7b 	bl	8009200 <xQueueSemaphoreTake>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	2b01      	cmp	r3, #1
 8008b0e:	d001      	beq.n	8008b14 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8008b10:	23ff      	movs	r3, #255	; 0xff
 8008b12:	e000      	b.n	8008b16 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8008b14:	2300      	movs	r3, #0
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3710      	adds	r7, #16
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}
 8008b1e:	bf00      	nop
 8008b20:	e000ed04 	.word	0xe000ed04

08008b24 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b084      	sub	sp, #16
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8008b30:	2300      	movs	r3, #0
 8008b32:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8008b34:	f7ff ff30 	bl	8008998 <inHandlerMode>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d016      	beq.n	8008b6c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8008b3e:	f107 0308 	add.w	r3, r7, #8
 8008b42:	4619      	mov	r1, r3
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f000 fad1 	bl	80090ec <xQueueGiveFromISR>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	2b01      	cmp	r3, #1
 8008b4e:	d001      	beq.n	8008b54 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8008b50:	23ff      	movs	r3, #255	; 0xff
 8008b52:	e017      	b.n	8008b84 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d013      	beq.n	8008b82 <osSemaphoreRelease+0x5e>
 8008b5a:	4b0c      	ldr	r3, [pc, #48]	; (8008b8c <osSemaphoreRelease+0x68>)
 8008b5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b60:	601a      	str	r2, [r3, #0]
 8008b62:	f3bf 8f4f 	dsb	sy
 8008b66:	f3bf 8f6f 	isb	sy
 8008b6a:	e00a      	b.n	8008b82 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	2200      	movs	r2, #0
 8008b70:	2100      	movs	r1, #0
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f000 f9c0 	bl	8008ef8 <xQueueGenericSend>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	2b01      	cmp	r3, #1
 8008b7c:	d001      	beq.n	8008b82 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8008b7e:	23ff      	movs	r3, #255	; 0xff
 8008b80:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8008b82:	68fb      	ldr	r3, [r7, #12]
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3710      	adds	r7, #16
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}
 8008b8c:	e000ed04 	.word	0xe000ed04

08008b90 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b082      	sub	sp, #8
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8008b98:	f7ff fefe 	bl	8008998 <inHandlerMode>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d001      	beq.n	8008ba6 <osSemaphoreDelete+0x16>
    return osErrorISR;
 8008ba2:	2382      	movs	r3, #130	; 0x82
 8008ba4:	e003      	b.n	8008bae <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f000 fcaf 	bl	800950a <vQueueDelete>

  return osOK; 
 8008bac:	2300      	movs	r3, #0
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3708      	adds	r7, #8
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}

08008bb6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008bb6:	b480      	push	{r7}
 8008bb8:	b083      	sub	sp, #12
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f103 0208 	add.w	r2, r3, #8
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f04f 32ff 	mov.w	r2, #4294967295
 8008bce:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f103 0208 	add.w	r2, r3, #8
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f103 0208 	add.w	r2, r3, #8
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2200      	movs	r2, #0
 8008be8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008bea:	bf00      	nop
 8008bec:	370c      	adds	r7, #12
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bc80      	pop	{r7}
 8008bf2:	4770      	bx	lr

08008bf4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b083      	sub	sp, #12
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2200      	movs	r2, #0
 8008c00:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008c02:	bf00      	nop
 8008c04:	370c      	adds	r7, #12
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bc80      	pop	{r7}
 8008c0a:	4770      	bx	lr

08008c0c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b085      	sub	sp, #20
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
 8008c14:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	685b      	ldr	r3, [r3, #4]
 8008c1a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	68fa      	ldr	r2, [r7, #12]
 8008c20:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	689a      	ldr	r2, [r3, #8]
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	689b      	ldr	r3, [r3, #8]
 8008c2e:	683a      	ldr	r2, [r7, #0]
 8008c30:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	683a      	ldr	r2, [r7, #0]
 8008c36:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	687a      	ldr	r2, [r7, #4]
 8008c3c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	1c5a      	adds	r2, r3, #1
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	601a      	str	r2, [r3, #0]
}
 8008c48:	bf00      	nop
 8008c4a:	3714      	adds	r7, #20
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bc80      	pop	{r7}
 8008c50:	4770      	bx	lr

08008c52 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008c52:	b480      	push	{r7}
 8008c54:	b085      	sub	sp, #20
 8008c56:	af00      	add	r7, sp, #0
 8008c58:	6078      	str	r0, [r7, #4]
 8008c5a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c68:	d103      	bne.n	8008c72 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	691b      	ldr	r3, [r3, #16]
 8008c6e:	60fb      	str	r3, [r7, #12]
 8008c70:	e00c      	b.n	8008c8c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	3308      	adds	r3, #8
 8008c76:	60fb      	str	r3, [r7, #12]
 8008c78:	e002      	b.n	8008c80 <vListInsert+0x2e>
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	60fb      	str	r3, [r7, #12]
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	68ba      	ldr	r2, [r7, #8]
 8008c88:	429a      	cmp	r2, r3
 8008c8a:	d2f6      	bcs.n	8008c7a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	685a      	ldr	r2, [r3, #4]
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	685b      	ldr	r3, [r3, #4]
 8008c98:	683a      	ldr	r2, [r7, #0]
 8008c9a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	68fa      	ldr	r2, [r7, #12]
 8008ca0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	683a      	ldr	r2, [r7, #0]
 8008ca6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	687a      	ldr	r2, [r7, #4]
 8008cac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	1c5a      	adds	r2, r3, #1
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	601a      	str	r2, [r3, #0]
}
 8008cb8:	bf00      	nop
 8008cba:	3714      	adds	r7, #20
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bc80      	pop	{r7}
 8008cc0:	4770      	bx	lr

08008cc2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008cc2:	b480      	push	{r7}
 8008cc4:	b085      	sub	sp, #20
 8008cc6:	af00      	add	r7, sp, #0
 8008cc8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	691b      	ldr	r3, [r3, #16]
 8008cce:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	685b      	ldr	r3, [r3, #4]
 8008cd4:	687a      	ldr	r2, [r7, #4]
 8008cd6:	6892      	ldr	r2, [r2, #8]
 8008cd8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	689b      	ldr	r3, [r3, #8]
 8008cde:	687a      	ldr	r2, [r7, #4]
 8008ce0:	6852      	ldr	r2, [r2, #4]
 8008ce2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	685b      	ldr	r3, [r3, #4]
 8008ce8:	687a      	ldr	r2, [r7, #4]
 8008cea:	429a      	cmp	r2, r3
 8008cec:	d103      	bne.n	8008cf6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	689a      	ldr	r2, [r3, #8]
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	1e5a      	subs	r2, r3, #1
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3714      	adds	r7, #20
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bc80      	pop	{r7}
 8008d12:	4770      	bx	lr

08008d14 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b084      	sub	sp, #16
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
 8008d1c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d109      	bne.n	8008d3c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d2c:	f383 8811 	msr	BASEPRI, r3
 8008d30:	f3bf 8f6f 	isb	sy
 8008d34:	f3bf 8f4f 	dsb	sy
 8008d38:	60bb      	str	r3, [r7, #8]
 8008d3a:	e7fe      	b.n	8008d3a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8008d3c:	f001 fdd4 	bl	800a8e8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681a      	ldr	r2, [r3, #0]
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d48:	68f9      	ldr	r1, [r7, #12]
 8008d4a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008d4c:	fb01 f303 	mul.w	r3, r1, r3
 8008d50:	441a      	add	r2, r3
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681a      	ldr	r2, [r3, #0]
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681a      	ldr	r2, [r3, #0]
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d6c:	3b01      	subs	r3, #1
 8008d6e:	68f9      	ldr	r1, [r7, #12]
 8008d70:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008d72:	fb01 f303 	mul.w	r3, r1, r3
 8008d76:	441a      	add	r2, r3
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	22ff      	movs	r2, #255	; 0xff
 8008d80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	22ff      	movs	r2, #255	; 0xff
 8008d88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d114      	bne.n	8008dbc <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	691b      	ldr	r3, [r3, #16]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d01a      	beq.n	8008dd0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	3310      	adds	r3, #16
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f001 f8d8 	bl	8009f54 <xTaskRemoveFromEventList>
 8008da4:	4603      	mov	r3, r0
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d012      	beq.n	8008dd0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008daa:	4b0d      	ldr	r3, [pc, #52]	; (8008de0 <xQueueGenericReset+0xcc>)
 8008dac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008db0:	601a      	str	r2, [r3, #0]
 8008db2:	f3bf 8f4f 	dsb	sy
 8008db6:	f3bf 8f6f 	isb	sy
 8008dba:	e009      	b.n	8008dd0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	3310      	adds	r3, #16
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f7ff fef8 	bl	8008bb6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	3324      	adds	r3, #36	; 0x24
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f7ff fef3 	bl	8008bb6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008dd0:	f001 fdb8 	bl	800a944 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008dd4:	2301      	movs	r3, #1
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3710      	adds	r7, #16
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}
 8008dde:	bf00      	nop
 8008de0:	e000ed04 	.word	0xe000ed04

08008de4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b08a      	sub	sp, #40	; 0x28
 8008de8:	af02      	add	r7, sp, #8
 8008dea:	60f8      	str	r0, [r7, #12]
 8008dec:	60b9      	str	r1, [r7, #8]
 8008dee:	4613      	mov	r3, r2
 8008df0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d109      	bne.n	8008e0c <xQueueGenericCreate+0x28>
 8008df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dfc:	f383 8811 	msr	BASEPRI, r3
 8008e00:	f3bf 8f6f 	isb	sy
 8008e04:	f3bf 8f4f 	dsb	sy
 8008e08:	613b      	str	r3, [r7, #16]
 8008e0a:	e7fe      	b.n	8008e0a <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d102      	bne.n	8008e18 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8008e12:	2300      	movs	r3, #0
 8008e14:	61fb      	str	r3, [r7, #28]
 8008e16:	e004      	b.n	8008e22 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	68ba      	ldr	r2, [r7, #8]
 8008e1c:	fb02 f303 	mul.w	r3, r2, r3
 8008e20:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8008e22:	69fb      	ldr	r3, [r7, #28]
 8008e24:	3348      	adds	r3, #72	; 0x48
 8008e26:	4618      	mov	r0, r3
 8008e28:	f001 fe54 	bl	800aad4 <pvPortMalloc>
 8008e2c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008e2e:	69bb      	ldr	r3, [r7, #24]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d00b      	beq.n	8008e4c <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8008e34:	69bb      	ldr	r3, [r7, #24]
 8008e36:	3348      	adds	r3, #72	; 0x48
 8008e38:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008e3a:	79fa      	ldrb	r2, [r7, #7]
 8008e3c:	69bb      	ldr	r3, [r7, #24]
 8008e3e:	9300      	str	r3, [sp, #0]
 8008e40:	4613      	mov	r3, r2
 8008e42:	697a      	ldr	r2, [r7, #20]
 8008e44:	68b9      	ldr	r1, [r7, #8]
 8008e46:	68f8      	ldr	r0, [r7, #12]
 8008e48:	f000 f805 	bl	8008e56 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8008e4c:	69bb      	ldr	r3, [r7, #24]
	}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	3720      	adds	r7, #32
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}

08008e56 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008e56:	b580      	push	{r7, lr}
 8008e58:	b084      	sub	sp, #16
 8008e5a:	af00      	add	r7, sp, #0
 8008e5c:	60f8      	str	r0, [r7, #12]
 8008e5e:	60b9      	str	r1, [r7, #8]
 8008e60:	607a      	str	r2, [r7, #4]
 8008e62:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d103      	bne.n	8008e72 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008e6a:	69bb      	ldr	r3, [r7, #24]
 8008e6c:	69ba      	ldr	r2, [r7, #24]
 8008e6e:	601a      	str	r2, [r3, #0]
 8008e70:	e002      	b.n	8008e78 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008e72:	69bb      	ldr	r3, [r7, #24]
 8008e74:	687a      	ldr	r2, [r7, #4]
 8008e76:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008e78:	69bb      	ldr	r3, [r7, #24]
 8008e7a:	68fa      	ldr	r2, [r7, #12]
 8008e7c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008e7e:	69bb      	ldr	r3, [r7, #24]
 8008e80:	68ba      	ldr	r2, [r7, #8]
 8008e82:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008e84:	2101      	movs	r1, #1
 8008e86:	69b8      	ldr	r0, [r7, #24]
 8008e88:	f7ff ff44 	bl	8008d14 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008e8c:	bf00      	nop
 8008e8e:	3710      	adds	r7, #16
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}

08008e94 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b086      	sub	sp, #24
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d109      	bne.n	8008eb8 <xQueueCreateCountingSemaphore+0x24>
 8008ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ea8:	f383 8811 	msr	BASEPRI, r3
 8008eac:	f3bf 8f6f 	isb	sy
 8008eb0:	f3bf 8f4f 	dsb	sy
 8008eb4:	613b      	str	r3, [r7, #16]
 8008eb6:	e7fe      	b.n	8008eb6 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008eb8:	683a      	ldr	r2, [r7, #0]
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	429a      	cmp	r2, r3
 8008ebe:	d909      	bls.n	8008ed4 <xQueueCreateCountingSemaphore+0x40>
 8008ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec4:	f383 8811 	msr	BASEPRI, r3
 8008ec8:	f3bf 8f6f 	isb	sy
 8008ecc:	f3bf 8f4f 	dsb	sy
 8008ed0:	60fb      	str	r3, [r7, #12]
 8008ed2:	e7fe      	b.n	8008ed2 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008ed4:	2202      	movs	r2, #2
 8008ed6:	2100      	movs	r1, #0
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f7ff ff83 	bl	8008de4 <xQueueGenericCreate>
 8008ede:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d002      	beq.n	8008eec <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008ee6:	697b      	ldr	r3, [r7, #20]
 8008ee8:	683a      	ldr	r2, [r7, #0]
 8008eea:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008eec:	697b      	ldr	r3, [r7, #20]
	}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3718      	adds	r7, #24
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}
	...

08008ef8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b08e      	sub	sp, #56	; 0x38
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	60f8      	str	r0, [r7, #12]
 8008f00:	60b9      	str	r1, [r7, #8]
 8008f02:	607a      	str	r2, [r7, #4]
 8008f04:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008f06:	2300      	movs	r3, #0
 8008f08:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d109      	bne.n	8008f28 <xQueueGenericSend+0x30>
 8008f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f18:	f383 8811 	msr	BASEPRI, r3
 8008f1c:	f3bf 8f6f 	isb	sy
 8008f20:	f3bf 8f4f 	dsb	sy
 8008f24:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f26:	e7fe      	b.n	8008f26 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d103      	bne.n	8008f36 <xQueueGenericSend+0x3e>
 8008f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d101      	bne.n	8008f3a <xQueueGenericSend+0x42>
 8008f36:	2301      	movs	r3, #1
 8008f38:	e000      	b.n	8008f3c <xQueueGenericSend+0x44>
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d109      	bne.n	8008f54 <xQueueGenericSend+0x5c>
 8008f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f44:	f383 8811 	msr	BASEPRI, r3
 8008f48:	f3bf 8f6f 	isb	sy
 8008f4c:	f3bf 8f4f 	dsb	sy
 8008f50:	627b      	str	r3, [r7, #36]	; 0x24
 8008f52:	e7fe      	b.n	8008f52 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	2b02      	cmp	r3, #2
 8008f58:	d103      	bne.n	8008f62 <xQueueGenericSend+0x6a>
 8008f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f5e:	2b01      	cmp	r3, #1
 8008f60:	d101      	bne.n	8008f66 <xQueueGenericSend+0x6e>
 8008f62:	2301      	movs	r3, #1
 8008f64:	e000      	b.n	8008f68 <xQueueGenericSend+0x70>
 8008f66:	2300      	movs	r3, #0
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d109      	bne.n	8008f80 <xQueueGenericSend+0x88>
 8008f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f70:	f383 8811 	msr	BASEPRI, r3
 8008f74:	f3bf 8f6f 	isb	sy
 8008f78:	f3bf 8f4f 	dsb	sy
 8008f7c:	623b      	str	r3, [r7, #32]
 8008f7e:	e7fe      	b.n	8008f7e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008f80:	f001 f986 	bl	800a290 <xTaskGetSchedulerState>
 8008f84:	4603      	mov	r3, r0
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d102      	bne.n	8008f90 <xQueueGenericSend+0x98>
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d101      	bne.n	8008f94 <xQueueGenericSend+0x9c>
 8008f90:	2301      	movs	r3, #1
 8008f92:	e000      	b.n	8008f96 <xQueueGenericSend+0x9e>
 8008f94:	2300      	movs	r3, #0
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d109      	bne.n	8008fae <xQueueGenericSend+0xb6>
 8008f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f9e:	f383 8811 	msr	BASEPRI, r3
 8008fa2:	f3bf 8f6f 	isb	sy
 8008fa6:	f3bf 8f4f 	dsb	sy
 8008faa:	61fb      	str	r3, [r7, #28]
 8008fac:	e7fe      	b.n	8008fac <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008fae:	f001 fc9b 	bl	800a8e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fba:	429a      	cmp	r2, r3
 8008fbc:	d302      	bcc.n	8008fc4 <xQueueGenericSend+0xcc>
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	2b02      	cmp	r3, #2
 8008fc2:	d129      	bne.n	8009018 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008fc4:	683a      	ldr	r2, [r7, #0]
 8008fc6:	68b9      	ldr	r1, [r7, #8]
 8008fc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008fca:	f000 fad2 	bl	8009572 <prvCopyDataToQueue>
 8008fce:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d010      	beq.n	8008ffa <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fda:	3324      	adds	r3, #36	; 0x24
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f000 ffb9 	bl	8009f54 <xTaskRemoveFromEventList>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d013      	beq.n	8009010 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008fe8:	4b3f      	ldr	r3, [pc, #252]	; (80090e8 <xQueueGenericSend+0x1f0>)
 8008fea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fee:	601a      	str	r2, [r3, #0]
 8008ff0:	f3bf 8f4f 	dsb	sy
 8008ff4:	f3bf 8f6f 	isb	sy
 8008ff8:	e00a      	b.n	8009010 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d007      	beq.n	8009010 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009000:	4b39      	ldr	r3, [pc, #228]	; (80090e8 <xQueueGenericSend+0x1f0>)
 8009002:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009006:	601a      	str	r2, [r3, #0]
 8009008:	f3bf 8f4f 	dsb	sy
 800900c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009010:	f001 fc98 	bl	800a944 <vPortExitCritical>
				return pdPASS;
 8009014:	2301      	movs	r3, #1
 8009016:	e063      	b.n	80090e0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d103      	bne.n	8009026 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800901e:	f001 fc91 	bl	800a944 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009022:	2300      	movs	r3, #0
 8009024:	e05c      	b.n	80090e0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009028:	2b00      	cmp	r3, #0
 800902a:	d106      	bne.n	800903a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800902c:	f107 0314 	add.w	r3, r7, #20
 8009030:	4618      	mov	r0, r3
 8009032:	f000 fff1 	bl	800a018 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009036:	2301      	movs	r3, #1
 8009038:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800903a:	f001 fc83 	bl	800a944 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800903e:	f000 fd7f 	bl	8009b40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009042:	f001 fc51 	bl	800a8e8 <vPortEnterCritical>
 8009046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009048:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800904c:	b25b      	sxtb	r3, r3
 800904e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009052:	d103      	bne.n	800905c <xQueueGenericSend+0x164>
 8009054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009056:	2200      	movs	r2, #0
 8009058:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800905c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800905e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009062:	b25b      	sxtb	r3, r3
 8009064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009068:	d103      	bne.n	8009072 <xQueueGenericSend+0x17a>
 800906a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800906c:	2200      	movs	r2, #0
 800906e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009072:	f001 fc67 	bl	800a944 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009076:	1d3a      	adds	r2, r7, #4
 8009078:	f107 0314 	add.w	r3, r7, #20
 800907c:	4611      	mov	r1, r2
 800907e:	4618      	mov	r0, r3
 8009080:	f000 ffe0 	bl	800a044 <xTaskCheckForTimeOut>
 8009084:	4603      	mov	r3, r0
 8009086:	2b00      	cmp	r3, #0
 8009088:	d124      	bne.n	80090d4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800908a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800908c:	f000 fb69 	bl	8009762 <prvIsQueueFull>
 8009090:	4603      	mov	r3, r0
 8009092:	2b00      	cmp	r3, #0
 8009094:	d018      	beq.n	80090c8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009098:	3310      	adds	r3, #16
 800909a:	687a      	ldr	r2, [r7, #4]
 800909c:	4611      	mov	r1, r2
 800909e:	4618      	mov	r0, r3
 80090a0:	f000 ff34 	bl	8009f0c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80090a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80090a6:	f000 faf4 	bl	8009692 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80090aa:	f000 fd57 	bl	8009b5c <xTaskResumeAll>
 80090ae:	4603      	mov	r3, r0
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	f47f af7c 	bne.w	8008fae <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80090b6:	4b0c      	ldr	r3, [pc, #48]	; (80090e8 <xQueueGenericSend+0x1f0>)
 80090b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090bc:	601a      	str	r2, [r3, #0]
 80090be:	f3bf 8f4f 	dsb	sy
 80090c2:	f3bf 8f6f 	isb	sy
 80090c6:	e772      	b.n	8008fae <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80090c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80090ca:	f000 fae2 	bl	8009692 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80090ce:	f000 fd45 	bl	8009b5c <xTaskResumeAll>
 80090d2:	e76c      	b.n	8008fae <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80090d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80090d6:	f000 fadc 	bl	8009692 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80090da:	f000 fd3f 	bl	8009b5c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80090de:	2300      	movs	r3, #0
		}
	}
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	3738      	adds	r7, #56	; 0x38
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}
 80090e8:	e000ed04 	.word	0xe000ed04

080090ec <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b08e      	sub	sp, #56	; 0x38
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
 80090f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80090fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d109      	bne.n	8009114 <xQueueGiveFromISR+0x28>
 8009100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009104:	f383 8811 	msr	BASEPRI, r3
 8009108:	f3bf 8f6f 	isb	sy
 800910c:	f3bf 8f4f 	dsb	sy
 8009110:	623b      	str	r3, [r7, #32]
 8009112:	e7fe      	b.n	8009112 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009118:	2b00      	cmp	r3, #0
 800911a:	d009      	beq.n	8009130 <xQueueGiveFromISR+0x44>
 800911c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009120:	f383 8811 	msr	BASEPRI, r3
 8009124:	f3bf 8f6f 	isb	sy
 8009128:	f3bf 8f4f 	dsb	sy
 800912c:	61fb      	str	r3, [r7, #28]
 800912e:	e7fe      	b.n	800912e <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8009130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d103      	bne.n	8009140 <xQueueGiveFromISR+0x54>
 8009138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800913a:	685b      	ldr	r3, [r3, #4]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d101      	bne.n	8009144 <xQueueGiveFromISR+0x58>
 8009140:	2301      	movs	r3, #1
 8009142:	e000      	b.n	8009146 <xQueueGiveFromISR+0x5a>
 8009144:	2300      	movs	r3, #0
 8009146:	2b00      	cmp	r3, #0
 8009148:	d109      	bne.n	800915e <xQueueGiveFromISR+0x72>
 800914a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800914e:	f383 8811 	msr	BASEPRI, r3
 8009152:	f3bf 8f6f 	isb	sy
 8009156:	f3bf 8f4f 	dsb	sy
 800915a:	61bb      	str	r3, [r7, #24]
 800915c:	e7fe      	b.n	800915c <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800915e:	f001 fc7d 	bl	800aa5c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009162:	f3ef 8211 	mrs	r2, BASEPRI
 8009166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800916a:	f383 8811 	msr	BASEPRI, r3
 800916e:	f3bf 8f6f 	isb	sy
 8009172:	f3bf 8f4f 	dsb	sy
 8009176:	617a      	str	r2, [r7, #20]
 8009178:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800917a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800917c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800917e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009182:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009188:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800918a:	429a      	cmp	r2, r3
 800918c:	d22b      	bcs.n	80091e6 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800918e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009190:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009194:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800919a:	1c5a      	adds	r2, r3, #1
 800919c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800919e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80091a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80091a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091a8:	d112      	bne.n	80091d0 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80091aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d016      	beq.n	80091e0 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80091b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091b4:	3324      	adds	r3, #36	; 0x24
 80091b6:	4618      	mov	r0, r3
 80091b8:	f000 fecc 	bl	8009f54 <xTaskRemoveFromEventList>
 80091bc:	4603      	mov	r3, r0
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d00e      	beq.n	80091e0 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d00b      	beq.n	80091e0 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	2201      	movs	r2, #1
 80091cc:	601a      	str	r2, [r3, #0]
 80091ce:	e007      	b.n	80091e0 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80091d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80091d4:	3301      	adds	r3, #1
 80091d6:	b2db      	uxtb	r3, r3
 80091d8:	b25a      	sxtb	r2, r3
 80091da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80091e0:	2301      	movs	r3, #1
 80091e2:	637b      	str	r3, [r7, #52]	; 0x34
 80091e4:	e001      	b.n	80091ea <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80091e6:	2300      	movs	r3, #0
 80091e8:	637b      	str	r3, [r7, #52]	; 0x34
 80091ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ec:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80091f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80091f6:	4618      	mov	r0, r3
 80091f8:	3738      	adds	r7, #56	; 0x38
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bd80      	pop	{r7, pc}
	...

08009200 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b08e      	sub	sp, #56	; 0x38
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
 8009208:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800920a:	2300      	movs	r3, #0
 800920c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009212:	2300      	movs	r3, #0
 8009214:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009218:	2b00      	cmp	r3, #0
 800921a:	d109      	bne.n	8009230 <xQueueSemaphoreTake+0x30>
	__asm volatile
 800921c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009220:	f383 8811 	msr	BASEPRI, r3
 8009224:	f3bf 8f6f 	isb	sy
 8009228:	f3bf 8f4f 	dsb	sy
 800922c:	623b      	str	r3, [r7, #32]
 800922e:	e7fe      	b.n	800922e <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009234:	2b00      	cmp	r3, #0
 8009236:	d009      	beq.n	800924c <xQueueSemaphoreTake+0x4c>
 8009238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800923c:	f383 8811 	msr	BASEPRI, r3
 8009240:	f3bf 8f6f 	isb	sy
 8009244:	f3bf 8f4f 	dsb	sy
 8009248:	61fb      	str	r3, [r7, #28]
 800924a:	e7fe      	b.n	800924a <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800924c:	f001 f820 	bl	800a290 <xTaskGetSchedulerState>
 8009250:	4603      	mov	r3, r0
 8009252:	2b00      	cmp	r3, #0
 8009254:	d102      	bne.n	800925c <xQueueSemaphoreTake+0x5c>
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d101      	bne.n	8009260 <xQueueSemaphoreTake+0x60>
 800925c:	2301      	movs	r3, #1
 800925e:	e000      	b.n	8009262 <xQueueSemaphoreTake+0x62>
 8009260:	2300      	movs	r3, #0
 8009262:	2b00      	cmp	r3, #0
 8009264:	d109      	bne.n	800927a <xQueueSemaphoreTake+0x7a>
 8009266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800926a:	f383 8811 	msr	BASEPRI, r3
 800926e:	f3bf 8f6f 	isb	sy
 8009272:	f3bf 8f4f 	dsb	sy
 8009276:	61bb      	str	r3, [r7, #24]
 8009278:	e7fe      	b.n	8009278 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800927a:	f001 fb35 	bl	800a8e8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800927e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009282:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009286:	2b00      	cmp	r3, #0
 8009288:	d024      	beq.n	80092d4 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800928a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800928c:	1e5a      	subs	r2, r3, #1
 800928e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009290:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d104      	bne.n	80092a4 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800929a:	f001 f9bf 	bl	800a61c <pvTaskIncrementMutexHeldCount>
 800929e:	4602      	mov	r2, r0
 80092a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092a2:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80092a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092a6:	691b      	ldr	r3, [r3, #16]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d00f      	beq.n	80092cc <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80092ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ae:	3310      	adds	r3, #16
 80092b0:	4618      	mov	r0, r3
 80092b2:	f000 fe4f 	bl	8009f54 <xTaskRemoveFromEventList>
 80092b6:	4603      	mov	r3, r0
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d007      	beq.n	80092cc <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80092bc:	4b53      	ldr	r3, [pc, #332]	; (800940c <xQueueSemaphoreTake+0x20c>)
 80092be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092c2:	601a      	str	r2, [r3, #0]
 80092c4:	f3bf 8f4f 	dsb	sy
 80092c8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80092cc:	f001 fb3a 	bl	800a944 <vPortExitCritical>
				return pdPASS;
 80092d0:	2301      	movs	r3, #1
 80092d2:	e096      	b.n	8009402 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d110      	bne.n	80092fc <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80092da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d009      	beq.n	80092f4 <xQueueSemaphoreTake+0xf4>
 80092e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092e4:	f383 8811 	msr	BASEPRI, r3
 80092e8:	f3bf 8f6f 	isb	sy
 80092ec:	f3bf 8f4f 	dsb	sy
 80092f0:	617b      	str	r3, [r7, #20]
 80092f2:	e7fe      	b.n	80092f2 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80092f4:	f001 fb26 	bl	800a944 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80092f8:	2300      	movs	r3, #0
 80092fa:	e082      	b.n	8009402 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 80092fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d106      	bne.n	8009310 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009302:	f107 030c 	add.w	r3, r7, #12
 8009306:	4618      	mov	r0, r3
 8009308:	f000 fe86 	bl	800a018 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800930c:	2301      	movs	r3, #1
 800930e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009310:	f001 fb18 	bl	800a944 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009314:	f000 fc14 	bl	8009b40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009318:	f001 fae6 	bl	800a8e8 <vPortEnterCritical>
 800931c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800931e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009322:	b25b      	sxtb	r3, r3
 8009324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009328:	d103      	bne.n	8009332 <xQueueSemaphoreTake+0x132>
 800932a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800932c:	2200      	movs	r2, #0
 800932e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009334:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009338:	b25b      	sxtb	r3, r3
 800933a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800933e:	d103      	bne.n	8009348 <xQueueSemaphoreTake+0x148>
 8009340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009342:	2200      	movs	r2, #0
 8009344:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009348:	f001 fafc 	bl	800a944 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800934c:	463a      	mov	r2, r7
 800934e:	f107 030c 	add.w	r3, r7, #12
 8009352:	4611      	mov	r1, r2
 8009354:	4618      	mov	r0, r3
 8009356:	f000 fe75 	bl	800a044 <xTaskCheckForTimeOut>
 800935a:	4603      	mov	r3, r0
 800935c:	2b00      	cmp	r3, #0
 800935e:	d132      	bne.n	80093c6 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009360:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009362:	f000 f9e8 	bl	8009736 <prvIsQueueEmpty>
 8009366:	4603      	mov	r3, r0
 8009368:	2b00      	cmp	r3, #0
 800936a:	d026      	beq.n	80093ba <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800936c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d109      	bne.n	8009388 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8009374:	f001 fab8 	bl	800a8e8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8009378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800937a:	685b      	ldr	r3, [r3, #4]
 800937c:	4618      	mov	r0, r3
 800937e:	f000 ffa5 	bl	800a2cc <xTaskPriorityInherit>
 8009382:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009384:	f001 fade 	bl	800a944 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800938a:	3324      	adds	r3, #36	; 0x24
 800938c:	683a      	ldr	r2, [r7, #0]
 800938e:	4611      	mov	r1, r2
 8009390:	4618      	mov	r0, r3
 8009392:	f000 fdbb 	bl	8009f0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009396:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009398:	f000 f97b 	bl	8009692 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800939c:	f000 fbde 	bl	8009b5c <xTaskResumeAll>
 80093a0:	4603      	mov	r3, r0
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	f47f af69 	bne.w	800927a <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 80093a8:	4b18      	ldr	r3, [pc, #96]	; (800940c <xQueueSemaphoreTake+0x20c>)
 80093aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093ae:	601a      	str	r2, [r3, #0]
 80093b0:	f3bf 8f4f 	dsb	sy
 80093b4:	f3bf 8f6f 	isb	sy
 80093b8:	e75f      	b.n	800927a <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80093ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80093bc:	f000 f969 	bl	8009692 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80093c0:	f000 fbcc 	bl	8009b5c <xTaskResumeAll>
 80093c4:	e759      	b.n	800927a <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80093c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80093c8:	f000 f963 	bl	8009692 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80093cc:	f000 fbc6 	bl	8009b5c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80093d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80093d2:	f000 f9b0 	bl	8009736 <prvIsQueueEmpty>
 80093d6:	4603      	mov	r3, r0
 80093d8:	2b00      	cmp	r3, #0
 80093da:	f43f af4e 	beq.w	800927a <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80093de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d00d      	beq.n	8009400 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 80093e4:	f001 fa80 	bl	800a8e8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80093e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80093ea:	f000 f8ab 	bl	8009544 <prvGetDisinheritPriorityAfterTimeout>
 80093ee:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80093f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093f2:	685b      	ldr	r3, [r3, #4]
 80093f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80093f6:	4618      	mov	r0, r3
 80093f8:	f001 f872 	bl	800a4e0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80093fc:	f001 faa2 	bl	800a944 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009400:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8009402:	4618      	mov	r0, r3
 8009404:	3738      	adds	r7, #56	; 0x38
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}
 800940a:	bf00      	nop
 800940c:	e000ed04 	.word	0xe000ed04

08009410 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b08e      	sub	sp, #56	; 0x38
 8009414:	af00      	add	r7, sp, #0
 8009416:	60f8      	str	r0, [r7, #12]
 8009418:	60b9      	str	r1, [r7, #8]
 800941a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009422:	2b00      	cmp	r3, #0
 8009424:	d109      	bne.n	800943a <xQueueReceiveFromISR+0x2a>
 8009426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800942a:	f383 8811 	msr	BASEPRI, r3
 800942e:	f3bf 8f6f 	isb	sy
 8009432:	f3bf 8f4f 	dsb	sy
 8009436:	623b      	str	r3, [r7, #32]
 8009438:	e7fe      	b.n	8009438 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d103      	bne.n	8009448 <xQueueReceiveFromISR+0x38>
 8009440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009444:	2b00      	cmp	r3, #0
 8009446:	d101      	bne.n	800944c <xQueueReceiveFromISR+0x3c>
 8009448:	2301      	movs	r3, #1
 800944a:	e000      	b.n	800944e <xQueueReceiveFromISR+0x3e>
 800944c:	2300      	movs	r3, #0
 800944e:	2b00      	cmp	r3, #0
 8009450:	d109      	bne.n	8009466 <xQueueReceiveFromISR+0x56>
 8009452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009456:	f383 8811 	msr	BASEPRI, r3
 800945a:	f3bf 8f6f 	isb	sy
 800945e:	f3bf 8f4f 	dsb	sy
 8009462:	61fb      	str	r3, [r7, #28]
 8009464:	e7fe      	b.n	8009464 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009466:	f001 faf9 	bl	800aa5c <vPortValidateInterruptPriority>
	__asm volatile
 800946a:	f3ef 8211 	mrs	r2, BASEPRI
 800946e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009472:	f383 8811 	msr	BASEPRI, r3
 8009476:	f3bf 8f6f 	isb	sy
 800947a:	f3bf 8f4f 	dsb	sy
 800947e:	61ba      	str	r2, [r7, #24]
 8009480:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009482:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009484:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800948a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800948c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800948e:	2b00      	cmp	r3, #0
 8009490:	d02f      	beq.n	80094f2 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009494:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009498:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800949c:	68b9      	ldr	r1, [r7, #8]
 800949e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80094a0:	f000 f8d1 	bl	8009646 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80094a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094a6:	1e5a      	subs	r2, r3, #1
 80094a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094aa:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80094ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80094b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094b4:	d112      	bne.n	80094dc <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80094b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094b8:	691b      	ldr	r3, [r3, #16]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d016      	beq.n	80094ec <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80094be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094c0:	3310      	adds	r3, #16
 80094c2:	4618      	mov	r0, r3
 80094c4:	f000 fd46 	bl	8009f54 <xTaskRemoveFromEventList>
 80094c8:	4603      	mov	r3, r0
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d00e      	beq.n	80094ec <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d00b      	beq.n	80094ec <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2201      	movs	r2, #1
 80094d8:	601a      	str	r2, [r3, #0]
 80094da:	e007      	b.n	80094ec <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80094dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80094e0:	3301      	adds	r3, #1
 80094e2:	b2db      	uxtb	r3, r3
 80094e4:	b25a      	sxtb	r2, r3
 80094e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80094ec:	2301      	movs	r3, #1
 80094ee:	637b      	str	r3, [r7, #52]	; 0x34
 80094f0:	e001      	b.n	80094f6 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80094f2:	2300      	movs	r3, #0
 80094f4:	637b      	str	r3, [r7, #52]	; 0x34
 80094f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094f8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80094fa:	693b      	ldr	r3, [r7, #16]
 80094fc:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009502:	4618      	mov	r0, r3
 8009504:	3738      	adds	r7, #56	; 0x38
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}

0800950a <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800950a:	b580      	push	{r7, lr}
 800950c:	b084      	sub	sp, #16
 800950e:	af00      	add	r7, sp, #0
 8009510:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d109      	bne.n	8009530 <vQueueDelete+0x26>
	__asm volatile
 800951c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009520:	f383 8811 	msr	BASEPRI, r3
 8009524:	f3bf 8f6f 	isb	sy
 8009528:	f3bf 8f4f 	dsb	sy
 800952c:	60bb      	str	r3, [r7, #8]
 800952e:	e7fe      	b.n	800952e <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8009530:	68f8      	ldr	r0, [r7, #12]
 8009532:	f000 f92f 	bl	8009794 <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 8009536:	68f8      	ldr	r0, [r7, #12]
 8009538:	f001 fb92 	bl	800ac60 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800953c:	bf00      	nop
 800953e:	3710      	adds	r7, #16
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}

08009544 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009544:	b480      	push	{r7}
 8009546:	b085      	sub	sp, #20
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009550:	2b00      	cmp	r3, #0
 8009552:	d006      	beq.n	8009562 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f1c3 0307 	rsb	r3, r3, #7
 800955e:	60fb      	str	r3, [r7, #12]
 8009560:	e001      	b.n	8009566 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009562:	2300      	movs	r3, #0
 8009564:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009566:	68fb      	ldr	r3, [r7, #12]
	}
 8009568:	4618      	mov	r0, r3
 800956a:	3714      	adds	r7, #20
 800956c:	46bd      	mov	sp, r7
 800956e:	bc80      	pop	{r7}
 8009570:	4770      	bx	lr

08009572 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009572:	b580      	push	{r7, lr}
 8009574:	b086      	sub	sp, #24
 8009576:	af00      	add	r7, sp, #0
 8009578:	60f8      	str	r0, [r7, #12]
 800957a:	60b9      	str	r1, [r7, #8]
 800957c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800957e:	2300      	movs	r3, #0
 8009580:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009586:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800958c:	2b00      	cmp	r3, #0
 800958e:	d10d      	bne.n	80095ac <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d14d      	bne.n	8009634 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	685b      	ldr	r3, [r3, #4]
 800959c:	4618      	mov	r0, r3
 800959e:	f000 ff1b 	bl	800a3d8 <xTaskPriorityDisinherit>
 80095a2:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	2200      	movs	r2, #0
 80095a8:	605a      	str	r2, [r3, #4]
 80095aa:	e043      	b.n	8009634 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d119      	bne.n	80095e6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	6898      	ldr	r0, [r3, #8]
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ba:	461a      	mov	r2, r3
 80095bc:	68b9      	ldr	r1, [r7, #8]
 80095be:	f001 fc9b 	bl	800aef8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	689a      	ldr	r2, [r3, #8]
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ca:	441a      	add	r2, r3
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	689a      	ldr	r2, [r3, #8]
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	685b      	ldr	r3, [r3, #4]
 80095d8:	429a      	cmp	r2, r3
 80095da:	d32b      	bcc.n	8009634 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681a      	ldr	r2, [r3, #0]
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	609a      	str	r2, [r3, #8]
 80095e4:	e026      	b.n	8009634 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	68d8      	ldr	r0, [r3, #12]
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ee:	461a      	mov	r2, r3
 80095f0:	68b9      	ldr	r1, [r7, #8]
 80095f2:	f001 fc81 	bl	800aef8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	68da      	ldr	r2, [r3, #12]
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095fe:	425b      	negs	r3, r3
 8009600:	441a      	add	r2, r3
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	68da      	ldr	r2, [r3, #12]
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	429a      	cmp	r2, r3
 8009610:	d207      	bcs.n	8009622 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	685a      	ldr	r2, [r3, #4]
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800961a:	425b      	negs	r3, r3
 800961c:	441a      	add	r2, r3
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2b02      	cmp	r3, #2
 8009626:	d105      	bne.n	8009634 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009628:	693b      	ldr	r3, [r7, #16]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d002      	beq.n	8009634 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800962e:	693b      	ldr	r3, [r7, #16]
 8009630:	3b01      	subs	r3, #1
 8009632:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009634:	693b      	ldr	r3, [r7, #16]
 8009636:	1c5a      	adds	r2, r3, #1
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800963c:	697b      	ldr	r3, [r7, #20]
}
 800963e:	4618      	mov	r0, r3
 8009640:	3718      	adds	r7, #24
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}

08009646 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009646:	b580      	push	{r7, lr}
 8009648:	b082      	sub	sp, #8
 800964a:	af00      	add	r7, sp, #0
 800964c:	6078      	str	r0, [r7, #4]
 800964e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009654:	2b00      	cmp	r3, #0
 8009656:	d018      	beq.n	800968a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	68da      	ldr	r2, [r3, #12]
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009660:	441a      	add	r2, r3
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	68da      	ldr	r2, [r3, #12]
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	685b      	ldr	r3, [r3, #4]
 800966e:	429a      	cmp	r2, r3
 8009670:	d303      	bcc.n	800967a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681a      	ldr	r2, [r3, #0]
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	68d9      	ldr	r1, [r3, #12]
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009682:	461a      	mov	r2, r3
 8009684:	6838      	ldr	r0, [r7, #0]
 8009686:	f001 fc37 	bl	800aef8 <memcpy>
	}
}
 800968a:	bf00      	nop
 800968c:	3708      	adds	r7, #8
 800968e:	46bd      	mov	sp, r7
 8009690:	bd80      	pop	{r7, pc}

08009692 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009692:	b580      	push	{r7, lr}
 8009694:	b084      	sub	sp, #16
 8009696:	af00      	add	r7, sp, #0
 8009698:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800969a:	f001 f925 	bl	800a8e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80096a4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80096a6:	e011      	b.n	80096cc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d012      	beq.n	80096d6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	3324      	adds	r3, #36	; 0x24
 80096b4:	4618      	mov	r0, r3
 80096b6:	f000 fc4d 	bl	8009f54 <xTaskRemoveFromEventList>
 80096ba:	4603      	mov	r3, r0
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d001      	beq.n	80096c4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80096c0:	f000 fd20 	bl	800a104 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80096c4:	7bfb      	ldrb	r3, [r7, #15]
 80096c6:	3b01      	subs	r3, #1
 80096c8:	b2db      	uxtb	r3, r3
 80096ca:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80096cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	dce9      	bgt.n	80096a8 <prvUnlockQueue+0x16>
 80096d4:	e000      	b.n	80096d8 <prvUnlockQueue+0x46>
					break;
 80096d6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	22ff      	movs	r2, #255	; 0xff
 80096dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80096e0:	f001 f930 	bl	800a944 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80096e4:	f001 f900 	bl	800a8e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80096ee:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80096f0:	e011      	b.n	8009716 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	691b      	ldr	r3, [r3, #16]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d012      	beq.n	8009720 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	3310      	adds	r3, #16
 80096fe:	4618      	mov	r0, r3
 8009700:	f000 fc28 	bl	8009f54 <xTaskRemoveFromEventList>
 8009704:	4603      	mov	r3, r0
 8009706:	2b00      	cmp	r3, #0
 8009708:	d001      	beq.n	800970e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800970a:	f000 fcfb 	bl	800a104 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800970e:	7bbb      	ldrb	r3, [r7, #14]
 8009710:	3b01      	subs	r3, #1
 8009712:	b2db      	uxtb	r3, r3
 8009714:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009716:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800971a:	2b00      	cmp	r3, #0
 800971c:	dce9      	bgt.n	80096f2 <prvUnlockQueue+0x60>
 800971e:	e000      	b.n	8009722 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009720:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	22ff      	movs	r2, #255	; 0xff
 8009726:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800972a:	f001 f90b 	bl	800a944 <vPortExitCritical>
}
 800972e:	bf00      	nop
 8009730:	3710      	adds	r7, #16
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}

08009736 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009736:	b580      	push	{r7, lr}
 8009738:	b084      	sub	sp, #16
 800973a:	af00      	add	r7, sp, #0
 800973c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800973e:	f001 f8d3 	bl	800a8e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009746:	2b00      	cmp	r3, #0
 8009748:	d102      	bne.n	8009750 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800974a:	2301      	movs	r3, #1
 800974c:	60fb      	str	r3, [r7, #12]
 800974e:	e001      	b.n	8009754 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009750:	2300      	movs	r3, #0
 8009752:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009754:	f001 f8f6 	bl	800a944 <vPortExitCritical>

	return xReturn;
 8009758:	68fb      	ldr	r3, [r7, #12]
}
 800975a:	4618      	mov	r0, r3
 800975c:	3710      	adds	r7, #16
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}

08009762 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009762:	b580      	push	{r7, lr}
 8009764:	b084      	sub	sp, #16
 8009766:	af00      	add	r7, sp, #0
 8009768:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800976a:	f001 f8bd 	bl	800a8e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009776:	429a      	cmp	r2, r3
 8009778:	d102      	bne.n	8009780 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800977a:	2301      	movs	r3, #1
 800977c:	60fb      	str	r3, [r7, #12]
 800977e:	e001      	b.n	8009784 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009780:	2300      	movs	r3, #0
 8009782:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009784:	f001 f8de 	bl	800a944 <vPortExitCritical>

	return xReturn;
 8009788:	68fb      	ldr	r3, [r7, #12]
}
 800978a:	4618      	mov	r0, r3
 800978c:	3710      	adds	r7, #16
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}
	...

08009794 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009794:	b480      	push	{r7}
 8009796:	b085      	sub	sp, #20
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800979c:	2300      	movs	r3, #0
 800979e:	60fb      	str	r3, [r7, #12]
 80097a0:	e016      	b.n	80097d0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80097a2:	4a0f      	ldr	r2, [pc, #60]	; (80097e0 <vQueueUnregisterQueue+0x4c>)
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	00db      	lsls	r3, r3, #3
 80097a8:	4413      	add	r3, r2
 80097aa:	685b      	ldr	r3, [r3, #4]
 80097ac:	687a      	ldr	r2, [r7, #4]
 80097ae:	429a      	cmp	r2, r3
 80097b0:	d10b      	bne.n	80097ca <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80097b2:	4a0b      	ldr	r2, [pc, #44]	; (80097e0 <vQueueUnregisterQueue+0x4c>)
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	2100      	movs	r1, #0
 80097b8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80097bc:	4a08      	ldr	r2, [pc, #32]	; (80097e0 <vQueueUnregisterQueue+0x4c>)
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	00db      	lsls	r3, r3, #3
 80097c2:	4413      	add	r3, r2
 80097c4:	2200      	movs	r2, #0
 80097c6:	605a      	str	r2, [r3, #4]
				break;
 80097c8:	e005      	b.n	80097d6 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	3301      	adds	r3, #1
 80097ce:	60fb      	str	r3, [r7, #12]
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	2b07      	cmp	r3, #7
 80097d4:	d9e5      	bls.n	80097a2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80097d6:	bf00      	nop
 80097d8:	3714      	adds	r7, #20
 80097da:	46bd      	mov	sp, r7
 80097dc:	bc80      	pop	{r7}
 80097de:	4770      	bx	lr
 80097e0:	20004d0c 	.word	0x20004d0c

080097e4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b08c      	sub	sp, #48	; 0x30
 80097e8:	af04      	add	r7, sp, #16
 80097ea:	60f8      	str	r0, [r7, #12]
 80097ec:	60b9      	str	r1, [r7, #8]
 80097ee:	603b      	str	r3, [r7, #0]
 80097f0:	4613      	mov	r3, r2
 80097f2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097f4:	88fb      	ldrh	r3, [r7, #6]
 80097f6:	009b      	lsls	r3, r3, #2
 80097f8:	4618      	mov	r0, r3
 80097fa:	f001 f96b 	bl	800aad4 <pvPortMalloc>
 80097fe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009800:	697b      	ldr	r3, [r7, #20]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d00e      	beq.n	8009824 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8009806:	2058      	movs	r0, #88	; 0x58
 8009808:	f001 f964 	bl	800aad4 <pvPortMalloc>
 800980c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800980e:	69fb      	ldr	r3, [r7, #28]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d003      	beq.n	800981c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009814:	69fb      	ldr	r3, [r7, #28]
 8009816:	697a      	ldr	r2, [r7, #20]
 8009818:	631a      	str	r2, [r3, #48]	; 0x30
 800981a:	e005      	b.n	8009828 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800981c:	6978      	ldr	r0, [r7, #20]
 800981e:	f001 fa1f 	bl	800ac60 <vPortFree>
 8009822:	e001      	b.n	8009828 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009824:	2300      	movs	r3, #0
 8009826:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009828:	69fb      	ldr	r3, [r7, #28]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d013      	beq.n	8009856 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800982e:	88fa      	ldrh	r2, [r7, #6]
 8009830:	2300      	movs	r3, #0
 8009832:	9303      	str	r3, [sp, #12]
 8009834:	69fb      	ldr	r3, [r7, #28]
 8009836:	9302      	str	r3, [sp, #8]
 8009838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800983a:	9301      	str	r3, [sp, #4]
 800983c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800983e:	9300      	str	r3, [sp, #0]
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	68b9      	ldr	r1, [r7, #8]
 8009844:	68f8      	ldr	r0, [r7, #12]
 8009846:	f000 f80e 	bl	8009866 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800984a:	69f8      	ldr	r0, [r7, #28]
 800984c:	f000 f894 	bl	8009978 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009850:	2301      	movs	r3, #1
 8009852:	61bb      	str	r3, [r7, #24]
 8009854:	e002      	b.n	800985c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009856:	f04f 33ff 	mov.w	r3, #4294967295
 800985a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800985c:	69bb      	ldr	r3, [r7, #24]
	}
 800985e:	4618      	mov	r0, r3
 8009860:	3720      	adds	r7, #32
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}

08009866 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009866:	b580      	push	{r7, lr}
 8009868:	b088      	sub	sp, #32
 800986a:	af00      	add	r7, sp, #0
 800986c:	60f8      	str	r0, [r7, #12]
 800986e:	60b9      	str	r1, [r7, #8]
 8009870:	607a      	str	r2, [r7, #4]
 8009872:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009876:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	009b      	lsls	r3, r3, #2
 800987c:	461a      	mov	r2, r3
 800987e:	21a5      	movs	r1, #165	; 0xa5
 8009880:	f001 fb45 	bl	800af0e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8009884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009886:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800988e:	3b01      	subs	r3, #1
 8009890:	009b      	lsls	r3, r3, #2
 8009892:	4413      	add	r3, r2
 8009894:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8009896:	69bb      	ldr	r3, [r7, #24]
 8009898:	f023 0307 	bic.w	r3, r3, #7
 800989c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800989e:	69bb      	ldr	r3, [r7, #24]
 80098a0:	f003 0307 	and.w	r3, r3, #7
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d009      	beq.n	80098bc <prvInitialiseNewTask+0x56>
 80098a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ac:	f383 8811 	msr	BASEPRI, r3
 80098b0:	f3bf 8f6f 	isb	sy
 80098b4:	f3bf 8f4f 	dsb	sy
 80098b8:	617b      	str	r3, [r7, #20]
 80098ba:	e7fe      	b.n	80098ba <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80098bc:	2300      	movs	r3, #0
 80098be:	61fb      	str	r3, [r7, #28]
 80098c0:	e012      	b.n	80098e8 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80098c2:	68ba      	ldr	r2, [r7, #8]
 80098c4:	69fb      	ldr	r3, [r7, #28]
 80098c6:	4413      	add	r3, r2
 80098c8:	7819      	ldrb	r1, [r3, #0]
 80098ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098cc:	69fb      	ldr	r3, [r7, #28]
 80098ce:	4413      	add	r3, r2
 80098d0:	3334      	adds	r3, #52	; 0x34
 80098d2:	460a      	mov	r2, r1
 80098d4:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80098d6:	68ba      	ldr	r2, [r7, #8]
 80098d8:	69fb      	ldr	r3, [r7, #28]
 80098da:	4413      	add	r3, r2
 80098dc:	781b      	ldrb	r3, [r3, #0]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d006      	beq.n	80098f0 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80098e2:	69fb      	ldr	r3, [r7, #28]
 80098e4:	3301      	adds	r3, #1
 80098e6:	61fb      	str	r3, [r7, #28]
 80098e8:	69fb      	ldr	r3, [r7, #28]
 80098ea:	2b0f      	cmp	r3, #15
 80098ec:	d9e9      	bls.n	80098c2 <prvInitialiseNewTask+0x5c>
 80098ee:	e000      	b.n	80098f2 <prvInitialiseNewTask+0x8c>
		{
			break;
 80098f0:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80098f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098f4:	2200      	movs	r2, #0
 80098f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80098fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098fc:	2b06      	cmp	r3, #6
 80098fe:	d901      	bls.n	8009904 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009900:	2306      	movs	r3, #6
 8009902:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009906:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009908:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800990a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800990c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800990e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8009910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009912:	2200      	movs	r2, #0
 8009914:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009918:	3304      	adds	r3, #4
 800991a:	4618      	mov	r0, r3
 800991c:	f7ff f96a 	bl	8008bf4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009922:	3318      	adds	r3, #24
 8009924:	4618      	mov	r0, r3
 8009926:	f7ff f965 	bl	8008bf4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800992a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800992c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800992e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009932:	f1c3 0207 	rsb	r2, r3, #7
 8009936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009938:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800993a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800993c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800993e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8009940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009942:	2200      	movs	r2, #0
 8009944:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009948:	2200      	movs	r2, #0
 800994a:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800994c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800994e:	2200      	movs	r2, #0
 8009950:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009954:	683a      	ldr	r2, [r7, #0]
 8009956:	68f9      	ldr	r1, [r7, #12]
 8009958:	69b8      	ldr	r0, [r7, #24]
 800995a:	f000 fed9 	bl	800a710 <pxPortInitialiseStack>
 800995e:	4602      	mov	r2, r0
 8009960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009962:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8009964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009966:	2b00      	cmp	r3, #0
 8009968:	d002      	beq.n	8009970 <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800996a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800996c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800996e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009970:	bf00      	nop
 8009972:	3720      	adds	r7, #32
 8009974:	46bd      	mov	sp, r7
 8009976:	bd80      	pop	{r7, pc}

08009978 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b082      	sub	sp, #8
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009980:	f000 ffb2 	bl	800a8e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009984:	4b2a      	ldr	r3, [pc, #168]	; (8009a30 <prvAddNewTaskToReadyList+0xb8>)
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	3301      	adds	r3, #1
 800998a:	4a29      	ldr	r2, [pc, #164]	; (8009a30 <prvAddNewTaskToReadyList+0xb8>)
 800998c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800998e:	4b29      	ldr	r3, [pc, #164]	; (8009a34 <prvAddNewTaskToReadyList+0xbc>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d109      	bne.n	80099aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009996:	4a27      	ldr	r2, [pc, #156]	; (8009a34 <prvAddNewTaskToReadyList+0xbc>)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800999c:	4b24      	ldr	r3, [pc, #144]	; (8009a30 <prvAddNewTaskToReadyList+0xb8>)
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	2b01      	cmp	r3, #1
 80099a2:	d110      	bne.n	80099c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80099a4:	f000 fbd4 	bl	800a150 <prvInitialiseTaskLists>
 80099a8:	e00d      	b.n	80099c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80099aa:	4b23      	ldr	r3, [pc, #140]	; (8009a38 <prvAddNewTaskToReadyList+0xc0>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d109      	bne.n	80099c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80099b2:	4b20      	ldr	r3, [pc, #128]	; (8009a34 <prvAddNewTaskToReadyList+0xbc>)
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099bc:	429a      	cmp	r2, r3
 80099be:	d802      	bhi.n	80099c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80099c0:	4a1c      	ldr	r2, [pc, #112]	; (8009a34 <prvAddNewTaskToReadyList+0xbc>)
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80099c6:	4b1d      	ldr	r3, [pc, #116]	; (8009a3c <prvAddNewTaskToReadyList+0xc4>)
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	3301      	adds	r3, #1
 80099cc:	4a1b      	ldr	r2, [pc, #108]	; (8009a3c <prvAddNewTaskToReadyList+0xc4>)
 80099ce:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099d4:	2201      	movs	r2, #1
 80099d6:	409a      	lsls	r2, r3
 80099d8:	4b19      	ldr	r3, [pc, #100]	; (8009a40 <prvAddNewTaskToReadyList+0xc8>)
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	4313      	orrs	r3, r2
 80099de:	4a18      	ldr	r2, [pc, #96]	; (8009a40 <prvAddNewTaskToReadyList+0xc8>)
 80099e0:	6013      	str	r3, [r2, #0]
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099e6:	4613      	mov	r3, r2
 80099e8:	009b      	lsls	r3, r3, #2
 80099ea:	4413      	add	r3, r2
 80099ec:	009b      	lsls	r3, r3, #2
 80099ee:	4a15      	ldr	r2, [pc, #84]	; (8009a44 <prvAddNewTaskToReadyList+0xcc>)
 80099f0:	441a      	add	r2, r3
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	3304      	adds	r3, #4
 80099f6:	4619      	mov	r1, r3
 80099f8:	4610      	mov	r0, r2
 80099fa:	f7ff f907 	bl	8008c0c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80099fe:	f000 ffa1 	bl	800a944 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009a02:	4b0d      	ldr	r3, [pc, #52]	; (8009a38 <prvAddNewTaskToReadyList+0xc0>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d00e      	beq.n	8009a28 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009a0a:	4b0a      	ldr	r3, [pc, #40]	; (8009a34 <prvAddNewTaskToReadyList+0xbc>)
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a14:	429a      	cmp	r2, r3
 8009a16:	d207      	bcs.n	8009a28 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009a18:	4b0b      	ldr	r3, [pc, #44]	; (8009a48 <prvAddNewTaskToReadyList+0xd0>)
 8009a1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a1e:	601a      	str	r2, [r3, #0]
 8009a20:	f3bf 8f4f 	dsb	sy
 8009a24:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009a28:	bf00      	nop
 8009a2a:	3708      	adds	r7, #8
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	bd80      	pop	{r7, pc}
 8009a30:	200001c0 	.word	0x200001c0
 8009a34:	200000c0 	.word	0x200000c0
 8009a38:	200001cc 	.word	0x200001cc
 8009a3c:	200001dc 	.word	0x200001dc
 8009a40:	200001c8 	.word	0x200001c8
 8009a44:	200000c4 	.word	0x200000c4
 8009a48:	e000ed04 	.word	0xe000ed04

08009a4c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b084      	sub	sp, #16
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009a54:	2300      	movs	r3, #0
 8009a56:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d016      	beq.n	8009a8c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009a5e:	4b13      	ldr	r3, [pc, #76]	; (8009aac <vTaskDelay+0x60>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d009      	beq.n	8009a7a <vTaskDelay+0x2e>
 8009a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a6a:	f383 8811 	msr	BASEPRI, r3
 8009a6e:	f3bf 8f6f 	isb	sy
 8009a72:	f3bf 8f4f 	dsb	sy
 8009a76:	60bb      	str	r3, [r7, #8]
 8009a78:	e7fe      	b.n	8009a78 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8009a7a:	f000 f861 	bl	8009b40 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009a7e:	2100      	movs	r1, #0
 8009a80:	6878      	ldr	r0, [r7, #4]
 8009a82:	f000 fddf 	bl	800a644 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009a86:	f000 f869 	bl	8009b5c <xTaskResumeAll>
 8009a8a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d107      	bne.n	8009aa2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8009a92:	4b07      	ldr	r3, [pc, #28]	; (8009ab0 <vTaskDelay+0x64>)
 8009a94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a98:	601a      	str	r2, [r3, #0]
 8009a9a:	f3bf 8f4f 	dsb	sy
 8009a9e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009aa2:	bf00      	nop
 8009aa4:	3710      	adds	r7, #16
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}
 8009aaa:	bf00      	nop
 8009aac:	200001e8 	.word	0x200001e8
 8009ab0:	e000ed04 	.word	0xe000ed04

08009ab4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b086      	sub	sp, #24
 8009ab8:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8009aba:	4b1b      	ldr	r3, [pc, #108]	; (8009b28 <vTaskStartScheduler+0x74>)
 8009abc:	9301      	str	r3, [sp, #4]
 8009abe:	2300      	movs	r3, #0
 8009ac0:	9300      	str	r3, [sp, #0]
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	2280      	movs	r2, #128	; 0x80
 8009ac6:	4919      	ldr	r1, [pc, #100]	; (8009b2c <vTaskStartScheduler+0x78>)
 8009ac8:	4819      	ldr	r0, [pc, #100]	; (8009b30 <vTaskStartScheduler+0x7c>)
 8009aca:	f7ff fe8b 	bl	80097e4 <xTaskCreate>
 8009ace:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	2b01      	cmp	r3, #1
 8009ad4:	d115      	bne.n	8009b02 <vTaskStartScheduler+0x4e>
 8009ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ada:	f383 8811 	msr	BASEPRI, r3
 8009ade:	f3bf 8f6f 	isb	sy
 8009ae2:	f3bf 8f4f 	dsb	sy
 8009ae6:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009ae8:	4b12      	ldr	r3, [pc, #72]	; (8009b34 <vTaskStartScheduler+0x80>)
 8009aea:	f04f 32ff 	mov.w	r2, #4294967295
 8009aee:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009af0:	4b11      	ldr	r3, [pc, #68]	; (8009b38 <vTaskStartScheduler+0x84>)
 8009af2:	2201      	movs	r2, #1
 8009af4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8009af6:	4b11      	ldr	r3, [pc, #68]	; (8009b3c <vTaskStartScheduler+0x88>)
 8009af8:	2200      	movs	r2, #0
 8009afa:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009afc:	f000 fe84 	bl	800a808 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009b00:	e00d      	b.n	8009b1e <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b08:	d109      	bne.n	8009b1e <vTaskStartScheduler+0x6a>
 8009b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b0e:	f383 8811 	msr	BASEPRI, r3
 8009b12:	f3bf 8f6f 	isb	sy
 8009b16:	f3bf 8f4f 	dsb	sy
 8009b1a:	607b      	str	r3, [r7, #4]
 8009b1c:	e7fe      	b.n	8009b1c <vTaskStartScheduler+0x68>
}
 8009b1e:	bf00      	nop
 8009b20:	3710      	adds	r7, #16
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}
 8009b26:	bf00      	nop
 8009b28:	200001e4 	.word	0x200001e4
 8009b2c:	0800b1e0 	.word	0x0800b1e0
 8009b30:	0800a11d 	.word	0x0800a11d
 8009b34:	200001e0 	.word	0x200001e0
 8009b38:	200001cc 	.word	0x200001cc
 8009b3c:	200001c4 	.word	0x200001c4

08009b40 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009b40:	b480      	push	{r7}
 8009b42:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009b44:	4b04      	ldr	r3, [pc, #16]	; (8009b58 <vTaskSuspendAll+0x18>)
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	3301      	adds	r3, #1
 8009b4a:	4a03      	ldr	r2, [pc, #12]	; (8009b58 <vTaskSuspendAll+0x18>)
 8009b4c:	6013      	str	r3, [r2, #0]
}
 8009b4e:	bf00      	nop
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bc80      	pop	{r7}
 8009b54:	4770      	bx	lr
 8009b56:	bf00      	nop
 8009b58:	200001e8 	.word	0x200001e8

08009b5c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b084      	sub	sp, #16
 8009b60:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009b62:	2300      	movs	r3, #0
 8009b64:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009b66:	2300      	movs	r3, #0
 8009b68:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009b6a:	4b41      	ldr	r3, [pc, #260]	; (8009c70 <xTaskResumeAll+0x114>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d109      	bne.n	8009b86 <xTaskResumeAll+0x2a>
 8009b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b76:	f383 8811 	msr	BASEPRI, r3
 8009b7a:	f3bf 8f6f 	isb	sy
 8009b7e:	f3bf 8f4f 	dsb	sy
 8009b82:	603b      	str	r3, [r7, #0]
 8009b84:	e7fe      	b.n	8009b84 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009b86:	f000 feaf 	bl	800a8e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009b8a:	4b39      	ldr	r3, [pc, #228]	; (8009c70 <xTaskResumeAll+0x114>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	3b01      	subs	r3, #1
 8009b90:	4a37      	ldr	r2, [pc, #220]	; (8009c70 <xTaskResumeAll+0x114>)
 8009b92:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b94:	4b36      	ldr	r3, [pc, #216]	; (8009c70 <xTaskResumeAll+0x114>)
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d161      	bne.n	8009c60 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009b9c:	4b35      	ldr	r3, [pc, #212]	; (8009c74 <xTaskResumeAll+0x118>)
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d05d      	beq.n	8009c60 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009ba4:	e02e      	b.n	8009c04 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8009ba6:	4b34      	ldr	r3, [pc, #208]	; (8009c78 <xTaskResumeAll+0x11c>)
 8009ba8:	68db      	ldr	r3, [r3, #12]
 8009baa:	68db      	ldr	r3, [r3, #12]
 8009bac:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	3318      	adds	r3, #24
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	f7ff f885 	bl	8008cc2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	3304      	adds	r3, #4
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	f7ff f880 	bl	8008cc2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bc6:	2201      	movs	r2, #1
 8009bc8:	409a      	lsls	r2, r3
 8009bca:	4b2c      	ldr	r3, [pc, #176]	; (8009c7c <xTaskResumeAll+0x120>)
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	4313      	orrs	r3, r2
 8009bd0:	4a2a      	ldr	r2, [pc, #168]	; (8009c7c <xTaskResumeAll+0x120>)
 8009bd2:	6013      	str	r3, [r2, #0]
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bd8:	4613      	mov	r3, r2
 8009bda:	009b      	lsls	r3, r3, #2
 8009bdc:	4413      	add	r3, r2
 8009bde:	009b      	lsls	r3, r3, #2
 8009be0:	4a27      	ldr	r2, [pc, #156]	; (8009c80 <xTaskResumeAll+0x124>)
 8009be2:	441a      	add	r2, r3
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	3304      	adds	r3, #4
 8009be8:	4619      	mov	r1, r3
 8009bea:	4610      	mov	r0, r2
 8009bec:	f7ff f80e 	bl	8008c0c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bf4:	4b23      	ldr	r3, [pc, #140]	; (8009c84 <xTaskResumeAll+0x128>)
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bfa:	429a      	cmp	r2, r3
 8009bfc:	d302      	bcc.n	8009c04 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8009bfe:	4b22      	ldr	r3, [pc, #136]	; (8009c88 <xTaskResumeAll+0x12c>)
 8009c00:	2201      	movs	r2, #1
 8009c02:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009c04:	4b1c      	ldr	r3, [pc, #112]	; (8009c78 <xTaskResumeAll+0x11c>)
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d1cc      	bne.n	8009ba6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d001      	beq.n	8009c16 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009c12:	f000 fb19 	bl	800a248 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009c16:	4b1d      	ldr	r3, [pc, #116]	; (8009c8c <xTaskResumeAll+0x130>)
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d010      	beq.n	8009c44 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009c22:	f000 f837 	bl	8009c94 <xTaskIncrementTick>
 8009c26:	4603      	mov	r3, r0
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d002      	beq.n	8009c32 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8009c2c:	4b16      	ldr	r3, [pc, #88]	; (8009c88 <xTaskResumeAll+0x12c>)
 8009c2e:	2201      	movs	r2, #1
 8009c30:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	3b01      	subs	r3, #1
 8009c36:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d1f1      	bne.n	8009c22 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8009c3e:	4b13      	ldr	r3, [pc, #76]	; (8009c8c <xTaskResumeAll+0x130>)
 8009c40:	2200      	movs	r2, #0
 8009c42:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009c44:	4b10      	ldr	r3, [pc, #64]	; (8009c88 <xTaskResumeAll+0x12c>)
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d009      	beq.n	8009c60 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009c4c:	2301      	movs	r3, #1
 8009c4e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009c50:	4b0f      	ldr	r3, [pc, #60]	; (8009c90 <xTaskResumeAll+0x134>)
 8009c52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c56:	601a      	str	r2, [r3, #0]
 8009c58:	f3bf 8f4f 	dsb	sy
 8009c5c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009c60:	f000 fe70 	bl	800a944 <vPortExitCritical>

	return xAlreadyYielded;
 8009c64:	68bb      	ldr	r3, [r7, #8]
}
 8009c66:	4618      	mov	r0, r3
 8009c68:	3710      	adds	r7, #16
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bd80      	pop	{r7, pc}
 8009c6e:	bf00      	nop
 8009c70:	200001e8 	.word	0x200001e8
 8009c74:	200001c0 	.word	0x200001c0
 8009c78:	20000180 	.word	0x20000180
 8009c7c:	200001c8 	.word	0x200001c8
 8009c80:	200000c4 	.word	0x200000c4
 8009c84:	200000c0 	.word	0x200000c0
 8009c88:	200001d4 	.word	0x200001d4
 8009c8c:	200001d0 	.word	0x200001d0
 8009c90:	e000ed04 	.word	0xe000ed04

08009c94 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b086      	sub	sp, #24
 8009c98:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c9e:	4b50      	ldr	r3, [pc, #320]	; (8009de0 <xTaskIncrementTick+0x14c>)
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	f040 808c 	bne.w	8009dc0 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009ca8:	4b4e      	ldr	r3, [pc, #312]	; (8009de4 <xTaskIncrementTick+0x150>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	3301      	adds	r3, #1
 8009cae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009cb0:	4a4c      	ldr	r2, [pc, #304]	; (8009de4 <xTaskIncrementTick+0x150>)
 8009cb2:	693b      	ldr	r3, [r7, #16]
 8009cb4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009cb6:	693b      	ldr	r3, [r7, #16]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d11f      	bne.n	8009cfc <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8009cbc:	4b4a      	ldr	r3, [pc, #296]	; (8009de8 <xTaskIncrementTick+0x154>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d009      	beq.n	8009cda <xTaskIncrementTick+0x46>
 8009cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cca:	f383 8811 	msr	BASEPRI, r3
 8009cce:	f3bf 8f6f 	isb	sy
 8009cd2:	f3bf 8f4f 	dsb	sy
 8009cd6:	603b      	str	r3, [r7, #0]
 8009cd8:	e7fe      	b.n	8009cd8 <xTaskIncrementTick+0x44>
 8009cda:	4b43      	ldr	r3, [pc, #268]	; (8009de8 <xTaskIncrementTick+0x154>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	60fb      	str	r3, [r7, #12]
 8009ce0:	4b42      	ldr	r3, [pc, #264]	; (8009dec <xTaskIncrementTick+0x158>)
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	4a40      	ldr	r2, [pc, #256]	; (8009de8 <xTaskIncrementTick+0x154>)
 8009ce6:	6013      	str	r3, [r2, #0]
 8009ce8:	4a40      	ldr	r2, [pc, #256]	; (8009dec <xTaskIncrementTick+0x158>)
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	6013      	str	r3, [r2, #0]
 8009cee:	4b40      	ldr	r3, [pc, #256]	; (8009df0 <xTaskIncrementTick+0x15c>)
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	3301      	adds	r3, #1
 8009cf4:	4a3e      	ldr	r2, [pc, #248]	; (8009df0 <xTaskIncrementTick+0x15c>)
 8009cf6:	6013      	str	r3, [r2, #0]
 8009cf8:	f000 faa6 	bl	800a248 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009cfc:	4b3d      	ldr	r3, [pc, #244]	; (8009df4 <xTaskIncrementTick+0x160>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	693a      	ldr	r2, [r7, #16]
 8009d02:	429a      	cmp	r2, r3
 8009d04:	d34d      	bcc.n	8009da2 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009d06:	4b38      	ldr	r3, [pc, #224]	; (8009de8 <xTaskIncrementTick+0x154>)
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d101      	bne.n	8009d14 <xTaskIncrementTick+0x80>
 8009d10:	2301      	movs	r3, #1
 8009d12:	e000      	b.n	8009d16 <xTaskIncrementTick+0x82>
 8009d14:	2300      	movs	r3, #0
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d004      	beq.n	8009d24 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d1a:	4b36      	ldr	r3, [pc, #216]	; (8009df4 <xTaskIncrementTick+0x160>)
 8009d1c:	f04f 32ff 	mov.w	r2, #4294967295
 8009d20:	601a      	str	r2, [r3, #0]
					break;
 8009d22:	e03e      	b.n	8009da2 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009d24:	4b30      	ldr	r3, [pc, #192]	; (8009de8 <xTaskIncrementTick+0x154>)
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	68db      	ldr	r3, [r3, #12]
 8009d2a:	68db      	ldr	r3, [r3, #12]
 8009d2c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	685b      	ldr	r3, [r3, #4]
 8009d32:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009d34:	693a      	ldr	r2, [r7, #16]
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	429a      	cmp	r2, r3
 8009d3a:	d203      	bcs.n	8009d44 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009d3c:	4a2d      	ldr	r2, [pc, #180]	; (8009df4 <xTaskIncrementTick+0x160>)
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6013      	str	r3, [r2, #0]
						break;
 8009d42:	e02e      	b.n	8009da2 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	3304      	adds	r3, #4
 8009d48:	4618      	mov	r0, r3
 8009d4a:	f7fe ffba 	bl	8008cc2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009d4e:	68bb      	ldr	r3, [r7, #8]
 8009d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d004      	beq.n	8009d60 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009d56:	68bb      	ldr	r3, [r7, #8]
 8009d58:	3318      	adds	r3, #24
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	f7fe ffb1 	bl	8008cc2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d64:	2201      	movs	r2, #1
 8009d66:	409a      	lsls	r2, r3
 8009d68:	4b23      	ldr	r3, [pc, #140]	; (8009df8 <xTaskIncrementTick+0x164>)
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	4313      	orrs	r3, r2
 8009d6e:	4a22      	ldr	r2, [pc, #136]	; (8009df8 <xTaskIncrementTick+0x164>)
 8009d70:	6013      	str	r3, [r2, #0]
 8009d72:	68bb      	ldr	r3, [r7, #8]
 8009d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d76:	4613      	mov	r3, r2
 8009d78:	009b      	lsls	r3, r3, #2
 8009d7a:	4413      	add	r3, r2
 8009d7c:	009b      	lsls	r3, r3, #2
 8009d7e:	4a1f      	ldr	r2, [pc, #124]	; (8009dfc <xTaskIncrementTick+0x168>)
 8009d80:	441a      	add	r2, r3
 8009d82:	68bb      	ldr	r3, [r7, #8]
 8009d84:	3304      	adds	r3, #4
 8009d86:	4619      	mov	r1, r3
 8009d88:	4610      	mov	r0, r2
 8009d8a:	f7fe ff3f 	bl	8008c0c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d92:	4b1b      	ldr	r3, [pc, #108]	; (8009e00 <xTaskIncrementTick+0x16c>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d98:	429a      	cmp	r2, r3
 8009d9a:	d3b4      	bcc.n	8009d06 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009da0:	e7b1      	b.n	8009d06 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009da2:	4b17      	ldr	r3, [pc, #92]	; (8009e00 <xTaskIncrementTick+0x16c>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009da8:	4914      	ldr	r1, [pc, #80]	; (8009dfc <xTaskIncrementTick+0x168>)
 8009daa:	4613      	mov	r3, r2
 8009dac:	009b      	lsls	r3, r3, #2
 8009dae:	4413      	add	r3, r2
 8009db0:	009b      	lsls	r3, r3, #2
 8009db2:	440b      	add	r3, r1
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	2b01      	cmp	r3, #1
 8009db8:	d907      	bls.n	8009dca <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8009dba:	2301      	movs	r3, #1
 8009dbc:	617b      	str	r3, [r7, #20]
 8009dbe:	e004      	b.n	8009dca <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009dc0:	4b10      	ldr	r3, [pc, #64]	; (8009e04 <xTaskIncrementTick+0x170>)
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	3301      	adds	r3, #1
 8009dc6:	4a0f      	ldr	r2, [pc, #60]	; (8009e04 <xTaskIncrementTick+0x170>)
 8009dc8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009dca:	4b0f      	ldr	r3, [pc, #60]	; (8009e08 <xTaskIncrementTick+0x174>)
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d001      	beq.n	8009dd6 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8009dd2:	2301      	movs	r3, #1
 8009dd4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009dd6:	697b      	ldr	r3, [r7, #20]
}
 8009dd8:	4618      	mov	r0, r3
 8009dda:	3718      	adds	r7, #24
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bd80      	pop	{r7, pc}
 8009de0:	200001e8 	.word	0x200001e8
 8009de4:	200001c4 	.word	0x200001c4
 8009de8:	20000178 	.word	0x20000178
 8009dec:	2000017c 	.word	0x2000017c
 8009df0:	200001d8 	.word	0x200001d8
 8009df4:	200001e0 	.word	0x200001e0
 8009df8:	200001c8 	.word	0x200001c8
 8009dfc:	200000c4 	.word	0x200000c4
 8009e00:	200000c0 	.word	0x200000c0
 8009e04:	200001d0 	.word	0x200001d0
 8009e08:	200001d4 	.word	0x200001d4

08009e0c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b088      	sub	sp, #32
 8009e10:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009e12:	4b39      	ldr	r3, [pc, #228]	; (8009ef8 <vTaskSwitchContext+0xec>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d003      	beq.n	8009e22 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009e1a:	4b38      	ldr	r3, [pc, #224]	; (8009efc <vTaskSwitchContext+0xf0>)
 8009e1c:	2201      	movs	r2, #1
 8009e1e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009e20:	e065      	b.n	8009eee <vTaskSwitchContext+0xe2>
		xYieldPending = pdFALSE;
 8009e22:	4b36      	ldr	r3, [pc, #216]	; (8009efc <vTaskSwitchContext+0xf0>)
 8009e24:	2200      	movs	r2, #0
 8009e26:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8009e28:	4b35      	ldr	r3, [pc, #212]	; (8009f00 <vTaskSwitchContext+0xf4>)
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e2e:	61fb      	str	r3, [r7, #28]
 8009e30:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8009e34:	61bb      	str	r3, [r7, #24]
 8009e36:	69fb      	ldr	r3, [r7, #28]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	69ba      	ldr	r2, [r7, #24]
 8009e3c:	429a      	cmp	r2, r3
 8009e3e:	d111      	bne.n	8009e64 <vTaskSwitchContext+0x58>
 8009e40:	69fb      	ldr	r3, [r7, #28]
 8009e42:	3304      	adds	r3, #4
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	69ba      	ldr	r2, [r7, #24]
 8009e48:	429a      	cmp	r2, r3
 8009e4a:	d10b      	bne.n	8009e64 <vTaskSwitchContext+0x58>
 8009e4c:	69fb      	ldr	r3, [r7, #28]
 8009e4e:	3308      	adds	r3, #8
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	69ba      	ldr	r2, [r7, #24]
 8009e54:	429a      	cmp	r2, r3
 8009e56:	d105      	bne.n	8009e64 <vTaskSwitchContext+0x58>
 8009e58:	69fb      	ldr	r3, [r7, #28]
 8009e5a:	330c      	adds	r3, #12
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	69ba      	ldr	r2, [r7, #24]
 8009e60:	429a      	cmp	r2, r3
 8009e62:	d008      	beq.n	8009e76 <vTaskSwitchContext+0x6a>
 8009e64:	4b26      	ldr	r3, [pc, #152]	; (8009f00 <vTaskSwitchContext+0xf4>)
 8009e66:	681a      	ldr	r2, [r3, #0]
 8009e68:	4b25      	ldr	r3, [pc, #148]	; (8009f00 <vTaskSwitchContext+0xf4>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	3334      	adds	r3, #52	; 0x34
 8009e6e:	4619      	mov	r1, r3
 8009e70:	4610      	mov	r0, r2
 8009e72:	f7f6 fb35 	bl	80004e0 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8009e76:	4b23      	ldr	r3, [pc, #140]	; (8009f04 <vTaskSwitchContext+0xf8>)
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	fab3 f383 	clz	r3, r3
 8009e82:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009e84:	7afb      	ldrb	r3, [r7, #11]
 8009e86:	f1c3 031f 	rsb	r3, r3, #31
 8009e8a:	617b      	str	r3, [r7, #20]
 8009e8c:	491e      	ldr	r1, [pc, #120]	; (8009f08 <vTaskSwitchContext+0xfc>)
 8009e8e:	697a      	ldr	r2, [r7, #20]
 8009e90:	4613      	mov	r3, r2
 8009e92:	009b      	lsls	r3, r3, #2
 8009e94:	4413      	add	r3, r2
 8009e96:	009b      	lsls	r3, r3, #2
 8009e98:	440b      	add	r3, r1
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d109      	bne.n	8009eb4 <vTaskSwitchContext+0xa8>
	__asm volatile
 8009ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ea4:	f383 8811 	msr	BASEPRI, r3
 8009ea8:	f3bf 8f6f 	isb	sy
 8009eac:	f3bf 8f4f 	dsb	sy
 8009eb0:	607b      	str	r3, [r7, #4]
 8009eb2:	e7fe      	b.n	8009eb2 <vTaskSwitchContext+0xa6>
 8009eb4:	697a      	ldr	r2, [r7, #20]
 8009eb6:	4613      	mov	r3, r2
 8009eb8:	009b      	lsls	r3, r3, #2
 8009eba:	4413      	add	r3, r2
 8009ebc:	009b      	lsls	r3, r3, #2
 8009ebe:	4a12      	ldr	r2, [pc, #72]	; (8009f08 <vTaskSwitchContext+0xfc>)
 8009ec0:	4413      	add	r3, r2
 8009ec2:	613b      	str	r3, [r7, #16]
 8009ec4:	693b      	ldr	r3, [r7, #16]
 8009ec6:	685b      	ldr	r3, [r3, #4]
 8009ec8:	685a      	ldr	r2, [r3, #4]
 8009eca:	693b      	ldr	r3, [r7, #16]
 8009ecc:	605a      	str	r2, [r3, #4]
 8009ece:	693b      	ldr	r3, [r7, #16]
 8009ed0:	685a      	ldr	r2, [r3, #4]
 8009ed2:	693b      	ldr	r3, [r7, #16]
 8009ed4:	3308      	adds	r3, #8
 8009ed6:	429a      	cmp	r2, r3
 8009ed8:	d104      	bne.n	8009ee4 <vTaskSwitchContext+0xd8>
 8009eda:	693b      	ldr	r3, [r7, #16]
 8009edc:	685b      	ldr	r3, [r3, #4]
 8009ede:	685a      	ldr	r2, [r3, #4]
 8009ee0:	693b      	ldr	r3, [r7, #16]
 8009ee2:	605a      	str	r2, [r3, #4]
 8009ee4:	693b      	ldr	r3, [r7, #16]
 8009ee6:	685b      	ldr	r3, [r3, #4]
 8009ee8:	68db      	ldr	r3, [r3, #12]
 8009eea:	4a05      	ldr	r2, [pc, #20]	; (8009f00 <vTaskSwitchContext+0xf4>)
 8009eec:	6013      	str	r3, [r2, #0]
}
 8009eee:	bf00      	nop
 8009ef0:	3720      	adds	r7, #32
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}
 8009ef6:	bf00      	nop
 8009ef8:	200001e8 	.word	0x200001e8
 8009efc:	200001d4 	.word	0x200001d4
 8009f00:	200000c0 	.word	0x200000c0
 8009f04:	200001c8 	.word	0x200001c8
 8009f08:	200000c4 	.word	0x200000c4

08009f0c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b084      	sub	sp, #16
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
 8009f14:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d109      	bne.n	8009f30 <vTaskPlaceOnEventList+0x24>
 8009f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f20:	f383 8811 	msr	BASEPRI, r3
 8009f24:	f3bf 8f6f 	isb	sy
 8009f28:	f3bf 8f4f 	dsb	sy
 8009f2c:	60fb      	str	r3, [r7, #12]
 8009f2e:	e7fe      	b.n	8009f2e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009f30:	4b07      	ldr	r3, [pc, #28]	; (8009f50 <vTaskPlaceOnEventList+0x44>)
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	3318      	adds	r3, #24
 8009f36:	4619      	mov	r1, r3
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	f7fe fe8a 	bl	8008c52 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009f3e:	2101      	movs	r1, #1
 8009f40:	6838      	ldr	r0, [r7, #0]
 8009f42:	f000 fb7f 	bl	800a644 <prvAddCurrentTaskToDelayedList>
}
 8009f46:	bf00      	nop
 8009f48:	3710      	adds	r7, #16
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	bd80      	pop	{r7, pc}
 8009f4e:	bf00      	nop
 8009f50:	200000c0 	.word	0x200000c0

08009f54 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b086      	sub	sp, #24
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	68db      	ldr	r3, [r3, #12]
 8009f60:	68db      	ldr	r3, [r3, #12]
 8009f62:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009f64:	693b      	ldr	r3, [r7, #16]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d109      	bne.n	8009f7e <xTaskRemoveFromEventList+0x2a>
 8009f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f6e:	f383 8811 	msr	BASEPRI, r3
 8009f72:	f3bf 8f6f 	isb	sy
 8009f76:	f3bf 8f4f 	dsb	sy
 8009f7a:	60fb      	str	r3, [r7, #12]
 8009f7c:	e7fe      	b.n	8009f7c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009f7e:	693b      	ldr	r3, [r7, #16]
 8009f80:	3318      	adds	r3, #24
 8009f82:	4618      	mov	r0, r3
 8009f84:	f7fe fe9d 	bl	8008cc2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f88:	4b1d      	ldr	r3, [pc, #116]	; (800a000 <xTaskRemoveFromEventList+0xac>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d11c      	bne.n	8009fca <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009f90:	693b      	ldr	r3, [r7, #16]
 8009f92:	3304      	adds	r3, #4
 8009f94:	4618      	mov	r0, r3
 8009f96:	f7fe fe94 	bl	8008cc2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009f9a:	693b      	ldr	r3, [r7, #16]
 8009f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f9e:	2201      	movs	r2, #1
 8009fa0:	409a      	lsls	r2, r3
 8009fa2:	4b18      	ldr	r3, [pc, #96]	; (800a004 <xTaskRemoveFromEventList+0xb0>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	4313      	orrs	r3, r2
 8009fa8:	4a16      	ldr	r2, [pc, #88]	; (800a004 <xTaskRemoveFromEventList+0xb0>)
 8009faa:	6013      	str	r3, [r2, #0]
 8009fac:	693b      	ldr	r3, [r7, #16]
 8009fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fb0:	4613      	mov	r3, r2
 8009fb2:	009b      	lsls	r3, r3, #2
 8009fb4:	4413      	add	r3, r2
 8009fb6:	009b      	lsls	r3, r3, #2
 8009fb8:	4a13      	ldr	r2, [pc, #76]	; (800a008 <xTaskRemoveFromEventList+0xb4>)
 8009fba:	441a      	add	r2, r3
 8009fbc:	693b      	ldr	r3, [r7, #16]
 8009fbe:	3304      	adds	r3, #4
 8009fc0:	4619      	mov	r1, r3
 8009fc2:	4610      	mov	r0, r2
 8009fc4:	f7fe fe22 	bl	8008c0c <vListInsertEnd>
 8009fc8:	e005      	b.n	8009fd6 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009fca:	693b      	ldr	r3, [r7, #16]
 8009fcc:	3318      	adds	r3, #24
 8009fce:	4619      	mov	r1, r3
 8009fd0:	480e      	ldr	r0, [pc, #56]	; (800a00c <xTaskRemoveFromEventList+0xb8>)
 8009fd2:	f7fe fe1b 	bl	8008c0c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009fd6:	693b      	ldr	r3, [r7, #16]
 8009fd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fda:	4b0d      	ldr	r3, [pc, #52]	; (800a010 <xTaskRemoveFromEventList+0xbc>)
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fe0:	429a      	cmp	r2, r3
 8009fe2:	d905      	bls.n	8009ff0 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009fe8:	4b0a      	ldr	r3, [pc, #40]	; (800a014 <xTaskRemoveFromEventList+0xc0>)
 8009fea:	2201      	movs	r2, #1
 8009fec:	601a      	str	r2, [r3, #0]
 8009fee:	e001      	b.n	8009ff4 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8009ff4:	697b      	ldr	r3, [r7, #20]
}
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	3718      	adds	r7, #24
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	bd80      	pop	{r7, pc}
 8009ffe:	bf00      	nop
 800a000:	200001e8 	.word	0x200001e8
 800a004:	200001c8 	.word	0x200001c8
 800a008:	200000c4 	.word	0x200000c4
 800a00c:	20000180 	.word	0x20000180
 800a010:	200000c0 	.word	0x200000c0
 800a014:	200001d4 	.word	0x200001d4

0800a018 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a018:	b480      	push	{r7}
 800a01a:	b083      	sub	sp, #12
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a020:	4b06      	ldr	r3, [pc, #24]	; (800a03c <vTaskInternalSetTimeOutState+0x24>)
 800a022:	681a      	ldr	r2, [r3, #0]
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a028:	4b05      	ldr	r3, [pc, #20]	; (800a040 <vTaskInternalSetTimeOutState+0x28>)
 800a02a:	681a      	ldr	r2, [r3, #0]
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	605a      	str	r2, [r3, #4]
}
 800a030:	bf00      	nop
 800a032:	370c      	adds	r7, #12
 800a034:	46bd      	mov	sp, r7
 800a036:	bc80      	pop	{r7}
 800a038:	4770      	bx	lr
 800a03a:	bf00      	nop
 800a03c:	200001d8 	.word	0x200001d8
 800a040:	200001c4 	.word	0x200001c4

0800a044 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b088      	sub	sp, #32
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
 800a04c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d109      	bne.n	800a068 <xTaskCheckForTimeOut+0x24>
 800a054:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a058:	f383 8811 	msr	BASEPRI, r3
 800a05c:	f3bf 8f6f 	isb	sy
 800a060:	f3bf 8f4f 	dsb	sy
 800a064:	613b      	str	r3, [r7, #16]
 800a066:	e7fe      	b.n	800a066 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d109      	bne.n	800a082 <xTaskCheckForTimeOut+0x3e>
 800a06e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a072:	f383 8811 	msr	BASEPRI, r3
 800a076:	f3bf 8f6f 	isb	sy
 800a07a:	f3bf 8f4f 	dsb	sy
 800a07e:	60fb      	str	r3, [r7, #12]
 800a080:	e7fe      	b.n	800a080 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800a082:	f000 fc31 	bl	800a8e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a086:	4b1d      	ldr	r3, [pc, #116]	; (800a0fc <xTaskCheckForTimeOut+0xb8>)
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	685b      	ldr	r3, [r3, #4]
 800a090:	69ba      	ldr	r2, [r7, #24]
 800a092:	1ad3      	subs	r3, r2, r3
 800a094:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a09e:	d102      	bne.n	800a0a6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	61fb      	str	r3, [r7, #28]
 800a0a4:	e023      	b.n	800a0ee <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681a      	ldr	r2, [r3, #0]
 800a0aa:	4b15      	ldr	r3, [pc, #84]	; (800a100 <xTaskCheckForTimeOut+0xbc>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	429a      	cmp	r2, r3
 800a0b0:	d007      	beq.n	800a0c2 <xTaskCheckForTimeOut+0x7e>
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	685b      	ldr	r3, [r3, #4]
 800a0b6:	69ba      	ldr	r2, [r7, #24]
 800a0b8:	429a      	cmp	r2, r3
 800a0ba:	d302      	bcc.n	800a0c2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a0bc:	2301      	movs	r3, #1
 800a0be:	61fb      	str	r3, [r7, #28]
 800a0c0:	e015      	b.n	800a0ee <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	697a      	ldr	r2, [r7, #20]
 800a0c8:	429a      	cmp	r2, r3
 800a0ca:	d20b      	bcs.n	800a0e4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	681a      	ldr	r2, [r3, #0]
 800a0d0:	697b      	ldr	r3, [r7, #20]
 800a0d2:	1ad2      	subs	r2, r2, r3
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	f7ff ff9d 	bl	800a018 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a0de:	2300      	movs	r3, #0
 800a0e0:	61fb      	str	r3, [r7, #28]
 800a0e2:	e004      	b.n	800a0ee <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a0ea:	2301      	movs	r3, #1
 800a0ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a0ee:	f000 fc29 	bl	800a944 <vPortExitCritical>

	return xReturn;
 800a0f2:	69fb      	ldr	r3, [r7, #28]
}
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	3720      	adds	r7, #32
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	bd80      	pop	{r7, pc}
 800a0fc:	200001c4 	.word	0x200001c4
 800a100:	200001d8 	.word	0x200001d8

0800a104 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a104:	b480      	push	{r7}
 800a106:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a108:	4b03      	ldr	r3, [pc, #12]	; (800a118 <vTaskMissedYield+0x14>)
 800a10a:	2201      	movs	r2, #1
 800a10c:	601a      	str	r2, [r3, #0]
}
 800a10e:	bf00      	nop
 800a110:	46bd      	mov	sp, r7
 800a112:	bc80      	pop	{r7}
 800a114:	4770      	bx	lr
 800a116:	bf00      	nop
 800a118:	200001d4 	.word	0x200001d4

0800a11c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b082      	sub	sp, #8
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a124:	f000 f854 	bl	800a1d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a128:	4b07      	ldr	r3, [pc, #28]	; (800a148 <prvIdleTask+0x2c>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	2b01      	cmp	r3, #1
 800a12e:	d907      	bls.n	800a140 <prvIdleTask+0x24>
			{
				taskYIELD();
 800a130:	4b06      	ldr	r3, [pc, #24]	; (800a14c <prvIdleTask+0x30>)
 800a132:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a136:	601a      	str	r2, [r3, #0]
 800a138:	f3bf 8f4f 	dsb	sy
 800a13c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800a140:	f7f6 f9c8 	bl	80004d4 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800a144:	e7ee      	b.n	800a124 <prvIdleTask+0x8>
 800a146:	bf00      	nop
 800a148:	200000c4 	.word	0x200000c4
 800a14c:	e000ed04 	.word	0xe000ed04

0800a150 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b082      	sub	sp, #8
 800a154:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a156:	2300      	movs	r3, #0
 800a158:	607b      	str	r3, [r7, #4]
 800a15a:	e00c      	b.n	800a176 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a15c:	687a      	ldr	r2, [r7, #4]
 800a15e:	4613      	mov	r3, r2
 800a160:	009b      	lsls	r3, r3, #2
 800a162:	4413      	add	r3, r2
 800a164:	009b      	lsls	r3, r3, #2
 800a166:	4a12      	ldr	r2, [pc, #72]	; (800a1b0 <prvInitialiseTaskLists+0x60>)
 800a168:	4413      	add	r3, r2
 800a16a:	4618      	mov	r0, r3
 800a16c:	f7fe fd23 	bl	8008bb6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	3301      	adds	r3, #1
 800a174:	607b      	str	r3, [r7, #4]
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	2b06      	cmp	r3, #6
 800a17a:	d9ef      	bls.n	800a15c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a17c:	480d      	ldr	r0, [pc, #52]	; (800a1b4 <prvInitialiseTaskLists+0x64>)
 800a17e:	f7fe fd1a 	bl	8008bb6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a182:	480d      	ldr	r0, [pc, #52]	; (800a1b8 <prvInitialiseTaskLists+0x68>)
 800a184:	f7fe fd17 	bl	8008bb6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a188:	480c      	ldr	r0, [pc, #48]	; (800a1bc <prvInitialiseTaskLists+0x6c>)
 800a18a:	f7fe fd14 	bl	8008bb6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a18e:	480c      	ldr	r0, [pc, #48]	; (800a1c0 <prvInitialiseTaskLists+0x70>)
 800a190:	f7fe fd11 	bl	8008bb6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a194:	480b      	ldr	r0, [pc, #44]	; (800a1c4 <prvInitialiseTaskLists+0x74>)
 800a196:	f7fe fd0e 	bl	8008bb6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a19a:	4b0b      	ldr	r3, [pc, #44]	; (800a1c8 <prvInitialiseTaskLists+0x78>)
 800a19c:	4a05      	ldr	r2, [pc, #20]	; (800a1b4 <prvInitialiseTaskLists+0x64>)
 800a19e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a1a0:	4b0a      	ldr	r3, [pc, #40]	; (800a1cc <prvInitialiseTaskLists+0x7c>)
 800a1a2:	4a05      	ldr	r2, [pc, #20]	; (800a1b8 <prvInitialiseTaskLists+0x68>)
 800a1a4:	601a      	str	r2, [r3, #0]
}
 800a1a6:	bf00      	nop
 800a1a8:	3708      	adds	r7, #8
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bd80      	pop	{r7, pc}
 800a1ae:	bf00      	nop
 800a1b0:	200000c4 	.word	0x200000c4
 800a1b4:	20000150 	.word	0x20000150
 800a1b8:	20000164 	.word	0x20000164
 800a1bc:	20000180 	.word	0x20000180
 800a1c0:	20000194 	.word	0x20000194
 800a1c4:	200001ac 	.word	0x200001ac
 800a1c8:	20000178 	.word	0x20000178
 800a1cc:	2000017c 	.word	0x2000017c

0800a1d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b082      	sub	sp, #8
 800a1d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a1d6:	e019      	b.n	800a20c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a1d8:	f000 fb86 	bl	800a8e8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800a1dc:	4b0f      	ldr	r3, [pc, #60]	; (800a21c <prvCheckTasksWaitingTermination+0x4c>)
 800a1de:	68db      	ldr	r3, [r3, #12]
 800a1e0:	68db      	ldr	r3, [r3, #12]
 800a1e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	3304      	adds	r3, #4
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	f7fe fd6a 	bl	8008cc2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a1ee:	4b0c      	ldr	r3, [pc, #48]	; (800a220 <prvCheckTasksWaitingTermination+0x50>)
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	3b01      	subs	r3, #1
 800a1f4:	4a0a      	ldr	r2, [pc, #40]	; (800a220 <prvCheckTasksWaitingTermination+0x50>)
 800a1f6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a1f8:	4b0a      	ldr	r3, [pc, #40]	; (800a224 <prvCheckTasksWaitingTermination+0x54>)
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	3b01      	subs	r3, #1
 800a1fe:	4a09      	ldr	r2, [pc, #36]	; (800a224 <prvCheckTasksWaitingTermination+0x54>)
 800a200:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a202:	f000 fb9f 	bl	800a944 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a206:	6878      	ldr	r0, [r7, #4]
 800a208:	f000 f80e 	bl	800a228 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a20c:	4b05      	ldr	r3, [pc, #20]	; (800a224 <prvCheckTasksWaitingTermination+0x54>)
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d1e1      	bne.n	800a1d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a214:	bf00      	nop
 800a216:	3708      	adds	r7, #8
 800a218:	46bd      	mov	sp, r7
 800a21a:	bd80      	pop	{r7, pc}
 800a21c:	20000194 	.word	0x20000194
 800a220:	200001c0 	.word	0x200001c0
 800a224:	200001a8 	.word	0x200001a8

0800a228 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b082      	sub	sp, #8
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a234:	4618      	mov	r0, r3
 800a236:	f000 fd13 	bl	800ac60 <vPortFree>
			vPortFree( pxTCB );
 800a23a:	6878      	ldr	r0, [r7, #4]
 800a23c:	f000 fd10 	bl	800ac60 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a240:	bf00      	nop
 800a242:	3708      	adds	r7, #8
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}

0800a248 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a248:	b480      	push	{r7}
 800a24a:	b083      	sub	sp, #12
 800a24c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a24e:	4b0e      	ldr	r3, [pc, #56]	; (800a288 <prvResetNextTaskUnblockTime+0x40>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d101      	bne.n	800a25c <prvResetNextTaskUnblockTime+0x14>
 800a258:	2301      	movs	r3, #1
 800a25a:	e000      	b.n	800a25e <prvResetNextTaskUnblockTime+0x16>
 800a25c:	2300      	movs	r3, #0
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d004      	beq.n	800a26c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a262:	4b0a      	ldr	r3, [pc, #40]	; (800a28c <prvResetNextTaskUnblockTime+0x44>)
 800a264:	f04f 32ff 	mov.w	r2, #4294967295
 800a268:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a26a:	e008      	b.n	800a27e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a26c:	4b06      	ldr	r3, [pc, #24]	; (800a288 <prvResetNextTaskUnblockTime+0x40>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	68db      	ldr	r3, [r3, #12]
 800a272:	68db      	ldr	r3, [r3, #12]
 800a274:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	685b      	ldr	r3, [r3, #4]
 800a27a:	4a04      	ldr	r2, [pc, #16]	; (800a28c <prvResetNextTaskUnblockTime+0x44>)
 800a27c:	6013      	str	r3, [r2, #0]
}
 800a27e:	bf00      	nop
 800a280:	370c      	adds	r7, #12
 800a282:	46bd      	mov	sp, r7
 800a284:	bc80      	pop	{r7}
 800a286:	4770      	bx	lr
 800a288:	20000178 	.word	0x20000178
 800a28c:	200001e0 	.word	0x200001e0

0800a290 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a290:	b480      	push	{r7}
 800a292:	b083      	sub	sp, #12
 800a294:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a296:	4b0b      	ldr	r3, [pc, #44]	; (800a2c4 <xTaskGetSchedulerState+0x34>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d102      	bne.n	800a2a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a29e:	2301      	movs	r3, #1
 800a2a0:	607b      	str	r3, [r7, #4]
 800a2a2:	e008      	b.n	800a2b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a2a4:	4b08      	ldr	r3, [pc, #32]	; (800a2c8 <xTaskGetSchedulerState+0x38>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d102      	bne.n	800a2b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a2ac:	2302      	movs	r3, #2
 800a2ae:	607b      	str	r3, [r7, #4]
 800a2b0:	e001      	b.n	800a2b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a2b6:	687b      	ldr	r3, [r7, #4]
	}
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	370c      	adds	r7, #12
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	bc80      	pop	{r7}
 800a2c0:	4770      	bx	lr
 800a2c2:	bf00      	nop
 800a2c4:	200001cc 	.word	0x200001cc
 800a2c8:	200001e8 	.word	0x200001e8

0800a2cc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b084      	sub	sp, #16
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a2d8:	2300      	movs	r3, #0
 800a2da:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d06e      	beq.n	800a3c0 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a2e2:	68bb      	ldr	r3, [r7, #8]
 800a2e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2e6:	4b39      	ldr	r3, [pc, #228]	; (800a3cc <xTaskPriorityInherit+0x100>)
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2ec:	429a      	cmp	r2, r3
 800a2ee:	d25e      	bcs.n	800a3ae <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a2f0:	68bb      	ldr	r3, [r7, #8]
 800a2f2:	699b      	ldr	r3, [r3, #24]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	db06      	blt.n	800a306 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a2f8:	4b34      	ldr	r3, [pc, #208]	; (800a3cc <xTaskPriorityInherit+0x100>)
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2fe:	f1c3 0207 	rsb	r2, r3, #7
 800a302:	68bb      	ldr	r3, [r7, #8]
 800a304:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a306:	68bb      	ldr	r3, [r7, #8]
 800a308:	6959      	ldr	r1, [r3, #20]
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a30e:	4613      	mov	r3, r2
 800a310:	009b      	lsls	r3, r3, #2
 800a312:	4413      	add	r3, r2
 800a314:	009b      	lsls	r3, r3, #2
 800a316:	4a2e      	ldr	r2, [pc, #184]	; (800a3d0 <xTaskPriorityInherit+0x104>)
 800a318:	4413      	add	r3, r2
 800a31a:	4299      	cmp	r1, r3
 800a31c:	d101      	bne.n	800a322 <xTaskPriorityInherit+0x56>
 800a31e:	2301      	movs	r3, #1
 800a320:	e000      	b.n	800a324 <xTaskPriorityInherit+0x58>
 800a322:	2300      	movs	r3, #0
 800a324:	2b00      	cmp	r3, #0
 800a326:	d03a      	beq.n	800a39e <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	3304      	adds	r3, #4
 800a32c:	4618      	mov	r0, r3
 800a32e:	f7fe fcc8 	bl	8008cc2 <uxListRemove>
 800a332:	4603      	mov	r3, r0
 800a334:	2b00      	cmp	r3, #0
 800a336:	d115      	bne.n	800a364 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a33c:	4924      	ldr	r1, [pc, #144]	; (800a3d0 <xTaskPriorityInherit+0x104>)
 800a33e:	4613      	mov	r3, r2
 800a340:	009b      	lsls	r3, r3, #2
 800a342:	4413      	add	r3, r2
 800a344:	009b      	lsls	r3, r3, #2
 800a346:	440b      	add	r3, r1
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d10a      	bne.n	800a364 <xTaskPriorityInherit+0x98>
 800a34e:	68bb      	ldr	r3, [r7, #8]
 800a350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a352:	2201      	movs	r2, #1
 800a354:	fa02 f303 	lsl.w	r3, r2, r3
 800a358:	43da      	mvns	r2, r3
 800a35a:	4b1e      	ldr	r3, [pc, #120]	; (800a3d4 <xTaskPriorityInherit+0x108>)
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	4013      	ands	r3, r2
 800a360:	4a1c      	ldr	r2, [pc, #112]	; (800a3d4 <xTaskPriorityInherit+0x108>)
 800a362:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a364:	4b19      	ldr	r3, [pc, #100]	; (800a3cc <xTaskPriorityInherit+0x100>)
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a36a:	68bb      	ldr	r3, [r7, #8]
 800a36c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a36e:	68bb      	ldr	r3, [r7, #8]
 800a370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a372:	2201      	movs	r2, #1
 800a374:	409a      	lsls	r2, r3
 800a376:	4b17      	ldr	r3, [pc, #92]	; (800a3d4 <xTaskPriorityInherit+0x108>)
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	4313      	orrs	r3, r2
 800a37c:	4a15      	ldr	r2, [pc, #84]	; (800a3d4 <xTaskPriorityInherit+0x108>)
 800a37e:	6013      	str	r3, [r2, #0]
 800a380:	68bb      	ldr	r3, [r7, #8]
 800a382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a384:	4613      	mov	r3, r2
 800a386:	009b      	lsls	r3, r3, #2
 800a388:	4413      	add	r3, r2
 800a38a:	009b      	lsls	r3, r3, #2
 800a38c:	4a10      	ldr	r2, [pc, #64]	; (800a3d0 <xTaskPriorityInherit+0x104>)
 800a38e:	441a      	add	r2, r3
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	3304      	adds	r3, #4
 800a394:	4619      	mov	r1, r3
 800a396:	4610      	mov	r0, r2
 800a398:	f7fe fc38 	bl	8008c0c <vListInsertEnd>
 800a39c:	e004      	b.n	800a3a8 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a39e:	4b0b      	ldr	r3, [pc, #44]	; (800a3cc <xTaskPriorityInherit+0x100>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3a4:	68bb      	ldr	r3, [r7, #8]
 800a3a6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a3a8:	2301      	movs	r3, #1
 800a3aa:	60fb      	str	r3, [r7, #12]
 800a3ac:	e008      	b.n	800a3c0 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a3b2:	4b06      	ldr	r3, [pc, #24]	; (800a3cc <xTaskPriorityInherit+0x100>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3b8:	429a      	cmp	r2, r3
 800a3ba:	d201      	bcs.n	800a3c0 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a3bc:	2301      	movs	r3, #1
 800a3be:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
	}
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	3710      	adds	r7, #16
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bd80      	pop	{r7, pc}
 800a3ca:	bf00      	nop
 800a3cc:	200000c0 	.word	0x200000c0
 800a3d0:	200000c4 	.word	0x200000c4
 800a3d4:	200001c8 	.word	0x200001c8

0800a3d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b086      	sub	sp, #24
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d06c      	beq.n	800a4c8 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a3ee:	4b39      	ldr	r3, [pc, #228]	; (800a4d4 <xTaskPriorityDisinherit+0xfc>)
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	693a      	ldr	r2, [r7, #16]
 800a3f4:	429a      	cmp	r2, r3
 800a3f6:	d009      	beq.n	800a40c <xTaskPriorityDisinherit+0x34>
 800a3f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3fc:	f383 8811 	msr	BASEPRI, r3
 800a400:	f3bf 8f6f 	isb	sy
 800a404:	f3bf 8f4f 	dsb	sy
 800a408:	60fb      	str	r3, [r7, #12]
 800a40a:	e7fe      	b.n	800a40a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800a40c:	693b      	ldr	r3, [r7, #16]
 800a40e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a410:	2b00      	cmp	r3, #0
 800a412:	d109      	bne.n	800a428 <xTaskPriorityDisinherit+0x50>
 800a414:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a418:	f383 8811 	msr	BASEPRI, r3
 800a41c:	f3bf 8f6f 	isb	sy
 800a420:	f3bf 8f4f 	dsb	sy
 800a424:	60bb      	str	r3, [r7, #8]
 800a426:	e7fe      	b.n	800a426 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800a428:	693b      	ldr	r3, [r7, #16]
 800a42a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a42c:	1e5a      	subs	r2, r3, #1
 800a42e:	693b      	ldr	r3, [r7, #16]
 800a430:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a432:	693b      	ldr	r3, [r7, #16]
 800a434:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a436:	693b      	ldr	r3, [r7, #16]
 800a438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a43a:	429a      	cmp	r2, r3
 800a43c:	d044      	beq.n	800a4c8 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a43e:	693b      	ldr	r3, [r7, #16]
 800a440:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a442:	2b00      	cmp	r3, #0
 800a444:	d140      	bne.n	800a4c8 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a446:	693b      	ldr	r3, [r7, #16]
 800a448:	3304      	adds	r3, #4
 800a44a:	4618      	mov	r0, r3
 800a44c:	f7fe fc39 	bl	8008cc2 <uxListRemove>
 800a450:	4603      	mov	r3, r0
 800a452:	2b00      	cmp	r3, #0
 800a454:	d115      	bne.n	800a482 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a456:	693b      	ldr	r3, [r7, #16]
 800a458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a45a:	491f      	ldr	r1, [pc, #124]	; (800a4d8 <xTaskPriorityDisinherit+0x100>)
 800a45c:	4613      	mov	r3, r2
 800a45e:	009b      	lsls	r3, r3, #2
 800a460:	4413      	add	r3, r2
 800a462:	009b      	lsls	r3, r3, #2
 800a464:	440b      	add	r3, r1
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d10a      	bne.n	800a482 <xTaskPriorityDisinherit+0xaa>
 800a46c:	693b      	ldr	r3, [r7, #16]
 800a46e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a470:	2201      	movs	r2, #1
 800a472:	fa02 f303 	lsl.w	r3, r2, r3
 800a476:	43da      	mvns	r2, r3
 800a478:	4b18      	ldr	r3, [pc, #96]	; (800a4dc <xTaskPriorityDisinherit+0x104>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	4013      	ands	r3, r2
 800a47e:	4a17      	ldr	r2, [pc, #92]	; (800a4dc <xTaskPriorityDisinherit+0x104>)
 800a480:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a482:	693b      	ldr	r3, [r7, #16]
 800a484:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a486:	693b      	ldr	r3, [r7, #16]
 800a488:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a48a:	693b      	ldr	r3, [r7, #16]
 800a48c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a48e:	f1c3 0207 	rsb	r2, r3, #7
 800a492:	693b      	ldr	r3, [r7, #16]
 800a494:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a496:	693b      	ldr	r3, [r7, #16]
 800a498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a49a:	2201      	movs	r2, #1
 800a49c:	409a      	lsls	r2, r3
 800a49e:	4b0f      	ldr	r3, [pc, #60]	; (800a4dc <xTaskPriorityDisinherit+0x104>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	4313      	orrs	r3, r2
 800a4a4:	4a0d      	ldr	r2, [pc, #52]	; (800a4dc <xTaskPriorityDisinherit+0x104>)
 800a4a6:	6013      	str	r3, [r2, #0]
 800a4a8:	693b      	ldr	r3, [r7, #16]
 800a4aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4ac:	4613      	mov	r3, r2
 800a4ae:	009b      	lsls	r3, r3, #2
 800a4b0:	4413      	add	r3, r2
 800a4b2:	009b      	lsls	r3, r3, #2
 800a4b4:	4a08      	ldr	r2, [pc, #32]	; (800a4d8 <xTaskPriorityDisinherit+0x100>)
 800a4b6:	441a      	add	r2, r3
 800a4b8:	693b      	ldr	r3, [r7, #16]
 800a4ba:	3304      	adds	r3, #4
 800a4bc:	4619      	mov	r1, r3
 800a4be:	4610      	mov	r0, r2
 800a4c0:	f7fe fba4 	bl	8008c0c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a4c4:	2301      	movs	r3, #1
 800a4c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a4c8:	697b      	ldr	r3, [r7, #20]
	}
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	3718      	adds	r7, #24
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd80      	pop	{r7, pc}
 800a4d2:	bf00      	nop
 800a4d4:	200000c0 	.word	0x200000c0
 800a4d8:	200000c4 	.word	0x200000c4
 800a4dc:	200001c8 	.word	0x200001c8

0800a4e0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b088      	sub	sp, #32
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
 800a4e8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a4ee:	2301      	movs	r3, #1
 800a4f0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	f000 8086 	beq.w	800a606 <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a4fa:	69bb      	ldr	r3, [r7, #24]
 800a4fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d109      	bne.n	800a516 <vTaskPriorityDisinheritAfterTimeout+0x36>
 800a502:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a506:	f383 8811 	msr	BASEPRI, r3
 800a50a:	f3bf 8f6f 	isb	sy
 800a50e:	f3bf 8f4f 	dsb	sy
 800a512:	60fb      	str	r3, [r7, #12]
 800a514:	e7fe      	b.n	800a514 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a516:	69bb      	ldr	r3, [r7, #24]
 800a518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a51a:	683a      	ldr	r2, [r7, #0]
 800a51c:	429a      	cmp	r2, r3
 800a51e:	d902      	bls.n	800a526 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	61fb      	str	r3, [r7, #28]
 800a524:	e002      	b.n	800a52c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a526:	69bb      	ldr	r3, [r7, #24]
 800a528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a52a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a52c:	69bb      	ldr	r3, [r7, #24]
 800a52e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a530:	69fa      	ldr	r2, [r7, #28]
 800a532:	429a      	cmp	r2, r3
 800a534:	d067      	beq.n	800a606 <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a536:	69bb      	ldr	r3, [r7, #24]
 800a538:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a53a:	697a      	ldr	r2, [r7, #20]
 800a53c:	429a      	cmp	r2, r3
 800a53e:	d162      	bne.n	800a606 <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a540:	4b33      	ldr	r3, [pc, #204]	; (800a610 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	69ba      	ldr	r2, [r7, #24]
 800a546:	429a      	cmp	r2, r3
 800a548:	d109      	bne.n	800a55e <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800a54a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a54e:	f383 8811 	msr	BASEPRI, r3
 800a552:	f3bf 8f6f 	isb	sy
 800a556:	f3bf 8f4f 	dsb	sy
 800a55a:	60bb      	str	r3, [r7, #8]
 800a55c:	e7fe      	b.n	800a55c <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a55e:	69bb      	ldr	r3, [r7, #24]
 800a560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a562:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a564:	69bb      	ldr	r3, [r7, #24]
 800a566:	69fa      	ldr	r2, [r7, #28]
 800a568:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a56a:	69bb      	ldr	r3, [r7, #24]
 800a56c:	699b      	ldr	r3, [r3, #24]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	db04      	blt.n	800a57c <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a572:	69fb      	ldr	r3, [r7, #28]
 800a574:	f1c3 0207 	rsb	r2, r3, #7
 800a578:	69bb      	ldr	r3, [r7, #24]
 800a57a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a57c:	69bb      	ldr	r3, [r7, #24]
 800a57e:	6959      	ldr	r1, [r3, #20]
 800a580:	693a      	ldr	r2, [r7, #16]
 800a582:	4613      	mov	r3, r2
 800a584:	009b      	lsls	r3, r3, #2
 800a586:	4413      	add	r3, r2
 800a588:	009b      	lsls	r3, r3, #2
 800a58a:	4a22      	ldr	r2, [pc, #136]	; (800a614 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800a58c:	4413      	add	r3, r2
 800a58e:	4299      	cmp	r1, r3
 800a590:	d101      	bne.n	800a596 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 800a592:	2301      	movs	r3, #1
 800a594:	e000      	b.n	800a598 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 800a596:	2300      	movs	r3, #0
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d034      	beq.n	800a606 <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a59c:	69bb      	ldr	r3, [r7, #24]
 800a59e:	3304      	adds	r3, #4
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	f7fe fb8e 	bl	8008cc2 <uxListRemove>
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d115      	bne.n	800a5d8 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a5ac:	69bb      	ldr	r3, [r7, #24]
 800a5ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5b0:	4918      	ldr	r1, [pc, #96]	; (800a614 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800a5b2:	4613      	mov	r3, r2
 800a5b4:	009b      	lsls	r3, r3, #2
 800a5b6:	4413      	add	r3, r2
 800a5b8:	009b      	lsls	r3, r3, #2
 800a5ba:	440b      	add	r3, r1
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d10a      	bne.n	800a5d8 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 800a5c2:	69bb      	ldr	r3, [r7, #24]
 800a5c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5c6:	2201      	movs	r2, #1
 800a5c8:	fa02 f303 	lsl.w	r3, r2, r3
 800a5cc:	43da      	mvns	r2, r3
 800a5ce:	4b12      	ldr	r3, [pc, #72]	; (800a618 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	4013      	ands	r3, r2
 800a5d4:	4a10      	ldr	r2, [pc, #64]	; (800a618 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800a5d6:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a5d8:	69bb      	ldr	r3, [r7, #24]
 800a5da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5dc:	2201      	movs	r2, #1
 800a5de:	409a      	lsls	r2, r3
 800a5e0:	4b0d      	ldr	r3, [pc, #52]	; (800a618 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	4313      	orrs	r3, r2
 800a5e6:	4a0c      	ldr	r2, [pc, #48]	; (800a618 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800a5e8:	6013      	str	r3, [r2, #0]
 800a5ea:	69bb      	ldr	r3, [r7, #24]
 800a5ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5ee:	4613      	mov	r3, r2
 800a5f0:	009b      	lsls	r3, r3, #2
 800a5f2:	4413      	add	r3, r2
 800a5f4:	009b      	lsls	r3, r3, #2
 800a5f6:	4a07      	ldr	r2, [pc, #28]	; (800a614 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800a5f8:	441a      	add	r2, r3
 800a5fa:	69bb      	ldr	r3, [r7, #24]
 800a5fc:	3304      	adds	r3, #4
 800a5fe:	4619      	mov	r1, r3
 800a600:	4610      	mov	r0, r2
 800a602:	f7fe fb03 	bl	8008c0c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a606:	bf00      	nop
 800a608:	3720      	adds	r7, #32
 800a60a:	46bd      	mov	sp, r7
 800a60c:	bd80      	pop	{r7, pc}
 800a60e:	bf00      	nop
 800a610:	200000c0 	.word	0x200000c0
 800a614:	200000c4 	.word	0x200000c4
 800a618:	200001c8 	.word	0x200001c8

0800a61c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800a61c:	b480      	push	{r7}
 800a61e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a620:	4b07      	ldr	r3, [pc, #28]	; (800a640 <pvTaskIncrementMutexHeldCount+0x24>)
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d004      	beq.n	800a632 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a628:	4b05      	ldr	r3, [pc, #20]	; (800a640 <pvTaskIncrementMutexHeldCount+0x24>)
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a62e:	3201      	adds	r2, #1
 800a630:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800a632:	4b03      	ldr	r3, [pc, #12]	; (800a640 <pvTaskIncrementMutexHeldCount+0x24>)
 800a634:	681b      	ldr	r3, [r3, #0]
	}
 800a636:	4618      	mov	r0, r3
 800a638:	46bd      	mov	sp, r7
 800a63a:	bc80      	pop	{r7}
 800a63c:	4770      	bx	lr
 800a63e:	bf00      	nop
 800a640:	200000c0 	.word	0x200000c0

0800a644 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b084      	sub	sp, #16
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
 800a64c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a64e:	4b29      	ldr	r3, [pc, #164]	; (800a6f4 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a654:	4b28      	ldr	r3, [pc, #160]	; (800a6f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	3304      	adds	r3, #4
 800a65a:	4618      	mov	r0, r3
 800a65c:	f7fe fb31 	bl	8008cc2 <uxListRemove>
 800a660:	4603      	mov	r3, r0
 800a662:	2b00      	cmp	r3, #0
 800a664:	d10b      	bne.n	800a67e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800a666:	4b24      	ldr	r3, [pc, #144]	; (800a6f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a66c:	2201      	movs	r2, #1
 800a66e:	fa02 f303 	lsl.w	r3, r2, r3
 800a672:	43da      	mvns	r2, r3
 800a674:	4b21      	ldr	r3, [pc, #132]	; (800a6fc <prvAddCurrentTaskToDelayedList+0xb8>)
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	4013      	ands	r3, r2
 800a67a:	4a20      	ldr	r2, [pc, #128]	; (800a6fc <prvAddCurrentTaskToDelayedList+0xb8>)
 800a67c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a684:	d10a      	bne.n	800a69c <prvAddCurrentTaskToDelayedList+0x58>
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d007      	beq.n	800a69c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a68c:	4b1a      	ldr	r3, [pc, #104]	; (800a6f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	3304      	adds	r3, #4
 800a692:	4619      	mov	r1, r3
 800a694:	481a      	ldr	r0, [pc, #104]	; (800a700 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a696:	f7fe fab9 	bl	8008c0c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a69a:	e026      	b.n	800a6ea <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a69c:	68fa      	ldr	r2, [r7, #12]
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	4413      	add	r3, r2
 800a6a2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a6a4:	4b14      	ldr	r3, [pc, #80]	; (800a6f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	68ba      	ldr	r2, [r7, #8]
 800a6aa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a6ac:	68ba      	ldr	r2, [r7, #8]
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	429a      	cmp	r2, r3
 800a6b2:	d209      	bcs.n	800a6c8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a6b4:	4b13      	ldr	r3, [pc, #76]	; (800a704 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a6b6:	681a      	ldr	r2, [r3, #0]
 800a6b8:	4b0f      	ldr	r3, [pc, #60]	; (800a6f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	3304      	adds	r3, #4
 800a6be:	4619      	mov	r1, r3
 800a6c0:	4610      	mov	r0, r2
 800a6c2:	f7fe fac6 	bl	8008c52 <vListInsert>
}
 800a6c6:	e010      	b.n	800a6ea <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a6c8:	4b0f      	ldr	r3, [pc, #60]	; (800a708 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a6ca:	681a      	ldr	r2, [r3, #0]
 800a6cc:	4b0a      	ldr	r3, [pc, #40]	; (800a6f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	3304      	adds	r3, #4
 800a6d2:	4619      	mov	r1, r3
 800a6d4:	4610      	mov	r0, r2
 800a6d6:	f7fe fabc 	bl	8008c52 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a6da:	4b0c      	ldr	r3, [pc, #48]	; (800a70c <prvAddCurrentTaskToDelayedList+0xc8>)
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	68ba      	ldr	r2, [r7, #8]
 800a6e0:	429a      	cmp	r2, r3
 800a6e2:	d202      	bcs.n	800a6ea <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a6e4:	4a09      	ldr	r2, [pc, #36]	; (800a70c <prvAddCurrentTaskToDelayedList+0xc8>)
 800a6e6:	68bb      	ldr	r3, [r7, #8]
 800a6e8:	6013      	str	r3, [r2, #0]
}
 800a6ea:	bf00      	nop
 800a6ec:	3710      	adds	r7, #16
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bd80      	pop	{r7, pc}
 800a6f2:	bf00      	nop
 800a6f4:	200001c4 	.word	0x200001c4
 800a6f8:	200000c0 	.word	0x200000c0
 800a6fc:	200001c8 	.word	0x200001c8
 800a700:	200001ac 	.word	0x200001ac
 800a704:	2000017c 	.word	0x2000017c
 800a708:	20000178 	.word	0x20000178
 800a70c:	200001e0 	.word	0x200001e0

0800a710 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a710:	b480      	push	{r7}
 800a712:	b085      	sub	sp, #20
 800a714:	af00      	add	r7, sp, #0
 800a716:	60f8      	str	r0, [r7, #12]
 800a718:	60b9      	str	r1, [r7, #8]
 800a71a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	3b04      	subs	r3, #4
 800a720:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a728:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	3b04      	subs	r3, #4
 800a72e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	f023 0201 	bic.w	r2, r3, #1
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	3b04      	subs	r3, #4
 800a73e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a740:	4a08      	ldr	r2, [pc, #32]	; (800a764 <pxPortInitialiseStack+0x54>)
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	3b14      	subs	r3, #20
 800a74a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a74c:	687a      	ldr	r2, [r7, #4]
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	3b20      	subs	r3, #32
 800a756:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a758:	68fb      	ldr	r3, [r7, #12]
}
 800a75a:	4618      	mov	r0, r3
 800a75c:	3714      	adds	r7, #20
 800a75e:	46bd      	mov	sp, r7
 800a760:	bc80      	pop	{r7}
 800a762:	4770      	bx	lr
 800a764:	0800a769 	.word	0x0800a769

0800a768 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a768:	b480      	push	{r7}
 800a76a:	b085      	sub	sp, #20
 800a76c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800a76e:	2300      	movs	r3, #0
 800a770:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a772:	4b10      	ldr	r3, [pc, #64]	; (800a7b4 <prvTaskExitError+0x4c>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a77a:	d009      	beq.n	800a790 <prvTaskExitError+0x28>
 800a77c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a780:	f383 8811 	msr	BASEPRI, r3
 800a784:	f3bf 8f6f 	isb	sy
 800a788:	f3bf 8f4f 	dsb	sy
 800a78c:	60fb      	str	r3, [r7, #12]
 800a78e:	e7fe      	b.n	800a78e <prvTaskExitError+0x26>
 800a790:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a794:	f383 8811 	msr	BASEPRI, r3
 800a798:	f3bf 8f6f 	isb	sy
 800a79c:	f3bf 8f4f 	dsb	sy
 800a7a0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a7a2:	bf00      	nop
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d0fc      	beq.n	800a7a4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a7aa:	bf00      	nop
 800a7ac:	3714      	adds	r7, #20
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	bc80      	pop	{r7}
 800a7b2:	4770      	bx	lr
 800a7b4:	2000000c 	.word	0x2000000c
	...

0800a7c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a7c0:	4b07      	ldr	r3, [pc, #28]	; (800a7e0 <pxCurrentTCBConst2>)
 800a7c2:	6819      	ldr	r1, [r3, #0]
 800a7c4:	6808      	ldr	r0, [r1, #0]
 800a7c6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a7ca:	f380 8809 	msr	PSP, r0
 800a7ce:	f3bf 8f6f 	isb	sy
 800a7d2:	f04f 0000 	mov.w	r0, #0
 800a7d6:	f380 8811 	msr	BASEPRI, r0
 800a7da:	f04e 0e0d 	orr.w	lr, lr, #13
 800a7de:	4770      	bx	lr

0800a7e0 <pxCurrentTCBConst2>:
 800a7e0:	200000c0 	.word	0x200000c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a7e4:	bf00      	nop
 800a7e6:	bf00      	nop

0800a7e8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800a7e8:	4806      	ldr	r0, [pc, #24]	; (800a804 <prvPortStartFirstTask+0x1c>)
 800a7ea:	6800      	ldr	r0, [r0, #0]
 800a7ec:	6800      	ldr	r0, [r0, #0]
 800a7ee:	f380 8808 	msr	MSP, r0
 800a7f2:	b662      	cpsie	i
 800a7f4:	b661      	cpsie	f
 800a7f6:	f3bf 8f4f 	dsb	sy
 800a7fa:	f3bf 8f6f 	isb	sy
 800a7fe:	df00      	svc	0
 800a800:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a802:	bf00      	nop
 800a804:	e000ed08 	.word	0xe000ed08

0800a808 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b084      	sub	sp, #16
 800a80c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a80e:	4b31      	ldr	r3, [pc, #196]	; (800a8d4 <xPortStartScheduler+0xcc>)
 800a810:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	781b      	ldrb	r3, [r3, #0]
 800a816:	b2db      	uxtb	r3, r3
 800a818:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	22ff      	movs	r2, #255	; 0xff
 800a81e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	781b      	ldrb	r3, [r3, #0]
 800a824:	b2db      	uxtb	r3, r3
 800a826:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a828:	78fb      	ldrb	r3, [r7, #3]
 800a82a:	b2db      	uxtb	r3, r3
 800a82c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a830:	b2da      	uxtb	r2, r3
 800a832:	4b29      	ldr	r3, [pc, #164]	; (800a8d8 <xPortStartScheduler+0xd0>)
 800a834:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a836:	4b29      	ldr	r3, [pc, #164]	; (800a8dc <xPortStartScheduler+0xd4>)
 800a838:	2207      	movs	r2, #7
 800a83a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a83c:	e009      	b.n	800a852 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a83e:	4b27      	ldr	r3, [pc, #156]	; (800a8dc <xPortStartScheduler+0xd4>)
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	3b01      	subs	r3, #1
 800a844:	4a25      	ldr	r2, [pc, #148]	; (800a8dc <xPortStartScheduler+0xd4>)
 800a846:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a848:	78fb      	ldrb	r3, [r7, #3]
 800a84a:	b2db      	uxtb	r3, r3
 800a84c:	005b      	lsls	r3, r3, #1
 800a84e:	b2db      	uxtb	r3, r3
 800a850:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a852:	78fb      	ldrb	r3, [r7, #3]
 800a854:	b2db      	uxtb	r3, r3
 800a856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a85a:	2b80      	cmp	r3, #128	; 0x80
 800a85c:	d0ef      	beq.n	800a83e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a85e:	4b1f      	ldr	r3, [pc, #124]	; (800a8dc <xPortStartScheduler+0xd4>)
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	f1c3 0307 	rsb	r3, r3, #7
 800a866:	2b04      	cmp	r3, #4
 800a868:	d009      	beq.n	800a87e <xPortStartScheduler+0x76>
 800a86a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a86e:	f383 8811 	msr	BASEPRI, r3
 800a872:	f3bf 8f6f 	isb	sy
 800a876:	f3bf 8f4f 	dsb	sy
 800a87a:	60bb      	str	r3, [r7, #8]
 800a87c:	e7fe      	b.n	800a87c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a87e:	4b17      	ldr	r3, [pc, #92]	; (800a8dc <xPortStartScheduler+0xd4>)
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	021b      	lsls	r3, r3, #8
 800a884:	4a15      	ldr	r2, [pc, #84]	; (800a8dc <xPortStartScheduler+0xd4>)
 800a886:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a888:	4b14      	ldr	r3, [pc, #80]	; (800a8dc <xPortStartScheduler+0xd4>)
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a890:	4a12      	ldr	r2, [pc, #72]	; (800a8dc <xPortStartScheduler+0xd4>)
 800a892:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	b2da      	uxtb	r2, r3
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a89c:	4b10      	ldr	r3, [pc, #64]	; (800a8e0 <xPortStartScheduler+0xd8>)
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	4a0f      	ldr	r2, [pc, #60]	; (800a8e0 <xPortStartScheduler+0xd8>)
 800a8a2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a8a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a8a8:	4b0d      	ldr	r3, [pc, #52]	; (800a8e0 <xPortStartScheduler+0xd8>)
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	4a0c      	ldr	r2, [pc, #48]	; (800a8e0 <xPortStartScheduler+0xd8>)
 800a8ae:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a8b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a8b4:	f000 f8b0 	bl	800aa18 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a8b8:	4b0a      	ldr	r3, [pc, #40]	; (800a8e4 <xPortStartScheduler+0xdc>)
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a8be:	f7ff ff93 	bl	800a7e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a8c2:	f7ff faa3 	bl	8009e0c <vTaskSwitchContext>
	prvTaskExitError();
 800a8c6:	f7ff ff4f 	bl	800a768 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a8ca:	2300      	movs	r3, #0
}
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	3710      	adds	r7, #16
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	bd80      	pop	{r7, pc}
 800a8d4:	e000e400 	.word	0xe000e400
 800a8d8:	200001ec 	.word	0x200001ec
 800a8dc:	200001f0 	.word	0x200001f0
 800a8e0:	e000ed20 	.word	0xe000ed20
 800a8e4:	2000000c 	.word	0x2000000c

0800a8e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a8e8:	b480      	push	{r7}
 800a8ea:	b083      	sub	sp, #12
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8f2:	f383 8811 	msr	BASEPRI, r3
 800a8f6:	f3bf 8f6f 	isb	sy
 800a8fa:	f3bf 8f4f 	dsb	sy
 800a8fe:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a900:	4b0e      	ldr	r3, [pc, #56]	; (800a93c <vPortEnterCritical+0x54>)
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	3301      	adds	r3, #1
 800a906:	4a0d      	ldr	r2, [pc, #52]	; (800a93c <vPortEnterCritical+0x54>)
 800a908:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a90a:	4b0c      	ldr	r3, [pc, #48]	; (800a93c <vPortEnterCritical+0x54>)
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	2b01      	cmp	r3, #1
 800a910:	d10e      	bne.n	800a930 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a912:	4b0b      	ldr	r3, [pc, #44]	; (800a940 <vPortEnterCritical+0x58>)
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	b2db      	uxtb	r3, r3
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d009      	beq.n	800a930 <vPortEnterCritical+0x48>
 800a91c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a920:	f383 8811 	msr	BASEPRI, r3
 800a924:	f3bf 8f6f 	isb	sy
 800a928:	f3bf 8f4f 	dsb	sy
 800a92c:	603b      	str	r3, [r7, #0]
 800a92e:	e7fe      	b.n	800a92e <vPortEnterCritical+0x46>
	}
}
 800a930:	bf00      	nop
 800a932:	370c      	adds	r7, #12
 800a934:	46bd      	mov	sp, r7
 800a936:	bc80      	pop	{r7}
 800a938:	4770      	bx	lr
 800a93a:	bf00      	nop
 800a93c:	2000000c 	.word	0x2000000c
 800a940:	e000ed04 	.word	0xe000ed04

0800a944 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a944:	b480      	push	{r7}
 800a946:	b083      	sub	sp, #12
 800a948:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a94a:	4b10      	ldr	r3, [pc, #64]	; (800a98c <vPortExitCritical+0x48>)
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d109      	bne.n	800a966 <vPortExitCritical+0x22>
 800a952:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a956:	f383 8811 	msr	BASEPRI, r3
 800a95a:	f3bf 8f6f 	isb	sy
 800a95e:	f3bf 8f4f 	dsb	sy
 800a962:	607b      	str	r3, [r7, #4]
 800a964:	e7fe      	b.n	800a964 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800a966:	4b09      	ldr	r3, [pc, #36]	; (800a98c <vPortExitCritical+0x48>)
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	3b01      	subs	r3, #1
 800a96c:	4a07      	ldr	r2, [pc, #28]	; (800a98c <vPortExitCritical+0x48>)
 800a96e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a970:	4b06      	ldr	r3, [pc, #24]	; (800a98c <vPortExitCritical+0x48>)
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d104      	bne.n	800a982 <vPortExitCritical+0x3e>
 800a978:	2300      	movs	r3, #0
 800a97a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a97c:	683b      	ldr	r3, [r7, #0]
 800a97e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800a982:	bf00      	nop
 800a984:	370c      	adds	r7, #12
 800a986:	46bd      	mov	sp, r7
 800a988:	bc80      	pop	{r7}
 800a98a:	4770      	bx	lr
 800a98c:	2000000c 	.word	0x2000000c

0800a990 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a990:	f3ef 8009 	mrs	r0, PSP
 800a994:	f3bf 8f6f 	isb	sy
 800a998:	4b0d      	ldr	r3, [pc, #52]	; (800a9d0 <pxCurrentTCBConst>)
 800a99a:	681a      	ldr	r2, [r3, #0]
 800a99c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a9a0:	6010      	str	r0, [r2, #0]
 800a9a2:	e92d 4008 	stmdb	sp!, {r3, lr}
 800a9a6:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a9aa:	f380 8811 	msr	BASEPRI, r0
 800a9ae:	f7ff fa2d 	bl	8009e0c <vTaskSwitchContext>
 800a9b2:	f04f 0000 	mov.w	r0, #0
 800a9b6:	f380 8811 	msr	BASEPRI, r0
 800a9ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a9be:	6819      	ldr	r1, [r3, #0]
 800a9c0:	6808      	ldr	r0, [r1, #0]
 800a9c2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a9c6:	f380 8809 	msr	PSP, r0
 800a9ca:	f3bf 8f6f 	isb	sy
 800a9ce:	4770      	bx	lr

0800a9d0 <pxCurrentTCBConst>:
 800a9d0:	200000c0 	.word	0x200000c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a9d4:	bf00      	nop
 800a9d6:	bf00      	nop

0800a9d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b082      	sub	sp, #8
 800a9dc:	af00      	add	r7, sp, #0
	__asm volatile
 800a9de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9e2:	f383 8811 	msr	BASEPRI, r3
 800a9e6:	f3bf 8f6f 	isb	sy
 800a9ea:	f3bf 8f4f 	dsb	sy
 800a9ee:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a9f0:	f7ff f950 	bl	8009c94 <xTaskIncrementTick>
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d003      	beq.n	800aa02 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a9fa:	4b06      	ldr	r3, [pc, #24]	; (800aa14 <SysTick_Handler+0x3c>)
 800a9fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa00:	601a      	str	r2, [r3, #0]
 800aa02:	2300      	movs	r3, #0
 800aa04:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800aa0c:	bf00      	nop
 800aa0e:	3708      	adds	r7, #8
 800aa10:	46bd      	mov	sp, r7
 800aa12:	bd80      	pop	{r7, pc}
 800aa14:	e000ed04 	.word	0xe000ed04

0800aa18 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800aa18:	b480      	push	{r7}
 800aa1a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800aa1c:	4b0a      	ldr	r3, [pc, #40]	; (800aa48 <vPortSetupTimerInterrupt+0x30>)
 800aa1e:	2200      	movs	r2, #0
 800aa20:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800aa22:	4b0a      	ldr	r3, [pc, #40]	; (800aa4c <vPortSetupTimerInterrupt+0x34>)
 800aa24:	2200      	movs	r2, #0
 800aa26:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800aa28:	4b09      	ldr	r3, [pc, #36]	; (800aa50 <vPortSetupTimerInterrupt+0x38>)
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	4a09      	ldr	r2, [pc, #36]	; (800aa54 <vPortSetupTimerInterrupt+0x3c>)
 800aa2e:	fba2 2303 	umull	r2, r3, r2, r3
 800aa32:	099b      	lsrs	r3, r3, #6
 800aa34:	4a08      	ldr	r2, [pc, #32]	; (800aa58 <vPortSetupTimerInterrupt+0x40>)
 800aa36:	3b01      	subs	r3, #1
 800aa38:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800aa3a:	4b03      	ldr	r3, [pc, #12]	; (800aa48 <vPortSetupTimerInterrupt+0x30>)
 800aa3c:	2207      	movs	r2, #7
 800aa3e:	601a      	str	r2, [r3, #0]
}
 800aa40:	bf00      	nop
 800aa42:	46bd      	mov	sp, r7
 800aa44:	bc80      	pop	{r7}
 800aa46:	4770      	bx	lr
 800aa48:	e000e010 	.word	0xe000e010
 800aa4c:	e000e018 	.word	0xe000e018
 800aa50:	20000000 	.word	0x20000000
 800aa54:	10624dd3 	.word	0x10624dd3
 800aa58:	e000e014 	.word	0xe000e014

0800aa5c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800aa5c:	b480      	push	{r7}
 800aa5e:	b085      	sub	sp, #20
 800aa60:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800aa62:	f3ef 8305 	mrs	r3, IPSR
 800aa66:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	2b0f      	cmp	r3, #15
 800aa6c:	d913      	bls.n	800aa96 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800aa6e:	4a15      	ldr	r2, [pc, #84]	; (800aac4 <vPortValidateInterruptPriority+0x68>)
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	4413      	add	r3, r2
 800aa74:	781b      	ldrb	r3, [r3, #0]
 800aa76:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800aa78:	4b13      	ldr	r3, [pc, #76]	; (800aac8 <vPortValidateInterruptPriority+0x6c>)
 800aa7a:	781b      	ldrb	r3, [r3, #0]
 800aa7c:	7afa      	ldrb	r2, [r7, #11]
 800aa7e:	429a      	cmp	r2, r3
 800aa80:	d209      	bcs.n	800aa96 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800aa82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa86:	f383 8811 	msr	BASEPRI, r3
 800aa8a:	f3bf 8f6f 	isb	sy
 800aa8e:	f3bf 8f4f 	dsb	sy
 800aa92:	607b      	str	r3, [r7, #4]
 800aa94:	e7fe      	b.n	800aa94 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800aa96:	4b0d      	ldr	r3, [pc, #52]	; (800aacc <vPortValidateInterruptPriority+0x70>)
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800aa9e:	4b0c      	ldr	r3, [pc, #48]	; (800aad0 <vPortValidateInterruptPriority+0x74>)
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	429a      	cmp	r2, r3
 800aaa4:	d909      	bls.n	800aaba <vPortValidateInterruptPriority+0x5e>
 800aaa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaaa:	f383 8811 	msr	BASEPRI, r3
 800aaae:	f3bf 8f6f 	isb	sy
 800aab2:	f3bf 8f4f 	dsb	sy
 800aab6:	603b      	str	r3, [r7, #0]
 800aab8:	e7fe      	b.n	800aab8 <vPortValidateInterruptPriority+0x5c>
	}
 800aaba:	bf00      	nop
 800aabc:	3714      	adds	r7, #20
 800aabe:	46bd      	mov	sp, r7
 800aac0:	bc80      	pop	{r7}
 800aac2:	4770      	bx	lr
 800aac4:	e000e3f0 	.word	0xe000e3f0
 800aac8:	200001ec 	.word	0x200001ec
 800aacc:	e000ed0c 	.word	0xe000ed0c
 800aad0:	200001f0 	.word	0x200001f0

0800aad4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b08a      	sub	sp, #40	; 0x28
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800aadc:	2300      	movs	r3, #0
 800aade:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800aae0:	f7ff f82e 	bl	8009b40 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800aae4:	4b59      	ldr	r3, [pc, #356]	; (800ac4c <pvPortMalloc+0x178>)
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d101      	bne.n	800aaf0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800aaec:	f000 f910 	bl	800ad10 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800aaf0:	4b57      	ldr	r3, [pc, #348]	; (800ac50 <pvPortMalloc+0x17c>)
 800aaf2:	681a      	ldr	r2, [r3, #0]
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	4013      	ands	r3, r2
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	f040 808c 	bne.w	800ac16 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d01c      	beq.n	800ab3e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800ab04:	2208      	movs	r2, #8
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	4413      	add	r3, r2
 800ab0a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	f003 0307 	and.w	r3, r3, #7
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d013      	beq.n	800ab3e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	f023 0307 	bic.w	r3, r3, #7
 800ab1c:	3308      	adds	r3, #8
 800ab1e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	f003 0307 	and.w	r3, r3, #7
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d009      	beq.n	800ab3e <pvPortMalloc+0x6a>
 800ab2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab2e:	f383 8811 	msr	BASEPRI, r3
 800ab32:	f3bf 8f6f 	isb	sy
 800ab36:	f3bf 8f4f 	dsb	sy
 800ab3a:	617b      	str	r3, [r7, #20]
 800ab3c:	e7fe      	b.n	800ab3c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d068      	beq.n	800ac16 <pvPortMalloc+0x142>
 800ab44:	4b43      	ldr	r3, [pc, #268]	; (800ac54 <pvPortMalloc+0x180>)
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	687a      	ldr	r2, [r7, #4]
 800ab4a:	429a      	cmp	r2, r3
 800ab4c:	d863      	bhi.n	800ac16 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ab4e:	4b42      	ldr	r3, [pc, #264]	; (800ac58 <pvPortMalloc+0x184>)
 800ab50:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ab52:	4b41      	ldr	r3, [pc, #260]	; (800ac58 <pvPortMalloc+0x184>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ab58:	e004      	b.n	800ab64 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800ab5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab5c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ab5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ab64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab66:	685b      	ldr	r3, [r3, #4]
 800ab68:	687a      	ldr	r2, [r7, #4]
 800ab6a:	429a      	cmp	r2, r3
 800ab6c:	d903      	bls.n	800ab76 <pvPortMalloc+0xa2>
 800ab6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d1f1      	bne.n	800ab5a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ab76:	4b35      	ldr	r3, [pc, #212]	; (800ac4c <pvPortMalloc+0x178>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab7c:	429a      	cmp	r2, r3
 800ab7e:	d04a      	beq.n	800ac16 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ab80:	6a3b      	ldr	r3, [r7, #32]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	2208      	movs	r2, #8
 800ab86:	4413      	add	r3, r2
 800ab88:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ab8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab8c:	681a      	ldr	r2, [r3, #0]
 800ab8e:	6a3b      	ldr	r3, [r7, #32]
 800ab90:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ab92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab94:	685a      	ldr	r2, [r3, #4]
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	1ad2      	subs	r2, r2, r3
 800ab9a:	2308      	movs	r3, #8
 800ab9c:	005b      	lsls	r3, r3, #1
 800ab9e:	429a      	cmp	r2, r3
 800aba0:	d91e      	bls.n	800abe0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800aba2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	4413      	add	r3, r2
 800aba8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800abaa:	69bb      	ldr	r3, [r7, #24]
 800abac:	f003 0307 	and.w	r3, r3, #7
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d009      	beq.n	800abc8 <pvPortMalloc+0xf4>
 800abb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abb8:	f383 8811 	msr	BASEPRI, r3
 800abbc:	f3bf 8f6f 	isb	sy
 800abc0:	f3bf 8f4f 	dsb	sy
 800abc4:	613b      	str	r3, [r7, #16]
 800abc6:	e7fe      	b.n	800abc6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800abc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abca:	685a      	ldr	r2, [r3, #4]
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	1ad2      	subs	r2, r2, r3
 800abd0:	69bb      	ldr	r3, [r7, #24]
 800abd2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800abd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abd6:	687a      	ldr	r2, [r7, #4]
 800abd8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800abda:	69b8      	ldr	r0, [r7, #24]
 800abdc:	f000 f8fa 	bl	800add4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800abe0:	4b1c      	ldr	r3, [pc, #112]	; (800ac54 <pvPortMalloc+0x180>)
 800abe2:	681a      	ldr	r2, [r3, #0]
 800abe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abe6:	685b      	ldr	r3, [r3, #4]
 800abe8:	1ad3      	subs	r3, r2, r3
 800abea:	4a1a      	ldr	r2, [pc, #104]	; (800ac54 <pvPortMalloc+0x180>)
 800abec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800abee:	4b19      	ldr	r3, [pc, #100]	; (800ac54 <pvPortMalloc+0x180>)
 800abf0:	681a      	ldr	r2, [r3, #0]
 800abf2:	4b1a      	ldr	r3, [pc, #104]	; (800ac5c <pvPortMalloc+0x188>)
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	429a      	cmp	r2, r3
 800abf8:	d203      	bcs.n	800ac02 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800abfa:	4b16      	ldr	r3, [pc, #88]	; (800ac54 <pvPortMalloc+0x180>)
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	4a17      	ldr	r2, [pc, #92]	; (800ac5c <pvPortMalloc+0x188>)
 800ac00:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ac02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac04:	685a      	ldr	r2, [r3, #4]
 800ac06:	4b12      	ldr	r3, [pc, #72]	; (800ac50 <pvPortMalloc+0x17c>)
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	431a      	orrs	r2, r3
 800ac0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac0e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ac10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac12:	2200      	movs	r2, #0
 800ac14:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ac16:	f7fe ffa1 	bl	8009b5c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800ac1a:	69fb      	ldr	r3, [r7, #28]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d101      	bne.n	800ac24 <pvPortMalloc+0x150>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800ac20:	f7f5 fc68 	bl	80004f4 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ac24:	69fb      	ldr	r3, [r7, #28]
 800ac26:	f003 0307 	and.w	r3, r3, #7
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d009      	beq.n	800ac42 <pvPortMalloc+0x16e>
 800ac2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac32:	f383 8811 	msr	BASEPRI, r3
 800ac36:	f3bf 8f6f 	isb	sy
 800ac3a:	f3bf 8f4f 	dsb	sy
 800ac3e:	60fb      	str	r3, [r7, #12]
 800ac40:	e7fe      	b.n	800ac40 <pvPortMalloc+0x16c>
	return pvReturn;
 800ac42:	69fb      	ldr	r3, [r7, #28]
}
 800ac44:	4618      	mov	r0, r3
 800ac46:	3728      	adds	r7, #40	; 0x28
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	bd80      	pop	{r7, pc}
 800ac4c:	20003dfc 	.word	0x20003dfc
 800ac50:	20003e08 	.word	0x20003e08
 800ac54:	20003e00 	.word	0x20003e00
 800ac58:	20003df4 	.word	0x20003df4
 800ac5c:	20003e04 	.word	0x20003e04

0800ac60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b086      	sub	sp, #24
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d046      	beq.n	800ad00 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ac72:	2308      	movs	r3, #8
 800ac74:	425b      	negs	r3, r3
 800ac76:	697a      	ldr	r2, [r7, #20]
 800ac78:	4413      	add	r3, r2
 800ac7a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ac7c:	697b      	ldr	r3, [r7, #20]
 800ac7e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ac80:	693b      	ldr	r3, [r7, #16]
 800ac82:	685a      	ldr	r2, [r3, #4]
 800ac84:	4b20      	ldr	r3, [pc, #128]	; (800ad08 <vPortFree+0xa8>)
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	4013      	ands	r3, r2
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d109      	bne.n	800aca2 <vPortFree+0x42>
 800ac8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac92:	f383 8811 	msr	BASEPRI, r3
 800ac96:	f3bf 8f6f 	isb	sy
 800ac9a:	f3bf 8f4f 	dsb	sy
 800ac9e:	60fb      	str	r3, [r7, #12]
 800aca0:	e7fe      	b.n	800aca0 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800aca2:	693b      	ldr	r3, [r7, #16]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d009      	beq.n	800acbe <vPortFree+0x5e>
 800acaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acae:	f383 8811 	msr	BASEPRI, r3
 800acb2:	f3bf 8f6f 	isb	sy
 800acb6:	f3bf 8f4f 	dsb	sy
 800acba:	60bb      	str	r3, [r7, #8]
 800acbc:	e7fe      	b.n	800acbc <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800acbe:	693b      	ldr	r3, [r7, #16]
 800acc0:	685a      	ldr	r2, [r3, #4]
 800acc2:	4b11      	ldr	r3, [pc, #68]	; (800ad08 <vPortFree+0xa8>)
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	4013      	ands	r3, r2
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d019      	beq.n	800ad00 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800accc:	693b      	ldr	r3, [r7, #16]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d115      	bne.n	800ad00 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800acd4:	693b      	ldr	r3, [r7, #16]
 800acd6:	685a      	ldr	r2, [r3, #4]
 800acd8:	4b0b      	ldr	r3, [pc, #44]	; (800ad08 <vPortFree+0xa8>)
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	43db      	mvns	r3, r3
 800acde:	401a      	ands	r2, r3
 800ace0:	693b      	ldr	r3, [r7, #16]
 800ace2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ace4:	f7fe ff2c 	bl	8009b40 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ace8:	693b      	ldr	r3, [r7, #16]
 800acea:	685a      	ldr	r2, [r3, #4]
 800acec:	4b07      	ldr	r3, [pc, #28]	; (800ad0c <vPortFree+0xac>)
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	4413      	add	r3, r2
 800acf2:	4a06      	ldr	r2, [pc, #24]	; (800ad0c <vPortFree+0xac>)
 800acf4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800acf6:	6938      	ldr	r0, [r7, #16]
 800acf8:	f000 f86c 	bl	800add4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800acfc:	f7fe ff2e 	bl	8009b5c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ad00:	bf00      	nop
 800ad02:	3718      	adds	r7, #24
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bd80      	pop	{r7, pc}
 800ad08:	20003e08 	.word	0x20003e08
 800ad0c:	20003e00 	.word	0x20003e00

0800ad10 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ad10:	b480      	push	{r7}
 800ad12:	b085      	sub	sp, #20
 800ad14:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ad16:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ad1a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ad1c:	4b27      	ldr	r3, [pc, #156]	; (800adbc <prvHeapInit+0xac>)
 800ad1e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	f003 0307 	and.w	r3, r3, #7
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d00c      	beq.n	800ad44 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	3307      	adds	r3, #7
 800ad2e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	f023 0307 	bic.w	r3, r3, #7
 800ad36:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ad38:	68ba      	ldr	r2, [r7, #8]
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	1ad3      	subs	r3, r2, r3
 800ad3e:	4a1f      	ldr	r2, [pc, #124]	; (800adbc <prvHeapInit+0xac>)
 800ad40:	4413      	add	r3, r2
 800ad42:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ad48:	4a1d      	ldr	r2, [pc, #116]	; (800adc0 <prvHeapInit+0xb0>)
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ad4e:	4b1c      	ldr	r3, [pc, #112]	; (800adc0 <prvHeapInit+0xb0>)
 800ad50:	2200      	movs	r2, #0
 800ad52:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	68ba      	ldr	r2, [r7, #8]
 800ad58:	4413      	add	r3, r2
 800ad5a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ad5c:	2208      	movs	r2, #8
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	1a9b      	subs	r3, r3, r2
 800ad62:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	f023 0307 	bic.w	r3, r3, #7
 800ad6a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	4a15      	ldr	r2, [pc, #84]	; (800adc4 <prvHeapInit+0xb4>)
 800ad70:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ad72:	4b14      	ldr	r3, [pc, #80]	; (800adc4 <prvHeapInit+0xb4>)
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	2200      	movs	r2, #0
 800ad78:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ad7a:	4b12      	ldr	r3, [pc, #72]	; (800adc4 <prvHeapInit+0xb4>)
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	2200      	movs	r2, #0
 800ad80:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	68fa      	ldr	r2, [r7, #12]
 800ad8a:	1ad2      	subs	r2, r2, r3
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ad90:	4b0c      	ldr	r3, [pc, #48]	; (800adc4 <prvHeapInit+0xb4>)
 800ad92:	681a      	ldr	r2, [r3, #0]
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ad98:	683b      	ldr	r3, [r7, #0]
 800ad9a:	685b      	ldr	r3, [r3, #4]
 800ad9c:	4a0a      	ldr	r2, [pc, #40]	; (800adc8 <prvHeapInit+0xb8>)
 800ad9e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	685b      	ldr	r3, [r3, #4]
 800ada4:	4a09      	ldr	r2, [pc, #36]	; (800adcc <prvHeapInit+0xbc>)
 800ada6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ada8:	4b09      	ldr	r3, [pc, #36]	; (800add0 <prvHeapInit+0xc0>)
 800adaa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800adae:	601a      	str	r2, [r3, #0]
}
 800adb0:	bf00      	nop
 800adb2:	3714      	adds	r7, #20
 800adb4:	46bd      	mov	sp, r7
 800adb6:	bc80      	pop	{r7}
 800adb8:	4770      	bx	lr
 800adba:	bf00      	nop
 800adbc:	200001f4 	.word	0x200001f4
 800adc0:	20003df4 	.word	0x20003df4
 800adc4:	20003dfc 	.word	0x20003dfc
 800adc8:	20003e04 	.word	0x20003e04
 800adcc:	20003e00 	.word	0x20003e00
 800add0:	20003e08 	.word	0x20003e08

0800add4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800add4:	b480      	push	{r7}
 800add6:	b085      	sub	sp, #20
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800addc:	4b27      	ldr	r3, [pc, #156]	; (800ae7c <prvInsertBlockIntoFreeList+0xa8>)
 800adde:	60fb      	str	r3, [r7, #12]
 800ade0:	e002      	b.n	800ade8 <prvInsertBlockIntoFreeList+0x14>
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	60fb      	str	r3, [r7, #12]
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	687a      	ldr	r2, [r7, #4]
 800adee:	429a      	cmp	r2, r3
 800adf0:	d8f7      	bhi.n	800ade2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	685b      	ldr	r3, [r3, #4]
 800adfa:	68ba      	ldr	r2, [r7, #8]
 800adfc:	4413      	add	r3, r2
 800adfe:	687a      	ldr	r2, [r7, #4]
 800ae00:	429a      	cmp	r2, r3
 800ae02:	d108      	bne.n	800ae16 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	685a      	ldr	r2, [r3, #4]
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	685b      	ldr	r3, [r3, #4]
 800ae0c:	441a      	add	r2, r3
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	685b      	ldr	r3, [r3, #4]
 800ae1e:	68ba      	ldr	r2, [r7, #8]
 800ae20:	441a      	add	r2, r3
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	429a      	cmp	r2, r3
 800ae28:	d118      	bne.n	800ae5c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	681a      	ldr	r2, [r3, #0]
 800ae2e:	4b14      	ldr	r3, [pc, #80]	; (800ae80 <prvInsertBlockIntoFreeList+0xac>)
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	429a      	cmp	r2, r3
 800ae34:	d00d      	beq.n	800ae52 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	685a      	ldr	r2, [r3, #4]
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	685b      	ldr	r3, [r3, #4]
 800ae40:	441a      	add	r2, r3
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	681a      	ldr	r2, [r3, #0]
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	601a      	str	r2, [r3, #0]
 800ae50:	e008      	b.n	800ae64 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ae52:	4b0b      	ldr	r3, [pc, #44]	; (800ae80 <prvInsertBlockIntoFreeList+0xac>)
 800ae54:	681a      	ldr	r2, [r3, #0]
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	601a      	str	r2, [r3, #0]
 800ae5a:	e003      	b.n	800ae64 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	681a      	ldr	r2, [r3, #0]
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ae64:	68fa      	ldr	r2, [r7, #12]
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	429a      	cmp	r2, r3
 800ae6a:	d002      	beq.n	800ae72 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	687a      	ldr	r2, [r7, #4]
 800ae70:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ae72:	bf00      	nop
 800ae74:	3714      	adds	r7, #20
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bc80      	pop	{r7}
 800ae7a:	4770      	bx	lr
 800ae7c:	20003df4 	.word	0x20003df4
 800ae80:	20003dfc 	.word	0x20003dfc

0800ae84 <__errno>:
 800ae84:	4b01      	ldr	r3, [pc, #4]	; (800ae8c <__errno+0x8>)
 800ae86:	6818      	ldr	r0, [r3, #0]
 800ae88:	4770      	bx	lr
 800ae8a:	bf00      	nop
 800ae8c:	20000010 	.word	0x20000010

0800ae90 <__libc_init_array>:
 800ae90:	b570      	push	{r4, r5, r6, lr}
 800ae92:	2500      	movs	r5, #0
 800ae94:	4e0c      	ldr	r6, [pc, #48]	; (800aec8 <__libc_init_array+0x38>)
 800ae96:	4c0d      	ldr	r4, [pc, #52]	; (800aecc <__libc_init_array+0x3c>)
 800ae98:	1ba4      	subs	r4, r4, r6
 800ae9a:	10a4      	asrs	r4, r4, #2
 800ae9c:	42a5      	cmp	r5, r4
 800ae9e:	d109      	bne.n	800aeb4 <__libc_init_array+0x24>
 800aea0:	f000 f92e 	bl	800b100 <_init>
 800aea4:	2500      	movs	r5, #0
 800aea6:	4e0a      	ldr	r6, [pc, #40]	; (800aed0 <__libc_init_array+0x40>)
 800aea8:	4c0a      	ldr	r4, [pc, #40]	; (800aed4 <__libc_init_array+0x44>)
 800aeaa:	1ba4      	subs	r4, r4, r6
 800aeac:	10a4      	asrs	r4, r4, #2
 800aeae:	42a5      	cmp	r5, r4
 800aeb0:	d105      	bne.n	800aebe <__libc_init_array+0x2e>
 800aeb2:	bd70      	pop	{r4, r5, r6, pc}
 800aeb4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800aeb8:	4798      	blx	r3
 800aeba:	3501      	adds	r5, #1
 800aebc:	e7ee      	b.n	800ae9c <__libc_init_array+0xc>
 800aebe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800aec2:	4798      	blx	r3
 800aec4:	3501      	adds	r5, #1
 800aec6:	e7f2      	b.n	800aeae <__libc_init_array+0x1e>
 800aec8:	0802cabc 	.word	0x0802cabc
 800aecc:	0802cabc 	.word	0x0802cabc
 800aed0:	0802cabc 	.word	0x0802cabc
 800aed4:	0802cac0 	.word	0x0802cac0

0800aed8 <malloc>:
 800aed8:	4b02      	ldr	r3, [pc, #8]	; (800aee4 <malloc+0xc>)
 800aeda:	4601      	mov	r1, r0
 800aedc:	6818      	ldr	r0, [r3, #0]
 800aede:	f000 b86b 	b.w	800afb8 <_malloc_r>
 800aee2:	bf00      	nop
 800aee4:	20000010 	.word	0x20000010

0800aee8 <free>:
 800aee8:	4b02      	ldr	r3, [pc, #8]	; (800aef4 <free+0xc>)
 800aeea:	4601      	mov	r1, r0
 800aeec:	6818      	ldr	r0, [r3, #0]
 800aeee:	f000 b817 	b.w	800af20 <_free_r>
 800aef2:	bf00      	nop
 800aef4:	20000010 	.word	0x20000010

0800aef8 <memcpy>:
 800aef8:	b510      	push	{r4, lr}
 800aefa:	1e43      	subs	r3, r0, #1
 800aefc:	440a      	add	r2, r1
 800aefe:	4291      	cmp	r1, r2
 800af00:	d100      	bne.n	800af04 <memcpy+0xc>
 800af02:	bd10      	pop	{r4, pc}
 800af04:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af08:	f803 4f01 	strb.w	r4, [r3, #1]!
 800af0c:	e7f7      	b.n	800aefe <memcpy+0x6>

0800af0e <memset>:
 800af0e:	4603      	mov	r3, r0
 800af10:	4402      	add	r2, r0
 800af12:	4293      	cmp	r3, r2
 800af14:	d100      	bne.n	800af18 <memset+0xa>
 800af16:	4770      	bx	lr
 800af18:	f803 1b01 	strb.w	r1, [r3], #1
 800af1c:	e7f9      	b.n	800af12 <memset+0x4>
	...

0800af20 <_free_r>:
 800af20:	b538      	push	{r3, r4, r5, lr}
 800af22:	4605      	mov	r5, r0
 800af24:	2900      	cmp	r1, #0
 800af26:	d043      	beq.n	800afb0 <_free_r+0x90>
 800af28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af2c:	1f0c      	subs	r4, r1, #4
 800af2e:	2b00      	cmp	r3, #0
 800af30:	bfb8      	it	lt
 800af32:	18e4      	addlt	r4, r4, r3
 800af34:	f000 f8e1 	bl	800b0fa <__malloc_lock>
 800af38:	4a1e      	ldr	r2, [pc, #120]	; (800afb4 <_free_r+0x94>)
 800af3a:	6813      	ldr	r3, [r2, #0]
 800af3c:	4610      	mov	r0, r2
 800af3e:	b933      	cbnz	r3, 800af4e <_free_r+0x2e>
 800af40:	6063      	str	r3, [r4, #4]
 800af42:	6014      	str	r4, [r2, #0]
 800af44:	4628      	mov	r0, r5
 800af46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af4a:	f000 b8d7 	b.w	800b0fc <__malloc_unlock>
 800af4e:	42a3      	cmp	r3, r4
 800af50:	d90b      	bls.n	800af6a <_free_r+0x4a>
 800af52:	6821      	ldr	r1, [r4, #0]
 800af54:	1862      	adds	r2, r4, r1
 800af56:	4293      	cmp	r3, r2
 800af58:	bf01      	itttt	eq
 800af5a:	681a      	ldreq	r2, [r3, #0]
 800af5c:	685b      	ldreq	r3, [r3, #4]
 800af5e:	1852      	addeq	r2, r2, r1
 800af60:	6022      	streq	r2, [r4, #0]
 800af62:	6063      	str	r3, [r4, #4]
 800af64:	6004      	str	r4, [r0, #0]
 800af66:	e7ed      	b.n	800af44 <_free_r+0x24>
 800af68:	4613      	mov	r3, r2
 800af6a:	685a      	ldr	r2, [r3, #4]
 800af6c:	b10a      	cbz	r2, 800af72 <_free_r+0x52>
 800af6e:	42a2      	cmp	r2, r4
 800af70:	d9fa      	bls.n	800af68 <_free_r+0x48>
 800af72:	6819      	ldr	r1, [r3, #0]
 800af74:	1858      	adds	r0, r3, r1
 800af76:	42a0      	cmp	r0, r4
 800af78:	d10b      	bne.n	800af92 <_free_r+0x72>
 800af7a:	6820      	ldr	r0, [r4, #0]
 800af7c:	4401      	add	r1, r0
 800af7e:	1858      	adds	r0, r3, r1
 800af80:	4282      	cmp	r2, r0
 800af82:	6019      	str	r1, [r3, #0]
 800af84:	d1de      	bne.n	800af44 <_free_r+0x24>
 800af86:	6810      	ldr	r0, [r2, #0]
 800af88:	6852      	ldr	r2, [r2, #4]
 800af8a:	4401      	add	r1, r0
 800af8c:	6019      	str	r1, [r3, #0]
 800af8e:	605a      	str	r2, [r3, #4]
 800af90:	e7d8      	b.n	800af44 <_free_r+0x24>
 800af92:	d902      	bls.n	800af9a <_free_r+0x7a>
 800af94:	230c      	movs	r3, #12
 800af96:	602b      	str	r3, [r5, #0]
 800af98:	e7d4      	b.n	800af44 <_free_r+0x24>
 800af9a:	6820      	ldr	r0, [r4, #0]
 800af9c:	1821      	adds	r1, r4, r0
 800af9e:	428a      	cmp	r2, r1
 800afa0:	bf01      	itttt	eq
 800afa2:	6811      	ldreq	r1, [r2, #0]
 800afa4:	6852      	ldreq	r2, [r2, #4]
 800afa6:	1809      	addeq	r1, r1, r0
 800afa8:	6021      	streq	r1, [r4, #0]
 800afaa:	6062      	str	r2, [r4, #4]
 800afac:	605c      	str	r4, [r3, #4]
 800afae:	e7c9      	b.n	800af44 <_free_r+0x24>
 800afb0:	bd38      	pop	{r3, r4, r5, pc}
 800afb2:	bf00      	nop
 800afb4:	20003e0c 	.word	0x20003e0c

0800afb8 <_malloc_r>:
 800afb8:	b570      	push	{r4, r5, r6, lr}
 800afba:	1ccd      	adds	r5, r1, #3
 800afbc:	f025 0503 	bic.w	r5, r5, #3
 800afc0:	3508      	adds	r5, #8
 800afc2:	2d0c      	cmp	r5, #12
 800afc4:	bf38      	it	cc
 800afc6:	250c      	movcc	r5, #12
 800afc8:	2d00      	cmp	r5, #0
 800afca:	4606      	mov	r6, r0
 800afcc:	db01      	blt.n	800afd2 <_malloc_r+0x1a>
 800afce:	42a9      	cmp	r1, r5
 800afd0:	d903      	bls.n	800afda <_malloc_r+0x22>
 800afd2:	230c      	movs	r3, #12
 800afd4:	6033      	str	r3, [r6, #0]
 800afd6:	2000      	movs	r0, #0
 800afd8:	bd70      	pop	{r4, r5, r6, pc}
 800afda:	f000 f88e 	bl	800b0fa <__malloc_lock>
 800afde:	4a21      	ldr	r2, [pc, #132]	; (800b064 <_malloc_r+0xac>)
 800afe0:	6814      	ldr	r4, [r2, #0]
 800afe2:	4621      	mov	r1, r4
 800afe4:	b991      	cbnz	r1, 800b00c <_malloc_r+0x54>
 800afe6:	4c20      	ldr	r4, [pc, #128]	; (800b068 <_malloc_r+0xb0>)
 800afe8:	6823      	ldr	r3, [r4, #0]
 800afea:	b91b      	cbnz	r3, 800aff4 <_malloc_r+0x3c>
 800afec:	4630      	mov	r0, r6
 800afee:	f000 f83d 	bl	800b06c <_sbrk_r>
 800aff2:	6020      	str	r0, [r4, #0]
 800aff4:	4629      	mov	r1, r5
 800aff6:	4630      	mov	r0, r6
 800aff8:	f000 f838 	bl	800b06c <_sbrk_r>
 800affc:	1c43      	adds	r3, r0, #1
 800affe:	d124      	bne.n	800b04a <_malloc_r+0x92>
 800b000:	230c      	movs	r3, #12
 800b002:	4630      	mov	r0, r6
 800b004:	6033      	str	r3, [r6, #0]
 800b006:	f000 f879 	bl	800b0fc <__malloc_unlock>
 800b00a:	e7e4      	b.n	800afd6 <_malloc_r+0x1e>
 800b00c:	680b      	ldr	r3, [r1, #0]
 800b00e:	1b5b      	subs	r3, r3, r5
 800b010:	d418      	bmi.n	800b044 <_malloc_r+0x8c>
 800b012:	2b0b      	cmp	r3, #11
 800b014:	d90f      	bls.n	800b036 <_malloc_r+0x7e>
 800b016:	600b      	str	r3, [r1, #0]
 800b018:	18cc      	adds	r4, r1, r3
 800b01a:	50cd      	str	r5, [r1, r3]
 800b01c:	4630      	mov	r0, r6
 800b01e:	f000 f86d 	bl	800b0fc <__malloc_unlock>
 800b022:	f104 000b 	add.w	r0, r4, #11
 800b026:	1d23      	adds	r3, r4, #4
 800b028:	f020 0007 	bic.w	r0, r0, #7
 800b02c:	1ac3      	subs	r3, r0, r3
 800b02e:	d0d3      	beq.n	800afd8 <_malloc_r+0x20>
 800b030:	425a      	negs	r2, r3
 800b032:	50e2      	str	r2, [r4, r3]
 800b034:	e7d0      	b.n	800afd8 <_malloc_r+0x20>
 800b036:	684b      	ldr	r3, [r1, #4]
 800b038:	428c      	cmp	r4, r1
 800b03a:	bf16      	itet	ne
 800b03c:	6063      	strne	r3, [r4, #4]
 800b03e:	6013      	streq	r3, [r2, #0]
 800b040:	460c      	movne	r4, r1
 800b042:	e7eb      	b.n	800b01c <_malloc_r+0x64>
 800b044:	460c      	mov	r4, r1
 800b046:	6849      	ldr	r1, [r1, #4]
 800b048:	e7cc      	b.n	800afe4 <_malloc_r+0x2c>
 800b04a:	1cc4      	adds	r4, r0, #3
 800b04c:	f024 0403 	bic.w	r4, r4, #3
 800b050:	42a0      	cmp	r0, r4
 800b052:	d005      	beq.n	800b060 <_malloc_r+0xa8>
 800b054:	1a21      	subs	r1, r4, r0
 800b056:	4630      	mov	r0, r6
 800b058:	f000 f808 	bl	800b06c <_sbrk_r>
 800b05c:	3001      	adds	r0, #1
 800b05e:	d0cf      	beq.n	800b000 <_malloc_r+0x48>
 800b060:	6025      	str	r5, [r4, #0]
 800b062:	e7db      	b.n	800b01c <_malloc_r+0x64>
 800b064:	20003e0c 	.word	0x20003e0c
 800b068:	20003e10 	.word	0x20003e10

0800b06c <_sbrk_r>:
 800b06c:	b538      	push	{r3, r4, r5, lr}
 800b06e:	2300      	movs	r3, #0
 800b070:	4c05      	ldr	r4, [pc, #20]	; (800b088 <_sbrk_r+0x1c>)
 800b072:	4605      	mov	r5, r0
 800b074:	4608      	mov	r0, r1
 800b076:	6023      	str	r3, [r4, #0]
 800b078:	f7f6 f886 	bl	8001188 <_sbrk>
 800b07c:	1c43      	adds	r3, r0, #1
 800b07e:	d102      	bne.n	800b086 <_sbrk_r+0x1a>
 800b080:	6823      	ldr	r3, [r4, #0]
 800b082:	b103      	cbz	r3, 800b086 <_sbrk_r+0x1a>
 800b084:	602b      	str	r3, [r5, #0]
 800b086:	bd38      	pop	{r3, r4, r5, pc}
 800b088:	20004d4c 	.word	0x20004d4c

0800b08c <strcpy>:
 800b08c:	4603      	mov	r3, r0
 800b08e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b092:	f803 2b01 	strb.w	r2, [r3], #1
 800b096:	2a00      	cmp	r2, #0
 800b098:	d1f9      	bne.n	800b08e <strcpy+0x2>
 800b09a:	4770      	bx	lr

0800b09c <strncpy>:
 800b09c:	b570      	push	{r4, r5, r6, lr}
 800b09e:	4604      	mov	r4, r0
 800b0a0:	3901      	subs	r1, #1
 800b0a2:	b902      	cbnz	r2, 800b0a6 <strncpy+0xa>
 800b0a4:	bd70      	pop	{r4, r5, r6, pc}
 800b0a6:	4623      	mov	r3, r4
 800b0a8:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800b0ac:	1e56      	subs	r6, r2, #1
 800b0ae:	f803 5b01 	strb.w	r5, [r3], #1
 800b0b2:	b92d      	cbnz	r5, 800b0c0 <strncpy+0x24>
 800b0b4:	4414      	add	r4, r2
 800b0b6:	42a3      	cmp	r3, r4
 800b0b8:	d0f4      	beq.n	800b0a4 <strncpy+0x8>
 800b0ba:	f803 5b01 	strb.w	r5, [r3], #1
 800b0be:	e7fa      	b.n	800b0b6 <strncpy+0x1a>
 800b0c0:	461c      	mov	r4, r3
 800b0c2:	4632      	mov	r2, r6
 800b0c4:	e7ed      	b.n	800b0a2 <strncpy+0x6>

0800b0c6 <strstr>:
 800b0c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b0c8:	7803      	ldrb	r3, [r0, #0]
 800b0ca:	b17b      	cbz	r3, 800b0ec <strstr+0x26>
 800b0cc:	4604      	mov	r4, r0
 800b0ce:	7823      	ldrb	r3, [r4, #0]
 800b0d0:	4620      	mov	r0, r4
 800b0d2:	1c66      	adds	r6, r4, #1
 800b0d4:	b17b      	cbz	r3, 800b0f6 <strstr+0x30>
 800b0d6:	1e4a      	subs	r2, r1, #1
 800b0d8:	1e63      	subs	r3, r4, #1
 800b0da:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800b0de:	b14d      	cbz	r5, 800b0f4 <strstr+0x2e>
 800b0e0:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800b0e4:	4634      	mov	r4, r6
 800b0e6:	42af      	cmp	r7, r5
 800b0e8:	d0f7      	beq.n	800b0da <strstr+0x14>
 800b0ea:	e7f0      	b.n	800b0ce <strstr+0x8>
 800b0ec:	780b      	ldrb	r3, [r1, #0]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	bf18      	it	ne
 800b0f2:	2000      	movne	r0, #0
 800b0f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	e7fc      	b.n	800b0f4 <strstr+0x2e>

0800b0fa <__malloc_lock>:
 800b0fa:	4770      	bx	lr

0800b0fc <__malloc_unlock>:
 800b0fc:	4770      	bx	lr
	...

0800b100 <_init>:
 800b100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b102:	bf00      	nop
 800b104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b106:	bc08      	pop	{r3}
 800b108:	469e      	mov	lr, r3
 800b10a:	4770      	bx	lr

0800b10c <_fini>:
 800b10c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b10e:	bf00      	nop
 800b110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b112:	bc08      	pop	{r3}
 800b114:	469e      	mov	lr, r3
 800b116:	4770      	bx	lr
