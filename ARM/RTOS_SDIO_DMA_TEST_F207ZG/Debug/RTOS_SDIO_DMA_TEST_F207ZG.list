
RTOS_SDIO_DMA_TEST_F207ZG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a080  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000570  0800a210  0800a210  0001a210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a780  0800a780  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  0800a780  0800a780  0001a780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a788  0800a788  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a788  0800a788  0001a788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a78c  0800a78c  0001a78c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800a790  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a2e8  20000014  0800a7a4  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  2000a2fc  0800a7a4  0002a2fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00032ff0  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000516d  00000000  00000000  0005302d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013a0  00000000  00000000  000581a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00007498  00000000  00000000  00059540  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023fdc  00000000  00000000  000609d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001ae9e  00000000  00000000  000849b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d20ee  00000000  00000000  0009f852  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00171940  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000486c  00000000  00000000  001719bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00032046  00000000  00000000  00176228  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a1f8 	.word	0x0800a1f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	0800a1f8 	.word	0x0800a1f8

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	468c      	mov	ip, r1
 8000206:	4604      	mov	r4, r0
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0c03 	orr.w	ip, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	fbbc f7fe 	udiv	r7, ip, lr
 8000236:	fa1f f885 	uxth.w	r8, r5
 800023a:	fb0e c317 	mls	r3, lr, r7, ip
 800023e:	fb07 f908 	mul.w	r9, r7, r8
 8000242:	0c21      	lsrs	r1, r4, #16
 8000244:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000248:	4599      	cmp	r9, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 31ff 	add.w	r1, r7, #4294967295
 8000252:	f080 811c 	bcs.w	800048e <__udivmoddi4+0x28e>
 8000256:	4599      	cmp	r9, r3
 8000258:	f240 8119 	bls.w	800048e <__udivmoddi4+0x28e>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	eba3 0309 	sub.w	r3, r3, r9
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	fb00 f108 	mul.w	r1, r0, r8
 8000270:	b2a4      	uxth	r4, r4
 8000272:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000276:	42a1      	cmp	r1, r4
 8000278:	d909      	bls.n	800028e <__udivmoddi4+0x8e>
 800027a:	192c      	adds	r4, r5, r4
 800027c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000280:	f080 8107 	bcs.w	8000492 <__udivmoddi4+0x292>
 8000284:	42a1      	cmp	r1, r4
 8000286:	f240 8104 	bls.w	8000492 <__udivmoddi4+0x292>
 800028a:	3802      	subs	r0, #2
 800028c:	442c      	add	r4, r5
 800028e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000292:	2700      	movs	r7, #0
 8000294:	1a64      	subs	r4, r4, r1
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	2300      	movs	r3, #0
 800029a:	40d4      	lsrs	r4, r2
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80ec 	beq.w	8000488 <__udivmoddi4+0x288>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d148      	bne.n	8000358 <__udivmoddi4+0x158>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fb 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	469c      	mov	ip, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4c00 	strd	r4, ip, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	2701      	movs	r7, #1
 80002f4:	1b49      	subs	r1, r1, r5
 80002f6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80002fa:	fa1f f985 	uxth.w	r9, r5
 80002fe:	fbb1 fef8 	udiv	lr, r1, r8
 8000302:	fb08 111e 	mls	r1, r8, lr, r1
 8000306:	fb09 f00e 	mul.w	r0, r9, lr
 800030a:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800030e:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000312:	4298      	cmp	r0, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x126>
 8000316:	18eb      	adds	r3, r5, r3
 8000318:	f10e 31ff 	add.w	r1, lr, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x124>
 800031e:	4298      	cmp	r0, r3
 8000320:	f200 80cd 	bhi.w	80004be <__udivmoddi4+0x2be>
 8000324:	468e      	mov	lr, r1
 8000326:	1a1b      	subs	r3, r3, r0
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	fb09 f900 	mul.w	r9, r9, r0
 8000334:	b2a4      	uxth	r4, r4
 8000336:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800033a:	45a1      	cmp	r9, r4
 800033c:	d907      	bls.n	800034e <__udivmoddi4+0x14e>
 800033e:	192c      	adds	r4, r5, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x14c>
 8000346:	45a1      	cmp	r9, r4
 8000348:	f200 80b6 	bhi.w	80004b8 <__udivmoddi4+0x2b8>
 800034c:	4618      	mov	r0, r3
 800034e:	eba4 0409 	sub.w	r4, r4, r9
 8000352:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000356:	e79e      	b.n	8000296 <__udivmoddi4+0x96>
 8000358:	f1c7 0520 	rsb	r5, r7, #32
 800035c:	40bb      	lsls	r3, r7
 800035e:	fa22 fc05 	lsr.w	ip, r2, r5
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa21 f405 	lsr.w	r4, r1, r5
 800036a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800036e:	fbb4 f9fe 	udiv	r9, r4, lr
 8000372:	fa1f f88c 	uxth.w	r8, ip
 8000376:	fb0e 4419 	mls	r4, lr, r9, r4
 800037a:	fa20 f305 	lsr.w	r3, r0, r5
 800037e:	40b9      	lsls	r1, r7
 8000380:	fb09 fa08 	mul.w	sl, r9, r8
 8000384:	4319      	orrs	r1, r3
 8000386:	0c0b      	lsrs	r3, r1, #16
 8000388:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800038c:	45a2      	cmp	sl, r4
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f307 	lsl.w	r3, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2b4>
 80003a4:	45a2      	cmp	sl, r4
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2b4>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4464      	add	r4, ip
 80003b0:	eba4 040a 	sub.w	r4, r4, sl
 80003b4:	fbb4 f0fe 	udiv	r0, r4, lr
 80003b8:	fb0e 4410 	mls	r4, lr, r0, r4
 80003bc:	fb00 fa08 	mul.w	sl, r0, r8
 80003c0:	b289      	uxth	r1, r1
 80003c2:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 80003c6:	45a2      	cmp	sl, r4
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x1dc>
 80003ca:	eb1c 0404 	adds.w	r4, ip, r4
 80003ce:	f100 31ff 	add.w	r1, r0, #4294967295
 80003d2:	d26b      	bcs.n	80004ac <__udivmoddi4+0x2ac>
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d969      	bls.n	80004ac <__udivmoddi4+0x2ac>
 80003d8:	3802      	subs	r0, #2
 80003da:	4464      	add	r4, ip
 80003dc:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e0:	fba0 8902 	umull	r8, r9, r0, r2
 80003e4:	eba4 040a 	sub.w	r4, r4, sl
 80003e8:	454c      	cmp	r4, r9
 80003ea:	4641      	mov	r1, r8
 80003ec:	46ce      	mov	lr, r9
 80003ee:	d354      	bcc.n	800049a <__udivmoddi4+0x29a>
 80003f0:	d051      	beq.n	8000496 <__udivmoddi4+0x296>
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d069      	beq.n	80004ca <__udivmoddi4+0x2ca>
 80003f6:	1a5a      	subs	r2, r3, r1
 80003f8:	eb64 040e 	sbc.w	r4, r4, lr
 80003fc:	fa04 f505 	lsl.w	r5, r4, r5
 8000400:	fa22 f307 	lsr.w	r3, r2, r7
 8000404:	40fc      	lsrs	r4, r7
 8000406:	431d      	orrs	r5, r3
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	4095      	lsls	r5, r2
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	fa21 f003 	lsr.w	r0, r1, r3
 800041a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800041e:	fbb0 f7f8 	udiv	r7, r0, r8
 8000422:	fa1f f985 	uxth.w	r9, r5
 8000426:	fb08 0017 	mls	r0, r8, r7, r0
 800042a:	fa24 f303 	lsr.w	r3, r4, r3
 800042e:	4091      	lsls	r1, r2
 8000430:	fb07 fc09 	mul.w	ip, r7, r9
 8000434:	430b      	orrs	r3, r1
 8000436:	0c19      	lsrs	r1, r3, #16
 8000438:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800043c:	458c      	cmp	ip, r1
 800043e:	fa04 f402 	lsl.w	r4, r4, r2
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x254>
 8000444:	1869      	adds	r1, r5, r1
 8000446:	f107 30ff 	add.w	r0, r7, #4294967295
 800044a:	d231      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 800044c:	458c      	cmp	ip, r1
 800044e:	d92f      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000450:	3f02      	subs	r7, #2
 8000452:	4429      	add	r1, r5
 8000454:	eba1 010c 	sub.w	r1, r1, ip
 8000458:	fbb1 f0f8 	udiv	r0, r1, r8
 800045c:	fb08 1c10 	mls	ip, r8, r0, r1
 8000460:	fb00 fe09 	mul.w	lr, r0, r9
 8000464:	b299      	uxth	r1, r3
 8000466:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800046a:	458e      	cmp	lr, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 33ff 	add.w	r3, r0, #4294967295
 8000474:	d218      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000476:	458e      	cmp	lr, r1
 8000478:	d916      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	eba1 010e 	sub.w	r1, r1, lr
 8000482:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000486:	e73a      	b.n	80002fe <__udivmoddi4+0xfe>
 8000488:	4637      	mov	r7, r6
 800048a:	4630      	mov	r0, r6
 800048c:	e708      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048e:	460f      	mov	r7, r1
 8000490:	e6e6      	b.n	8000260 <__udivmoddi4+0x60>
 8000492:	4618      	mov	r0, r3
 8000494:	e6fb      	b.n	800028e <__udivmoddi4+0x8e>
 8000496:	4543      	cmp	r3, r8
 8000498:	d2ab      	bcs.n	80003f2 <__udivmoddi4+0x1f2>
 800049a:	ebb8 0102 	subs.w	r1, r8, r2
 800049e:	eb69 020c 	sbc.w	r2, r9, ip
 80004a2:	3801      	subs	r0, #1
 80004a4:	4696      	mov	lr, r2
 80004a6:	e7a4      	b.n	80003f2 <__udivmoddi4+0x1f2>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e7e8      	b.n	800047e <__udivmoddi4+0x27e>
 80004ac:	4608      	mov	r0, r1
 80004ae:	e795      	b.n	80003dc <__udivmoddi4+0x1dc>
 80004b0:	4607      	mov	r7, r0
 80004b2:	e7cf      	b.n	8000454 <__udivmoddi4+0x254>
 80004b4:	4681      	mov	r9, r0
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b8:	3802      	subs	r0, #2
 80004ba:	442c      	add	r4, r5
 80004bc:	e747      	b.n	800034e <__udivmoddi4+0x14e>
 80004be:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c2:	442b      	add	r3, r5
 80004c4:	e72f      	b.n	8000326 <__udivmoddi4+0x126>
 80004c6:	4638      	mov	r0, r7
 80004c8:	e707      	b.n	80002da <__udivmoddi4+0xda>
 80004ca:	4637      	mov	r7, r6
 80004cc:	e6e8      	b.n	80002a0 <__udivmoddi4+0xa0>
 80004ce:	bf00      	nop

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <vApplicationGetIdleTaskMemory>:

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004d4:	2380      	movs	r3, #128	; 0x80
{
 80004d6:	b430      	push	{r4, r5}
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004d8:	4d03      	ldr	r5, [pc, #12]	; (80004e8 <vApplicationGetIdleTaskMemory+0x14>)
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004da:	4c04      	ldr	r4, [pc, #16]	; (80004ec <vApplicationGetIdleTaskMemory+0x18>)
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004dc:	6005      	str	r5, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004de:	600c      	str	r4, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004e0:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 80004e2:	bc30      	pop	{r4, r5}
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	20000230 	.word	0x20000230
 80004ec:	20000030 	.word	0x20000030

080004f0 <LEDTaskFunc>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_LEDTaskFunc */
void LEDTaskFunc(void const *argument)
{
 80004f0:	b508      	push	{r3, lr}
	/* USER CODE BEGIN LEDTaskFunc */
	/* Infinite loop */
	for (;;)
	{
		osDelay(1);
 80004f2:	2001      	movs	r0, #1
 80004f4:	f007 ff28 	bl	8008348 <osDelay>
 80004f8:	e7fb      	b.n	80004f2 <LEDTaskFunc+0x2>
 80004fa:	bf00      	nop

080004fc <SDcardTaskFunc>:
{
 80004fc:	b500      	push	{lr}
	if (isInitialized == 0)
 80004fe:	4c3e      	ldr	r4, [pc, #248]	; (80005f8 <SDcardTaskFunc+0xfc>)
{
 8000500:	b0b3      	sub	sp, #204	; 0xcc
	if (isInitialized == 0)
 8000502:	7823      	ldrb	r3, [r4, #0]
 8000504:	2b00      	cmp	r3, #0
 8000506:	d065      	beq.n	80005d4 <SDcardTaskFunc+0xd8>
	MX_FATFS_Init();
 8000508:	f002 fff4 	bl	80034f4 <MX_FATFS_Init>
	uint8_t wtext[] =
 800050c:	2253      	movs	r2, #83	; 0x53
 800050e:	493b      	ldr	r1, [pc, #236]	; (80005fc <SDcardTaskFunc+0x100>)
 8000510:	a804      	add	r0, sp, #16
 8000512:	f009 fe5d 	bl	800a1d0 <memcpy>
	if (f_mount(&SDFatFs, (TCHAR const*) SDPath, 0) == FR_OK)
 8000516:	2200      	movs	r2, #0
 8000518:	4939      	ldr	r1, [pc, #228]	; (8000600 <SDcardTaskFunc+0x104>)
 800051a:	483a      	ldr	r0, [pc, #232]	; (8000604 <SDcardTaskFunc+0x108>)
 800051c:	f005 fb9c 	bl	8005c58 <f_mount>
 8000520:	b9a0      	cbnz	r0, 800054c <SDcardTaskFunc+0x50>
		if (isFsCreated == 0)
 8000522:	4c39      	ldr	r4, [pc, #228]	; (8000608 <SDcardTaskFunc+0x10c>)
 8000524:	7822      	ldrb	r2, [r4, #0]
 8000526:	b95a      	cbnz	r2, 8000540 <SDcardTaskFunc+0x44>
			if (f_mkfs(SDPath, FM_ANY, 0, workBuffer, sizeof(workBuffer))
 8000528:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800052c:	2107      	movs	r1, #7
 800052e:	9300      	str	r3, [sp, #0]
 8000530:	4833      	ldr	r0, [pc, #204]	; (8000600 <SDcardTaskFunc+0x104>)
 8000532:	4b36      	ldr	r3, [pc, #216]	; (800060c <SDcardTaskFunc+0x110>)
 8000534:	f007 fa1a 	bl	800796c <f_mkfs>
 8000538:	2800      	cmp	r0, #0
 800053a:	d156      	bne.n	80005ea <SDcardTaskFunc+0xee>
			isFsCreated = 1;
 800053c:	2301      	movs	r3, #1
 800053e:	7023      	strb	r3, [r4, #0]
		if (f_mount(&SDFatFs, (TCHAR const*) SDPath, 0) == FR_OK)
 8000540:	2200      	movs	r2, #0
 8000542:	492f      	ldr	r1, [pc, #188]	; (8000600 <SDcardTaskFunc+0x104>)
 8000544:	482f      	ldr	r0, [pc, #188]	; (8000604 <SDcardTaskFunc+0x108>)
 8000546:	f005 fb87 	bl	8005c58 <f_mount>
 800054a:	b170      	cbz	r0, 800056a <SDcardTaskFunc+0x6e>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800054c:	2200      	movs	r2, #0
 800054e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000552:	482f      	ldr	r0, [pc, #188]	; (8000610 <SDcardTaskFunc+0x114>)
 8000554:	f000 ff0c 	bl	8001370 <HAL_GPIO_WritePin>
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000558:	4c2d      	ldr	r4, [pc, #180]	; (8000610 <SDcardTaskFunc+0x114>)
 800055a:	4620      	mov	r0, r4
 800055c:	2101      	movs	r1, #1
 800055e:	f000 ff0b 	bl	8001378 <HAL_GPIO_TogglePin>
		osDelay(100);
 8000562:	2064      	movs	r0, #100	; 0x64
 8000564:	f007 fef0 	bl	8008348 <osDelay>
 8000568:	e7f7      	b.n	800055a <SDcardTaskFunc+0x5e>
			if (f_open(&MyFile, "STM321.TXT", FA_CREATE_ALWAYS | FA_WRITE)
 800056a:	220a      	movs	r2, #10
 800056c:	4929      	ldr	r1, [pc, #164]	; (8000614 <SDcardTaskFunc+0x118>)
 800056e:	482a      	ldr	r0, [pc, #168]	; (8000618 <SDcardTaskFunc+0x11c>)
 8000570:	f005 ff04 	bl	800637c <f_open>
 8000574:	2800      	cmp	r0, #0
 8000576:	d1e9      	bne.n	800054c <SDcardTaskFunc+0x50>
				res = f_write(&MyFile, wtext, sizeof(wtext),
 8000578:	ab02      	add	r3, sp, #8
 800057a:	a904      	add	r1, sp, #16
 800057c:	2253      	movs	r2, #83	; 0x53
 800057e:	4826      	ldr	r0, [pc, #152]	; (8000618 <SDcardTaskFunc+0x11c>)
 8000580:	f006 feb0 	bl	80072e4 <f_write>
				if ((byteswritten > 0) && (res == FR_OK))
 8000584:	9b02      	ldr	r3, [sp, #8]
 8000586:	2b00      	cmp	r3, #0
 8000588:	d0e0      	beq.n	800054c <SDcardTaskFunc+0x50>
 800058a:	2800      	cmp	r0, #0
 800058c:	d1de      	bne.n	800054c <SDcardTaskFunc+0x50>
					f_close(&MyFile);
 800058e:	4822      	ldr	r0, [pc, #136]	; (8000618 <SDcardTaskFunc+0x11c>)
 8000590:	f007 f8e6 	bl	8007760 <f_close>
					if (f_open(&MyFile, "STM321.TXT", FA_READ) == FR_OK)
 8000594:	2201      	movs	r2, #1
 8000596:	491f      	ldr	r1, [pc, #124]	; (8000614 <SDcardTaskFunc+0x118>)
 8000598:	481f      	ldr	r0, [pc, #124]	; (8000618 <SDcardTaskFunc+0x11c>)
 800059a:	f005 feef 	bl	800637c <f_open>
 800059e:	2800      	cmp	r0, #0
 80005a0:	d1d4      	bne.n	800054c <SDcardTaskFunc+0x50>
						res = f_read(&MyFile, rtext, sizeof(rtext),
 80005a2:	2264      	movs	r2, #100	; 0x64
 80005a4:	ab03      	add	r3, sp, #12
 80005a6:	eb0d 0102 	add.w	r1, sp, r2
 80005aa:	481b      	ldr	r0, [pc, #108]	; (8000618 <SDcardTaskFunc+0x11c>)
 80005ac:	f006 fc74 	bl	8006e98 <f_read>
						if ((bytesread > 0) && (res == FR_OK))
 80005b0:	9b03      	ldr	r3, [sp, #12]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d0ca      	beq.n	800054c <SDcardTaskFunc+0x50>
 80005b6:	2800      	cmp	r0, #0
 80005b8:	d1c8      	bne.n	800054c <SDcardTaskFunc+0x50>
							f_close(&MyFile);
 80005ba:	4817      	ldr	r0, [pc, #92]	; (8000618 <SDcardTaskFunc+0x11c>)
 80005bc:	f007 f8d0 	bl	8007760 <f_close>
							if ((bytesread == byteswritten))
 80005c0:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80005c4:	429a      	cmp	r2, r3
 80005c6:	d1c1      	bne.n	800054c <SDcardTaskFunc+0x50>
								HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,
 80005c8:	2201      	movs	r2, #1
 80005ca:	2180      	movs	r1, #128	; 0x80
 80005cc:	4810      	ldr	r0, [pc, #64]	; (8000610 <SDcardTaskFunc+0x114>)
 80005ce:	f000 fecf 	bl	8001370 <HAL_GPIO_WritePin>
 80005d2:	e7c1      	b.n	8000558 <SDcardTaskFunc+0x5c>
		BSP_SD_Init();
 80005d4:	f002 fff6 	bl	80035c4 <BSP_SD_Init>
		BSP_SD_ITConfig();
 80005d8:	f002 ff9c 	bl	8003514 <BSP_SD_ITConfig>
		if (BSP_SD_IsDetected())
 80005dc:	f002 ffe2 	bl	80035a4 <BSP_SD_IsDetected>
 80005e0:	2800      	cmp	r0, #0
 80005e2:	d091      	beq.n	8000508 <SDcardTaskFunc+0xc>
			isInitialized = 1;
 80005e4:	2301      	movs	r3, #1
 80005e6:	7023      	strb	r3, [r4, #0]
 80005e8:	e78e      	b.n	8000508 <SDcardTaskFunc+0xc>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80005ea:	2201      	movs	r2, #1
 80005ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005f0:	4807      	ldr	r0, [pc, #28]	; (8000610 <SDcardTaskFunc+0x114>)
 80005f2:	f000 febd 	bl	8001370 <HAL_GPIO_WritePin>
 80005f6:	e7af      	b.n	8000558 <SDcardTaskFunc+0x5c>
 80005f8:	20000285 	.word	0x20000285
 80005fc:	0800a254 	.word	0x0800a254
 8000600:	200060ac 	.word	0x200060ac
 8000604:	200060b0 	.word	0x200060b0
 8000608:	20000284 	.word	0x20000284
 800060c:	200040ac 	.word	0x200040ac
 8000610:	40020400 	.word	0x40020400
 8000614:	0800a248 	.word	0x0800a248
 8000618:	200071d0 	.word	0x200071d0

0800061c <HAL_GPIO_EXTI_Callback>:
}
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop

08000620 <SystemClock_Config>:
{
 8000620:	b570      	push	{r4, r5, r6, lr}
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000622:	2010      	movs	r0, #16
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000624:	2601      	movs	r6, #1
	RCC_OscInitTypeDef RCC_OscInitStruct =
 8000626:	2400      	movs	r4, #0
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000628:	2502      	movs	r5, #2
	RCC_OscInitStruct.PLL.PLLM = 13;
 800062a:	210d      	movs	r1, #13
	RCC_OscInitStruct.PLL.PLLN = 195;
 800062c:	22c3      	movs	r2, #195	; 0xc3
	RCC_OscInitStruct.PLL.PLLQ = 5;
 800062e:	2305      	movs	r3, #5
{
 8000630:	b092      	sub	sp, #72	; 0x48
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000632:	e9cd 6009 	strd	r6, r0, [sp, #36]	; 0x24
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000636:	a806      	add	r0, sp, #24
	RCC_OscInitStruct.PLL.PLLM = 13;
 8000638:	910e      	str	r1, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLN = 195;
 800063a:	920f      	str	r2, [sp, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLQ = 5;
 800063c:	9311      	str	r3, [sp, #68]	; 0x44
	RCC_OscInitTypeDef RCC_OscInitStruct =
 800063e:	9407      	str	r4, [sp, #28]
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8000640:	9401      	str	r4, [sp, #4]
	RCC_OscInitTypeDef RCC_OscInitStruct =
 8000642:	9408      	str	r4, [sp, #32]
 8000644:	940b      	str	r4, [sp, #44]	; 0x2c
 8000646:	940d      	str	r4, [sp, #52]	; 0x34
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8000648:	e9cd 4402 	strd	r4, r4, [sp, #8]
 800064c:	e9cd 4404 	strd	r4, r4, [sp, #16]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000650:	9506      	str	r5, [sp, #24]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000652:	950c      	str	r5, [sp, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000654:	9510      	str	r5, [sp, #64]	; 0x40
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000656:	260f      	movs	r6, #15
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000658:	f000 fea4 	bl	80013a4 <HAL_RCC_OscConfig>
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800065c:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000660:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000664:	a801      	add	r0, sp, #4
 8000666:	2103      	movs	r1, #3
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000668:	9403      	str	r4, [sp, #12]
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800066a:	e9cd 6501 	strd	r6, r5, [sp, #4]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800066e:	e9cd 2304 	strd	r2, r3, [sp, #16]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000672:	f001 f859 	bl	8001728 <HAL_RCC_ClockConfig>
}
 8000676:	b012      	add	sp, #72	; 0x48
 8000678:	bd70      	pop	{r4, r5, r6, pc}
 800067a:	bf00      	nop

0800067c <main>:
	GPIO_InitTypeDef GPIO_InitStruct =
 800067c:	2400      	movs	r4, #0
{
 800067e:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8000682:	b097      	sub	sp, #92	; 0x5c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000684:	2702      	movs	r7, #2
	HAL_Init();
 8000686:	f000 fb47 	bl	8000d18 <HAL_Init>
	SystemClock_Config();
 800068a:	f7ff ffc9 	bl	8000620 <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct =
 800068e:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
 8000692:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000696:	4d9b      	ldr	r5, [pc, #620]	; (8000904 <main+0x288>)
 8000698:	9401      	str	r4, [sp, #4]
	GPIO_InitTypeDef GPIO_InitStruct =
 800069a:	940f      	str	r4, [sp, #60]	; 0x3c
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800069c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 800069e:	4622      	mov	r2, r4
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80006a0:	f043 0304 	orr.w	r3, r3, #4
 80006a4:	632b      	str	r3, [r5, #48]	; 0x30
 80006a6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 80006a8:	f244 0181 	movw	r1, #16513	; 0x4081
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80006ac:	f003 0304 	and.w	r3, r3, #4
 80006b0:	9301      	str	r3, [sp, #4]
 80006b2:	9b01      	ldr	r3, [sp, #4]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80006b4:	9402      	str	r4, [sp, #8]
 80006b6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 80006b8:	4893      	ldr	r0, [pc, #588]	; (8000908 <main+0x28c>)
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80006ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006be:	632b      	str	r3, [r5, #48]	; 0x30
 80006c0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006c2:	f8df b270 	ldr.w	fp, [pc, #624]	; 8000934 <main+0x2b8>
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80006c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ca:	9302      	str	r3, [sp, #8]
 80006cc:	9b02      	ldr	r3, [sp, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80006ce:	9403      	str	r4, [sp, #12]
 80006d0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006d2:	2603      	movs	r6, #3
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80006d4:	f043 0301 	orr.w	r3, r3, #1
 80006d8:	632b      	str	r3, [r5, #48]	; 0x30
 80006da:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006dc:	f04f 090b 	mov.w	r9, #11
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80006e0:	f003 0301 	and.w	r3, r3, #1
 80006e4:	9303      	str	r3, [sp, #12]
 80006e6:	9b03      	ldr	r3, [sp, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80006e8:	9404      	str	r4, [sp, #16]
 80006ea:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	GPIO_InitStruct.Pin = RMII_REF_CLK_Pin | RMII_MDIO_Pin;
 80006ec:	f04f 0a06 	mov.w	sl, #6
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80006f0:	433b      	orrs	r3, r7
 80006f2:	632b      	str	r3, [r5, #48]	; 0x30
 80006f4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f6:	f04f 0801 	mov.w	r8, #1
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80006fa:	403b      	ands	r3, r7
 80006fc:	9304      	str	r3, [sp, #16]
 80006fe:	9b04      	ldr	r3, [sp, #16]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000700:	9405      	str	r4, [sp, #20]
 8000702:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000704:	f043 0310 	orr.w	r3, r3, #16
 8000708:	632b      	str	r3, [r5, #48]	; 0x30
 800070a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800070c:	f003 0310 	and.w	r3, r3, #16
 8000710:	9305      	str	r3, [sp, #20]
 8000712:	9b05      	ldr	r3, [sp, #20]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000714:	9406      	str	r4, [sp, #24]
 8000716:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000718:	f043 0308 	orr.w	r3, r3, #8
 800071c:	632b      	str	r3, [r5, #48]	; 0x30
 800071e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000720:	f003 0308 	and.w	r3, r3, #8
 8000724:	9306      	str	r3, [sp, #24]
 8000726:	9b06      	ldr	r3, [sp, #24]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000728:	9407      	str	r4, [sp, #28]
 800072a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800072c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000730:	632b      	str	r3, [r5, #48]	; 0x30
 8000732:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000738:	9307      	str	r3, [sp, #28]
 800073a:	9b07      	ldr	r3, [sp, #28]
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 800073c:	f000 fe18 	bl	8001370 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin,
 8000740:	4622      	mov	r2, r4
 8000742:	2140      	movs	r1, #64	; 0x40
 8000744:	4871      	ldr	r0, [pc, #452]	; (800090c <main+0x290>)
 8000746:	f000 fe13 	bl	8001370 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = USER_Btn_Pin | GPIO_PIN_6 | GPIO_PIN_7;
 800074a:	f44f 5303 	mov.w	r3, #8384	; 0x20c0
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800074e:	a90f      	add	r1, sp, #60	; 0x3c
 8000750:	486f      	ldr	r0, [pc, #444]	; (8000910 <main+0x294>)
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000752:	e9cd 3b0f 	strd	r3, fp, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	9411      	str	r4, [sp, #68]	; 0x44
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000758:	f000 fcfc 	bl	8001154 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = RMII_MDC_Pin | RMII_RXD0_Pin | RMII_RXD1_Pin;
 800075c:	2332      	movs	r3, #50	; 0x32
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800075e:	a90f      	add	r1, sp, #60	; 0x3c
 8000760:	486b      	ldr	r0, [pc, #428]	; (8000910 <main+0x294>)
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000762:	e9cd 370f 	strd	r3, r7, [sp, #60]	; 0x3c
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000766:	e9cd 6912 	strd	r6, r9, [sp, #72]	; 0x48
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076a:	9411      	str	r4, [sp, #68]	; 0x44
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800076c:	f000 fcf2 	bl	8001154 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000770:	a90f      	add	r1, sp, #60	; 0x3c
 8000772:	4868      	ldr	r0, [pc, #416]	; (8000914 <main+0x298>)
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000774:	e9cd 6912 	strd	r6, r9, [sp, #72]	; 0x48
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	e9cd 7410 	strd	r7, r4, [sp, #64]	; 0x40
	GPIO_InitStruct.Pin = RMII_REF_CLK_Pin | RMII_MDIO_Pin;
 800077c:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000780:	f000 fce8 	bl	8001154 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | LD2_Pin;
 8000784:	f244 0381 	movw	r3, #16513	; 0x4081
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000788:	a90f      	add	r1, sp, #60	; 0x3c
 800078a:	485f      	ldr	r0, [pc, #380]	; (8000908 <main+0x28c>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078c:	e9cd 380f 	strd	r3, r8, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000790:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000794:	f000 fcde 	bl	8001154 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_14;
 8000798:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800079c:	a90f      	add	r1, sp, #60	; 0x3c
 800079e:	485e      	ldr	r0, [pc, #376]	; (8000918 <main+0x29c>)
	GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_14;
 80007a0:	930f      	str	r3, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a2:	e9cd b410 	strd	fp, r4, [sp, #64]	; 0x40
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007a6:	f000 fcd5 	bl	8001154 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80007aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80007ae:	a90f      	add	r1, sp, #60	; 0x3c
 80007b0:	4855      	ldr	r0, [pc, #340]	; (8000908 <main+0x28c>)
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007b2:	e9cd 6912 	strd	r6, r9, [sp, #72]	; 0x48
	GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80007b6:	930f      	str	r3, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	e9cd 7410 	strd	r7, r4, [sp, #64]	; 0x40
	HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80007bc:	f000 fcca 	bl	8001154 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 80007c0:	2304      	movs	r3, #4
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007c2:	a90f      	add	r1, sp, #60	; 0x3c
 80007c4:	4851      	ldr	r0, [pc, #324]	; (800090c <main+0x290>)
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007c6:	e9cd 4810 	strd	r4, r8, [sp, #64]	; 0x40
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 80007ca:	930f      	str	r3, [sp, #60]	; 0x3c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007cc:	f000 fcc2 	bl	8001154 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80007d0:	2340      	movs	r3, #64	; 0x40
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007d2:	a90f      	add	r1, sp, #60	; 0x3c
 80007d4:	484d      	ldr	r0, [pc, #308]	; (800090c <main+0x290>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d6:	e9cd 8410 	strd	r8, r4, [sp, #64]	; 0x40
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80007da:	930f      	str	r3, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007dc:	9412      	str	r4, [sp, #72]	; 0x48
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007de:	f000 fcb9 	bl	8001154 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80007e2:	2380      	movs	r3, #128	; 0x80
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007e4:	a90f      	add	r1, sp, #60	; 0x3c
 80007e6:	4849      	ldr	r0, [pc, #292]	; (800090c <main+0x290>)
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80007e8:	930f      	str	r3, [sp, #60]	; 0x3c
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80007ea:	f04f 080a 	mov.w	r8, #10
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007f2:	f000 fcaf 	bl	8001154 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = USB_SOF_Pin | USB_ID_Pin | USB_DM_Pin | USB_DP_Pin;
 80007f6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fa:	a90f      	add	r1, sp, #60	; 0x3c
 80007fc:	4845      	ldr	r0, [pc, #276]	; (8000914 <main+0x298>)
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007fe:	9612      	str	r6, [sp, #72]	; 0x48
	GPIO_InitStruct.Pin = USB_SOF_Pin | USB_ID_Pin | USB_DM_Pin | USB_DP_Pin;
 8000800:	930f      	str	r3, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	e9cd 7410 	strd	r7, r4, [sp, #64]	; 0x40
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000806:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080a:	f000 fca3 	bl	8001154 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800080e:	f44f 7300 	mov.w	r3, #512	; 0x200
	HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000812:	a90f      	add	r1, sp, #60	; 0x3c
 8000814:	483f      	ldr	r0, [pc, #252]	; (8000914 <main+0x298>)
	GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000816:	930f      	str	r3, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
	HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800081c:	f000 fc9a 	bl	8001154 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = RMII_TX_EN_Pin | RMII_TXD0_Pin;
 8000820:	f44f 5320 	mov.w	r3, #10240	; 0x2800
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000824:	a90f      	add	r1, sp, #60	; 0x3c
 8000826:	4839      	ldr	r0, [pc, #228]	; (800090c <main+0x290>)
	GPIO_InitStruct.Pin = RMII_TX_EN_Pin | RMII_TXD0_Pin;
 8000828:	930f      	str	r3, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800082a:	9612      	str	r6, [sp, #72]	; 0x48
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800082c:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	e9cd 7410 	strd	r7, r4, [sp, #64]	; 0x40
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000834:	f000 fc8e 	bl	8001154 <HAL_GPIO_Init>
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000838:	4622      	mov	r2, r4
 800083a:	2105      	movs	r1, #5
 800083c:	2017      	movs	r0, #23
 800083e:	f000 fabf 	bl	8000dc0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000842:	2017      	movs	r0, #23
 8000844:	f000 faf2 	bl	8000e2c <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000848:	4622      	mov	r2, r4
 800084a:	2105      	movs	r1, #5
 800084c:	2028      	movs	r0, #40	; 0x28
 800084e:	f000 fab7 	bl	8000dc0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000852:	2028      	movs	r0, #40	; 0x28
 8000854:	f000 faea 	bl	8000e2c <HAL_NVIC_EnableIRQ>
	__HAL_RCC_DMA2_CLK_ENABLE();
 8000858:	9400      	str	r4, [sp, #0]
 800085a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 6, 0);
 800085c:	4622      	mov	r2, r4
	__HAL_RCC_DMA2_CLK_ENABLE();
 800085e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000862:	632b      	str	r3, [r5, #48]	; 0x30
 8000864:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 6, 0);
 8000866:	4651      	mov	r1, sl
	__HAL_RCC_DMA2_CLK_ENABLE();
 8000868:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800086c:	9300      	str	r3, [sp, #0]
	HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 6, 0);
 800086e:	203b      	movs	r0, #59	; 0x3b
	__HAL_RCC_DMA2_CLK_ENABLE();
 8000870:	9b00      	ldr	r3, [sp, #0]
	HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 6, 0);
 8000872:	f000 faa5 	bl	8000dc0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000876:	203b      	movs	r0, #59	; 0x3b
 8000878:	f000 fad8 	bl	8000e2c <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 6, 0);
 800087c:	4622      	mov	r2, r4
 800087e:	4651      	mov	r1, sl
 8000880:	2045      	movs	r0, #69	; 0x45
 8000882:	f000 fa9d 	bl	8000dc0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000886:	2045      	movs	r0, #69	; 0x45
 8000888:	f000 fad0 	bl	8000e2c <HAL_NVIC_EnableIRQ>
	huart3.Init.BaudRate = 115200;
 800088c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000890:	220c      	movs	r2, #12
	huart3.Instance = USART3;
 8000892:	4b22      	ldr	r3, [pc, #136]	; (800091c <main+0x2a0>)
 8000894:	f5a5 35f8 	sub.w	r5, r5, #126976	; 0x1f000
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8000898:	4618      	mov	r0, r3
	huart3.Init.BaudRate = 115200;
 800089a:	e9c3 5100 	strd	r5, r1, [r3]
	huart3.Init.Mode = UART_MODE_TX_RX;
 800089e:	615a      	str	r2, [r3, #20]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80008a0:	e9c3 4402 	strd	r4, r4, [r3, #8]
	huart3.Init.Parity = UART_PARITY_NONE;
 80008a4:	611c      	str	r4, [r3, #16]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a6:	e9c3 4406 	strd	r4, r4, [r3, #24]
	osThreadDef(SDcardTask, SDcardTaskFunc, osPriorityBelowNormal, 0, 2048);
 80008aa:	4d1d      	ldr	r5, [pc, #116]	; (8000920 <main+0x2a4>)
	if (HAL_UART_Init(&huart3) != HAL_OK)
 80008ac:	f002 f8b0 	bl	8002a10 <HAL_UART_Init>
	hsd.Instance = SDIO;
 80008b0:	4b1c      	ldr	r3, [pc, #112]	; (8000924 <main+0x2a8>)
 80008b2:	4a1d      	ldr	r2, [pc, #116]	; (8000928 <main+0x2ac>)
	osThreadDef(SDcardTask, SDcardTaskFunc, osPriorityBelowNormal, 0, 2048);
 80008b4:	ae08      	add	r6, sp, #32
	hsd.Init.ClockDiv = 10;
 80008b6:	f8c3 8018 	str.w	r8, [r3, #24]
	hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80008ba:	e9c3 4401 	strd	r4, r4, [r3, #4]
	hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80008be:	e9c3 4403 	strd	r4, r4, [r3, #12]
	hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80008c2:	615c      	str	r4, [r3, #20]
	hsd.Instance = SDIO;
 80008c4:	601a      	str	r2, [r3, #0]
	MX_FATFS_Init();
 80008c6:	f002 fe15 	bl	80034f4 <MX_FATFS_Init>
	osThreadDef(SDcardTask, SDcardTaskFunc, osPriorityBelowNormal, 0, 2048);
 80008ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008cc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80008ce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008d2:	e886 0007 	stmia.w	r6, {r0, r1, r2}
	SDcardTaskHandle = osThreadCreate(osThread(SDcardTask), NULL);
 80008d6:	4621      	mov	r1, r4
 80008d8:	a808      	add	r0, sp, #32
 80008da:	f007 fd0b 	bl	80082f4 <osThreadCreate>
 80008de:	4b13      	ldr	r3, [pc, #76]	; (800092c <main+0x2b0>)
	osThreadDef(LEDTask, LEDTaskFunc, osPriorityIdle, 0, 256);
 80008e0:	ae0f      	add	r6, sp, #60	; 0x3c
 80008e2:	350c      	adds	r5, #12
	SDcardTaskHandle = osThreadCreate(osThread(SDcardTask), NULL);
 80008e4:	6018      	str	r0, [r3, #0]
	osThreadDef(LEDTask, LEDTaskFunc, osPriorityIdle, 0, 256);
 80008e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008e8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80008ea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008ee:	e886 0007 	stmia.w	r6, {r0, r1, r2}
	LEDTaskHandle = osThreadCreate(osThread(LEDTask), NULL);
 80008f2:	4621      	mov	r1, r4
 80008f4:	a80f      	add	r0, sp, #60	; 0x3c
 80008f6:	f007 fcfd 	bl	80082f4 <osThreadCreate>
 80008fa:	4b0d      	ldr	r3, [pc, #52]	; (8000930 <main+0x2b4>)
 80008fc:	6018      	str	r0, [r3, #0]
	osKernelStart();
 80008fe:	f007 fcf3 	bl	80082e8 <osKernelStart>
 8000902:	e7fe      	b.n	8000902 <main+0x286>
 8000904:	40023800 	.word	0x40023800
 8000908:	40020400 	.word	0x40020400
 800090c:	40021800 	.word	0x40021800
 8000910:	40020800 	.word	0x40020800
 8000914:	40020000 	.word	0x40020000
 8000918:	40021000 	.word	0x40021000
 800091c:	2000406c 	.word	0x2000406c
 8000920:	0800a210 	.word	0x0800a210
 8000924:	2000714c 	.word	0x2000714c
 8000928:	40012c00 	.word	0x40012c00
 800092c:	20004068 	.word	0x20004068
 8000930:	20004064 	.word	0x20004064
 8000934:	10110000 	.word	0x10110000

08000938 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM9)
 8000938:	6802      	ldr	r2, [r0, #0]
 800093a:	4b03      	ldr	r3, [pc, #12]	; (8000948 <HAL_TIM_PeriodElapsedCallback+0x10>)
 800093c:	429a      	cmp	r2, r3
 800093e:	d000      	beq.n	8000942 <HAL_TIM_PeriodElapsedCallback+0xa>
		HAL_IncTick();
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000940:	4770      	bx	lr
		HAL_IncTick();
 8000942:	f000 ba03 	b.w	8000d4c <HAL_IncTick>
 8000946:	bf00      	nop
 8000948:	40014000 	.word	0x40014000

0800094c <Error_Handler>:
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop

08000950 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000950:	2000      	movs	r0, #0
{
 8000952:	b410      	push	{r4}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000954:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <HAL_MspInit+0x40>)
{
 8000956:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000958:	9000      	str	r0, [sp, #0]
 800095a:	6c59      	ldr	r1, [r3, #68]	; 0x44
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800095c:	4602      	mov	r2, r0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800095e:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8000962:	6459      	str	r1, [r3, #68]	; 0x44
 8000964:	6c5c      	ldr	r4, [r3, #68]	; 0x44
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000966:	210f      	movs	r1, #15
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000968:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
 800096c:	9400      	str	r4, [sp, #0]
 800096e:	9c00      	ldr	r4, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000970:	9001      	str	r0, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000972:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8000976:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8000978:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 800097c:	641c      	str	r4, [r3, #64]	; 0x40
 800097e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000980:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000984:	9301      	str	r3, [sp, #4]
 8000986:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000988:	b003      	add	sp, #12
 800098a:	bc10      	pop	{r4}
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800098c:	f000 ba18 	b.w	8000dc0 <HAL_NVIC_SetPriority>
 8000990:	40023800 	.word	0x40023800

08000994 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000998:	2400      	movs	r4, #0
  if(hsd->Instance==SDIO)
 800099a:	6802      	ldr	r2, [r0, #0]
 800099c:	4b54      	ldr	r3, [pc, #336]	; (8000af0 <HAL_SD_MspInit+0x15c>)
{
 800099e:	b088      	sub	sp, #32
  if(hsd->Instance==SDIO)
 80009a0:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a2:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80009a6:	e9cd 4405 	strd	r4, r4, [sp, #20]
 80009aa:	9407      	str	r4, [sp, #28]
  if(hsd->Instance==SDIO)
 80009ac:	d002      	beq.n	80009b4 <HAL_SD_MspInit+0x20>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80009ae:	b008      	add	sp, #32
 80009b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009b4:	f04f 0804 	mov.w	r8, #4
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80009b8:	250c      	movs	r5, #12
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80009ba:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009be:	f04f 0902 	mov.w	r9, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c2:	2703      	movs	r7, #3
    __HAL_RCC_SDIO_CLK_ENABLE();
 80009c4:	9400      	str	r4, [sp, #0]
 80009c6:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 80009ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80009cc:	4606      	mov	r6, r0
 80009ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80009d2:	645a      	str	r2, [r3, #68]	; 0x44
 80009d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009d6:	4847      	ldr	r0, [pc, #284]	; (8000af4 <HAL_SD_MspInit+0x160>)
    __HAL_RCC_SDIO_CLK_ENABLE();
 80009d8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80009dc:	9200      	str	r2, [sp, #0]
 80009de:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e0:	9401      	str	r4, [sp, #4]
 80009e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80009e4:	f04f 6a00 	mov.w	sl, #134217728	; 0x8000000
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e8:	ea42 0208 	orr.w	r2, r2, r8
 80009ec:	631a      	str	r2, [r3, #48]	; 0x30
 80009ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80009f0:	ea02 0208 	and.w	r2, r2, r8
 80009f4:	9201      	str	r2, [sp, #4]
 80009f6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009f8:	9402      	str	r4, [sp, #8]
 80009fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80009fc:	f042 0208 	orr.w	r2, r2, #8
 8000a00:	631a      	str	r2, [r3, #48]	; 0x30
 8000a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000a04:	9103      	str	r1, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a06:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a0a:	eb0d 0105 	add.w	r1, sp, r5
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a0e:	9302      	str	r3, [sp, #8]
 8000a10:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a12:	f8cd 9010 	str.w	r9, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000a16:	e9cd 7506 	strd	r7, r5, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a1a:	f000 fb9b 	bl	8001154 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a1e:	eb0d 0105 	add.w	r1, sp, r5
 8000a22:	4835      	ldr	r0, [pc, #212]	; (8000af8 <HAL_SD_MspInit+0x164>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a24:	f8cd 9010 	str.w	r9, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000a28:	e9cd 7506 	strd	r7, r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a2e:	f8cd 800c 	str.w	r8, [sp, #12]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a32:	f000 fb8f 	bl	8001154 <HAL_GPIO_Init>
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a36:	2040      	movs	r0, #64	; 0x40
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a38:	f44f 6980 	mov.w	r9, #1024	; 0x400
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a3c:	f44f 5e80 	mov.w	lr, #4096	; 0x1000
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a40:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8000a44:	2120      	movs	r1, #32
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8000a46:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000a4a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8000a4e:	4d2b      	ldr	r5, [pc, #172]	; (8000afc <HAL_SD_MspInit+0x168>)
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a50:	60ec      	str	r4, [r5, #12]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a52:	622c      	str	r4, [r5, #32]
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8000a54:	4c2a      	ldr	r4, [pc, #168]	; (8000b00 <HAL_SD_MspInit+0x16c>)
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a56:	60a8      	str	r0, [r5, #8]
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8000a58:	4628      	mov	r0, r5
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000a5a:	f8c5 8024 	str.w	r8, [r5, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000a5e:	62af      	str	r7, [r5, #40]	; 0x28
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8000a60:	e9c5 4a00 	strd	r4, sl, [r5]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a64:	e9c5 9e04 	strd	r9, lr, [r5, #16]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8000a68:	e9c5 c106 	strd	ip, r1, [r5, #24]
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000a6c:	e9c5 230b 	strd	r2, r3, [r5, #44]	; 0x2c
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8000a70:	f000 f9ea 	bl	8000e48 <HAL_DMA_Init>
 8000a74:	bba8      	cbnz	r0, 8000ae2 <HAL_SD_MspInit+0x14e>
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000a76:	2003      	movs	r0, #3
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000a78:	2704      	movs	r7, #4
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a7a:	2300      	movs	r3, #0
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8000a7c:	f04f 6a00 	mov.w	sl, #134217728	; 0x8000000
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a80:	f44f 6980 	mov.w	r9, #1024	; 0x400
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a84:	f44f 5880 	mov.w	r8, #4096	; 0x1000
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a88:	f44f 4e80 	mov.w	lr, #16384	; 0x4000
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8000a8c:	f04f 0c20 	mov.w	ip, #32
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8000a90:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000a94:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8000a98:	4c1a      	ldr	r4, [pc, #104]	; (8000b04 <HAL_SD_MspInit+0x170>)
    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8000a9a:	63f5      	str	r5, [r6, #60]	; 0x3c
 8000a9c:	63ae      	str	r6, [r5, #56]	; 0x38
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8000a9e:	4d1a      	ldr	r5, [pc, #104]	; (8000b08 <HAL_SD_MspInit+0x174>)
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000aa0:	e9c4 7009 	strd	r7, r0, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8000aa4:	4620      	mov	r0, r4
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8000aa6:	f8c4 a004 	str.w	sl, [r4, #4]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000aaa:	f8c4 9010 	str.w	r9, [r4, #16]
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8000aae:	6025      	str	r5, [r4, #0]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ab0:	e9c4 8e05 	strd	r8, lr, [r4, #20]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8000ab4:	f8c4 c01c 	str.w	ip, [r4, #28]
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000ab8:	e9c4 120b 	strd	r1, r2, [r4, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000abc:	e9c4 3302 	strd	r3, r3, [r4, #8]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ac0:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8000ac2:	f000 f9c1 	bl	8000e48 <HAL_DMA_Init>
 8000ac6:	b978      	cbnz	r0, 8000ae8 <HAL_SD_MspInit+0x154>
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	2105      	movs	r1, #5
    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8000acc:	6434      	str	r4, [r6, #64]	; 0x40
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 8000ace:	2031      	movs	r0, #49	; 0x31
    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8000ad0:	63a6      	str	r6, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 8000ad2:	f000 f975 	bl	8000dc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8000ad6:	2031      	movs	r0, #49	; 0x31
 8000ad8:	f000 f9a8 	bl	8000e2c <HAL_NVIC_EnableIRQ>
}
 8000adc:	b008      	add	sp, #32
 8000ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      Error_Handler();
 8000ae2:	f7ff ff33 	bl	800094c <Error_Handler>
 8000ae6:	e7c6      	b.n	8000a76 <HAL_SD_MspInit+0xe2>
      Error_Handler();
 8000ae8:	f7ff ff30 	bl	800094c <Error_Handler>
 8000aec:	e7ec      	b.n	8000ac8 <HAL_SD_MspInit+0x134>
 8000aee:	bf00      	nop
 8000af0:	40012c00 	.word	0x40012c00
 8000af4:	40020800 	.word	0x40020800
 8000af8:	40020c00 	.word	0x40020c00
 8000afc:	200070ec 	.word	0x200070ec
 8000b00:	400264a0 	.word	0x400264a0
 8000b04:	20004004 	.word	0x20004004
 8000b08:	40026458 	.word	0x40026458

08000b0c <HAL_UART_MspInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0c:	2300      	movs	r3, #0
{
 8000b0e:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(huart->Instance==USART3)
 8000b10:	6801      	ldr	r1, [r0, #0]
 8000b12:	4a18      	ldr	r2, [pc, #96]	; (8000b74 <HAL_UART_MspInit+0x68>)
{
 8000b14:	b089      	sub	sp, #36	; 0x24
  if(huart->Instance==USART3)
 8000b16:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b18:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8000b1c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8000b20:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART3)
 8000b22:	d001      	beq.n	8000b28 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b24:	b009      	add	sp, #36	; 0x24
 8000b26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b28:	f44f 7740 	mov.w	r7, #768	; 0x300
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2c:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2e:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b30:	2407      	movs	r4, #7
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b32:	9301      	str	r3, [sp, #4]
 8000b34:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
 8000b38:	6c10      	ldr	r0, [r2, #64]	; 0x40
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b3a:	a903      	add	r1, sp, #12
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b3c:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
 8000b40:	6410      	str	r0, [r2, #64]	; 0x40
 8000b42:	6c10      	ldr	r0, [r2, #64]	; 0x40
 8000b44:	f400 2080 	and.w	r0, r0, #262144	; 0x40000
 8000b48:	9001      	str	r0, [sp, #4]
 8000b4a:	9801      	ldr	r0, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b4c:	9302      	str	r3, [sp, #8]
 8000b4e:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b50:	4809      	ldr	r0, [pc, #36]	; (8000b78 <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b52:	f043 0308 	orr.w	r3, r3, #8
 8000b56:	6313      	str	r3, [r2, #48]	; 0x30
 8000b58:	6b13      	ldr	r3, [r2, #48]	; 0x30
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b5a:	9703      	str	r7, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b5c:	f003 0308 	and.w	r3, r3, #8
 8000b60:	9302      	str	r3, [sp, #8]
 8000b62:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b64:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b66:	e9cd 5406 	strd	r5, r4, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b6a:	f000 faf3 	bl	8001154 <HAL_GPIO_Init>
}
 8000b6e:	b009      	add	sp, #36	; 0x24
 8000b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40004800 	.word	0x40004800
 8000b78:	40020c00 	.word	0x40020c00

08000b7c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b7c:	b530      	push	{r4, r5, lr}
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority ,0);

  /* Enable the TIM9 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 8000b7e:	2500      	movs	r5, #0
{
 8000b80:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority ,0);
 8000b82:	4601      	mov	r1, r0
 8000b84:	462a      	mov	r2, r5
 8000b86:	2018      	movs	r0, #24
 8000b88:	f000 f91a 	bl	8000dc0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000b8c:	2018      	movs	r0, #24
 8000b8e:	f000 f94d 	bl	8000e2c <HAL_NVIC_EnableIRQ>
  __HAL_RCC_TIM9_CLK_ENABLE();
 8000b92:	4b16      	ldr	r3, [pc, #88]	; (8000bec <HAL_InitTick+0x70>)
 8000b94:	9502      	str	r5, [sp, #8]
 8000b96:	6c5a      	ldr	r2, [r3, #68]	; 0x44

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b98:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM9_CLK_ENABLE();
 8000b9a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000b9e:	645a      	str	r2, [r3, #68]	; 0x44
 8000ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ba2:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM9_CLK_ENABLE();
 8000ba4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ba8:	9302      	str	r3, [sp, #8]
 8000baa:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bac:	f000 feba 	bl	8001924 <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000bb0:	f000 fea0 	bl	80018f4 <HAL_RCC_GetPCLK2Freq>
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 8000bb4:	f240 32e7 	movw	r2, #999	; 0x3e7
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bb8:	490d      	ldr	r1, [pc, #52]	; (8000bf0 <HAL_InitTick+0x74>)
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000bba:	0043      	lsls	r3, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bbc:	fba1 1303 	umull	r1, r3, r1, r3
  htim9.Instance = TIM9;
 8000bc0:	4c0c      	ldr	r4, [pc, #48]	; (8000bf4 <HAL_InitTick+0x78>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bc2:	0c9b      	lsrs	r3, r3, #18
  htim9.Instance = TIM9;
 8000bc4:	490c      	ldr	r1, [pc, #48]	; (8000bf8 <HAL_InitTick+0x7c>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bc6:	3b01      	subs	r3, #1
  htim9.Init.Prescaler = uwPrescalerValue;
  htim9.Init.ClockDivision = 0;
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim9) == HAL_OK)
 8000bc8:	4620      	mov	r0, r4
  htim9.Init.Prescaler = uwPrescalerValue;
 8000bca:	6063      	str	r3, [r4, #4]
  htim9.Init.ClockDivision = 0;
 8000bcc:	6125      	str	r5, [r4, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bce:	60a5      	str	r5, [r4, #8]
  htim9.Instance = TIM9;
 8000bd0:	6021      	str	r1, [r4, #0]
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 8000bd2:	60e2      	str	r2, [r4, #12]
  if(HAL_TIM_Base_Init(&htim9) == HAL_OK)
 8000bd4:	f001 fd96 	bl	8002704 <HAL_TIM_Base_Init>
 8000bd8:	b110      	cbz	r0, 8000be0 <HAL_InitTick+0x64>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim9);
  }

  /* Return function status */
  return HAL_ERROR;
 8000bda:	2001      	movs	r0, #1
}
 8000bdc:	b009      	add	sp, #36	; 0x24
 8000bde:	bd30      	pop	{r4, r5, pc}
    return HAL_TIM_Base_Start_IT(&htim9);
 8000be0:	4620      	mov	r0, r4
 8000be2:	f001 fe23 	bl	800282c <HAL_TIM_Base_Start_IT>
}
 8000be6:	b009      	add	sp, #36	; 0x24
 8000be8:	bd30      	pop	{r4, r5, pc}
 8000bea:	bf00      	nop
 8000bec:	40023800 	.word	0x40023800
 8000bf0:	431bde83 	.word	0x431bde83
 8000bf4:	20008200 	.word	0x20008200
 8000bf8:	40014000 	.word	0x40014000

08000bfc <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop

08000c00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c00:	e7fe      	b.n	8000c00 <HardFault_Handler>
 8000c02:	bf00      	nop

08000c04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c04:	e7fe      	b.n	8000c04 <MemManage_Handler>
 8000c06:	bf00      	nop

08000c08 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c08:	e7fe      	b.n	8000c08 <BusFault_Handler>
 8000c0a:	bf00      	nop

08000c0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c0c:	e7fe      	b.n	8000c0c <UsageFault_Handler>
 8000c0e:	bf00      	nop

08000c10 <DebugMon_Handler>:
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop

08000c14 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000c14:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000c16:	2040      	movs	r0, #64	; 0x40
 8000c18:	f000 fbb8 	bl	800138c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000c1c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000c20:	2080      	movs	r0, #128	; 0x80
 8000c22:	f000 bbb3 	b.w	800138c <HAL_GPIO_EXTI_IRQHandler>
 8000c26:	bf00      	nop

08000c28 <TIM1_BRK_TIM9_IRQHandler>:
void TIM1_BRK_TIM9_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8000c28:	4801      	ldr	r0, [pc, #4]	; (8000c30 <TIM1_BRK_TIM9_IRQHandler+0x8>)
 8000c2a:	f001 be43 	b.w	80028b4 <HAL_TIM_IRQHandler>
 8000c2e:	bf00      	nop
 8000c30:	20008200 	.word	0x20008200

08000c34 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c34:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000c36:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000c3a:	f000 fba7 	bl	800138c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8000c3e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000c42:	f000 fba3 	bl	800138c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000c46:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000c4a:	f000 fb9f 	bl	800138c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8000c52:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000c56:	f000 bb99 	b.w	800138c <HAL_GPIO_EXTI_IRQHandler>
 8000c5a:	bf00      	nop

08000c5c <SDIO_IRQHandler>:
void SDIO_IRQHandler(void)
{
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8000c5c:	4801      	ldr	r0, [pc, #4]	; (8000c64 <SDIO_IRQHandler+0x8>)
 8000c5e:	f001 b963 	b.w	8001f28 <HAL_SD_IRQHandler>
 8000c62:	bf00      	nop
 8000c64:	2000714c 	.word	0x2000714c

08000c68 <DMA2_Stream3_IRQHandler>:
void DMA2_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8000c68:	4801      	ldr	r0, [pc, #4]	; (8000c70 <DMA2_Stream3_IRQHandler+0x8>)
 8000c6a:	f000 b99d 	b.w	8000fa8 <HAL_DMA_IRQHandler>
 8000c6e:	bf00      	nop
 8000c70:	20004004 	.word	0x20004004

08000c74 <DMA2_Stream6_IRQHandler>:
void DMA2_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8000c74:	4801      	ldr	r0, [pc, #4]	; (8000c7c <DMA2_Stream6_IRQHandler+0x8>)
 8000c76:	f000 b997 	b.w	8000fa8 <HAL_DMA_IRQHandler>
 8000c7a:	bf00      	nop
 8000c7c:	200070ec 	.word	0x200070ec

08000c80 <SystemInit>:
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000c80:	2100      	movs	r1, #0
{
 8000c82:	b430      	push	{r4, r5}

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c84:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
  RCC->CR |= (uint32_t)0x00000001;
 8000c88:	4b0b      	ldr	r3, [pc, #44]	; (8000cb8 <SystemInit+0x38>)
  RCC->PLLCFGR = 0x24003010;
 8000c8a:	4d0c      	ldr	r5, [pc, #48]	; (8000cbc <SystemInit+0x3c>)
  RCC->CR |= (uint32_t)0x00000001;
 8000c8c:	681a      	ldr	r2, [r3, #0]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c8e:	480c      	ldr	r0, [pc, #48]	; (8000cc0 <SystemInit+0x40>)
  RCC->CR |= (uint32_t)0x00000001;
 8000c90:	f042 0201 	orr.w	r2, r2, #1
 8000c94:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8000c96:	6099      	str	r1, [r3, #8]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000c9e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000ca2:	601a      	str	r2, [r3, #0]
  RCC->PLLCFGR = 0x24003010;
 8000ca4:	605d      	str	r5, [r3, #4]
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000cac:	601a      	str	r2, [r3, #0]
  RCC->CIR = 0x00000000;
 8000cae:	60d9      	str	r1, [r3, #12]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000cb0:	6084      	str	r4, [r0, #8]
#endif
}
 8000cb2:	bc30      	pop	{r4, r5}
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	40023800 	.word	0x40023800
 8000cbc:	24003010 	.word	0x24003010
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000cc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cfc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8000cc8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000cca:	e003      	b.n	8000cd4 <LoopCopyDataInit>

08000ccc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ccc:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000cce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000cd0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000cd2:	3104      	adds	r1, #4

08000cd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8000cd4:	480b      	ldr	r0, [pc, #44]	; (8000d04 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000cd6:	4b0c      	ldr	r3, [pc, #48]	; (8000d08 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000cd8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000cda:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000cdc:	d3f6      	bcc.n	8000ccc <CopyDataInit>
  ldr  r2, =_sbss
 8000cde:	4a0b      	ldr	r2, [pc, #44]	; (8000d0c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ce0:	e002      	b.n	8000ce8 <LoopFillZerobss>

08000ce2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8000ce2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ce4:	f842 3b04 	str.w	r3, [r2], #4

08000ce8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr  r3, = _ebss
 8000ce8:	4b09      	ldr	r3, [pc, #36]	; (8000d10 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000cea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000cec:	d3f9      	bcc.n	8000ce2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cee:	f7ff ffc7 	bl	8000c80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cf2:	f009 fa49 	bl	800a188 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cf6:	f7ff fcc1 	bl	800067c <main>
  bx  lr
 8000cfa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cfc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000d00:	0800a790 	.word	0x0800a790
  ldr  r0, =_sdata
 8000d04:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000d08:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 8000d0c:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 8000d10:	2000a2fc 	.word	0x2000a2fc

08000d14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d14:	e7fe      	b.n	8000d14 <ADC_IRQHandler>
	...

08000d18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d18:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d1a:	4b0b      	ldr	r3, [pc, #44]	; (8000d48 <HAL_Init+0x30>)
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d1c:	2003      	movs	r0, #3
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000d24:	601a      	str	r2, [r3, #0]
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000d2c:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000d34:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d36:	f000 f831 	bl	8000d9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d3a:	2000      	movs	r0, #0
 8000d3c:	f7ff ff1e 	bl	8000b7c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000d40:	f7ff fe06 	bl	8000950 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 8000d44:	2000      	movs	r0, #0
 8000d46:	bd08      	pop	{r3, pc}
 8000d48:	40023c00 	.word	0x40023c00

08000d4c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000d4c:	4a03      	ldr	r2, [pc, #12]	; (8000d5c <HAL_IncTick+0x10>)
 8000d4e:	4b04      	ldr	r3, [pc, #16]	; (8000d60 <HAL_IncTick+0x14>)
 8000d50:	6811      	ldr	r1, [r2, #0]
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	440b      	add	r3, r1
 8000d56:	6013      	str	r3, [r2, #0]
}
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	20008248 	.word	0x20008248
 8000d60:	20000004 	.word	0x20000004

08000d64 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000d64:	4b01      	ldr	r3, [pc, #4]	; (8000d6c <HAL_GetTick+0x8>)
 8000d66:	6818      	ldr	r0, [r3, #0]
}
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	20008248 	.word	0x20008248

08000d70 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000d70:	b530      	push	{r4, r5, lr}
 8000d72:	b083      	sub	sp, #12
 8000d74:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d76:	f7ff fff5 	bl	8000d64 <HAL_GetTick>
  uint32_t wait = Delay;
 8000d7a:	9c01      	ldr	r4, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d7c:	4605      	mov	r5, r0

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d7e:	1c63      	adds	r3, r4, #1
 8000d80:	d002      	beq.n	8000d88 <HAL_Delay+0x18>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d82:	4b05      	ldr	r3, [pc, #20]	; (8000d98 <HAL_Delay+0x28>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d88:	f7ff ffec 	bl	8000d64 <HAL_GetTick>
 8000d8c:	1b40      	subs	r0, r0, r5
 8000d8e:	42a0      	cmp	r0, r4
 8000d90:	d3fa      	bcc.n	8000d88 <HAL_Delay+0x18>
  {
  }
}
 8000d92:	b003      	add	sp, #12
 8000d94:	bd30      	pop	{r4, r5, pc}
 8000d96:	bf00      	nop
 8000d98:	20000004 	.word	0x20000004

08000d9c <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d9c:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000da0:	4a06      	ldr	r2, [pc, #24]	; (8000dbc <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000da2:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000da4:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000da6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000daa:	400b      	ands	r3, r1
 8000dac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000db0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000db4:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000db6:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dc0:	4b18      	ldr	r3, [pc, #96]	; (8000e24 <HAL_NVIC_SetPriority+0x64>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dc2:	b430      	push	{r4, r5}
 8000dc4:	68db      	ldr	r3, [r3, #12]
 8000dc6:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dca:	f1c3 0507 	rsb	r5, r3, #7
 8000dce:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dd0:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dd4:	bf28      	it	cs
 8000dd6:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dd8:	2c06      	cmp	r4, #6
 8000dda:	d919      	bls.n	8000e10 <HAL_NVIC_SetPriority+0x50>
 8000ddc:	f04f 34ff 	mov.w	r4, #4294967295
 8000de0:	3b03      	subs	r3, #3
 8000de2:	409c      	lsls	r4, r3
 8000de4:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dec:	40aa      	lsls	r2, r5
 8000dee:	ea21 0102 	bic.w	r1, r1, r2
 8000df2:	fa01 f203 	lsl.w	r2, r1, r3
 8000df6:	4322      	orrs	r2, r4
 8000df8:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) >= 0)
 8000dfa:	2800      	cmp	r0, #0
 8000dfc:	b2d2      	uxtb	r2, r2
 8000dfe:	db0a      	blt.n	8000e16 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e00:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000e04:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000e08:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000e0c:	bc30      	pop	{r4, r5}
 8000e0e:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e10:	2400      	movs	r4, #0
 8000e12:	4623      	mov	r3, r4
 8000e14:	e7e8      	b.n	8000de8 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e16:	4b04      	ldr	r3, [pc, #16]	; (8000e28 <HAL_NVIC_SetPriority+0x68>)
 8000e18:	f000 000f 	and.w	r0, r0, #15
 8000e1c:	4403      	add	r3, r0
 8000e1e:	761a      	strb	r2, [r3, #24]
 8000e20:	bc30      	pop	{r4, r5}
 8000e22:	4770      	bx	lr
 8000e24:	e000ed00 	.word	0xe000ed00
 8000e28:	e000ecfc 	.word	0xe000ecfc

08000e2c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000e2c:	2800      	cmp	r0, #0
 8000e2e:	db07      	blt.n	8000e40 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e30:	2301      	movs	r3, #1
 8000e32:	f000 011f 	and.w	r1, r0, #31
 8000e36:	4a03      	ldr	r2, [pc, #12]	; (8000e44 <HAL_NVIC_EnableIRQ+0x18>)
 8000e38:	408b      	lsls	r3, r1
 8000e3a:	0940      	lsrs	r0, r0, #5
 8000e3c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	e000e100 	.word	0xe000e100

08000e48 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e4a:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8000e4c:	f7ff ff8a 	bl	8000d64 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000e50:	2c00      	cmp	r4, #0
 8000e52:	d056      	beq.n	8000f02 <HAL_DMA_Init+0xba>
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e54:	2202      	movs	r2, #2
  __HAL_UNLOCK(hdma);
 8000e56:	2100      	movs	r1, #0
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000e58:	6823      	ldr	r3, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e5a:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	4605      	mov	r5, r0
 8000e62:	f022 0201 	bic.w	r2, r2, #1
  __HAL_UNLOCK(hdma);
 8000e66:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8000e6a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e6c:	e005      	b.n	8000e7a <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e6e:	f7ff ff79 	bl	8000d64 <HAL_GetTick>
 8000e72:	1b40      	subs	r0, r0, r5
 8000e74:	2805      	cmp	r0, #5
 8000e76:	d83d      	bhi.n	8000ef4 <HAL_DMA_Init+0xac>
 8000e78:	6823      	ldr	r3, [r4, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	07d1      	lsls	r1, r2, #31
 8000e7e:	d4f6      	bmi.n	8000e6e <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000e80:	68e1      	ldr	r1, [r4, #12]
 8000e82:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8000e86:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e88:	6920      	ldr	r0, [r4, #16]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000e8a:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e8c:	6961      	ldr	r1, [r4, #20]
 8000e8e:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e90:	69a5      	ldr	r5, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e92:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e94:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e96:	6a21      	ldr	r1, [r4, #32]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e98:	432a      	orrs	r2, r5
 8000e9a:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e9c:	430a      	orrs	r2, r1
  tmp = hdma->Instance->CR;
 8000e9e:	681e      	ldr	r6, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000ea0:	4834      	ldr	r0, [pc, #208]	; (8000f74 <HAL_DMA_Init+0x12c>)

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000ea2:	6a61      	ldr	r1, [r4, #36]	; 0x24
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000ea4:	4030      	ands	r0, r6
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000ea6:	2904      	cmp	r1, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ea8:	ea42 0200 	orr.w	r2, r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000eac:	d02b      	beq.n	8000f06 <HAL_DMA_Init+0xbe>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000eae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000eb0:	6958      	ldr	r0, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000eb2:	f020 0007 	bic.w	r0, r0, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000eb6:	4308      	orrs	r0, r1
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000eb8:	b2da      	uxtb	r2, r3
 8000eba:	492f      	ldr	r1, [pc, #188]	; (8000f78 <HAL_DMA_Init+0x130>)
 8000ebc:	3a10      	subs	r2, #16
 8000ebe:	fba1 1202 	umull	r1, r2, r1, r2
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000ec2:	492e      	ldr	r1, [pc, #184]	; (8000f7c <HAL_DMA_Init+0x134>)
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000ec4:	0912      	lsrs	r2, r2, #4
  hdma->Instance->FCR = tmp;
 8000ec6:	6158      	str	r0, [r3, #20]
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000ec8:	5c8d      	ldrb	r5, [r1, r2]
 8000eca:	f423 717f 	bic.w	r1, r3, #1020	; 0x3fc
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ece:	233f      	movs	r3, #63	; 0x3f
  
  if (stream_number > 3U)
 8000ed0:	2a03      	cmp	r2, #3
  hdma->State = HAL_DMA_STATE_READY;
 8000ed2:	f04f 0601 	mov.w	r6, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ed6:	f04f 0200 	mov.w	r2, #0
 8000eda:	f021 0103 	bic.w	r1, r1, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000ede:	bf88      	it	hi
 8000ee0:	3104      	addhi	r1, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ee2:	40ab      	lsls	r3, r5
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000ee4:	65e5      	str	r5, [r4, #92]	; 0x5c
 8000ee6:	65a1      	str	r1, [r4, #88]	; 0x58
  return HAL_OK;
 8000ee8:	4610      	mov	r0, r2
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000eea:	608b      	str	r3, [r1, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000eec:	6562      	str	r2, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8000eee:	f884 6035 	strb.w	r6, [r4, #53]	; 0x35
}
 8000ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000ef4:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000ef6:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 8000ef8:	4618      	mov	r0, r3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000efa:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000efc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8000f00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8000f02:	2001      	movs	r0, #1
}
 8000f04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000f06:	e9d4 610b 	ldrd	r6, r1, [r4, #44]	; 0x2c
 8000f0a:	4331      	orrs	r1, r6
 8000f0c:	430a      	orrs	r2, r1
    tmp |= hdma->Init.FIFOThreshold;
 8000f0e:	6aa7      	ldr	r7, [r4, #40]	; 0x28
  hdma->Instance->CR = tmp;  
 8000f10:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8000f12:	6958      	ldr	r0, [r3, #20]
    tmp |= hdma->Init.FIFOThreshold;
 8000f14:	f047 0104 	orr.w	r1, r7, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000f18:	f020 0007 	bic.w	r0, r0, #7
    tmp |= hdma->Init.FIFOThreshold;
 8000f1c:	4308      	orrs	r0, r1
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000f1e:	2e00      	cmp	r6, #0
 8000f20:	d0ca      	beq.n	8000eb8 <HAL_DMA_Init+0x70>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000f22:	b17d      	cbz	r5, 8000f44 <HAL_DMA_Init+0xfc>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000f24:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
 8000f28:	d016      	beq.n	8000f58 <HAL_DMA_Init+0x110>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000f2a:	2f02      	cmp	r7, #2
 8000f2c:	d903      	bls.n	8000f36 <HAL_DMA_Init+0xee>
 8000f2e:	2f03      	cmp	r7, #3
 8000f30:	d1c2      	bne.n	8000eb8 <HAL_DMA_Init+0x70>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000f32:	01f2      	lsls	r2, r6, #7
 8000f34:	d5c0      	bpl.n	8000eb8 <HAL_DMA_Init+0x70>
        hdma->State = HAL_DMA_STATE_READY;
 8000f36:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000f38:	2240      	movs	r2, #64	; 0x40
        return HAL_ERROR; 
 8000f3a:	4618      	mov	r0, r3
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000f3c:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8000f3e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8000f42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (tmp)
 8000f44:	2f01      	cmp	r7, #1
 8000f46:	d003      	beq.n	8000f50 <HAL_DMA_Init+0x108>
 8000f48:	d3f3      	bcc.n	8000f32 <HAL_DMA_Init+0xea>
 8000f4a:	2f02      	cmp	r7, #2
 8000f4c:	d1b4      	bne.n	8000eb8 <HAL_DMA_Init+0x70>
 8000f4e:	e7f0      	b.n	8000f32 <HAL_DMA_Init+0xea>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000f50:	f1b6 7fc0 	cmp.w	r6, #25165824	; 0x1800000
 8000f54:	d1b0      	bne.n	8000eb8 <HAL_DMA_Init+0x70>
 8000f56:	e7ee      	b.n	8000f36 <HAL_DMA_Init+0xee>
    switch (tmp)
 8000f58:	2f03      	cmp	r7, #3
 8000f5a:	d8ad      	bhi.n	8000eb8 <HAL_DMA_Init+0x70>
 8000f5c:	a201      	add	r2, pc, #4	; (adr r2, 8000f64 <HAL_DMA_Init+0x11c>)
 8000f5e:	f852 f027 	ldr.w	pc, [r2, r7, lsl #2]
 8000f62:	bf00      	nop
 8000f64:	08000f37 	.word	0x08000f37
 8000f68:	08000f33 	.word	0x08000f33
 8000f6c:	08000f37 	.word	0x08000f37
 8000f70:	08000f51 	.word	0x08000f51
 8000f74:	f010803f 	.word	0xf010803f
 8000f78:	aaaaaaab 	.word	0xaaaaaaab
 8000f7c:	0800a2d4 	.word	0x0800a2d4

08000f80 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f80:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
{
 8000f84:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f86:	2a02      	cmp	r2, #2
 8000f88:	d003      	beq.n	8000f92 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f8a:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 8000f8c:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f8e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000f90:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 8000f92:	2105      	movs	r1, #5
    __HAL_DMA_DISABLE(hdma);
 8000f94:	681a      	ldr	r2, [r3, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8000f96:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8000f9a:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 8000f9c:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8000f9e:	f023 0301 	bic.w	r3, r3, #1
 8000fa2:	6013      	str	r3, [r2, #0]
}
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0U;
 8000fa8:	2300      	movs	r3, #0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000faa:	2208      	movs	r2, #8
{
 8000fac:	b5f0      	push	{r4, r5, r6, r7, lr}
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000fae:	6d87      	ldr	r7, [r0, #88]	; 0x58
{
 8000fb0:	b083      	sub	sp, #12
  __IO uint32_t count = 0U;
 8000fb2:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000fb4:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8000fb6:	683d      	ldr	r5, [r7, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000fb8:	4964      	ldr	r1, [pc, #400]	; (800114c <HAL_DMA_IRQHandler+0x1a4>)
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000fba:	409a      	lsls	r2, r3
 8000fbc:	422a      	tst	r2, r5
{
 8000fbe:	4604      	mov	r4, r0
  uint32_t timeout = SystemCoreClock / 9600U;
 8000fc0:	680e      	ldr	r6, [r1, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000fc2:	d003      	beq.n	8000fcc <HAL_DMA_IRQHandler+0x24>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000fc4:	6801      	ldr	r1, [r0, #0]
 8000fc6:	6808      	ldr	r0, [r1, #0]
 8000fc8:	0740      	lsls	r0, r0, #29
 8000fca:	d459      	bmi.n	8001080 <HAL_DMA_IRQHandler+0xd8>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000fcc:	2201      	movs	r2, #1
 8000fce:	409a      	lsls	r2, r3
 8000fd0:	422a      	tst	r2, r5
 8000fd2:	d003      	beq.n	8000fdc <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000fd4:	6821      	ldr	r1, [r4, #0]
 8000fd6:	6949      	ldr	r1, [r1, #20]
 8000fd8:	0608      	lsls	r0, r1, #24
 8000fda:	d474      	bmi.n	80010c6 <HAL_DMA_IRQHandler+0x11e>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000fdc:	2204      	movs	r2, #4
 8000fde:	409a      	lsls	r2, r3
 8000fe0:	422a      	tst	r2, r5
 8000fe2:	d003      	beq.n	8000fec <HAL_DMA_IRQHandler+0x44>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000fe4:	6821      	ldr	r1, [r4, #0]
 8000fe6:	6809      	ldr	r1, [r1, #0]
 8000fe8:	0789      	lsls	r1, r1, #30
 8000fea:	d466      	bmi.n	80010ba <HAL_DMA_IRQHandler+0x112>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000fec:	2210      	movs	r2, #16
 8000fee:	409a      	lsls	r2, r3
 8000ff0:	422a      	tst	r2, r5
 8000ff2:	d003      	beq.n	8000ffc <HAL_DMA_IRQHandler+0x54>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000ff4:	6821      	ldr	r1, [r4, #0]
 8000ff6:	6808      	ldr	r0, [r1, #0]
 8000ff8:	0700      	lsls	r0, r0, #28
 8000ffa:	d44b      	bmi.n	8001094 <HAL_DMA_IRQHandler+0xec>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000ffc:	2220      	movs	r2, #32
 8000ffe:	409a      	lsls	r2, r3
 8001000:	422a      	tst	r2, r5
 8001002:	d014      	beq.n	800102e <HAL_DMA_IRQHandler+0x86>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001004:	6821      	ldr	r1, [r4, #0]
 8001006:	6808      	ldr	r0, [r1, #0]
 8001008:	06c0      	lsls	r0, r0, #27
 800100a:	d510      	bpl.n	800102e <HAL_DMA_IRQHandler+0x86>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800100c:	60ba      	str	r2, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800100e:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8001012:	2a05      	cmp	r2, #5
 8001014:	d063      	beq.n	80010de <HAL_DMA_IRQHandler+0x136>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001016:	680b      	ldr	r3, [r1, #0]
 8001018:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800101c:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800101e:	d07e      	beq.n	800111e <HAL_DMA_IRQHandler+0x176>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001020:	0319      	lsls	r1, r3, #12
 8001022:	f140 8089 	bpl.w	8001138 <HAL_DMA_IRQHandler+0x190>
        if(hdma->XferCpltCallback != NULL)
 8001026:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001028:	b10b      	cbz	r3, 800102e <HAL_DMA_IRQHandler+0x86>
          hdma->XferCpltCallback(hdma);
 800102a:	4620      	mov	r0, r4
 800102c:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800102e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001030:	b323      	cbz	r3, 800107c <HAL_DMA_IRQHandler+0xd4>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001032:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001034:	07da      	lsls	r2, r3, #31
 8001036:	d51a      	bpl.n	800106e <HAL_DMA_IRQHandler+0xc6>
      hdma->State = HAL_DMA_STATE_ABORT;
 8001038:	2105      	movs	r1, #5
  uint32_t timeout = SystemCoreClock / 9600U;
 800103a:	4b45      	ldr	r3, [pc, #276]	; (8001150 <HAL_DMA_IRQHandler+0x1a8>)
      __HAL_DMA_DISABLE(hdma);
 800103c:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 800103e:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
  uint32_t timeout = SystemCoreClock / 9600U;
 8001042:	fba3 3606 	umull	r3, r6, r3, r6
      __HAL_DMA_DISABLE(hdma);
 8001046:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001048:	0ab6      	lsrs	r6, r6, #10
      __HAL_DMA_DISABLE(hdma);
 800104a:	f023 0301 	bic.w	r3, r3, #1
 800104e:	6013      	str	r3, [r2, #0]
 8001050:	e002      	b.n	8001058 <HAL_DMA_IRQHandler+0xb0>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001052:	6813      	ldr	r3, [r2, #0]
 8001054:	07db      	lsls	r3, r3, #31
 8001056:	d504      	bpl.n	8001062 <HAL_DMA_IRQHandler+0xba>
        if (++count > timeout)
 8001058:	9b01      	ldr	r3, [sp, #4]
 800105a:	3301      	adds	r3, #1
 800105c:	42b3      	cmp	r3, r6
 800105e:	9301      	str	r3, [sp, #4]
 8001060:	d9f7      	bls.n	8001052 <HAL_DMA_IRQHandler+0xaa>
      __HAL_UNLOCK(hdma);
 8001062:	2200      	movs	r2, #0
      hdma->State = HAL_DMA_STATE_READY;
 8001064:	2301      	movs	r3, #1
      __HAL_UNLOCK(hdma);
 8001066:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800106a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 800106e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001070:	b123      	cbz	r3, 800107c <HAL_DMA_IRQHandler+0xd4>
      hdma->XferErrorCallback(hdma);
 8001072:	4620      	mov	r0, r4
}
 8001074:	b003      	add	sp, #12
 8001076:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 800107a:	4718      	bx	r3
}
 800107c:	b003      	add	sp, #12
 800107e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001080:	6808      	ldr	r0, [r1, #0]
 8001082:	f020 0004 	bic.w	r0, r0, #4
 8001086:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001088:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800108a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800108c:	f042 0201 	orr.w	r2, r2, #1
 8001090:	6562      	str	r2, [r4, #84]	; 0x54
 8001092:	e79b      	b.n	8000fcc <HAL_DMA_IRQHandler+0x24>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001094:	60ba      	str	r2, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001096:	680a      	ldr	r2, [r1, #0]
 8001098:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800109c:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800109e:	d118      	bne.n	80010d2 <HAL_DMA_IRQHandler+0x12a>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80010a0:	05d2      	lsls	r2, r2, #23
 80010a2:	d403      	bmi.n	80010ac <HAL_DMA_IRQHandler+0x104>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80010a4:	680a      	ldr	r2, [r1, #0]
 80010a6:	f022 0208 	bic.w	r2, r2, #8
 80010aa:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 80010ac:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80010ae:	2a00      	cmp	r2, #0
 80010b0:	d0a4      	beq.n	8000ffc <HAL_DMA_IRQHandler+0x54>
          hdma->XferHalfCpltCallback(hdma);
 80010b2:	4620      	mov	r0, r4
 80010b4:	4790      	blx	r2
 80010b6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80010b8:	e7a0      	b.n	8000ffc <HAL_DMA_IRQHandler+0x54>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80010ba:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80010bc:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80010be:	f042 0204 	orr.w	r2, r2, #4
 80010c2:	6562      	str	r2, [r4, #84]	; 0x54
 80010c4:	e792      	b.n	8000fec <HAL_DMA_IRQHandler+0x44>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80010c6:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80010c8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80010ca:	f042 0202 	orr.w	r2, r2, #2
 80010ce:	6562      	str	r2, [r4, #84]	; 0x54
 80010d0:	e784      	b.n	8000fdc <HAL_DMA_IRQHandler+0x34>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80010d2:	0311      	lsls	r1, r2, #12
 80010d4:	d5ea      	bpl.n	80010ac <HAL_DMA_IRQHandler+0x104>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80010d6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80010d8:	2a00      	cmp	r2, #0
 80010da:	d1ea      	bne.n	80010b2 <HAL_DMA_IRQHandler+0x10a>
 80010dc:	e78e      	b.n	8000ffc <HAL_DMA_IRQHandler+0x54>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80010de:	680a      	ldr	r2, [r1, #0]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80010e0:	6c20      	ldr	r0, [r4, #64]	; 0x40
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80010e2:	f022 0216 	bic.w	r2, r2, #22
 80010e6:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80010e8:	694a      	ldr	r2, [r1, #20]
 80010ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010ee:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80010f0:	b338      	cbz	r0, 8001142 <HAL_DMA_IRQHandler+0x19a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80010f2:	680a      	ldr	r2, [r1, #0]
 80010f4:	f022 0208 	bic.w	r2, r2, #8
 80010f8:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010fa:	223f      	movs	r2, #63	; 0x3f
        __HAL_UNLOCK(hdma);
 80010fc:	2000      	movs	r0, #0
        hdma->State = HAL_DMA_STATE_READY;
 80010fe:	2101      	movs	r1, #1
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
        if(hdma->XferAbortCallback != NULL)
 8001104:	6d22      	ldr	r2, [r4, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001106:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 8001108:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 800110c:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8001110:	2a00      	cmp	r2, #0
 8001112:	d0b3      	beq.n	800107c <HAL_DMA_IRQHandler+0xd4>
          hdma->XferAbortCallback(hdma);
 8001114:	4620      	mov	r0, r4
}
 8001116:	b003      	add	sp, #12
 8001118:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
          hdma->XferAbortCallback(hdma);
 800111c:	4710      	bx	r2
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800111e:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8001122:	d180      	bne.n	8001026 <HAL_DMA_IRQHandler+0x7e>
          hdma->State = HAL_DMA_STATE_READY;
 8001124:	2001      	movs	r0, #1
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001126:	680a      	ldr	r2, [r1, #0]
 8001128:	f022 0210 	bic.w	r2, r2, #16
 800112c:	600a      	str	r2, [r1, #0]
          __HAL_UNLOCK(hdma);
 800112e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8001132:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
 8001136:	e776      	b.n	8001026 <HAL_DMA_IRQHandler+0x7e>
          if(hdma->XferM1CpltCallback != NULL)
 8001138:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800113a:	2b00      	cmp	r3, #0
 800113c:	f47f af75 	bne.w	800102a <HAL_DMA_IRQHandler+0x82>
 8001140:	e775      	b.n	800102e <HAL_DMA_IRQHandler+0x86>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001142:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001144:	2a00      	cmp	r2, #0
 8001146:	d1d4      	bne.n	80010f2 <HAL_DMA_IRQHandler+0x14a>
 8001148:	e7d7      	b.n	80010fa <HAL_DMA_IRQHandler+0x152>
 800114a:	bf00      	nop
 800114c:	20000000 	.word	0x20000000
 8001150:	1b4e81b5 	.word	0x1b4e81b5

08001154 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001158:	f8d1 e000 	ldr.w	lr, [r1]
{
 800115c:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800115e:	f1be 0f00 	cmp.w	lr, #0
 8001162:	f000 8091 	beq.w	8001288 <HAL_GPIO_Init+0x134>
 8001166:	4688      	mov	r8, r1
  uint32_t position = 0x00u;
 8001168:	2600      	movs	r6, #0
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800116a:	f8df 91f4 	ldr.w	r9, [pc, #500]	; 8001360 <HAL_GPIO_Init+0x20c>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800116e:	2301      	movs	r3, #1
 8001170:	40b3      	lsls	r3, r6
    if (iocurrent != 0x00u)
 8001172:	ea13 070e 	ands.w	r7, r3, lr
 8001176:	f000 8082 	beq.w	800127e <HAL_GPIO_Init+0x12a>
 800117a:	2203      	movs	r2, #3
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800117c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8001180:	ea4f 0c46 	mov.w	ip, r6, lsl #1
 8001184:	f021 0a10 	bic.w	sl, r1, #16
 8001188:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800118c:	f10a 35ff 	add.w	r5, sl, #4294967295
 8001190:	fa02 f20c 	lsl.w	r2, r2, ip
 8001194:	2d01      	cmp	r5, #1
 8001196:	ea6f 0202 	mvn.w	r2, r2
 800119a:	fa04 f40c 	lsl.w	r4, r4, ip
 800119e:	d976      	bls.n	800128e <HAL_GPIO_Init+0x13a>
      temp = GPIOx->PUPDR;
 80011a0:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80011a2:	4013      	ands	r3, r2
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80011a4:	431c      	orrs	r4, r3
      GPIOx->PUPDR = temp;
 80011a6:	60c4      	str	r4, [r0, #12]
      temp = GPIOx->MODER;
 80011a8:	6804      	ldr	r4, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011aa:	f001 0303 	and.w	r3, r1, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80011ae:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011b0:	fa03 f20c 	lsl.w	r2, r3, ip
 80011b4:	4322      	orrs	r2, r4
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011b6:	00cd      	lsls	r5, r1, #3
      GPIOx->MODER = temp;
 80011b8:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011ba:	d560      	bpl.n	800127e <HAL_GPIO_Init+0x12a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011bc:	2300      	movs	r3, #0
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011be:	240f      	movs	r4, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c0:	4d5e      	ldr	r5, [pc, #376]	; (800133c <HAL_GPIO_Init+0x1e8>)
 80011c2:	9301      	str	r3, [sp, #4]
 80011c4:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 80011c6:	f026 0303 	bic.w	r3, r6, #3
 80011ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80011ce:	646a      	str	r2, [r5, #68]	; 0x44
 80011d0:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 80011d2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80011d6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80011da:	9201      	str	r2, [sp, #4]
 80011dc:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011e0:	f006 0203 	and.w	r2, r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e4:	9d01      	ldr	r5, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011e6:	0092      	lsls	r2, r2, #2
        temp = SYSCFG->EXTICR[position >> 2u];
 80011e8:	689d      	ldr	r5, [r3, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011ea:	4094      	lsls	r4, r2
 80011ec:	ea25 0404 	bic.w	r4, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011f0:	4d53      	ldr	r5, [pc, #332]	; (8001340 <HAL_GPIO_Init+0x1ec>)
 80011f2:	42a8      	cmp	r0, r5
 80011f4:	d021      	beq.n	800123a <HAL_GPIO_Init+0xe6>
 80011f6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80011fa:	42a8      	cmp	r0, r5
 80011fc:	d07f      	beq.n	80012fe <HAL_GPIO_Init+0x1aa>
 80011fe:	4d51      	ldr	r5, [pc, #324]	; (8001344 <HAL_GPIO_Init+0x1f0>)
 8001200:	42a8      	cmp	r0, r5
 8001202:	d077      	beq.n	80012f4 <HAL_GPIO_Init+0x1a0>
 8001204:	4d50      	ldr	r5, [pc, #320]	; (8001348 <HAL_GPIO_Init+0x1f4>)
 8001206:	42a8      	cmp	r0, r5
 8001208:	f000 8083 	beq.w	8001312 <HAL_GPIO_Init+0x1be>
 800120c:	4d4f      	ldr	r5, [pc, #316]	; (800134c <HAL_GPIO_Init+0x1f8>)
 800120e:	42a8      	cmp	r0, r5
 8001210:	f000 8084 	beq.w	800131c <HAL_GPIO_Init+0x1c8>
 8001214:	4d4e      	ldr	r5, [pc, #312]	; (8001350 <HAL_GPIO_Init+0x1fc>)
 8001216:	42a8      	cmp	r0, r5
 8001218:	d076      	beq.n	8001308 <HAL_GPIO_Init+0x1b4>
 800121a:	4d4e      	ldr	r5, [pc, #312]	; (8001354 <HAL_GPIO_Init+0x200>)
 800121c:	42a8      	cmp	r0, r5
 800121e:	f000 8082 	beq.w	8001326 <HAL_GPIO_Init+0x1d2>
 8001222:	4d4d      	ldr	r5, [pc, #308]	; (8001358 <HAL_GPIO_Init+0x204>)
 8001224:	42a8      	cmp	r0, r5
 8001226:	f000 8083 	beq.w	8001330 <HAL_GPIO_Init+0x1dc>
 800122a:	4d4c      	ldr	r5, [pc, #304]	; (800135c <HAL_GPIO_Init+0x208>)
 800122c:	42a8      	cmp	r0, r5
 800122e:	bf0c      	ite	eq
 8001230:	2508      	moveq	r5, #8
 8001232:	2509      	movne	r5, #9
 8001234:	fa05 f202 	lsl.w	r2, r5, r2
 8001238:	4314      	orrs	r4, r2
        temp &= ~(iocurrent);
 800123a:	43fa      	mvns	r2, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 800123c:	609c      	str	r4, [r3, #8]
        temp = EXTI->IMR;
 800123e:	f8d9 3000 	ldr.w	r3, [r9]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001242:	03cc      	lsls	r4, r1, #15
        temp &= ~(iocurrent);
 8001244:	bf54      	ite	pl
 8001246:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8001248:	433b      	orrmi	r3, r7
        }
        EXTI->IMR = temp;
 800124a:	f8c9 3000 	str.w	r3, [r9]

        temp = EXTI->EMR;
 800124e:	f8d9 3004 	ldr.w	r3, [r9, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001252:	038d      	lsls	r5, r1, #14
        temp &= ~(iocurrent);
 8001254:	bf54      	ite	pl
 8001256:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8001258:	433b      	orrmi	r3, r7
        }
        EXTI->EMR = temp;
 800125a:	f8c9 3004 	str.w	r3, [r9, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800125e:	f8d9 3008 	ldr.w	r3, [r9, #8]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001262:	02cc      	lsls	r4, r1, #11
        temp &= ~(iocurrent);
 8001264:	bf54      	ite	pl
 8001266:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8001268:	433b      	orrmi	r3, r7
        }
        EXTI->RTSR = temp;
 800126a:	f8c9 3008 	str.w	r3, [r9, #8]

        temp = EXTI->FTSR;
 800126e:	f8d9 300c 	ldr.w	r3, [r9, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001272:	0289      	lsls	r1, r1, #10
        temp &= ~(iocurrent);
 8001274:	bf54      	ite	pl
 8001276:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8001278:	433b      	orrmi	r3, r7
        }
        EXTI->FTSR = temp;
 800127a:	f8c9 300c 	str.w	r3, [r9, #12]
      }
    }

    position++;
 800127e:	3601      	adds	r6, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001280:	fa3e f306 	lsrs.w	r3, lr, r6
 8001284:	f47f af73 	bne.w	800116e <HAL_GPIO_Init+0x1a>
  }
}
 8001288:	b003      	add	sp, #12
 800128a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 800128e:	6885      	ldr	r5, [r0, #8]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001290:	f1ba 0f02 	cmp.w	sl, #2
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001294:	ea05 0b02 	and.w	fp, r5, r2
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001298:	f8d8 500c 	ldr.w	r5, [r8, #12]
 800129c:	fa05 f50c 	lsl.w	r5, r5, ip
 80012a0:	ea45 050b 	orr.w	r5, r5, fp
        GPIOx->OSPEEDR = temp;
 80012a4:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 80012a6:	6845      	ldr	r5, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80012a8:	f3c1 1b00 	ubfx	fp, r1, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012ac:	ea25 0503 	bic.w	r5, r5, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80012b0:	465b      	mov	r3, fp
 80012b2:	fa03 f306 	lsl.w	r3, r3, r6
 80012b6:	ea43 0305 	orr.w	r3, r3, r5
        GPIOx->OTYPER = temp;
 80012ba:	6043      	str	r3, [r0, #4]
      temp = GPIOx->PUPDR;
 80012bc:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80012be:	ea03 0302 	and.w	r3, r3, r2
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80012c2:	ea44 0403 	orr.w	r4, r4, r3
      GPIOx->PUPDR = temp;
 80012c6:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012c8:	f47f af6e 	bne.w	80011a8 <HAL_GPIO_Init+0x54>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012cc:	f04f 0b0f 	mov.w	fp, #15
        temp = GPIOx->AFR[position >> 3u];
 80012d0:	08f5      	lsrs	r5, r6, #3
 80012d2:	eb00 0585 	add.w	r5, r0, r5, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012d6:	f006 0407 	and.w	r4, r6, #7
        temp = GPIOx->AFR[position >> 3u];
 80012da:	6a2b      	ldr	r3, [r5, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012dc:	00a4      	lsls	r4, r4, #2
 80012de:	fa0b fb04 	lsl.w	fp, fp, r4
 80012e2:	ea23 0a0b 	bic.w	sl, r3, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012e6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80012ea:	40a3      	lsls	r3, r4
 80012ec:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->AFR[position >> 3u] = temp;
 80012f0:	622b      	str	r3, [r5, #32]
 80012f2:	e759      	b.n	80011a8 <HAL_GPIO_Init+0x54>
 80012f4:	2502      	movs	r5, #2
 80012f6:	fa05 f202 	lsl.w	r2, r5, r2
 80012fa:	4314      	orrs	r4, r2
 80012fc:	e79d      	b.n	800123a <HAL_GPIO_Init+0xe6>
 80012fe:	2501      	movs	r5, #1
 8001300:	fa05 f202 	lsl.w	r2, r5, r2
 8001304:	4314      	orrs	r4, r2
 8001306:	e798      	b.n	800123a <HAL_GPIO_Init+0xe6>
 8001308:	2505      	movs	r5, #5
 800130a:	fa05 f202 	lsl.w	r2, r5, r2
 800130e:	4314      	orrs	r4, r2
 8001310:	e793      	b.n	800123a <HAL_GPIO_Init+0xe6>
 8001312:	2503      	movs	r5, #3
 8001314:	fa05 f202 	lsl.w	r2, r5, r2
 8001318:	4314      	orrs	r4, r2
 800131a:	e78e      	b.n	800123a <HAL_GPIO_Init+0xe6>
 800131c:	2504      	movs	r5, #4
 800131e:	fa05 f202 	lsl.w	r2, r5, r2
 8001322:	4314      	orrs	r4, r2
 8001324:	e789      	b.n	800123a <HAL_GPIO_Init+0xe6>
 8001326:	2506      	movs	r5, #6
 8001328:	fa05 f202 	lsl.w	r2, r5, r2
 800132c:	4314      	orrs	r4, r2
 800132e:	e784      	b.n	800123a <HAL_GPIO_Init+0xe6>
 8001330:	2507      	movs	r5, #7
 8001332:	fa05 f202 	lsl.w	r2, r5, r2
 8001336:	4314      	orrs	r4, r2
 8001338:	e77f      	b.n	800123a <HAL_GPIO_Init+0xe6>
 800133a:	bf00      	nop
 800133c:	40023800 	.word	0x40023800
 8001340:	40020000 	.word	0x40020000
 8001344:	40020800 	.word	0x40020800
 8001348:	40020c00 	.word	0x40020c00
 800134c:	40021000 	.word	0x40021000
 8001350:	40021400 	.word	0x40021400
 8001354:	40021800 	.word	0x40021800
 8001358:	40021c00 	.word	0x40021c00
 800135c:	40022000 	.word	0x40022000
 8001360:	40013c00 	.word	0x40013c00

08001364 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001364:	6903      	ldr	r3, [r0, #16]
 8001366:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001368:	bf14      	ite	ne
 800136a:	2001      	movne	r0, #1
 800136c:	2000      	moveq	r0, #0
 800136e:	4770      	bx	lr

08001370 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001370:	b902      	cbnz	r2, 8001374 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001372:	0409      	lsls	r1, r1, #16
 8001374:	6181      	str	r1, [r0, #24]
  }
}
 8001376:	4770      	bx	lr

08001378 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001378:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800137a:	ea01 0203 	and.w	r2, r1, r3
 800137e:	ea21 0103 	bic.w	r1, r1, r3
 8001382:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001386:	6181      	str	r1, [r0, #24]
}
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop

0800138c <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800138c:	4a04      	ldr	r2, [pc, #16]	; (80013a0 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800138e:	6951      	ldr	r1, [r2, #20]
 8001390:	4201      	tst	r1, r0
 8001392:	d100      	bne.n	8001396 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8001394:	4770      	bx	lr
{
 8001396:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001398:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800139a:	f7ff f93f 	bl	800061c <HAL_GPIO_EXTI_Callback>
  }
}
 800139e:	bd08      	pop	{r3, pc}
 80013a0:	40013c00 	.word	0x40013c00

080013a4 <HAL_RCC_OscConfig>:
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013a4:	2800      	cmp	r0, #0
 80013a6:	f000 8125 	beq.w	80015f4 <HAL_RCC_OscConfig+0x250>
{
 80013aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013ae:	6803      	ldr	r3, [r0, #0]
{
 80013b0:	b082      	sub	sp, #8
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013b2:	07dd      	lsls	r5, r3, #31
 80013b4:	4604      	mov	r4, r0
 80013b6:	d522      	bpl.n	80013fe <HAL_RCC_OscConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013b8:	49a6      	ldr	r1, [pc, #664]	; (8001654 <HAL_RCC_OscConfig+0x2b0>)
 80013ba:	688a      	ldr	r2, [r1, #8]
 80013bc:	f002 020c 	and.w	r2, r2, #12
 80013c0:	2a04      	cmp	r2, #4
 80013c2:	f000 80ea 	beq.w	800159a <HAL_RCC_OscConfig+0x1f6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013c6:	688a      	ldr	r2, [r1, #8]
 80013c8:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013cc:	2a08      	cmp	r2, #8
 80013ce:	f000 80e0 	beq.w	8001592 <HAL_RCC_OscConfig+0x1ee>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013d2:	4ba1      	ldr	r3, [pc, #644]	; (8001658 <HAL_RCC_OscConfig+0x2b4>)
 80013d4:	7922      	ldrb	r2, [r4, #4]
 80013d6:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013d8:	6863      	ldr	r3, [r4, #4]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	f000 80cb 	beq.w	8001576 <HAL_RCC_OscConfig+0x1d2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e0:	f7ff fcc0 	bl	8000d64 <HAL_GetTick>

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013e4:	4d9b      	ldr	r5, [pc, #620]	; (8001654 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 80013e6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013e8:	e005      	b.n	80013f6 <HAL_RCC_OscConfig+0x52>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013ea:	f7ff fcbb 	bl	8000d64 <HAL_GetTick>
 80013ee:	1b80      	subs	r0, r0, r6
 80013f0:	2864      	cmp	r0, #100	; 0x64
 80013f2:	f200 80ed 	bhi.w	80015d0 <HAL_RCC_OscConfig+0x22c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013f6:	682b      	ldr	r3, [r5, #0]
 80013f8:	039a      	lsls	r2, r3, #14
 80013fa:	d5f6      	bpl.n	80013ea <HAL_RCC_OscConfig+0x46>
 80013fc:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013fe:	079f      	lsls	r7, r3, #30
 8001400:	d46f      	bmi.n	80014e2 <HAL_RCC_OscConfig+0x13e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001402:	071a      	lsls	r2, r3, #28
 8001404:	d515      	bpl.n	8001432 <HAL_RCC_OscConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001406:	6963      	ldr	r3, [r4, #20]
 8001408:	2b00      	cmp	r3, #0
 800140a:	f000 80a4 	beq.w	8001556 <HAL_RCC_OscConfig+0x1b2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800140e:	2201      	movs	r2, #1
 8001410:	4b92      	ldr	r3, [pc, #584]	; (800165c <HAL_RCC_OscConfig+0x2b8>)

      /* Get Start Tick */
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001412:	4d90      	ldr	r5, [pc, #576]	; (8001654 <HAL_RCC_OscConfig+0x2b0>)
      __HAL_RCC_LSI_ENABLE();
 8001414:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001416:	f7ff fca5 	bl	8000d64 <HAL_GetTick>
 800141a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800141c:	e005      	b.n	800142a <HAL_RCC_OscConfig+0x86>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800141e:	f7ff fca1 	bl	8000d64 <HAL_GetTick>
 8001422:	1b80      	subs	r0, r0, r6
 8001424:	2802      	cmp	r0, #2
 8001426:	f200 80d3 	bhi.w	80015d0 <HAL_RCC_OscConfig+0x22c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800142a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800142c:	079b      	lsls	r3, r3, #30
 800142e:	d5f6      	bpl.n	800141e <HAL_RCC_OscConfig+0x7a>
 8001430:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001432:	0758      	lsls	r0, r3, #29
 8001434:	d534      	bpl.n	80014a0 <HAL_RCC_OscConfig+0xfc>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001436:	4a87      	ldr	r2, [pc, #540]	; (8001654 <HAL_RCC_OscConfig+0x2b0>)
 8001438:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800143a:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 800143e:	f040 80db 	bne.w	80015f8 <HAL_RCC_OscConfig+0x254>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8001442:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001444:	9301      	str	r3, [sp, #4]
 8001446:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800144c:	6413      	str	r3, [r2, #64]	; 0x40
 800144e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001450:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001454:	9301      	str	r3, [sp, #4]
 8001456:	9b01      	ldr	r3, [sp, #4]
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001458:	4b81      	ldr	r3, [pc, #516]	; (8001660 <HAL_RCC_OscConfig+0x2bc>)
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001460:	601a      	str	r2, [r3, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	05d1      	lsls	r1, r2, #23
 8001466:	f140 80a2 	bpl.w	80015ae <HAL_RCC_OscConfig+0x20a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800146a:	4b7e      	ldr	r3, [pc, #504]	; (8001664 <HAL_RCC_OscConfig+0x2c0>)
 800146c:	7a22      	ldrb	r2, [r4, #8]
 800146e:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001470:	68a3      	ldr	r3, [r4, #8]
 8001472:	2b00      	cmp	r3, #0
 8001474:	f000 80c2 	beq.w	80015fc <HAL_RCC_OscConfig+0x258>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001478:	f7ff fc74 	bl	8000d64 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800147c:	4e75      	ldr	r6, [pc, #468]	; (8001654 <HAL_RCC_OscConfig+0x2b0>)
      tickstart = HAL_GetTick();
 800147e:	4680      	mov	r8, r0
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001480:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001484:	e006      	b.n	8001494 <HAL_RCC_OscConfig+0xf0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001486:	f7ff fc6d 	bl	8000d64 <HAL_GetTick>
 800148a:	eba0 0008 	sub.w	r0, r0, r8
 800148e:	42b8      	cmp	r0, r7
 8001490:	f200 809e 	bhi.w	80015d0 <HAL_RCC_OscConfig+0x22c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001494:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8001496:	079b      	lsls	r3, r3, #30
 8001498:	d5f5      	bpl.n	8001486 <HAL_RCC_OscConfig+0xe2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800149a:	2d00      	cmp	r5, #0
 800149c:	f040 80d3 	bne.w	8001646 <HAL_RCC_OscConfig+0x2a2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014a0:	69a0      	ldr	r0, [r4, #24]
 80014a2:	b1d0      	cbz	r0, 80014da <HAL_RCC_OscConfig+0x136>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014a4:	4d6b      	ldr	r5, [pc, #428]	; (8001654 <HAL_RCC_OscConfig+0x2b0>)
 80014a6:	68aa      	ldr	r2, [r5, #8]
 80014a8:	f002 020c 	and.w	r2, r2, #12
 80014ac:	2a08      	cmp	r2, #8
 80014ae:	f000 80df 	beq.w	8001670 <HAL_RCC_OscConfig+0x2cc>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014b2:	2802      	cmp	r0, #2
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014b4:	f04f 0100 	mov.w	r1, #0
 80014b8:	4a6b      	ldr	r2, [pc, #428]	; (8001668 <HAL_RCC_OscConfig+0x2c4>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014ba:	f000 80fc 	beq.w	80016b6 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014be:	6011      	str	r1, [r2, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c0:	f7ff fc50 	bl	8000d64 <HAL_GetTick>

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014c4:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 80014c6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014c8:	e004      	b.n	80014d4 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014ca:	f7ff fc4b 	bl	8000d64 <HAL_GetTick>
 80014ce:	1b40      	subs	r0, r0, r5
 80014d0:	2864      	cmp	r0, #100	; 0x64
 80014d2:	d87d      	bhi.n	80015d0 <HAL_RCC_OscConfig+0x22c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014d4:	6823      	ldr	r3, [r4, #0]
 80014d6:	019b      	lsls	r3, r3, #6
 80014d8:	d4f7      	bmi.n	80014ca <HAL_RCC_OscConfig+0x126>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80014da:	2000      	movs	r0, #0
}
 80014dc:	b002      	add	sp, #8
 80014de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014e2:	4a5c      	ldr	r2, [pc, #368]	; (8001654 <HAL_RCC_OscConfig+0x2b0>)
 80014e4:	6891      	ldr	r1, [r2, #8]
 80014e6:	f011 0f0c 	tst.w	r1, #12
 80014ea:	d029      	beq.n	8001540 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014ec:	6891      	ldr	r1, [r2, #8]
 80014ee:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014f2:	2908      	cmp	r1, #8
 80014f4:	d021      	beq.n	800153a <HAL_RCC_OscConfig+0x196>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80014f6:	68e3      	ldr	r3, [r4, #12]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	f000 8093 	beq.w	8001624 <HAL_RCC_OscConfig+0x280>
        __HAL_RCC_HSI_ENABLE();
 80014fe:	2201      	movs	r2, #1
 8001500:	4b5a      	ldr	r3, [pc, #360]	; (800166c <HAL_RCC_OscConfig+0x2c8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001502:	4d54      	ldr	r5, [pc, #336]	; (8001654 <HAL_RCC_OscConfig+0x2b0>)
        __HAL_RCC_HSI_ENABLE();
 8001504:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001506:	f7ff fc2d 	bl	8000d64 <HAL_GetTick>
 800150a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800150c:	e004      	b.n	8001518 <HAL_RCC_OscConfig+0x174>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800150e:	f7ff fc29 	bl	8000d64 <HAL_GetTick>
 8001512:	1b80      	subs	r0, r0, r6
 8001514:	2802      	cmp	r0, #2
 8001516:	d85b      	bhi.n	80015d0 <HAL_RCC_OscConfig+0x22c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001518:	682b      	ldr	r3, [r5, #0]
 800151a:	0798      	lsls	r0, r3, #30
 800151c:	d5f7      	bpl.n	800150e <HAL_RCC_OscConfig+0x16a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800151e:	6829      	ldr	r1, [r5, #0]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001520:	23f8      	movs	r3, #248	; 0xf8
 8001522:	fa93 f3a3 	rbit	r3, r3
 8001526:	fab3 f283 	clz	r2, r3
 800152a:	6923      	ldr	r3, [r4, #16]
 800152c:	f021 01f8 	bic.w	r1, r1, #248	; 0xf8
 8001530:	4093      	lsls	r3, r2
 8001532:	430b      	orrs	r3, r1
 8001534:	602b      	str	r3, [r5, #0]
 8001536:	6823      	ldr	r3, [r4, #0]
 8001538:	e763      	b.n	8001402 <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800153a:	6852      	ldr	r2, [r2, #4]
 800153c:	0256      	lsls	r6, r2, #9
 800153e:	d4da      	bmi.n	80014f6 <HAL_RCC_OscConfig+0x152>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001540:	4a44      	ldr	r2, [pc, #272]	; (8001654 <HAL_RCC_OscConfig+0x2b0>)
 8001542:	6812      	ldr	r2, [r2, #0]
 8001544:	0795      	lsls	r5, r2, #30
 8001546:	d547      	bpl.n	80015d8 <HAL_RCC_OscConfig+0x234>
 8001548:	68e2      	ldr	r2, [r4, #12]
 800154a:	2a01      	cmp	r2, #1
 800154c:	d044      	beq.n	80015d8 <HAL_RCC_OscConfig+0x234>
        return HAL_ERROR;
 800154e:	2001      	movs	r0, #1
}
 8001550:	b002      	add	sp, #8
 8001552:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8001556:	4a41      	ldr	r2, [pc, #260]	; (800165c <HAL_RCC_OscConfig+0x2b8>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001558:	4d3e      	ldr	r5, [pc, #248]	; (8001654 <HAL_RCC_OscConfig+0x2b0>)
      __HAL_RCC_LSI_DISABLE();
 800155a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800155c:	f7ff fc02 	bl	8000d64 <HAL_GetTick>
 8001560:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001562:	e004      	b.n	800156e <HAL_RCC_OscConfig+0x1ca>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001564:	f7ff fbfe 	bl	8000d64 <HAL_GetTick>
 8001568:	1b80      	subs	r0, r0, r6
 800156a:	2802      	cmp	r0, #2
 800156c:	d830      	bhi.n	80015d0 <HAL_RCC_OscConfig+0x22c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800156e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001570:	079f      	lsls	r7, r3, #30
 8001572:	d4f7      	bmi.n	8001564 <HAL_RCC_OscConfig+0x1c0>
 8001574:	e75c      	b.n	8001430 <HAL_RCC_OscConfig+0x8c>
        tickstart = HAL_GetTick();
 8001576:	f7ff fbf5 	bl	8000d64 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800157a:	4d36      	ldr	r5, [pc, #216]	; (8001654 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 800157c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800157e:	e004      	b.n	800158a <HAL_RCC_OscConfig+0x1e6>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001580:	f7ff fbf0 	bl	8000d64 <HAL_GetTick>
 8001584:	1b80      	subs	r0, r0, r6
 8001586:	2864      	cmp	r0, #100	; 0x64
 8001588:	d822      	bhi.n	80015d0 <HAL_RCC_OscConfig+0x22c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800158a:	682b      	ldr	r3, [r5, #0]
 800158c:	039b      	lsls	r3, r3, #14
 800158e:	d4f7      	bmi.n	8001580 <HAL_RCC_OscConfig+0x1dc>
 8001590:	e734      	b.n	80013fc <HAL_RCC_OscConfig+0x58>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001592:	684a      	ldr	r2, [r1, #4]
 8001594:	0250      	lsls	r0, r2, #9
 8001596:	f57f af1c 	bpl.w	80013d2 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800159a:	4a2e      	ldr	r2, [pc, #184]	; (8001654 <HAL_RCC_OscConfig+0x2b0>)
 800159c:	6812      	ldr	r2, [r2, #0]
 800159e:	0391      	lsls	r1, r2, #14
 80015a0:	f57f af2d 	bpl.w	80013fe <HAL_RCC_OscConfig+0x5a>
 80015a4:	6862      	ldr	r2, [r4, #4]
 80015a6:	2a00      	cmp	r2, #0
 80015a8:	f47f af29 	bne.w	80013fe <HAL_RCC_OscConfig+0x5a>
 80015ac:	e7cf      	b.n	800154e <HAL_RCC_OscConfig+0x1aa>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015ae:	681a      	ldr	r2, [r3, #0]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015b0:	461e      	mov	r6, r3
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80015b6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80015b8:	f7ff fbd4 	bl	8000d64 <HAL_GetTick>
 80015bc:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015be:	6833      	ldr	r3, [r6, #0]
 80015c0:	05da      	lsls	r2, r3, #23
 80015c2:	f53f af52 	bmi.w	800146a <HAL_RCC_OscConfig+0xc6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015c6:	f7ff fbcd 	bl	8000d64 <HAL_GetTick>
 80015ca:	1bc0      	subs	r0, r0, r7
 80015cc:	2802      	cmp	r0, #2
 80015ce:	d9f6      	bls.n	80015be <HAL_RCC_OscConfig+0x21a>
            return HAL_TIMEOUT;
 80015d0:	2003      	movs	r0, #3
}
 80015d2:	b002      	add	sp, #8
 80015d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015d8:	4d1e      	ldr	r5, [pc, #120]	; (8001654 <HAL_RCC_OscConfig+0x2b0>)
 80015da:	22f8      	movs	r2, #248	; 0xf8
 80015dc:	6828      	ldr	r0, [r5, #0]
 80015de:	fa92 f2a2 	rbit	r2, r2
 80015e2:	fab2 f182 	clz	r1, r2
 80015e6:	6922      	ldr	r2, [r4, #16]
 80015e8:	f020 00f8 	bic.w	r0, r0, #248	; 0xf8
 80015ec:	408a      	lsls	r2, r1
 80015ee:	4302      	orrs	r2, r0
 80015f0:	602a      	str	r2, [r5, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015f2:	e706      	b.n	8001402 <HAL_RCC_OscConfig+0x5e>
    return HAL_ERROR;
 80015f4:	2001      	movs	r0, #1
}
 80015f6:	4770      	bx	lr
    FlagStatus       pwrclkchanged = RESET;
 80015f8:	2500      	movs	r5, #0
 80015fa:	e72d      	b.n	8001458 <HAL_RCC_OscConfig+0xb4>
      tickstart = HAL_GetTick();
 80015fc:	f7ff fbb2 	bl	8000d64 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001600:	4e14      	ldr	r6, [pc, #80]	; (8001654 <HAL_RCC_OscConfig+0x2b0>)
      tickstart = HAL_GetTick();
 8001602:	4680      	mov	r8, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001604:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001608:	e005      	b.n	8001616 <HAL_RCC_OscConfig+0x272>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800160a:	f7ff fbab 	bl	8000d64 <HAL_GetTick>
 800160e:	eba0 0008 	sub.w	r0, r0, r8
 8001612:	42b8      	cmp	r0, r7
 8001614:	d8dc      	bhi.n	80015d0 <HAL_RCC_OscConfig+0x22c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001616:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8001618:	0798      	lsls	r0, r3, #30
 800161a:	d4f6      	bmi.n	800160a <HAL_RCC_OscConfig+0x266>
    if(pwrclkchanged == SET)
 800161c:	2d00      	cmp	r5, #0
 800161e:	f43f af3f 	beq.w	80014a0 <HAL_RCC_OscConfig+0xfc>
 8001622:	e010      	b.n	8001646 <HAL_RCC_OscConfig+0x2a2>
        __HAL_RCC_HSI_DISABLE();
 8001624:	4a11      	ldr	r2, [pc, #68]	; (800166c <HAL_RCC_OscConfig+0x2c8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001626:	4d0b      	ldr	r5, [pc, #44]	; (8001654 <HAL_RCC_OscConfig+0x2b0>)
        __HAL_RCC_HSI_DISABLE();
 8001628:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800162a:	f7ff fb9b 	bl	8000d64 <HAL_GetTick>
 800162e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001630:	e004      	b.n	800163c <HAL_RCC_OscConfig+0x298>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001632:	f7ff fb97 	bl	8000d64 <HAL_GetTick>
 8001636:	1b80      	subs	r0, r0, r6
 8001638:	2802      	cmp	r0, #2
 800163a:	d8c9      	bhi.n	80015d0 <HAL_RCC_OscConfig+0x22c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800163c:	682b      	ldr	r3, [r5, #0]
 800163e:	0799      	lsls	r1, r3, #30
 8001640:	d4f7      	bmi.n	8001632 <HAL_RCC_OscConfig+0x28e>
 8001642:	6823      	ldr	r3, [r4, #0]
 8001644:	e6dd      	b.n	8001402 <HAL_RCC_OscConfig+0x5e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001646:	4a03      	ldr	r2, [pc, #12]	; (8001654 <HAL_RCC_OscConfig+0x2b0>)
 8001648:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800164a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800164e:	6413      	str	r3, [r2, #64]	; 0x40
 8001650:	e726      	b.n	80014a0 <HAL_RCC_OscConfig+0xfc>
 8001652:	bf00      	nop
 8001654:	40023800 	.word	0x40023800
 8001658:	40023802 	.word	0x40023802
 800165c:	42470e80 	.word	0x42470e80
 8001660:	40007000 	.word	0x40007000
 8001664:	40023870 	.word	0x40023870
 8001668:	42470060 	.word	0x42470060
 800166c:	42470000 	.word	0x42470000
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001670:	2801      	cmp	r0, #1
 8001672:	f43f af6d 	beq.w	8001550 <HAL_RCC_OscConfig+0x1ac>
        uint32_t pllcfgr = RCC->PLLCFGR;
 8001676:	686b      	ldr	r3, [r5, #4]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001678:	69e2      	ldr	r2, [r4, #28]
 800167a:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 800167e:	4291      	cmp	r1, r2
 8001680:	f47f af65 	bne.w	800154e <HAL_RCC_OscConfig+0x1aa>
 8001684:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001686:	f003 013f 	and.w	r1, r3, #63	; 0x3f
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800168a:	4291      	cmp	r1, r2
 800168c:	f47f af5f 	bne.w	800154e <HAL_RCC_OscConfig+0x1aa>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001690:	6a62      	ldr	r2, [r4, #36]	; 0x24
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8001692:	f3c3 1188 	ubfx	r1, r3, #6, #9
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001696:	4291      	cmp	r1, r2
 8001698:	f47f af59 	bne.w	800154e <HAL_RCC_OscConfig+0x1aa>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800169c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800169e:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80016a2:	4291      	cmp	r1, r2
 80016a4:	f47f af53 	bne.w	800154e <HAL_RCC_OscConfig+0x1aa>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80016a8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80016aa:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    return HAL_ERROR;
 80016ae:	1a18      	subs	r0, r3, r0
 80016b0:	bf18      	it	ne
 80016b2:	2001      	movne	r0, #1
 80016b4:	e74c      	b.n	8001550 <HAL_RCC_OscConfig+0x1ac>
        __HAL_RCC_PLL_DISABLE();
 80016b6:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 80016b8:	f7ff fb54 	bl	8000d64 <HAL_GetTick>
 80016bc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016be:	e004      	b.n	80016ca <HAL_RCC_OscConfig+0x326>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016c0:	f7ff fb50 	bl	8000d64 <HAL_GetTick>
 80016c4:	1b80      	subs	r0, r0, r6
 80016c6:	2864      	cmp	r0, #100	; 0x64
 80016c8:	d882      	bhi.n	80015d0 <HAL_RCC_OscConfig+0x22c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ca:	682b      	ldr	r3, [r5, #0]
 80016cc:	0199      	lsls	r1, r3, #6
 80016ce:	d4f7      	bmi.n	80016c0 <HAL_RCC_OscConfig+0x31c>
        __HAL_RCC_PLL_ENABLE();
 80016d0:	2101      	movs	r1, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016d2:	686a      	ldr	r2, [r5, #4]
 80016d4:	4811      	ldr	r0, [pc, #68]	; (800171c <HAL_RCC_OscConfig+0x378>)
 80016d6:	69e3      	ldr	r3, [r4, #28]
 80016d8:	4002      	ands	r2, r0
 80016da:	6a20      	ldr	r0, [r4, #32]
 80016dc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80016de:	4303      	orrs	r3, r0
 80016e0:	4313      	orrs	r3, r2
 80016e2:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 80016e6:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	; 0x28
 80016ea:	40ca      	lsrs	r2, r1
 80016ec:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80016f0:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 80016f2:	480b      	ldr	r0, [pc, #44]	; (8001720 <HAL_RCC_OscConfig+0x37c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80016f8:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80016fa:	6001      	str	r1, [r0, #0]
        tickstart = HAL_GetTick();
 80016fc:	f7ff fb32 	bl	8000d64 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001700:	4c08      	ldr	r4, [pc, #32]	; (8001724 <HAL_RCC_OscConfig+0x380>)
        tickstart = HAL_GetTick();
 8001702:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001704:	e005      	b.n	8001712 <HAL_RCC_OscConfig+0x36e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001706:	f7ff fb2d 	bl	8000d64 <HAL_GetTick>
 800170a:	1b40      	subs	r0, r0, r5
 800170c:	2864      	cmp	r0, #100	; 0x64
 800170e:	f63f af5f 	bhi.w	80015d0 <HAL_RCC_OscConfig+0x22c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001712:	6823      	ldr	r3, [r4, #0]
 8001714:	019a      	lsls	r2, r3, #6
 8001716:	d5f6      	bpl.n	8001706 <HAL_RCC_OscConfig+0x362>
 8001718:	e6df      	b.n	80014da <HAL_RCC_OscConfig+0x136>
 800171a:	bf00      	nop
 800171c:	f0bc8000 	.word	0xf0bc8000
 8001720:	42470060 	.word	0x42470060
 8001724:	40023800 	.word	0x40023800

08001728 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001728:	b160      	cbz	r0, 8001744 <HAL_RCC_ClockConfig+0x1c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800172a:	4a5f      	ldr	r2, [pc, #380]	; (80018a8 <HAL_RCC_ClockConfig+0x180>)
 800172c:	6813      	ldr	r3, [r2, #0]
 800172e:	f003 030f 	and.w	r3, r3, #15
 8001732:	428b      	cmp	r3, r1
 8001734:	d208      	bcs.n	8001748 <HAL_RCC_ClockConfig+0x20>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001736:	b2cb      	uxtb	r3, r1
 8001738:	7013      	strb	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800173a:	6813      	ldr	r3, [r2, #0]
 800173c:	f003 030f 	and.w	r3, r3, #15
 8001740:	428b      	cmp	r3, r1
 8001742:	d001      	beq.n	8001748 <HAL_RCC_ClockConfig+0x20>
    return HAL_ERROR;
 8001744:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);

  return HAL_OK;
}
 8001746:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001748:	6803      	ldr	r3, [r0, #0]
{
 800174a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800174e:	079d      	lsls	r5, r3, #30
 8001750:	d514      	bpl.n	800177c <HAL_RCC_ClockConfig+0x54>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001752:	075c      	lsls	r4, r3, #29
 8001754:	d504      	bpl.n	8001760 <HAL_RCC_ClockConfig+0x38>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001756:	4c55      	ldr	r4, [pc, #340]	; (80018ac <HAL_RCC_ClockConfig+0x184>)
 8001758:	68a2      	ldr	r2, [r4, #8]
 800175a:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 800175e:	60a2      	str	r2, [r4, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001760:	071a      	lsls	r2, r3, #28
 8001762:	d504      	bpl.n	800176e <HAL_RCC_ClockConfig+0x46>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8001764:	4c51      	ldr	r4, [pc, #324]	; (80018ac <HAL_RCC_ClockConfig+0x184>)
 8001766:	68a2      	ldr	r2, [r4, #8]
 8001768:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 800176c:	60a2      	str	r2, [r4, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800176e:	4c4f      	ldr	r4, [pc, #316]	; (80018ac <HAL_RCC_ClockConfig+0x184>)
 8001770:	6885      	ldr	r5, [r0, #8]
 8001772:	68a2      	ldr	r2, [r4, #8]
 8001774:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001778:	432a      	orrs	r2, r5
 800177a:	60a2      	str	r2, [r4, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800177c:	07df      	lsls	r7, r3, #31
 800177e:	4604      	mov	r4, r0
 8001780:	460d      	mov	r5, r1
 8001782:	d520      	bpl.n	80017c6 <HAL_RCC_ClockConfig+0x9e>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001784:	6842      	ldr	r2, [r0, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001786:	4b49      	ldr	r3, [pc, #292]	; (80018ac <HAL_RCC_ClockConfig+0x184>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001788:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800178a:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800178c:	d05f      	beq.n	800184e <HAL_RCC_ClockConfig+0x126>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800178e:	2a02      	cmp	r2, #2
 8001790:	d07c      	beq.n	800188c <HAL_RCC_ClockConfig+0x164>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001792:	0799      	lsls	r1, r3, #30
 8001794:	d524      	bpl.n	80017e0 <HAL_RCC_ClockConfig+0xb8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001796:	4e45      	ldr	r6, [pc, #276]	; (80018ac <HAL_RCC_ClockConfig+0x184>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001798:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800179c:	68b3      	ldr	r3, [r6, #8]
 800179e:	f023 0303 	bic.w	r3, r3, #3
 80017a2:	4313      	orrs	r3, r2
 80017a4:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80017a6:	f7ff fadd 	bl	8000d64 <HAL_GetTick>
 80017aa:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ac:	e004      	b.n	80017b8 <HAL_RCC_ClockConfig+0x90>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017ae:	f7ff fad9 	bl	8000d64 <HAL_GetTick>
 80017b2:	1bc0      	subs	r0, r0, r7
 80017b4:	4540      	cmp	r0, r8
 80017b6:	d867      	bhi.n	8001888 <HAL_RCC_ClockConfig+0x160>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017b8:	68b3      	ldr	r3, [r6, #8]
 80017ba:	6862      	ldr	r2, [r4, #4]
 80017bc:	f003 030c 	and.w	r3, r3, #12
 80017c0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80017c4:	d1f3      	bne.n	80017ae <HAL_RCC_ClockConfig+0x86>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017c6:	4a38      	ldr	r2, [pc, #224]	; (80018a8 <HAL_RCC_ClockConfig+0x180>)
 80017c8:	6813      	ldr	r3, [r2, #0]
 80017ca:	f003 030f 	and.w	r3, r3, #15
 80017ce:	42ab      	cmp	r3, r5
 80017d0:	d909      	bls.n	80017e6 <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017d2:	b2eb      	uxtb	r3, r5
 80017d4:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017d6:	6813      	ldr	r3, [r2, #0]
 80017d8:	f003 030f 	and.w	r3, r3, #15
 80017dc:	42ab      	cmp	r3, r5
 80017de:	d002      	beq.n	80017e6 <HAL_RCC_ClockConfig+0xbe>
    return HAL_ERROR;
 80017e0:	2001      	movs	r0, #1
}
 80017e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017e6:	6823      	ldr	r3, [r4, #0]
 80017e8:	075a      	lsls	r2, r3, #29
 80017ea:	d506      	bpl.n	80017fa <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017ec:	492f      	ldr	r1, [pc, #188]	; (80018ac <HAL_RCC_ClockConfig+0x184>)
 80017ee:	68e0      	ldr	r0, [r4, #12]
 80017f0:	688a      	ldr	r2, [r1, #8]
 80017f2:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 80017f6:	4302      	orrs	r2, r0
 80017f8:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017fa:	071b      	lsls	r3, r3, #28
 80017fc:	d507      	bpl.n	800180e <HAL_RCC_ClockConfig+0xe6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017fe:	4a2b      	ldr	r2, [pc, #172]	; (80018ac <HAL_RCC_ClockConfig+0x184>)
 8001800:	6921      	ldr	r1, [r4, #16]
 8001802:	6893      	ldr	r3, [r2, #8]
 8001804:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001808:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800180c:	6093      	str	r3, [r2, #8]
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800180e:	4927      	ldr	r1, [pc, #156]	; (80018ac <HAL_RCC_ClockConfig+0x184>)
 8001810:	688b      	ldr	r3, [r1, #8]
 8001812:	f003 030c 	and.w	r3, r3, #12
 8001816:	2b04      	cmp	r3, #4
 8001818:	d01c      	beq.n	8001854 <HAL_RCC_ClockConfig+0x12c>
 800181a:	2b08      	cmp	r3, #8
 800181c:	d132      	bne.n	8001884 <HAL_RCC_ClockConfig+0x15c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800181e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001820:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001822:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001826:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 800182a:	d132      	bne.n	8001892 <HAL_RCC_ClockConfig+0x16a>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800182c:	6849      	ldr	r1, [r1, #4]
 800182e:	4820      	ldr	r0, [pc, #128]	; (80018b0 <HAL_RCC_ClockConfig+0x188>)
 8001830:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001834:	fba1 0100 	umull	r0, r1, r1, r0
 8001838:	f7fe fcca 	bl	80001d0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800183c:	4b1b      	ldr	r3, [pc, #108]	; (80018ac <HAL_RCC_ClockConfig+0x184>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001844:	3301      	adds	r3, #1
 8001846:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8001848:	fbb0 f0f3 	udiv	r0, r0, r3
 800184c:	e003      	b.n	8001856 <HAL_RCC_ClockConfig+0x12e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800184e:	039e      	lsls	r6, r3, #14
 8001850:	d4a1      	bmi.n	8001796 <HAL_RCC_ClockConfig+0x6e>
 8001852:	e7c5      	b.n	80017e0 <HAL_RCC_ClockConfig+0xb8>
      sysclockfreq = HSE_VALUE;
 8001854:	4817      	ldr	r0, [pc, #92]	; (80018b4 <HAL_RCC_ClockConfig+0x18c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8001856:	4b15      	ldr	r3, [pc, #84]	; (80018ac <HAL_RCC_ClockConfig+0x184>)
 8001858:	22f0      	movs	r2, #240	; 0xf0
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	fa92 f2a2 	rbit	r2, r2
 8001860:	fab2 f282 	clz	r2, r2
 8001864:	4914      	ldr	r1, [pc, #80]	; (80018b8 <HAL_RCC_ClockConfig+0x190>)
 8001866:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800186a:	40d3      	lsrs	r3, r2
 800186c:	5ccb      	ldrb	r3, [r1, r3]
  HAL_InitTick (uwTickPrio);
 800186e:	4913      	ldr	r1, [pc, #76]	; (80018bc <HAL_RCC_ClockConfig+0x194>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8001870:	4a13      	ldr	r2, [pc, #76]	; (80018c0 <HAL_RCC_ClockConfig+0x198>)
 8001872:	fa20 f303 	lsr.w	r3, r0, r3
  HAL_InitTick (uwTickPrio);
 8001876:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8001878:	6013      	str	r3, [r2, #0]
  HAL_InitTick (uwTickPrio);
 800187a:	f7ff f97f 	bl	8000b7c <HAL_InitTick>
  return HAL_OK;
 800187e:	2000      	movs	r0, #0
}
 8001880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      sysclockfreq = HSI_VALUE;
 8001884:	480a      	ldr	r0, [pc, #40]	; (80018b0 <HAL_RCC_ClockConfig+0x188>)
 8001886:	e7e6      	b.n	8001856 <HAL_RCC_ClockConfig+0x12e>
        return HAL_TIMEOUT;
 8001888:	2003      	movs	r0, #3
 800188a:	e7aa      	b.n	80017e2 <HAL_RCC_ClockConfig+0xba>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800188c:	0198      	lsls	r0, r3, #6
 800188e:	d482      	bmi.n	8001796 <HAL_RCC_ClockConfig+0x6e>
 8001890:	e7a6      	b.n	80017e0 <HAL_RCC_ClockConfig+0xb8>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001892:	684b      	ldr	r3, [r1, #4]
 8001894:	4807      	ldr	r0, [pc, #28]	; (80018b4 <HAL_RCC_ClockConfig+0x18c>)
 8001896:	f3c3 1388 	ubfx	r3, r3, #6, #9
 800189a:	fba3 0100 	umull	r0, r1, r3, r0
 800189e:	2300      	movs	r3, #0
 80018a0:	f7fe fc96 	bl	80001d0 <__aeabi_uldivmod>
 80018a4:	e7ca      	b.n	800183c <HAL_RCC_ClockConfig+0x114>
 80018a6:	bf00      	nop
 80018a8:	40023c00 	.word	0x40023c00
 80018ac:	40023800 	.word	0x40023800
 80018b0:	00f42400 	.word	0x00f42400
 80018b4:	007a1200 	.word	0x007a1200
 80018b8:	0800a2bc 	.word	0x0800a2bc
 80018bc:	20000008 	.word	0x20000008
 80018c0:	20000000 	.word	0x20000000

080018c4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 80018c4:	4b08      	ldr	r3, [pc, #32]	; (80018e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018c6:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	fa92 f2a2 	rbit	r2, r2
 80018d0:	fab2 f282 	clz	r2, r2
 80018d4:	4805      	ldr	r0, [pc, #20]	; (80018ec <HAL_RCC_GetPCLK1Freq+0x28>)
  return SystemCoreClock;
 80018d6:	4906      	ldr	r1, [pc, #24]	; (80018f0 <HAL_RCC_GetPCLK1Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 80018d8:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80018dc:	40d3      	lsrs	r3, r2
 80018de:	5cc3      	ldrb	r3, [r0, r3]
 80018e0:	6808      	ldr	r0, [r1, #0]
}
 80018e2:	40d8      	lsrs	r0, r3
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	40023800 	.word	0x40023800
 80018ec:	0800a2cc 	.word	0x0800a2cc
 80018f0:	20000000 	.word	0x20000000

080018f4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 80018f4:	4b08      	ldr	r3, [pc, #32]	; (8001918 <HAL_RCC_GetPCLK2Freq+0x24>)
 80018f6:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	fa92 f2a2 	rbit	r2, r2
 8001900:	fab2 f282 	clz	r2, r2
 8001904:	4805      	ldr	r0, [pc, #20]	; (800191c <HAL_RCC_GetPCLK2Freq+0x28>)
  return SystemCoreClock;
 8001906:	4906      	ldr	r1, [pc, #24]	; (8001920 <HAL_RCC_GetPCLK2Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8001908:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800190c:	40d3      	lsrs	r3, r2
 800190e:	5cc3      	ldrb	r3, [r0, r3]
 8001910:	6808      	ldr	r0, [r1, #0]
}
 8001912:	40d8      	lsrs	r0, r3
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	40023800 	.word	0x40023800
 800191c:	0800a2cc 	.word	0x0800a2cc
 8001920:	20000000 	.word	0x20000000

08001924 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001924:	220f      	movs	r2, #15

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001926:	4b0d      	ldr	r3, [pc, #52]	; (800195c <HAL_RCC_GetClockConfig+0x38>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001928:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800192a:	689a      	ldr	r2, [r3, #8]
{
 800192c:	b410      	push	{r4}
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800192e:	f002 0203 	and.w	r2, r2, #3
 8001932:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001934:	689a      	ldr	r2, [r3, #8]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001936:	4c0a      	ldr	r4, [pc, #40]	; (8001960 <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001938:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800193c:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800193e:	689a      	ldr	r2, [r3, #8]
 8001940:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8001944:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	08db      	lsrs	r3, r3, #3
 800194a:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800194e:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001950:	6823      	ldr	r3, [r4, #0]
}
 8001952:	bc10      	pop	{r4}
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001954:	f003 030f 	and.w	r3, r3, #15
 8001958:	600b      	str	r3, [r1, #0]
}
 800195a:	4770      	bx	lr
 800195c:	40023800 	.word	0x40023800
 8001960:	40023c00 	.word	0x40023c00

08001964 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8001964:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001968:	b089      	sub	sp, #36	; 0x24
 800196a:	4605      	mov	r5, r0
 800196c:	460f      	mov	r7, r1
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800196e:	f7ff f9f9 	bl	8000d64 <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0U, 0U};
 8001972:	2300      	movs	r3, #0
  uint32_t tickstart = HAL_GetTick();
 8001974:	4606      	mov	r6, r0
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8001976:	2108      	movs	r1, #8
 8001978:	6828      	ldr	r0, [r5, #0]
  uint32_t tempscr[2U] = {0U, 0U};
 800197a:	e9cd 3300 	strd	r3, r3, [sp]
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800197e:	f001 f985 	bl	8002c8c <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8001982:	4604      	mov	r4, r0
 8001984:	b118      	cbz	r0, 800198e <SD_FindSCR+0x2a>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 8001986:	4620      	mov	r0, r4
 8001988:	b009      	add	sp, #36	; 0x24
 800198a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800198e:	6d29      	ldr	r1, [r5, #80]	; 0x50
 8001990:	6828      	ldr	r0, [r5, #0]
 8001992:	0409      	lsls	r1, r1, #16
 8001994:	f001 fbaa 	bl	80030ec <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 8001998:	4604      	mov	r4, r0
 800199a:	2800      	cmp	r0, #0
 800199c:	d1f3      	bne.n	8001986 <SD_FindSCR+0x22>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800199e:	f04f 3cff 	mov.w	ip, #4294967295
  config.DataLength    = 8U;
 80019a2:	2008      	movs	r0, #8
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80019a4:	2130      	movs	r1, #48	; 0x30
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80019a6:	2202      	movs	r2, #2
  config.DPSM          = SDIO_DPSM_ENABLE;
 80019a8:	2301      	movs	r3, #1
  config.DataLength    = 8U;
 80019aa:	e9cd c002 	strd	ip, r0, [sp, #8]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80019ae:	9104      	str	r1, [sp, #16]
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80019b0:	eb0d 0100 	add.w	r1, sp, r0
 80019b4:	6828      	ldr	r0, [r5, #0]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80019b6:	9406      	str	r4, [sp, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80019b8:	9205      	str	r2, [sp, #20]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80019ba:	9307      	str	r3, [sp, #28]
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80019bc:	f001 f952 	bl	8002c64 <SDIO_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80019c0:	6828      	ldr	r0, [r5, #0]
 80019c2:	f001 fc4d 	bl	8003260 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 80019c6:	4604      	mov	r4, r0
 80019c8:	2800      	cmp	r0, #0
 80019ca:	d1dc      	bne.n	8001986 <SD_FindSCR+0x22>
  uint32_t index = 0U;
 80019cc:	4681      	mov	r9, r0
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 80019ce:	f240 482a 	movw	r8, #1066	; 0x42a
 80019d2:	6828      	ldr	r0, [r5, #0]
 80019d4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80019d6:	ea13 0f08 	tst.w	r3, r8
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80019da:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 80019dc:	d118      	bne.n	8001a10 <SD_FindSCR+0xac>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80019de:	029b      	lsls	r3, r3, #10
 80019e0:	d407      	bmi.n	80019f2 <SD_FindSCR+0x8e>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80019e2:	f7ff f9bf 	bl	8000d64 <HAL_GetTick>
 80019e6:	1b80      	subs	r0, r0, r6
 80019e8:	3001      	adds	r0, #1
 80019ea:	d1f2      	bne.n	80019d2 <SD_FindSCR+0x6e>
      return HAL_SD_ERROR_TIMEOUT;
 80019ec:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80019f0:	e7c9      	b.n	8001986 <SD_FindSCR+0x22>
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80019f2:	f001 f91b 	bl	8002c2c <SDIO_ReadFIFO>
 80019f6:	ab08      	add	r3, sp, #32
 80019f8:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 80019fc:	f843 0c20 	str.w	r0, [r3, #-32]
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8001a00:	f7ff f9b0 	bl	8000d64 <HAL_GetTick>
 8001a04:	1b80      	subs	r0, r0, r6
 8001a06:	3001      	adds	r0, #1
      index++;
 8001a08:	f109 0901 	add.w	r9, r9, #1
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8001a0c:	d1e1      	bne.n	80019d2 <SD_FindSCR+0x6e>
 8001a0e:	e7ed      	b.n	80019ec <SD_FindSCR+0x88>
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8001a10:	0719      	lsls	r1, r3, #28
 8001a12:	d40f      	bmi.n	8001a34 <SD_FindSCR+0xd0>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8001a14:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001a16:	079a      	lsls	r2, r3, #30
 8001a18:	d40f      	bmi.n	8001a3a <SD_FindSCR+0xd6>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8001a1a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001a1c:	069b      	lsls	r3, r3, #26
 8001a1e:	d40f      	bmi.n	8001a40 <SD_FindSCR+0xdc>
 8001a20:	e9dd 3200 	ldrd	r3, r2, [sp]
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8001a24:	f240 513a 	movw	r1, #1338	; 0x53a
 8001a28:	ba12      	rev	r2, r2
 8001a2a:	ba1b      	rev	r3, r3
 8001a2c:	6381      	str	r1, [r0, #56]	; 0x38
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8001a2e:	e9c7 2300 	strd	r2, r3, [r7]
  return HAL_SD_ERROR_NONE;
 8001a32:	e7a8      	b.n	8001986 <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8001a34:	2408      	movs	r4, #8
 8001a36:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8001a38:	e7a5      	b.n	8001986 <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8001a3a:	2402      	movs	r4, #2
 8001a3c:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8001a3e:	e7a2      	b.n	8001986 <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8001a40:	2420      	movs	r4, #32
 8001a42:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 8001a44:	e79f      	b.n	8001986 <SD_FindSCR+0x22>
 8001a46:	bf00      	nop

08001a48 <HAL_SD_ReadBlocks>:
{
 8001a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a4c:	460d      	mov	r5, r1
 8001a4e:	b087      	sub	sp, #28
 8001a50:	4604      	mov	r4, r0
 8001a52:	4616      	mov	r6, r2
 8001a54:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 8001a56:	f7ff f985 	bl	8000d64 <HAL_GetTick>
  if(NULL == pData)
 8001a5a:	b36d      	cbz	r5, 8001ab8 <HAL_SD_ReadBlocks+0x70>
 8001a5c:	4680      	mov	r8, r0
  if(hsd->State == HAL_SD_STATE_READY)
 8001a5e:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8001a62:	b2c0      	uxtb	r0, r0
 8001a64:	2801      	cmp	r0, #1
 8001a66:	d007      	beq.n	8001a78 <HAL_SD_ReadBlocks+0x30>
    return HAL_ERROR;
 8001a68:	2001      	movs	r0, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8001a6a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001a6c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001a70:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8001a72:	b007      	add	sp, #28
 8001a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001a78:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001a7a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001a7c:	19f3      	adds	r3, r6, r7
 8001a7e:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001a80:	63a1      	str	r1, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001a82:	d821      	bhi.n	8001ac8 <HAL_SD_ReadBlocks+0x80>
    hsd->State = HAL_SD_STATE_BUSY;
 8001a84:	2303      	movs	r3, #3
    hsd->Instance->DCTRL = 0U;
 8001a86:	6820      	ldr	r0, [r4, #0]
    hsd->State = HAL_SD_STATE_BUSY;
 8001a88:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001a8c:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hsd->Instance->DCTRL = 0U;
 8001a8e:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001a90:	2b01      	cmp	r3, #1
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001a92:	f44f 7100 	mov.w	r1, #512	; 0x200
      add *= 512U;
 8001a96:	bf18      	it	ne
 8001a98:	0276      	lslne	r6, r6, #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001a9a:	f001 f8f7 	bl	8002c8c <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	b1c8      	cbz	r0, 8001ad6 <HAL_SD_ReadBlocks+0x8e>
      hsd->State = HAL_SD_STATE_READY;
 8001aa2:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001aa4:	6822      	ldr	r2, [r4, #0]
 8001aa6:	4d86      	ldr	r5, [pc, #536]	; (8001cc0 <HAL_SD_ReadBlocks+0x278>)
      return HAL_ERROR;
 8001aa8:	4608      	mov	r0, r1
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001aaa:	6395      	str	r5, [r2, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8001aac:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001ab2:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      return HAL_ERROR;
 8001ab6:	e7dc      	b.n	8001a72 <HAL_SD_ReadBlocks+0x2a>
    return HAL_ERROR;
 8001ab8:	2001      	movs	r0, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8001aba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001abc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001ac0:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8001ac2:	b007      	add	sp, #28
 8001ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8001ac8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001aca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ace:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8001ad0:	b007      	add	sp, #28
 8001ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001ad6:	f04f 31ff 	mov.w	r1, #4294967295
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8001ada:	2290      	movs	r2, #144	; 0x90
    config.DPSM          = SDIO_DPSM_ENABLE;
 8001adc:	f04f 0a01 	mov.w	sl, #1
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8001ae0:	f04f 0902 	mov.w	r9, #2
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8001ae4:	9004      	str	r0, [sp, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8001ae6:	027b      	lsls	r3, r7, #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001ae8:	9100      	str	r1, [sp, #0]
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8001aea:	6820      	ldr	r0, [r4, #0]
 8001aec:	4669      	mov	r1, sp
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8001aee:	9202      	str	r2, [sp, #8]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8001af0:	f8cd 900c 	str.w	r9, [sp, #12]
    config.DPSM          = SDIO_DPSM_ENABLE;
 8001af4:	f8cd a014 	str.w	sl, [sp, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8001af8:	9301      	str	r3, [sp, #4]
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8001afa:	f001 f8b3 	bl	8002c64 <SDIO_ConfigData>
    if(NumberOfBlocks > 1U)
 8001afe:	4557      	cmp	r7, sl
 8001b00:	d945      	bls.n	8001b8e <HAL_SD_ReadBlocks+0x146>
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8001b02:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8001b06:	4631      	mov	r1, r6
 8001b08:	6820      	ldr	r0, [r4, #0]
 8001b0a:	f001 f941 	bl	8002d90 <SDMMC_CmdReadMultiBlock>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	6823      	ldr	r3, [r4, #0]
    if(errorstate != HAL_SD_ERROR_NONE)
 8001b12:	bb82      	cbnz	r2, 8001b76 <HAL_SD_ReadBlocks+0x12e>
    dataremaining = config.DataLength;
 8001b14:	f8dd a004 	ldr.w	sl, [sp, #4]
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8001b18:	f240 3b2a 	movw	fp, #810	; 0x32a
 8001b1c:	e007      	b.n	8001b2e <HAL_SD_ReadBlocks+0xe6>
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8001b1e:	f7ff f921 	bl	8000d64 <HAL_GetTick>
 8001b22:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001b24:	eba0 0008 	sub.w	r0, r0, r8
 8001b28:	4298      	cmp	r0, r3
 8001b2a:	d27b      	bcs.n	8001c24 <HAL_SD_ReadBlocks+0x1dc>
 8001b2c:	6823      	ldr	r3, [r4, #0]
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8001b2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b30:	ea12 0f0b 	tst.w	r2, fp
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8001b34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8001b36:	d132      	bne.n	8001b9e <HAL_SD_ReadBlocks+0x156>
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8001b38:	0412      	lsls	r2, r2, #16
 8001b3a:	d5f0      	bpl.n	8001b1e <HAL_SD_ReadBlocks+0xd6>
 8001b3c:	f1ba 0f00 	cmp.w	sl, #0
 8001b40:	d0ed      	beq.n	8001b1e <HAL_SD_ReadBlocks+0xd6>
 8001b42:	1d2e      	adds	r6, r5, #4
 8001b44:	f105 0924 	add.w	r9, r5, #36	; 0x24
 8001b48:	e000      	b.n	8001b4c <HAL_SD_ReadBlocks+0x104>
 8001b4a:	6823      	ldr	r3, [r4, #0]
          data = SDIO_ReadFIFO(hsd->Instance);
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f001 f86d 	bl	8002c2c <SDIO_ReadFIFO>
          *tempbuff = (uint8_t)(data & 0xFFU);
 8001b52:	f806 0c04 	strb.w	r0, [r6, #-4]
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8001b56:	0a02      	lsrs	r2, r0, #8
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8001b58:	0c03      	lsrs	r3, r0, #16
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8001b5a:	0e00      	lsrs	r0, r0, #24
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8001b5c:	f806 2c03 	strb.w	r2, [r6, #-3]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8001b60:	f806 3c02 	strb.w	r3, [r6, #-2]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8001b64:	f806 0c01 	strb.w	r0, [r6, #-1]
 8001b68:	3604      	adds	r6, #4
        for(count = 0U; count < 8U; count++)
 8001b6a:	454e      	cmp	r6, r9
 8001b6c:	d1ed      	bne.n	8001b4a <HAL_SD_ReadBlocks+0x102>
 8001b6e:	3520      	adds	r5, #32
 8001b70:	f1aa 0a20 	sub.w	sl, sl, #32
 8001b74:	e7d3      	b.n	8001b1e <HAL_SD_ReadBlocks+0xd6>
      hsd->State = HAL_SD_STATE_READY;
 8001b76:	2101      	movs	r1, #1
      hsd->Context = SD_CONTEXT_NONE;
 8001b78:	2500      	movs	r5, #0
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001b7a:	4851      	ldr	r0, [pc, #324]	; (8001cc0 <HAL_SD_ReadBlocks+0x278>)
 8001b7c:	6398      	str	r0, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8001b7e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 8001b80:	4608      	mov	r0, r1
      hsd->ErrorCode |= errorstate;
 8001b82:	431a      	orrs	r2, r3
 8001b84:	63a2      	str	r2, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001b86:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001b8a:	6325      	str	r5, [r4, #48]	; 0x30
      return HAL_ERROR;
 8001b8c:	e771      	b.n	8001a72 <HAL_SD_ReadBlocks+0x2a>
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8001b8e:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8001b92:	4631      	mov	r1, r6
 8001b94:	6820      	ldr	r0, [r4, #0]
 8001b96:	f001 f8b9 	bl	8002d0c <SDMMC_CmdReadSingleBlock>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	e7b8      	b.n	8001b10 <HAL_SD_ReadBlocks+0xc8>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8001b9e:	05d6      	lsls	r6, r2, #23
 8001ba0:	d50b      	bpl.n	8001bba <HAL_SD_ReadBlocks+0x172>
 8001ba2:	2f01      	cmp	r7, #1
 8001ba4:	d909      	bls.n	8001bba <HAL_SD_ReadBlocks+0x172>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8001ba6:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001ba8:	2a03      	cmp	r2, #3
 8001baa:	d006      	beq.n	8001bba <HAL_SD_ReadBlocks+0x172>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8001bac:	4618      	mov	r0, r3
 8001bae:	f001 f9b3 	bl	8002f18 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2800      	cmp	r0, #0
 8001bb6:	d168      	bne.n	8001c8a <HAL_SD_ReadBlocks+0x242>
 8001bb8:	6823      	ldr	r3, [r4, #0]
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8001bba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bbc:	f012 0208 	ands.w	r2, r2, #8
 8001bc0:	d13e      	bne.n	8001c40 <HAL_SD_ReadBlocks+0x1f8>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8001bc2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001bc4:	f011 0102 	ands.w	r1, r1, #2
 8001bc8:	d147      	bne.n	8001c5a <HAL_SD_ReadBlocks+0x212>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8001bca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bcc:	0690      	lsls	r0, r2, #26
 8001bce:	d450      	bmi.n	8001c72 <HAL_SD_ReadBlocks+0x22a>
 8001bd0:	3504      	adds	r5, #4
 8001bd2:	e01c      	b.n	8001c0e <HAL_SD_ReadBlocks+0x1c6>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8001bd4:	f1ba 0f00 	cmp.w	sl, #0
 8001bd8:	d01c      	beq.n	8001c14 <HAL_SD_ReadBlocks+0x1cc>
      data = SDIO_ReadFIFO(hsd->Instance);
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f001 f826 	bl	8002c2c <SDIO_ReadFIFO>
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8001be0:	0c03      	lsrs	r3, r0, #16
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8001be2:	0a02      	lsrs	r2, r0, #8
      *tempbuff = (uint8_t)(data & 0xFFU);
 8001be4:	f805 0c04 	strb.w	r0, [r5, #-4]
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8001be8:	0e00      	lsrs	r0, r0, #24
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8001bea:	f805 3c02 	strb.w	r3, [r5, #-2]
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8001bee:	f805 2c03 	strb.w	r2, [r5, #-3]
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8001bf2:	f805 0c01 	strb.w	r0, [r5, #-1]
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8001bf6:	f7ff f8b5 	bl	8000d64 <HAL_GetTick>
 8001bfa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001bfc:	eba0 0008 	sub.w	r0, r0, r8
 8001c00:	4298      	cmp	r0, r3
      dataremaining--;
 8001c02:	f1aa 0a04 	sub.w	sl, sl, #4
 8001c06:	f105 0504 	add.w	r5, r5, #4
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8001c0a:	d24b      	bcs.n	8001ca4 <HAL_SD_ReadBlocks+0x25c>
 8001c0c:	6823      	ldr	r3, [r4, #0]
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8001c0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c10:	0292      	lsls	r2, r2, #10
 8001c12:	d4df      	bmi.n	8001bd4 <HAL_SD_ReadBlocks+0x18c>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8001c14:	f240 513a 	movw	r1, #1338	; 0x53a
    hsd->State = HAL_SD_STATE_READY;
 8001c18:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8001c1a:	6399      	str	r1, [r3, #56]	; 0x38
    return HAL_OK;
 8001c1c:	2000      	movs	r0, #0
    hsd->State = HAL_SD_STATE_READY;
 8001c1e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    return HAL_OK;
 8001c22:	e726      	b.n	8001a72 <HAL_SD_ReadBlocks+0x2a>
        hsd->State= HAL_SD_STATE_READY;
 8001c24:	2101      	movs	r1, #1
        hsd->Context = SD_CONTEXT_NONE;
 8001c26:	2200      	movs	r2, #0
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001c28:	6823      	ldr	r3, [r4, #0]
 8001c2a:	4d25      	ldr	r5, [pc, #148]	; (8001cc0 <HAL_SD_ReadBlocks+0x278>)
        return HAL_TIMEOUT;
 8001c2c:	2003      	movs	r0, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001c2e:	639d      	str	r5, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8001c30:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001c32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001c36:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8001c38:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8001c3c:	6322      	str	r2, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 8001c3e:	e718      	b.n	8001a72 <HAL_SD_ReadBlocks+0x2a>
      hsd->State = HAL_SD_STATE_READY;
 8001c40:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 8001c42:	2100      	movs	r1, #0
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001c44:	4d1e      	ldr	r5, [pc, #120]	; (8001cc0 <HAL_SD_ReadBlocks+0x278>)
      return HAL_ERROR;
 8001c46:	4610      	mov	r0, r2
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001c48:	639d      	str	r5, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8001c4a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001c4c:	f043 0308 	orr.w	r3, r3, #8
 8001c50:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001c52:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001c56:	6321      	str	r1, [r4, #48]	; 0x30
      return HAL_ERROR;
 8001c58:	e70b      	b.n	8001a72 <HAL_SD_ReadBlocks+0x2a>
      hsd->State = HAL_SD_STATE_READY;
 8001c5a:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001c5c:	4d18      	ldr	r5, [pc, #96]	; (8001cc0 <HAL_SD_ReadBlocks+0x278>)
      return HAL_ERROR;
 8001c5e:	4608      	mov	r0, r1
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001c60:	639d      	str	r5, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8001c62:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001c64:	f043 0302 	orr.w	r3, r3, #2
 8001c68:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001c6a:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001c6e:	6322      	str	r2, [r4, #48]	; 0x30
      return HAL_ERROR;
 8001c70:	e6ff      	b.n	8001a72 <HAL_SD_ReadBlocks+0x2a>
      hsd->State = HAL_SD_STATE_READY;
 8001c72:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001c74:	4d12      	ldr	r5, [pc, #72]	; (8001cc0 <HAL_SD_ReadBlocks+0x278>)
      return HAL_ERROR;
 8001c76:	4610      	mov	r0, r2
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001c78:	639d      	str	r5, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8001c7a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001c7c:	f043 0320 	orr.w	r3, r3, #32
 8001c80:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001c82:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001c86:	6321      	str	r1, [r4, #48]	; 0x30
      return HAL_ERROR;
 8001c88:	e6f3      	b.n	8001a72 <HAL_SD_ReadBlocks+0x2a>
          hsd->State = HAL_SD_STATE_READY;
 8001c8a:	2101      	movs	r1, #1
          hsd->Context = SD_CONTEXT_NONE;
 8001c8c:	2500      	movs	r5, #0
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001c8e:	6822      	ldr	r2, [r4, #0]
 8001c90:	480b      	ldr	r0, [pc, #44]	; (8001cc0 <HAL_SD_ReadBlocks+0x278>)
 8001c92:	6390      	str	r0, [r2, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8001c94:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          return HAL_ERROR;
 8001c96:	4608      	mov	r0, r1
          hsd->ErrorCode |= errorstate;
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	63a3      	str	r3, [r4, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8001c9c:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8001ca0:	6325      	str	r5, [r4, #48]	; 0x30
          return HAL_ERROR;
 8001ca2:	e6e6      	b.n	8001a72 <HAL_SD_ReadBlocks+0x2a>
        hsd->State= HAL_SD_STATE_READY;
 8001ca4:	2201      	movs	r2, #1
        hsd->Context = SD_CONTEXT_NONE;
 8001ca6:	2100      	movs	r1, #0
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001ca8:	6823      	ldr	r3, [r4, #0]
 8001caa:	4d05      	ldr	r5, [pc, #20]	; (8001cc0 <HAL_SD_ReadBlocks+0x278>)
        return HAL_ERROR;
 8001cac:	4610      	mov	r0, r2
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001cae:	639d      	str	r5, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8001cb0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001cb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001cb6:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8001cb8:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8001cbc:	6321      	str	r1, [r4, #48]	; 0x30
        return HAL_ERROR;
 8001cbe:	e6d8      	b.n	8001a72 <HAL_SD_ReadBlocks+0x2a>
 8001cc0:	004005ff 	.word	0x004005ff

08001cc4 <HAL_SD_WriteBlocks>:
{
 8001cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001cc8:	460d      	mov	r5, r1
 8001cca:	b088      	sub	sp, #32
 8001ccc:	4604      	mov	r4, r0
 8001cce:	4616      	mov	r6, r2
 8001cd0:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 8001cd2:	f7ff f847 	bl	8000d64 <HAL_GetTick>
  if(NULL == pData)
 8001cd6:	b36d      	cbz	r5, 8001d34 <HAL_SD_WriteBlocks+0x70>
 8001cd8:	4680      	mov	r8, r0
  if(hsd->State == HAL_SD_STATE_READY)
 8001cda:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8001cde:	b2c0      	uxtb	r0, r0
 8001ce0:	2801      	cmp	r0, #1
 8001ce2:	d007      	beq.n	8001cf4 <HAL_SD_WriteBlocks+0x30>
    return HAL_ERROR;
 8001ce4:	2001      	movs	r0, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8001ce6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001ce8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001cec:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8001cee:	b008      	add	sp, #32
 8001cf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001cf4:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001cf6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001cf8:	19f3      	adds	r3, r6, r7
 8001cfa:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001cfc:	63a1      	str	r1, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001cfe:	d821      	bhi.n	8001d44 <HAL_SD_WriteBlocks+0x80>
    hsd->State = HAL_SD_STATE_BUSY;
 8001d00:	2303      	movs	r3, #3
    hsd->Instance->DCTRL = 0U;
 8001d02:	6820      	ldr	r0, [r4, #0]
    hsd->State = HAL_SD_STATE_BUSY;
 8001d04:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001d08:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hsd->Instance->DCTRL = 0U;
 8001d0a:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001d0c:	2b01      	cmp	r3, #1
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001d0e:	f44f 7100 	mov.w	r1, #512	; 0x200
      add *= 512U;
 8001d12:	bf18      	it	ne
 8001d14:	0276      	lslne	r6, r6, #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001d16:	f000 ffb9 	bl	8002c8c <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	b1c8      	cbz	r0, 8001d52 <HAL_SD_WriteBlocks+0x8e>
      hsd->State = HAL_SD_STATE_READY;
 8001d1e:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001d20:	6822      	ldr	r2, [r4, #0]
 8001d22:	4d66      	ldr	r5, [pc, #408]	; (8001ebc <HAL_SD_WriteBlocks+0x1f8>)
      return HAL_ERROR;
 8001d24:	4608      	mov	r0, r1
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001d26:	6395      	str	r5, [r2, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8001d28:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001d2e:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      return HAL_ERROR;
 8001d32:	e7dc      	b.n	8001cee <HAL_SD_WriteBlocks+0x2a>
    return HAL_ERROR;
 8001d34:	2001      	movs	r0, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8001d36:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001d38:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001d3c:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8001d3e:	b008      	add	sp, #32
 8001d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8001d44:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001d46:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d4a:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8001d4c:	b008      	add	sp, #32
 8001d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001d52:	f04f 30ff 	mov.w	r0, #4294967295
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8001d56:	2190      	movs	r1, #144	; 0x90
    config.DPSM          = SDIO_DPSM_ENABLE;
 8001d58:	2201      	movs	r2, #1
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8001d5a:	e9cd 3305 	strd	r3, r3, [sp, #20]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001d5e:	9002      	str	r0, [sp, #8]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8001d60:	027b      	lsls	r3, r7, #9
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8001d62:	9104      	str	r1, [sp, #16]
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8001d64:	6820      	ldr	r0, [r4, #0]
 8001d66:	a902      	add	r1, sp, #8
    config.DPSM          = SDIO_DPSM_ENABLE;
 8001d68:	9207      	str	r2, [sp, #28]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8001d6a:	9303      	str	r3, [sp, #12]
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8001d6c:	f000 ff7a 	bl	8002c64 <SDIO_ConfigData>
    if(NumberOfBlocks > 1U)
 8001d70:	2f01      	cmp	r7, #1
 8001d72:	d93b      	bls.n	8001dec <HAL_SD_WriteBlocks+0x128>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8001d74:	2320      	movs	r3, #32
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8001d76:	4631      	mov	r1, r6
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8001d78:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8001d7a:	6820      	ldr	r0, [r4, #0]
 8001d7c:	f001 f88a 	bl	8002e94 <SDMMC_CmdWriteMultiBlock>
 8001d80:	4602      	mov	r2, r0
 8001d82:	6823      	ldr	r3, [r4, #0]
    if(errorstate != HAL_SD_ERROR_NONE)
 8001d84:	bb32      	cbnz	r2, 8001dd4 <HAL_SD_WriteBlocks+0x110>
    dataremaining = config.DataLength;
 8001d86:	f8dd a00c 	ldr.w	sl, [sp, #12]
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8001d8a:	f240 391a 	movw	r9, #794	; 0x31a
 8001d8e:	e007      	b.n	8001da0 <HAL_SD_WriteBlocks+0xdc>
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8001d90:	f7fe ffe8 	bl	8000d64 <HAL_GetTick>
 8001d94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001d96:	eba0 0008 	sub.w	r0, r0, r8
 8001d9a:	4298      	cmp	r0, r3
 8001d9c:	d254      	bcs.n	8001e48 <HAL_SD_WriteBlocks+0x184>
 8001d9e:	6823      	ldr	r3, [r4, #0]
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8001da0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001da2:	ea12 0f09 	tst.w	r2, r9
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8001da6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8001da8:	d128      	bne.n	8001dfc <HAL_SD_WriteBlocks+0x138>
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8001daa:	0451      	lsls	r1, r2, #17
 8001dac:	d5f0      	bpl.n	8001d90 <HAL_SD_WriteBlocks+0xcc>
 8001dae:	f1ba 0f00 	cmp.w	sl, #0
 8001db2:	d0ed      	beq.n	8001d90 <HAL_SD_WriteBlocks+0xcc>
 8001db4:	f105 0620 	add.w	r6, r5, #32
 8001db8:	e000      	b.n	8001dbc <HAL_SD_WriteBlocks+0xf8>
 8001dba:	6823      	ldr	r3, [r4, #0]
          data |= ((uint32_t)(*tempbuff) << 24U);
 8001dbc:	f855 2b04 	ldr.w	r2, [r5], #4
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	a901      	add	r1, sp, #4
          data |= ((uint32_t)(*tempbuff) << 24U);
 8001dc4:	9201      	str	r2, [sp, #4]
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8001dc6:	f000 ff35 	bl	8002c34 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8001dca:	42b5      	cmp	r5, r6
 8001dcc:	d1f5      	bne.n	8001dba <HAL_SD_WriteBlocks+0xf6>
 8001dce:	f1aa 0a20 	sub.w	sl, sl, #32
 8001dd2:	e7dd      	b.n	8001d90 <HAL_SD_WriteBlocks+0xcc>
      hsd->State = HAL_SD_STATE_READY;
 8001dd4:	2101      	movs	r1, #1
      hsd->Context = SD_CONTEXT_NONE;
 8001dd6:	2500      	movs	r5, #0
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001dd8:	4838      	ldr	r0, [pc, #224]	; (8001ebc <HAL_SD_WriteBlocks+0x1f8>)
 8001dda:	6398      	str	r0, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8001ddc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 8001dde:	4608      	mov	r0, r1
      hsd->ErrorCode |= errorstate;
 8001de0:	431a      	orrs	r2, r3
 8001de2:	63a2      	str	r2, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001de4:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001de8:	6325      	str	r5, [r4, #48]	; 0x30
      return HAL_ERROR;
 8001dea:	e780      	b.n	8001cee <HAL_SD_WriteBlocks+0x2a>
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8001dec:	2310      	movs	r3, #16
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8001dee:	4631      	mov	r1, r6
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8001df0:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8001df2:	6820      	ldr	r0, [r4, #0]
 8001df4:	f001 f80e 	bl	8002e14 <SDMMC_CmdWriteSingleBlock>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	e7c2      	b.n	8001d82 <HAL_SD_WriteBlocks+0xbe>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8001dfc:	05d2      	lsls	r2, r2, #23
 8001dfe:	d50b      	bpl.n	8001e18 <HAL_SD_WriteBlocks+0x154>
 8001e00:	2f01      	cmp	r7, #1
 8001e02:	d909      	bls.n	8001e18 <HAL_SD_WriteBlocks+0x154>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8001e04:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001e06:	2a03      	cmp	r2, #3
 8001e08:	d006      	beq.n	8001e18 <HAL_SD_WriteBlocks+0x154>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f001 f884 	bl	8002f18 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8001e10:	4603      	mov	r3, r0
 8001e12:	2800      	cmp	r0, #0
 8001e14:	d145      	bne.n	8001ea2 <HAL_SD_WriteBlocks+0x1de>
 8001e16:	6823      	ldr	r3, [r4, #0]
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8001e18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e1a:	f012 0208 	ands.w	r2, r2, #8
 8001e1e:	d11f      	bne.n	8001e60 <HAL_SD_WriteBlocks+0x19c>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8001e20:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e22:	f011 0102 	ands.w	r1, r1, #2
 8001e26:	d128      	bne.n	8001e7a <HAL_SD_WriteBlocks+0x1b6>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8001e28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e2a:	f012 0210 	ands.w	r2, r2, #16
 8001e2e:	d030      	beq.n	8001e92 <HAL_SD_WriteBlocks+0x1ce>
      hsd->State = HAL_SD_STATE_READY;
 8001e30:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001e32:	4d22      	ldr	r5, [pc, #136]	; (8001ebc <HAL_SD_WriteBlocks+0x1f8>)
      return HAL_ERROR;
 8001e34:	4610      	mov	r0, r2
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001e36:	639d      	str	r5, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8001e38:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001e3a:	f043 0310 	orr.w	r3, r3, #16
 8001e3e:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001e40:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001e44:	6321      	str	r1, [r4, #48]	; 0x30
      return HAL_ERROR;
 8001e46:	e752      	b.n	8001cee <HAL_SD_WriteBlocks+0x2a>
        hsd->State = HAL_SD_STATE_READY;
 8001e48:	2201      	movs	r2, #1
        hsd->Context = SD_CONTEXT_NONE;
 8001e4a:	2300      	movs	r3, #0
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001e4c:	6821      	ldr	r1, [r4, #0]
 8001e4e:	4d1b      	ldr	r5, [pc, #108]	; (8001ebc <HAL_SD_WriteBlocks+0x1f8>)
        return HAL_TIMEOUT;
 8001e50:	2003      	movs	r0, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001e52:	638d      	str	r5, [r1, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8001e54:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001e56:	63a1      	str	r1, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8001e58:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8001e5c:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 8001e5e:	e746      	b.n	8001cee <HAL_SD_WriteBlocks+0x2a>
      hsd->State = HAL_SD_STATE_READY;
 8001e60:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 8001e62:	2100      	movs	r1, #0
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001e64:	4d15      	ldr	r5, [pc, #84]	; (8001ebc <HAL_SD_WriteBlocks+0x1f8>)
      return HAL_ERROR;
 8001e66:	4610      	mov	r0, r2
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001e68:	639d      	str	r5, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8001e6a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001e6c:	f043 0308 	orr.w	r3, r3, #8
 8001e70:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001e72:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001e76:	6321      	str	r1, [r4, #48]	; 0x30
      return HAL_ERROR;
 8001e78:	e739      	b.n	8001cee <HAL_SD_WriteBlocks+0x2a>
      hsd->State = HAL_SD_STATE_READY;
 8001e7a:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001e7c:	4d0f      	ldr	r5, [pc, #60]	; (8001ebc <HAL_SD_WriteBlocks+0x1f8>)
      return HAL_ERROR;
 8001e7e:	4608      	mov	r0, r1
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001e80:	639d      	str	r5, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8001e82:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001e84:	f043 0302 	orr.w	r3, r3, #2
 8001e88:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001e8a:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001e8e:	6322      	str	r2, [r4, #48]	; 0x30
      return HAL_ERROR;
 8001e90:	e72d      	b.n	8001cee <HAL_SD_WriteBlocks+0x2a>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8001e92:	f240 553a 	movw	r5, #1338	; 0x53a
    hsd->State = HAL_SD_STATE_READY;
 8001e96:	2101      	movs	r1, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8001e98:	639d      	str	r5, [r3, #56]	; 0x38
    return HAL_OK;
 8001e9a:	4610      	mov	r0, r2
    hsd->State = HAL_SD_STATE_READY;
 8001e9c:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
    return HAL_OK;
 8001ea0:	e725      	b.n	8001cee <HAL_SD_WriteBlocks+0x2a>
          hsd->State = HAL_SD_STATE_READY;
 8001ea2:	2101      	movs	r1, #1
          hsd->Context = SD_CONTEXT_NONE;
 8001ea4:	2500      	movs	r5, #0
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001ea6:	6822      	ldr	r2, [r4, #0]
 8001ea8:	4804      	ldr	r0, [pc, #16]	; (8001ebc <HAL_SD_WriteBlocks+0x1f8>)
 8001eaa:	6390      	str	r0, [r2, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8001eac:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          return HAL_ERROR;
 8001eae:	4608      	mov	r0, r1
          hsd->ErrorCode |= errorstate;
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	63a3      	str	r3, [r4, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8001eb4:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8001eb8:	6325      	str	r5, [r4, #48]	; 0x30
          return HAL_ERROR;
 8001eba:	e718      	b.n	8001cee <HAL_SD_WriteBlocks+0x2a>
 8001ebc:	004005ff 	.word	0x004005ff

08001ec0 <HAL_SD_ErrorCallback>:
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop

08001ec4 <SD_DMATxAbort>:
{
 8001ec4:	b538      	push	{r3, r4, r5, lr}
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8001ec6:	f240 533a 	movw	r3, #1338	; 0x53a
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8001eca:	6b84      	ldr	r4, [r0, #56]	; 0x38
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8001ecc:	6d21      	ldr	r1, [r4, #80]	; 0x50
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8001ece:	6820      	ldr	r0, [r4, #0]
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8001ed0:	0409      	lsls	r1, r1, #16
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8001ed2:	6383      	str	r3, [r0, #56]	; 0x38
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8001ed4:	f001 facc 	bl	8003470 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8001ed8:	4605      	mov	r5, r0
 8001eda:	b180      	cbz	r0, 8001efe <SD_DMATxAbort+0x3a>
  hsd->State = HAL_SD_STATE_READY;
 8001edc:	2101      	movs	r1, #1
  hsd->Context = SD_CONTEXT_NONE;
 8001ede:	2200      	movs	r2, #0
    hsd->ErrorCode |= errorstate;
 8001ee0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001ee2:	431d      	orrs	r5, r3
 8001ee4:	63a5      	str	r5, [r4, #56]	; 0x38
  hsd->State = HAL_SD_STATE_READY;
 8001ee6:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8001eea:	6322      	str	r2, [r4, #48]	; 0x30
  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8001eec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    HAL_SD_AbortCallback(hsd);
 8001eee:	4620      	mov	r0, r4
  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8001ef0:	b113      	cbz	r3, 8001ef8 <SD_DMATxAbort+0x34>
    HAL_SD_ErrorCallback(hsd);
 8001ef2:	f7ff ffe5 	bl	8001ec0 <HAL_SD_ErrorCallback>
}
 8001ef6:	bd38      	pop	{r3, r4, r5, pc}
    HAL_SD_AbortCallback(hsd);
 8001ef8:	f001 fb44 	bl	8003584 <HAL_SD_AbortCallback>
}
 8001efc:	bd38      	pop	{r3, r4, r5, pc}
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8001efe:	4601      	mov	r1, r0
 8001f00:	6820      	ldr	r0, [r4, #0]
 8001f02:	f000 feab 	bl	8002c5c <SDIO_GetResponse>
  hsd->State = HAL_SD_STATE_READY;
 8001f06:	2301      	movs	r3, #1
  cardstate = ((resp1 >> 9U) & 0x0FU);
 8001f08:	f3c0 2043 	ubfx	r0, r0, #9, #4
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8001f0c:	3805      	subs	r0, #5
 8001f0e:	4298      	cmp	r0, r3
  hsd->State = HAL_SD_STATE_READY;
 8001f10:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8001f14:	6325      	str	r5, [r4, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8001f16:	d8e9      	bhi.n	8001eec <SD_DMATxAbort+0x28>
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8001f18:	6820      	ldr	r0, [r4, #0]
 8001f1a:	f000 fffd 	bl	8002f18 <SDMMC_CmdStopTransfer>
 8001f1e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001f20:	4318      	orrs	r0, r3
 8001f22:	63a0      	str	r0, [r4, #56]	; 0x38
 8001f24:	e7e2      	b.n	8001eec <SD_DMATxAbort+0x28>
 8001f26:	bf00      	nop

08001f28 <HAL_SD_IRQHandler>:
{
 8001f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8001f2c:	6803      	ldr	r3, [r0, #0]
  uint32_t context = hsd->Context;
 8001f2e:	6b05      	ldr	r5, [r0, #48]	; 0x30
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8001f30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
{
 8001f32:	b082      	sub	sp, #8
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8001f34:	0411      	lsls	r1, r2, #16
{
 8001f36:	4604      	mov	r4, r0
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8001f38:	d51d      	bpl.n	8001f76 <HAL_SD_IRQHandler+0x4e>
 8001f3a:	072a      	lsls	r2, r5, #28
 8001f3c:	f100 80b8 	bmi.w	80020b0 <HAL_SD_IRQHandler+0x188>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8001f40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f42:	05d2      	lsls	r2, r2, #23
 8001f44:	d56c      	bpl.n	8002020 <HAL_SD_IRQHandler+0xf8>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8001f46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f4a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8001f4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f4e:	f422 4241 	bic.w	r2, r2, #49408	; 0xc100
 8001f52:	f022 023a 	bic.w	r2, r2, #58	; 0x3a
 8001f56:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8001f58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f5a:	f022 0201 	bic.w	r2, r2, #1
 8001f5e:	62da      	str	r2, [r3, #44]	; 0x2c
    else if((context & SD_CONTEXT_DMA) != 0U)
 8001f60:	0629      	lsls	r1, r5, #24
 8001f62:	d505      	bpl.n	8001f70 <HAL_SD_IRQHandler+0x48>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8001f64:	06aa      	lsls	r2, r5, #26
 8001f66:	f100 80f4 	bmi.w	8002152 <HAL_SD_IRQHandler+0x22a>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8001f6a:	07af      	lsls	r7, r5, #30
 8001f6c:	f000 80c3 	beq.w	80020f6 <HAL_SD_IRQHandler+0x1ce>
}
 8001f70:	b002      	add	sp, #8
 8001f72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8001f76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f78:	05d7      	lsls	r7, r2, #23
 8001f7a:	d523      	bpl.n	8001fc4 <HAL_SD_IRQHandler+0x9c>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8001f7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f80:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8001f82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    if((context & SD_CONTEXT_IT) != 0U)
 8001f84:	072e      	lsls	r6, r5, #28
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8001f86:	f422 4241 	bic.w	r2, r2, #49408	; 0xc100
 8001f8a:	f022 023a 	bic.w	r2, r2, #58	; 0x3a
 8001f8e:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8001f90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f92:	f022 0201 	bic.w	r2, r2, #1
 8001f96:	62da      	str	r2, [r3, #44]	; 0x2c
    if((context & SD_CONTEXT_IT) != 0U)
 8001f98:	d5e2      	bpl.n	8001f60 <HAL_SD_IRQHandler+0x38>
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8001f9a:	f015 0f22 	tst.w	r5, #34	; 0x22
 8001f9e:	f040 80b8 	bne.w	8002112 <HAL_SD_IRQHandler+0x1ea>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8001fa2:	f240 503a 	movw	r0, #1338	; 0x53a
      hsd->State = HAL_SD_STATE_READY;
 8001fa6:	2101      	movs	r1, #1
      hsd->Context = SD_CONTEXT_NONE;
 8001fa8:	2200      	movs	r2, #0
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8001faa:	6398      	str	r0, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001fac:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
        HAL_SD_RxCpltCallback(hsd);
 8001fb0:	4620      	mov	r0, r4
      hsd->Context = SD_CONTEXT_NONE;
 8001fb2:	6322      	str	r2, [r4, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8001fb4:	07ac      	lsls	r4, r5, #30
 8001fb6:	f000 80a7 	beq.w	8002108 <HAL_SD_IRQHandler+0x1e0>
        HAL_SD_RxCpltCallback(hsd);
 8001fba:	f001 faef 	bl	800359c <HAL_SD_RxCpltCallback>
}
 8001fbe:	b002      	add	sp, #8
 8001fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8001fc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fc6:	0456      	lsls	r6, r2, #17
 8001fc8:	d52b      	bpl.n	8002022 <HAL_SD_IRQHandler+0xfa>
 8001fca:	0728      	lsls	r0, r5, #28
 8001fcc:	d529      	bpl.n	8002022 <HAL_SD_IRQHandler+0xfa>
{
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
  dataremaining = hsd->TxXferSize;
 8001fce:	6a66      	ldr	r6, [r4, #36]	; 0x24

  if (dataremaining > 0U)
 8001fd0:	2e00      	cmp	r6, #0
 8001fd2:	d0cd      	beq.n	8001f70 <HAL_SD_IRQHandler+0x48>
  tmp = hsd->pTxBuffPtr;
 8001fd4:	6a27      	ldr	r7, [r4, #32]
 8001fd6:	f107 0804 	add.w	r8, r7, #4
 8001fda:	f107 0524 	add.w	r5, r7, #36	; 0x24
 8001fde:	e000      	b.n	8001fe2 <HAL_SD_IRQHandler+0xba>
 8001fe0:	6823      	ldr	r3, [r4, #0]
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
    {
      data = (uint32_t)(*tmp);
 8001fe2:	f818 2c04 	ldrb.w	r2, [r8, #-4]
      tmp++;
      dataremaining--;
      data |= ((uint32_t)(*tmp) << 24U);
      tmp++;
      dataremaining--;
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8001fe6:	4618      	mov	r0, r3
      data = (uint32_t)(*tmp);
 8001fe8:	9201      	str	r2, [sp, #4]
      data |= ((uint32_t)(*tmp) << 8U);
 8001fea:	f818 3c03 	ldrb.w	r3, [r8, #-3]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8001fee:	a901      	add	r1, sp, #4
      data |= ((uint32_t)(*tmp) << 8U);
 8001ff0:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8001ff4:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 16U);
 8001ff6:	f818 2c02 	ldrb.w	r2, [r8, #-2]
 8001ffa:	f108 0804 	add.w	r8, r8, #4
 8001ffe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002002:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 24U);
 8002004:	f818 2c05 	ldrb.w	r2, [r8, #-5]
 8002008:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800200c:	9301      	str	r3, [sp, #4]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800200e:	f000 fe11 	bl	8002c34 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8002012:	45a8      	cmp	r8, r5
 8002014:	d1e4      	bne.n	8001fe0 <HAL_SD_IRQHandler+0xb8>
    }

    hsd->pTxBuffPtr = tmp;
 8002016:	3720      	adds	r7, #32
    hsd->TxXferSize = dataremaining;
 8002018:	3e20      	subs	r6, #32
 800201a:	e9c4 7608 	strd	r7, r6, [r4, #32]
 800201e:	e7a7      	b.n	8001f70 <HAL_SD_IRQHandler+0x48>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8002020:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 8002022:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002024:	f012 0f3a 	tst.w	r2, #58	; 0x3a
 8002028:	d0a2      	beq.n	8001f70 <HAL_SD_IRQHandler+0x48>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800202a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800202c:	0791      	lsls	r1, r2, #30
 800202e:	d503      	bpl.n	8002038 <HAL_SD_IRQHandler+0x110>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002030:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002032:	f042 0202 	orr.w	r2, r2, #2
 8002036:	63a2      	str	r2, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8002038:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800203a:	0712      	lsls	r2, r2, #28
 800203c:	d503      	bpl.n	8002046 <HAL_SD_IRQHandler+0x11e>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800203e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002040:	f042 0208 	orr.w	r2, r2, #8
 8002044:	63a2      	str	r2, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8002046:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002048:	0697      	lsls	r7, r2, #26
 800204a:	d503      	bpl.n	8002054 <HAL_SD_IRQHandler+0x12c>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800204c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800204e:	f042 0220 	orr.w	r2, r2, #32
 8002052:	63a2      	str	r2, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8002054:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002056:	06d6      	lsls	r6, r2, #27
 8002058:	d503      	bpl.n	8002062 <HAL_SD_IRQHandler+0x13a>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800205a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800205c:	f042 0210 	orr.w	r2, r2, #16
 8002060:	63a2      	str	r2, [r4, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8002062:	f240 723a 	movw	r2, #1850	; 0x73a
 8002066:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8002068:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800206a:	4618      	mov	r0, r3
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800206c:	f422 724e 	bic.w	r2, r2, #824	; 0x338
 8002070:	f022 0202 	bic.w	r2, r2, #2
 8002074:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002076:	f000 ff4f 	bl	8002f18 <SDMMC_CmdStopTransfer>
 800207a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800207c:	4318      	orrs	r0, r3
 800207e:	63a0      	str	r0, [r4, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8002080:	0728      	lsls	r0, r5, #28
 8002082:	d44d      	bmi.n	8002120 <HAL_SD_IRQHandler+0x1f8>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8002084:	0629      	lsls	r1, r5, #24
 8002086:	f57f af73 	bpl.w	8001f70 <HAL_SD_IRQHandler+0x48>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800208a:	f015 0f30 	tst.w	r5, #48	; 0x30
 800208e:	d16e      	bne.n	800216e <HAL_SD_IRQHandler+0x246>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8002090:	f015 0503 	ands.w	r5, r5, #3
 8002094:	d04d      	beq.n	8002132 <HAL_SD_IRQHandler+0x20a>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8002096:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002098:	4a3b      	ldr	r2, [pc, #236]	; (8002188 <HAL_SD_IRQHandler+0x260>)
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800209a:	4618      	mov	r0, r3
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800209c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800209e:	f7fe ff6f 	bl	8000f80 <HAL_DMA_Abort_IT>
 80020a2:	2800      	cmp	r0, #0
 80020a4:	f43f af64 	beq.w	8001f70 <HAL_SD_IRQHandler+0x48>
          SD_DMARxAbort(hsd->hdmarx);
 80020a8:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80020aa:	f7ff ff0b 	bl	8001ec4 <SD_DMATxAbort>
 80020ae:	e75f      	b.n	8001f70 <HAL_SD_IRQHandler+0x48>
  dataremaining = hsd->RxXferSize;
 80020b0:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
  if (dataremaining > 0U)
 80020b2:	2f00      	cmp	r7, #0
 80020b4:	f43f af5c 	beq.w	8001f70 <HAL_SD_IRQHandler+0x48>
  tmp = hsd->pRxBuffPtr;
 80020b8:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
 80020bc:	f108 0504 	add.w	r5, r8, #4
 80020c0:	f108 0624 	add.w	r6, r8, #36	; 0x24
 80020c4:	e000      	b.n	80020c8 <HAL_SD_IRQHandler+0x1a0>
 80020c6:	6823      	ldr	r3, [r4, #0]
      data = SDIO_ReadFIFO(hsd->Instance);
 80020c8:	4618      	mov	r0, r3
 80020ca:	f000 fdaf 	bl	8002c2c <SDIO_ReadFIFO>
      *tmp = (uint8_t)(data & 0xFFU);
 80020ce:	f805 0c04 	strb.w	r0, [r5, #-4]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80020d2:	0a02      	lsrs	r2, r0, #8
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80020d4:	0c03      	lsrs	r3, r0, #16
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80020d6:	0e00      	lsrs	r0, r0, #24
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80020d8:	f805 2c03 	strb.w	r2, [r5, #-3]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80020dc:	f805 3c02 	strb.w	r3, [r5, #-2]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80020e0:	f805 0c01 	strb.w	r0, [r5, #-1]
 80020e4:	3504      	adds	r5, #4
    for(count = 0U; count < 8U; count++)
 80020e6:	42ae      	cmp	r6, r5
 80020e8:	d1ed      	bne.n	80020c6 <HAL_SD_IRQHandler+0x19e>
    hsd->pRxBuffPtr = tmp;
 80020ea:	f108 0320 	add.w	r3, r8, #32
    hsd->RxXferSize = dataremaining;
 80020ee:	3f20      	subs	r7, #32
 80020f0:	e9c4 370a 	strd	r3, r7, [r4, #40]	; 0x28
 80020f4:	e73c      	b.n	8001f70 <HAL_SD_IRQHandler+0x48>
        hsd->State = HAL_SD_STATE_READY;
 80020f6:	2101      	movs	r1, #1
        HAL_SD_TxCpltCallback(hsd);
 80020f8:	4620      	mov	r0, r4
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80020fa:	6822      	ldr	r2, [r4, #0]
 80020fc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80020fe:	f023 0308 	bic.w	r3, r3, #8
 8002102:	62d3      	str	r3, [r2, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8002104:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8002108:	f001 fa42 	bl	8003590 <HAL_SD_TxCpltCallback>
}
 800210c:	b002      	add	sp, #8
 800210e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002112:	4618      	mov	r0, r3
 8002114:	f000 ff00 	bl	8002f18 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8002118:	4603      	mov	r3, r0
 800211a:	b998      	cbnz	r0, 8002144 <HAL_SD_IRQHandler+0x21c>
 800211c:	6823      	ldr	r3, [r4, #0]
 800211e:	e740      	b.n	8001fa2 <HAL_SD_IRQHandler+0x7a>
      hsd->State = HAL_SD_STATE_READY;
 8002120:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 8002122:	2300      	movs	r3, #0
      hsd->State = HAL_SD_STATE_READY;
 8002124:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      HAL_SD_ErrorCallback(hsd);
 8002128:	4620      	mov	r0, r4
      hsd->Context = SD_CONTEXT_NONE;
 800212a:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800212c:	f7ff fec8 	bl	8001ec0 <HAL_SD_ErrorCallback>
 8002130:	e71e      	b.n	8001f70 <HAL_SD_IRQHandler+0x48>
        hsd->State = HAL_SD_STATE_READY;
 8002132:	2301      	movs	r3, #1
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002134:	63a5      	str	r5, [r4, #56]	; 0x38
        HAL_SD_AbortCallback(hsd);
 8002136:	4620      	mov	r0, r4
        hsd->State = HAL_SD_STATE_READY;
 8002138:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800213c:	6325      	str	r5, [r4, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800213e:	f001 fa21 	bl	8003584 <HAL_SD_AbortCallback>
}
 8002142:	e715      	b.n	8001f70 <HAL_SD_IRQHandler+0x48>
          hsd->ErrorCode |= errorstate;
 8002144:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8002146:	4620      	mov	r0, r4
          hsd->ErrorCode |= errorstate;
 8002148:	4313      	orrs	r3, r2
 800214a:	63a3      	str	r3, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800214c:	f7ff feb8 	bl	8001ec0 <HAL_SD_ErrorCallback>
 8002150:	e7e4      	b.n	800211c <HAL_SD_IRQHandler+0x1f4>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002152:	4618      	mov	r0, r3
 8002154:	f000 fee0 	bl	8002f18 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8002158:	4603      	mov	r3, r0
 800215a:	2800      	cmp	r0, #0
 800215c:	f43f af05 	beq.w	8001f6a <HAL_SD_IRQHandler+0x42>
          hsd->ErrorCode |= errorstate;
 8002160:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8002162:	4620      	mov	r0, r4
          hsd->ErrorCode |= errorstate;
 8002164:	4313      	orrs	r3, r2
 8002166:	63a3      	str	r3, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8002168:	f7ff feaa 	bl	8001ec0 <HAL_SD_ErrorCallback>
 800216c:	e6fd      	b.n	8001f6a <HAL_SD_IRQHandler+0x42>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800216e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002170:	4a06      	ldr	r2, [pc, #24]	; (800218c <HAL_SD_IRQHandler+0x264>)
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8002172:	4618      	mov	r0, r3
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8002174:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8002176:	f7fe ff03 	bl	8000f80 <HAL_DMA_Abort_IT>
 800217a:	2800      	cmp	r0, #0
 800217c:	f43f aef8 	beq.w	8001f70 <HAL_SD_IRQHandler+0x48>
          SD_DMATxAbort(hsd->hdmatx);
 8002180:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002182:	f7ff fe9f 	bl	8001ec4 <SD_DMATxAbort>
 8002186:	e6f3      	b.n	8001f70 <HAL_SD_IRQHandler+0x48>
 8002188:	08002191 	.word	0x08002191
 800218c:	08001ec5 	.word	0x08001ec5

08002190 <SD_DMARxAbort>:
 8002190:	b538      	push	{r3, r4, r5, lr}
 8002192:	f240 533a 	movw	r3, #1338	; 0x53a
 8002196:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002198:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800219a:	6820      	ldr	r0, [r4, #0]
 800219c:	0409      	lsls	r1, r1, #16
 800219e:	6383      	str	r3, [r0, #56]	; 0x38
 80021a0:	f001 f966 	bl	8003470 <SDMMC_CmdSendStatus>
 80021a4:	4605      	mov	r5, r0
 80021a6:	b180      	cbz	r0, 80021ca <SD_DMARxAbort+0x3a>
 80021a8:	2101      	movs	r1, #1
 80021aa:	2200      	movs	r2, #0
 80021ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80021ae:	431d      	orrs	r5, r3
 80021b0:	63a5      	str	r5, [r4, #56]	; 0x38
 80021b2:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
 80021b6:	6322      	str	r2, [r4, #48]	; 0x30
 80021b8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80021ba:	4620      	mov	r0, r4
 80021bc:	b113      	cbz	r3, 80021c4 <SD_DMARxAbort+0x34>
 80021be:	f7ff fe7f 	bl	8001ec0 <HAL_SD_ErrorCallback>
 80021c2:	bd38      	pop	{r3, r4, r5, pc}
 80021c4:	f001 f9de 	bl	8003584 <HAL_SD_AbortCallback>
 80021c8:	bd38      	pop	{r3, r4, r5, pc}
 80021ca:	4601      	mov	r1, r0
 80021cc:	6820      	ldr	r0, [r4, #0]
 80021ce:	f000 fd45 	bl	8002c5c <SDIO_GetResponse>
 80021d2:	2301      	movs	r3, #1
 80021d4:	f3c0 2043 	ubfx	r0, r0, #9, #4
 80021d8:	3805      	subs	r0, #5
 80021da:	4298      	cmp	r0, r3
 80021dc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 80021e0:	6325      	str	r5, [r4, #48]	; 0x30
 80021e2:	d8e9      	bhi.n	80021b8 <SD_DMARxAbort+0x28>
 80021e4:	6820      	ldr	r0, [r4, #0]
 80021e6:	f000 fe97 	bl	8002f18 <SDMMC_CmdStopTransfer>
 80021ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80021ec:	4318      	orrs	r0, r3
 80021ee:	63a0      	str	r0, [r4, #56]	; 0x38
 80021f0:	e7e2      	b.n	80021b8 <SD_DMARxAbort+0x28>
 80021f2:	bf00      	nop

080021f4 <HAL_SD_GetCardCSD>:
{
 80021f4:	4603      	mov	r3, r0
  pCSD->Reserved2 = 0U; /*!< Reserved */
 80021f6:	2000      	movs	r0, #0
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80021f8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
{
 80021fa:	b4f0      	push	{r4, r5, r6, r7}
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80021fc:	0f94      	lsrs	r4, r2, #30
 80021fe:	700c      	strb	r4, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8002200:	f3c2 6583 	ubfx	r5, r2, #26, #4
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8002204:	f3c2 6401 	ubfx	r4, r2, #24, #2
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8002208:	704d      	strb	r5, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800220a:	708c      	strb	r4, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800220c:	f3c2 4507 	ubfx	r5, r2, #16, #8
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8002210:	f3c2 2407 	ubfx	r4, r2, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8002214:	b2d2      	uxtb	r2, r2
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8002216:	70cd      	strb	r5, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8002218:	710c      	strb	r4, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800221a:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800221c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800221e:	0d15      	lsrs	r5, r2, #20
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8002220:	f3c2 4403 	ubfx	r4, r2, #16, #4
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8002224:	80cd      	strh	r5, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8002226:	720c      	strb	r4, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8002228:	f3c2 35c0 	ubfx	r5, r2, #15, #1
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800222c:	f3c2 3480 	ubfx	r4, r2, #14, #1
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8002230:	724d      	strb	r5, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8002232:	728c      	strb	r4, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8002234:	f3c2 3540 	ubfx	r5, r2, #13, #1
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8002238:	f3c2 3400 	ubfx	r4, r2, #12, #1
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800223c:	72cd      	strb	r5, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800223e:	730c      	strb	r4, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8002240:	7348      	strb	r0, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 8002242:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8002244:	2800      	cmp	r0, #0
 8002246:	d16d      	bne.n	8002324 <HAL_SD_GetCardCSD+0x130>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8002248:	f640 70fc 	movw	r0, #4092	; 0xffc
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800224c:	2501      	movs	r5, #1
    hsd->SdCard.LogBlockSize = 512U;
 800224e:	f44f 7600 	mov.w	r6, #512	; 0x200
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8002252:	6edc      	ldr	r4, [r3, #108]	; 0x6c
 8002254:	ea00 0282 	and.w	r2, r0, r2, lsl #2
 8002258:	ea42 7294 	orr.w	r2, r2, r4, lsr #30
 800225c:	610a      	str	r2, [r1, #16]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800225e:	f3c4 6002 	ubfx	r0, r4, #24, #3
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8002262:	f3c4 5242 	ubfx	r2, r4, #21, #3
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8002266:	f3c4 67c2 	ubfx	r7, r4, #27, #3
 800226a:	750f      	strb	r7, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800226c:	7548      	strb	r0, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800226e:	758a      	strb	r2, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8002270:	f3c4 4082 	ubfx	r0, r4, #18, #3
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8002274:	f3c4 32c2 	ubfx	r2, r4, #15, #3
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8002278:	75c8      	strb	r0, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800227a:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800227c:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800227e:	7e08      	ldrb	r0, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8002280:	442a      	add	r2, r5
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8002282:	f000 0007 	and.w	r0, r0, #7
 8002286:	3002      	adds	r0, #2
 8002288:	4082      	lsls	r2, r0
 800228a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800228c:	7a08      	ldrb	r0, [r1, #8]
    hsd->SdCard.LogBlockSize = 512U;
 800228e:	661e      	str	r6, [r3, #96]	; 0x60
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8002290:	f000 000f 	and.w	r0, r0, #15
 8002294:	4085      	lsls	r5, r0
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8002296:	0a68      	lsrs	r0, r5, #9
 8002298:	fb02 f200 	mul.w	r2, r2, r0
 800229c:	e9c3 5216 	strd	r5, r2, [r3, #88]	; 0x58
  pCSD->Reserved3 = 0;
 80022a0:	2200      	movs	r2, #0
  pCSD->Reserved4 = 1;
 80022a2:	2501      	movs	r5, #1
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80022a4:	f3c4 3680 	ubfx	r6, r4, #14, #1
 80022a8:	764e      	strb	r6, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80022aa:	f3c4 16c6 	ubfx	r6, r4, #7, #7
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80022ae:	f004 047f 	and.w	r4, r4, #127	; 0x7f
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80022b2:	768e      	strb	r6, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80022b4:	76cc      	strb	r4, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80022b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  return HAL_OK;
 80022b8:	4610      	mov	r0, r2
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80022ba:	0fdc      	lsrs	r4, r3, #31
 80022bc:	770c      	strb	r4, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80022be:	f3c3 7441 	ubfx	r4, r3, #29, #2
 80022c2:	774c      	strb	r4, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80022c4:	f3c3 6482 	ubfx	r4, r3, #26, #3
 80022c8:	778c      	strb	r4, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80022ca:	f3c3 5483 	ubfx	r4, r3, #22, #4
 80022ce:	77cc      	strb	r4, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80022d0:	f3c3 5440 	ubfx	r4, r3, #21, #1
 80022d4:	f881 4020 	strb.w	r4, [r1, #32]
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80022d8:	f3c3 4600 	ubfx	r6, r3, #16, #1
  pCSD->Reserved3 = 0;
 80022dc:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80022e0:	f3c3 34c0 	ubfx	r4, r3, #15, #1
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80022e4:	f3c3 3280 	ubfx	r2, r3, #14, #1
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80022e8:	f881 6022 	strb.w	r6, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80022ec:	f881 4023 	strb.w	r4, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80022f0:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80022f4:	f3c3 3440 	ubfx	r4, r3, #13, #1
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80022f8:	f3c3 3200 	ubfx	r2, r3, #12, #1
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80022fc:	f881 4025 	strb.w	r4, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8002300:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8002304:	f3c3 2481 	ubfx	r4, r3, #10, #2
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8002308:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800230c:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8002310:	f881 4027 	strb.w	r4, [r1, #39]	; 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8002314:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8002318:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 800231c:	f881 502a 	strb.w	r5, [r1, #42]	; 0x2a
}
 8002320:	bcf0      	pop	{r4, r5, r6, r7}
 8002322:	4770      	bx	lr
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8002324:	2801      	cmp	r0, #1
 8002326:	d00c      	beq.n	8002342 <HAL_SD_GetCardCSD+0x14e>
    hsd->State = HAL_SD_STATE_READY;
 8002328:	2101      	movs	r1, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	4c0d      	ldr	r4, [pc, #52]	; (8002364 <HAL_SD_GetCardCSD+0x170>)
    return HAL_ERROR;
 800232e:	4608      	mov	r0, r1
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002330:	6394      	str	r4, [r2, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002332:	6b9a      	ldr	r2, [r3, #56]	; 0x38
}
 8002334:	bcf0      	pop	{r4, r5, r6, r7}
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002336:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800233a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800233c:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
}
 8002340:	4770      	bx	lr
    hsd->SdCard.BlockSize = 512U;
 8002342:	f44f 7000 	mov.w	r0, #512	; 0x200
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8002346:	6edc      	ldr	r4, [r3, #108]	; 0x6c
 8002348:	0412      	lsls	r2, r2, #16
 800234a:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
 800234e:	ea42 4214 	orr.w	r2, r2, r4, lsr #16
 8002352:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8002354:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockSize = 512U;
 8002356:	6598      	str	r0, [r3, #88]	; 0x58
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8002358:	3201      	adds	r2, #1
 800235a:	0292      	lsls	r2, r2, #10
 800235c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800235e:	e9c3 2017 	strd	r2, r0, [r3, #92]	; 0x5c
 8002362:	e79d      	b.n	80022a0 <HAL_SD_GetCardCSD+0xac>
 8002364:	004005ff 	.word	0x004005ff

08002368 <HAL_SD_Init>:
{
 8002368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800236a:	b099      	sub	sp, #100	; 0x64
  if(hsd == NULL)
 800236c:	b1f0      	cbz	r0, 80023ac <HAL_SD_Init+0x44>
  if(hsd->State == HAL_SD_STATE_RESET)
 800236e:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8002372:	4604      	mov	r4, r0
 8002374:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002378:	2b00      	cmp	r3, #0
 800237a:	d031      	beq.n	80023e0 <HAL_SD_Init+0x78>
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800237c:	2300      	movs	r3, #0
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800237e:	2276      	movs	r2, #118	; 0x76
  hsd->State = HAL_SD_STATE_BUSY;
 8002380:	2603      	movs	r6, #3
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002382:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8002386:	e9cd 3307 	strd	r3, r3, [sp, #28]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800238a:	9309      	str	r3, [sp, #36]	; 0x24
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800238c:	920c      	str	r2, [sp, #48]	; 0x30
  status = SDIO_Init(hsd->Instance, Init);
 800238e:	ab0a      	add	r3, sp, #40	; 0x28
 8002390:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002394:	6825      	ldr	r5, [r4, #0]
  hsd->State = HAL_SD_STATE_BUSY;
 8002396:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
  status = SDIO_Init(hsd->Instance, Init);
 800239a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800239e:	ab07      	add	r3, sp, #28
 80023a0:	4628      	mov	r0, r5
 80023a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023a4:	f000 fc26 	bl	8002bf4 <SDIO_Init>
  if(status != HAL_OK)
 80023a8:	4605      	mov	r5, r0
 80023aa:	b118      	cbz	r0, 80023b4 <HAL_SD_Init+0x4c>
    return HAL_ERROR;
 80023ac:	2601      	movs	r6, #1
}
 80023ae:	4630      	mov	r0, r6
 80023b0:	b019      	add	sp, #100	; 0x64
 80023b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_SD_ENABLE(hsd);
 80023b4:	2701      	movs	r7, #1
  __HAL_SD_DISABLE(hsd);
 80023b6:	4e77      	ldr	r6, [pc, #476]	; (8002594 <HAL_SD_Init+0x22c>)
  (void)SDIO_PowerState_ON(hsd->Instance);
 80023b8:	6820      	ldr	r0, [r4, #0]
  __HAL_SD_DISABLE(hsd);
 80023ba:	6035      	str	r5, [r6, #0]
  (void)SDIO_PowerState_ON(hsd->Instance);
 80023bc:	f000 fc40 	bl	8002c40 <SDIO_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 80023c0:	6037      	str	r7, [r6, #0]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80023c2:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0U;
 80023c4:	9506      	str	r5, [sp, #24]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80023c6:	f000 fe27 	bl	8003018 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 80023ca:	4605      	mov	r5, r0
 80023cc:	b160      	cbz	r0, 80023e8 <HAL_SD_Init+0x80>
    hsd->State = HAL_SD_STATE_READY;
 80023ce:	2601      	movs	r6, #1
}
 80023d0:	4630      	mov	r0, r6
    hsd->State = HAL_SD_STATE_READY;
 80023d2:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80023d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80023d8:	431d      	orrs	r5, r3
 80023da:	63a5      	str	r5, [r4, #56]	; 0x38
}
 80023dc:	b019      	add	sp, #100	; 0x64
 80023de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hsd->Lock = HAL_UNLOCKED;
 80023e0:	7702      	strb	r2, [r0, #28]
    HAL_SD_MspInit(hsd);
 80023e2:	f7fe fad7 	bl	8000994 <HAL_SD_MspInit>
 80023e6:	e7c9      	b.n	800237c <HAL_SD_Init+0x14>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80023e8:	6820      	ldr	r0, [r4, #0]
 80023ea:	f000 fe3f 	bl	800306c <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 80023ee:	2800      	cmp	r0, #0
 80023f0:	f040 80b9 	bne.w	8002566 <HAL_SD_Init+0x1fe>
    hsd->SdCard.CardVersion = CARD_V2_X;
 80023f4:	64a7      	str	r7, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80023f6:	2100      	movs	r1, #0
 80023f8:	6820      	ldr	r0, [r4, #0]
 80023fa:	f000 fe77 	bl	80030ec <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 80023fe:	bb10      	cbnz	r0, 8002446 <HAL_SD_Init+0xde>
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8002400:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8002404:	9a06      	ldr	r2, [sp, #24]
 8002406:	429a      	cmp	r2, r3
 8002408:	d820      	bhi.n	800244c <HAL_SD_Init+0xe4>
 800240a:	f64f 77fe 	movw	r7, #65534	; 0xfffe
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800240e:	4e62      	ldr	r6, [pc, #392]	; (8002598 <HAL_SD_Init+0x230>)
 8002410:	e011      	b.n	8002436 <HAL_SD_Init+0xce>
 8002412:	4631      	mov	r1, r6
 8002414:	6820      	ldr	r0, [r4, #0]
 8002416:	f000 feab 	bl	8003170 <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800241a:	b9a0      	cbnz	r0, 8002446 <HAL_SD_Init+0xde>
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800241c:	4629      	mov	r1, r5
 800241e:	6820      	ldr	r0, [r4, #0]
 8002420:	f000 fc1c 	bl	8002c5c <SDIO_GetResponse>
    count++;
 8002424:	9b06      	ldr	r3, [sp, #24]
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002426:	4605      	mov	r5, r0
    count++;
 8002428:	3301      	adds	r3, #1
 800242a:	9306      	str	r3, [sp, #24]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800242c:	9b06      	ldr	r3, [sp, #24]
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800242e:	0fc2      	lsrs	r2, r0, #31
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8002430:	42bb      	cmp	r3, r7
 8002432:	d80b      	bhi.n	800244c <HAL_SD_Init+0xe4>
 8002434:	b952      	cbnz	r2, 800244c <HAL_SD_Init+0xe4>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8002436:	2100      	movs	r1, #0
 8002438:	6820      	ldr	r0, [r4, #0]
 800243a:	f000 fe57 	bl	80030ec <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800243e:	4605      	mov	r5, r0
 8002440:	2800      	cmp	r0, #0
 8002442:	d0e6      	beq.n	8002412 <HAL_SD_Init+0xaa>
 8002444:	e7c3      	b.n	80023ce <HAL_SD_Init+0x66>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002446:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800244a:	e7c0      	b.n	80023ce <HAL_SD_Init+0x66>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800244c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8002450:	9a06      	ldr	r2, [sp, #24]
 8002452:	429a      	cmp	r2, r3
 8002454:	f200 8096 	bhi.w	8002584 <HAL_SD_Init+0x21c>
  uint16_t sd_rca = 1U;
 8002458:	2301      	movs	r3, #1
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800245a:	f3c5 7580 	ubfx	r5, r5, #30, #1
 800245e:	6465      	str	r5, [r4, #68]	; 0x44
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8002460:	6820      	ldr	r0, [r4, #0]
  uint16_t sd_rca = 1U;
 8002462:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8002466:	f000 fbf5 	bl	8002c54 <SDIO_GetPowerState>
 800246a:	2800      	cmp	r0, #0
 800246c:	f000 8085 	beq.w	800257a <HAL_SD_Init+0x212>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8002470:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002472:	6823      	ldr	r3, [r4, #0]
 8002474:	2a03      	cmp	r2, #3
 8002476:	d12f      	bne.n	80024d8 <HAL_SD_Init+0x170>
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8002478:	4618      	mov	r0, r3
 800247a:	2104      	movs	r1, #4
 800247c:	f000 fbee 	bl	8002c5c <SDIO_GetResponse>
 8002480:	0d00      	lsrs	r0, r0, #20
 8002482:	64e0      	str	r0, [r4, #76]	; 0x4c
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8002484:	a90d      	add	r1, sp, #52	; 0x34
 8002486:	4620      	mov	r0, r4
 8002488:	f7ff feb4 	bl	80021f4 <HAL_SD_GetCardCSD>
 800248c:	4606      	mov	r6, r0
 800248e:	2800      	cmp	r0, #0
 8002490:	d17b      	bne.n	800258a <HAL_SD_Init+0x222>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8002492:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002494:	4603      	mov	r3, r0
 8002496:	0412      	lsls	r2, r2, #16
 8002498:	6820      	ldr	r0, [r4, #0]
 800249a:	f000 fd7b 	bl	8002f94 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 800249e:	b130      	cbz	r0, 80024ae <HAL_SD_Init+0x146>
    hsd->State = HAL_SD_STATE_READY;
 80024a0:	2601      	movs	r6, #1
 80024a2:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80024a6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80024a8:	4308      	orrs	r0, r1
 80024aa:	63a0      	str	r0, [r4, #56]	; 0x38
 80024ac:	e77f      	b.n	80023ae <HAL_SD_Init+0x46>
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80024ae:	4623      	mov	r3, r4
 80024b0:	f853 7b10 	ldr.w	r7, [r3], #16
 80024b4:	1d25      	adds	r5, r4, #4
 80024b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80024ba:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80024be:	4638      	mov	r0, r7
 80024c0:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80024c4:	f000 fb96 	bl	8002bf4 <SDIO_Init>
  hsd->State = HAL_SD_STATE_READY;
 80024c8:	2301      	movs	r3, #1
}
 80024ca:	4630      	mov	r0, r6
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80024cc:	63a6      	str	r6, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 80024ce:	6326      	str	r6, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 80024d0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 80024d4:	b019      	add	sp, #100	; 0x64
 80024d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80024d8:	4618      	mov	r0, r3
 80024da:	f000 ff03 	bl	80032e4 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 80024de:	2800      	cmp	r0, #0
 80024e0:	d1de      	bne.n	80024a0 <HAL_SD_Init+0x138>
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80024e2:	4601      	mov	r1, r0
 80024e4:	6820      	ldr	r0, [r4, #0]
 80024e6:	f000 fbb9 	bl	8002c5c <SDIO_GetResponse>
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80024ea:	2104      	movs	r1, #4
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80024ec:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80024ee:	6820      	ldr	r0, [r4, #0]
 80024f0:	f000 fbb4 	bl	8002c5c <SDIO_GetResponse>
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80024f4:	2108      	movs	r1, #8
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80024f6:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80024f8:	6820      	ldr	r0, [r4, #0]
 80024fa:	f000 fbaf 	bl	8002c5c <SDIO_GetResponse>
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80024fe:	210c      	movs	r1, #12
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002500:	67e0      	str	r0, [r4, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002502:	6820      	ldr	r0, [r4, #0]
 8002504:	f000 fbaa 	bl	8002c5c <SDIO_GetResponse>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8002508:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800250a:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  if(hsd->SdCard.CardType != CARD_SECURED)
 800250e:	2b03      	cmp	r3, #3
 8002510:	d03e      	beq.n	8002590 <HAL_SD_Init+0x228>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8002512:	f10d 0116 	add.w	r1, sp, #22
 8002516:	6820      	ldr	r0, [r4, #0]
 8002518:	f000 ff56 	bl	80033c8 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 800251c:	2800      	cmp	r0, #0
 800251e:	d1bf      	bne.n	80024a0 <HAL_SD_Init+0x138>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8002520:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002522:	6823      	ldr	r3, [r4, #0]
 8002524:	2a03      	cmp	r2, #3
 8002526:	d0a7      	beq.n	8002478 <HAL_SD_Init+0x110>
    hsd->SdCard.RelCardAdd = sd_rca;
 8002528:	f8bd 1016 	ldrh.w	r1, [sp, #22]
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800252c:	4618      	mov	r0, r3
    hsd->SdCard.RelCardAdd = sd_rca;
 800252e:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002530:	0409      	lsls	r1, r1, #16
 8002532:	f000 ff11 	bl	8003358 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002536:	2800      	cmp	r0, #0
 8002538:	d1b2      	bne.n	80024a0 <HAL_SD_Init+0x138>
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800253a:	4601      	mov	r1, r0
 800253c:	6820      	ldr	r0, [r4, #0]
 800253e:	f000 fb8d 	bl	8002c5c <SDIO_GetResponse>
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002542:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002544:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002546:	6820      	ldr	r0, [r4, #0]
 8002548:	f000 fb88 	bl	8002c5c <SDIO_GetResponse>
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800254c:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800254e:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002550:	6820      	ldr	r0, [r4, #0]
 8002552:	f000 fb83 	bl	8002c5c <SDIO_GetResponse>
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002556:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002558:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800255a:	6820      	ldr	r0, [r4, #0]
 800255c:	f000 fb7e 	bl	8002c5c <SDIO_GetResponse>
 8002560:	6823      	ldr	r3, [r4, #0]
 8002562:	6720      	str	r0, [r4, #112]	; 0x70
 8002564:	e788      	b.n	8002478 <HAL_SD_Init+0x110>
    hsd->SdCard.CardVersion = CARD_V1_X;
 8002566:	64a5      	str	r5, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002568:	6820      	ldr	r0, [r4, #0]
 800256a:	f000 fd55 	bl	8003018 <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 800256e:	b938      	cbnz	r0, 8002580 <HAL_SD_Init+0x218>
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8002570:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002572:	2b01      	cmp	r3, #1
 8002574:	f47f af44 	bne.w	8002400 <HAL_SD_Init+0x98>
 8002578:	e73d      	b.n	80023f6 <HAL_SD_Init+0x8e>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800257a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800257e:	e78f      	b.n	80024a0 <HAL_SD_Init+0x138>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002580:	4605      	mov	r5, r0
 8002582:	e724      	b.n	80023ce <HAL_SD_Init+0x66>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8002584:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 8002588:	e721      	b.n	80023ce <HAL_SD_Init+0x66>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800258a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800258e:	e787      	b.n	80024a0 <HAL_SD_Init+0x138>
 8002590:	6823      	ldr	r3, [r4, #0]
 8002592:	e771      	b.n	8002478 <HAL_SD_Init+0x110>
 8002594:	422580a0 	.word	0x422580a0
 8002598:	c1100000 	.word	0xc1100000

0800259c <HAL_SD_GetCardInfo>:
{
 800259c:	b470      	push	{r4, r5, r6}
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800259e:	e9d0 4211 	ldrd	r4, r2, [r0, #68]	; 0x44
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80025a2:	e9d0 3613 	ldrd	r3, r6, [r0, #76]	; 0x4c
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80025a6:	6d45      	ldr	r5, [r0, #84]	; 0x54
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80025a8:	600c      	str	r4, [r1, #0]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80025aa:	6d84      	ldr	r4, [r0, #88]	; 0x58
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80025ac:	604a      	str	r2, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80025ae:	608b      	str	r3, [r1, #8]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80025b0:	e9d0 2317 	ldrd	r2, r3, [r0, #92]	; 0x5c
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80025b4:	e9c1 6503 	strd	r6, r5, [r1, #12]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80025b8:	e9c1 4205 	strd	r4, r2, [r1, #20]
}
 80025bc:	bc70      	pop	{r4, r5, r6}
 80025be:	2000      	movs	r0, #0
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80025c0:	61cb      	str	r3, [r1, #28]
}
 80025c2:	4770      	bx	lr

080025c4 <HAL_SD_ConfigWideBusOperation>:
  hsd->State = HAL_SD_STATE_BUSY;
 80025c4:	2203      	movs	r2, #3
{
 80025c6:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hsd->SdCard.CardType != CARD_SECURED)
 80025c8:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
 80025ca:	b08b      	sub	sp, #44	; 0x2c
  if(hsd->SdCard.CardType != CARD_SECURED)
 80025cc:	4293      	cmp	r3, r2
{
 80025ce:	4604      	mov	r4, r0
  hsd->State = HAL_SD_STATE_BUSY;
 80025d0:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
 80025d4:	6807      	ldr	r7, [r0, #0]
{
 80025d6:	460e      	mov	r6, r1
  if(hsd->SdCard.CardType != CARD_SECURED)
 80025d8:	d028      	beq.n	800262c <HAL_SD_ConfigWideBusOperation+0x68>
    if(WideMode == SDIO_BUS_WIDE_8B)
 80025da:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80025de:	d025      	beq.n	800262c <HAL_SD_ConfigWideBusOperation+0x68>
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80025e0:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 80025e4:	d050      	beq.n	8002688 <HAL_SD_ConfigWideBusOperation+0xc4>
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80025e6:	2900      	cmp	r1, #0
 80025e8:	d02f      	beq.n	800264a <HAL_SD_ConfigWideBusOperation+0x86>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80025ea:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80025ec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80025f0:	6383      	str	r3, [r0, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80025f2:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80025f4:	bb0d      	cbnz	r5, 800263a <HAL_SD_ConfigWideBusOperation+0x76>
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80025f6:	e9d4 0105 	ldrd	r0, r1, [r4, #20]
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80025fa:	6863      	ldr	r3, [r4, #4]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80025fc:	68a2      	ldr	r2, [r4, #8]
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80025fe:	9304      	str	r3, [sp, #16]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8002600:	e9cd 0108 	strd	r0, r1, [sp, #32]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8002604:	68e3      	ldr	r3, [r4, #12]
    Init.BusWide             = WideMode;
 8002606:	9607      	str	r6, [sp, #28]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8002608:	e9cd 2305 	strd	r2, r3, [sp, #20]
    (void)SDIO_Init(hsd->Instance, Init);
 800260c:	aa0a      	add	r2, sp, #40	; 0x28
 800260e:	e912 0007 	ldmdb	r2, {r0, r1, r2}
 8002612:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8002616:	ab04      	add	r3, sp, #16
 8002618:	cb0e      	ldmia	r3, {r1, r2, r3}
 800261a:	4638      	mov	r0, r7
 800261c:	f000 faea 	bl	8002bf4 <SDIO_Init>
  hsd->State = HAL_SD_STATE_READY;
 8002620:	2301      	movs	r3, #1
  return HAL_OK;
 8002622:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 8002624:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8002628:	b00b      	add	sp, #44	; 0x2c
 800262a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800262c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800262e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002632:	63a3      	str	r3, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8002634:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8002636:	2d00      	cmp	r5, #0
 8002638:	d0dd      	beq.n	80025f6 <HAL_SD_ConfigWideBusOperation+0x32>
    hsd->State = HAL_SD_STATE_READY;
 800263a:	2301      	movs	r3, #1
    return HAL_ERROR;
 800263c:	4618      	mov	r0, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800263e:	4a25      	ldr	r2, [pc, #148]	; (80026d4 <HAL_SD_ConfigWideBusOperation+0x110>)
 8002640:	63ba      	str	r2, [r7, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002642:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8002646:	b00b      	add	sp, #44	; 0x2c
 8002648:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800264a:	4638      	mov	r0, r7
  uint32_t scr[2U] = {0U, 0U};
 800264c:	e9cd 1104 	strd	r1, r1, [sp, #16]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002650:	f000 fb04 	bl	8002c5c <SDIO_GetResponse>
 8002654:	0182      	lsls	r2, r0, #6
 8002656:	d420      	bmi.n	800269a <HAL_SD_ConfigWideBusOperation+0xd6>
  errorstate = SD_FindSCR(hsd, scr);
 8002658:	a904      	add	r1, sp, #16
 800265a:	4620      	mov	r0, r4
 800265c:	f7ff f982 	bl	8001964 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002660:	b968      	cbnz	r0, 800267e <HAL_SD_ConfigWideBusOperation+0xba>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8002662:	9b05      	ldr	r3, [sp, #20]
 8002664:	6827      	ldr	r7, [r4, #0]
 8002666:	03db      	lsls	r3, r3, #15
 8002668:	d531      	bpl.n	80026ce <HAL_SD_ConfigWideBusOperation+0x10a>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800266a:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800266c:	4638      	mov	r0, r7
 800266e:	0409      	lsls	r1, r1, #16
 8002670:	f000 fd3c 	bl	80030ec <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002674:	b918      	cbnz	r0, 800267e <HAL_SD_ConfigWideBusOperation+0xba>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8002676:	4601      	mov	r1, r0
 8002678:	6820      	ldr	r0, [r4, #0]
 800267a:	f000 fdaf 	bl	80031dc <SDMMC_CmdBusWidth>
 800267e:	6827      	ldr	r7, [r4, #0]
      hsd->ErrorCode |= errorstate;
 8002680:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002682:	4318      	orrs	r0, r3
 8002684:	63a0      	str	r0, [r4, #56]	; 0x38
 8002686:	e7d5      	b.n	8002634 <HAL_SD_ConfigWideBusOperation+0x70>
  uint32_t scr[2U] = {0U, 0U};
 8002688:	2300      	movs	r3, #0
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800268a:	4638      	mov	r0, r7
 800268c:	4619      	mov	r1, r3
  uint32_t scr[2U] = {0U, 0U};
 800268e:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002692:	f000 fae3 	bl	8002c5c <SDIO_GetResponse>
 8002696:	0180      	lsls	r0, r0, #6
 8002698:	d503      	bpl.n	80026a2 <HAL_SD_ConfigWideBusOperation+0xde>
 800269a:	6827      	ldr	r7, [r4, #0]
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800269c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80026a0:	e7ee      	b.n	8002680 <HAL_SD_ConfigWideBusOperation+0xbc>
  errorstate = SD_FindSCR(hsd, scr);
 80026a2:	a904      	add	r1, sp, #16
 80026a4:	4620      	mov	r0, r4
 80026a6:	f7ff f95d 	bl	8001964 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 80026aa:	2800      	cmp	r0, #0
 80026ac:	d1e7      	bne.n	800267e <HAL_SD_ConfigWideBusOperation+0xba>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80026ae:	9b05      	ldr	r3, [sp, #20]
 80026b0:	6827      	ldr	r7, [r4, #0]
 80026b2:	0359      	lsls	r1, r3, #13
 80026b4:	d50b      	bpl.n	80026ce <HAL_SD_ConfigWideBusOperation+0x10a>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80026b6:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80026b8:	4638      	mov	r0, r7
 80026ba:	0409      	lsls	r1, r1, #16
 80026bc:	f000 fd16 	bl	80030ec <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 80026c0:	2800      	cmp	r0, #0
 80026c2:	d1dc      	bne.n	800267e <HAL_SD_ConfigWideBusOperation+0xba>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80026c4:	2102      	movs	r1, #2
 80026c6:	6820      	ldr	r0, [r4, #0]
 80026c8:	f000 fd88 	bl	80031dc <SDMMC_CmdBusWidth>
 80026cc:	e7d7      	b.n	800267e <HAL_SD_ConfigWideBusOperation+0xba>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80026ce:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80026d2:	e7d5      	b.n	8002680 <HAL_SD_ConfigWideBusOperation+0xbc>
 80026d4:	004005ff 	.word	0x004005ff

080026d8 <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80026d8:	6d01      	ldr	r1, [r0, #80]	; 0x50
{
 80026da:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80026dc:	0409      	lsls	r1, r1, #16
{
 80026de:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80026e0:	6800      	ldr	r0, [r0, #0]
 80026e2:	f000 fec5 	bl	8003470 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 80026e6:	4601      	mov	r1, r0
 80026e8:	b120      	cbz	r0, 80026f4 <HAL_SD_GetCardState+0x1c>
    hsd->ErrorCode |= errorstate;
 80026ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80026ec:	2000      	movs	r0, #0
 80026ee:	4319      	orrs	r1, r3
 80026f0:	63a1      	str	r1, [r4, #56]	; 0x38
}
 80026f2:	bd10      	pop	{r4, pc}
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80026f4:	6820      	ldr	r0, [r4, #0]
 80026f6:	f000 fab1 	bl	8002c5c <SDIO_GetResponse>
 80026fa:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 80026fe:	bd10      	pop	{r4, pc}

08002700 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop

08002704 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8002704:	2800      	cmp	r0, #0
 8002706:	d06d      	beq.n	80027e4 <HAL_TIM_Base_Init+0xe0>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002708:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 800270c:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800270e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002712:	4604      	mov	r4, r0
 8002714:	b3b3      	cbz	r3, 8002784 <HAL_TIM_Base_Init+0x80>
  htim->State = HAL_TIM_STATE_BUSY;
 8002716:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002718:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800271a:	4e42      	ldr	r6, [pc, #264]	; (8002824 <HAL_TIM_Base_Init+0x120>)
  htim->State = HAL_TIM_STATE_BUSY;
 800271c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002720:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 8002722:	6813      	ldr	r3, [r2, #0]
 8002724:	69a5      	ldr	r5, [r4, #24]
 8002726:	68e0      	ldr	r0, [r4, #12]
 8002728:	6861      	ldr	r1, [r4, #4]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800272a:	d05d      	beq.n	80027e8 <HAL_TIM_Base_Init+0xe4>
 800272c:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8002730:	d069      	beq.n	8002806 <HAL_TIM_Base_Init+0x102>
 8002732:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 8002736:	42b2      	cmp	r2, r6
 8002738:	d029      	beq.n	800278e <HAL_TIM_Base_Init+0x8a>
 800273a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800273e:	42b2      	cmp	r2, r6
 8002740:	d025      	beq.n	800278e <HAL_TIM_Base_Init+0x8a>
 8002742:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002746:	42b2      	cmp	r2, r6
 8002748:	d021      	beq.n	800278e <HAL_TIM_Base_Init+0x8a>
 800274a:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 800274e:	42b2      	cmp	r2, r6
 8002750:	d01d      	beq.n	800278e <HAL_TIM_Base_Init+0x8a>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002752:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 8002756:	42b2      	cmp	r2, r6
 8002758:	d059      	beq.n	800280e <HAL_TIM_Base_Init+0x10a>
 800275a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800275e:	42b2      	cmp	r2, r6
 8002760:	d055      	beq.n	800280e <HAL_TIM_Base_Init+0x10a>
 8002762:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002766:	42b2      	cmp	r2, r6
 8002768:	d051      	beq.n	800280e <HAL_TIM_Base_Init+0x10a>
 800276a:	f5a6 3698 	sub.w	r6, r6, #77824	; 0x13000
 800276e:	42b2      	cmp	r2, r6
 8002770:	d04d      	beq.n	800280e <HAL_TIM_Base_Init+0x10a>
 8002772:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002776:	42b2      	cmp	r2, r6
 8002778:	d049      	beq.n	800280e <HAL_TIM_Base_Init+0x10a>
 800277a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800277e:	42b2      	cmp	r2, r6
 8002780:	d149      	bne.n	8002816 <HAL_TIM_Base_Init+0x112>
 8002782:	e044      	b.n	800280e <HAL_TIM_Base_Init+0x10a>
    htim->Lock = HAL_UNLOCKED;
 8002784:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002788:	f7ff ffba 	bl	8002700 <HAL_TIM_Base_MspInit>
 800278c:	e7c3      	b.n	8002716 <HAL_TIM_Base_Init+0x12>
    tmpcr1 |= Structure->CounterMode;
 800278e:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002790:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002794:	4333      	orrs	r3, r6
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002796:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002798:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800279c:	4333      	orrs	r3, r6
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800279e:	4e22      	ldr	r6, [pc, #136]	; (8002828 <HAL_TIM_Base_Init+0x124>)
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027a4:	432b      	orrs	r3, r5
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027a6:	42b2      	cmp	r2, r6
  TIMx->CR1 = tmpcr1;
 80027a8:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027aa:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80027ac:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027ae:	d101      	bne.n	80027b4 <HAL_TIM_Base_Init+0xb0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027b0:	6963      	ldr	r3, [r4, #20]
 80027b2:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027b4:	2301      	movs	r3, #1
  return HAL_OK;
 80027b6:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 80027b8:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027ba:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027be:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80027c2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80027c6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80027ca:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027ce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80027d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80027d6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80027da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80027de:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80027e2:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80027e4:	2001      	movs	r0, #1
}
 80027e6:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 80027e8:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80027ee:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027f0:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80027f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027f6:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027fc:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80027fe:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002800:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002802:	6291      	str	r1, [r2, #40]	; 0x28
 8002804:	e7d4      	b.n	80027b0 <HAL_TIM_Base_Init+0xac>
    tmpcr1 |= Structure->CounterMode;
 8002806:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002808:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800280c:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800280e:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002810:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002814:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002816:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800281a:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800281c:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800281e:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002820:	6291      	str	r1, [r2, #40]	; 0x28
 8002822:	e7c7      	b.n	80027b4 <HAL_TIM_Base_Init+0xb0>
 8002824:	40010000 	.word	0x40010000
 8002828:	40010400 	.word	0x40010400

0800282c <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 800282c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002830:	2b01      	cmp	r3, #1
 8002832:	d001      	beq.n	8002838 <HAL_TIM_Base_Start_IT+0xc>
    return HAL_ERROR;
 8002834:	2001      	movs	r0, #1
 8002836:	4770      	bx	lr
  htim->State = HAL_TIM_STATE_BUSY;
 8002838:	2202      	movs	r2, #2
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800283a:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800283c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002840:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002842:	4916      	ldr	r1, [pc, #88]	; (800289c <HAL_TIM_Base_Start_IT+0x70>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002844:	f042 0201 	orr.w	r2, r2, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002848:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800284a:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800284c:	d019      	beq.n	8002882 <HAL_TIM_Base_Start_IT+0x56>
 800284e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002852:	d016      	beq.n	8002882 <HAL_TIM_Base_Start_IT+0x56>
 8002854:	4a12      	ldr	r2, [pc, #72]	; (80028a0 <HAL_TIM_Base_Start_IT+0x74>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d013      	beq.n	8002882 <HAL_TIM_Base_Start_IT+0x56>
 800285a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800285e:	4293      	cmp	r3, r2
 8002860:	d00f      	beq.n	8002882 <HAL_TIM_Base_Start_IT+0x56>
 8002862:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002866:	4293      	cmp	r3, r2
 8002868:	d00b      	beq.n	8002882 <HAL_TIM_Base_Start_IT+0x56>
 800286a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800286e:	4293      	cmp	r3, r2
 8002870:	d007      	beq.n	8002882 <HAL_TIM_Base_Start_IT+0x56>
 8002872:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8002876:	4293      	cmp	r3, r2
 8002878:	d003      	beq.n	8002882 <HAL_TIM_Base_Start_IT+0x56>
 800287a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800287e:	4293      	cmp	r3, r2
 8002880:	d104      	bne.n	800288c <HAL_TIM_Base_Start_IT+0x60>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002882:	689a      	ldr	r2, [r3, #8]
 8002884:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002888:	2a06      	cmp	r2, #6
 800288a:	d005      	beq.n	8002898 <HAL_TIM_Base_Start_IT+0x6c>
    __HAL_TIM_ENABLE(htim);
 800288c:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 800288e:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8002890:	f042 0201 	orr.w	r2, r2, #1
 8002894:	601a      	str	r2, [r3, #0]
 8002896:	4770      	bx	lr
  return HAL_OK;
 8002898:	2000      	movs	r0, #0
}
 800289a:	4770      	bx	lr
 800289c:	40010000 	.word	0x40010000
 80028a0:	40000400 	.word	0x40000400

080028a4 <HAL_TIM_OC_DelayElapsedCallback>:
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop

080028a8 <HAL_TIM_IC_CaptureCallback>:
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop

080028ac <HAL_TIM_PWM_PulseFinishedCallback>:
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop

080028b0 <HAL_TIM_TriggerCallback>:
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop

080028b4 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028b4:	6803      	ldr	r3, [r0, #0]
{
 80028b6:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028b8:	691a      	ldr	r2, [r3, #16]
{
 80028ba:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028bc:	0791      	lsls	r1, r2, #30
 80028be:	d502      	bpl.n	80028c6 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80028c0:	68da      	ldr	r2, [r3, #12]
 80028c2:	0792      	lsls	r2, r2, #30
 80028c4:	d45f      	bmi.n	8002986 <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80028c6:	691a      	ldr	r2, [r3, #16]
 80028c8:	0750      	lsls	r0, r2, #29
 80028ca:	d502      	bpl.n	80028d2 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80028cc:	68da      	ldr	r2, [r3, #12]
 80028ce:	0751      	lsls	r1, r2, #29
 80028d0:	d446      	bmi.n	8002960 <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80028d2:	691a      	ldr	r2, [r3, #16]
 80028d4:	0712      	lsls	r2, r2, #28
 80028d6:	d502      	bpl.n	80028de <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80028d8:	68da      	ldr	r2, [r3, #12]
 80028da:	0710      	lsls	r0, r2, #28
 80028dc:	d42e      	bmi.n	800293c <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80028de:	691a      	ldr	r2, [r3, #16]
 80028e0:	06d2      	lsls	r2, r2, #27
 80028e2:	d502      	bpl.n	80028ea <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80028e4:	68da      	ldr	r2, [r3, #12]
 80028e6:	06d0      	lsls	r0, r2, #27
 80028e8:	d418      	bmi.n	800291c <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80028ea:	691a      	ldr	r2, [r3, #16]
 80028ec:	07d1      	lsls	r1, r2, #31
 80028ee:	d502      	bpl.n	80028f6 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80028f0:	68da      	ldr	r2, [r3, #12]
 80028f2:	07d2      	lsls	r2, r2, #31
 80028f4:	d45d      	bmi.n	80029b2 <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80028f6:	691a      	ldr	r2, [r3, #16]
 80028f8:	0610      	lsls	r0, r2, #24
 80028fa:	d502      	bpl.n	8002902 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80028fc:	68da      	ldr	r2, [r3, #12]
 80028fe:	0611      	lsls	r1, r2, #24
 8002900:	d45f      	bmi.n	80029c2 <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002902:	691a      	ldr	r2, [r3, #16]
 8002904:	0652      	lsls	r2, r2, #25
 8002906:	d502      	bpl.n	800290e <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002908:	68da      	ldr	r2, [r3, #12]
 800290a:	0650      	lsls	r0, r2, #25
 800290c:	d461      	bmi.n	80029d2 <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800290e:	691a      	ldr	r2, [r3, #16]
 8002910:	0691      	lsls	r1, r2, #26
 8002912:	d502      	bpl.n	800291a <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002914:	68da      	ldr	r2, [r3, #12]
 8002916:	0692      	lsls	r2, r2, #26
 8002918:	d443      	bmi.n	80029a2 <HAL_TIM_IRQHandler+0xee>
}
 800291a:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800291c:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002920:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002922:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002924:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8002926:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002928:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800292c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800292e:	d064      	beq.n	80029fa <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8002930:	f7ff ffba 	bl	80028a8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002934:	2200      	movs	r2, #0
 8002936:	6823      	ldr	r3, [r4, #0]
 8002938:	7722      	strb	r2, [r4, #28]
 800293a:	e7d6      	b.n	80028ea <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800293c:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002940:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002942:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002944:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8002946:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002948:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800294a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800294c:	d152      	bne.n	80029f4 <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800294e:	f7ff ffa9 	bl	80028a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002952:	4620      	mov	r0, r4
 8002954:	f7ff ffaa 	bl	80028ac <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002958:	2200      	movs	r2, #0
 800295a:	6823      	ldr	r3, [r4, #0]
 800295c:	7722      	strb	r2, [r4, #28]
 800295e:	e7be      	b.n	80028de <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002960:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002964:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002966:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002968:	699b      	ldr	r3, [r3, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 800296a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800296c:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002970:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002972:	d13c      	bne.n	80029ee <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002974:	f7ff ff96 	bl	80028a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002978:	4620      	mov	r0, r4
 800297a:	f7ff ff97 	bl	80028ac <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800297e:	2200      	movs	r2, #0
 8002980:	6823      	ldr	r3, [r4, #0]
 8002982:	7722      	strb	r2, [r4, #28]
 8002984:	e7a5      	b.n	80028d2 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002986:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800298a:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800298c:	6119      	str	r1, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800298e:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002990:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002992:	079b      	lsls	r3, r3, #30
 8002994:	d025      	beq.n	80029e2 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8002996:	f7ff ff87 	bl	80028a8 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800299a:	2200      	movs	r2, #0
 800299c:	6823      	ldr	r3, [r4, #0]
 800299e:	7722      	strb	r2, [r4, #28]
 80029a0:	e791      	b.n	80028c6 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80029a2:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 80029a6:	4620      	mov	r0, r4
}
 80029a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80029ac:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80029ae:	f000 b82b 	b.w	8002a08 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80029b2:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 80029b6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80029b8:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80029ba:	f7fd ffbd 	bl	8000938 <HAL_TIM_PeriodElapsedCallback>
 80029be:	6823      	ldr	r3, [r4, #0]
 80029c0:	e799      	b.n	80028f6 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80029c2:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 80029c6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80029c8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80029ca:	f000 f81f 	bl	8002a0c <HAL_TIMEx_BreakCallback>
 80029ce:	6823      	ldr	r3, [r4, #0]
 80029d0:	e797      	b.n	8002902 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80029d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 80029d6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80029d8:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80029da:	f7ff ff69 	bl	80028b0 <HAL_TIM_TriggerCallback>
 80029de:	6823      	ldr	r3, [r4, #0]
 80029e0:	e795      	b.n	800290e <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029e2:	f7ff ff5f 	bl	80028a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029e6:	4620      	mov	r0, r4
 80029e8:	f7ff ff60 	bl	80028ac <HAL_TIM_PWM_PulseFinishedCallback>
 80029ec:	e7d5      	b.n	800299a <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 80029ee:	f7ff ff5b 	bl	80028a8 <HAL_TIM_IC_CaptureCallback>
 80029f2:	e7c4      	b.n	800297e <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 80029f4:	f7ff ff58 	bl	80028a8 <HAL_TIM_IC_CaptureCallback>
 80029f8:	e7ae      	b.n	8002958 <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029fa:	f7ff ff53 	bl	80028a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029fe:	4620      	mov	r0, r4
 8002a00:	f7ff ff54 	bl	80028ac <HAL_TIM_PWM_PulseFinishedCallback>
 8002a04:	e796      	b.n	8002934 <HAL_TIM_IRQHandler+0x80>
 8002a06:	bf00      	nop

08002a08 <HAL_TIMEx_CommutCallback>:
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop

08002a0c <HAL_TIMEx_BreakCallback>:
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop

08002a10 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a10:	2800      	cmp	r0, #0
 8002a12:	d06a      	beq.n	8002aea <HAL_UART_Init+0xda>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a14:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8002a18:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 8002a1a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002a1e:	4604      	mov	r4, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d05d      	beq.n	8002ae0 <HAL_UART_Init+0xd0>
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a24:	2224      	movs	r2, #36	; 0x24

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a26:	6823      	ldr	r3, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002a28:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002a2c:	68da      	ldr	r2, [r3, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a2e:	68e0      	ldr	r0, [r4, #12]
  __HAL_UART_DISABLE(huart);
 8002a30:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a34:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a36:	6919      	ldr	r1, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a38:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a3a:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8002a3e:	4301      	orrs	r1, r0
 8002a40:	6119      	str	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a42:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR1,
 8002a44:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a46:	6965      	ldr	r5, [r4, #20]
 8002a48:	4302      	orrs	r2, r0
 8002a4a:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 8002a4c:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a50:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 8002a52:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a56:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8002a58:	430a      	orrs	r2, r1
 8002a5a:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a5c:	695a      	ldr	r2, [r3, #20]
 8002a5e:	69a0      	ldr	r0, [r4, #24]


  if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a60:	492f      	ldr	r1, [pc, #188]	; (8002b20 <HAL_UART_Init+0x110>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a62:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002a66:	4302      	orrs	r2, r0
  if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a68:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a6a:	615a      	str	r2, [r3, #20]
  if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a6c:	d035      	beq.n	8002ada <HAL_UART_Init+0xca>
 8002a6e:	4a2d      	ldr	r2, [pc, #180]	; (8002b24 <HAL_UART_Init+0x114>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d032      	beq.n	8002ada <HAL_UART_Init+0xca>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002a74:	f7fe ff26 	bl	80018c4 <HAL_RCC_GetPCLK1Freq>
 8002a78:	e9d4 3200 	ldrd	r3, r2, [r4]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a7c:	69e1      	ldr	r1, [r4, #28]
 8002a7e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002a82:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002a86:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002a8a:	d030      	beq.n	8002aee <HAL_UART_Init+0xde>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a8c:	0092      	lsls	r2, r2, #2
 8002a8e:	fbb0 f0f2 	udiv	r0, r0, r2
 8002a92:	2264      	movs	r2, #100	; 0x64
 8002a94:	4d24      	ldr	r5, [pc, #144]	; (8002b28 <HAL_UART_Init+0x118>)
 8002a96:	fba5 6100 	umull	r6, r1, r5, r0
 8002a9a:	0949      	lsrs	r1, r1, #5
 8002a9c:	fb02 0011 	mls	r0, r2, r1, r0
 8002aa0:	0100      	lsls	r0, r0, #4
 8002aa2:	3032      	adds	r0, #50	; 0x32
 8002aa4:	fba5 2000 	umull	r2, r0, r5, r0
 8002aa8:	0109      	lsls	r1, r1, #4
 8002aaa:	eb01 1050 	add.w	r0, r1, r0, lsr #5
 8002aae:	6098      	str	r0, [r3, #8]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ab0:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 8002ab2:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ab4:	691a      	ldr	r2, [r3, #16]
  return HAL_OK;
 8002ab6:	4628      	mov	r0, r5
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ab8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002abc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002abe:	695a      	ldr	r2, [r3, #20]
 8002ac0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ac4:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002ac6:	68da      	ldr	r2, [r3, #12]
 8002ac8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002acc:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ace:	63e5      	str	r5, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002ad0:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002ad4:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
}
 8002ad8:	bd70      	pop	{r4, r5, r6, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 8002ada:	f7fe ff0b 	bl	80018f4 <HAL_RCC_GetPCLK2Freq>
 8002ade:	e7cb      	b.n	8002a78 <HAL_UART_Init+0x68>
    huart->Lock = HAL_UNLOCKED;
 8002ae0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002ae4:	f7fe f812 	bl	8000b0c <HAL_UART_MspInit>
 8002ae8:	e79c      	b.n	8002a24 <HAL_UART_Init+0x14>
    return HAL_ERROR;
 8002aea:	2001      	movs	r0, #1
}
 8002aec:	4770      	bx	lr
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002aee:	0052      	lsls	r2, r2, #1
 8002af0:	fbb0 f0f2 	udiv	r0, r0, r2
 8002af4:	2264      	movs	r2, #100	; 0x64
 8002af6:	4e0c      	ldr	r6, [pc, #48]	; (8002b28 <HAL_UART_Init+0x118>)
 8002af8:	fba6 5100 	umull	r5, r1, r6, r0
 8002afc:	094d      	lsrs	r5, r1, #5
 8002afe:	fb02 0015 	mls	r0, r2, r5, r0
 8002b02:	00c2      	lsls	r2, r0, #3
 8002b04:	3232      	adds	r2, #50	; 0x32
 8002b06:	fba6 1202 	umull	r1, r2, r6, r2
 8002b0a:	0952      	lsrs	r2, r2, #5
 8002b0c:	f002 0107 	and.w	r1, r2, #7
 8002b10:	0052      	lsls	r2, r2, #1
 8002b12:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 8002b16:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8002b1a:	440a      	add	r2, r1
 8002b1c:	609a      	str	r2, [r3, #8]
 8002b1e:	e7c7      	b.n	8002ab0 <HAL_UART_Init+0xa0>
 8002b20:	40011000 	.word	0x40011000
 8002b24:	40011400 	.word	0x40011400
 8002b28:	51eb851f 	.word	0x51eb851f

08002b2c <SDMMC_GetCmdResp1.part.2>:
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8002b2c:	4b30      	ldr	r3, [pc, #192]	; (8002bf0 <SDMMC_GetCmdResp1.part.2+0xc4>)
  return (*(__IO uint32_t *) tmp);
 8002b2e:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8002b30:	4013      	ands	r3, r2
 8002b32:	b34b      	cbz	r3, 8002b88 <SDMMC_GetCmdResp1.part.2+0x5c>
  {
    return SDMMC_ERROR_NONE;
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8002b34:	2a00      	cmp	r2, #0
 8002b36:	db29      	blt.n	8002b8c <SDMMC_GetCmdResp1.part.2+0x60>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8002b38:	0051      	lsls	r1, r2, #1
 8002b3a:	d42d      	bmi.n	8002b98 <SDMMC_GetCmdResp1.part.2+0x6c>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8002b3c:	0093      	lsls	r3, r2, #2
 8002b3e:	d42d      	bmi.n	8002b9c <SDMMC_GetCmdResp1.part.2+0x70>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8002b40:	00d1      	lsls	r1, r2, #3
 8002b42:	d426      	bmi.n	8002b92 <SDMMC_GetCmdResp1.part.2+0x66>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8002b44:	0113      	lsls	r3, r2, #4
 8002b46:	d42e      	bmi.n	8002ba6 <SDMMC_GetCmdResp1.part.2+0x7a>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8002b48:	0151      	lsls	r1, r2, #5
 8002b4a:	d42f      	bmi.n	8002bac <SDMMC_GetCmdResp1.part.2+0x80>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8002b4c:	01d3      	lsls	r3, r2, #7
 8002b4e:	d427      	bmi.n	8002ba0 <SDMMC_GetCmdResp1.part.2+0x74>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8002b50:	0211      	lsls	r1, r2, #8
 8002b52:	d42e      	bmi.n	8002bb2 <SDMMC_GetCmdResp1.part.2+0x86>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8002b54:	0253      	lsls	r3, r2, #9
 8002b56:	d42f      	bmi.n	8002bb8 <SDMMC_GetCmdResp1.part.2+0x8c>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8002b58:	0291      	lsls	r1, r2, #10
 8002b5a:	d430      	bmi.n	8002bbe <SDMMC_GetCmdResp1.part.2+0x92>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8002b5c:	02d3      	lsls	r3, r2, #11
 8002b5e:	d431      	bmi.n	8002bc4 <SDMMC_GetCmdResp1.part.2+0x98>
  {
    return SDMMC_ERROR_CC_ERR;
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8002b60:	0351      	lsls	r1, r2, #13
 8002b62:	d432      	bmi.n	8002bca <SDMMC_GetCmdResp1.part.2+0x9e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8002b64:	0393      	lsls	r3, r2, #14
 8002b66:	d433      	bmi.n	8002bd0 <SDMMC_GetCmdResp1.part.2+0xa4>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8002b68:	03d1      	lsls	r1, r2, #15
 8002b6a:	d434      	bmi.n	8002bd6 <SDMMC_GetCmdResp1.part.2+0xaa>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8002b6c:	0413      	lsls	r3, r2, #16
 8002b6e:	d435      	bmi.n	8002bdc <SDMMC_GetCmdResp1.part.2+0xb0>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8002b70:	0451      	lsls	r1, r2, #17
 8002b72:	d436      	bmi.n	8002be2 <SDMMC_GetCmdResp1.part.2+0xb6>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8002b74:	0493      	lsls	r3, r2, #18
 8002b76:	d437      	bmi.n	8002be8 <SDMMC_GetCmdResp1.part.2+0xbc>
  {
    return SDMMC_ERROR_ERASE_RESET;
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8002b78:	f012 0f08 	tst.w	r2, #8
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8002b7c:	bf14      	ite	ne
 8002b7e:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 8002b82:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8002b86:	4770      	bx	lr
    return SDMMC_ERROR_NONE;
 8002b88:	4618      	mov	r0, r3
 8002b8a:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8002b8c:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8002b90:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8002b92:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002b96:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8002b98:	2040      	movs	r0, #64	; 0x40
 8002b9a:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8002b9c:	2080      	movs	r0, #128	; 0x80
 8002b9e:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8002ba0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002ba4:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8002ba6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002baa:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8002bac:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002bb0:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 8002bb2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002bb6:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 8002bb8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002bbc:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8002bbe:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002bc2:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 8002bc4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002bc8:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8002bca:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002bce:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8002bd0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002bd4:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8002bd6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002bda:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8002bdc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002be0:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8002be2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002be6:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 8002be8:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
  }
}
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	fdffe008 	.word	0xfdffe008

08002bf4 <SDIO_Init>:
{
 8002bf4:	b084      	sub	sp, #16
 8002bf6:	b410      	push	{r4}
 8002bf8:	ac02      	add	r4, sp, #8
 8002bfa:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 8002bfe:	460b      	mov	r3, r1
             Init.ClockBypass         |\
 8002c00:	e9dd 1203 	ldrd	r1, r2, [sp, #12]
  tmpreg |= (Init.ClockEdge           |\
 8002c04:	430b      	orrs	r3, r1
             Init.ClockPowerSave      |\
 8002c06:	9905      	ldr	r1, [sp, #20]
             Init.BusWide             |\
 8002c08:	9c06      	ldr	r4, [sp, #24]
             Init.ClockBypass         |\
 8002c0a:	4313      	orrs	r3, r2
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8002c0c:	6842      	ldr	r2, [r0, #4]
             Init.ClockPowerSave      |\
 8002c0e:	430b      	orrs	r3, r1
             Init.HardwareFlowControl |\
 8002c10:	9907      	ldr	r1, [sp, #28]
             Init.BusWide             |\
 8002c12:	4323      	orrs	r3, r4
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8002c14:	f422 42fd 	bic.w	r2, r2, #32384	; 0x7e80
             Init.HardwareFlowControl |\
 8002c18:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8002c1a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
}
 8002c1e:	bc10      	pop	{r4}
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8002c20:	4313      	orrs	r3, r2
 8002c22:	6043      	str	r3, [r0, #4]
}
 8002c24:	b004      	add	sp, #16
 8002c26:	2000      	movs	r0, #0
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop

08002c2c <SDIO_ReadFIFO>:
  return (SDIOx->FIFO);
 8002c2c:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop

08002c34 <SDIO_WriteFIFO>:
{ 
 8002c34:	4603      	mov	r3, r0
  SDIOx->FIFO = *pWriteData;
 8002c36:	680a      	ldr	r2, [r1, #0]
}
 8002c38:	2000      	movs	r0, #0
  SDIOx->FIFO = *pWriteData;
 8002c3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8002c3e:	4770      	bx	lr

08002c40 <SDIO_PowerState_ON>:
{  
 8002c40:	b508      	push	{r3, lr}
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8002c42:	2203      	movs	r2, #3
{  
 8002c44:	4603      	mov	r3, r0
  HAL_Delay(2);
 8002c46:	2002      	movs	r0, #2
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8002c48:	601a      	str	r2, [r3, #0]
  HAL_Delay(2);
 8002c4a:	f7fe f891 	bl	8000d70 <HAL_Delay>
}
 8002c4e:	2000      	movs	r0, #0
 8002c50:	bd08      	pop	{r3, pc}
 8002c52:	bf00      	nop

08002c54 <SDIO_GetPowerState>:
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8002c54:	6800      	ldr	r0, [r0, #0]
}
 8002c56:	f000 0003 	and.w	r0, r0, #3
 8002c5a:	4770      	bx	lr

08002c5c <SDIO_GetResponse>:
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8002c5c:	3014      	adds	r0, #20
  return (*(__IO uint32_t *) tmp);
 8002c5e:	5840      	ldr	r0, [r0, r1]
}  
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop

08002c64 <SDIO_ConfigData>:
{
 8002c64:	b430      	push	{r4, r5}
  SDIOx->DLEN = Data->DataLength;
 8002c66:	e9d1 4200 	ldrd	r4, r2, [r1]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8002c6a:	e9d1 3502 	ldrd	r3, r5, [r1, #8]
  SDIOx->DTIMER = Data->DataTimeOut;
 8002c6e:	6244      	str	r4, [r0, #36]	; 0x24
                       Data->TransferDir   |\
 8002c70:	690c      	ldr	r4, [r1, #16]
  SDIOx->DLEN = Data->DataLength;
 8002c72:	6282      	str	r2, [r0, #40]	; 0x28
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8002c74:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8002c76:	432b      	orrs	r3, r5
                       Data->TransferMode  |\
 8002c78:	6949      	ldr	r1, [r1, #20]
                       Data->TransferDir   |\
 8002c7a:	4323      	orrs	r3, r4
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8002c7c:	f022 02f7 	bic.w	r2, r2, #247	; 0xf7
                       Data->TransferMode  |\
 8002c80:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8002c82:	4313      	orrs	r3, r2
 8002c84:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 8002c86:	bc30      	pop	{r4, r5}
 8002c88:	2000      	movs	r0, #0
 8002c8a:	4770      	bx	lr

08002c8c <SDMMC_CmdBlockLength>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002c8c:	f241 3388 	movw	r3, #5000	; 0x1388
 8002c90:	4a1c      	ldr	r2, [pc, #112]	; (8002d04 <SDMMC_CmdBlockLength+0x78>)
{
 8002c92:	b410      	push	{r4}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002c94:	6812      	ldr	r2, [r2, #0]
 8002c96:	4c1c      	ldr	r4, [pc, #112]	; (8002d08 <SDMMC_CmdBlockLength+0x7c>)
  SDIOx->ARG = Command->Argument;
 8002c98:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002c9a:	fba4 2102 	umull	r2, r1, r4, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8002c9e:	68c2      	ldr	r2, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002ca0:	0a49      	lsrs	r1, r1, #9
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8002ca2:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002ca6:	fb03 f301 	mul.w	r3, r3, r1
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8002caa:	f022 020f 	bic.w	r2, r2, #15
 8002cae:	f442 628a 	orr.w	r2, r2, #1104	; 0x450
 8002cb2:	60c2      	str	r2, [r0, #12]
    if (count-- == 0U)
 8002cb4:	f113 33ff 	adds.w	r3, r3, #4294967295
 8002cb8:	d313      	bcc.n	8002ce2 <SDMMC_CmdBlockLength+0x56>
    sta_reg = SDIOx->STA;
 8002cba:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8002cbc:	f012 0f45 	tst.w	r2, #69	; 0x45
 8002cc0:	d0f8      	beq.n	8002cb4 <SDMMC_CmdBlockLength+0x28>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002cc2:	0511      	lsls	r1, r2, #20
 8002cc4:	d4f6      	bmi.n	8002cb4 <SDMMC_CmdBlockLength+0x28>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8002cc6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002cc8:	075a      	lsls	r2, r3, #29
 8002cca:	d413      	bmi.n	8002cf4 <SDMMC_CmdBlockLength+0x68>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8002ccc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002cce:	07db      	lsls	r3, r3, #31
 8002cd0:	d40b      	bmi.n	8002cea <SDMMC_CmdBlockLength+0x5e>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8002cd2:	23c5      	movs	r3, #197	; 0xc5
 8002cd4:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDIOx->RESPCMD);
 8002cd6:	6903      	ldr	r3, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b10      	cmp	r3, #16
 8002cdc:	d00e      	beq.n	8002cfc <SDMMC_CmdBlockLength+0x70>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8002cde:	2001      	movs	r0, #1
  return errorstate;
 8002ce0:	e001      	b.n	8002ce6 <SDMMC_CmdBlockLength+0x5a>
      return SDMMC_ERROR_TIMEOUT;
 8002ce2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8002ce6:	bc10      	pop	{r4}
 8002ce8:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8002cea:	2301      	movs	r3, #1
}
 8002cec:	bc10      	pop	{r4}
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8002cee:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8002cf0:	4618      	mov	r0, r3
}
 8002cf2:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8002cf4:	2304      	movs	r3, #4
 8002cf6:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	e7f4      	b.n	8002ce6 <SDMMC_CmdBlockLength+0x5a>
}
 8002cfc:	bc10      	pop	{r4}
 8002cfe:	f7ff bf15 	b.w	8002b2c <SDMMC_GetCmdResp1.part.2>
 8002d02:	bf00      	nop
 8002d04:	20000000 	.word	0x20000000
 8002d08:	10624dd3 	.word	0x10624dd3

08002d0c <SDMMC_CmdReadSingleBlock>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002d0c:	f241 3388 	movw	r3, #5000	; 0x1388
 8002d10:	4a1d      	ldr	r2, [pc, #116]	; (8002d88 <SDMMC_CmdReadSingleBlock+0x7c>)
{
 8002d12:	b410      	push	{r4}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002d14:	6812      	ldr	r2, [r2, #0]
 8002d16:	4c1d      	ldr	r4, [pc, #116]	; (8002d8c <SDMMC_CmdReadSingleBlock+0x80>)
  SDIOx->ARG = Command->Argument;
 8002d18:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002d1a:	fba4 2102 	umull	r2, r1, r4, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8002d1e:	68c2      	ldr	r2, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002d20:	0a49      	lsrs	r1, r1, #9
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8002d22:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8002d26:	f022 020f 	bic.w	r2, r2, #15
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002d2a:	fb03 f301 	mul.w	r3, r3, r1
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8002d2e:	f442 628a 	orr.w	r2, r2, #1104	; 0x450
 8002d32:	f042 0201 	orr.w	r2, r2, #1
 8002d36:	60c2      	str	r2, [r0, #12]
    if (count-- == 0U)
 8002d38:	f113 33ff 	adds.w	r3, r3, #4294967295
 8002d3c:	d313      	bcc.n	8002d66 <SDMMC_CmdReadSingleBlock+0x5a>
    sta_reg = SDIOx->STA;
 8002d3e:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8002d40:	f012 0f45 	tst.w	r2, #69	; 0x45
 8002d44:	d0f8      	beq.n	8002d38 <SDMMC_CmdReadSingleBlock+0x2c>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002d46:	0511      	lsls	r1, r2, #20
 8002d48:	d4f6      	bmi.n	8002d38 <SDMMC_CmdReadSingleBlock+0x2c>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8002d4a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002d4c:	075a      	lsls	r2, r3, #29
 8002d4e:	d413      	bmi.n	8002d78 <SDMMC_CmdReadSingleBlock+0x6c>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8002d50:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002d52:	07db      	lsls	r3, r3, #31
 8002d54:	d40b      	bmi.n	8002d6e <SDMMC_CmdReadSingleBlock+0x62>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8002d56:	23c5      	movs	r3, #197	; 0xc5
 8002d58:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDIOx->RESPCMD);
 8002d5a:	6903      	ldr	r3, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b11      	cmp	r3, #17
 8002d60:	d00e      	beq.n	8002d80 <SDMMC_CmdReadSingleBlock+0x74>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8002d62:	2001      	movs	r0, #1
  return errorstate;
 8002d64:	e001      	b.n	8002d6a <SDMMC_CmdReadSingleBlock+0x5e>
      return SDMMC_ERROR_TIMEOUT;
 8002d66:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8002d6a:	bc10      	pop	{r4}
 8002d6c:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8002d6e:	2301      	movs	r3, #1
}
 8002d70:	bc10      	pop	{r4}
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8002d72:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8002d74:	4618      	mov	r0, r3
}
 8002d76:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8002d78:	2304      	movs	r3, #4
 8002d7a:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	e7f4      	b.n	8002d6a <SDMMC_CmdReadSingleBlock+0x5e>
}
 8002d80:	bc10      	pop	{r4}
 8002d82:	f7ff bed3 	b.w	8002b2c <SDMMC_GetCmdResp1.part.2>
 8002d86:	bf00      	nop
 8002d88:	20000000 	.word	0x20000000
 8002d8c:	10624dd3 	.word	0x10624dd3

08002d90 <SDMMC_CmdReadMultiBlock>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002d90:	f241 3388 	movw	r3, #5000	; 0x1388
 8002d94:	4a1d      	ldr	r2, [pc, #116]	; (8002e0c <SDMMC_CmdReadMultiBlock+0x7c>)
{
 8002d96:	b410      	push	{r4}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002d98:	6812      	ldr	r2, [r2, #0]
 8002d9a:	4c1d      	ldr	r4, [pc, #116]	; (8002e10 <SDMMC_CmdReadMultiBlock+0x80>)
  SDIOx->ARG = Command->Argument;
 8002d9c:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002d9e:	fba4 2102 	umull	r2, r1, r4, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8002da2:	68c2      	ldr	r2, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002da4:	0a49      	lsrs	r1, r1, #9
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8002da6:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8002daa:	f022 020f 	bic.w	r2, r2, #15
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002dae:	fb03 f301 	mul.w	r3, r3, r1
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8002db2:	f442 628a 	orr.w	r2, r2, #1104	; 0x450
 8002db6:	f042 0202 	orr.w	r2, r2, #2
 8002dba:	60c2      	str	r2, [r0, #12]
    if (count-- == 0U)
 8002dbc:	f113 33ff 	adds.w	r3, r3, #4294967295
 8002dc0:	d313      	bcc.n	8002dea <SDMMC_CmdReadMultiBlock+0x5a>
    sta_reg = SDIOx->STA;
 8002dc2:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8002dc4:	f012 0f45 	tst.w	r2, #69	; 0x45
 8002dc8:	d0f8      	beq.n	8002dbc <SDMMC_CmdReadMultiBlock+0x2c>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002dca:	0511      	lsls	r1, r2, #20
 8002dcc:	d4f6      	bmi.n	8002dbc <SDMMC_CmdReadMultiBlock+0x2c>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8002dce:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002dd0:	075a      	lsls	r2, r3, #29
 8002dd2:	d413      	bmi.n	8002dfc <SDMMC_CmdReadMultiBlock+0x6c>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8002dd4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002dd6:	07db      	lsls	r3, r3, #31
 8002dd8:	d40b      	bmi.n	8002df2 <SDMMC_CmdReadMultiBlock+0x62>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8002dda:	23c5      	movs	r3, #197	; 0xc5
 8002ddc:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDIOx->RESPCMD);
 8002dde:	6903      	ldr	r3, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	2b12      	cmp	r3, #18
 8002de4:	d00e      	beq.n	8002e04 <SDMMC_CmdReadMultiBlock+0x74>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8002de6:	2001      	movs	r0, #1
  return errorstate;
 8002de8:	e001      	b.n	8002dee <SDMMC_CmdReadMultiBlock+0x5e>
      return SDMMC_ERROR_TIMEOUT;
 8002dea:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8002dee:	bc10      	pop	{r4}
 8002df0:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8002df2:	2301      	movs	r3, #1
}
 8002df4:	bc10      	pop	{r4}
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8002df6:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8002df8:	4618      	mov	r0, r3
}
 8002dfa:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8002dfc:	2304      	movs	r3, #4
 8002dfe:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8002e00:	4618      	mov	r0, r3
 8002e02:	e7f4      	b.n	8002dee <SDMMC_CmdReadMultiBlock+0x5e>
}
 8002e04:	bc10      	pop	{r4}
 8002e06:	f7ff be91 	b.w	8002b2c <SDMMC_GetCmdResp1.part.2>
 8002e0a:	bf00      	nop
 8002e0c:	20000000 	.word	0x20000000
 8002e10:	10624dd3 	.word	0x10624dd3

08002e14 <SDMMC_CmdWriteSingleBlock>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002e14:	f241 3388 	movw	r3, #5000	; 0x1388
 8002e18:	4a1c      	ldr	r2, [pc, #112]	; (8002e8c <SDMMC_CmdWriteSingleBlock+0x78>)
{
 8002e1a:	b410      	push	{r4}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002e1c:	6812      	ldr	r2, [r2, #0]
 8002e1e:	4c1c      	ldr	r4, [pc, #112]	; (8002e90 <SDMMC_CmdWriteSingleBlock+0x7c>)
  SDIOx->ARG = Command->Argument;
 8002e20:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002e22:	fba4 2102 	umull	r2, r1, r4, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8002e26:	68c2      	ldr	r2, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002e28:	0a49      	lsrs	r1, r1, #9
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8002e2a:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002e2e:	fb03 f301 	mul.w	r3, r3, r1
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8002e32:	f022 020f 	bic.w	r2, r2, #15
 8002e36:	f442 628b 	orr.w	r2, r2, #1112	; 0x458
 8002e3a:	60c2      	str	r2, [r0, #12]
    if (count-- == 0U)
 8002e3c:	f113 33ff 	adds.w	r3, r3, #4294967295
 8002e40:	d313      	bcc.n	8002e6a <SDMMC_CmdWriteSingleBlock+0x56>
    sta_reg = SDIOx->STA;
 8002e42:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8002e44:	f012 0f45 	tst.w	r2, #69	; 0x45
 8002e48:	d0f8      	beq.n	8002e3c <SDMMC_CmdWriteSingleBlock+0x28>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002e4a:	0511      	lsls	r1, r2, #20
 8002e4c:	d4f6      	bmi.n	8002e3c <SDMMC_CmdWriteSingleBlock+0x28>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8002e4e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002e50:	075a      	lsls	r2, r3, #29
 8002e52:	d413      	bmi.n	8002e7c <SDMMC_CmdWriteSingleBlock+0x68>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8002e54:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002e56:	07db      	lsls	r3, r3, #31
 8002e58:	d40b      	bmi.n	8002e72 <SDMMC_CmdWriteSingleBlock+0x5e>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8002e5a:	23c5      	movs	r3, #197	; 0xc5
 8002e5c:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDIOx->RESPCMD);
 8002e5e:	6903      	ldr	r3, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b18      	cmp	r3, #24
 8002e64:	d00e      	beq.n	8002e84 <SDMMC_CmdWriteSingleBlock+0x70>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8002e66:	2001      	movs	r0, #1
  return errorstate;
 8002e68:	e001      	b.n	8002e6e <SDMMC_CmdWriteSingleBlock+0x5a>
      return SDMMC_ERROR_TIMEOUT;
 8002e6a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8002e6e:	bc10      	pop	{r4}
 8002e70:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8002e72:	2301      	movs	r3, #1
}
 8002e74:	bc10      	pop	{r4}
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8002e76:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8002e78:	4618      	mov	r0, r3
}
 8002e7a:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8002e7c:	2304      	movs	r3, #4
 8002e7e:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8002e80:	4618      	mov	r0, r3
 8002e82:	e7f4      	b.n	8002e6e <SDMMC_CmdWriteSingleBlock+0x5a>
}
 8002e84:	bc10      	pop	{r4}
 8002e86:	f7ff be51 	b.w	8002b2c <SDMMC_GetCmdResp1.part.2>
 8002e8a:	bf00      	nop
 8002e8c:	20000000 	.word	0x20000000
 8002e90:	10624dd3 	.word	0x10624dd3

08002e94 <SDMMC_CmdWriteMultiBlock>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002e94:	f241 3388 	movw	r3, #5000	; 0x1388
 8002e98:	4a1d      	ldr	r2, [pc, #116]	; (8002f10 <SDMMC_CmdWriteMultiBlock+0x7c>)
{
 8002e9a:	b410      	push	{r4}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002e9c:	6812      	ldr	r2, [r2, #0]
 8002e9e:	4c1d      	ldr	r4, [pc, #116]	; (8002f14 <SDMMC_CmdWriteMultiBlock+0x80>)
  SDIOx->ARG = Command->Argument;
 8002ea0:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002ea2:	fba4 2102 	umull	r2, r1, r4, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8002ea6:	68c2      	ldr	r2, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002ea8:	0a49      	lsrs	r1, r1, #9
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8002eaa:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8002eae:	f022 020f 	bic.w	r2, r2, #15
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002eb2:	fb03 f301 	mul.w	r3, r3, r1
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8002eb6:	f442 628b 	orr.w	r2, r2, #1112	; 0x458
 8002eba:	f042 0201 	orr.w	r2, r2, #1
 8002ebe:	60c2      	str	r2, [r0, #12]
    if (count-- == 0U)
 8002ec0:	f113 33ff 	adds.w	r3, r3, #4294967295
 8002ec4:	d313      	bcc.n	8002eee <SDMMC_CmdWriteMultiBlock+0x5a>
    sta_reg = SDIOx->STA;
 8002ec6:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8002ec8:	f012 0f45 	tst.w	r2, #69	; 0x45
 8002ecc:	d0f8      	beq.n	8002ec0 <SDMMC_CmdWriteMultiBlock+0x2c>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002ece:	0511      	lsls	r1, r2, #20
 8002ed0:	d4f6      	bmi.n	8002ec0 <SDMMC_CmdWriteMultiBlock+0x2c>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8002ed2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002ed4:	075a      	lsls	r2, r3, #29
 8002ed6:	d413      	bmi.n	8002f00 <SDMMC_CmdWriteMultiBlock+0x6c>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8002ed8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002eda:	07db      	lsls	r3, r3, #31
 8002edc:	d40b      	bmi.n	8002ef6 <SDMMC_CmdWriteMultiBlock+0x62>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8002ede:	23c5      	movs	r3, #197	; 0xc5
 8002ee0:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDIOx->RESPCMD);
 8002ee2:	6903      	ldr	r3, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b19      	cmp	r3, #25
 8002ee8:	d00e      	beq.n	8002f08 <SDMMC_CmdWriteMultiBlock+0x74>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8002eea:	2001      	movs	r0, #1
  return errorstate;
 8002eec:	e001      	b.n	8002ef2 <SDMMC_CmdWriteMultiBlock+0x5e>
      return SDMMC_ERROR_TIMEOUT;
 8002eee:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8002ef2:	bc10      	pop	{r4}
 8002ef4:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8002ef6:	2301      	movs	r3, #1
}
 8002ef8:	bc10      	pop	{r4}
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8002efa:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8002efc:	4618      	mov	r0, r3
}
 8002efe:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8002f00:	2304      	movs	r3, #4
 8002f02:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8002f04:	4618      	mov	r0, r3
 8002f06:	e7f4      	b.n	8002ef2 <SDMMC_CmdWriteMultiBlock+0x5e>
}
 8002f08:	bc10      	pop	{r4}
 8002f0a:	f7ff be0f 	b.w	8002b2c <SDMMC_GetCmdResp1.part.2>
 8002f0e:	bf00      	nop
 8002f10:	20000000 	.word	0x20000000
 8002f14:	10624dd3 	.word	0x10624dd3

08002f18 <SDMMC_CmdStopTransfer>:
  SDIOx->ARG = Command->Argument;
 8002f18:	2200      	movs	r2, #0
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002f1a:	4b1b      	ldr	r3, [pc, #108]	; (8002f88 <SDMMC_CmdStopTransfer+0x70>)
  SDIOx->ARG = Command->Argument;
 8002f1c:	6082      	str	r2, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002f1e:	6819      	ldr	r1, [r3, #0]
 8002f20:	4b1a      	ldr	r3, [pc, #104]	; (8002f8c <SDMMC_CmdStopTransfer+0x74>)
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8002f22:	68c2      	ldr	r2, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002f24:	fba3 3101 	umull	r3, r1, r3, r1
 8002f28:	4b19      	ldr	r3, [pc, #100]	; (8002f90 <SDMMC_CmdStopTransfer+0x78>)
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8002f2a:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002f2e:	0a49      	lsrs	r1, r1, #9
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8002f30:	f022 020f 	bic.w	r2, r2, #15
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002f34:	fb03 f301 	mul.w	r3, r3, r1
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8002f38:	f442 6289 	orr.w	r2, r2, #1096	; 0x448
 8002f3c:	f042 0204 	orr.w	r2, r2, #4
 8002f40:	60c2      	str	r2, [r0, #12]
    if (count-- == 0U)
 8002f42:	b1a3      	cbz	r3, 8002f6e <SDMMC_CmdStopTransfer+0x56>
    sta_reg = SDIOx->STA;
 8002f44:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8002f46:	3b01      	subs	r3, #1
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8002f48:	f012 0f45 	tst.w	r2, #69	; 0x45
 8002f4c:	d0f9      	beq.n	8002f42 <SDMMC_CmdStopTransfer+0x2a>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002f4e:	0511      	lsls	r1, r2, #20
 8002f50:	d4f7      	bmi.n	8002f42 <SDMMC_CmdStopTransfer+0x2a>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8002f52:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002f54:	075a      	lsls	r2, r3, #29
 8002f56:	d411      	bmi.n	8002f7c <SDMMC_CmdStopTransfer+0x64>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8002f58:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002f5a:	07db      	lsls	r3, r3, #31
 8002f5c:	d40a      	bmi.n	8002f74 <SDMMC_CmdStopTransfer+0x5c>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8002f5e:	23c5      	movs	r3, #197	; 0xc5
 8002f60:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDIOx->RESPCMD);
 8002f62:	6903      	ldr	r3, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	2b0c      	cmp	r3, #12
 8002f68:	d00c      	beq.n	8002f84 <SDMMC_CmdStopTransfer+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8002f6a:	2001      	movs	r0, #1
}
 8002f6c:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8002f6e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8002f72:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8002f74:	2301      	movs	r3, #1
 8002f76:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8002f78:	4618      	mov	r0, r3
 8002f7a:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8002f7c:	2304      	movs	r3, #4
 8002f7e:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8002f80:	4618      	mov	r0, r3
 8002f82:	4770      	bx	lr
 8002f84:	f7ff bdd2 	b.w	8002b2c <SDMMC_GetCmdResp1.part.2>
 8002f88:	20000000 	.word	0x20000000
 8002f8c:	10624dd3 	.word	0x10624dd3
 8002f90:	05f5e100 	.word	0x05f5e100

08002f94 <SDMMC_CmdSelDesel>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002f94:	f241 3388 	movw	r3, #5000	; 0x1388
 8002f98:	491d      	ldr	r1, [pc, #116]	; (8003010 <SDMMC_CmdSelDesel+0x7c>)
{
 8002f9a:	b410      	push	{r4}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002f9c:	6809      	ldr	r1, [r1, #0]
 8002f9e:	4c1d      	ldr	r4, [pc, #116]	; (8003014 <SDMMC_CmdSelDesel+0x80>)
  SDIOx->ARG = Command->Argument;
 8002fa0:	6082      	str	r2, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002fa2:	fba4 2101 	umull	r2, r1, r4, r1
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8002fa6:	68c2      	ldr	r2, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002fa8:	0a49      	lsrs	r1, r1, #9
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8002faa:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8002fae:	f022 020f 	bic.w	r2, r2, #15
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002fb2:	fb03 f301 	mul.w	r3, r3, r1
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8002fb6:	f442 6288 	orr.w	r2, r2, #1088	; 0x440
 8002fba:	f042 0207 	orr.w	r2, r2, #7
 8002fbe:	60c2      	str	r2, [r0, #12]
    if (count-- == 0U)
 8002fc0:	f113 33ff 	adds.w	r3, r3, #4294967295
 8002fc4:	d313      	bcc.n	8002fee <SDMMC_CmdSelDesel+0x5a>
    sta_reg = SDIOx->STA;
 8002fc6:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8002fc8:	f012 0f45 	tst.w	r2, #69	; 0x45
 8002fcc:	d0f8      	beq.n	8002fc0 <SDMMC_CmdSelDesel+0x2c>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002fce:	0511      	lsls	r1, r2, #20
 8002fd0:	d4f6      	bmi.n	8002fc0 <SDMMC_CmdSelDesel+0x2c>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8002fd2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002fd4:	075a      	lsls	r2, r3, #29
 8002fd6:	d413      	bmi.n	8003000 <SDMMC_CmdSelDesel+0x6c>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8002fd8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002fda:	07db      	lsls	r3, r3, #31
 8002fdc:	d40b      	bmi.n	8002ff6 <SDMMC_CmdSelDesel+0x62>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8002fde:	23c5      	movs	r3, #197	; 0xc5
 8002fe0:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDIOx->RESPCMD);
 8002fe2:	6903      	ldr	r3, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b07      	cmp	r3, #7
 8002fe8:	d00e      	beq.n	8003008 <SDMMC_CmdSelDesel+0x74>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8002fea:	2001      	movs	r0, #1
  return errorstate;
 8002fec:	e001      	b.n	8002ff2 <SDMMC_CmdSelDesel+0x5e>
      return SDMMC_ERROR_TIMEOUT;
 8002fee:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8002ff2:	bc10      	pop	{r4}
 8002ff4:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8002ff6:	2301      	movs	r3, #1
}
 8002ff8:	bc10      	pop	{r4}
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8002ffa:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8002ffc:	4618      	mov	r0, r3
}
 8002ffe:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003000:	2304      	movs	r3, #4
 8003002:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003004:	4618      	mov	r0, r3
 8003006:	e7f4      	b.n	8002ff2 <SDMMC_CmdSelDesel+0x5e>
}
 8003008:	bc10      	pop	{r4}
 800300a:	f7ff bd8f 	b.w	8002b2c <SDMMC_GetCmdResp1.part.2>
 800300e:	bf00      	nop
 8003010:	20000000 	.word	0x20000000
 8003014:	10624dd3 	.word	0x10624dd3

08003018 <SDMMC_CmdGoIdleState>:
{
 8003018:	4601      	mov	r1, r0
 800301a:	b410      	push	{r4}
  SDIOx->ARG = Command->Argument;
 800301c:	2400      	movs	r4, #0
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800301e:	f241 3388 	movw	r3, #5000	; 0x1388
 8003022:	4810      	ldr	r0, [pc, #64]	; (8003064 <SDMMC_CmdGoIdleState+0x4c>)
 8003024:	4a10      	ldr	r2, [pc, #64]	; (8003068 <SDMMC_CmdGoIdleState+0x50>)
 8003026:	6800      	ldr	r0, [r0, #0]
  SDIOx->ARG = Command->Argument;
 8003028:	608c      	str	r4, [r1, #8]
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800302a:	fba2 2000 	umull	r2, r0, r2, r0
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800302e:	68ca      	ldr	r2, [r1, #12]
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003030:	0a40      	lsrs	r0, r0, #9
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003032:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8003036:	f022 020f 	bic.w	r2, r2, #15
 800303a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800303e:	fb03 f300 	mul.w	r3, r3, r0
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003042:	60ca      	str	r2, [r1, #12]
 8003044:	e002      	b.n	800304c <SDMMC_CmdGoIdleState+0x34>
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8003046:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8003048:	0612      	lsls	r2, r2, #24
 800304a:	d406      	bmi.n	800305a <SDMMC_CmdGoIdleState+0x42>
    if (count-- == 0U)
 800304c:	f113 33ff 	adds.w	r3, r3, #4294967295
 8003050:	d2f9      	bcs.n	8003046 <SDMMC_CmdGoIdleState+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 8003052:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8003056:	bc10      	pop	{r4}
 8003058:	4770      	bx	lr
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800305a:	23c5      	movs	r3, #197	; 0xc5
  return SDMMC_ERROR_NONE;
 800305c:	2000      	movs	r0, #0
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800305e:	638b      	str	r3, [r1, #56]	; 0x38
}
 8003060:	bc10      	pop	{r4}
 8003062:	4770      	bx	lr
 8003064:	20000000 	.word	0x20000000
 8003068:	10624dd3 	.word	0x10624dd3

0800306c <SDMMC_CmdOperCond>:
{
 800306c:	4601      	mov	r1, r0
 800306e:	b410      	push	{r4}
  SDIOx->ARG = Command->Argument;
 8003070:	f44f 74d5 	mov.w	r4, #426	; 0x1aa
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003074:	f241 3388 	movw	r3, #5000	; 0x1388
 8003078:	481a      	ldr	r0, [pc, #104]	; (80030e4 <SDMMC_CmdOperCond+0x78>)
 800307a:	4a1b      	ldr	r2, [pc, #108]	; (80030e8 <SDMMC_CmdOperCond+0x7c>)
 800307c:	6800      	ldr	r0, [r0, #0]
  SDIOx->ARG = Command->Argument;
 800307e:	608c      	str	r4, [r1, #8]
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003080:	fba2 2000 	umull	r2, r0, r2, r0
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003084:	68ca      	ldr	r2, [r1, #12]
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003086:	0a40      	lsrs	r0, r0, #9
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003088:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800308c:	fb03 f300 	mul.w	r3, r3, r0
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003090:	f022 020f 	bic.w	r2, r2, #15
 8003094:	f442 6289 	orr.w	r2, r2, #1096	; 0x448
 8003098:	60ca      	str	r2, [r1, #12]
  
  do
  {
    if (count-- == 0U)
 800309a:	f113 33ff 	adds.w	r3, r3, #4294967295
 800309e:	d313      	bcc.n	80030c8 <SDMMC_CmdOperCond+0x5c>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDIOx->STA;
 80030a0:	6b4a      	ldr	r2, [r1, #52]	; 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80030a2:	f012 0f45 	tst.w	r2, #69	; 0x45
 80030a6:	d0f8      	beq.n	800309a <SDMMC_CmdOperCond+0x2e>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80030a8:	0512      	lsls	r2, r2, #20
 80030aa:	d4f6      	bmi.n	800309a <SDMMC_CmdOperCond+0x2e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80030ac:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80030ae:	075b      	lsls	r3, r3, #29
 80030b0:	d412      	bmi.n	80030d8 <SDMMC_CmdOperCond+0x6c>
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80030b2:	6b48      	ldr	r0, [r1, #52]	; 0x34
 80030b4:	f010 0001 	ands.w	r0, r0, #1
 80030b8:	d10a      	bne.n	80030d0 <SDMMC_CmdOperCond+0x64>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80030ba:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80030bc:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 80030c0:	d00d      	beq.n	80030de <SDMMC_CmdOperCond+0x72>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80030c2:	2340      	movs	r3, #64	; 0x40
 80030c4:	638b      	str	r3, [r1, #56]	; 0x38
 80030c6:	e001      	b.n	80030cc <SDMMC_CmdOperCond+0x60>
      return SDMMC_ERROR_TIMEOUT;
 80030c8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80030cc:	bc10      	pop	{r4}
 80030ce:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80030d0:	2001      	movs	r0, #1
 80030d2:	6388      	str	r0, [r1, #56]	; 0x38
}
 80030d4:	bc10      	pop	{r4}
 80030d6:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80030d8:	2004      	movs	r0, #4
 80030da:	6388      	str	r0, [r1, #56]	; 0x38
 80030dc:	e7f6      	b.n	80030cc <SDMMC_CmdOperCond+0x60>
  }
  
  return SDMMC_ERROR_NONE;
 80030de:	4618      	mov	r0, r3
  return errorstate;
 80030e0:	e7f4      	b.n	80030cc <SDMMC_CmdOperCond+0x60>
 80030e2:	bf00      	nop
 80030e4:	20000000 	.word	0x20000000
 80030e8:	10624dd3 	.word	0x10624dd3

080030ec <SDMMC_CmdAppCommand>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80030ec:	f241 3388 	movw	r3, #5000	; 0x1388
 80030f0:	4a1d      	ldr	r2, [pc, #116]	; (8003168 <SDMMC_CmdAppCommand+0x7c>)
{
 80030f2:	b410      	push	{r4}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80030f4:	6812      	ldr	r2, [r2, #0]
 80030f6:	4c1d      	ldr	r4, [pc, #116]	; (800316c <SDMMC_CmdAppCommand+0x80>)
  SDIOx->ARG = Command->Argument;
 80030f8:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80030fa:	fba4 2102 	umull	r2, r1, r4, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80030fe:	68c2      	ldr	r2, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003100:	0a49      	lsrs	r1, r1, #9
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003102:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8003106:	f022 020f 	bic.w	r2, r2, #15
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800310a:	fb03 f301 	mul.w	r3, r3, r1
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800310e:	f442 628e 	orr.w	r2, r2, #1136	; 0x470
 8003112:	f042 0207 	orr.w	r2, r2, #7
 8003116:	60c2      	str	r2, [r0, #12]
    if (count-- == 0U)
 8003118:	f113 33ff 	adds.w	r3, r3, #4294967295
 800311c:	d313      	bcc.n	8003146 <SDMMC_CmdAppCommand+0x5a>
    sta_reg = SDIOx->STA;
 800311e:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003120:	f012 0f45 	tst.w	r2, #69	; 0x45
 8003124:	d0f8      	beq.n	8003118 <SDMMC_CmdAppCommand+0x2c>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003126:	0511      	lsls	r1, r2, #20
 8003128:	d4f6      	bmi.n	8003118 <SDMMC_CmdAppCommand+0x2c>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800312a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800312c:	075a      	lsls	r2, r3, #29
 800312e:	d413      	bmi.n	8003158 <SDMMC_CmdAppCommand+0x6c>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003130:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003132:	07db      	lsls	r3, r3, #31
 8003134:	d40b      	bmi.n	800314e <SDMMC_CmdAppCommand+0x62>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003136:	23c5      	movs	r3, #197	; 0xc5
 8003138:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDIOx->RESPCMD);
 800313a:	6903      	ldr	r3, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b37      	cmp	r3, #55	; 0x37
 8003140:	d00e      	beq.n	8003160 <SDMMC_CmdAppCommand+0x74>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003142:	2001      	movs	r0, #1
  return errorstate;
 8003144:	e001      	b.n	800314a <SDMMC_CmdAppCommand+0x5e>
      return SDMMC_ERROR_TIMEOUT;
 8003146:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800314a:	bc10      	pop	{r4}
 800314c:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800314e:	2301      	movs	r3, #1
}
 8003150:	bc10      	pop	{r4}
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003152:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003154:	4618      	mov	r0, r3
}
 8003156:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003158:	2304      	movs	r3, #4
 800315a:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800315c:	4618      	mov	r0, r3
 800315e:	e7f4      	b.n	800314a <SDMMC_CmdAppCommand+0x5e>
}
 8003160:	bc10      	pop	{r4}
 8003162:	f7ff bce3 	b.w	8002b2c <SDMMC_GetCmdResp1.part.2>
 8003166:	bf00      	nop
 8003168:	20000000 	.word	0x20000000
 800316c:	10624dd3 	.word	0x10624dd3

08003170 <SDMMC_CmdAppOperCommand>:
{
 8003170:	b430      	push	{r4, r5}
 8003172:	4604      	mov	r4, r0
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003174:	f241 3388 	movw	r3, #5000	; 0x1388
 8003178:	4a16      	ldr	r2, [pc, #88]	; (80031d4 <SDMMC_CmdAppOperCommand+0x64>)
 800317a:	4d17      	ldr	r5, [pc, #92]	; (80031d8 <SDMMC_CmdAppOperCommand+0x68>)
 800317c:	6812      	ldr	r2, [r2, #0]
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800317e:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8003182:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003186:	fba5 2102 	umull	r2, r1, r5, r2
  SDIOx->ARG = Command->Argument;
 800318a:	60a0      	str	r0, [r4, #8]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800318c:	68e2      	ldr	r2, [r4, #12]
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800318e:	0a49      	lsrs	r1, r1, #9
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003190:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8003194:	f022 020f 	bic.w	r2, r2, #15
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003198:	fb03 f301 	mul.w	r3, r3, r1
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800319c:	f442 628d 	orr.w	r2, r2, #1128	; 0x468
 80031a0:	f042 0201 	orr.w	r2, r2, #1
 80031a4:	60e2      	str	r2, [r4, #12]
    if (count-- == 0U)
 80031a6:	f113 33ff 	adds.w	r3, r3, #4294967295
 80031aa:	d30f      	bcc.n	80031cc <SDMMC_CmdAppOperCommand+0x5c>
    sta_reg = SDIOx->STA;
 80031ac:	6b62      	ldr	r2, [r4, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80031ae:	f012 0f45 	tst.w	r2, #69	; 0x45
 80031b2:	d0f8      	beq.n	80031a6 <SDMMC_CmdAppOperCommand+0x36>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80031b4:	0512      	lsls	r2, r2, #20
 80031b6:	d4f6      	bmi.n	80031a6 <SDMMC_CmdAppOperCommand+0x36>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80031b8:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80031ba:	f010 0004 	ands.w	r0, r0, #4
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80031be:	bf15      	itete	ne
 80031c0:	2004      	movne	r0, #4
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80031c2:	23c5      	moveq	r3, #197	; 0xc5
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80031c4:	63a0      	strne	r0, [r4, #56]	; 0x38
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80031c6:	63a3      	streq	r3, [r4, #56]	; 0x38
}
 80031c8:	bc30      	pop	{r4, r5}
 80031ca:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 80031cc:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80031d0:	bc30      	pop	{r4, r5}
 80031d2:	4770      	bx	lr
 80031d4:	20000000 	.word	0x20000000
 80031d8:	10624dd3 	.word	0x10624dd3

080031dc <SDMMC_CmdBusWidth>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80031dc:	f241 3388 	movw	r3, #5000	; 0x1388
 80031e0:	4a1d      	ldr	r2, [pc, #116]	; (8003258 <SDMMC_CmdBusWidth+0x7c>)
{
 80031e2:	b410      	push	{r4}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80031e4:	6812      	ldr	r2, [r2, #0]
 80031e6:	4c1d      	ldr	r4, [pc, #116]	; (800325c <SDMMC_CmdBusWidth+0x80>)
  SDIOx->ARG = Command->Argument;
 80031e8:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80031ea:	fba4 2102 	umull	r2, r1, r4, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80031ee:	68c2      	ldr	r2, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80031f0:	0a49      	lsrs	r1, r1, #9
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80031f2:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 80031f6:	f022 020f 	bic.w	r2, r2, #15
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80031fa:	fb03 f301 	mul.w	r3, r3, r1
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80031fe:	f442 6288 	orr.w	r2, r2, #1088	; 0x440
 8003202:	f042 0206 	orr.w	r2, r2, #6
 8003206:	60c2      	str	r2, [r0, #12]
    if (count-- == 0U)
 8003208:	f113 33ff 	adds.w	r3, r3, #4294967295
 800320c:	d313      	bcc.n	8003236 <SDMMC_CmdBusWidth+0x5a>
    sta_reg = SDIOx->STA;
 800320e:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003210:	f012 0f45 	tst.w	r2, #69	; 0x45
 8003214:	d0f8      	beq.n	8003208 <SDMMC_CmdBusWidth+0x2c>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003216:	0511      	lsls	r1, r2, #20
 8003218:	d4f6      	bmi.n	8003208 <SDMMC_CmdBusWidth+0x2c>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800321a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800321c:	075a      	lsls	r2, r3, #29
 800321e:	d413      	bmi.n	8003248 <SDMMC_CmdBusWidth+0x6c>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003220:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003222:	07db      	lsls	r3, r3, #31
 8003224:	d40b      	bmi.n	800323e <SDMMC_CmdBusWidth+0x62>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003226:	23c5      	movs	r3, #197	; 0xc5
 8003228:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDIOx->RESPCMD);
 800322a:	6903      	ldr	r3, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800322c:	b2db      	uxtb	r3, r3
 800322e:	2b06      	cmp	r3, #6
 8003230:	d00e      	beq.n	8003250 <SDMMC_CmdBusWidth+0x74>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003232:	2001      	movs	r0, #1
  return errorstate;
 8003234:	e001      	b.n	800323a <SDMMC_CmdBusWidth+0x5e>
      return SDMMC_ERROR_TIMEOUT;
 8003236:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800323a:	bc10      	pop	{r4}
 800323c:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800323e:	2301      	movs	r3, #1
}
 8003240:	bc10      	pop	{r4}
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003242:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003244:	4618      	mov	r0, r3
}
 8003246:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003248:	2304      	movs	r3, #4
 800324a:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800324c:	4618      	mov	r0, r3
 800324e:	e7f4      	b.n	800323a <SDMMC_CmdBusWidth+0x5e>
}
 8003250:	bc10      	pop	{r4}
 8003252:	f7ff bc6b 	b.w	8002b2c <SDMMC_GetCmdResp1.part.2>
 8003256:	bf00      	nop
 8003258:	20000000 	.word	0x20000000
 800325c:	10624dd3 	.word	0x10624dd3

08003260 <SDMMC_CmdSendSCR>:
{
 8003260:	b410      	push	{r4}
  SDIOx->ARG = Command->Argument;
 8003262:	2400      	movs	r4, #0
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003264:	f241 3388 	movw	r3, #5000	; 0x1388
 8003268:	491c      	ldr	r1, [pc, #112]	; (80032dc <SDMMC_CmdSendSCR+0x7c>)
 800326a:	4a1d      	ldr	r2, [pc, #116]	; (80032e0 <SDMMC_CmdSendSCR+0x80>)
 800326c:	6809      	ldr	r1, [r1, #0]
  SDIOx->ARG = Command->Argument;
 800326e:	6084      	str	r4, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003270:	fba2 2101 	umull	r2, r1, r2, r1
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003274:	68c2      	ldr	r2, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003276:	0a49      	lsrs	r1, r1, #9
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003278:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 800327c:	f022 020f 	bic.w	r2, r2, #15
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003280:	fb03 f301 	mul.w	r3, r3, r1
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003284:	f442 628e 	orr.w	r2, r2, #1136	; 0x470
 8003288:	f042 0203 	orr.w	r2, r2, #3
 800328c:	60c2      	str	r2, [r0, #12]
    if (count-- == 0U)
 800328e:	f113 33ff 	adds.w	r3, r3, #4294967295
 8003292:	d313      	bcc.n	80032bc <SDMMC_CmdSendSCR+0x5c>
    sta_reg = SDIOx->STA;
 8003294:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003296:	f012 0f45 	tst.w	r2, #69	; 0x45
 800329a:	d0f8      	beq.n	800328e <SDMMC_CmdSendSCR+0x2e>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800329c:	0511      	lsls	r1, r2, #20
 800329e:	d4f6      	bmi.n	800328e <SDMMC_CmdSendSCR+0x2e>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80032a0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80032a2:	075a      	lsls	r2, r3, #29
 80032a4:	d413      	bmi.n	80032ce <SDMMC_CmdSendSCR+0x6e>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80032a6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80032a8:	07db      	lsls	r3, r3, #31
 80032aa:	d40b      	bmi.n	80032c4 <SDMMC_CmdSendSCR+0x64>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80032ac:	23c5      	movs	r3, #197	; 0xc5
 80032ae:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDIOx->RESPCMD);
 80032b0:	6903      	ldr	r3, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	2b33      	cmp	r3, #51	; 0x33
 80032b6:	d00e      	beq.n	80032d6 <SDMMC_CmdSendSCR+0x76>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80032b8:	2001      	movs	r0, #1
  return errorstate;
 80032ba:	e001      	b.n	80032c0 <SDMMC_CmdSendSCR+0x60>
      return SDMMC_ERROR_TIMEOUT;
 80032bc:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80032c0:	bc10      	pop	{r4}
 80032c2:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80032c4:	2301      	movs	r3, #1
}
 80032c6:	bc10      	pop	{r4}
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80032c8:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80032ca:	4618      	mov	r0, r3
}
 80032cc:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80032ce:	2304      	movs	r3, #4
 80032d0:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80032d2:	4618      	mov	r0, r3
 80032d4:	e7f4      	b.n	80032c0 <SDMMC_CmdSendSCR+0x60>
}
 80032d6:	bc10      	pop	{r4}
 80032d8:	f7ff bc28 	b.w	8002b2c <SDMMC_GetCmdResp1.part.2>
 80032dc:	20000000 	.word	0x20000000
 80032e0:	10624dd3 	.word	0x10624dd3

080032e4 <SDMMC_CmdSendCID>:
{
 80032e4:	4601      	mov	r1, r0
 80032e6:	b410      	push	{r4}
  SDIOx->ARG = Command->Argument;
 80032e8:	2400      	movs	r4, #0
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80032ea:	f241 3388 	movw	r3, #5000	; 0x1388
 80032ee:	4818      	ldr	r0, [pc, #96]	; (8003350 <SDMMC_CmdSendCID+0x6c>)
 80032f0:	4a18      	ldr	r2, [pc, #96]	; (8003354 <SDMMC_CmdSendCID+0x70>)
 80032f2:	6800      	ldr	r0, [r0, #0]
  SDIOx->ARG = Command->Argument;
 80032f4:	608c      	str	r4, [r1, #8]
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80032f6:	fba2 2000 	umull	r2, r0, r2, r0
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80032fa:	68ca      	ldr	r2, [r1, #12]
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80032fc:	0a40      	lsrs	r0, r0, #9
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80032fe:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8003302:	f022 020f 	bic.w	r2, r2, #15
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003306:	fb03 f300 	mul.w	r3, r3, r0
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800330a:	f442 6298 	orr.w	r2, r2, #1216	; 0x4c0
 800330e:	f042 0202 	orr.w	r2, r2, #2
 8003312:	60ca      	str	r2, [r1, #12]
    if (count-- == 0U)
 8003314:	f113 33ff 	adds.w	r3, r3, #4294967295
 8003318:	d312      	bcc.n	8003340 <SDMMC_CmdSendCID+0x5c>
    sta_reg = SDIOx->STA;
 800331a:	6b4a      	ldr	r2, [r1, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800331c:	f012 0f45 	tst.w	r2, #69	; 0x45
 8003320:	d0f8      	beq.n	8003314 <SDMMC_CmdSendCID+0x30>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003322:	0512      	lsls	r2, r2, #20
 8003324:	d4f6      	bmi.n	8003314 <SDMMC_CmdSendCID+0x30>
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003326:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8003328:	075b      	lsls	r3, r3, #29
 800332a:	d40d      	bmi.n	8003348 <SDMMC_CmdSendCID+0x64>
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800332c:	6b48      	ldr	r0, [r1, #52]	; 0x34
}
 800332e:	bc10      	pop	{r4}
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003330:	f010 0001 	ands.w	r0, r0, #1
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003334:	bf15      	itete	ne
 8003336:	2001      	movne	r0, #1
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003338:	23c5      	moveq	r3, #197	; 0xc5
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800333a:	6388      	strne	r0, [r1, #56]	; 0x38
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800333c:	638b      	streq	r3, [r1, #56]	; 0x38
}
 800333e:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8003340:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8003344:	bc10      	pop	{r4}
 8003346:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003348:	2004      	movs	r0, #4
 800334a:	6388      	str	r0, [r1, #56]	; 0x38
 800334c:	e7fa      	b.n	8003344 <SDMMC_CmdSendCID+0x60>
 800334e:	bf00      	nop
 8003350:	20000000 	.word	0x20000000
 8003354:	10624dd3 	.word	0x10624dd3

08003358 <SDMMC_CmdSendCSD>:
{
 8003358:	b410      	push	{r4}
 800335a:	4604      	mov	r4, r0
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800335c:	f241 3388 	movw	r3, #5000	; 0x1388
 8003360:	4a17      	ldr	r2, [pc, #92]	; (80033c0 <SDMMC_CmdSendCSD+0x68>)
 8003362:	4818      	ldr	r0, [pc, #96]	; (80033c4 <SDMMC_CmdSendCSD+0x6c>)
 8003364:	6812      	ldr	r2, [r2, #0]
  SDIOx->ARG = Command->Argument;
 8003366:	60a1      	str	r1, [r4, #8]
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003368:	fba0 2102 	umull	r2, r1, r0, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800336c:	68e2      	ldr	r2, [r4, #12]
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800336e:	0a49      	lsrs	r1, r1, #9
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003370:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8003374:	f022 020f 	bic.w	r2, r2, #15
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003378:	fb03 f301 	mul.w	r3, r3, r1
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800337c:	f442 6299 	orr.w	r2, r2, #1224	; 0x4c8
 8003380:	f042 0201 	orr.w	r2, r2, #1
 8003384:	60e2      	str	r2, [r4, #12]
    if (count-- == 0U)
 8003386:	f113 33ff 	adds.w	r3, r3, #4294967295
 800338a:	d312      	bcc.n	80033b2 <SDMMC_CmdSendCSD+0x5a>
    sta_reg = SDIOx->STA;
 800338c:	6b62      	ldr	r2, [r4, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800338e:	f012 0f45 	tst.w	r2, #69	; 0x45
 8003392:	d0f8      	beq.n	8003386 <SDMMC_CmdSendCSD+0x2e>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003394:	0512      	lsls	r2, r2, #20
 8003396:	d4f6      	bmi.n	8003386 <SDMMC_CmdSendCSD+0x2e>
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003398:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800339a:	075b      	lsls	r3, r3, #29
 800339c:	d40d      	bmi.n	80033ba <SDMMC_CmdSendCSD+0x62>
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800339e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80033a0:	f010 0001 	ands.w	r0, r0, #1
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80033a4:	bf15      	itete	ne
 80033a6:	2001      	movne	r0, #1
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80033a8:	23c5      	moveq	r3, #197	; 0xc5
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80033aa:	63a0      	strne	r0, [r4, #56]	; 0x38
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80033ac:	63a3      	streq	r3, [r4, #56]	; 0x38
}
 80033ae:	bc10      	pop	{r4}
 80033b0:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 80033b2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80033b6:	bc10      	pop	{r4}
 80033b8:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80033ba:	2004      	movs	r0, #4
 80033bc:	63a0      	str	r0, [r4, #56]	; 0x38
 80033be:	e7fa      	b.n	80033b6 <SDMMC_CmdSendCSD+0x5e>
 80033c0:	20000000 	.word	0x20000000
 80033c4:	10624dd3 	.word	0x10624dd3

080033c8 <SDMMC_CmdSetRelAdd>:
{
 80033c8:	b430      	push	{r4, r5}
  SDIOx->ARG = Command->Argument;
 80033ca:	2500      	movs	r5, #0
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80033cc:	f241 3388 	movw	r3, #5000	; 0x1388
 80033d0:	4c25      	ldr	r4, [pc, #148]	; (8003468 <SDMMC_CmdSetRelAdd+0xa0>)
 80033d2:	4a26      	ldr	r2, [pc, #152]	; (800346c <SDMMC_CmdSetRelAdd+0xa4>)
 80033d4:	6824      	ldr	r4, [r4, #0]
  SDIOx->ARG = Command->Argument;
 80033d6:	6085      	str	r5, [r0, #8]
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80033d8:	fba2 2404 	umull	r2, r4, r2, r4
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80033dc:	68c2      	ldr	r2, [r0, #12]
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80033de:	0a64      	lsrs	r4, r4, #9
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80033e0:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 80033e4:	f022 020f 	bic.w	r2, r2, #15
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80033e8:	fb03 f304 	mul.w	r3, r3, r4
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80033ec:	f442 6288 	orr.w	r2, r2, #1088	; 0x440
 80033f0:	f042 0203 	orr.w	r2, r2, #3
 80033f4:	60c2      	str	r2, [r0, #12]
    if (count-- == 0U)
 80033f6:	f113 33ff 	adds.w	r3, r3, #4294967295
 80033fa:	d311      	bcc.n	8003420 <SDMMC_CmdSetRelAdd+0x58>
    sta_reg = SDIOx->STA;
 80033fc:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80033fe:	f012 0f45 	tst.w	r2, #69	; 0x45
 8003402:	d0f8      	beq.n	80033f6 <SDMMC_CmdSetRelAdd+0x2e>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003404:	0512      	lsls	r2, r2, #20
 8003406:	d4f6      	bmi.n	80033f6 <SDMMC_CmdSetRelAdd+0x2e>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003408:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800340a:	075d      	lsls	r5, r3, #29
 800340c:	d411      	bmi.n	8003432 <SDMMC_CmdSetRelAdd+0x6a>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800340e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003410:	07dc      	lsls	r4, r3, #31
 8003412:	d409      	bmi.n	8003428 <SDMMC_CmdSetRelAdd+0x60>
  return (uint8_t)(SDIOx->RESPCMD);
 8003414:	6903      	ldr	r3, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8003416:	b2db      	uxtb	r3, r3
 8003418:	2b03      	cmp	r3, #3
 800341a:	d00e      	beq.n	800343a <SDMMC_CmdSetRelAdd+0x72>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800341c:	2001      	movs	r0, #1
 800341e:	e001      	b.n	8003424 <SDMMC_CmdSetRelAdd+0x5c>
      return SDMMC_ERROR_TIMEOUT;
 8003420:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8003424:	bc30      	pop	{r4, r5}
 8003426:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003428:	2301      	movs	r3, #1
}
 800342a:	bc30      	pop	{r4, r5}
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800342c:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800342e:	4618      	mov	r0, r3
}
 8003430:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003432:	2304      	movs	r3, #4
 8003434:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003436:	4618      	mov	r0, r3
 8003438:	e7f4      	b.n	8003424 <SDMMC_CmdSetRelAdd+0x5c>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800343a:	23c5      	movs	r3, #197	; 0xc5
 800343c:	6383      	str	r3, [r0, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 800343e:	6943      	ldr	r3, [r0, #20]
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8003440:	f413 4060 	ands.w	r0, r3, #57344	; 0xe000
 8003444:	d009      	beq.n	800345a <SDMMC_CmdSetRelAdd+0x92>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8003446:	045a      	lsls	r2, r3, #17
 8003448:	d40a      	bmi.n	8003460 <SDMMC_CmdSetRelAdd+0x98>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800344a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800344e:	bf0c      	ite	eq
 8003450:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8003454:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 8003458:	e7e4      	b.n	8003424 <SDMMC_CmdSetRelAdd+0x5c>
    *pRCA = (uint16_t) (response_r1 >> 16);
 800345a:	0c1b      	lsrs	r3, r3, #16
 800345c:	800b      	strh	r3, [r1, #0]
 800345e:	e7e1      	b.n	8003424 <SDMMC_CmdSetRelAdd+0x5c>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003460:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003464:	e7de      	b.n	8003424 <SDMMC_CmdSetRelAdd+0x5c>
 8003466:	bf00      	nop
 8003468:	20000000 	.word	0x20000000
 800346c:	10624dd3 	.word	0x10624dd3

08003470 <SDMMC_CmdSendStatus>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003470:	f241 3388 	movw	r3, #5000	; 0x1388
 8003474:	4a1d      	ldr	r2, [pc, #116]	; (80034ec <SDMMC_CmdSendStatus+0x7c>)
{
 8003476:	b410      	push	{r4}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003478:	6812      	ldr	r2, [r2, #0]
 800347a:	4c1d      	ldr	r4, [pc, #116]	; (80034f0 <SDMMC_CmdSendStatus+0x80>)
  SDIOx->ARG = Command->Argument;
 800347c:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800347e:	fba4 2102 	umull	r2, r1, r4, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003482:	68c2      	ldr	r2, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003484:	0a49      	lsrs	r1, r1, #9
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003486:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 800348a:	f022 020f 	bic.w	r2, r2, #15
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800348e:	fb03 f301 	mul.w	r3, r3, r1
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003492:	f442 6289 	orr.w	r2, r2, #1096	; 0x448
 8003496:	f042 0205 	orr.w	r2, r2, #5
 800349a:	60c2      	str	r2, [r0, #12]
    if (count-- == 0U)
 800349c:	f113 33ff 	adds.w	r3, r3, #4294967295
 80034a0:	d313      	bcc.n	80034ca <SDMMC_CmdSendStatus+0x5a>
    sta_reg = SDIOx->STA;
 80034a2:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80034a4:	f012 0f45 	tst.w	r2, #69	; 0x45
 80034a8:	d0f8      	beq.n	800349c <SDMMC_CmdSendStatus+0x2c>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80034aa:	0511      	lsls	r1, r2, #20
 80034ac:	d4f6      	bmi.n	800349c <SDMMC_CmdSendStatus+0x2c>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80034ae:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80034b0:	075a      	lsls	r2, r3, #29
 80034b2:	d413      	bmi.n	80034dc <SDMMC_CmdSendStatus+0x6c>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80034b4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80034b6:	07db      	lsls	r3, r3, #31
 80034b8:	d40b      	bmi.n	80034d2 <SDMMC_CmdSendStatus+0x62>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80034ba:	23c5      	movs	r3, #197	; 0xc5
 80034bc:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDIOx->RESPCMD);
 80034be:	6903      	ldr	r3, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b0d      	cmp	r3, #13
 80034c4:	d00e      	beq.n	80034e4 <SDMMC_CmdSendStatus+0x74>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80034c6:	2001      	movs	r0, #1
  return errorstate;
 80034c8:	e001      	b.n	80034ce <SDMMC_CmdSendStatus+0x5e>
      return SDMMC_ERROR_TIMEOUT;
 80034ca:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80034ce:	bc10      	pop	{r4}
 80034d0:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80034d2:	2301      	movs	r3, #1
}
 80034d4:	bc10      	pop	{r4}
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80034d6:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80034d8:	4618      	mov	r0, r3
}
 80034da:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80034dc:	2304      	movs	r3, #4
 80034de:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80034e0:	4618      	mov	r0, r3
 80034e2:	e7f4      	b.n	80034ce <SDMMC_CmdSendStatus+0x5e>
}
 80034e4:	bc10      	pop	{r4}
 80034e6:	f7ff bb21 	b.w	8002b2c <SDMMC_GetCmdResp1.part.2>
 80034ea:	bf00      	nop
 80034ec:	20000000 	.word	0x20000000
 80034f0:	10624dd3 	.word	0x10624dd3

080034f4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80034f4:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80034f6:	4903      	ldr	r1, [pc, #12]	; (8003504 <MX_FATFS_Init+0x10>)
 80034f8:	4803      	ldr	r0, [pc, #12]	; (8003508 <MX_FATFS_Init+0x14>)
 80034fa:	f004 fdbf 	bl	800807c <FATFS_LinkDriver>
 80034fe:	4b03      	ldr	r3, [pc, #12]	; (800350c <MX_FATFS_Init+0x18>)
 8003500:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003502:	bd08      	pop	{r3, pc}
 8003504:	200060ac 	.word	0x200060ac
 8003508:	0800a3b4 	.word	0x0800a3b4
 800350c:	2000824c 	.word	0x2000824c

08003510 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 8003510:	2000      	movs	r0, #0
 8003512:	4770      	bx	lr

08003514 <BSP_SD_ITConfig>:
__weak uint8_t BSP_SD_ITConfig(void)
{
  /* Code to be updated by the user or replaced by one from the FW pack (in a stmxxxx_sd.c file) */

  return (uint8_t)0;
}
 8003514:	2000      	movs	r0, #0
 8003516:	4770      	bx	lr

08003518 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8003518:	b500      	push	{lr}
 800351a:	b083      	sub	sp, #12
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800351c:	9300      	str	r3, [sp, #0]
 800351e:	4613      	mov	r3, r2
 8003520:	460a      	mov	r2, r1
 8003522:	4601      	mov	r1, r0
 8003524:	4804      	ldr	r0, [pc, #16]	; (8003538 <BSP_SD_ReadBlocks+0x20>)
 8003526:	f7fe fa8f 	bl	8001a48 <HAL_SD_ReadBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 800352a:	3000      	adds	r0, #0
 800352c:	bf18      	it	ne
 800352e:	2001      	movne	r0, #1
 8003530:	b003      	add	sp, #12
 8003532:	f85d fb04 	ldr.w	pc, [sp], #4
 8003536:	bf00      	nop
 8003538:	2000714c 	.word	0x2000714c

0800353c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800353c:	b500      	push	{lr}
 800353e:	b083      	sub	sp, #12
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8003540:	9300      	str	r3, [sp, #0]
 8003542:	4613      	mov	r3, r2
 8003544:	460a      	mov	r2, r1
 8003546:	4601      	mov	r1, r0
 8003548:	4804      	ldr	r0, [pc, #16]	; (800355c <BSP_SD_WriteBlocks+0x20>)
 800354a:	f7fe fbbb 	bl	8001cc4 <HAL_SD_WriteBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 800354e:	3000      	adds	r0, #0
 8003550:	bf18      	it	ne
 8003552:	2001      	movne	r0, #1
 8003554:	b003      	add	sp, #12
 8003556:	f85d fb04 	ldr.w	pc, [sp], #4
 800355a:	bf00      	nop
 800355c:	2000714c 	.word	0x2000714c

08003560 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8003560:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8003562:	4803      	ldr	r0, [pc, #12]	; (8003570 <BSP_SD_GetCardState+0x10>)
 8003564:	f7ff f8b8 	bl	80026d8 <HAL_SD_GetCardState>
}
 8003568:	3804      	subs	r0, #4
 800356a:	bf18      	it	ne
 800356c:	2001      	movne	r0, #1
 800356e:	bd08      	pop	{r3, pc}
 8003570:	2000714c 	.word	0x2000714c

08003574 <BSP_SD_GetCardInfo>:
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8003574:	4601      	mov	r1, r0
 8003576:	4801      	ldr	r0, [pc, #4]	; (800357c <BSP_SD_GetCardInfo+0x8>)
 8003578:	f7ff b810 	b.w	800259c <HAL_SD_GetCardInfo>
 800357c:	2000714c 	.word	0x2000714c

08003580 <BSP_SD_AbortCallback>:
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop

08003584 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8003584:	b508      	push	{r3, lr}
  BSP_SD_AbortCallback();
 8003586:	f7ff fffb 	bl	8003580 <BSP_SD_AbortCallback>
}
 800358a:	bd08      	pop	{r3, pc}

0800358c <BSP_SD_WriteCpltCallback>:
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop

08003590 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8003590:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 8003592:	f7ff fffb 	bl	800358c <BSP_SD_WriteCpltCallback>
}
 8003596:	bd08      	pop	{r3, pc}

08003598 <BSP_SD_ReadCpltCallback>:
 8003598:	4770      	bx	lr
 800359a:	bf00      	nop

0800359c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800359c:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 800359e:	f7ff fffb 	bl	8003598 <BSP_SD_ReadCpltCallback>
}
 80035a2:	bd08      	pop	{r3, pc}

080035a4 <BSP_SD_IsDetected>:
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
  __IO uint8_t status = SD_PRESENT;
 80035a4:	2301      	movs	r3, #1
{
 80035a6:	b500      	push	{lr}
 80035a8:	b083      	sub	sp, #12
  __IO uint8_t status = SD_PRESENT;
 80035aa:	f88d 3007 	strb.w	r3, [sp, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80035ae:	f000 f821 	bl	80035f4 <BSP_PlatformIsDetected>
 80035b2:	b908      	cbnz	r0, 80035b8 <BSP_SD_IsDetected+0x14>
  {
    status = SD_NOT_PRESENT;
 80035b4:	f88d 0007 	strb.w	r0, [sp, #7]
  }

  return status;
 80035b8:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80035bc:	b003      	add	sp, #12
 80035be:	f85d fb04 	ldr.w	pc, [sp], #4
 80035c2:	bf00      	nop

080035c4 <BSP_SD_Init>:
{
 80035c4:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80035c6:	f7ff ffed 	bl	80035a4 <BSP_SD_IsDetected>
 80035ca:	2801      	cmp	r0, #1
 80035cc:	d001      	beq.n	80035d2 <BSP_SD_Init+0xe>
    return MSD_ERROR;
 80035ce:	2001      	movs	r0, #1
}
 80035d0:	bd08      	pop	{r3, pc}
  sd_state = HAL_SD_Init(&hsd);
 80035d2:	4807      	ldr	r0, [pc, #28]	; (80035f0 <BSP_SD_Init+0x2c>)
 80035d4:	f7fe fec8 	bl	8002368 <HAL_SD_Init>
  if (sd_state == MSD_OK)
 80035d8:	2800      	cmp	r0, #0
 80035da:	d1f9      	bne.n	80035d0 <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80035dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80035e0:	4803      	ldr	r0, [pc, #12]	; (80035f0 <BSP_SD_Init+0x2c>)
 80035e2:	f7fe ffef 	bl	80025c4 <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR;
 80035e6:	3000      	adds	r0, #0
 80035e8:	bf18      	it	ne
 80035ea:	2001      	movne	r0, #1
}
 80035ec:	bd08      	pop	{r3, pc}
 80035ee:	bf00      	nop
 80035f0:	2000714c 	.word	0x2000714c

080035f4 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80035f4:	b508      	push	{r3, lr}
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80035f6:	2104      	movs	r1, #4
 80035f8:	4803      	ldr	r0, [pc, #12]	; (8003608 <BSP_PlatformIsDetected+0x14>)
 80035fa:	f7fd feb3 	bl	8001364 <HAL_GPIO_ReadPin>
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
}
 80035fe:	fab0 f080 	clz	r0, r0
 8003602:	0940      	lsrs	r0, r0, #5
 8003604:	bd08      	pop	{r3, pc}
 8003606:	bf00      	nop
 8003608:	40021800 	.word	0x40021800

0800360c <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800360c:	4b03      	ldr	r3, [pc, #12]	; (800361c <disk_status+0x10>)
 800360e:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8003612:	6852      	ldr	r2, [r2, #4]
 8003614:	4403      	add	r3, r0
 8003616:	6852      	ldr	r2, [r2, #4]
 8003618:	7a18      	ldrb	r0, [r3, #8]
 800361a:	4710      	bx	r2
 800361c:	200002b0 	.word	0x200002b0

08003620 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 8003620:	4b06      	ldr	r3, [pc, #24]	; (800363c <disk_initialize+0x1c>)
 8003622:	5c1a      	ldrb	r2, [r3, r0]
 8003624:	b942      	cbnz	r2, 8003638 <disk_initialize+0x18>
  {
    disk.is_initialized[pdrv] = 1;
 8003626:	2101      	movs	r1, #1
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003628:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 800362c:	6852      	ldr	r2, [r2, #4]
    disk.is_initialized[pdrv] = 1;
 800362e:	5419      	strb	r1, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003630:	4403      	add	r3, r0
 8003632:	6812      	ldr	r2, [r2, #0]
 8003634:	7a18      	ldrb	r0, [r3, #8]
 8003636:	4710      	bx	r2
  }
  return stat;
}
 8003638:	2000      	movs	r0, #0
 800363a:	4770      	bx	lr
 800363c:	200002b0 	.word	0x200002b0

08003640 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003640:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003642:	4c05      	ldr	r4, [pc, #20]	; (8003658 <disk_read+0x18>)
 8003644:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8003648:	686d      	ldr	r5, [r5, #4]
 800364a:	4404      	add	r4, r0
 800364c:	68ad      	ldr	r5, [r5, #8]
 800364e:	7a20      	ldrb	r0, [r4, #8]
 8003650:	46ac      	mov	ip, r5
  return res;
}
 8003652:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003654:	4760      	bx	ip
 8003656:	bf00      	nop
 8003658:	200002b0 	.word	0x200002b0

0800365c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800365c:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800365e:	4c05      	ldr	r4, [pc, #20]	; (8003674 <disk_write+0x18>)
 8003660:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8003664:	686d      	ldr	r5, [r5, #4]
 8003666:	4404      	add	r4, r0
 8003668:	68ed      	ldr	r5, [r5, #12]
 800366a:	7a20      	ldrb	r0, [r4, #8]
 800366c:	46ac      	mov	ip, r5
  return res;
}
 800366e:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003670:	4760      	bx	ip
 8003672:	bf00      	nop
 8003674:	200002b0 	.word	0x200002b0

08003678 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003678:	4b05      	ldr	r3, [pc, #20]	; (8003690 <disk_ioctl+0x18>)
{
 800367a:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800367c:	eb03 0480 	add.w	r4, r3, r0, lsl #2
 8003680:	6864      	ldr	r4, [r4, #4]
 8003682:	4403      	add	r3, r0
 8003684:	6924      	ldr	r4, [r4, #16]
 8003686:	7a18      	ldrb	r0, [r3, #8]
 8003688:	4623      	mov	r3, r4
  return res;
}
 800368a:	bc10      	pop	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800368c:	4718      	bx	r3
 800368e:	bf00      	nop
 8003690:	200002b0 	.word	0x200002b0

08003694 <move_window.part.6>:
	}
	return res;
}
#endif

static FRESULT move_window( /* Returns FR_OK or FR_DISK_ERROR */
 8003694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003698:	4604      	mov	r4, r0
	if (fs->wflag)
 800369a:	78c3      	ldrb	r3, [r0, #3]
static FRESULT move_window( /* Returns FR_OK or FR_DISK_ERROR */
 800369c:	460d      	mov	r5, r1
 800369e:	7840      	ldrb	r0, [r0, #1]
 80036a0:	f104 073c 	add.w	r7, r4, #60	; 0x3c
	if (fs->wflag)
 80036a4:	b30b      	cbz	r3, 80036ea <move_window.part.6+0x56>
		wsect = fs->winsect; /* Current sector number */
 80036a6:	6ba6      	ldr	r6, [r4, #56]	; 0x38
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 80036a8:	2301      	movs	r3, #1
 80036aa:	4632      	mov	r2, r6
 80036ac:	4639      	mov	r1, r7
 80036ae:	f7ff ffd5 	bl	800365c <disk_write>
 80036b2:	bb40      	cbnz	r0, 8003706 <move_window.part.6+0x72>
			if (wsect - fs->fatbase < fs->fsize)
 80036b4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80036b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80036b8:	1ab2      	subs	r2, r6, r2
 80036ba:	429a      	cmp	r2, r3
			fs->wflag = 0;
 80036bc:	70e0      	strb	r0, [r4, #3]
 80036be:	7860      	ldrb	r0, [r4, #1]
			if (wsect - fs->fatbase < fs->fsize)
 80036c0:	d213      	bcs.n	80036ea <move_window.part.6+0x56>
				for (nf = fs->n_fats; nf >= 2; nf--)
 80036c2:	f894 8002 	ldrb.w	r8, [r4, #2]
 80036c6:	f1b8 0f01 	cmp.w	r8, #1
 80036ca:	d802      	bhi.n	80036d2 <move_window.part.6+0x3e>
 80036cc:	e00d      	b.n	80036ea <move_window.part.6+0x56>
 80036ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80036d0:	7860      	ldrb	r0, [r4, #1]
					wsect += fs->fsize;
 80036d2:	441e      	add	r6, r3
				for (nf = fs->n_fats; nf >= 2; nf--)
 80036d4:	f108 38ff 	add.w	r8, r8, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 80036d8:	4632      	mov	r2, r6
 80036da:	2301      	movs	r3, #1
 80036dc:	4639      	mov	r1, r7
 80036de:	f7ff ffbd 	bl	800365c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--)
 80036e2:	f1b8 0f01 	cmp.w	r8, #1
 80036e6:	d1f2      	bne.n	80036ce <move_window.part.6+0x3a>
 80036e8:	7860      	ldrb	r0, [r4, #1]
#if !_FS_READONLY
		res = sync_window(fs); /* Write-back changes */
#endif
		if (res == FR_OK)
		{ /* Fill sector window with new data */
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
 80036ea:	462a      	mov	r2, r5
 80036ec:	4639      	mov	r1, r7
 80036ee:	2301      	movs	r3, #1
 80036f0:	f7ff ffa6 	bl	8003640 <disk_read>
 80036f4:	2800      	cmp	r0, #0
 80036f6:	bf1a      	itte	ne
 80036f8:	f04f 35ff 	movne.w	r5, #4294967295
 80036fc:	2001      	movne	r0, #1
 80036fe:	2000      	moveq	r0, #0
			{
				sector = 0xFFFFFFFF; /* Invalidate window if data is not reliable */
				res = FR_DISK_ERR;
			}
			fs->winsect = sector;
 8003700:	63a5      	str	r5, [r4, #56]	; 0x38
		}
	}
	return res;
}
 8003702:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			res = FR_DISK_ERR;
 8003706:	2001      	movs	r0, #1
}
 8003708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800370c <sync_fs>:
/*-----------------------------------------------------------------------*/

static FRESULT sync_fs( /* FR_OK:succeeded, !=0:error */
FATFS *fs /* File system object */
)
{
 800370c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (fs->wflag)
 800370e:	78c3      	ldrb	r3, [r0, #3]
{
 8003710:	4604      	mov	r4, r0
	if (fs->wflag)
 8003712:	b95b      	cbnz	r3, 800372c <sync_fs+0x20>

	res = sync_window(fs);
	if (res == FR_OK)
	{
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1)
 8003714:	7823      	ldrb	r3, [r4, #0]
 8003716:	2b03      	cmp	r3, #3
 8003718:	d029      	beq.n	800376e <sync_fs+0x62>
			fs->winsect = fs->volbase + 1;
			disk_write(fs->drv, fs->win, fs->winsect, 1);
			fs->fsi_flag = 0;
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 800371a:	2200      	movs	r2, #0
 800371c:	7860      	ldrb	r0, [r4, #1]
 800371e:	4611      	mov	r1, r2
 8003720:	f7ff ffaa 	bl	8003678 <disk_ioctl>
			res = FR_DISK_ERR;
 8003724:	3000      	adds	r0, #0
 8003726:	bf18      	it	ne
 8003728:	2001      	movne	r0, #1
			res = FR_DISK_ERR;
	}

	return res;
}
 800372a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wsect = fs->winsect; /* Current sector number */
 800372c:	6b85      	ldr	r5, [r0, #56]	; 0x38
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 800372e:	f100 073c 	add.w	r7, r0, #60	; 0x3c
 8003732:	462a      	mov	r2, r5
 8003734:	4639      	mov	r1, r7
 8003736:	2301      	movs	r3, #1
 8003738:	7840      	ldrb	r0, [r0, #1]
 800373a:	f7ff ff8f 	bl	800365c <disk_write>
 800373e:	2800      	cmp	r0, #0
 8003740:	d156      	bne.n	80037f0 <sync_fs+0xe4>
			if (wsect - fs->fatbase < fs->fsize)
 8003742:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003744:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003746:	1aaa      	subs	r2, r5, r2
 8003748:	429a      	cmp	r2, r3
			fs->wflag = 0;
 800374a:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize)
 800374c:	d2e2      	bcs.n	8003714 <sync_fs+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--)
 800374e:	78a6      	ldrb	r6, [r4, #2]
 8003750:	2e01      	cmp	r6, #1
 8003752:	d801      	bhi.n	8003758 <sync_fs+0x4c>
 8003754:	e7de      	b.n	8003714 <sync_fs+0x8>
 8003756:	6a63      	ldr	r3, [r4, #36]	; 0x24
					wsect += fs->fsize;
 8003758:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--)
 800375a:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 800375c:	462a      	mov	r2, r5
 800375e:	2301      	movs	r3, #1
 8003760:	4639      	mov	r1, r7
 8003762:	7860      	ldrb	r0, [r4, #1]
 8003764:	f7ff ff7a 	bl	800365c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--)
 8003768:	2e01      	cmp	r6, #1
 800376a:	d1f4      	bne.n	8003756 <sync_fs+0x4a>
 800376c:	e7d2      	b.n	8003714 <sync_fs+0x8>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1)
 800376e:	7925      	ldrb	r5, [r4, #4]
 8003770:	2d01      	cmp	r5, #1
 8003772:	d1d2      	bne.n	800371a <sync_fs+0xe>
		*d++ = (BYTE) val;
 8003774:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8003778:	4618      	mov	r0, r3
 800377a:	89a2      	ldrh	r2, [r4, #12]
 800377c:	2100      	movs	r1, #0
 800377e:	f006 fd32 	bl	800a1e6 <memset>
	*ptr++ = (BYTE) val;
 8003782:	2700      	movs	r7, #0
 8003784:	4603      	mov	r3, r0
 8003786:	463e      	mov	r6, r7
	*ptr++ = (BYTE) val;
 8003788:	f04f 0e55 	mov.w	lr, #85	; 0x55
	*ptr++ = (BYTE) val;
 800378c:	f04f 0caa 	mov.w	ip, #170	; 0xaa
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8003790:	69e0      	ldr	r0, [r4, #28]
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8003792:	69a2      	ldr	r2, [r4, #24]
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8003794:	4619      	mov	r1, r3
	*ptr++ = (BYTE) val;
 8003796:	f360 0707 	bfi	r7, r0, #0, #8
	val >>= 8;
 800379a:	0a03      	lsrs	r3, r0, #8
	*ptr++ = (BYTE) val;
 800379c:	f363 270f 	bfi	r7, r3, #8, #8
	val >>= 8;
 80037a0:	0c03      	lsrs	r3, r0, #16
	*ptr++ = (BYTE) val;
 80037a2:	f363 4717 	bfi	r7, r3, #16, #8
	val >>= 8;
 80037a6:	0e00      	lsrs	r0, r0, #24
	val >>= 8;
 80037a8:	0a13      	lsrs	r3, r2, #8
	*ptr++ = (BYTE) val;
 80037aa:	f362 0607 	bfi	r6, r2, #0, #8
 80037ae:	f360 671f 	bfi	r7, r0, #24, #8
 80037b2:	f363 260f 	bfi	r6, r3, #8, #8
	val >>= 8;
 80037b6:	0c10      	lsrs	r0, r2, #16
	*ptr++ = (BYTE) val;
 80037b8:	f360 4617 	bfi	r6, r0, #16, #8
	val >>= 8;
 80037bc:	0e12      	lsrs	r2, r2, #24
	*ptr++ = (BYTE) val;
 80037be:	f362 661f 	bfi	r6, r2, #24, #8
			fs->winsect = fs->volbase + 1;
 80037c2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80037c4:	462b      	mov	r3, r5
	*ptr++ = (BYTE) val;
 80037c6:	480b      	ldr	r0, [pc, #44]	; (80037f4 <sync_fs+0xe8>)
 80037c8:	4d0b      	ldr	r5, [pc, #44]	; (80037f8 <sync_fs+0xec>)
			fs->winsect = fs->volbase + 1;
 80037ca:	3201      	adds	r2, #1
	*ptr++ = (BYTE) val;
 80037cc:	f8c4 0220 	str.w	r0, [r4, #544]	; 0x220
 80037d0:	f8c4 7224 	str.w	r7, [r4, #548]	; 0x224
 80037d4:	f8c4 6228 	str.w	r6, [r4, #552]	; 0x228
			fs->winsect = fs->volbase + 1;
 80037d8:	63a2      	str	r2, [r4, #56]	; 0x38
	*ptr++ = (BYTE) val;
 80037da:	f884 e23a 	strb.w	lr, [r4, #570]	; 0x23a
	*ptr++ = (BYTE) val;
 80037de:	f884 c23b 	strb.w	ip, [r4, #571]	; 0x23b
	*ptr++ = (BYTE) val;
 80037e2:	63e5      	str	r5, [r4, #60]	; 0x3c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80037e4:	7860      	ldrb	r0, [r4, #1]
 80037e6:	f7ff ff39 	bl	800365c <disk_write>
			fs->fsi_flag = 0;
 80037ea:	2300      	movs	r3, #0
 80037ec:	7123      	strb	r3, [r4, #4]
 80037ee:	e794      	b.n	800371a <sync_fs+0xe>
			res = FR_DISK_ERR;
 80037f0:	2001      	movs	r0, #1
}
 80037f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037f4:	61417272 	.word	0x61417272
 80037f8:	41615252 	.word	0x41615252

080037fc <dir_sdi>:
)
{
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;

	if (ofs
 80037fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8003800:	d239      	bcs.n	8003876 <dir_sdi+0x7a>
{
 8003802:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003806:	460e      	mov	r6, r1
			>= (DWORD) ((_FS_EXFAT && fs->fs_type == FS_EXFAT) ?
			MAX_DIR_EX :
																	MAX_DIR)|| ofs % SZDIRE)
 8003808:	06f1      	lsls	r1, r6, #27
{
 800380a:	b087      	sub	sp, #28
																	MAX_DIR)|| ofs % SZDIRE)
 800380c:	d12f      	bne.n	800386e <dir_sdi+0x72>
	{ /* Check range of offset and alignment */
		return FR_INT_ERR;
	}
	dp->dptr = ofs; /* Set current offset */
	clst = dp->obj.sclust; /* Table start cluster (0:root) */
 800380e:	6884      	ldr	r4, [r0, #8]
 8003810:	4607      	mov	r7, r0
	dp->dptr = ofs; /* Set current offset */
 8003812:	6146      	str	r6, [r0, #20]
	FATFS *fs = dp->obj.fs;
 8003814:	f8d0 b000 	ldr.w	fp, [r0]
	if (clst == 0 && fs->fs_type >= FS_FAT32)
 8003818:	bb84      	cbnz	r4, 800387c <dir_sdi+0x80>
 800381a:	f89b 3000 	ldrb.w	r3, [fp]
 800381e:	2b02      	cmp	r3, #2
 8003820:	d902      	bls.n	8003828 <dir_sdi+0x2c>
	{ /* Replace cluster# 0 with root cluster# */
		clst = fs->dirbase;
 8003822:	f8db 3030 	ldr.w	r3, [fp, #48]	; 0x30
		if (_FS_EXFAT)
			dp->obj.stat = 0; /* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0)
 8003826:	bb43      	cbnz	r3, 800387a <dir_sdi+0x7e>
	{ /* Static table (root-directory in FAT12/16) */
		if (ofs / SZDIRE >= fs->n_rootdir)
 8003828:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 800382c:	ebb3 1f56 	cmp.w	r3, r6, lsr #5
 8003830:	d91d      	bls.n	800386e <dir_sdi+0x72>
			return FR_INT_ERR; /* Is index out of range? */
		dp->sect = fs->dirbase;
 8003832:	f8db 2030 	ldr.w	r2, [fp, #48]	; 0x30
 8003836:	61fa      	str	r2, [r7, #28]
				return FR_INT_ERR; /* Reached to end of table or internal error */
			ofs -= csz;
		}
		dp->sect = clust2sect(fs, clst);
	}
	dp->clust = clst; /* Current cluster# */
 8003838:	61bc      	str	r4, [r7, #24]
	if (!dp->sect)
 800383a:	b1c2      	cbz	r2, 800386e <dir_sdi+0x72>
		return FR_INT_ERR;
	dp->sect += ofs / SS(fs); /* Sector# of the directory entry */
 800383c:	f8bb 000c 	ldrh.w	r0, [fp, #12]
	dp->dir = fs->win + (ofs % SS(fs)); /* Pointer to the entry in the win[] */
 8003840:	f10b 033c 	add.w	r3, fp, #60	; 0x3c
	dp->sect += ofs / SS(fs); /* Sector# of the directory entry */
 8003844:	fbb6 f1f0 	udiv	r1, r6, r0
	dp->dir = fs->win + (ofs % SS(fs)); /* Pointer to the entry in the win[] */
 8003848:	fb00 6611 	mls	r6, r0, r1, r6

	return FR_OK;
 800384c:	2000      	movs	r0, #0
	dp->sect += ofs / SS(fs); /* Sector# of the directory entry */
 800384e:	440a      	add	r2, r1
	dp->dir = fs->win + (ofs % SS(fs)); /* Pointer to the entry in the win[] */
 8003850:	441e      	add	r6, r3
	dp->sect += ofs / SS(fs); /* Sector# of the directory entry */
 8003852:	e9c7 2607 	strd	r2, r6, [r7, #28]
}
 8003856:	b007      	add	sp, #28
 8003858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800385c:	9f01      	ldr	r7, [sp, #4]
	if (clst >= fs->n_fatent - 2)
 800385e:	3b02      	subs	r3, #2
	clst -= 2;
 8003860:	1ea1      	subs	r1, r4, #2
	if (clst >= fs->n_fatent - 2)
 8003862:	4299      	cmp	r1, r3
 8003864:	f0c0 8170 	bcc.w	8003b48 <dir_sdi+0x34c>
		dp->sect = clust2sect(fs, clst);
 8003868:	2300      	movs	r3, #0
 800386a:	e9c7 4306 	strd	r4, r3, [r7, #24]
				return FR_INT_ERR; /* Reached to end of table or internal error */
 800386e:	2002      	movs	r0, #2
}
 8003870:	b007      	add	sp, #28
 8003872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return FR_INT_ERR;
 8003876:	2002      	movs	r0, #2
}
 8003878:	4770      	bx	lr
 800387a:	461c      	mov	r4, r3
		csz = (DWORD) fs->csize * SS(fs); /* Bytes per cluster */
 800387c:	f8bb 300a 	ldrh.w	r3, [fp, #10]
 8003880:	f8bb 200c 	ldrh.w	r2, [fp, #12]
 8003884:	fb02 f903 	mul.w	r9, r2, r3
		while (ofs >= csz)
 8003888:	454e      	cmp	r6, r9
 800388a:	f0c0 8167 	bcc.w	8003b5c <dir_sdi+0x360>
	if (clst < 2 || clst >= fs->n_fatent)
 800388e:	2c01      	cmp	r4, #1
 8003890:	d9ed      	bls.n	800386e <dir_sdi+0x72>
 8003892:	f8db 3020 	ldr.w	r3, [fp, #32]
 8003896:	42a3      	cmp	r3, r4
 8003898:	d9e9      	bls.n	800386e <dir_sdi+0x72>
 800389a:	465d      	mov	r5, fp
		switch (fs->fs_type)
 800389c:	782b      	ldrb	r3, [r5, #0]
 800389e:	9701      	str	r7, [sp, #4]
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	f000 80ac 	beq.w	80039fe <dir_sdi+0x202>
 80038a6:	2b03      	cmp	r3, #3
 80038a8:	d046      	beq.n	8003938 <dir_sdi+0x13c>
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d1df      	bne.n	800386e <dir_sdi+0x72>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK)
 80038ae:	89a9      	ldrh	r1, [r5, #12]
			bc += bc / 2;
 80038b0:	eb04 0754 	add.w	r7, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK)
 80038b4:	fbb7 f2f1 	udiv	r2, r7, r1
 80038b8:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
	if (sector != fs->winsect)
 80038ba:	f8d5 8038 	ldr.w	r8, [r5, #56]	; 0x38
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK)
 80038be:	eb02 0a00 	add.w	sl, r2, r0
	if (sector != fs->winsect)
 80038c2:	45c2      	cmp	sl, r8
 80038c4:	f000 80ea 	beq.w	8003a9c <dir_sdi+0x2a0>
	if (fs->wflag)
 80038c8:	78ea      	ldrb	r2, [r5, #3]
 80038ca:	f105 013c 	add.w	r1, r5, #60	; 0x3c
 80038ce:	7868      	ldrb	r0, [r5, #1]
 80038d0:	9102      	str	r1, [sp, #8]
 80038d2:	b31a      	cbz	r2, 800391c <dir_sdi+0x120>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 80038d4:	4642      	mov	r2, r8
 80038d6:	f7ff fec1 	bl	800365c <disk_write>
 80038da:	2800      	cmp	r0, #0
 80038dc:	f040 813c 	bne.w	8003b58 <dir_sdi+0x35c>
			if (wsect - fs->fatbase < fs->fsize)
 80038e0:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80038e2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80038e4:	eba8 0202 	sub.w	r2, r8, r2
 80038e8:	429a      	cmp	r2, r3
			fs->wflag = 0;
 80038ea:	70e8      	strb	r0, [r5, #3]
			if (wsect - fs->fatbase < fs->fsize)
 80038ec:	d214      	bcs.n	8003918 <dir_sdi+0x11c>
				for (nf = fs->n_fats; nf >= 2; nf--)
 80038ee:	78aa      	ldrb	r2, [r5, #2]
 80038f0:	2a01      	cmp	r2, #1
 80038f2:	d911      	bls.n	8003918 <dir_sdi+0x11c>
 80038f4:	9403      	str	r4, [sp, #12]
 80038f6:	9604      	str	r6, [sp, #16]
 80038f8:	4614      	mov	r4, r2
 80038fa:	9e02      	ldr	r6, [sp, #8]
 80038fc:	e000      	b.n	8003900 <dir_sdi+0x104>
 80038fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
					wsect += fs->fsize;
 8003900:	4498      	add	r8, r3
				for (nf = fs->n_fats; nf >= 2; nf--)
 8003902:	3c01      	subs	r4, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8003904:	4642      	mov	r2, r8
 8003906:	2301      	movs	r3, #1
 8003908:	4631      	mov	r1, r6
 800390a:	7868      	ldrb	r0, [r5, #1]
 800390c:	f7ff fea6 	bl	800365c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--)
 8003910:	2c01      	cmp	r4, #1
 8003912:	d1f4      	bne.n	80038fe <dir_sdi+0x102>
 8003914:	e9dd 4603 	ldrd	r4, r6, [sp, #12]
 8003918:	7868      	ldrb	r0, [r5, #1]
 800391a:	9902      	ldr	r1, [sp, #8]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
 800391c:	2301      	movs	r3, #1
 800391e:	4652      	mov	r2, sl
 8003920:	f7ff fe8e 	bl	8003640 <disk_read>
 8003924:	2800      	cmp	r0, #0
 8003926:	f000 80b2 	beq.w	8003a8e <dir_sdi+0x292>
			fs->winsect = sector;
 800392a:	f04f 33ff 	mov.w	r3, #4294967295
				return FR_DISK_ERR; /* Disk error */
 800392e:	2001      	movs	r0, #1
			fs->winsect = sector;
 8003930:	63ab      	str	r3, [r5, #56]	; 0x38
}
 8003932:	b007      	add	sp, #28
 8003934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK)
 8003938:	89aa      	ldrh	r2, [r5, #12]
 800393a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800393c:	0897      	lsrs	r7, r2, #2
 800393e:	fbb4 f7f7 	udiv	r7, r4, r7
	if (sector != fs->winsect)
 8003942:	f8d5 a038 	ldr.w	sl, [r5, #56]	; 0x38
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK)
 8003946:	441f      	add	r7, r3
	if (sector != fs->winsect)
 8003948:	4557      	cmp	r7, sl
 800394a:	f105 083c 	add.w	r8, r5, #60	; 0x3c
 800394e:	d02e      	beq.n	80039ae <dir_sdi+0x1b2>
	if (fs->wflag)
 8003950:	78eb      	ldrb	r3, [r5, #3]
 8003952:	7868      	ldrb	r0, [r5, #1]
 8003954:	b313      	cbz	r3, 800399c <dir_sdi+0x1a0>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 8003956:	2301      	movs	r3, #1
 8003958:	4652      	mov	r2, sl
 800395a:	4641      	mov	r1, r8
 800395c:	f7ff fe7e 	bl	800365c <disk_write>
 8003960:	2800      	cmp	r0, #0
 8003962:	f040 80f9 	bne.w	8003b58 <dir_sdi+0x35c>
			if (wsect - fs->fatbase < fs->fsize)
 8003966:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8003968:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800396a:	ebaa 0202 	sub.w	r2, sl, r2
 800396e:	429a      	cmp	r2, r3
			fs->wflag = 0;
 8003970:	70e8      	strb	r0, [r5, #3]
 8003972:	7868      	ldrb	r0, [r5, #1]
			if (wsect - fs->fatbase < fs->fsize)
 8003974:	d212      	bcs.n	800399c <dir_sdi+0x1a0>
				for (nf = fs->n_fats; nf >= 2; nf--)
 8003976:	78aa      	ldrb	r2, [r5, #2]
 8003978:	2a01      	cmp	r2, #1
 800397a:	d90f      	bls.n	800399c <dir_sdi+0x1a0>
 800397c:	9402      	str	r4, [sp, #8]
 800397e:	4614      	mov	r4, r2
 8003980:	e001      	b.n	8003986 <dir_sdi+0x18a>
 8003982:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003984:	7868      	ldrb	r0, [r5, #1]
					wsect += fs->fsize;
 8003986:	449a      	add	sl, r3
				for (nf = fs->n_fats; nf >= 2; nf--)
 8003988:	3c01      	subs	r4, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 800398a:	4652      	mov	r2, sl
 800398c:	2301      	movs	r3, #1
 800398e:	4641      	mov	r1, r8
 8003990:	f7ff fe64 	bl	800365c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--)
 8003994:	2c01      	cmp	r4, #1
 8003996:	d1f4      	bne.n	8003982 <dir_sdi+0x186>
 8003998:	9c02      	ldr	r4, [sp, #8]
 800399a:	7868      	ldrb	r0, [r5, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
 800399c:	2301      	movs	r3, #1
 800399e:	463a      	mov	r2, r7
 80039a0:	4641      	mov	r1, r8
 80039a2:	f7ff fe4d 	bl	8003640 <disk_read>
 80039a6:	2800      	cmp	r0, #0
 80039a8:	d1bf      	bne.n	800392a <dir_sdi+0x12e>
 80039aa:	89aa      	ldrh	r2, [r5, #12]
			fs->winsect = sector;
 80039ac:	63af      	str	r7, [r5, #56]	; 0x38
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80039ae:	00a4      	lsls	r4, r4, #2
 80039b0:	fbb4 f3f2 	udiv	r3, r4, r2
 80039b4:	fb02 4413 	mls	r4, r2, r3, r4
 80039b8:	eb08 0204 	add.w	r2, r8, r4
	rv = rv << 8 | ptr[2];
 80039bc:	8851      	ldrh	r1, [r2, #2]
	rv = rv << 8 | ptr[1];
 80039be:	7853      	ldrb	r3, [r2, #1]
	rv = rv << 8 | ptr[0];
 80039c0:	f818 4004 	ldrb.w	r4, [r8, r4]
	rv = rv << 8 | ptr[1];
 80039c4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	rv = rv << 8 | ptr[0];
 80039c8:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80039cc:	f024 4470 	bic.w	r4, r4, #4026531840	; 0xf0000000
			if (clst < 2 || clst >= fs->n_fatent)
 80039d0:	2c01      	cmp	r4, #1
 80039d2:	f67f af4c 	bls.w	800386e <dir_sdi+0x72>
 80039d6:	f8db 3020 	ldr.w	r3, [fp, #32]
 80039da:	42a3      	cmp	r3, r4
 80039dc:	f67f af47 	bls.w	800386e <dir_sdi+0x72>
			ofs -= csz;
 80039e0:	eba6 0609 	sub.w	r6, r6, r9
		while (ofs >= csz)
 80039e4:	45b1      	cmp	r9, r6
 80039e6:	f63f af39 	bhi.w	800385c <dir_sdi+0x60>
			clst = get_fat(&dp->obj, clst); /* Get next cluster */
 80039ea:	9b01      	ldr	r3, [sp, #4]
 80039ec:	681d      	ldr	r5, [r3, #0]
	if (clst < 2 || clst >= fs->n_fatent)
 80039ee:	6a2b      	ldr	r3, [r5, #32]
 80039f0:	42a3      	cmp	r3, r4
 80039f2:	f67f af3c 	bls.w	800386e <dir_sdi+0x72>
		switch (fs->fs_type)
 80039f6:	782b      	ldrb	r3, [r5, #0]
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	f47f af54 	bne.w	80038a6 <dir_sdi+0xaa>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK)
 80039fe:	89aa      	ldrh	r2, [r5, #12]
 8003a00:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003a02:	0857      	lsrs	r7, r2, #1
 8003a04:	fbb4 f7f7 	udiv	r7, r4, r7
	if (sector != fs->winsect)
 8003a08:	f8d5 a038 	ldr.w	sl, [r5, #56]	; 0x38
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK)
 8003a0c:	441f      	add	r7, r3
	if (sector != fs->winsect)
 8003a0e:	4557      	cmp	r7, sl
 8003a10:	f105 083c 	add.w	r8, r5, #60	; 0x3c
 8003a14:	d02e      	beq.n	8003a74 <dir_sdi+0x278>
	if (fs->wflag)
 8003a16:	78eb      	ldrb	r3, [r5, #3]
 8003a18:	7868      	ldrb	r0, [r5, #1]
 8003a1a:	b30b      	cbz	r3, 8003a60 <dir_sdi+0x264>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	4652      	mov	r2, sl
 8003a20:	4641      	mov	r1, r8
 8003a22:	f7ff fe1b 	bl	800365c <disk_write>
 8003a26:	2800      	cmp	r0, #0
 8003a28:	f040 8096 	bne.w	8003b58 <dir_sdi+0x35c>
			if (wsect - fs->fatbase < fs->fsize)
 8003a2c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8003a2e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003a30:	ebaa 0202 	sub.w	r2, sl, r2
 8003a34:	429a      	cmp	r2, r3
			fs->wflag = 0;
 8003a36:	70e8      	strb	r0, [r5, #3]
			if (wsect - fs->fatbase < fs->fsize)
 8003a38:	d211      	bcs.n	8003a5e <dir_sdi+0x262>
				for (nf = fs->n_fats; nf >= 2; nf--)
 8003a3a:	78aa      	ldrb	r2, [r5, #2]
 8003a3c:	2a01      	cmp	r2, #1
 8003a3e:	d90e      	bls.n	8003a5e <dir_sdi+0x262>
 8003a40:	9402      	str	r4, [sp, #8]
 8003a42:	4614      	mov	r4, r2
 8003a44:	e000      	b.n	8003a48 <dir_sdi+0x24c>
 8003a46:	6a6b      	ldr	r3, [r5, #36]	; 0x24
					wsect += fs->fsize;
 8003a48:	449a      	add	sl, r3
				for (nf = fs->n_fats; nf >= 2; nf--)
 8003a4a:	3c01      	subs	r4, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8003a4c:	4652      	mov	r2, sl
 8003a4e:	2301      	movs	r3, #1
 8003a50:	4641      	mov	r1, r8
 8003a52:	7868      	ldrb	r0, [r5, #1]
 8003a54:	f7ff fe02 	bl	800365c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--)
 8003a58:	2c01      	cmp	r4, #1
 8003a5a:	d1f4      	bne.n	8003a46 <dir_sdi+0x24a>
 8003a5c:	9c02      	ldr	r4, [sp, #8]
 8003a5e:	7868      	ldrb	r0, [r5, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
 8003a60:	2301      	movs	r3, #1
 8003a62:	463a      	mov	r2, r7
 8003a64:	4641      	mov	r1, r8
 8003a66:	f7ff fdeb 	bl	8003640 <disk_read>
 8003a6a:	2800      	cmp	r0, #0
 8003a6c:	f47f af5d 	bne.w	800392a <dir_sdi+0x12e>
 8003a70:	89aa      	ldrh	r2, [r5, #12]
			fs->winsect = sector;
 8003a72:	63af      	str	r7, [r5, #56]	; 0x38
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8003a74:	0064      	lsls	r4, r4, #1
 8003a76:	fbb4 f3f2 	udiv	r3, r4, r2
 8003a7a:	fb02 4313 	mls	r3, r2, r3, r4
 8003a7e:	eb08 0203 	add.w	r2, r8, r3
	rv = rv << 8 | ptr[0];
 8003a82:	7852      	ldrb	r2, [r2, #1]
 8003a84:	f818 4003 	ldrb.w	r4, [r8, r3]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8003a88:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 8003a8c:	e7a0      	b.n	80039d0 <dir_sdi+0x1d4>
 8003a8e:	89a9      	ldrh	r1, [r5, #12]
			fs->winsect = sector;
 8003a90:	46d0      	mov	r8, sl
 8003a92:	fbb7 f2f1 	udiv	r2, r7, r1
 8003a96:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8003a98:	f8c5 a038 	str.w	sl, [r5, #56]	; 0x38
			wc = fs->win[bc++ % SS(fs)];
 8003a9c:	1c7b      	adds	r3, r7, #1
 8003a9e:	9302      	str	r3, [sp, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK)
 8003aa0:	fbb3 f3f1 	udiv	r3, r3, r1
			wc = fs->win[bc++ % SS(fs)];
 8003aa4:	fb01 7712 	mls	r7, r1, r2, r7
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK)
 8003aa8:	eb03 0a00 	add.w	sl, r3, r0
			wc = fs->win[bc++ % SS(fs)];
 8003aac:	442f      	add	r7, r5
	if (sector != fs->winsect)
 8003aae:	45c2      	cmp	sl, r8
			wc = fs->win[bc++ % SS(fs)];
 8003ab0:	f897 703c 	ldrb.w	r7, [r7, #60]	; 0x3c
	if (sector != fs->winsect)
 8003ab4:	d03a      	beq.n	8003b2c <dir_sdi+0x330>
	if (fs->wflag)
 8003ab6:	78eb      	ldrb	r3, [r5, #3]
 8003ab8:	f105 023c 	add.w	r2, r5, #60	; 0x3c
 8003abc:	7868      	ldrb	r0, [r5, #1]
 8003abe:	4611      	mov	r1, r2
 8003ac0:	9203      	str	r2, [sp, #12]
 8003ac2:	b32b      	cbz	r3, 8003b10 <dir_sdi+0x314>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	4642      	mov	r2, r8
 8003ac8:	f7ff fdc8 	bl	800365c <disk_write>
 8003acc:	2800      	cmp	r0, #0
 8003ace:	d143      	bne.n	8003b58 <dir_sdi+0x35c>
			if (wsect - fs->fatbase < fs->fsize)
 8003ad0:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8003ad2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003ad4:	eba8 0202 	sub.w	r2, r8, r2
 8003ad8:	429a      	cmp	r2, r3
			fs->wflag = 0;
 8003ada:	70e8      	strb	r0, [r5, #3]
 8003adc:	7868      	ldrb	r0, [r5, #1]
			if (wsect - fs->fatbase < fs->fsize)
 8003ade:	d217      	bcs.n	8003b10 <dir_sdi+0x314>
				for (nf = fs->n_fats; nf >= 2; nf--)
 8003ae0:	f895 c002 	ldrb.w	ip, [r5, #2]
 8003ae4:	4662      	mov	r2, ip
 8003ae6:	2a01      	cmp	r2, #1
 8003ae8:	d912      	bls.n	8003b10 <dir_sdi+0x314>
 8003aea:	9404      	str	r4, [sp, #16]
 8003aec:	9605      	str	r6, [sp, #20]
 8003aee:	4664      	mov	r4, ip
 8003af0:	9e03      	ldr	r6, [sp, #12]
 8003af2:	e001      	b.n	8003af8 <dir_sdi+0x2fc>
 8003af4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003af6:	7868      	ldrb	r0, [r5, #1]
					wsect += fs->fsize;
 8003af8:	4498      	add	r8, r3
				for (nf = fs->n_fats; nf >= 2; nf--)
 8003afa:	3c01      	subs	r4, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8003afc:	4642      	mov	r2, r8
 8003afe:	2301      	movs	r3, #1
 8003b00:	4631      	mov	r1, r6
 8003b02:	f7ff fdab 	bl	800365c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--)
 8003b06:	2c01      	cmp	r4, #1
 8003b08:	d1f4      	bne.n	8003af4 <dir_sdi+0x2f8>
 8003b0a:	e9dd 4604 	ldrd	r4, r6, [sp, #16]
 8003b0e:	7868      	ldrb	r0, [r5, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
 8003b10:	9903      	ldr	r1, [sp, #12]
 8003b12:	2301      	movs	r3, #1
 8003b14:	4652      	mov	r2, sl
 8003b16:	f7ff fd93 	bl	8003640 <disk_read>
 8003b1a:	2800      	cmp	r0, #0
 8003b1c:	f47f af05 	bne.w	800392a <dir_sdi+0x12e>
 8003b20:	89a9      	ldrh	r1, [r5, #12]
 8003b22:	9b02      	ldr	r3, [sp, #8]
			fs->winsect = sector;
 8003b24:	f8c5 a038 	str.w	sl, [r5, #56]	; 0x38
 8003b28:	fbb3 f3f1 	udiv	r3, r3, r1
			wc |= fs->win[bc % SS(fs)] << 8;
 8003b2c:	9a02      	ldr	r2, [sp, #8]
 8003b2e:	fb01 2813 	mls	r8, r1, r3, r2
 8003b32:	4445      	add	r5, r8
 8003b34:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8003b38:	07e2      	lsls	r2, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 8003b3a:	ea47 2303 	orr.w	r3, r7, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8003b3e:	bf4c      	ite	mi
 8003b40:	091c      	lsrmi	r4, r3, #4
 8003b42:	f3c3 040b 	ubfxpl	r4, r3, #0, #12
 8003b46:	e743      	b.n	80039d0 <dir_sdi+0x1d4>
	return clst * fs->csize + fs->database;
 8003b48:	f8bb 200a 	ldrh.w	r2, [fp, #10]
 8003b4c:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 8003b50:	fb01 3202 	mla	r2, r1, r2, r3
		dp->sect = clust2sect(fs, clst);
 8003b54:	61fa      	str	r2, [r7, #28]
 8003b56:	e66f      	b.n	8003838 <dir_sdi+0x3c>
				return FR_DISK_ERR; /* Disk error */
 8003b58:	2001      	movs	r0, #1
 8003b5a:	e689      	b.n	8003870 <dir_sdi+0x74>
 8003b5c:	f8db 3020 	ldr.w	r3, [fp, #32]
 8003b60:	e67d      	b.n	800385e <dir_sdi+0x62>
 8003b62:	bf00      	nop

08003b64 <put_fat.part.8>:
static FRESULT put_fat( /* FR_OK(0):succeeded, !=0:error */
 8003b64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		switch (fs->fs_type)
 8003b68:	7803      	ldrb	r3, [r0, #0]
static FRESULT put_fat( /* FR_OK(0):succeeded, !=0:error */
 8003b6a:	4604      	mov	r4, r0
		switch (fs->fs_type)
 8003b6c:	2b02      	cmp	r3, #2
static FRESULT put_fat( /* FR_OK(0):succeeded, !=0:error */
 8003b6e:	460d      	mov	r5, r1
 8003b70:	4617      	mov	r7, r2
		switch (fs->fs_type)
 8003b72:	f000 809e 	beq.w	8003cb2 <put_fat.part.8+0x14e>
 8003b76:	2b03      	cmp	r3, #3
 8003b78:	d06f      	beq.n	8003c5a <put_fat.part.8+0xf6>
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d002      	beq.n	8003b84 <put_fat.part.8+0x20>
	FRESULT res = FR_INT_ERR;
 8003b7e:	2002      	movs	r0, #2
}
 8003b80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003b84:	8981      	ldrh	r1, [r0, #12]
			bc += bc / 2;
 8003b86:	eb05 0655 	add.w	r6, r5, r5, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003b8a:	fbb6 f2f1 	udiv	r2, r6, r1
 8003b8e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
	if (sector != fs->winsect)
 8003b90:	f8d4 a038 	ldr.w	sl, [r4, #56]	; 0x38
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003b94:	eb02 0900 	add.w	r9, r2, r0
	if (sector != fs->winsect)
 8003b98:	45d1      	cmp	r9, sl
 8003b9a:	f104 083c 	add.w	r8, r4, #60	; 0x3c
 8003b9e:	f040 8107 	bne.w	8003db0 <put_fat.part.8+0x24c>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE) val << 4)) : (BYTE) val;
 8003ba2:	f015 0501 	ands.w	r5, r5, #1
			p = fs->win + bc++ % SS(fs);
 8003ba6:	fb01 6212 	mls	r2, r1, r2, r6
 8003baa:	f106 0601 	add.w	r6, r6, #1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE) val << 4)) : (BYTE) val;
 8003bae:	f000 8132 	beq.w	8003e16 <put_fat.part.8+0x2b2>
 8003bb2:	f818 1002 	ldrb.w	r1, [r8, r2]
 8003bb6:	013b      	lsls	r3, r7, #4
 8003bb8:	f001 010f 	and.w	r1, r1, #15
 8003bbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bc0:	430b      	orrs	r3, r1
 8003bc2:	f808 3002 	strb.w	r3, [r8, r2]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003bc6:	89a2      	ldrh	r2, [r4, #12]
			fs->wflag = 1;
 8003bc8:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003bca:	fbb6 f1f2 	udiv	r1, r6, r2
 8003bce:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
	if (sector != fs->winsect)
 8003bd0:	f8d4 a038 	ldr.w	sl, [r4, #56]	; 0x38
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003bd4:	eb01 0900 	add.w	r9, r1, r0
	if (sector != fs->winsect)
 8003bd8:	45d1      	cmp	r9, sl
			fs->wflag = 1;
 8003bda:	70e3      	strb	r3, [r4, #3]
	if (sector != fs->winsect)
 8003bdc:	d02f      	beq.n	8003c3e <put_fat.part.8+0xda>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 8003bde:	4652      	mov	r2, sl
 8003be0:	4641      	mov	r1, r8
 8003be2:	7860      	ldrb	r0, [r4, #1]
 8003be4:	f7ff fd3a 	bl	800365c <disk_write>
 8003be8:	2800      	cmp	r0, #0
 8003bea:	f040 8111 	bne.w	8003e10 <put_fat.part.8+0x2ac>
			if (wsect - fs->fatbase < fs->fsize)
 8003bee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003bf0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003bf2:	ebaa 0202 	sub.w	r2, sl, r2
 8003bf6:	429a      	cmp	r2, r3
			fs->wflag = 0;
 8003bf8:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize)
 8003bfa:	d212      	bcs.n	8003c22 <put_fat.part.8+0xbe>
				for (nf = fs->n_fats; nf >= 2; nf--)
 8003bfc:	f894 b002 	ldrb.w	fp, [r4, #2]
 8003c00:	f1bb 0f01 	cmp.w	fp, #1
 8003c04:	d801      	bhi.n	8003c0a <put_fat.part.8+0xa6>
 8003c06:	e00c      	b.n	8003c22 <put_fat.part.8+0xbe>
 8003c08:	6a63      	ldr	r3, [r4, #36]	; 0x24
					wsect += fs->fsize;
 8003c0a:	449a      	add	sl, r3
				for (nf = fs->n_fats; nf >= 2; nf--)
 8003c0c:	f10b 3bff 	add.w	fp, fp, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 8003c10:	4652      	mov	r2, sl
 8003c12:	2301      	movs	r3, #1
 8003c14:	4641      	mov	r1, r8
 8003c16:	7860      	ldrb	r0, [r4, #1]
 8003c18:	f7ff fd20 	bl	800365c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--)
 8003c1c:	f1bb 0f01 	cmp.w	fp, #1
 8003c20:	d1f2      	bne.n	8003c08 <put_fat.part.8+0xa4>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
 8003c22:	2301      	movs	r3, #1
 8003c24:	464a      	mov	r2, r9
 8003c26:	4641      	mov	r1, r8
 8003c28:	7860      	ldrb	r0, [r4, #1]
 8003c2a:	f7ff fd09 	bl	8003640 <disk_read>
 8003c2e:	2800      	cmp	r0, #0
 8003c30:	f040 80b8 	bne.w	8003da4 <put_fat.part.8+0x240>
 8003c34:	89a2      	ldrh	r2, [r4, #12]
			fs->winsect = sector;
 8003c36:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
 8003c3a:	fbb6 f1f2 	udiv	r1, r6, r2
			p = fs->win + bc % SS(fs);
 8003c3e:	fb02 6611 	mls	r6, r2, r1, r6
			*p = (clst & 1) ?
 8003c42:	2d00      	cmp	r5, #0
 8003c44:	f000 80ed 	beq.w	8003e22 <put_fat.part.8+0x2be>
 8003c48:	f3c7 1707 	ubfx	r7, r7, #4, #8
			fs->wflag = 1;
 8003c4c:	2301      	movs	r3, #1
			*p = (clst & 1) ?
 8003c4e:	f808 7006 	strb.w	r7, [r8, r6]
			fs->wflag = 1;
 8003c52:	70e3      	strb	r3, [r4, #3]
 8003c54:	2000      	movs	r0, #0
}
 8003c56:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8003c5a:	8982      	ldrh	r2, [r0, #12]
 8003c5c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8003c5e:	0893      	lsrs	r3, r2, #2
 8003c60:	fbb5 f3f3 	udiv	r3, r5, r3
	if (sector != fs->winsect)
 8003c64:	f8d0 9038 	ldr.w	r9, [r0, #56]	; 0x38
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8003c68:	eb03 0801 	add.w	r8, r3, r1
	if (sector != fs->winsect)
 8003c6c:	45c8      	cmp	r8, r9
 8003c6e:	f100 063c 	add.w	r6, r0, #60	; 0x3c
 8003c72:	d16a      	bne.n	8003d4a <put_fat.part.8+0x1e6>
						| (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8003c74:	00ad      	lsls	r5, r5, #2
 8003c76:	fbb5 f0f2 	udiv	r0, r5, r2
	*ptr++ = (BYTE) val;
 8003c7a:	2300      	movs	r3, #0
			fs->wflag = 1;
 8003c7c:	2101      	movs	r1, #1
						| (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8003c7e:	fb02 5510 	mls	r5, r2, r0, r5
 8003c82:	1972      	adds	r2, r6, r5
	rv = rv << 8 | ptr[2];
 8003c84:	8852      	ldrh	r2, [r2, #2]
				val = (val & 0x0FFFFFFF)
 8003c86:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
	rv = rv << 8 | ptr[0];
 8003c8a:	0412      	lsls	r2, r2, #16
						| (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8003c8c:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
				val = (val & 0x0FFFFFFF)
 8003c90:	433a      	orrs	r2, r7
	val >>= 8;
 8003c92:	0a10      	lsrs	r0, r2, #8
	*ptr++ = (BYTE) val;
 8003c94:	f362 0307 	bfi	r3, r2, #0, #8
 8003c98:	f360 230f 	bfi	r3, r0, #8, #8
	val >>= 8;
 8003c9c:	0c10      	lsrs	r0, r2, #16
	*ptr++ = (BYTE) val;
 8003c9e:	f360 4317 	bfi	r3, r0, #16, #8
	val >>= 8;
 8003ca2:	0e12      	lsrs	r2, r2, #24
	*ptr++ = (BYTE) val;
 8003ca4:	f362 631f 	bfi	r3, r2, #24, #8
 8003ca8:	5173      	str	r3, [r6, r5]
			fs->wflag = 1;
 8003caa:	70e1      	strb	r1, [r4, #3]
 8003cac:	2000      	movs	r0, #0
}
 8003cae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8003cb2:	8983      	ldrh	r3, [r0, #12]
 8003cb4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8003cb6:	085e      	lsrs	r6, r3, #1
 8003cb8:	fbb1 f6f6 	udiv	r6, r1, r6
	if (sector != fs->winsect)
 8003cbc:	f8d0 8038 	ldr.w	r8, [r0, #56]	; 0x38
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8003cc0:	4416      	add	r6, r2
	if (sector != fs->winsect)
 8003cc2:	4546      	cmp	r6, r8
 8003cc4:	f100 093c 	add.w	r9, r0, #60	; 0x3c
 8003cc8:	d02e      	beq.n	8003d28 <put_fat.part.8+0x1c4>
	if (fs->wflag)
 8003cca:	78c3      	ldrb	r3, [r0, #3]
 8003ccc:	7840      	ldrb	r0, [r0, #1]
 8003cce:	b313      	cbz	r3, 8003d16 <put_fat.part.8+0x1b2>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	4642      	mov	r2, r8
 8003cd4:	4649      	mov	r1, r9
 8003cd6:	f7ff fcc1 	bl	800365c <disk_write>
 8003cda:	2800      	cmp	r0, #0
 8003cdc:	f040 8098 	bne.w	8003e10 <put_fat.part.8+0x2ac>
			if (wsect - fs->fatbase < fs->fsize)
 8003ce0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003ce2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ce4:	eba8 0202 	sub.w	r2, r8, r2
 8003ce8:	429a      	cmp	r2, r3
			fs->wflag = 0;
 8003cea:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize)
 8003cec:	d212      	bcs.n	8003d14 <put_fat.part.8+0x1b0>
				for (nf = fs->n_fats; nf >= 2; nf--)
 8003cee:	f894 a002 	ldrb.w	sl, [r4, #2]
 8003cf2:	f1ba 0f01 	cmp.w	sl, #1
 8003cf6:	d801      	bhi.n	8003cfc <put_fat.part.8+0x198>
 8003cf8:	e00c      	b.n	8003d14 <put_fat.part.8+0x1b0>
 8003cfa:	6a63      	ldr	r3, [r4, #36]	; 0x24
					wsect += fs->fsize;
 8003cfc:	4498      	add	r8, r3
				for (nf = fs->n_fats; nf >= 2; nf--)
 8003cfe:	f10a 3aff 	add.w	sl, sl, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 8003d02:	4642      	mov	r2, r8
 8003d04:	2301      	movs	r3, #1
 8003d06:	4649      	mov	r1, r9
 8003d08:	7860      	ldrb	r0, [r4, #1]
 8003d0a:	f7ff fca7 	bl	800365c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--)
 8003d0e:	f1ba 0f01 	cmp.w	sl, #1
 8003d12:	d1f2      	bne.n	8003cfa <put_fat.part.8+0x196>
 8003d14:	7860      	ldrb	r0, [r4, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
 8003d16:	2301      	movs	r3, #1
 8003d18:	4632      	mov	r2, r6
 8003d1a:	4649      	mov	r1, r9
 8003d1c:	f7ff fc90 	bl	8003640 <disk_read>
 8003d20:	2800      	cmp	r0, #0
 8003d22:	d13f      	bne.n	8003da4 <put_fat.part.8+0x240>
 8003d24:	89a3      	ldrh	r3, [r4, #12]
			fs->winsect = sector;
 8003d26:	63a6      	str	r6, [r4, #56]	; 0x38
			st_word(fs->win + clst * 2 % SS(fs), (WORD) val);
 8003d28:	006d      	lsls	r5, r5, #1
 8003d2a:	fbb5 f2f3 	udiv	r2, r5, r3
			fs->wflag = 1;
 8003d2e:	2101      	movs	r1, #1
			st_word(fs->win + clst * 2 % SS(fs), (WORD) val);
 8003d30:	fb03 5312 	mls	r3, r3, r2, r5
	val >>= 8;
 8003d34:	f3c7 2507 	ubfx	r5, r7, #8, #8
			st_word(fs->win + clst * 2 % SS(fs), (WORD) val);
 8003d38:	eb09 0203 	add.w	r2, r9, r3
	*ptr++ = (BYTE) val;
 8003d3c:	f809 7003 	strb.w	r7, [r9, r3]
	*ptr++ = (BYTE) val;
 8003d40:	7055      	strb	r5, [r2, #1]
			fs->wflag = 1;
 8003d42:	70e1      	strb	r1, [r4, #3]
 8003d44:	2000      	movs	r0, #0
}
 8003d46:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (fs->wflag)
 8003d4a:	78c3      	ldrb	r3, [r0, #3]
 8003d4c:	7840      	ldrb	r0, [r0, #1]
 8003d4e:	b313      	cbz	r3, 8003d96 <put_fat.part.8+0x232>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 8003d50:	2301      	movs	r3, #1
 8003d52:	464a      	mov	r2, r9
 8003d54:	4631      	mov	r1, r6
 8003d56:	f7ff fc81 	bl	800365c <disk_write>
 8003d5a:	2800      	cmp	r0, #0
 8003d5c:	d158      	bne.n	8003e10 <put_fat.part.8+0x2ac>
			if (wsect - fs->fatbase < fs->fsize)
 8003d5e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003d60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d62:	eba9 0202 	sub.w	r2, r9, r2
 8003d66:	429a      	cmp	r2, r3
			fs->wflag = 0;
 8003d68:	70e0      	strb	r0, [r4, #3]
 8003d6a:	7860      	ldrb	r0, [r4, #1]
			if (wsect - fs->fatbase < fs->fsize)
 8003d6c:	d213      	bcs.n	8003d96 <put_fat.part.8+0x232>
				for (nf = fs->n_fats; nf >= 2; nf--)
 8003d6e:	f894 a002 	ldrb.w	sl, [r4, #2]
 8003d72:	f1ba 0f01 	cmp.w	sl, #1
 8003d76:	d802      	bhi.n	8003d7e <put_fat.part.8+0x21a>
 8003d78:	e00d      	b.n	8003d96 <put_fat.part.8+0x232>
 8003d7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d7c:	7860      	ldrb	r0, [r4, #1]
					wsect += fs->fsize;
 8003d7e:	4499      	add	r9, r3
				for (nf = fs->n_fats; nf >= 2; nf--)
 8003d80:	f10a 3aff 	add.w	sl, sl, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 8003d84:	464a      	mov	r2, r9
 8003d86:	2301      	movs	r3, #1
 8003d88:	4631      	mov	r1, r6
 8003d8a:	f7ff fc67 	bl	800365c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--)
 8003d8e:	f1ba 0f01 	cmp.w	sl, #1
 8003d92:	d1f2      	bne.n	8003d7a <put_fat.part.8+0x216>
 8003d94:	7860      	ldrb	r0, [r4, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
 8003d96:	2301      	movs	r3, #1
 8003d98:	4642      	mov	r2, r8
 8003d9a:	4631      	mov	r1, r6
 8003d9c:	f7ff fc50 	bl	8003640 <disk_read>
 8003da0:	2800      	cmp	r0, #0
 8003da2:	d03a      	beq.n	8003e1a <put_fat.part.8+0x2b6>
			fs->winsect = sector;
 8003da4:	f04f 33ff 	mov.w	r3, #4294967295
				res = FR_DISK_ERR;
 8003da8:	2001      	movs	r0, #1
			fs->winsect = sector;
 8003daa:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8003dac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (fs->wflag)
 8003db0:	78e2      	ldrb	r2, [r4, #3]
 8003db2:	7860      	ldrb	r0, [r4, #1]
 8003db4:	b1fa      	cbz	r2, 8003df6 <put_fat.part.8+0x292>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 8003db6:	4652      	mov	r2, sl
 8003db8:	4641      	mov	r1, r8
 8003dba:	f7ff fc4f 	bl	800365c <disk_write>
 8003dbe:	bb38      	cbnz	r0, 8003e10 <put_fat.part.8+0x2ac>
			if (wsect - fs->fatbase < fs->fsize)
 8003dc0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003dc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003dc4:	ebaa 0202 	sub.w	r2, sl, r2
 8003dc8:	429a      	cmp	r2, r3
			fs->wflag = 0;
 8003dca:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize)
 8003dcc:	d212      	bcs.n	8003df4 <put_fat.part.8+0x290>
				for (nf = fs->n_fats; nf >= 2; nf--)
 8003dce:	f894 b002 	ldrb.w	fp, [r4, #2]
 8003dd2:	f1bb 0f01 	cmp.w	fp, #1
 8003dd6:	d801      	bhi.n	8003ddc <put_fat.part.8+0x278>
 8003dd8:	e00c      	b.n	8003df4 <put_fat.part.8+0x290>
 8003dda:	6a63      	ldr	r3, [r4, #36]	; 0x24
					wsect += fs->fsize;
 8003ddc:	449a      	add	sl, r3
				for (nf = fs->n_fats; nf >= 2; nf--)
 8003dde:	f10b 3bff 	add.w	fp, fp, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 8003de2:	4652      	mov	r2, sl
 8003de4:	2301      	movs	r3, #1
 8003de6:	4641      	mov	r1, r8
 8003de8:	7860      	ldrb	r0, [r4, #1]
 8003dea:	f7ff fc37 	bl	800365c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--)
 8003dee:	f1bb 0f01 	cmp.w	fp, #1
 8003df2:	d1f2      	bne.n	8003dda <put_fat.part.8+0x276>
 8003df4:	7860      	ldrb	r0, [r4, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
 8003df6:	2301      	movs	r3, #1
 8003df8:	464a      	mov	r2, r9
 8003dfa:	4641      	mov	r1, r8
 8003dfc:	f7ff fc20 	bl	8003640 <disk_read>
 8003e00:	2800      	cmp	r0, #0
 8003e02:	d1cf      	bne.n	8003da4 <put_fat.part.8+0x240>
 8003e04:	89a1      	ldrh	r1, [r4, #12]
			fs->winsect = sector;
 8003e06:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
 8003e0a:	fbb6 f2f1 	udiv	r2, r6, r1
 8003e0e:	e6c8      	b.n	8003ba2 <put_fat.part.8+0x3e>
	FRESULT res = FR_INT_ERR;
 8003e10:	2001      	movs	r0, #1
}
 8003e12:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE) val << 4)) : (BYTE) val;
 8003e16:	b2fb      	uxtb	r3, r7
 8003e18:	e6d3      	b.n	8003bc2 <put_fat.part.8+0x5e>
 8003e1a:	89a2      	ldrh	r2, [r4, #12]
			fs->winsect = sector;
 8003e1c:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
 8003e20:	e728      	b.n	8003c74 <put_fat.part.8+0x110>
					((*p & 0xF0) | ((BYTE) (val >> 8) & 0x0F));
 8003e22:	f818 3006 	ldrb.w	r3, [r8, r6]
 8003e26:	f3c7 2203 	ubfx	r2, r7, #8, #4
 8003e2a:	f023 070f 	bic.w	r7, r3, #15
			*p = (clst & 1) ?
 8003e2e:	4317      	orrs	r7, r2
 8003e30:	e70c      	b.n	8003c4c <put_fat.part.8+0xe8>
 8003e32:	bf00      	nop

08003e34 <remove_chain>:
{
 8003e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (clst < 2 || clst >= fs->n_fatent)
 8003e38:	2901      	cmp	r1, #1
{
 8003e3a:	b085      	sub	sp, #20
 8003e3c:	9000      	str	r0, [sp, #0]
	if (clst < 2 || clst >= fs->n_fatent)
 8003e3e:	d914      	bls.n	8003e6a <remove_chain+0x36>
	FATFS *fs = obj->fs;
 8003e40:	6804      	ldr	r4, [r0, #0]
 8003e42:	460d      	mov	r5, r1
	if (clst < 2 || clst >= fs->n_fatent)
 8003e44:	6a23      	ldr	r3, [r4, #32]
 8003e46:	4606      	mov	r6, r0
 8003e48:	428b      	cmp	r3, r1
 8003e4a:	d90e      	bls.n	8003e6a <remove_chain+0x36>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2))
 8003e4c:	b98a      	cbnz	r2, 8003e72 <remove_chain+0x3e>
 8003e4e:	46a3      	mov	fp, r4
 8003e50:	465e      	mov	r6, fp
 8003e52:	f104 0a3c 	add.w	sl, r4, #60	; 0x3c
	if (clst < 2 || clst >= fs->n_fatent)
 8003e56:	42ab      	cmp	r3, r5
 8003e58:	d907      	bls.n	8003e6a <remove_chain+0x36>
		switch (fs->fs_type)
 8003e5a:	7833      	ldrb	r3, [r6, #0]
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	f000 814b 	beq.w	80040f8 <remove_chain+0x2c4>
 8003e62:	2b03      	cmp	r3, #3
 8003e64:	d06d      	beq.n	8003f42 <remove_chain+0x10e>
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d014      	beq.n	8003e94 <remove_chain+0x60>
			return FR_INT_ERR; /* Internal error? */
 8003e6a:	2002      	movs	r0, #2
}
 8003e6c:	b005      	add	sp, #20
 8003e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst >= 2 && clst < fs->n_fatent)
 8003e72:	2a01      	cmp	r2, #1
 8003e74:	d9f9      	bls.n	8003e6a <remove_chain+0x36>
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d9f7      	bls.n	8003e6a <remove_chain+0x36>
 8003e7a:	4611      	mov	r1, r2
 8003e7c:	4620      	mov	r0, r4
 8003e7e:	f04f 32ff 	mov.w	r2, #4294967295
 8003e82:	f7ff fe6f 	bl	8003b64 <put_fat.part.8>
		if (res != FR_OK)
 8003e86:	2800      	cmp	r0, #0
 8003e88:	d1f0      	bne.n	8003e6c <remove_chain+0x38>
 8003e8a:	f8d6 b000 	ldr.w	fp, [r6]
 8003e8e:	f8db 3020 	ldr.w	r3, [fp, #32]
 8003e92:	e7dd      	b.n	8003e50 <remove_chain+0x1c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK)
 8003e94:	89b1      	ldrh	r1, [r6, #12]
			bc += bc / 2;
 8003e96:	eb05 0755 	add.w	r7, r5, r5, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK)
 8003e9a:	fbb7 f2f1 	udiv	r2, r7, r1
 8003e9e:	6af0      	ldr	r0, [r6, #44]	; 0x2c
	if (sector != fs->winsect)
 8003ea0:	f8d6 9038 	ldr.w	r9, [r6, #56]	; 0x38
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK)
 8003ea4:	eb02 0800 	add.w	r8, r2, r0
	if (sector != fs->winsect)
 8003ea8:	45c8      	cmp	r8, r9
 8003eaa:	f040 816f 	bne.w	800418c <remove_chain+0x358>
			wc = fs->win[bc++ % SS(fs)];
 8003eae:	f107 0801 	add.w	r8, r7, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK)
 8003eb2:	fbb8 f3f1 	udiv	r3, r8, r1
			wc = fs->win[bc++ % SS(fs)];
 8003eb6:	fb01 7212 	mls	r2, r1, r2, r7
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK)
 8003eba:	181f      	adds	r7, r3, r0
			wc = fs->win[bc++ % SS(fs)];
 8003ebc:	4432      	add	r2, r6
	if (sector != fs->winsect)
 8003ebe:	454f      	cmp	r7, r9
			wc = fs->win[bc++ % SS(fs)];
 8003ec0:	f892 b03c 	ldrb.w	fp, [r2, #60]	; 0x3c
	if (sector != fs->winsect)
 8003ec4:	f000 826e 	beq.w	80043a4 <remove_chain+0x570>
	if (fs->wflag)
 8003ec8:	78f3      	ldrb	r3, [r6, #3]
 8003eca:	f106 023c 	add.w	r2, r6, #60	; 0x3c
 8003ece:	7870      	ldrb	r0, [r6, #1]
 8003ed0:	4611      	mov	r1, r2
 8003ed2:	9201      	str	r2, [sp, #4]
 8003ed4:	b333      	cbz	r3, 8003f24 <remove_chain+0xf0>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	464a      	mov	r2, r9
 8003eda:	f7ff fbbf 	bl	800365c <disk_write>
 8003ede:	2800      	cmp	r0, #0
 8003ee0:	f040 81b9 	bne.w	8004256 <remove_chain+0x422>
			if (wsect - fs->fatbase < fs->fsize)
 8003ee4:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8003ee6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003ee8:	eba9 0202 	sub.w	r2, r9, r2
 8003eec:	429a      	cmp	r2, r3
			fs->wflag = 0;
 8003eee:	70f0      	strb	r0, [r6, #3]
 8003ef0:	7870      	ldrb	r0, [r6, #1]
			if (wsect - fs->fatbase < fs->fsize)
 8003ef2:	d217      	bcs.n	8003f24 <remove_chain+0xf0>
				for (nf = fs->n_fats; nf >= 2; nf--)
 8003ef4:	f896 c002 	ldrb.w	ip, [r6, #2]
 8003ef8:	4662      	mov	r2, ip
 8003efa:	2a01      	cmp	r2, #1
 8003efc:	d912      	bls.n	8003f24 <remove_chain+0xf0>
 8003efe:	9402      	str	r4, [sp, #8]
 8003f00:	9503      	str	r5, [sp, #12]
 8003f02:	4664      	mov	r4, ip
 8003f04:	9d01      	ldr	r5, [sp, #4]
 8003f06:	e001      	b.n	8003f0c <remove_chain+0xd8>
 8003f08:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003f0a:	7870      	ldrb	r0, [r6, #1]
					wsect += fs->fsize;
 8003f0c:	4499      	add	r9, r3
				for (nf = fs->n_fats; nf >= 2; nf--)
 8003f0e:	3c01      	subs	r4, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8003f10:	464a      	mov	r2, r9
 8003f12:	2301      	movs	r3, #1
 8003f14:	4629      	mov	r1, r5
 8003f16:	f7ff fba1 	bl	800365c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--)
 8003f1a:	2c01      	cmp	r4, #1
 8003f1c:	d1f4      	bne.n	8003f08 <remove_chain+0xd4>
 8003f1e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8003f22:	7870      	ldrb	r0, [r6, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
 8003f24:	9901      	ldr	r1, [sp, #4]
 8003f26:	2301      	movs	r3, #1
 8003f28:	463a      	mov	r2, r7
 8003f2a:	f7ff fb89 	bl	8003640 <disk_read>
 8003f2e:	2800      	cmp	r0, #0
 8003f30:	f000 8234 	beq.w	800439c <remove_chain+0x568>
			fs->winsect = sector;
 8003f34:	f04f 33ff 	mov.w	r3, #4294967295
			return FR_DISK_ERR; /* Disk error? */
 8003f38:	2001      	movs	r0, #1
			fs->winsect = sector;
 8003f3a:	63b3      	str	r3, [r6, #56]	; 0x38
}
 8003f3c:	b005      	add	sp, #20
 8003f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK)
 8003f42:	89b2      	ldrh	r2, [r6, #12]
 8003f44:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8003f46:	0897      	lsrs	r7, r2, #2
 8003f48:	fbb5 f7f7 	udiv	r7, r5, r7
	if (sector != fs->winsect)
 8003f4c:	f8d6 9038 	ldr.w	r9, [r6, #56]	; 0x38
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK)
 8003f50:	441f      	add	r7, r3
	if (sector != fs->winsect)
 8003f52:	454f      	cmp	r7, r9
 8003f54:	f106 083c 	add.w	r8, r6, #60	; 0x3c
 8003f58:	f040 814d 	bne.w	80041f6 <remove_chain+0x3c2>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8003f5c:	00a9      	lsls	r1, r5, #2
 8003f5e:	fbb1 f3f2 	udiv	r3, r1, r2
 8003f62:	fb02 1313 	mls	r3, r2, r3, r1
 8003f66:	eb08 0203 	add.w	r2, r8, r3
	rv = rv << 8 | ptr[2];
 8003f6a:	8851      	ldrh	r1, [r2, #2]
	rv = rv << 8 | ptr[1];
 8003f6c:	f892 b001 	ldrb.w	fp, [r2, #1]
	rv = rv << 8 | ptr[0];
 8003f70:	f818 6003 	ldrb.w	r6, [r8, r3]
	rv = rv << 8 | ptr[1];
 8003f74:	ea4b 2b01 	orr.w	fp, fp, r1, lsl #8
	rv = rv << 8 | ptr[0];
 8003f78:	ea46 260b 	orr.w	r6, r6, fp, lsl #8
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8003f7c:	f026 4670 	bic.w	r6, r6, #4026531840	; 0xf0000000
		if (nxt == 0)
 8003f80:	2e00      	cmp	r6, #0
 8003f82:	f000 821d 	beq.w	80043c0 <remove_chain+0x58c>
		if (nxt == 1)
 8003f86:	2e01      	cmp	r6, #1
 8003f88:	f43f af6f 	beq.w	8003e6a <remove_chain+0x36>
	if (clst >= 2 && clst < fs->n_fatent)
 8003f8c:	6a23      	ldr	r3, [r4, #32]
 8003f8e:	42ab      	cmp	r3, r5
 8003f90:	f67f af6b 	bls.w	8003e6a <remove_chain+0x36>
		switch (fs->fs_type)
 8003f94:	7823      	ldrb	r3, [r4, #0]
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	f000 81b0 	beq.w	80042fc <remove_chain+0x4c8>
 8003f9c:	2b03      	cmp	r3, #3
 8003f9e:	f000 815e 	beq.w	800425e <remove_chain+0x42a>
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	f47f af61 	bne.w	8003e6a <remove_chain+0x36>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003fa8:	89a1      	ldrh	r1, [r4, #12]
			bc += bc / 2;
 8003faa:	eb05 0855 	add.w	r8, r5, r5, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003fae:	fbb8 f2f1 	udiv	r2, r8, r1
 8003fb2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
	if (sector != fs->winsect)
 8003fb4:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003fb8:	4417      	add	r7, r2
	if (sector != fs->winsect)
 8003fba:	454f      	cmp	r7, r9
 8003fbc:	d030      	beq.n	8004020 <remove_chain+0x1ec>
	if (fs->wflag)
 8003fbe:	78e2      	ldrb	r2, [r4, #3]
 8003fc0:	7860      	ldrb	r0, [r4, #1]
 8003fc2:	b30a      	cbz	r2, 8004008 <remove_chain+0x1d4>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 8003fc4:	464a      	mov	r2, r9
 8003fc6:	4651      	mov	r1, sl
 8003fc8:	f7ff fb48 	bl	800365c <disk_write>
 8003fcc:	2800      	cmp	r0, #0
 8003fce:	f040 8142 	bne.w	8004256 <remove_chain+0x422>
			if (wsect - fs->fatbase < fs->fsize)
 8003fd2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003fd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003fd6:	eba9 0202 	sub.w	r2, r9, r2
 8003fda:	429a      	cmp	r2, r3
			fs->wflag = 0;
 8003fdc:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize)
 8003fde:	d212      	bcs.n	8004006 <remove_chain+0x1d2>
				for (nf = fs->n_fats; nf >= 2; nf--)
 8003fe0:	f894 b002 	ldrb.w	fp, [r4, #2]
 8003fe4:	f1bb 0f01 	cmp.w	fp, #1
 8003fe8:	d801      	bhi.n	8003fee <remove_chain+0x1ba>
 8003fea:	e00c      	b.n	8004006 <remove_chain+0x1d2>
 8003fec:	6a63      	ldr	r3, [r4, #36]	; 0x24
					wsect += fs->fsize;
 8003fee:	4499      	add	r9, r3
				for (nf = fs->n_fats; nf >= 2; nf--)
 8003ff0:	f10b 3bff 	add.w	fp, fp, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 8003ff4:	464a      	mov	r2, r9
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	4651      	mov	r1, sl
 8003ffa:	7860      	ldrb	r0, [r4, #1]
 8003ffc:	f7ff fb2e 	bl	800365c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--)
 8004000:	f1bb 0f01 	cmp.w	fp, #1
 8004004:	d1f2      	bne.n	8003fec <remove_chain+0x1b8>
 8004006:	7860      	ldrb	r0, [r4, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
 8004008:	2301      	movs	r3, #1
 800400a:	463a      	mov	r2, r7
 800400c:	4651      	mov	r1, sl
 800400e:	f7ff fb17 	bl	8003640 <disk_read>
 8004012:	2800      	cmp	r0, #0
 8004014:	f040 81b9 	bne.w	800438a <remove_chain+0x556>
 8004018:	89a1      	ldrh	r1, [r4, #12]
			fs->winsect = sector;
 800401a:	63a7      	str	r7, [r4, #56]	; 0x38
 800401c:	fbb8 f2f1 	udiv	r2, r8, r1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE) val << 4)) : (BYTE) val;
 8004020:	f015 0901 	ands.w	r9, r5, #1
 8004024:	bf08      	it	eq
 8004026:	464b      	moveq	r3, r9
			p = fs->win + bc++ % SS(fs);
 8004028:	fb01 8212 	mls	r2, r1, r2, r8
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE) val << 4)) : (BYTE) val;
 800402c:	bf18      	it	ne
 800402e:	f81a 3002 	ldrbne.w	r3, [sl, r2]
			p = fs->win + bc++ % SS(fs);
 8004032:	f108 0801 	add.w	r8, r8, #1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE) val << 4)) : (BYTE) val;
 8004036:	bf18      	it	ne
 8004038:	f003 030f 	andne.w	r3, r3, #15
 800403c:	f80a 3002 	strb.w	r3, [sl, r2]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004040:	89a2      	ldrh	r2, [r4, #12]
			fs->wflag = 1;
 8004042:	f04f 0101 	mov.w	r1, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004046:	fbb8 f3f2 	udiv	r3, r8, r2
 800404a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
	if (sector != fs->winsect)
 800404c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800404e:	441f      	add	r7, r3
	if (sector != fs->winsect)
 8004050:	42af      	cmp	r7, r5
			fs->wflag = 1;
 8004052:	70e1      	strb	r1, [r4, #3]
	if (sector != fs->winsect)
 8004054:	d02e      	beq.n	80040b4 <remove_chain+0x280>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 8004056:	2301      	movs	r3, #1
 8004058:	462a      	mov	r2, r5
 800405a:	4651      	mov	r1, sl
 800405c:	7860      	ldrb	r0, [r4, #1]
 800405e:	f7ff fafd 	bl	800365c <disk_write>
 8004062:	2800      	cmp	r0, #0
 8004064:	f040 80f7 	bne.w	8004256 <remove_chain+0x422>
			if (wsect - fs->fatbase < fs->fsize)
 8004068:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800406a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800406c:	1aaa      	subs	r2, r5, r2
 800406e:	429a      	cmp	r2, r3
			fs->wflag = 0;
 8004070:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize)
 8004072:	d212      	bcs.n	800409a <remove_chain+0x266>
				for (nf = fs->n_fats; nf >= 2; nf--)
 8004074:	f894 b002 	ldrb.w	fp, [r4, #2]
 8004078:	f1bb 0f01 	cmp.w	fp, #1
 800407c:	d801      	bhi.n	8004082 <remove_chain+0x24e>
 800407e:	e00c      	b.n	800409a <remove_chain+0x266>
 8004080:	6a63      	ldr	r3, [r4, #36]	; 0x24
					wsect += fs->fsize;
 8004082:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--)
 8004084:	f10b 3bff 	add.w	fp, fp, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 8004088:	462a      	mov	r2, r5
 800408a:	2301      	movs	r3, #1
 800408c:	4651      	mov	r1, sl
 800408e:	7860      	ldrb	r0, [r4, #1]
 8004090:	f7ff fae4 	bl	800365c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--)
 8004094:	f1bb 0f01 	cmp.w	fp, #1
 8004098:	d1f2      	bne.n	8004080 <remove_chain+0x24c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
 800409a:	2301      	movs	r3, #1
 800409c:	463a      	mov	r2, r7
 800409e:	4651      	mov	r1, sl
 80040a0:	7860      	ldrb	r0, [r4, #1]
 80040a2:	f7ff facd 	bl	8003640 <disk_read>
 80040a6:	2800      	cmp	r0, #0
 80040a8:	f040 816f 	bne.w	800438a <remove_chain+0x556>
 80040ac:	89a2      	ldrh	r2, [r4, #12]
			fs->winsect = sector;
 80040ae:	63a7      	str	r7, [r4, #56]	; 0x38
 80040b0:	fbb8 f3f2 	udiv	r3, r8, r2
			p = fs->win + bc % SS(fs);
 80040b4:	fb02 8813 	mls	r8, r2, r3, r8
			*p = (clst & 1) ?
 80040b8:	f1b9 0f00 	cmp.w	r9, #0
 80040bc:	f040 816c 	bne.w	8004398 <remove_chain+0x564>
					((*p & 0xF0) | ((BYTE) (val >> 8) & 0x0F));
 80040c0:	f81a 3008 	ldrb.w	r3, [sl, r8]
			*p = (clst & 1) ?
 80040c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040c8:	f80a 3008 	strb.w	r3, [sl, r8]
			fs->wflag = 1;
 80040cc:	f04f 0301 	mov.w	r3, #1
 80040d0:	70e3      	strb	r3, [r4, #3]
		if (fs->free_clst < fs->n_fatent - 2)
 80040d2:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 80040d6:	1e91      	subs	r1, r2, #2
 80040d8:	428b      	cmp	r3, r1
 80040da:	d205      	bcs.n	80040e8 <remove_chain+0x2b4>
			fs->fsi_flag |= 1;
 80040dc:	7921      	ldrb	r1, [r4, #4]
			fs->free_clst++;
 80040de:	3301      	adds	r3, #1
			fs->fsi_flag |= 1;
 80040e0:	f041 0101 	orr.w	r1, r1, #1
			fs->free_clst++;
 80040e4:	61e3      	str	r3, [r4, #28]
			fs->fsi_flag |= 1;
 80040e6:	7121      	strb	r1, [r4, #4]
	} while (clst < fs->n_fatent); /* Repeat while not the last link */
 80040e8:	42b2      	cmp	r2, r6
 80040ea:	f240 8169 	bls.w	80043c0 <remove_chain+0x58c>
		nxt = get_fat(obj, clst); /* Get cluster status */
 80040ee:	9b00      	ldr	r3, [sp, #0]
 80040f0:	4635      	mov	r5, r6
 80040f2:	681e      	ldr	r6, [r3, #0]
 80040f4:	6a33      	ldr	r3, [r6, #32]
 80040f6:	e6ae      	b.n	8003e56 <remove_chain+0x22>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK)
 80040f8:	89b2      	ldrh	r2, [r6, #12]
 80040fa:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 80040fc:	0857      	lsrs	r7, r2, #1
 80040fe:	fbb5 f7f7 	udiv	r7, r5, r7
	if (sector != fs->winsect)
 8004102:	f8d6 9038 	ldr.w	r9, [r6, #56]	; 0x38
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK)
 8004106:	441f      	add	r7, r3
	if (sector != fs->winsect)
 8004108:	454f      	cmp	r7, r9
 800410a:	f106 083c 	add.w	r8, r6, #60	; 0x3c
 800410e:	d02f      	beq.n	8004170 <remove_chain+0x33c>
	if (fs->wflag)
 8004110:	78f3      	ldrb	r3, [r6, #3]
 8004112:	7870      	ldrb	r0, [r6, #1]
 8004114:	b313      	cbz	r3, 800415c <remove_chain+0x328>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 8004116:	2301      	movs	r3, #1
 8004118:	464a      	mov	r2, r9
 800411a:	4641      	mov	r1, r8
 800411c:	f7ff fa9e 	bl	800365c <disk_write>
 8004120:	2800      	cmp	r0, #0
 8004122:	f040 8098 	bne.w	8004256 <remove_chain+0x422>
			if (wsect - fs->fatbase < fs->fsize)
 8004126:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8004128:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800412a:	eba9 0202 	sub.w	r2, r9, r2
 800412e:	429a      	cmp	r2, r3
			fs->wflag = 0;
 8004130:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize)
 8004132:	d212      	bcs.n	800415a <remove_chain+0x326>
				for (nf = fs->n_fats; nf >= 2; nf--)
 8004134:	f896 b002 	ldrb.w	fp, [r6, #2]
 8004138:	f1bb 0f01 	cmp.w	fp, #1
 800413c:	d801      	bhi.n	8004142 <remove_chain+0x30e>
 800413e:	e00c      	b.n	800415a <remove_chain+0x326>
 8004140:	6a73      	ldr	r3, [r6, #36]	; 0x24
					wsect += fs->fsize;
 8004142:	4499      	add	r9, r3
				for (nf = fs->n_fats; nf >= 2; nf--)
 8004144:	f10b 3bff 	add.w	fp, fp, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 8004148:	464a      	mov	r2, r9
 800414a:	2301      	movs	r3, #1
 800414c:	4641      	mov	r1, r8
 800414e:	7870      	ldrb	r0, [r6, #1]
 8004150:	f7ff fa84 	bl	800365c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--)
 8004154:	f1bb 0f01 	cmp.w	fp, #1
 8004158:	d1f2      	bne.n	8004140 <remove_chain+0x30c>
 800415a:	7870      	ldrb	r0, [r6, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
 800415c:	2301      	movs	r3, #1
 800415e:	463a      	mov	r2, r7
 8004160:	4641      	mov	r1, r8
 8004162:	f7ff fa6d 	bl	8003640 <disk_read>
 8004166:	2800      	cmp	r0, #0
 8004168:	f47f aee4 	bne.w	8003f34 <remove_chain+0x100>
 800416c:	89b2      	ldrh	r2, [r6, #12]
			fs->winsect = sector;
 800416e:	63b7      	str	r7, [r6, #56]	; 0x38
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8004170:	0069      	lsls	r1, r5, #1
 8004172:	fbb1 f3f2 	udiv	r3, r1, r2
 8004176:	fb02 1313 	mls	r3, r2, r3, r1
 800417a:	eb08 0203 	add.w	r2, r8, r3
	rv = rv << 8 | ptr[0];
 800417e:	f892 b001 	ldrb.w	fp, [r2, #1]
 8004182:	f818 6003 	ldrb.w	r6, [r8, r3]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8004186:	ea46 260b 	orr.w	r6, r6, fp, lsl #8
 800418a:	e6f9      	b.n	8003f80 <remove_chain+0x14c>
	if (fs->wflag)
 800418c:	78f2      	ldrb	r2, [r6, #3]
 800418e:	7870      	ldrb	r0, [r6, #1]
 8004190:	f106 0b3c 	add.w	fp, r6, #60	; 0x3c
 8004194:	b1fa      	cbz	r2, 80041d6 <remove_chain+0x3a2>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 8004196:	464a      	mov	r2, r9
 8004198:	4659      	mov	r1, fp
 800419a:	f7ff fa5f 	bl	800365c <disk_write>
 800419e:	2800      	cmp	r0, #0
 80041a0:	d159      	bne.n	8004256 <remove_chain+0x422>
			if (wsect - fs->fatbase < fs->fsize)
 80041a2:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 80041a4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80041a6:	eba9 0202 	sub.w	r2, r9, r2
 80041aa:	429a      	cmp	r2, r3
			fs->wflag = 0;
 80041ac:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize)
 80041ae:	d211      	bcs.n	80041d4 <remove_chain+0x3a0>
				for (nf = fs->n_fats; nf >= 2; nf--)
 80041b0:	78b2      	ldrb	r2, [r6, #2]
 80041b2:	2a01      	cmp	r2, #1
 80041b4:	d90e      	bls.n	80041d4 <remove_chain+0x3a0>
 80041b6:	9401      	str	r4, [sp, #4]
 80041b8:	4614      	mov	r4, r2
 80041ba:	e000      	b.n	80041be <remove_chain+0x38a>
 80041bc:	6a73      	ldr	r3, [r6, #36]	; 0x24
					wsect += fs->fsize;
 80041be:	4499      	add	r9, r3
				for (nf = fs->n_fats; nf >= 2; nf--)
 80041c0:	3c01      	subs	r4, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 80041c2:	464a      	mov	r2, r9
 80041c4:	2301      	movs	r3, #1
 80041c6:	4659      	mov	r1, fp
 80041c8:	7870      	ldrb	r0, [r6, #1]
 80041ca:	f7ff fa47 	bl	800365c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--)
 80041ce:	2c01      	cmp	r4, #1
 80041d0:	d1f4      	bne.n	80041bc <remove_chain+0x388>
 80041d2:	9c01      	ldr	r4, [sp, #4]
 80041d4:	7870      	ldrb	r0, [r6, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
 80041d6:	4659      	mov	r1, fp
 80041d8:	2301      	movs	r3, #1
 80041da:	4642      	mov	r2, r8
 80041dc:	f7ff fa30 	bl	8003640 <disk_read>
 80041e0:	2800      	cmp	r0, #0
 80041e2:	f47f aea7 	bne.w	8003f34 <remove_chain+0x100>
 80041e6:	89b1      	ldrh	r1, [r6, #12]
			fs->winsect = sector;
 80041e8:	46c1      	mov	r9, r8
 80041ea:	fbb7 f2f1 	udiv	r2, r7, r1
 80041ee:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 80041f0:	f8c6 8038 	str.w	r8, [r6, #56]	; 0x38
 80041f4:	e65b      	b.n	8003eae <remove_chain+0x7a>
	if (fs->wflag)
 80041f6:	78f3      	ldrb	r3, [r6, #3]
 80041f8:	7870      	ldrb	r0, [r6, #1]
 80041fa:	b30b      	cbz	r3, 8004240 <remove_chain+0x40c>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 80041fc:	2301      	movs	r3, #1
 80041fe:	464a      	mov	r2, r9
 8004200:	4641      	mov	r1, r8
 8004202:	f7ff fa2b 	bl	800365c <disk_write>
 8004206:	bb30      	cbnz	r0, 8004256 <remove_chain+0x422>
			if (wsect - fs->fatbase < fs->fsize)
 8004208:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 800420a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800420c:	eba9 0202 	sub.w	r2, r9, r2
 8004210:	429a      	cmp	r2, r3
			fs->wflag = 0;
 8004212:	70f0      	strb	r0, [r6, #3]
 8004214:	7870      	ldrb	r0, [r6, #1]
			if (wsect - fs->fatbase < fs->fsize)
 8004216:	d213      	bcs.n	8004240 <remove_chain+0x40c>
				for (nf = fs->n_fats; nf >= 2; nf--)
 8004218:	f896 b002 	ldrb.w	fp, [r6, #2]
 800421c:	f1bb 0f01 	cmp.w	fp, #1
 8004220:	d802      	bhi.n	8004228 <remove_chain+0x3f4>
 8004222:	e00d      	b.n	8004240 <remove_chain+0x40c>
 8004224:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004226:	7870      	ldrb	r0, [r6, #1]
					wsect += fs->fsize;
 8004228:	4499      	add	r9, r3
				for (nf = fs->n_fats; nf >= 2; nf--)
 800422a:	f10b 3bff 	add.w	fp, fp, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 800422e:	464a      	mov	r2, r9
 8004230:	2301      	movs	r3, #1
 8004232:	4641      	mov	r1, r8
 8004234:	f7ff fa12 	bl	800365c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--)
 8004238:	f1bb 0f01 	cmp.w	fp, #1
 800423c:	d1f2      	bne.n	8004224 <remove_chain+0x3f0>
 800423e:	7870      	ldrb	r0, [r6, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
 8004240:	2301      	movs	r3, #1
 8004242:	463a      	mov	r2, r7
 8004244:	4641      	mov	r1, r8
 8004246:	f7ff f9fb 	bl	8003640 <disk_read>
 800424a:	2800      	cmp	r0, #0
 800424c:	f47f ae72 	bne.w	8003f34 <remove_chain+0x100>
 8004250:	89b2      	ldrh	r2, [r6, #12]
			fs->winsect = sector;
 8004252:	63b7      	str	r7, [r6, #56]	; 0x38
 8004254:	e682      	b.n	8003f5c <remove_chain+0x128>
			return FR_DISK_ERR; /* Disk error? */
 8004256:	2001      	movs	r0, #1
}
 8004258:	b005      	add	sp, #20
 800425a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800425e:	89a2      	ldrh	r2, [r4, #12]
 8004260:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004262:	0893      	lsrs	r3, r2, #2
 8004264:	fbb5 f3f3 	udiv	r3, r5, r3
	if (sector != fs->winsect)
 8004268:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800426c:	441f      	add	r7, r3
	if (sector != fs->winsect)
 800426e:	4547      	cmp	r7, r8
 8004270:	d02e      	beq.n	80042d0 <remove_chain+0x49c>
	if (fs->wflag)
 8004272:	78e3      	ldrb	r3, [r4, #3]
 8004274:	7860      	ldrb	r0, [r4, #1]
 8004276:	b313      	cbz	r3, 80042be <remove_chain+0x48a>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 8004278:	2301      	movs	r3, #1
 800427a:	4642      	mov	r2, r8
 800427c:	4651      	mov	r1, sl
 800427e:	f7ff f9ed 	bl	800365c <disk_write>
 8004282:	2800      	cmp	r0, #0
 8004284:	d1e7      	bne.n	8004256 <remove_chain+0x422>
			if (wsect - fs->fatbase < fs->fsize)
 8004286:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004288:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800428a:	eba8 0202 	sub.w	r2, r8, r2
 800428e:	429a      	cmp	r2, r3
			fs->wflag = 0;
 8004290:	70e0      	strb	r0, [r4, #3]
 8004292:	7860      	ldrb	r0, [r4, #1]
			if (wsect - fs->fatbase < fs->fsize)
 8004294:	d213      	bcs.n	80042be <remove_chain+0x48a>
				for (nf = fs->n_fats; nf >= 2; nf--)
 8004296:	f894 9002 	ldrb.w	r9, [r4, #2]
 800429a:	f1b9 0f01 	cmp.w	r9, #1
 800429e:	d802      	bhi.n	80042a6 <remove_chain+0x472>
 80042a0:	e00d      	b.n	80042be <remove_chain+0x48a>
 80042a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80042a4:	7860      	ldrb	r0, [r4, #1]
					wsect += fs->fsize;
 80042a6:	4498      	add	r8, r3
				for (nf = fs->n_fats; nf >= 2; nf--)
 80042a8:	f109 39ff 	add.w	r9, r9, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 80042ac:	4642      	mov	r2, r8
 80042ae:	2301      	movs	r3, #1
 80042b0:	4651      	mov	r1, sl
 80042b2:	f7ff f9d3 	bl	800365c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--)
 80042b6:	f1b9 0f01 	cmp.w	r9, #1
 80042ba:	d1f2      	bne.n	80042a2 <remove_chain+0x46e>
 80042bc:	7860      	ldrb	r0, [r4, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
 80042be:	2301      	movs	r3, #1
 80042c0:	463a      	mov	r2, r7
 80042c2:	4651      	mov	r1, sl
 80042c4:	f7ff f9bc 	bl	8003640 <disk_read>
 80042c8:	2800      	cmp	r0, #0
 80042ca:	d15e      	bne.n	800438a <remove_chain+0x556>
 80042cc:	89a2      	ldrh	r2, [r4, #12]
			fs->winsect = sector;
 80042ce:	63a7      	str	r7, [r4, #56]	; 0x38
						| (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80042d0:	00ad      	lsls	r5, r5, #2
 80042d2:	fbb5 f3f2 	udiv	r3, r5, r2
	*ptr++ = (BYTE) val;
 80042d6:	f04f 0100 	mov.w	r1, #0
						| (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80042da:	fb02 5513 	mls	r5, r2, r3, r5
 80042de:	eb0a 0205 	add.w	r2, sl, r5
	rv = rv << 8 | ptr[2];
 80042e2:	8853      	ldrh	r3, [r2, #2]
	*ptr++ = (BYTE) val;
 80042e4:	f80a 1005 	strb.w	r1, [sl, r5]
	val >>= 8;
 80042e8:	0a1b      	lsrs	r3, r3, #8
 80042ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	*ptr++ = (BYTE) val;
 80042ee:	70d3      	strb	r3, [r2, #3]
			fs->wflag = 1;
 80042f0:	f04f 0301 	mov.w	r3, #1
	*ptr++ = (BYTE) val;
 80042f4:	7051      	strb	r1, [r2, #1]
	*ptr++ = (BYTE) val;
 80042f6:	7091      	strb	r1, [r2, #2]
			fs->wflag = 1;
 80042f8:	70e3      	strb	r3, [r4, #3]
 80042fa:	e6ea      	b.n	80040d2 <remove_chain+0x29e>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80042fc:	89a3      	ldrh	r3, [r4, #12]
 80042fe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004300:	085f      	lsrs	r7, r3, #1
 8004302:	fbb5 f7f7 	udiv	r7, r5, r7
	if (sector != fs->winsect)
 8004306:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800430a:	4417      	add	r7, r2
	if (sector != fs->winsect)
 800430c:	4547      	cmp	r7, r8
 800430e:	d02c      	beq.n	800436a <remove_chain+0x536>
	if (fs->wflag)
 8004310:	78e3      	ldrb	r3, [r4, #3]
 8004312:	7860      	ldrb	r0, [r4, #1]
 8004314:	b30b      	cbz	r3, 800435a <remove_chain+0x526>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 8004316:	2301      	movs	r3, #1
 8004318:	4642      	mov	r2, r8
 800431a:	4651      	mov	r1, sl
 800431c:	f7ff f99e 	bl	800365c <disk_write>
 8004320:	2800      	cmp	r0, #0
 8004322:	d198      	bne.n	8004256 <remove_chain+0x422>
			if (wsect - fs->fatbase < fs->fsize)
 8004324:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004326:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004328:	eba8 0202 	sub.w	r2, r8, r2
 800432c:	429a      	cmp	r2, r3
			fs->wflag = 0;
 800432e:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize)
 8004330:	d212      	bcs.n	8004358 <remove_chain+0x524>
				for (nf = fs->n_fats; nf >= 2; nf--)
 8004332:	f894 9002 	ldrb.w	r9, [r4, #2]
 8004336:	f1b9 0f01 	cmp.w	r9, #1
 800433a:	d801      	bhi.n	8004340 <remove_chain+0x50c>
 800433c:	e00c      	b.n	8004358 <remove_chain+0x524>
 800433e:	6a63      	ldr	r3, [r4, #36]	; 0x24
					wsect += fs->fsize;
 8004340:	4498      	add	r8, r3
				for (nf = fs->n_fats; nf >= 2; nf--)
 8004342:	f109 39ff 	add.w	r9, r9, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 8004346:	4642      	mov	r2, r8
 8004348:	2301      	movs	r3, #1
 800434a:	4651      	mov	r1, sl
 800434c:	7860      	ldrb	r0, [r4, #1]
 800434e:	f7ff f985 	bl	800365c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--)
 8004352:	f1b9 0f01 	cmp.w	r9, #1
 8004356:	d1f2      	bne.n	800433e <remove_chain+0x50a>
 8004358:	7860      	ldrb	r0, [r4, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
 800435a:	2301      	movs	r3, #1
 800435c:	463a      	mov	r2, r7
 800435e:	4651      	mov	r1, sl
 8004360:	f7ff f96e 	bl	8003640 <disk_read>
 8004364:	b988      	cbnz	r0, 800438a <remove_chain+0x556>
 8004366:	89a3      	ldrh	r3, [r4, #12]
			fs->winsect = sector;
 8004368:	63a7      	str	r7, [r4, #56]	; 0x38
			st_word(fs->win + clst * 2 % SS(fs), (WORD) val);
 800436a:	006d      	lsls	r5, r5, #1
 800436c:	fbb5 f2f3 	udiv	r2, r5, r3
	*ptr++ = (BYTE) val;
 8004370:	f04f 0100 	mov.w	r1, #0
			st_word(fs->win + clst * 2 % SS(fs), (WORD) val);
 8004374:	fb03 5312 	mls	r3, r3, r2, r5
	*ptr++ = (BYTE) val;
 8004378:	f80a 1003 	strb.w	r1, [sl, r3]
			st_word(fs->win + clst * 2 % SS(fs), (WORD) val);
 800437c:	eb0a 0203 	add.w	r2, sl, r3
			fs->wflag = 1;
 8004380:	f04f 0301 	mov.w	r3, #1
	*ptr++ = (BYTE) val;
 8004384:	7051      	strb	r1, [r2, #1]
			fs->wflag = 1;
 8004386:	70e3      	strb	r3, [r4, #3]
 8004388:	e6a3      	b.n	80040d2 <remove_chain+0x29e>
			fs->winsect = sector;
 800438a:	f04f 33ff 	mov.w	r3, #4294967295
				res = FR_DISK_ERR;
 800438e:	2001      	movs	r0, #1
			fs->winsect = sector;
 8004390:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8004392:	b005      	add	sp, #20
 8004394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			*p = (clst & 1) ?
 8004398:	2300      	movs	r3, #0
 800439a:	e695      	b.n	80040c8 <remove_chain+0x294>
 800439c:	89b1      	ldrh	r1, [r6, #12]
			fs->winsect = sector;
 800439e:	63b7      	str	r7, [r6, #56]	; 0x38
 80043a0:	fbb8 f3f1 	udiv	r3, r8, r1
			wc |= fs->win[bc % SS(fs)] << 8;
 80043a4:	fb01 8813 	mls	r8, r1, r3, r8
 80043a8:	4446      	add	r6, r8
 80043aa:	f896 603c 	ldrb.w	r6, [r6, #60]	; 0x3c
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80043ae:	07eb      	lsls	r3, r5, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 80043b0:	ea4b 2b06 	orr.w	fp, fp, r6, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80043b4:	bf4c      	ite	mi
 80043b6:	ea4f 161b 	movmi.w	r6, fp, lsr #4
 80043ba:	f3cb 060b 	ubfxpl	r6, fp, #0, #12
 80043be:	e5df      	b.n	8003f80 <remove_chain+0x14c>
	return FR_OK;
 80043c0:	2000      	movs	r0, #0
 80043c2:	e553      	b.n	8003e6c <remove_chain+0x38>

080043c4 <get_fat.isra.9>:
	if (clst < 2 || clst >= fs->n_fatent)
 80043c4:	2901      	cmp	r1, #1
 80043c6:	d937      	bls.n	8004438 <get_fat.isra.9+0x74>
static DWORD get_fat( /* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 80043c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (clst < 2 || clst >= fs->n_fatent)
 80043cc:	6a03      	ldr	r3, [r0, #32]
 80043ce:	4299      	cmp	r1, r3
 80043d0:	d22f      	bcs.n	8004432 <get_fat.isra.9+0x6e>
		switch (fs->fs_type)
 80043d2:	7803      	ldrb	r3, [r0, #0]
 80043d4:	4604      	mov	r4, r0
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	460d      	mov	r5, r1
 80043da:	d04b      	beq.n	8004474 <get_fat.isra.9+0xb0>
 80043dc:	2b03      	cmp	r3, #3
 80043de:	d02d      	beq.n	800443c <get_fat.isra.9+0x78>
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d126      	bne.n	8004432 <get_fat.isra.9+0x6e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK)
 80043e4:	8981      	ldrh	r1, [r0, #12]
			bc += bc / 2;
 80043e6:	eb05 0655 	add.w	r6, r5, r5, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK)
 80043ea:	fbb6 f2f1 	udiv	r2, r6, r1
 80043ee:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
	if (sector != fs->winsect)
 80043f0:	6ba7      	ldr	r7, [r4, #56]	; 0x38
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK)
 80043f2:	eb02 0800 	add.w	r8, r2, r0
	if (sector != fs->winsect)
 80043f6:	45b8      	cmp	r8, r7
 80043f8:	f040 80b4 	bne.w	8004564 <get_fat.isra.9+0x1a0>
			wc = fs->win[bc++ % SS(fs)];
 80043fc:	f106 0801 	add.w	r8, r6, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK)
 8004400:	fbb8 f3f1 	udiv	r3, r8, r1
			wc = fs->win[bc++ % SS(fs)];
 8004404:	fb01 6212 	mls	r2, r1, r2, r6
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK)
 8004408:	eb03 0900 	add.w	r9, r3, r0
			wc = fs->win[bc++ % SS(fs)];
 800440c:	4422      	add	r2, r4
	if (sector != fs->winsect)
 800440e:	45b9      	cmp	r9, r7
			wc = fs->win[bc++ % SS(fs)];
 8004410:	f892 603c 	ldrb.w	r6, [r2, #60]	; 0x3c
	if (sector != fs->winsect)
 8004414:	f040 80da 	bne.w	80045cc <get_fat.isra.9+0x208>
			wc |= fs->win[bc % SS(fs)] << 8;
 8004418:	fb01 8813 	mls	r8, r1, r3, r8
 800441c:	4444      	add	r4, r8
 800441e:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004422:	07eb      	lsls	r3, r5, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 8004424:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004428:	bf4c      	ite	mi
 800442a:	0900      	lsrmi	r0, r0, #4
 800442c:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 8004430:	e000      	b.n	8004434 <get_fat.isra.9+0x70>
			val = 1; /* Internal error */
 8004432:	2001      	movs	r0, #1
}
 8004434:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		val = 1; /* Internal error */
 8004438:	2001      	movs	r0, #1
}
 800443a:	4770      	bx	lr
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK)
 800443c:	8983      	ldrh	r3, [r0, #12]
 800443e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8004440:	089e      	lsrs	r6, r3, #2
 8004442:	fbb1 f6f6 	udiv	r6, r1, r6
	if (sector != fs->winsect)
 8004446:	f8d0 8038 	ldr.w	r8, [r0, #56]	; 0x38
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK)
 800444a:	4416      	add	r6, r2
	if (sector != fs->winsect)
 800444c:	4546      	cmp	r6, r8
 800444e:	f100 073c 	add.w	r7, r0, #60	; 0x3c
 8004452:	d156      	bne.n	8004502 <get_fat.isra.9+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8004454:	00a9      	lsls	r1, r5, #2
 8004456:	fbb1 f5f3 	udiv	r5, r1, r3
 800445a:	fb03 1115 	mls	r1, r3, r5, r1
 800445e:	187a      	adds	r2, r7, r1
	rv = rv << 8 | ptr[2];
 8004460:	8854      	ldrh	r4, [r2, #2]
	rv = rv << 8 | ptr[1];
 8004462:	7853      	ldrb	r3, [r2, #1]
	rv = rv << 8 | ptr[0];
 8004464:	5c78      	ldrb	r0, [r7, r1]
	rv = rv << 8 | ptr[1];
 8004466:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
	rv = rv << 8 | ptr[0];
 800446a:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800446e:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
 8004472:	e7df      	b.n	8004434 <get_fat.isra.9+0x70>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK)
 8004474:	8982      	ldrh	r2, [r0, #12]
 8004476:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004478:	0856      	lsrs	r6, r2, #1
 800447a:	fbb1 f6f6 	udiv	r6, r1, r6
	if (sector != fs->winsect)
 800447e:	f8d0 8038 	ldr.w	r8, [r0, #56]	; 0x38
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK)
 8004482:	441e      	add	r6, r3
	if (sector != fs->winsect)
 8004484:	4546      	cmp	r6, r8
 8004486:	f100 073c 	add.w	r7, r0, #60	; 0x3c
 800448a:	d02f      	beq.n	80044ec <get_fat.isra.9+0x128>
	if (fs->wflag)
 800448c:	78c3      	ldrb	r3, [r0, #3]
 800448e:	7840      	ldrb	r0, [r0, #1]
 8004490:	b313      	cbz	r3, 80044d8 <get_fat.isra.9+0x114>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 8004492:	2301      	movs	r3, #1
 8004494:	4642      	mov	r2, r8
 8004496:	4639      	mov	r1, r7
 8004498:	f7ff f8e0 	bl	800365c <disk_write>
 800449c:	2800      	cmp	r0, #0
 800449e:	f040 80cb 	bne.w	8004638 <get_fat.isra.9+0x274>
			if (wsect - fs->fatbase < fs->fsize)
 80044a2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80044a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80044a6:	eba8 0202 	sub.w	r2, r8, r2
 80044aa:	429a      	cmp	r2, r3
			fs->wflag = 0;
 80044ac:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize)
 80044ae:	d212      	bcs.n	80044d6 <get_fat.isra.9+0x112>
				for (nf = fs->n_fats; nf >= 2; nf--)
 80044b0:	f894 9002 	ldrb.w	r9, [r4, #2]
 80044b4:	f1b9 0f01 	cmp.w	r9, #1
 80044b8:	d801      	bhi.n	80044be <get_fat.isra.9+0xfa>
 80044ba:	e00c      	b.n	80044d6 <get_fat.isra.9+0x112>
 80044bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
					wsect += fs->fsize;
 80044be:	4498      	add	r8, r3
				for (nf = fs->n_fats; nf >= 2; nf--)
 80044c0:	f109 39ff 	add.w	r9, r9, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 80044c4:	4642      	mov	r2, r8
 80044c6:	2301      	movs	r3, #1
 80044c8:	4639      	mov	r1, r7
 80044ca:	7860      	ldrb	r0, [r4, #1]
 80044cc:	f7ff f8c6 	bl	800365c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--)
 80044d0:	f1b9 0f01 	cmp.w	r9, #1
 80044d4:	d1f2      	bne.n	80044bc <get_fat.isra.9+0xf8>
 80044d6:	7860      	ldrb	r0, [r4, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
 80044d8:	2301      	movs	r3, #1
 80044da:	4632      	mov	r2, r6
 80044dc:	4639      	mov	r1, r7
 80044de:	f7ff f8af 	bl	8003640 <disk_read>
 80044e2:	2800      	cmp	r0, #0
 80044e4:	f040 80a4 	bne.w	8004630 <get_fat.isra.9+0x26c>
 80044e8:	89a2      	ldrh	r2, [r4, #12]
			fs->winsect = sector;
 80044ea:	63a6      	str	r6, [r4, #56]	; 0x38
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80044ec:	0069      	lsls	r1, r5, #1
 80044ee:	fbb1 f3f2 	udiv	r3, r1, r2
 80044f2:	fb02 1113 	mls	r1, r2, r3, r1
 80044f6:	187b      	adds	r3, r7, r1
	rv = rv << 8 | ptr[0];
 80044f8:	785b      	ldrb	r3, [r3, #1]
 80044fa:	5c78      	ldrb	r0, [r7, r1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80044fc:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8004500:	e798      	b.n	8004434 <get_fat.isra.9+0x70>
	if (fs->wflag)
 8004502:	78c3      	ldrb	r3, [r0, #3]
 8004504:	7840      	ldrb	r0, [r0, #1]
 8004506:	b31b      	cbz	r3, 8004550 <get_fat.isra.9+0x18c>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 8004508:	2301      	movs	r3, #1
 800450a:	4642      	mov	r2, r8
 800450c:	4639      	mov	r1, r7
 800450e:	f7ff f8a5 	bl	800365c <disk_write>
 8004512:	2800      	cmp	r0, #0
 8004514:	f040 8090 	bne.w	8004638 <get_fat.isra.9+0x274>
			if (wsect - fs->fatbase < fs->fsize)
 8004518:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800451a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800451c:	eba8 0202 	sub.w	r2, r8, r2
 8004520:	429a      	cmp	r2, r3
			fs->wflag = 0;
 8004522:	70e0      	strb	r0, [r4, #3]
 8004524:	7860      	ldrb	r0, [r4, #1]
			if (wsect - fs->fatbase < fs->fsize)
 8004526:	d213      	bcs.n	8004550 <get_fat.isra.9+0x18c>
				for (nf = fs->n_fats; nf >= 2; nf--)
 8004528:	f894 9002 	ldrb.w	r9, [r4, #2]
 800452c:	f1b9 0f01 	cmp.w	r9, #1
 8004530:	d802      	bhi.n	8004538 <get_fat.isra.9+0x174>
 8004532:	e00d      	b.n	8004550 <get_fat.isra.9+0x18c>
 8004534:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004536:	7860      	ldrb	r0, [r4, #1]
					wsect += fs->fsize;
 8004538:	4498      	add	r8, r3
				for (nf = fs->n_fats; nf >= 2; nf--)
 800453a:	f109 39ff 	add.w	r9, r9, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 800453e:	4642      	mov	r2, r8
 8004540:	2301      	movs	r3, #1
 8004542:	4639      	mov	r1, r7
 8004544:	f7ff f88a 	bl	800365c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--)
 8004548:	f1b9 0f01 	cmp.w	r9, #1
 800454c:	d1f2      	bne.n	8004534 <get_fat.isra.9+0x170>
 800454e:	7860      	ldrb	r0, [r4, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
 8004550:	2301      	movs	r3, #1
 8004552:	4632      	mov	r2, r6
 8004554:	4639      	mov	r1, r7
 8004556:	f7ff f873 	bl	8003640 <disk_read>
 800455a:	2800      	cmp	r0, #0
 800455c:	d168      	bne.n	8004630 <get_fat.isra.9+0x26c>
 800455e:	89a3      	ldrh	r3, [r4, #12]
			fs->winsect = sector;
 8004560:	63a6      	str	r6, [r4, #56]	; 0x38
 8004562:	e777      	b.n	8004454 <get_fat.isra.9+0x90>
	if (fs->wflag)
 8004564:	78e2      	ldrb	r2, [r4, #3]
 8004566:	7860      	ldrb	r0, [r4, #1]
 8004568:	f104 093c 	add.w	r9, r4, #60	; 0x3c
 800456c:	b1fa      	cbz	r2, 80045ae <get_fat.isra.9+0x1ea>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 800456e:	463a      	mov	r2, r7
 8004570:	4649      	mov	r1, r9
 8004572:	f7ff f873 	bl	800365c <disk_write>
 8004576:	2800      	cmp	r0, #0
 8004578:	d15e      	bne.n	8004638 <get_fat.isra.9+0x274>
			if (wsect - fs->fatbase < fs->fsize)
 800457a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800457c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800457e:	1aba      	subs	r2, r7, r2
 8004580:	429a      	cmp	r2, r3
			fs->wflag = 0;
 8004582:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize)
 8004584:	d212      	bcs.n	80045ac <get_fat.isra.9+0x1e8>
				for (nf = fs->n_fats; nf >= 2; nf--)
 8004586:	f894 a002 	ldrb.w	sl, [r4, #2]
 800458a:	f1ba 0f01 	cmp.w	sl, #1
 800458e:	d801      	bhi.n	8004594 <get_fat.isra.9+0x1d0>
 8004590:	e00c      	b.n	80045ac <get_fat.isra.9+0x1e8>
 8004592:	6a63      	ldr	r3, [r4, #36]	; 0x24
					wsect += fs->fsize;
 8004594:	441f      	add	r7, r3
				for (nf = fs->n_fats; nf >= 2; nf--)
 8004596:	f10a 3aff 	add.w	sl, sl, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 800459a:	463a      	mov	r2, r7
 800459c:	2301      	movs	r3, #1
 800459e:	4649      	mov	r1, r9
 80045a0:	7860      	ldrb	r0, [r4, #1]
 80045a2:	f7ff f85b 	bl	800365c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--)
 80045a6:	f1ba 0f01 	cmp.w	sl, #1
 80045aa:	d1f2      	bne.n	8004592 <get_fat.isra.9+0x1ce>
 80045ac:	7860      	ldrb	r0, [r4, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
 80045ae:	4649      	mov	r1, r9
 80045b0:	2301      	movs	r3, #1
 80045b2:	4642      	mov	r2, r8
 80045b4:	f7ff f844 	bl	8003640 <disk_read>
 80045b8:	2800      	cmp	r0, #0
 80045ba:	d139      	bne.n	8004630 <get_fat.isra.9+0x26c>
 80045bc:	89a1      	ldrh	r1, [r4, #12]
			fs->winsect = sector;
 80045be:	4647      	mov	r7, r8
 80045c0:	fbb6 f2f1 	udiv	r2, r6, r1
 80045c4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80045c6:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
 80045ca:	e717      	b.n	80043fc <get_fat.isra.9+0x38>
	if (fs->wflag)
 80045cc:	78e3      	ldrb	r3, [r4, #3]
 80045ce:	7860      	ldrb	r0, [r4, #1]
 80045d0:	f104 0a3c 	add.w	sl, r4, #60	; 0x3c
 80045d4:	b303      	cbz	r3, 8004618 <get_fat.isra.9+0x254>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 80045d6:	2301      	movs	r3, #1
 80045d8:	463a      	mov	r2, r7
 80045da:	4651      	mov	r1, sl
 80045dc:	f7ff f83e 	bl	800365c <disk_write>
 80045e0:	bb50      	cbnz	r0, 8004638 <get_fat.isra.9+0x274>
			if (wsect - fs->fatbase < fs->fsize)
 80045e2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80045e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80045e6:	1aba      	subs	r2, r7, r2
 80045e8:	429a      	cmp	r2, r3
			fs->wflag = 0;
 80045ea:	70e0      	strb	r0, [r4, #3]
 80045ec:	7860      	ldrb	r0, [r4, #1]
			if (wsect - fs->fatbase < fs->fsize)
 80045ee:	d213      	bcs.n	8004618 <get_fat.isra.9+0x254>
				for (nf = fs->n_fats; nf >= 2; nf--)
 80045f0:	f894 b002 	ldrb.w	fp, [r4, #2]
 80045f4:	f1bb 0f01 	cmp.w	fp, #1
 80045f8:	d802      	bhi.n	8004600 <get_fat.isra.9+0x23c>
 80045fa:	e00d      	b.n	8004618 <get_fat.isra.9+0x254>
 80045fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80045fe:	7860      	ldrb	r0, [r4, #1]
					wsect += fs->fsize;
 8004600:	441f      	add	r7, r3
				for (nf = fs->n_fats; nf >= 2; nf--)
 8004602:	f10b 3bff 	add.w	fp, fp, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 8004606:	463a      	mov	r2, r7
 8004608:	2301      	movs	r3, #1
 800460a:	4651      	mov	r1, sl
 800460c:	f7ff f826 	bl	800365c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--)
 8004610:	f1bb 0f01 	cmp.w	fp, #1
 8004614:	d1f2      	bne.n	80045fc <get_fat.isra.9+0x238>
 8004616:	7860      	ldrb	r0, [r4, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
 8004618:	4651      	mov	r1, sl
 800461a:	2301      	movs	r3, #1
 800461c:	464a      	mov	r2, r9
 800461e:	f7ff f80f 	bl	8003640 <disk_read>
 8004622:	b928      	cbnz	r0, 8004630 <get_fat.isra.9+0x26c>
 8004624:	89a1      	ldrh	r1, [r4, #12]
			fs->winsect = sector;
 8004626:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
 800462a:	fbb8 f3f1 	udiv	r3, r8, r1
 800462e:	e6f3      	b.n	8004418 <get_fat.isra.9+0x54>
 8004630:	f04f 30ff 	mov.w	r0, #4294967295
 8004634:	63a0      	str	r0, [r4, #56]	; 0x38
 8004636:	e6fd      	b.n	8004434 <get_fat.isra.9+0x70>
		val = 0xFFFFFFFF; /* Default value falls on disk error */
 8004638:	f04f 30ff 	mov.w	r0, #4294967295
 800463c:	e6fa      	b.n	8004434 <get_fat.isra.9+0x70>
 800463e:	bf00      	nop

08004640 <create_chain>:
{
 8004640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004644:	b087      	sub	sp, #28
 8004646:	4682      	mov	sl, r0
	if (clst == 0)
 8004648:	9101      	str	r1, [sp, #4]
	FATFS *fs = obj->fs;
 800464a:	f8d0 b000 	ldr.w	fp, [r0]
	if (clst == 0)
 800464e:	2900      	cmp	r1, #0
 8004650:	f040 8173 	bne.w	800493a <create_chain+0x2fa>
		scl = fs->last_clst; /* Get suggested cluster to start from */
 8004654:	f8db 8018 	ldr.w	r8, [fp, #24]
 8004658:	f8db 3020 	ldr.w	r3, [fp, #32]
		if (scl == 0 || scl >= fs->n_fatent)
 800465c:	f1b8 0f00 	cmp.w	r8, #0
 8004660:	d11d      	bne.n	800469e <create_chain+0x5e>
			scl = 1;
 8004662:	f04f 0801 	mov.w	r8, #1
 8004666:	4644      	mov	r4, r8
			ncl++; /* Next cluster */
 8004668:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent)
 800466a:	429c      	cmp	r4, r3
 800466c:	d31c      	bcc.n	80046a8 <create_chain+0x68>
				if (ncl > scl)
 800466e:	f1b8 0f01 	cmp.w	r8, #1
 8004672:	f240 8188 	bls.w	8004986 <create_chain+0x346>
				ncl = 2;
 8004676:	2402      	movs	r4, #2
			cs = get_fat(obj, ncl); /* Get the cluster status */
 8004678:	f8da 5000 	ldr.w	r5, [sl]
	if (clst < 2 || clst >= fs->n_fatent)
 800467c:	6a2b      	ldr	r3, [r5, #32]
 800467e:	42a3      	cmp	r3, r4
 8004680:	d908      	bls.n	8004694 <create_chain+0x54>
		switch (fs->fs_type)
 8004682:	782b      	ldrb	r3, [r5, #0]
 8004684:	2b02      	cmp	r3, #2
 8004686:	f000 810a 	beq.w	800489e <create_chain+0x25e>
 800468a:	2b03      	cmp	r3, #3
 800468c:	f000 80b8 	beq.w	8004800 <create_chain+0x1c0>
 8004690:	2b01      	cmp	r3, #1
 8004692:	d00e      	beq.n	80046b2 <create_chain+0x72>
 8004694:	2401      	movs	r4, #1
}
 8004696:	4620      	mov	r0, r4
 8004698:	b007      	add	sp, #28
 800469a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			scl = 1;
 800469e:	4598      	cmp	r8, r3
 80046a0:	bf28      	it	cs
 80046a2:	f04f 0801 	movcs.w	r8, #1
 80046a6:	e7de      	b.n	8004666 <create_chain+0x26>
	if (clst < 2 || clst >= fs->n_fatent)
 80046a8:	2c01      	cmp	r4, #1
			cs = get_fat(obj, ncl); /* Get the cluster status */
 80046aa:	f8da 5000 	ldr.w	r5, [sl]
	if (clst < 2 || clst >= fs->n_fatent)
 80046ae:	d9f1      	bls.n	8004694 <create_chain+0x54>
 80046b0:	e7e4      	b.n	800467c <create_chain+0x3c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK)
 80046b2:	89a9      	ldrh	r1, [r5, #12]
			bc += bc / 2;
 80046b4:	eb04 0654 	add.w	r6, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK)
 80046b8:	fbb6 f2f1 	udiv	r2, r6, r1
 80046bc:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
	if (sector != fs->winsect)
 80046be:	f8d5 9038 	ldr.w	r9, [r5, #56]	; 0x38
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK)
 80046c2:	1817      	adds	r7, r2, r0
	if (sector != fs->winsect)
 80046c4:	454f      	cmp	r7, r9
 80046c6:	d039      	beq.n	800473c <create_chain+0xfc>
	if (fs->wflag)
 80046c8:	78ea      	ldrb	r2, [r5, #3]
 80046ca:	f105 013c 	add.w	r1, r5, #60	; 0x3c
 80046ce:	7868      	ldrb	r0, [r5, #1]
 80046d0:	9102      	str	r1, [sp, #8]
 80046d2:	b332      	cbz	r2, 8004722 <create_chain+0xe2>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 80046d4:	464a      	mov	r2, r9
 80046d6:	f7fe ffc1 	bl	800365c <disk_write>
 80046da:	2800      	cmp	r0, #0
 80046dc:	f040 814d 	bne.w	800497a <create_chain+0x33a>
			if (wsect - fs->fatbase < fs->fsize)
 80046e0:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80046e2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80046e4:	eba9 0202 	sub.w	r2, r9, r2
 80046e8:	429a      	cmp	r2, r3
			fs->wflag = 0;
 80046ea:	70e8      	strb	r0, [r5, #3]
			if (wsect - fs->fatbase < fs->fsize)
 80046ec:	d217      	bcs.n	800471e <create_chain+0xde>
				for (nf = fs->n_fats; nf >= 2; nf--)
 80046ee:	78aa      	ldrb	r2, [r5, #2]
 80046f0:	2a01      	cmp	r2, #1
 80046f2:	d914      	bls.n	800471e <create_chain+0xde>
 80046f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80046f8:	9404      	str	r4, [sp, #16]
 80046fa:	4690      	mov	r8, r2
 80046fc:	9c02      	ldr	r4, [sp, #8]
 80046fe:	e000      	b.n	8004702 <create_chain+0xc2>
 8004700:	6a6b      	ldr	r3, [r5, #36]	; 0x24
					wsect += fs->fsize;
 8004702:	4499      	add	r9, r3
				for (nf = fs->n_fats; nf >= 2; nf--)
 8004704:	f108 38ff 	add.w	r8, r8, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 8004708:	464a      	mov	r2, r9
 800470a:	2301      	movs	r3, #1
 800470c:	4621      	mov	r1, r4
 800470e:	7868      	ldrb	r0, [r5, #1]
 8004710:	f7fe ffa4 	bl	800365c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--)
 8004714:	f1b8 0f01 	cmp.w	r8, #1
 8004718:	d1f2      	bne.n	8004700 <create_chain+0xc0>
 800471a:	e9dd 8403 	ldrd	r8, r4, [sp, #12]
 800471e:	7868      	ldrb	r0, [r5, #1]
 8004720:	9902      	ldr	r1, [sp, #8]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
 8004722:	2301      	movs	r3, #1
 8004724:	463a      	mov	r2, r7
 8004726:	f7fe ff8b 	bl	8003640 <disk_read>
 800472a:	2800      	cmp	r0, #0
 800472c:	f040 80f1 	bne.w	8004912 <create_chain+0x2d2>
 8004730:	89a9      	ldrh	r1, [r5, #12]
			fs->winsect = sector;
 8004732:	46b9      	mov	r9, r7
 8004734:	fbb6 f2f1 	udiv	r2, r6, r1
 8004738:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800473a:	63af      	str	r7, [r5, #56]	; 0x38
			wc = fs->win[bc++ % SS(fs)];
 800473c:	1c77      	adds	r7, r6, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK)
 800473e:	fbb7 f3f1 	udiv	r3, r7, r1
			wc = fs->win[bc++ % SS(fs)];
 8004742:	fb01 6612 	mls	r6, r1, r2, r6
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK)
 8004746:	181a      	adds	r2, r3, r0
			wc = fs->win[bc++ % SS(fs)];
 8004748:	442e      	add	r6, r5
	if (sector != fs->winsect)
 800474a:	454a      	cmp	r2, r9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK)
 800474c:	9202      	str	r2, [sp, #8]
			wc = fs->win[bc++ % SS(fs)];
 800474e:	f896 603c 	ldrb.w	r6, [r6, #60]	; 0x3c
	if (sector != fs->winsect)
 8004752:	d03d      	beq.n	80047d0 <create_chain+0x190>
	if (fs->wflag)
 8004754:	78eb      	ldrb	r3, [r5, #3]
 8004756:	f105 023c 	add.w	r2, r5, #60	; 0x3c
 800475a:	7868      	ldrb	r0, [r5, #1]
 800475c:	4611      	mov	r1, r2
 800475e:	9203      	str	r2, [sp, #12]
 8004760:	b34b      	cbz	r3, 80047b6 <create_chain+0x176>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 8004762:	2301      	movs	r3, #1
 8004764:	464a      	mov	r2, r9
 8004766:	f7fe ff79 	bl	800365c <disk_write>
 800476a:	2800      	cmp	r0, #0
 800476c:	f040 8105 	bne.w	800497a <create_chain+0x33a>
			if (wsect - fs->fatbase < fs->fsize)
 8004770:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8004772:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004774:	eba9 0202 	sub.w	r2, r9, r2
 8004778:	429a      	cmp	r2, r3
			fs->wflag = 0;
 800477a:	70e8      	strb	r0, [r5, #3]
 800477c:	7868      	ldrb	r0, [r5, #1]
			if (wsect - fs->fatbase < fs->fsize)
 800477e:	d21a      	bcs.n	80047b6 <create_chain+0x176>
				for (nf = fs->n_fats; nf >= 2; nf--)
 8004780:	f895 c002 	ldrb.w	ip, [r5, #2]
 8004784:	4662      	mov	r2, ip
 8004786:	2a01      	cmp	r2, #1
 8004788:	d915      	bls.n	80047b6 <create_chain+0x176>
 800478a:	f8cd 8010 	str.w	r8, [sp, #16]
 800478e:	9405      	str	r4, [sp, #20]
 8004790:	46e0      	mov	r8, ip
 8004792:	9c03      	ldr	r4, [sp, #12]
 8004794:	e001      	b.n	800479a <create_chain+0x15a>
 8004796:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004798:	7868      	ldrb	r0, [r5, #1]
					wsect += fs->fsize;
 800479a:	4499      	add	r9, r3
				for (nf = fs->n_fats; nf >= 2; nf--)
 800479c:	f108 38ff 	add.w	r8, r8, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 80047a0:	464a      	mov	r2, r9
 80047a2:	2301      	movs	r3, #1
 80047a4:	4621      	mov	r1, r4
 80047a6:	f7fe ff59 	bl	800365c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--)
 80047aa:	f1b8 0f01 	cmp.w	r8, #1
 80047ae:	d1f2      	bne.n	8004796 <create_chain+0x156>
 80047b0:	e9dd 8404 	ldrd	r8, r4, [sp, #16]
 80047b4:	7868      	ldrb	r0, [r5, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
 80047b6:	9903      	ldr	r1, [sp, #12]
 80047b8:	2301      	movs	r3, #1
 80047ba:	9a02      	ldr	r2, [sp, #8]
 80047bc:	f7fe ff40 	bl	8003640 <disk_read>
 80047c0:	2800      	cmp	r0, #0
 80047c2:	f040 80a6 	bne.w	8004912 <create_chain+0x2d2>
			fs->winsect = sector;
 80047c6:	9b02      	ldr	r3, [sp, #8]
 80047c8:	89a9      	ldrh	r1, [r5, #12]
 80047ca:	63ab      	str	r3, [r5, #56]	; 0x38
 80047cc:	fbb7 f3f1 	udiv	r3, r7, r1
			wc |= fs->win[bc % SS(fs)] << 8;
 80047d0:	fb01 7713 	mls	r7, r1, r3, r7
 80047d4:	443d      	add	r5, r7
 80047d6:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80047da:	07e2      	lsls	r2, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 80047dc:	ea46 2303 	orr.w	r3, r6, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80047e0:	bf4c      	ite	mi
 80047e2:	091b      	lsrmi	r3, r3, #4
 80047e4:	f3c3 030b 	ubfxpl	r3, r3, #0, #12
			if (cs == 0)
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	f000 80b7 	beq.w	800495c <create_chain+0x31c>
			if (cs == 1 || cs == 0xFFFFFFFF)
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	f43f af50 	beq.w	8004694 <create_chain+0x54>
			if (ncl == scl)
 80047f4:	45a0      	cmp	r8, r4
 80047f6:	f000 80c6 	beq.w	8004986 <create_chain+0x346>
 80047fa:	f8db 3020 	ldr.w	r3, [fp, #32]
 80047fe:	e733      	b.n	8004668 <create_chain+0x28>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK)
 8004800:	89ab      	ldrh	r3, [r5, #12]
 8004802:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8004804:	089e      	lsrs	r6, r3, #2
 8004806:	fbb4 f6f6 	udiv	r6, r4, r6
	if (sector != fs->winsect)
 800480a:	f8d5 9038 	ldr.w	r9, [r5, #56]	; 0x38
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK)
 800480e:	4416      	add	r6, r2
	if (sector != fs->winsect)
 8004810:	454e      	cmp	r6, r9
 8004812:	f105 073c 	add.w	r7, r5, #60	; 0x3c
 8004816:	d032      	beq.n	800487e <create_chain+0x23e>
	if (fs->wflag)
 8004818:	78eb      	ldrb	r3, [r5, #3]
 800481a:	7868      	ldrb	r0, [r5, #1]
 800481c:	b333      	cbz	r3, 800486c <create_chain+0x22c>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 800481e:	2301      	movs	r3, #1
 8004820:	464a      	mov	r2, r9
 8004822:	4639      	mov	r1, r7
 8004824:	f7fe ff1a 	bl	800365c <disk_write>
 8004828:	2800      	cmp	r0, #0
 800482a:	f040 80a6 	bne.w	800497a <create_chain+0x33a>
			if (wsect - fs->fatbase < fs->fsize)
 800482e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8004830:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004832:	eba9 0202 	sub.w	r2, r9, r2
 8004836:	429a      	cmp	r2, r3
			fs->wflag = 0;
 8004838:	70e8      	strb	r0, [r5, #3]
 800483a:	7868      	ldrb	r0, [r5, #1]
			if (wsect - fs->fatbase < fs->fsize)
 800483c:	d216      	bcs.n	800486c <create_chain+0x22c>
				for (nf = fs->n_fats; nf >= 2; nf--)
 800483e:	78aa      	ldrb	r2, [r5, #2]
 8004840:	2a01      	cmp	r2, #1
 8004842:	d913      	bls.n	800486c <create_chain+0x22c>
 8004844:	f8cd 8008 	str.w	r8, [sp, #8]
 8004848:	4690      	mov	r8, r2
 800484a:	e001      	b.n	8004850 <create_chain+0x210>
 800484c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800484e:	7868      	ldrb	r0, [r5, #1]
					wsect += fs->fsize;
 8004850:	4499      	add	r9, r3
				for (nf = fs->n_fats; nf >= 2; nf--)
 8004852:	f108 38ff 	add.w	r8, r8, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 8004856:	464a      	mov	r2, r9
 8004858:	2301      	movs	r3, #1
 800485a:	4639      	mov	r1, r7
 800485c:	f7fe fefe 	bl	800365c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--)
 8004860:	f1b8 0f01 	cmp.w	r8, #1
 8004864:	d1f2      	bne.n	800484c <create_chain+0x20c>
 8004866:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800486a:	7868      	ldrb	r0, [r5, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
 800486c:	2301      	movs	r3, #1
 800486e:	4632      	mov	r2, r6
 8004870:	4639      	mov	r1, r7
 8004872:	f7fe fee5 	bl	8003640 <disk_read>
 8004876:	2800      	cmp	r0, #0
 8004878:	d14b      	bne.n	8004912 <create_chain+0x2d2>
 800487a:	89ab      	ldrh	r3, [r5, #12]
			fs->winsect = sector;
 800487c:	63ae      	str	r6, [r5, #56]	; 0x38
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800487e:	00a1      	lsls	r1, r4, #2
 8004880:	fbb1 f2f3 	udiv	r2, r1, r3
 8004884:	fb03 1212 	mls	r2, r3, r2, r1
 8004888:	18b9      	adds	r1, r7, r2
	rv = rv << 8 | ptr[2];
 800488a:	8848      	ldrh	r0, [r1, #2]
	rv = rv << 8 | ptr[1];
 800488c:	7849      	ldrb	r1, [r1, #1]
	rv = rv << 8 | ptr[0];
 800488e:	5cbb      	ldrb	r3, [r7, r2]
	rv = rv << 8 | ptr[1];
 8004890:	ea41 2200 	orr.w	r2, r1, r0, lsl #8
	rv = rv << 8 | ptr[0];
 8004894:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8004898:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800489c:	e7a4      	b.n	80047e8 <create_chain+0x1a8>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK)
 800489e:	89ab      	ldrh	r3, [r5, #12]
 80048a0:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80048a2:	085e      	lsrs	r6, r3, #1
 80048a4:	fbb4 f6f6 	udiv	r6, r4, r6
	if (sector != fs->winsect)
 80048a8:	f8d5 9038 	ldr.w	r9, [r5, #56]	; 0x38
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK)
 80048ac:	4416      	add	r6, r2
	if (sector != fs->winsect)
 80048ae:	454e      	cmp	r6, r9
 80048b0:	f105 073c 	add.w	r7, r5, #60	; 0x3c
 80048b4:	d036      	beq.n	8004924 <create_chain+0x2e4>
	if (fs->wflag)
 80048b6:	78eb      	ldrb	r3, [r5, #3]
 80048b8:	7868      	ldrb	r0, [r5, #1]
 80048ba:	b323      	cbz	r3, 8004906 <create_chain+0x2c6>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 80048bc:	2301      	movs	r3, #1
 80048be:	464a      	mov	r2, r9
 80048c0:	4639      	mov	r1, r7
 80048c2:	f7fe fecb 	bl	800365c <disk_write>
 80048c6:	2800      	cmp	r0, #0
 80048c8:	d157      	bne.n	800497a <create_chain+0x33a>
			if (wsect - fs->fatbase < fs->fsize)
 80048ca:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80048cc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80048ce:	eba9 0202 	sub.w	r2, r9, r2
 80048d2:	429a      	cmp	r2, r3
			fs->wflag = 0;
 80048d4:	70e8      	strb	r0, [r5, #3]
			if (wsect - fs->fatbase < fs->fsize)
 80048d6:	d215      	bcs.n	8004904 <create_chain+0x2c4>
				for (nf = fs->n_fats; nf >= 2; nf--)
 80048d8:	78aa      	ldrb	r2, [r5, #2]
 80048da:	2a01      	cmp	r2, #1
 80048dc:	d912      	bls.n	8004904 <create_chain+0x2c4>
 80048de:	f8cd 8008 	str.w	r8, [sp, #8]
 80048e2:	4690      	mov	r8, r2
 80048e4:	e000      	b.n	80048e8 <create_chain+0x2a8>
 80048e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
					wsect += fs->fsize;
 80048e8:	4499      	add	r9, r3
				for (nf = fs->n_fats; nf >= 2; nf--)
 80048ea:	f108 38ff 	add.w	r8, r8, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 80048ee:	464a      	mov	r2, r9
 80048f0:	2301      	movs	r3, #1
 80048f2:	4639      	mov	r1, r7
 80048f4:	7868      	ldrb	r0, [r5, #1]
 80048f6:	f7fe feb1 	bl	800365c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--)
 80048fa:	f1b8 0f01 	cmp.w	r8, #1
 80048fe:	d1f2      	bne.n	80048e6 <create_chain+0x2a6>
 8004900:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8004904:	7868      	ldrb	r0, [r5, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
 8004906:	2301      	movs	r3, #1
 8004908:	4632      	mov	r2, r6
 800490a:	4639      	mov	r1, r7
 800490c:	f7fe fe98 	bl	8003640 <disk_read>
 8004910:	b130      	cbz	r0, 8004920 <create_chain+0x2e0>
			fs->winsect = sector;
 8004912:	f04f 34ff 	mov.w	r4, #4294967295
}
 8004916:	4620      	mov	r0, r4
			fs->winsect = sector;
 8004918:	63ac      	str	r4, [r5, #56]	; 0x38
}
 800491a:	b007      	add	sp, #28
 800491c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004920:	89ab      	ldrh	r3, [r5, #12]
			fs->winsect = sector;
 8004922:	63ae      	str	r6, [r5, #56]	; 0x38
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8004924:	0061      	lsls	r1, r4, #1
 8004926:	fbb1 f2f3 	udiv	r2, r1, r3
 800492a:	fb03 1212 	mls	r2, r3, r2, r1
 800492e:	18bb      	adds	r3, r7, r2
	rv = rv << 8 | ptr[0];
 8004930:	7859      	ldrb	r1, [r3, #1]
 8004932:	5cbb      	ldrb	r3, [r7, r2]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8004934:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004938:	e756      	b.n	80047e8 <create_chain+0x1a8>
		cs = get_fat(obj, clst); /* Check the cluster status */
 800493a:	4658      	mov	r0, fp
 800493c:	f7ff fd42 	bl	80043c4 <get_fat.isra.9>
		if (cs < 2)
 8004940:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst); /* Check the cluster status */
 8004942:	4604      	mov	r4, r0
		if (cs < 2)
 8004944:	f67f aea6 	bls.w	8004694 <create_chain+0x54>
		if (cs == 0xFFFFFFFF)
 8004948:	1c41      	adds	r1, r0, #1
 800494a:	d016      	beq.n	800497a <create_chain+0x33a>
		if (cs < fs->n_fatent)
 800494c:	f8db 3020 	ldr.w	r3, [fp, #32]
 8004950:	4283      	cmp	r3, r0
 8004952:	f63f aea0 	bhi.w	8004696 <create_chain+0x56>
 8004956:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800495a:	e684      	b.n	8004666 <create_chain+0x26>
	if (clst >= 2 && clst < fs->n_fatent)
 800495c:	f8db 3020 	ldr.w	r3, [fp, #32]
 8004960:	42a3      	cmp	r3, r4
 8004962:	f67f ae97 	bls.w	8004694 <create_chain+0x54>
 8004966:	f04f 32ff 	mov.w	r2, #4294967295
 800496a:	4621      	mov	r1, r4
 800496c:	4658      	mov	r0, fp
 800496e:	f7ff f8f9 	bl	8003b64 <put_fat.part.8>
		if (res == FR_OK && clst != 0)
 8004972:	b168      	cbz	r0, 8004990 <create_chain+0x350>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1; /* Failed. Generate error status */
 8004974:	2801      	cmp	r0, #1
 8004976:	f47f ae8d 	bne.w	8004694 <create_chain+0x54>
 800497a:	f04f 34ff 	mov.w	r4, #4294967295
}
 800497e:	4620      	mov	r0, r4
 8004980:	b007      	add	sp, #28
 8004982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					return 0; /* No free cluster */
 8004986:	2400      	movs	r4, #0
}
 8004988:	4620      	mov	r0, r4
 800498a:	b007      	add	sp, #28
 800498c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (res == FR_OK && clst != 0)
 8004990:	9b01      	ldr	r3, [sp, #4]
 8004992:	b17b      	cbz	r3, 80049b4 <create_chain+0x374>
	if (clst >= 2 && clst < fs->n_fatent)
 8004994:	2b01      	cmp	r3, #1
 8004996:	461a      	mov	r2, r3
 8004998:	f67f ae7c 	bls.w	8004694 <create_chain+0x54>
 800499c:	f8db 3020 	ldr.w	r3, [fp, #32]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	f4bf ae77 	bcs.w	8004694 <create_chain+0x54>
 80049a6:	4611      	mov	r1, r2
 80049a8:	4658      	mov	r0, fp
 80049aa:	4622      	mov	r2, r4
 80049ac:	f7ff f8da 	bl	8003b64 <put_fat.part.8>
	if (res == FR_OK)
 80049b0:	2800      	cmp	r0, #0
 80049b2:	d1df      	bne.n	8004974 <create_chain+0x334>
		if (fs->free_clst <= fs->n_fatent - 2)
 80049b4:	e9db 2307 	ldrd	r2, r3, [fp, #28]
 80049b8:	3b02      	subs	r3, #2
 80049ba:	429a      	cmp	r2, r3
		fs->last_clst = ncl;
 80049bc:	f8cb 4018 	str.w	r4, [fp, #24]
		if (fs->free_clst <= fs->n_fatent - 2)
 80049c0:	d802      	bhi.n	80049c8 <create_chain+0x388>
			fs->free_clst--;
 80049c2:	3a01      	subs	r2, #1
 80049c4:	f8cb 201c 	str.w	r2, [fp, #28]
		fs->fsi_flag |= 1;
 80049c8:	f89b 3004 	ldrb.w	r3, [fp, #4]
 80049cc:	f043 0301 	orr.w	r3, r3, #1
 80049d0:	f88b 3004 	strb.w	r3, [fp, #4]
 80049d4:	e65f      	b.n	8004696 <create_chain+0x56>
 80049d6:	bf00      	nop

080049d8 <dir_next>:
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE; /* Next entry */
	if (!dp->sect
 80049d8:	69c2      	ldr	r2, [r0, #28]
 80049da:	b32a      	cbz	r2, 8004a28 <dir_next+0x50>
{
 80049dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ofs = dp->dptr + SZDIRE; /* Next entry */
 80049e0:	6945      	ldr	r5, [r0, #20]
{
 80049e2:	b083      	sub	sp, #12
	ofs = dp->dptr + SZDIRE; /* Next entry */
 80049e4:	3520      	adds	r5, #32
			|| ofs
 80049e6:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 80049ea:	d219      	bcs.n	8004a20 <dir_next+0x48>
	FATFS *fs = dp->obj.fs;
 80049ec:	6806      	ldr	r6, [r0, #0]
 80049ee:	4604      	mov	r4, r0
							(_FS_EXFAT && fs->fs_type == FS_EXFAT) ?
							MAX_DIR_EX :
																		MAX_DIR))
		return FR_NO_FILE; /* Report EOT when offset has reached max value */

	if (ofs % SS(fs) == 0)
 80049f0:	89b7      	ldrh	r7, [r6, #12]
 80049f2:	4689      	mov	r9, r1
 80049f4:	fbb5 f0f7 	udiv	r0, r5, r7
 80049f8:	fb07 5310 	mls	r3, r7, r0, r5
 80049fc:	b93b      	cbnz	r3, 8004a0e <dir_next+0x36>
	{ /* Sector changed? */
		dp->sect++; /* Next sector */

		if (!dp->clust)
 80049fe:	69a1      	ldr	r1, [r4, #24]
		dp->sect++; /* Next sector */
 8004a00:	3201      	adds	r2, #1
 8004a02:	61e2      	str	r2, [r4, #28]
		if (!dp->clust)
 8004a04:	b991      	cbnz	r1, 8004a2c <dir_next+0x54>
		{ /* Static table */
			if (ofs / SZDIRE >= fs->n_rootdir)
 8004a06:	8932      	ldrh	r2, [r6, #8]
 8004a08:	ebb2 1f55 	cmp.w	r2, r5, lsr #5
 8004a0c:	d937      	bls.n	8004a7e <dir_next+0xa6>
 8004a0e:	f106 073c 	add.w	r7, r6, #60	; 0x3c
		}
	}
	dp->dptr = ofs; /* Current entry */
	dp->dir = fs->win + ofs % SS(fs); /* Pointer to the entry in the win[] */

	return FR_OK;
 8004a12:	2000      	movs	r0, #0
	dp->dir = fs->win + ofs % SS(fs); /* Pointer to the entry in the win[] */
 8004a14:	441f      	add	r7, r3
 8004a16:	6227      	str	r7, [r4, #32]
	dp->dptr = ofs; /* Current entry */
 8004a18:	6165      	str	r5, [r4, #20]
}
 8004a1a:	b003      	add	sp, #12
 8004a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return FR_NO_FILE; /* Report EOT when offset has reached max value */
 8004a20:	2004      	movs	r0, #4
}
 8004a22:	b003      	add	sp, #12
 8004a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return FR_NO_FILE; /* Report EOT when offset has reached max value */
 8004a28:	2004      	movs	r0, #4
}
 8004a2a:	4770      	bx	lr
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0)
 8004a2c:	8972      	ldrh	r2, [r6, #10]
 8004a2e:	3a01      	subs	r2, #1
 8004a30:	4202      	tst	r2, r0
 8004a32:	d1ec      	bne.n	8004a0e <dir_next+0x36>
				clst = get_fat(&dp->obj, dp->clust); /* Get next cluster */
 8004a34:	4630      	mov	r0, r6
 8004a36:	f7ff fcc5 	bl	80043c4 <get_fat.isra.9>
				if (clst <= 1)
 8004a3a:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust); /* Get next cluster */
 8004a3c:	4680      	mov	r8, r0
				if (clst <= 1)
 8004a3e:	f240 808c 	bls.w	8004b5a <dir_next+0x182>
				if (clst == 0xFFFFFFFF)
 8004a42:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004a46:	d01e      	beq.n	8004a86 <dir_next+0xae>
				if (clst >= fs->n_fatent)
 8004a48:	6a33      	ldr	r3, [r6, #32]
 8004a4a:	4283      	cmp	r3, r0
 8004a4c:	d91d      	bls.n	8004a8a <dir_next+0xb2>
 8004a4e:	1e82      	subs	r2, r0, #2
 8004a50:	4611      	mov	r1, r2
 8004a52:	9200      	str	r2, [sp, #0]
 8004a54:	f106 073c 	add.w	r7, r6, #60	; 0x3c
	if (clst >= fs->n_fatent - 2)
 8004a58:	460a      	mov	r2, r1
 8004a5a:	3b02      	subs	r3, #2
 8004a5c:	428b      	cmp	r3, r1
		return 0; /* Invalid cluster# */
 8004a5e:	bf92      	itee	ls
 8004a60:	2300      	movls	r3, #0
	return clst * fs->csize + fs->database;
 8004a62:	8973      	ldrhhi	r3, [r6, #10]
 8004a64:	6b72      	ldrhi	r2, [r6, #52]	; 0x34
				dp->clust = clst; /* Initialize data for new cluster */
 8004a66:	f8c4 8018 	str.w	r8, [r4, #24]
	return clst * fs->csize + fs->database;
 8004a6a:	bf88      	it	hi
 8004a6c:	fb01 2303 	mlahi	r3, r1, r3, r2
 8004a70:	89b2      	ldrh	r2, [r6, #12]
				dp->sect = clust2sect(fs, clst);
 8004a72:	61e3      	str	r3, [r4, #28]
 8004a74:	fbb5 f3f2 	udiv	r3, r5, r2
 8004a78:	fb02 5313 	mls	r3, r2, r3, r5
 8004a7c:	e7c9      	b.n	8004a12 <dir_next+0x3a>
				dp->sect = 0;
 8004a7e:	2300      	movs	r3, #0
				return FR_NO_FILE;
 8004a80:	2004      	movs	r0, #4
				dp->sect = 0;
 8004a82:	61e3      	str	r3, [r4, #28]
				return FR_NO_FILE;
 8004a84:	e7cd      	b.n	8004a22 <dir_next+0x4a>
					return FR_DISK_ERR; /* Disk error */
 8004a86:	2001      	movs	r0, #1
 8004a88:	e7cb      	b.n	8004a22 <dir_next+0x4a>
					if (!stretch)
 8004a8a:	f1b9 0f00 	cmp.w	r9, #0
 8004a8e:	d0f6      	beq.n	8004a7e <dir_next+0xa6>
					clst = create_chain(&dp->obj, dp->clust); /* Allocate a cluster */
 8004a90:	69a1      	ldr	r1, [r4, #24]
 8004a92:	4620      	mov	r0, r4
 8004a94:	f7ff fdd4 	bl	8004640 <create_chain>
					if (clst == 0)
 8004a98:	4680      	mov	r8, r0
 8004a9a:	2800      	cmp	r0, #0
 8004a9c:	d05f      	beq.n	8004b5e <dir_next+0x186>
					if (clst == 1)
 8004a9e:	2801      	cmp	r0, #1
 8004aa0:	d05b      	beq.n	8004b5a <dir_next+0x182>
					if (clst == 0xFFFFFFFF)
 8004aa2:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004aa6:	d0ee      	beq.n	8004a86 <dir_next+0xae>
	if (fs->wflag)
 8004aa8:	78f3      	ldrb	r3, [r6, #3]
 8004aaa:	f106 0b3c 	add.w	fp, r6, #60	; 0x3c
 8004aae:	465f      	mov	r7, fp
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d156      	bne.n	8004b62 <dir_next+0x18a>
 8004ab4:	89b2      	ldrh	r2, [r6, #12]
 8004ab6:	2100      	movs	r1, #0
 8004ab8:	4658      	mov	r0, fp
 8004aba:	f005 fb94 	bl	800a1e6 <memset>
	clst -= 2;
 8004abe:	f1a8 0002 	sub.w	r0, r8, #2
	if (clst >= fs->n_fatent - 2)
 8004ac2:	4601      	mov	r1, r0
 8004ac4:	6a33      	ldr	r3, [r6, #32]
 8004ac6:	8972      	ldrh	r2, [r6, #10]
 8004ac8:	f1a3 0c02 	sub.w	ip, r3, #2
 8004acc:	4560      	cmp	r0, ip
		return 0; /* Invalid cluster# */
 8004ace:	bf2c      	ite	cs
 8004ad0:	f04f 0900 	movcs.w	r9, #0
	return clst * fs->csize + fs->database;
 8004ad4:	6b71      	ldrcc	r1, [r6, #52]	; 0x34
	clst -= 2;
 8004ad6:	9000      	str	r0, [sp, #0]
	return clst * fs->csize + fs->database;
 8004ad8:	bf38      	it	cc
 8004ada:	fb00 1902 	mlacc	r9, r0, r2, r1
					for (n = 0, fs->winsect = clust2sect(fs, clst);
 8004ade:	f8c6 9038 	str.w	r9, [r6, #56]	; 0x38
 8004ae2:	2a00      	cmp	r2, #0
 8004ae4:	d062      	beq.n	8004bac <dir_next+0x1d4>
 8004ae6:	2300      	movs	r3, #0
						fs->wflag = 1;
 8004ae8:	469a      	mov	sl, r3
 8004aea:	f8cd 8004 	str.w	r8, [sp, #4]
 8004aee:	f04f 0301 	mov.w	r3, #1
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 8004af2:	464a      	mov	r2, r9
						fs->wflag = 1;
 8004af4:	70f3      	strb	r3, [r6, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 8004af6:	4659      	mov	r1, fp
 8004af8:	2301      	movs	r3, #1
 8004afa:	7870      	ldrb	r0, [r6, #1]
 8004afc:	f7fe fdae 	bl	800365c <disk_write>
 8004b00:	2800      	cmp	r0, #0
 8004b02:	d1c0      	bne.n	8004a86 <dir_next+0xae>
			if (wsect - fs->fatbase < fs->fsize)
 8004b04:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8004b06:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004b08:	eba9 0202 	sub.w	r2, r9, r2
 8004b0c:	429a      	cmp	r2, r3
			fs->wflag = 0;
 8004b0e:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize)
 8004b10:	d212      	bcs.n	8004b38 <dir_next+0x160>
				for (nf = fs->n_fats; nf >= 2; nf--)
 8004b12:	f896 8002 	ldrb.w	r8, [r6, #2]
 8004b16:	f1b8 0f01 	cmp.w	r8, #1
 8004b1a:	d801      	bhi.n	8004b20 <dir_next+0x148>
 8004b1c:	e00c      	b.n	8004b38 <dir_next+0x160>
 8004b1e:	6a73      	ldr	r3, [r6, #36]	; 0x24
					wsect += fs->fsize;
 8004b20:	4499      	add	r9, r3
				for (nf = fs->n_fats; nf >= 2; nf--)
 8004b22:	f108 38ff 	add.w	r8, r8, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 8004b26:	464a      	mov	r2, r9
 8004b28:	2301      	movs	r3, #1
 8004b2a:	4659      	mov	r1, fp
 8004b2c:	7870      	ldrb	r0, [r6, #1]
 8004b2e:	f7fe fd95 	bl	800365c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--)
 8004b32:	f1b8 0f01 	cmp.w	r8, #1
 8004b36:	d1f2      	bne.n	8004b1e <dir_next+0x146>
							n < fs->csize; n++, fs->winsect++)
 8004b38:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 8004b3a:	8973      	ldrh	r3, [r6, #10]
 8004b3c:	f10a 0a01 	add.w	sl, sl, #1
 8004b40:	3201      	adds	r2, #1
					for (n = 0, fs->winsect = clust2sect(fs, clst);
 8004b42:	4553      	cmp	r3, sl
							n < fs->csize; n++, fs->winsect++)
 8004b44:	63b2      	str	r2, [r6, #56]	; 0x38
 8004b46:	4691      	mov	r9, r2
					for (n = 0, fs->winsect = clust2sect(fs, clst);
 8004b48:	d8d1      	bhi.n	8004aee <dir_next+0x116>
 8004b4a:	4651      	mov	r1, sl
 8004b4c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004b50:	6a33      	ldr	r3, [r6, #32]
					fs->winsect -= n; /* Restore window offset */
 8004b52:	1a52      	subs	r2, r2, r1
 8004b54:	63b2      	str	r2, [r6, #56]	; 0x38
 8004b56:	9900      	ldr	r1, [sp, #0]
 8004b58:	e77e      	b.n	8004a58 <dir_next+0x80>
					return FR_INT_ERR; /* Internal error */
 8004b5a:	2002      	movs	r0, #2
 8004b5c:	e761      	b.n	8004a22 <dir_next+0x4a>
						return FR_DENIED; /* No free cluster */
 8004b5e:	2007      	movs	r0, #7
 8004b60:	e75f      	b.n	8004a22 <dir_next+0x4a>
		wsect = fs->winsect; /* Current sector number */
 8004b62:	f8d6 9038 	ldr.w	r9, [r6, #56]	; 0x38
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 8004b66:	2301      	movs	r3, #1
 8004b68:	464a      	mov	r2, r9
 8004b6a:	4659      	mov	r1, fp
 8004b6c:	7870      	ldrb	r0, [r6, #1]
 8004b6e:	f7fe fd75 	bl	800365c <disk_write>
 8004b72:	2800      	cmp	r0, #0
 8004b74:	d187      	bne.n	8004a86 <dir_next+0xae>
			if (wsect - fs->fatbase < fs->fsize)
 8004b76:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8004b78:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004b7a:	eba9 0202 	sub.w	r2, r9, r2
 8004b7e:	429a      	cmp	r2, r3
			fs->wflag = 0;
 8004b80:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize)
 8004b82:	d297      	bcs.n	8004ab4 <dir_next+0xdc>
				for (nf = fs->n_fats; nf >= 2; nf--)
 8004b84:	f896 a002 	ldrb.w	sl, [r6, #2]
 8004b88:	f1ba 0f01 	cmp.w	sl, #1
 8004b8c:	d801      	bhi.n	8004b92 <dir_next+0x1ba>
 8004b8e:	e791      	b.n	8004ab4 <dir_next+0xdc>
 8004b90:	6a73      	ldr	r3, [r6, #36]	; 0x24
					wsect += fs->fsize;
 8004b92:	4499      	add	r9, r3
				for (nf = fs->n_fats; nf >= 2; nf--)
 8004b94:	f10a 3aff 	add.w	sl, sl, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 8004b98:	464a      	mov	r2, r9
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	4659      	mov	r1, fp
 8004b9e:	7870      	ldrb	r0, [r6, #1]
 8004ba0:	f7fe fd5c 	bl	800365c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--)
 8004ba4:	f1ba 0f01 	cmp.w	sl, #1
 8004ba8:	d1f2      	bne.n	8004b90 <dir_next+0x1b8>
 8004baa:	e783      	b.n	8004ab4 <dir_next+0xdc>
					for (n = 0, fs->winsect = clust2sect(fs, clst);
 8004bac:	4611      	mov	r1, r2
 8004bae:	464a      	mov	r2, r9
 8004bb0:	e7cf      	b.n	8004b52 <dir_next+0x17a>
 8004bb2:	bf00      	nop

08004bb4 <dir_find>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_find( /* FR_OK(0):succeeded, !=0:error */
DIR *dp /* Pointer to the directory object with the file name */
)
{
 8004bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0); /* Rewind directory object */
 8004bb8:	2100      	movs	r1, #0
{
 8004bba:	b087      	sub	sp, #28
 8004bbc:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 8004bbe:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0); /* Rewind directory object */
 8004bc0:	f7fe fe1c 	bl	80037fc <dir_sdi>
	if (res != FR_OK)
 8004bc4:	4683      	mov	fp, r0
 8004bc6:	2800      	cmp	r0, #0
 8004bc8:	d13d      	bne.n	8004c46 <dir_find+0x92>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF;
 8004bca:	23ff      	movs	r3, #255	; 0xff
 8004bcc:	461d      	mov	r5, r3
 8004bce:	9301      	str	r3, [sp, #4]
	dp->blk_ofs = 0xFFFFFFFF; /* Reset LFN sequence */
 8004bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8004bd4:	46a8      	mov	r8, r5
 8004bd6:	69e7      	ldr	r7, [r4, #28]
 8004bd8:	6323      	str	r3, [r4, #48]	; 0x30
	if (sector != fs->winsect)
 8004bda:	6bb5      	ldr	r5, [r6, #56]	; 0x38
 8004bdc:	42bd      	cmp	r5, r7
 8004bde:	d037      	beq.n	8004c50 <dir_find+0x9c>
	if (fs->wflag)
 8004be0:	78f3      	ldrb	r3, [r6, #3]
 8004be2:	7870      	ldrb	r0, [r6, #1]
 8004be4:	f106 093c 	add.w	r9, r6, #60	; 0x3c
 8004be8:	b313      	cbz	r3, 8004c30 <dir_find+0x7c>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 8004bea:	2301      	movs	r3, #1
 8004bec:	462a      	mov	r2, r5
 8004bee:	4649      	mov	r1, r9
 8004bf0:	f7fe fd34 	bl	800365c <disk_write>
 8004bf4:	2800      	cmp	r0, #0
 8004bf6:	f040 80c4 	bne.w	8004d82 <dir_find+0x1ce>
			if (wsect - fs->fatbase < fs->fsize)
 8004bfa:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8004bfc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004bfe:	1aaa      	subs	r2, r5, r2
 8004c00:	429a      	cmp	r2, r3
			fs->wflag = 0;
 8004c02:	70f0      	strb	r0, [r6, #3]
 8004c04:	7870      	ldrb	r0, [r6, #1]
			if (wsect - fs->fatbase < fs->fsize)
 8004c06:	d213      	bcs.n	8004c30 <dir_find+0x7c>
				for (nf = fs->n_fats; nf >= 2; nf--)
 8004c08:	f896 a002 	ldrb.w	sl, [r6, #2]
 8004c0c:	f1ba 0f01 	cmp.w	sl, #1
 8004c10:	d802      	bhi.n	8004c18 <dir_find+0x64>
 8004c12:	e00d      	b.n	8004c30 <dir_find+0x7c>
 8004c14:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004c16:	7870      	ldrb	r0, [r6, #1]
					wsect += fs->fsize;
 8004c18:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--)
 8004c1a:	f10a 3aff 	add.w	sl, sl, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 8004c1e:	462a      	mov	r2, r5
 8004c20:	2301      	movs	r3, #1
 8004c22:	4649      	mov	r1, r9
 8004c24:	f7fe fd1a 	bl	800365c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--)
 8004c28:	f1ba 0f01 	cmp.w	sl, #1
 8004c2c:	d1f2      	bne.n	8004c14 <dir_find+0x60>
 8004c2e:	7870      	ldrb	r0, [r6, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
 8004c30:	4649      	mov	r1, r9
 8004c32:	2301      	movs	r3, #1
 8004c34:	463a      	mov	r2, r7
 8004c36:	f7fe fd03 	bl	8003640 <disk_read>
 8004c3a:	b140      	cbz	r0, 8004c4e <dir_find+0x9a>
			fs->winsect = sector;
 8004c3c:	f04f 33ff 	mov.w	r3, #4294967295
				res = FR_DISK_ERR;
 8004c40:	f04f 0b01 	mov.w	fp, #1
			fs->winsect = sector;
 8004c44:	63b3      	str	r3, [r6, #56]	; 0x38
#endif
		res = dir_next(dp, 0); /* Next entry */
	} while (res == FR_OK);

	return res;
}
 8004c46:	4658      	mov	r0, fp
 8004c48:	b007      	add	sp, #28
 8004c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 8004c4e:	63b7      	str	r7, [r6, #56]	; 0x38
		c = dp->dir[DIR_Name];
 8004c50:	6a27      	ldr	r7, [r4, #32]
 8004c52:	783d      	ldrb	r5, [r7, #0]
		if (c == 0)
 8004c54:	b35d      	cbz	r5, 8004cae <dir_find+0xfa>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8004c56:	7afa      	ldrb	r2, [r7, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN))
 8004c58:	2de5      	cmp	r5, #229	; 0xe5
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8004c5a:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 8004c5e:	71a3      	strb	r3, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN))
 8004c60:	d003      	beq.n	8004c6a <dir_find+0xb6>
 8004c62:	0712      	lsls	r2, r2, #28
 8004c64:	d529      	bpl.n	8004cba <dir_find+0x106>
 8004c66:	2b0f      	cmp	r3, #15
 8004c68:	d068      	beq.n	8004d3c <dir_find+0x188>
				dp->blk_ofs = 0xFFFFFFFF; /* Reset LFN sequence */
 8004c6a:	f04f 33ff 	mov.w	r3, #4294967295
				ord = 0xFF;
 8004c6e:	f04f 08ff 	mov.w	r8, #255	; 0xff
				dp->blk_ofs = 0xFFFFFFFF; /* Reset LFN sequence */
 8004c72:	6323      	str	r3, [r4, #48]	; 0x30
	if (!dp->sect
 8004c74:	69e7      	ldr	r7, [r4, #28]
 8004c76:	b1d7      	cbz	r7, 8004cae <dir_find+0xfa>
	ofs = dp->dptr + SZDIRE; /* Next entry */
 8004c78:	6965      	ldr	r5, [r4, #20]
			|| ofs
 8004c7a:	4ba4      	ldr	r3, [pc, #656]	; (8004f0c <dir_find+0x358>)
	ofs = dp->dptr + SZDIRE; /* Next entry */
 8004c7c:	3520      	adds	r5, #32
			|| ofs
 8004c7e:	429d      	cmp	r5, r3
 8004c80:	d815      	bhi.n	8004cae <dir_find+0xfa>
	FATFS *fs = dp->obj.fs;
 8004c82:	6823      	ldr	r3, [r4, #0]
	if (ofs % SS(fs) == 0)
 8004c84:	899a      	ldrh	r2, [r3, #12]
 8004c86:	fbb5 f0f2 	udiv	r0, r5, r2
 8004c8a:	fb02 5210 	mls	r2, r2, r0, r5
 8004c8e:	b94a      	cbnz	r2, 8004ca4 <dir_find+0xf0>
		if (!dp->clust)
 8004c90:	69a1      	ldr	r1, [r4, #24]
		dp->sect++; /* Next sector */
 8004c92:	3701      	adds	r7, #1
 8004c94:	61e7      	str	r7, [r4, #28]
		if (!dp->clust)
 8004c96:	2900      	cmp	r1, #0
 8004c98:	d164      	bne.n	8004d64 <dir_find+0x1b0>
			if (ofs / SZDIRE >= fs->n_rootdir)
 8004c9a:	8919      	ldrh	r1, [r3, #8]
 8004c9c:	ebb1 1f55 	cmp.w	r1, r5, lsr #5
 8004ca0:	f240 80bd 	bls.w	8004e1e <dir_find+0x26a>
	dp->dir = fs->win + ofs % SS(fs); /* Pointer to the entry in the win[] */
 8004ca4:	333c      	adds	r3, #60	; 0x3c
 8004ca6:	4413      	add	r3, r2
 8004ca8:	6223      	str	r3, [r4, #32]
	dp->dptr = ofs; /* Current entry */
 8004caa:	6165      	str	r5, [r4, #20]
 8004cac:	e795      	b.n	8004bda <dir_find+0x26>
			res = FR_NO_FILE;
 8004cae:	f04f 0b04 	mov.w	fp, #4
}
 8004cb2:	4658      	mov	r0, fp
 8004cb4:	b007      	add	sp, #28
 8004cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (a == AM_LFN)
 8004cba:	2b0f      	cmp	r3, #15
 8004cbc:	d03e      	beq.n	8004d3c <dir_find+0x188>
				if (!ord && sum == sum_sfn(dp->dir))
 8004cbe:	f1b8 0f00 	cmp.w	r8, #0
 8004cc2:	d061      	beq.n	8004d88 <dir_find+0x1d4>
				if (!(dp->fn[NSFLAG] & NS_LOSS)
 8004cc4:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8004cc8:	07da      	lsls	r2, r3, #31
 8004cca:	d4ce      	bmi.n	8004c6a <dir_find+0xb6>
	} while (--cnt && r == 0);
 8004ccc:	783a      	ldrb	r2, [r7, #0]
 8004cce:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d1c9      	bne.n	8004c6a <dir_find+0xb6>
 8004cd6:	787a      	ldrb	r2, [r7, #1]
 8004cd8:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d1c4      	bne.n	8004c6a <dir_find+0xb6>
 8004ce0:	78ba      	ldrb	r2, [r7, #2]
 8004ce2:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d1bf      	bne.n	8004c6a <dir_find+0xb6>
 8004cea:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
 8004cee:	78fb      	ldrb	r3, [r7, #3]
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d1ba      	bne.n	8004c6a <dir_find+0xb6>
 8004cf4:	793a      	ldrb	r2, [r7, #4]
 8004cf6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d1b5      	bne.n	8004c6a <dir_find+0xb6>
 8004cfe:	797a      	ldrb	r2, [r7, #5]
 8004d00:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d1b0      	bne.n	8004c6a <dir_find+0xb6>
 8004d08:	79ba      	ldrb	r2, [r7, #6]
 8004d0a:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d1ab      	bne.n	8004c6a <dir_find+0xb6>
 8004d12:	79fa      	ldrb	r2, [r7, #7]
 8004d14:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d1a6      	bne.n	8004c6a <dir_find+0xb6>
 8004d1c:	7a3a      	ldrb	r2, [r7, #8]
 8004d1e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d1a1      	bne.n	8004c6a <dir_find+0xb6>
 8004d26:	7a7a      	ldrb	r2, [r7, #9]
 8004d28:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d19c      	bne.n	8004c6a <dir_find+0xb6>
						&& !mem_cmp(dp->dir, dp->fn, 11))
 8004d30:	7aba      	ldrb	r2, [r7, #10]
 8004d32:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d197      	bne.n	8004c6a <dir_find+0xb6>
 8004d3a:	e784      	b.n	8004c46 <dir_find+0x92>
				if (!(dp->fn[NSFLAG] & NS_NOLFN))
 8004d3c:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8004d40:	065b      	lsls	r3, r3, #25
 8004d42:	d497      	bmi.n	8004c74 <dir_find+0xc0>
					if (c & LLEF)
 8004d44:	0668      	lsls	r0, r5, #25
 8004d46:	d56f      	bpl.n	8004e28 <dir_find+0x274>
						sum = dp->dir[LDIR_Chksum];
 8004d48:	7b7a      	ldrb	r2, [r7, #13]
						dp->blk_ofs = dp->dptr; /* Start offset of LFN */
 8004d4a:	6963      	ldr	r3, [r4, #20]
						c &= (BYTE) ~LLEF;
 8004d4c:	f005 05bf 	and.w	r5, r5, #191	; 0xbf
						sum = dp->dir[LDIR_Chksum];
 8004d50:	9201      	str	r2, [sp, #4]
						dp->blk_ofs = dp->dptr; /* Start offset of LFN */
 8004d52:	6323      	str	r3, [r4, #48]	; 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum]
 8004d54:	7b7b      	ldrb	r3, [r7, #13]
 8004d56:	9a01      	ldr	r2, [sp, #4]
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	f000 8082 	beq.w	8004e62 <dir_find+0x2ae>
 8004d5e:	f04f 08ff 	mov.w	r8, #255	; 0xff
 8004d62:	e787      	b.n	8004c74 <dir_find+0xc0>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0)
 8004d64:	f8b3 c00a 	ldrh.w	ip, [r3, #10]
 8004d68:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004d6c:	ea1c 0900 	ands.w	r9, ip, r0
 8004d70:	d198      	bne.n	8004ca4 <dir_find+0xf0>
				clst = get_fat(&dp->obj, dp->clust); /* Get next cluster */
 8004d72:	4618      	mov	r0, r3
 8004d74:	9302      	str	r3, [sp, #8]
 8004d76:	f7ff fb25 	bl	80043c4 <get_fat.isra.9>
				if (clst <= 1)
 8004d7a:	2801      	cmp	r0, #1
 8004d7c:	d96e      	bls.n	8004e5c <dir_find+0x2a8>
				if (clst == 0xFFFFFFFF)
 8004d7e:	1c43      	adds	r3, r0, #1
 8004d80:	d157      	bne.n	8004e32 <dir_find+0x27e>
			res = FR_NO_FILE;
 8004d82:	f04f 0b01 	mov.w	fp, #1
 8004d86:	e75e      	b.n	8004c46 <dir_find+0x92>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8004d88:	783a      	ldrb	r2, [r7, #0]
 8004d8a:	7879      	ldrb	r1, [r7, #1]
 8004d8c:	01d3      	lsls	r3, r2, #7
 8004d8e:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
 8004d92:	185a      	adds	r2, r3, r1
 8004d94:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8004d98:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8004d9c:	78ba      	ldrb	r2, [r7, #2]
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	441a      	add	r2, r3
 8004da2:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8004da6:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8004daa:	78fa      	ldrb	r2, [r7, #3]
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	441a      	add	r2, r3
 8004db0:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8004db4:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8004db8:	793a      	ldrb	r2, [r7, #4]
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	441a      	add	r2, r3
 8004dbe:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8004dc2:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8004dc6:	797a      	ldrb	r2, [r7, #5]
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	441a      	add	r2, r3
 8004dcc:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8004dd0:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8004dd4:	79ba      	ldrb	r2, [r7, #6]
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	441a      	add	r2, r3
 8004dda:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8004dde:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8004de2:	79fa      	ldrb	r2, [r7, #7]
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	441a      	add	r2, r3
 8004de8:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8004dec:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8004df0:	7a3a      	ldrb	r2, [r7, #8]
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	441a      	add	r2, r3
 8004df6:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8004dfa:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8004dfe:	7a7a      	ldrb	r2, [r7, #9]
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	4413      	add	r3, r2
 8004e04:	f3c3 0246 	ubfx	r2, r3, #1, #7
 8004e08:	7ab9      	ldrb	r1, [r7, #10]
 8004e0a:	ea42 13c3 	orr.w	r3, r2, r3, lsl #7
 8004e0e:	440b      	add	r3, r1
				if (!ord && sum == sum_sfn(dp->dir))
 8004e10:	9a01      	ldr	r2, [sp, #4]
 8004e12:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8004e16:	429a      	cmp	r2, r3
 8004e18:	f47f af54 	bne.w	8004cc4 <dir_find+0x110>
 8004e1c:	e713      	b.n	8004c46 <dir_find+0x92>
				dp->sect = 0;
 8004e1e:	2300      	movs	r3, #0
				return FR_NO_FILE;
 8004e20:	f04f 0b04 	mov.w	fp, #4
				dp->sect = 0;
 8004e24:	61e3      	str	r3, [r4, #28]
 8004e26:	e70e      	b.n	8004c46 <dir_find+0x92>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum]
 8004e28:	45a8      	cmp	r8, r5
 8004e2a:	d093      	beq.n	8004d54 <dir_find+0x1a0>
 8004e2c:	f04f 08ff 	mov.w	r8, #255	; 0xff
 8004e30:	e720      	b.n	8004c74 <dir_find+0xc0>
				if (clst >= fs->n_fatent)
 8004e32:	9b02      	ldr	r3, [sp, #8]
 8004e34:	6a1a      	ldr	r2, [r3, #32]
 8004e36:	4290      	cmp	r0, r2
 8004e38:	d2f1      	bcs.n	8004e1e <dir_find+0x26a>
	if (clst >= fs->n_fatent - 2)
 8004e3a:	3a02      	subs	r2, #2
	clst -= 2;
 8004e3c:	1e81      	subs	r1, r0, #2
	if (clst >= fs->n_fatent - 2)
 8004e3e:	4291      	cmp	r1, r2
	return clst * fs->csize + fs->database;
 8004e40:	bf3b      	ittet	cc
 8004e42:	6b5a      	ldrcc	r2, [r3, #52]	; 0x34
 8004e44:	895f      	ldrhcc	r7, [r3, #10]
		return 0; /* Invalid cluster# */
 8004e46:	464f      	movcs	r7, r9
	return clst * fs->csize + fs->database;
 8004e48:	fb01 2707 	mlacc	r7, r1, r7, r2
 8004e4c:	899a      	ldrh	r2, [r3, #12]
				dp->clust = clst; /* Initialize data for new cluster */
 8004e4e:	61a0      	str	r0, [r4, #24]
 8004e50:	fbb5 f1f2 	udiv	r1, r5, r2
				dp->sect = clust2sect(fs, clst);
 8004e54:	61e7      	str	r7, [r4, #28]
 8004e56:	fb02 5211 	mls	r2, r2, r1, r5
 8004e5a:	e723      	b.n	8004ca4 <dir_find+0xf0>
					return FR_INT_ERR; /* Internal error */
 8004e5c:	f04f 0b02 	mov.w	fp, #2
 8004e60:	e6f1      	b.n	8004c46 <dir_find+0x92>
	rv = rv << 8 | ptr[0];
 8004e62:	7efa      	ldrb	r2, [r7, #27]
 8004e64:	7ebb      	ldrb	r3, [r7, #26]
	if (ld_word(dir + LDIR_FstClusLO) != 0)
 8004e66:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 8004e6a:	f47f af78 	bne.w	8004d5e <dir_find+0x1aa>
	for (wc = 1, s = 0; s < 13; s++)
 8004e6e:	2201      	movs	r2, #1
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13; /* Offset in the LFN buffer */
 8004e70:	f897 9000 	ldrb.w	r9, [r7]
							&& cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8004e74:	6931      	ldr	r1, [r6, #16]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13; /* Offset in the LFN buffer */
 8004e76:	f009 093f 	and.w	r9, r9, #63	; 0x3f
 8004e7a:	f109 39ff 	add.w	r9, r9, #4294967295
 8004e7e:	eb09 0349 	add.w	r3, r9, r9, lsl #1
							&& cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8004e82:	9104      	str	r1, [sp, #16]
 8004e84:	9505      	str	r5, [sp, #20]
 8004e86:	f8df a08c 	ldr.w	sl, [pc, #140]	; 8004f14 <dir_find+0x360>
 8004e8a:	460d      	mov	r5, r1
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13; /* Offset in the LFN buffer */
 8004e8c:	eb09 0983 	add.w	r9, r9, r3, lsl #2
 8004e90:	9602      	str	r6, [sp, #8]
 8004e92:	4611      	mov	r1, r2
 8004e94:	9403      	str	r4, [sp, #12]
 8004e96:	e011      	b.n	8004ebc <dir_find+0x308>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++]))
 8004e98:	f1b9 0ffe 	cmp.w	r9, #254	; 0xfe
 8004e9c:	d81e      	bhi.n	8004edc <dir_find+0x328>
 8004e9e:	4640      	mov	r0, r8
 8004ea0:	f003 f9b4 	bl	800820c <ff_wtoupper>
 8004ea4:	4606      	mov	r6, r0
 8004ea6:	f835 0019 	ldrh.w	r0, [r5, r9, lsl #1]
 8004eaa:	f003 f9af 	bl	800820c <ff_wtoupper>
 8004eae:	4286      	cmp	r6, r0
 8004eb0:	d114      	bne.n	8004edc <dir_find+0x328>
	rv = rv << 8 | ptr[0];
 8004eb2:	4641      	mov	r1, r8
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++]))
 8004eb4:	46a1      	mov	r9, r4
	for (wc = 1, s = 0; s < 13; s++)
 8004eb6:	4b16      	ldr	r3, [pc, #88]	; (8004f10 <dir_find+0x35c>)
 8004eb8:	459a      	cmp	sl, r3
 8004eba:	d014      	beq.n	8004ee6 <dir_find+0x332>
		uc = ld_word(dir + LfnOfs[s]); /* Pick an LFN character */
 8004ebc:	f81a 3b01 	ldrb.w	r3, [sl], #1
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++]))
 8004ec0:	f109 0401 	add.w	r4, r9, #1
		uc = ld_word(dir + LfnOfs[s]); /* Pick an LFN character */
 8004ec4:	18f8      	adds	r0, r7, r3
	rv = rv << 8 | ptr[0];
 8004ec6:	7840      	ldrb	r0, [r0, #1]
 8004ec8:	f817 8003 	ldrb.w	r8, [r7, r3]
 8004ecc:	ea48 2800 	orr.w	r8, r8, r0, lsl #8
		if (wc)
 8004ed0:	2900      	cmp	r1, #0
 8004ed2:	d1e1      	bne.n	8004e98 <dir_find+0x2e4>
			if (uc != 0xFFFF)
 8004ed4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004ed8:	4598      	cmp	r8, r3
 8004eda:	d0ec      	beq.n	8004eb6 <dir_find+0x302>
 8004edc:	e9dd 6402 	ldrd	r6, r4, [sp, #8]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum]
 8004ee0:	f04f 08ff 	mov.w	r8, #255	; 0xff
 8004ee4:	e6c6      	b.n	8004c74 <dir_find+0xc0>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])
 8004ee6:	783b      	ldrb	r3, [r7, #0]
 8004ee8:	460a      	mov	r2, r1
 8004eea:	0659      	lsls	r1, r3, #25
 8004eec:	9e02      	ldr	r6, [sp, #8]
 8004eee:	9d05      	ldr	r5, [sp, #20]
 8004ef0:	9c03      	ldr	r4, [sp, #12]
 8004ef2:	d506      	bpl.n	8004f02 <dir_find+0x34e>
 8004ef4:	b12a      	cbz	r2, 8004f02 <dir_find+0x34e>
 8004ef6:	9b04      	ldr	r3, [sp, #16]
 8004ef8:	f833 3019 	ldrh.w	r3, [r3, r9, lsl #1]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	f47f af2e 	bne.w	8004d5e <dir_find+0x1aa>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum]
 8004f02:	3d01      	subs	r5, #1
 8004f04:	fa5f f885 	uxtb.w	r8, r5
 8004f08:	e6b4      	b.n	8004c74 <dir_find+0xc0>
 8004f0a:	bf00      	nop
 8004f0c:	001fffff 	.word	0x001fffff
 8004f10:	0800a369 	.word	0x0800a369
 8004f14:	0800a35c 	.word	0x0800a35c

08004f18 <follow_path>:

static FRESULT follow_path( /* FR_OK(0): successful, !=0: error code */
DIR *dp, /* Directory object to return last directory and found object */
const TCHAR *path /* Full-path string to find a file or directory */
)
{
 8004f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f1c:	4607      	mov	r7, r0
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
	FATFS *fs = obj->fs;
 8004f1e:	f8d0 b000 	ldr.w	fp, [r0]
{
 8004f22:	b085      	sub	sp, #20
 8004f24:	460d      	mov	r5, r1
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{ /* With heading separator */
		while (*path == '/' || *path == '\\')
 8004f26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f2a:	2b2f      	cmp	r3, #47	; 0x2f
 8004f2c:	d0fa      	beq.n	8004f24 <follow_path+0xc>
 8004f2e:	2b5c      	cmp	r3, #92	; 0x5c
 8004f30:	d0f8      	beq.n	8004f24 <follow_path+0xc>
			path++; /* Strip heading separator */
		obj->sclust = 0; /* Start from root directory */
 8004f32:	2100      	movs	r1, #0
 8004f34:	60b9      	str	r1, [r7, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT) *path < ' ')
 8004f36:	7828      	ldrb	r0, [r5, #0]
 8004f38:	281f      	cmp	r0, #31
 8004f3a:	f240 8137 	bls.w	80051ac <follow_path+0x294>
	FATFS *fs = obj->fs;
 8004f3e:	465b      	mov	r3, fp
	cf = (w < ' ') ? NS_LAST : 0; /* Set last segment flag if end of the path */
 8004f40:	9101      	str	r1, [sp, #4]
		w = p[si++]; /* Get a character */
 8004f42:	b280      	uxth	r0, r0
		if (w < ' ')
 8004f44:	281f      	cmp	r0, #31
	lfn = dp->obj.fs->lfnbuf;
 8004f46:	691e      	ldr	r6, [r3, #16]
		if (w < ' ')
 8004f48:	d945      	bls.n	8004fd6 <follow_path+0xbe>
		if (w == '/' || w == '\\')
 8004f4a:	282f      	cmp	r0, #47	; 0x2f
 8004f4c:	d02b      	beq.n	8004fa6 <follow_path+0x8e>
 8004f4e:	285c      	cmp	r0, #92	; 0x5c
 8004f50:	d029      	beq.n	8004fa6 <follow_path+0x8e>
 8004f52:	f1a6 0902 	sub.w	r9, r6, #2
 8004f56:	46a8      	mov	r8, r5
		w = p[si++]; /* Get a character */
 8004f58:	2401      	movs	r4, #1
 8004f5a:	e00f      	b.n	8004f7c <follow_path+0x64>
		lfn[di++] = w; /* Store the Unicode character */
 8004f5c:	f829 0f02 	strh.w	r0, [r9, #2]!
		w = p[si++]; /* Get a character */
 8004f60:	f818 0f01 	ldrb.w	r0, [r8, #1]!
 8004f64:	1c63      	adds	r3, r4, #1
		if (w < ' ')
 8004f66:	281f      	cmp	r0, #31
 8004f68:	f240 811c 	bls.w	80051a4 <follow_path+0x28c>
		if (w == '/' || w == '\\')
 8004f6c:	282f      	cmp	r0, #47	; 0x2f
 8004f6e:	d01c      	beq.n	8004faa <follow_path+0x92>
 8004f70:	285c      	cmp	r0, #92	; 0x5c
 8004f72:	d01a      	beq.n	8004faa <follow_path+0x92>
		if (di >= _MAX_LFN)
 8004f74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f78:	d011      	beq.n	8004f9e <follow_path+0x86>
 8004f7a:	461c      	mov	r4, r3
		w = ff_convert(w, 1); /* Convert ANSI/OEM to Unicode */
 8004f7c:	2101      	movs	r1, #1
 8004f7e:	f003 f923 	bl	80081c8 <ff_convert>
		if (!w)
 8004f82:	b160      	cbz	r0, 8004f9e <follow_path+0x86>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w))
 8004f84:	287f      	cmp	r0, #127	; 0x7f
 8004f86:	d8e9      	bhi.n	8004f5c <follow_path+0x44>
	while (*str && *str != chr)
 8004f88:	2822      	cmp	r0, #34	; 0x22
 8004f8a:	d008      	beq.n	8004f9e <follow_path+0x86>
 8004f8c:	232a      	movs	r3, #42	; 0x2a
		str++;
 8004f8e:	4a97      	ldr	r2, [pc, #604]	; (80051ec <follow_path+0x2d4>)
 8004f90:	e003      	b.n	8004f9a <follow_path+0x82>
	while (*str && *str != chr)
 8004f92:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d0e0      	beq.n	8004f5c <follow_path+0x44>
 8004f9a:	4298      	cmp	r0, r3
 8004f9c:	d1f9      	bne.n	8004f92 <follow_path+0x7a>
				cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8004f9e:	2006      	movs	r0, #6
			}
		}
	}

	return res;
}
 8004fa0:	b005      	add	sp, #20
 8004fa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	si = di = 0;
 8004fa6:	2400      	movs	r4, #0
		w = p[si++]; /* Get a character */
 8004fa8:	2301      	movs	r3, #1
 8004faa:	442b      	add	r3, r5
			while (p[si] == '/' || p[si] == '\\')
 8004fac:	781a      	ldrb	r2, [r3, #0]
 8004fae:	461d      	mov	r5, r3
 8004fb0:	2a2f      	cmp	r2, #47	; 0x2f
 8004fb2:	f103 0301 	add.w	r3, r3, #1
 8004fb6:	d0f9      	beq.n	8004fac <follow_path+0x94>
 8004fb8:	2a5c      	cmp	r2, #92	; 0x5c
 8004fba:	d0f7      	beq.n	8004fac <follow_path+0x94>
	while (di)
 8004fbc:	b15c      	cbz	r4, 8004fd6 <follow_path+0xbe>
	cf = (w < ' ') ? NS_LAST : 0; /* Set last segment flag if end of the path */
 8004fbe:	f04f 0900 	mov.w	r9, #0
 8004fc2:	eb06 0244 	add.w	r2, r6, r4, lsl #1
		w = lfn[di - 1];
 8004fc6:	f832 3d02 	ldrh.w	r3, [r2, #-2]!
		if (w != ' ' && w != '.')
 8004fca:	2b20      	cmp	r3, #32
 8004fcc:	d001      	beq.n	8004fd2 <follow_path+0xba>
 8004fce:	2b2e      	cmp	r3, #46	; 0x2e
 8004fd0:	d107      	bne.n	8004fe2 <follow_path+0xca>
	while (di)
 8004fd2:	3c01      	subs	r4, #1
 8004fd4:	d1f7      	bne.n	8004fc6 <follow_path+0xae>
	lfn[di] = 0; /* LFN is created */
 8004fd6:	2300      	movs	r3, #0
		return FR_INVALID_NAME; /* Reject nul name */
 8004fd8:	2006      	movs	r0, #6
	lfn[di] = 0; /* LFN is created */
 8004fda:	8033      	strh	r3, [r6, #0]
}
 8004fdc:	b005      	add	sp, #20
 8004fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*d++ = (BYTE) val;
 8004fe2:	2320      	movs	r3, #32
 8004fe4:	f04f 3120 	mov.w	r1, #538976288	; 0x20202020
	lfn[di] = 0; /* LFN is created */
 8004fe8:	9a01      	ldr	r2, [sp, #4]
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++)
 8004fea:	f04f 0800 	mov.w	r8, #0
	lfn[di] = 0; /* LFN is created */
 8004fee:	f826 2014 	strh.w	r2, [r6, r4, lsl #1]
		*d++ = (BYTE) val;
 8004ff2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8004ff6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8004ffa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	lfn[di] = 0; /* LFN is created */
 8004ffe:	eb06 0244 	add.w	r2, r6, r4, lsl #1
		*d++ = (BYTE) val;
 8005002:	6279      	str	r1, [r7, #36]	; 0x24
 8005004:	62b9      	str	r1, [r7, #40]	; 0x28
 8005006:	1eb3      	subs	r3, r6, #2
 8005008:	e001      	b.n	800500e <follow_path+0xf6>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++)
 800500a:	f108 0801 	add.w	r8, r8, #1
 800500e:	f833 0f02 	ldrh.w	r0, [r3, #2]!
 8005012:	2820      	cmp	r0, #32
 8005014:	d0f9      	beq.n	800500a <follow_path+0xf2>
 8005016:	282e      	cmp	r0, #46	; 0x2e
 8005018:	d0f7      	beq.n	800500a <follow_path+0xf2>
	if (si)
 800501a:	f1b8 0f00 	cmp.w	r8, #0
 800501e:	d001      	beq.n	8005024 <follow_path+0x10c>
		cf |= NS_LOSS | NS_LFN;
 8005020:	f049 0903 	orr.w	r9, r9, #3
 8005024:	4613      	mov	r3, r2
	while (di && lfn[di - 1] != '.')
 8005026:	f833 2d02 	ldrh.w	r2, [r3, #-2]!
 800502a:	2a2e      	cmp	r2, #46	; 0x2e
 800502c:	d001      	beq.n	8005032 <follow_path+0x11a>
 800502e:	3c01      	subs	r4, #1
 8005030:	d1f9      	bne.n	8005026 <follow_path+0x10e>
		dp->fn[i++] = (BYTE) w;
 8005032:	2300      	movs	r3, #0
 8005034:	2208      	movs	r2, #8
 8005036:	469a      	mov	sl, r3
		w = lfn[si++]; /* Get an LFN character */
 8005038:	f108 0801 	add.w	r8, r8, #1
		if (!w)
 800503c:	b340      	cbz	r0, 8005090 <follow_path+0x178>
		if (w == ' ' || (w == '.' && si != di))
 800503e:	2820      	cmp	r0, #32
 8005040:	d073      	beq.n	800512a <follow_path+0x212>
 8005042:	282e      	cmp	r0, #46	; 0x2e
 8005044:	d076      	beq.n	8005134 <follow_path+0x21c>
		if (i >= ni || si == di)
 8005046:	4293      	cmp	r3, r2
 8005048:	d21a      	bcs.n	8005080 <follow_path+0x168>
 800504a:	45a0      	cmp	r8, r4
 800504c:	d074      	beq.n	8005138 <follow_path+0x220>
		if (w >= 0x80)
 800504e:	287f      	cmp	r0, #127	; 0x7f
 8005050:	f200 808f 	bhi.w	8005172 <follow_path+0x25a>
	while (*str && *str != chr)
 8005054:	282b      	cmp	r0, #43	; 0x2b
 8005056:	f000 809d 	beq.w	8005194 <follow_path+0x27c>
 800505a:	212c      	movs	r1, #44	; 0x2c
		str++;
 800505c:	f8df c194 	ldr.w	ip, [pc, #404]	; 80051f4 <follow_path+0x2dc>
	while (*str && *str != chr)
 8005060:	4281      	cmp	r1, r0
 8005062:	f000 8097 	beq.w	8005194 <follow_path+0x27c>
 8005066:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
 800506a:	2900      	cmp	r1, #0
 800506c:	d1f8      	bne.n	8005060 <follow_path+0x148>
				if (IsUpper(w))
 800506e:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
 8005072:	2919      	cmp	r1, #25
 8005074:	f200 80a3 	bhi.w	80051be <follow_path+0x2a6>
					b |= 2;
 8005078:	f04a 0a02 	orr.w	sl, sl, #2
 800507c:	b2c0      	uxtb	r0, r0
 800507e:	e08c      	b.n	800519a <follow_path+0x282>
			if (ni == 11)
 8005080:	2a0b      	cmp	r2, #11
 8005082:	f000 80a8 	beq.w	80051d6 <follow_path+0x2be>
			if (si != di)
 8005086:	45a0      	cmp	r8, r4
 8005088:	d058      	beq.n	800513c <follow_path+0x224>
				cf |= NS_LOSS | NS_LFN; /* Out of 8.3 format */
 800508a:	f049 0903 	orr.w	r9, r9, #3
			if (si > di)
 800508e:	d955      	bls.n	800513c <follow_path+0x224>
	if (dp->fn[0] == DDEM)
 8005090:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005094:	2be5      	cmp	r3, #229	; 0xe5
		dp->fn[0] = RDDEM; /* If the first character collides with DDEM, replace it with RDDEM */
 8005096:	bf04      	itt	eq
 8005098:	2305      	moveq	r3, #5
 800509a:	f887 3024 	strbeq.w	r3, [r7, #36]	; 0x24
	if (ni == 8)
 800509e:	2a08      	cmp	r2, #8
		b <<= 2;
 80050a0:	bf04      	itt	eq
 80050a2:	ea4f 0a8a 	moveq.w	sl, sl, lsl #2
 80050a6:	fa5f fa8a 	uxtbeq.w	sl, sl
 80050aa:	f00a 030c 	and.w	r3, sl, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)
 80050ae:	2b0c      	cmp	r3, #12
 80050b0:	d04c      	beq.n	800514c <follow_path+0x234>
 80050b2:	f00a 0a03 	and.w	sl, sl, #3
 80050b6:	f1ba 0f03 	cmp.w	sl, #3
 80050ba:	d047      	beq.n	800514c <follow_path+0x234>
	if (!(cf & NS_LFN))
 80050bc:	f019 0f02 	tst.w	r9, #2
 80050c0:	d108      	bne.n	80050d4 <follow_path+0x1bc>
		if ((b & 0x03) == 0x01)
 80050c2:	f1ba 0f01 	cmp.w	sl, #1
			cf |= NS_EXT; /* NT flag (Extension has only small capital) */
 80050c6:	bf08      	it	eq
 80050c8:	f049 0910 	orreq.w	r9, r9, #16
		if ((b & 0x0C) == 0x04)
 80050cc:	2b04      	cmp	r3, #4
			cf |= NS_BODY; /* NT flag (Filename has only small capital) */
 80050ce:	bf08      	it	eq
 80050d0:	f049 0908 	orreq.w	r9, r9, #8
	dp->fn[NSFLAG] = cf; /* SFN is created */
 80050d4:	f887 902f 	strb.w	r9, [r7, #47]	; 0x2f
			res = dir_find(dp); /* Find an object with the segment name */
 80050d8:	4638      	mov	r0, r7
 80050da:	f7ff fd6b 	bl	8004bb4 <dir_find>
			ns = dp->fn[NSFLAG];
 80050de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK)
 80050e2:	2800      	cmp	r0, #0
 80050e4:	d13d      	bne.n	8005162 <follow_path+0x24a>
			if (ns & NS_LAST)
 80050e6:	075a      	lsls	r2, r3, #29
 80050e8:	f53f af5a 	bmi.w	8004fa0 <follow_path+0x88>
			if (!(obj->attr & AM_DIR))
 80050ec:	79bb      	ldrb	r3, [r7, #6]
 80050ee:	06db      	lsls	r3, r3, #27
 80050f0:	d56f      	bpl.n	80051d2 <follow_path+0x2ba>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs)); /* Open next directory */
 80050f2:	f8bb 100c 	ldrh.w	r1, [fp, #12]
 80050f6:	6978      	ldr	r0, [r7, #20]
 80050f8:	f10b 033c 	add.w	r3, fp, #60	; 0x3c
 80050fc:	fbb0 f2f1 	udiv	r2, r0, r1
 8005100:	fb01 0212 	mls	r2, r1, r2, r0
	if (fs->fs_type == FS_FAT32)
 8005104:	f89b 1000 	ldrb.w	r1, [fp]
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs)); /* Open next directory */
 8005108:	4413      	add	r3, r2
	rv = rv << 8 | ptr[0];
 800510a:	7ed8      	ldrb	r0, [r3, #27]
 800510c:	7e9a      	ldrb	r2, [r3, #26]
	if (fs->fs_type == FS_FAT32)
 800510e:	2903      	cmp	r1, #3
	cl = ld_word(dir + DIR_FstClusLO);
 8005110:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	if (fs->fs_type == FS_FAT32)
 8005114:	d105      	bne.n	8005122 <follow_path+0x20a>
	rv = rv << 8 | ptr[0];
 8005116:	7d59      	ldrb	r1, [r3, #21]
 8005118:	7d1b      	ldrb	r3, [r3, #20]
		cl |= (DWORD) ld_word(dir + DIR_FstClusHI) << 16;
 800511a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800511e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs)); /* Open next directory */
 8005122:	60ba      	str	r2, [r7, #8]
 8005124:	7828      	ldrb	r0, [r5, #0]
 8005126:	683b      	ldr	r3, [r7, #0]
			res = create_name(dp, &path); /* Get a segment name of the path */
 8005128:	e70b      	b.n	8004f42 <follow_path+0x2a>
			cf |= NS_LOSS | NS_LFN;
 800512a:	f049 0903 	orr.w	r9, r9, #3
 800512e:	f836 0018 	ldrh.w	r0, [r6, r8, lsl #1]
 8005132:	e781      	b.n	8005038 <follow_path+0x120>
		if (w == ' ' || (w == '.' && si != di))
 8005134:	45a0      	cmp	r8, r4
 8005136:	d1f8      	bne.n	800512a <follow_path+0x212>
			if (ni == 11)
 8005138:	2a0b      	cmp	r2, #11
 800513a:	d04c      	beq.n	80051d6 <follow_path+0x2be>
			b <<= 2;
 800513c:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8005140:	fa5f fa8a 	uxtb.w	sl, sl
 8005144:	46a0      	mov	r8, r4
			ni = 11; /* Enter extension section */
 8005146:	220b      	movs	r2, #11
			i = 8;
 8005148:	2308      	movs	r3, #8
 800514a:	e7f0      	b.n	800512e <follow_path+0x216>
		cf |= NS_LFN; /* Create LFN entry when there are composite capitals */
 800514c:	f049 0902 	orr.w	r9, r9, #2
	dp->fn[NSFLAG] = cf; /* SFN is created */
 8005150:	f887 902f 	strb.w	r9, [r7, #47]	; 0x2f
			res = dir_find(dp); /* Find an object with the segment name */
 8005154:	4638      	mov	r0, r7
 8005156:	f7ff fd2d 	bl	8004bb4 <dir_find>
			ns = dp->fn[NSFLAG];
 800515a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK)
 800515e:	2800      	cmp	r0, #0
 8005160:	d0c1      	beq.n	80050e6 <follow_path+0x1ce>
				if (res == FR_NO_FILE)
 8005162:	2804      	cmp	r0, #4
 8005164:	f47f af1c 	bne.w	8004fa0 <follow_path+0x88>
							res = FR_NO_PATH; /* Adjust error code if not last segment */
 8005168:	f013 0f04 	tst.w	r3, #4
 800516c:	bf08      	it	eq
 800516e:	2005      	moveq	r0, #5
 8005170:	e716      	b.n	8004fa0 <follow_path+0x88>
			w = ff_convert(w, 0); /* Unicode -> OEM code */
 8005172:	2100      	movs	r1, #0
 8005174:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8005178:	f003 f826 	bl	80081c8 <ff_convert>
			if (w)
 800517c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8005180:	f049 0902 	orr.w	r9, r9, #2
 8005184:	b130      	cbz	r0, 8005194 <follow_path+0x27c>
				w = ExCvt[w - 0x80]; /* Convert extended character to upper (SBCS) */
 8005186:	491a      	ldr	r1, [pc, #104]	; (80051f0 <follow_path+0x2d8>)
 8005188:	4408      	add	r0, r1
 800518a:	f810 0c80 	ldrb.w	r0, [r0, #-128]
			if (!w || chk_chr("+,;=[]", w))
 800518e:	2800      	cmp	r0, #0
 8005190:	f47f af60 	bne.w	8005054 <follow_path+0x13c>
				cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8005194:	205f      	movs	r0, #95	; 0x5f
 8005196:	f049 0903 	orr.w	r9, r9, #3
		dp->fn[i++] = (BYTE) w;
 800519a:	18f9      	adds	r1, r7, r3
 800519c:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
 80051a0:	3301      	adds	r3, #1
 80051a2:	e7c4      	b.n	800512e <follow_path+0x216>
	*path = &p[si]; /* Return pointer to the next segment */
 80051a4:	441d      	add	r5, r3
	cf = (w < ' ') ? NS_LAST : 0; /* Set last segment flag if end of the path */
 80051a6:	f04f 0904 	mov.w	r9, #4
 80051aa:	e70a      	b.n	8004fc2 <follow_path+0xaa>
		dp->fn[NSFLAG] = NS_NONAME;
 80051ac:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
 80051ae:	4638      	mov	r0, r7
		dp->fn[NSFLAG] = NS_NONAME;
 80051b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
}
 80051b4:	b005      	add	sp, #20
 80051b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
 80051ba:	f7fe bb1f 	b.w	80037fc <dir_sdi>
					if (IsLower(w))
 80051be:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
 80051c2:	2919      	cmp	r1, #25
						w -= 0x20;
 80051c4:	bf97      	itett	ls
 80051c6:	3820      	subls	r0, #32
 80051c8:	b2c0      	uxtbhi	r0, r0
 80051ca:	b2c0      	uxtbls	r0, r0
						b |= 1;
 80051cc:	f04a 0a01 	orrls.w	sl, sl, #1
 80051d0:	e7e3      	b.n	800519a <follow_path+0x282>
							res = FR_NO_PATH; /* Adjust error code if not last segment */
 80051d2:	2005      	movs	r0, #5
 80051d4:	e6e4      	b.n	8004fa0 <follow_path+0x88>
	if (dp->fn[0] == DDEM)
 80051d6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
				cf |= NS_LOSS | NS_LFN;
 80051da:	f049 0903 	orr.w	r9, r9, #3
	if (dp->fn[0] == DDEM)
 80051de:	2be5      	cmp	r3, #229	; 0xe5
 80051e0:	f47f af63 	bne.w	80050aa <follow_path+0x192>
		dp->fn[0] = RDDEM; /* If the first character collides with DDEM, replace it with RDDEM */
 80051e4:	2305      	movs	r3, #5
 80051e6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80051ea:	e75e      	b.n	80050aa <follow_path+0x192>
 80051ec:	0800a3a1 	.word	0x0800a3a1
 80051f0:	0800a2dc 	.word	0x0800a2dc
 80051f4:	0800a3ad 	.word	0x0800a3ad

080051f8 <dir_register>:
{
 80051f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME))
 80051fc:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
{
 8005200:	b08b      	sub	sp, #44	; 0x2c
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME))
 8005202:	f013 08a0 	ands.w	r8, r3, #160	; 0xa0
 8005206:	f040 82f0 	bne.w	80057ea <dir_register+0x5f2>
	FATFS *fs = dp->obj.fs;
 800520a:	6803      	ldr	r3, [r0, #0]
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++)
 800520c:	f8d3 c010 	ldr.w	ip, [r3, #16]
	FATFS *fs = dp->obj.fs;
 8005210:	9301      	str	r3, [sp, #4]
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++)
 8005212:	f8bc 3000 	ldrh.w	r3, [ip]
 8005216:	2b00      	cmp	r3, #0
 8005218:	f000 84f8 	beq.w	8005c0c <dir_register+0xa14>
 800521c:	4663      	mov	r3, ip
 800521e:	f833 2f02 	ldrh.w	r2, [r3, #2]!
 8005222:	f108 0801 	add.w	r8, r8, #1
 8005226:	2a00      	cmp	r2, #0
 8005228:	d1f9      	bne.n	800521e <dir_register+0x26>
	mem_cpy(sn, dp->fn, 12);
 800522a:	4683      	mov	fp, r0
 800522c:	4604      	mov	r4, r0
 800522e:	f85b 0f24 	ldr.w	r0, [fp, #36]!
 8005232:	ab07      	add	r3, sp, #28
 8005234:	f8db 1004 	ldr.w	r1, [fp, #4]
 8005238:	f8db 2008 	ldr.w	r2, [fp, #8]
 800523c:	c307      	stmia	r3!, {r0, r1, r2}
	if (sn[NSFLAG] & NS_LOSS)
 800523e:	f89d 7027 	ldrb.w	r7, [sp, #39]	; 0x27
 8005242:	07fb      	lsls	r3, r7, #31
 8005244:	d458      	bmi.n	80052f8 <dir_register+0x100>
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1; /* Number of entries to allocate */
 8005246:	07bb      	lsls	r3, r7, #30
 8005248:	9e01      	ldr	r6, [sp, #4]
 800524a:	f140 82cb 	bpl.w	80057e4 <dir_register+0x5ec>
 800524e:	4bc2      	ldr	r3, [pc, #776]	; (8005558 <dir_register+0x360>)
 8005250:	f108 050c 	add.w	r5, r8, #12
 8005254:	fba3 3505 	umull	r3, r5, r3, r5
 8005258:	08ad      	lsrs	r5, r5, #2
 800525a:	1c6b      	adds	r3, r5, #1
 800525c:	9302      	str	r3, [sp, #8]
	res = dir_sdi(dp, 0);
 800525e:	2100      	movs	r1, #0
 8005260:	4620      	mov	r0, r4
 8005262:	f7fe facb 	bl	80037fc <dir_sdi>
	if (res == FR_OK)
 8005266:	4603      	mov	r3, r0
 8005268:	9000      	str	r0, [sp, #0]
 800526a:	2800      	cmp	r0, #0
 800526c:	f040 81d9 	bne.w	8005622 <dir_register+0x42a>
 8005270:	f106 053c 	add.w	r5, r6, #60	; 0x3c
		n = 0;
 8005274:	4681      	mov	r9, r0
 8005276:	46aa      	mov	sl, r5
 8005278:	f8cd b00c 	str.w	fp, [sp, #12]
 800527c:	f8dd b008 	ldr.w	fp, [sp, #8]
			res = move_window(fs, dp->sect);
 8005280:	69e5      	ldr	r5, [r4, #28]
	if (sector != fs->winsect)
 8005282:	6bb7      	ldr	r7, [r6, #56]	; 0x38
 8005284:	42bd      	cmp	r5, r7
 8005286:	f000 81b9 	beq.w	80055fc <dir_register+0x404>
	if (fs->wflag)
 800528a:	78f3      	ldrb	r3, [r6, #3]
 800528c:	7870      	ldrb	r0, [r6, #1]
 800528e:	b313      	cbz	r3, 80052d6 <dir_register+0xde>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 8005290:	2301      	movs	r3, #1
 8005292:	463a      	mov	r2, r7
 8005294:	4651      	mov	r1, sl
 8005296:	f7fe f9e1 	bl	800365c <disk_write>
 800529a:	2800      	cmp	r0, #0
 800529c:	f040 82b7 	bne.w	800580e <dir_register+0x616>
			if (wsect - fs->fatbase < fs->fsize)
 80052a0:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 80052a2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80052a4:	1aba      	subs	r2, r7, r2
 80052a6:	429a      	cmp	r2, r3
			fs->wflag = 0;
 80052a8:	70f0      	strb	r0, [r6, #3]
 80052aa:	7870      	ldrb	r0, [r6, #1]
			if (wsect - fs->fatbase < fs->fsize)
 80052ac:	d213      	bcs.n	80052d6 <dir_register+0xde>
				for (nf = fs->n_fats; nf >= 2; nf--)
 80052ae:	f896 8002 	ldrb.w	r8, [r6, #2]
 80052b2:	f1b8 0f01 	cmp.w	r8, #1
 80052b6:	d802      	bhi.n	80052be <dir_register+0xc6>
 80052b8:	e00d      	b.n	80052d6 <dir_register+0xde>
 80052ba:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80052bc:	7870      	ldrb	r0, [r6, #1]
					wsect += fs->fsize;
 80052be:	441f      	add	r7, r3
				for (nf = fs->n_fats; nf >= 2; nf--)
 80052c0:	f108 38ff 	add.w	r8, r8, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 80052c4:	463a      	mov	r2, r7
 80052c6:	2301      	movs	r3, #1
 80052c8:	4651      	mov	r1, sl
 80052ca:	f7fe f9c7 	bl	800365c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--)
 80052ce:	f1b8 0f01 	cmp.w	r8, #1
 80052d2:	d1f2      	bne.n	80052ba <dir_register+0xc2>
 80052d4:	7870      	ldrb	r0, [r6, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
 80052d6:	2301      	movs	r3, #1
 80052d8:	462a      	mov	r2, r5
 80052da:	4651      	mov	r1, sl
 80052dc:	f7fe f9b0 	bl	8003640 <disk_read>
 80052e0:	2800      	cmp	r0, #0
 80052e2:	f000 818a 	beq.w	80055fa <dir_register+0x402>
			fs->winsect = sector;
 80052e6:	f04f 33ff 	mov.w	r3, #4294967295
				res = FR_DISK_ERR;
 80052ea:	2201      	movs	r2, #1
			fs->winsect = sector;
 80052ec:	63b3      	str	r3, [r6, #56]	; 0x38
				res = FR_DISK_ERR;
 80052ee:	9200      	str	r2, [sp, #0]
}
 80052f0:	9800      	ldr	r0, [sp, #0]
 80052f2:	b00b      	add	sp, #44	; 0x2c
 80052f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp->fn[NSFLAG] = NS_NOLFN; /* Find only SFN */
 80052f8:	2340      	movs	r3, #64	; 0x40
		for (n = 1; n < 100; n++)
 80052fa:	2601      	movs	r6, #1
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80052fc:	f04f 0920 	mov.w	r9, #32
		dp->fn[NSFLAG] = NS_NOLFN; /* Find only SFN */
 8005300:	9700      	str	r7, [sp, #0]
					sr ^= 0x11021;
 8005302:	4d96      	ldr	r5, [pc, #600]	; (800555c <dir_register+0x364>)
		dp->fn[NSFLAG] = NS_NOLFN; /* Find only SFN */
 8005304:	9f01      	ldr	r7, [sp, #4]
 8005306:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
			*d++ = *s++;
 800530a:	9b08      	ldr	r3, [sp, #32]
 800530c:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
 8005310:	f89d 1025 	ldrb.w	r1, [sp, #37]	; 0x25
 8005314:	62a3      	str	r3, [r4, #40]	; 0x28
 8005316:	9a07      	ldr	r2, [sp, #28]
 8005318:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
	if (seq > 5)
 800531c:	2e05      	cmp	r6, #5
			*d++ = *s++;
 800531e:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
 8005322:	6262      	str	r2, [r4, #36]	; 0x24
 8005324:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
 8005328:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 800532c:	f89d 001c 	ldrb.w	r0, [sp, #28]
	if (seq > 5)
 8005330:	f240 8180 	bls.w	8005634 <dir_register+0x43c>
 8005334:	f1ac 0c02 	sub.w	ip, ip, #2
 8005338:	4633      	mov	r3, r6
 800533a:	e099      	b.n	8005470 <dir_register+0x278>
				sr = (sr << 1) + (wc & 1);
 800533c:	f002 0101 	and.w	r1, r2, #1
 8005340:	eb01 0143 	add.w	r1, r1, r3, lsl #1
				if (sr & 0x10000)
 8005344:	f411 3f80 	tst.w	r1, #65536	; 0x10000
				wc >>= 1;
 8005348:	ea4f 0352 	mov.w	r3, r2, lsr #1
					sr ^= 0x11021;
 800534c:	bf18      	it	ne
 800534e:	4069      	eorne	r1, r5
				sr = (sr << 1) + (wc & 1);
 8005350:	f003 0301 	and.w	r3, r3, #1
 8005354:	eb03 0141 	add.w	r1, r3, r1, lsl #1
				if (sr & 0x10000)
 8005358:	f411 3f80 	tst.w	r1, #65536	; 0x10000
				wc >>= 1;
 800535c:	ea4f 0392 	mov.w	r3, r2, lsr #2
					sr ^= 0x11021;
 8005360:	bf18      	it	ne
 8005362:	4069      	eorne	r1, r5
				sr = (sr << 1) + (wc & 1);
 8005364:	f003 0301 	and.w	r3, r3, #1
 8005368:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000)
 800536c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
				wc >>= 1;
 8005370:	ea4f 01d2 	mov.w	r1, r2, lsr #3
					sr ^= 0x11021;
 8005374:	bf18      	it	ne
 8005376:	406b      	eorne	r3, r5
				sr = (sr << 1) + (wc & 1);
 8005378:	f001 0101 	and.w	r1, r1, #1
 800537c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
				if (sr & 0x10000)
 8005380:	f413 3f80 	tst.w	r3, #65536	; 0x10000
				wc >>= 1;
 8005384:	ea4f 1112 	mov.w	r1, r2, lsr #4
					sr ^= 0x11021;
 8005388:	bf18      	it	ne
 800538a:	406b      	eorne	r3, r5
				sr = (sr << 1) + (wc & 1);
 800538c:	f001 0101 	and.w	r1, r1, #1
 8005390:	eb01 0143 	add.w	r1, r1, r3, lsl #1
				if (sr & 0x10000)
 8005394:	f411 3f80 	tst.w	r1, #65536	; 0x10000
				wc >>= 1;
 8005398:	ea4f 1352 	mov.w	r3, r2, lsr #5
					sr ^= 0x11021;
 800539c:	bf18      	it	ne
 800539e:	4069      	eorne	r1, r5
				sr = (sr << 1) + (wc & 1);
 80053a0:	f003 0301 	and.w	r3, r3, #1
 80053a4:	eb03 0141 	add.w	r1, r3, r1, lsl #1
				if (sr & 0x10000)
 80053a8:	f411 3f80 	tst.w	r1, #65536	; 0x10000
				wc >>= 1;
 80053ac:	ea4f 1392 	mov.w	r3, r2, lsr #6
					sr ^= 0x11021;
 80053b0:	bf18      	it	ne
 80053b2:	4069      	eorne	r1, r5
				sr = (sr << 1) + (wc & 1);
 80053b4:	f003 0301 	and.w	r3, r3, #1
 80053b8:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000)
 80053bc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
				wc >>= 1;
 80053c0:	ea4f 11d2 	mov.w	r1, r2, lsr #7
					sr ^= 0x11021;
 80053c4:	bf18      	it	ne
 80053c6:	406b      	eorne	r3, r5
				sr = (sr << 1) + (wc & 1);
 80053c8:	f001 0101 	and.w	r1, r1, #1
 80053cc:	eb01 0343 	add.w	r3, r1, r3, lsl #1
				if (sr & 0x10000)
 80053d0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
				wc >>= 1;
 80053d4:	ea4f 2112 	mov.w	r1, r2, lsr #8
					sr ^= 0x11021;
 80053d8:	bf18      	it	ne
 80053da:	406b      	eorne	r3, r5
				sr = (sr << 1) + (wc & 1);
 80053dc:	f001 0101 	and.w	r1, r1, #1
 80053e0:	eb01 0143 	add.w	r1, r1, r3, lsl #1
				if (sr & 0x10000)
 80053e4:	f411 3f80 	tst.w	r1, #65536	; 0x10000
				wc >>= 1;
 80053e8:	ea4f 2352 	mov.w	r3, r2, lsr #9
					sr ^= 0x11021;
 80053ec:	bf18      	it	ne
 80053ee:	4069      	eorne	r1, r5
				sr = (sr << 1) + (wc & 1);
 80053f0:	f003 0301 	and.w	r3, r3, #1
 80053f4:	eb03 0141 	add.w	r1, r3, r1, lsl #1
				if (sr & 0x10000)
 80053f8:	f411 3f80 	tst.w	r1, #65536	; 0x10000
				wc >>= 1;
 80053fc:	ea4f 2392 	mov.w	r3, r2, lsr #10
					sr ^= 0x11021;
 8005400:	bf18      	it	ne
 8005402:	4069      	eorne	r1, r5
				sr = (sr << 1) + (wc & 1);
 8005404:	f003 0301 	and.w	r3, r3, #1
 8005408:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000)
 800540c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
				wc >>= 1;
 8005410:	ea4f 21d2 	mov.w	r1, r2, lsr #11
					sr ^= 0x11021;
 8005414:	bf18      	it	ne
 8005416:	406b      	eorne	r3, r5
				sr = (sr << 1) + (wc & 1);
 8005418:	f001 0101 	and.w	r1, r1, #1
 800541c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
				if (sr & 0x10000)
 8005420:	f413 3f80 	tst.w	r3, #65536	; 0x10000
				wc >>= 1;
 8005424:	ea4f 3112 	mov.w	r1, r2, lsr #12
					sr ^= 0x11021;
 8005428:	bf18      	it	ne
 800542a:	406b      	eorne	r3, r5
				sr = (sr << 1) + (wc & 1);
 800542c:	f001 0101 	and.w	r1, r1, #1
 8005430:	eb01 0143 	add.w	r1, r1, r3, lsl #1
				if (sr & 0x10000)
 8005434:	f411 3f80 	tst.w	r1, #65536	; 0x10000
				wc >>= 1;
 8005438:	ea4f 3352 	mov.w	r3, r2, lsr #13
					sr ^= 0x11021;
 800543c:	bf18      	it	ne
 800543e:	4069      	eorne	r1, r5
				sr = (sr << 1) + (wc & 1);
 8005440:	f003 0301 	and.w	r3, r3, #1
 8005444:	eb03 0141 	add.w	r1, r3, r1, lsl #1
				if (sr & 0x10000)
 8005448:	f411 3f80 	tst.w	r1, #65536	; 0x10000
				wc >>= 1;
 800544c:	ea4f 3392 	mov.w	r3, r2, lsr #14
					sr ^= 0x11021;
 8005450:	bf18      	it	ne
 8005452:	4069      	eorne	r1, r5
				sr = (sr << 1) + (wc & 1);
 8005454:	f003 0301 	and.w	r3, r3, #1
 8005458:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000)
 800545c:	03d9      	lsls	r1, r3, #15
				wc >>= 1;
 800545e:	ea4f 32d2 	mov.w	r2, r2, lsr #15
					sr ^= 0x11021;
 8005462:	bf48      	it	mi
 8005464:	406b      	eormi	r3, r5
				sr = (sr << 1) + (wc & 1);
 8005466:	eb02 0343 	add.w	r3, r2, r3, lsl #1
				if (sr & 0x10000)
 800546a:	03da      	lsls	r2, r3, #15
					sr ^= 0x11021;
 800546c:	bf48      	it	mi
 800546e:	406b      	eormi	r3, r5
		while (*lfn)
 8005470:	f83c 2f02 	ldrh.w	r2, [ip, #2]!
 8005474:	2a00      	cmp	r2, #0
 8005476:	f47f af61 	bne.w	800533c <dir_register+0x144>
		c = (BYTE) ((seq % 16) + '0');
 800547a:	f003 010f 	and.w	r1, r3, #15
 800547e:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9')
 8005482:	2a39      	cmp	r2, #57	; 0x39
			c += 7;
 8005484:	bf88      	it	hi
 8005486:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
		ns[i--] = c;
 800548a:	f88d 201b 	strb.w	r2, [sp, #27]
	} while (seq);
 800548e:	091a      	lsrs	r2, r3, #4
 8005490:	f000 8179 	beq.w	8005786 <dir_register+0x58e>
		c = (BYTE) ((seq % 16) + '0');
 8005494:	f002 020f 	and.w	r2, r2, #15
 8005498:	f102 0130 	add.w	r1, r2, #48	; 0x30
		if (c > '9')
 800549c:	2939      	cmp	r1, #57	; 0x39
			c += 7;
 800549e:	bf88      	it	hi
 80054a0:	f102 0137 	addhi.w	r1, r2, #55	; 0x37
	} while (seq);
 80054a4:	0a1a      	lsrs	r2, r3, #8
		ns[i--] = c;
 80054a6:	f88d 101a 	strb.w	r1, [sp, #26]
	} while (seq);
 80054aa:	f000 8178 	beq.w	800579e <dir_register+0x5a6>
		c = (BYTE) ((seq % 16) + '0');
 80054ae:	f002 020f 	and.w	r2, r2, #15
 80054b2:	f102 0130 	add.w	r1, r2, #48	; 0x30
		if (c > '9')
 80054b6:	2939      	cmp	r1, #57	; 0x39
			c += 7;
 80054b8:	bf88      	it	hi
 80054ba:	f102 0137 	addhi.w	r1, r2, #55	; 0x37
	} while (seq);
 80054be:	0b1a      	lsrs	r2, r3, #12
		ns[i--] = c;
 80054c0:	f88d 1019 	strb.w	r1, [sp, #25]
	} while (seq);
 80054c4:	f000 80b8 	beq.w	8005638 <dir_register+0x440>
		c = (BYTE) ((seq % 16) + '0');
 80054c8:	f002 020f 	and.w	r2, r2, #15
 80054cc:	f102 0130 	add.w	r1, r2, #48	; 0x30
		if (c > '9')
 80054d0:	2939      	cmp	r1, #57	; 0x39
			c += 7;
 80054d2:	bf88      	it	hi
 80054d4:	f102 0137 	addhi.w	r1, r2, #55	; 0x37
	} while (seq);
 80054d8:	0c1a      	lsrs	r2, r3, #16
		ns[i--] = c;
 80054da:	f88d 1018 	strb.w	r1, [sp, #24]
	} while (seq);
 80054de:	f000 816a 	beq.w	80057b6 <dir_register+0x5be>
		c = (BYTE) ((seq % 16) + '0');
 80054e2:	f002 020f 	and.w	r2, r2, #15
 80054e6:	f102 0130 	add.w	r1, r2, #48	; 0x30
		if (c > '9')
 80054ea:	2939      	cmp	r1, #57	; 0x39
			c += 7;
 80054ec:	bf88      	it	hi
 80054ee:	f102 0137 	addhi.w	r1, r2, #55	; 0x37
	} while (seq);
 80054f2:	0d1a      	lsrs	r2, r3, #20
		ns[i--] = c;
 80054f4:	f88d 1017 	strb.w	r1, [sp, #23]
	} while (seq);
 80054f8:	f000 817d 	beq.w	80057f6 <dir_register+0x5fe>
		c = (BYTE) ((seq % 16) + '0');
 80054fc:	f002 020f 	and.w	r2, r2, #15
 8005500:	f102 0130 	add.w	r1, r2, #48	; 0x30
		if (c > '9')
 8005504:	2939      	cmp	r1, #57	; 0x39
			c += 7;
 8005506:	bf88      	it	hi
 8005508:	f102 0137 	addhi.w	r1, r2, #55	; 0x37
	} while (seq);
 800550c:	0e1a      	lsrs	r2, r3, #24
		ns[i--] = c;
 800550e:	f88d 1016 	strb.w	r1, [sp, #22]
	} while (seq);
 8005512:	f000 8182 	beq.w	800581a <dir_register+0x622>
		c = (BYTE) ((seq % 16) + '0');
 8005516:	f002 020f 	and.w	r2, r2, #15
 800551a:	f102 0130 	add.w	r1, r2, #48	; 0x30
		if (c > '9')
 800551e:	2939      	cmp	r1, #57	; 0x39
			c += 7;
 8005520:	bf88      	it	hi
 8005522:	f102 0137 	addhi.w	r1, r2, #55	; 0x37
	} while (seq);
 8005526:	0f1b      	lsrs	r3, r3, #28
		ns[i--] = c;
 8005528:	f88d 1015 	strb.w	r1, [sp, #21]
	} while (seq);
 800552c:	f000 8181 	beq.w	8005832 <dir_register+0x63a>
		c = (BYTE) ((seq % 16) + '0');
 8005530:	b2db      	uxtb	r3, r3
 8005532:	f103 0230 	add.w	r2, r3, #48	; 0x30
		if (c > '9')
 8005536:	2a39      	cmp	r2, #57	; 0x39
			c += 7;
 8005538:	bf88      	it	hi
 800553a:	f103 0237 	addhi.w	r2, r3, #55	; 0x37
	for (j = 0; j < i && dst[j] != ' '; j++)
 800553e:	2820      	cmp	r0, #32
		ns[i--] = c;
 8005540:	f88d 2014 	strb.w	r2, [sp, #20]
 8005544:	bf18      	it	ne
 8005546:	f04f 30ff 	movne.w	r0, #4294967295
	for (j = 0; j < i && dst[j] != ' '; j++)
 800554a:	f000 8362 	beq.w	8005c12 <dir_register+0xa1a>
 800554e:	f104 0125 	add.w	r1, r4, #37	; 0x25
 8005552:	2200      	movs	r2, #0
 8005554:	e00a      	b.n	800556c <dir_register+0x374>
 8005556:	bf00      	nop
 8005558:	4ec4ec4f 	.word	0x4ec4ec4f
 800555c:	00011021 	.word	0x00011021
 8005560:	f89c e000 	ldrb.w	lr, [ip]
 8005564:	f1be 0f20 	cmp.w	lr, #32
 8005568:	d008      	beq.n	800557c <dir_register+0x384>
 800556a:	461a      	mov	r2, r3
 800556c:	1c53      	adds	r3, r2, #1
 800556e:	4283      	cmp	r3, r0
 8005570:	468c      	mov	ip, r1
 8005572:	f102 0a02 	add.w	sl, r2, #2
 8005576:	f101 0101 	add.w	r1, r1, #1
 800557a:	d3f1      	bcc.n	8005560 <dir_register+0x368>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800557c:	2807      	cmp	r0, #7
 800557e:	bf96      	itet	ls
 8005580:	217e      	movls	r1, #126	; 0x7e
 8005582:	2120      	movhi	r1, #32
 8005584:	3001      	addls	r0, #1
	} while (j < 8);
 8005586:	f1ba 0f07 	cmp.w	sl, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800558a:	f88c 1000 	strb.w	r1, [ip]
	} while (j < 8);
 800558e:	d828      	bhi.n	80055e2 <dir_register+0x3ea>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005590:	2807      	cmp	r0, #7
 8005592:	d95e      	bls.n	8005652 <dir_register+0x45a>
 8005594:	3203      	adds	r2, #3
	} while (j < 8);
 8005596:	2a08      	cmp	r2, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005598:	f80b 900a 	strb.w	r9, [fp, sl]
	} while (j < 8);
 800559c:	d021      	beq.n	80055e2 <dir_register+0x3ea>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800559e:	1cd9      	adds	r1, r3, #3
	} while (j < 8);
 80055a0:	2908      	cmp	r1, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80055a2:	f80b 9002 	strb.w	r9, [fp, r2]
	} while (j < 8);
 80055a6:	d01c      	beq.n	80055e2 <dir_register+0x3ea>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80055a8:	1d1a      	adds	r2, r3, #4
	} while (j < 8);
 80055aa:	2a08      	cmp	r2, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80055ac:	f80b 9001 	strb.w	r9, [fp, r1]
	} while (j < 8);
 80055b0:	d017      	beq.n	80055e2 <dir_register+0x3ea>
 80055b2:	445a      	add	r2, fp
 80055b4:	1d59      	adds	r1, r3, #5
 80055b6:	2908      	cmp	r1, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80055b8:	f882 9000 	strb.w	r9, [r2]
	} while (j < 8);
 80055bc:	d011      	beq.n	80055e2 <dir_register+0x3ea>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80055be:	1d9a      	adds	r2, r3, #6
	} while (j < 8);
 80055c0:	2a08      	cmp	r2, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80055c2:	f80b 9001 	strb.w	r9, [fp, r1]
	} while (j < 8);
 80055c6:	d00c      	beq.n	80055e2 <dir_register+0x3ea>
 80055c8:	445a      	add	r2, fp
 80055ca:	1dd9      	adds	r1, r3, #7
 80055cc:	2908      	cmp	r1, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80055ce:	f882 9000 	strb.w	r9, [r2]
	} while (j < 8);
 80055d2:	d006      	beq.n	80055e2 <dir_register+0x3ea>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80055d4:	2220      	movs	r2, #32
	} while (j < 8);
 80055d6:	3301      	adds	r3, #1
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80055d8:	f80b 2001 	strb.w	r2, [fp, r1]
 80055dc:	bf08      	it	eq
 80055de:	f884 902b 	strbeq.w	r9, [r4, #43]	; 0x2b
			res = dir_find(dp); /* Check if the name collides with existing SFN */
 80055e2:	4620      	mov	r0, r4
 80055e4:	f7ff fae6 	bl	8004bb4 <dir_find>
			if (res != FR_OK)
 80055e8:	2800      	cmp	r0, #0
 80055ea:	f040 80f0 	bne.w	80057ce <dir_register+0x5d6>
		for (n = 1; n < 100; n++)
 80055ee:	3601      	adds	r6, #1
 80055f0:	2e64      	cmp	r6, #100	; 0x64
 80055f2:	d019      	beq.n	8005628 <dir_register+0x430>
 80055f4:	f8d7 c010 	ldr.w	ip, [r7, #16]
 80055f8:	e687      	b.n	800530a <dir_register+0x112>
			fs->winsect = sector;
 80055fa:	63b5      	str	r5, [r6, #56]	; 0x38
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)
 80055fc:	6a23      	ldr	r3, [r4, #32]
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	2be5      	cmp	r3, #229	; 0xe5
 8005602:	f000 8087 	beq.w	8005714 <dir_register+0x51c>
 8005606:	2b00      	cmp	r3, #0
 8005608:	f000 8084 	beq.w	8005714 <dir_register+0x51c>
				n = 0; /* Not a blank entry. Restart to search */
 800560c:	f04f 0900 	mov.w	r9, #0
			res = dir_next(dp, 1);
 8005610:	2101      	movs	r1, #1
 8005612:	4620      	mov	r0, r4
 8005614:	f7ff f9e0 	bl	80049d8 <dir_next>
		} while (res == FR_OK); /* Next entry with table stretch enabled */
 8005618:	2800      	cmp	r0, #0
 800561a:	f43f ae31 	beq.w	8005280 <dir_register+0x88>
 800561e:	4603      	mov	r3, r0
 8005620:	9000      	str	r0, [sp, #0]
	if (res == FR_NO_FILE)
 8005622:	2b04      	cmp	r3, #4
 8005624:	f47f ae64 	bne.w	80052f0 <dir_register+0xf8>
			return FR_DENIED; /* Abort if too many collisions */
 8005628:	2307      	movs	r3, #7
 800562a:	9300      	str	r3, [sp, #0]
}
 800562c:	9800      	ldr	r0, [sp, #0]
 800562e:	b00b      	add	sp, #44	; 0x2c
 8005630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (seq > 5)
 8005634:	4633      	mov	r3, r6
 8005636:	e720      	b.n	800547a <dir_register+0x282>
	ns[i] = '~';
 8005638:	237e      	movs	r3, #126	; 0x7e
	for (j = 0; j < i && dst[j] != ' '; j++)
 800563a:	2820      	cmp	r0, #32
	ns[i] = '~';
 800563c:	f88d 3018 	strb.w	r3, [sp, #24]
		ns[i--] = c;
 8005640:	bf18      	it	ne
 8005642:	2004      	movne	r0, #4
	for (j = 0; j < i && dst[j] != ' '; j++)
 8005644:	d183      	bne.n	800554e <dir_register+0x356>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005646:	2005      	movs	r0, #5
 8005648:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 800564c:	f04f 0a01 	mov.w	sl, #1
 8005650:	2300      	movs	r3, #0
 8005652:	aa0a      	add	r2, sp, #40	; 0x28
 8005654:	4402      	add	r2, r0
 8005656:	f812 1c14 	ldrb.w	r1, [r2, #-20]
 800565a:	1c9a      	adds	r2, r3, #2
	} while (j < 8);
 800565c:	2a08      	cmp	r2, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800565e:	f80b 100a 	strb.w	r1, [fp, sl]
 8005662:	f100 0001 	add.w	r0, r0, #1
	} while (j < 8);
 8005666:	d0bc      	beq.n	80055e2 <dir_register+0x3ea>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005668:	2808      	cmp	r0, #8
 800566a:	d098      	beq.n	800559e <dir_register+0x3a6>
 800566c:	a90a      	add	r1, sp, #40	; 0x28
 800566e:	4401      	add	r1, r0
 8005670:	f811 cc14 	ldrb.w	ip, [r1, #-20]
 8005674:	1cd9      	adds	r1, r3, #3
	} while (j < 8);
 8005676:	2908      	cmp	r1, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005678:	f80b c002 	strb.w	ip, [fp, r2]
 800567c:	f100 0201 	add.w	r2, r0, #1
	} while (j < 8);
 8005680:	d0af      	beq.n	80055e2 <dir_register+0x3ea>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005682:	2a07      	cmp	r2, #7
 8005684:	d890      	bhi.n	80055a8 <dir_register+0x3b0>
 8005686:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 800568a:	4462      	add	r2, ip
 800568c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8005690:	f103 0c04 	add.w	ip, r3, #4
	} while (j < 8);
 8005694:	f1bc 0f08 	cmp.w	ip, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005698:	f80b 2001 	strb.w	r2, [fp, r1]
 800569c:	f100 0e02 	add.w	lr, r0, #2
	} while (j < 8);
 80056a0:	d09f      	beq.n	80055e2 <dir_register+0x3ea>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80056a2:	f1be 0f08 	cmp.w	lr, #8
 80056a6:	f103 0105 	add.w	r1, r3, #5
 80056aa:	eb0b 020c 	add.w	r2, fp, ip
 80056ae:	d082      	beq.n	80055b6 <dir_register+0x3be>
 80056b0:	aa0a      	add	r2, sp, #40	; 0x28
 80056b2:	4496      	add	lr, r2
 80056b4:	f81e ec14 	ldrb.w	lr, [lr, #-20]
	} while (j < 8);
 80056b8:	2908      	cmp	r1, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80056ba:	f100 0203 	add.w	r2, r0, #3
 80056be:	f80b e00c 	strb.w	lr, [fp, ip]
	} while (j < 8);
 80056c2:	d08e      	beq.n	80055e2 <dir_register+0x3ea>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80056c4:	2a08      	cmp	r2, #8
 80056c6:	f43f af7a 	beq.w	80055be <dir_register+0x3c6>
 80056ca:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 80056ce:	4462      	add	r2, ip
 80056d0:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80056d4:	f103 0c06 	add.w	ip, r3, #6
	} while (j < 8);
 80056d8:	f1bc 0f08 	cmp.w	ip, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80056dc:	f80b 2001 	strb.w	r2, [fp, r1]
 80056e0:	f100 0004 	add.w	r0, r0, #4
	} while (j < 8);
 80056e4:	f43f af7d 	beq.w	80055e2 <dir_register+0x3ea>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80056e8:	2808      	cmp	r0, #8
 80056ea:	f103 0107 	add.w	r1, r3, #7
 80056ee:	eb0b 020c 	add.w	r2, fp, ip
 80056f2:	f43f af6b 	beq.w	80055cc <dir_register+0x3d4>
 80056f6:	aa0a      	add	r2, sp, #40	; 0x28
 80056f8:	4402      	add	r2, r0
 80056fa:	f812 2c14 	ldrb.w	r2, [r2, #-20]
	} while (j < 8);
 80056fe:	2908      	cmp	r1, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005700:	f80b 200c 	strb.w	r2, [fp, ip]
	} while (j < 8);
 8005704:	f43f af6d 	beq.w	80055e2 <dir_register+0x3ea>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005708:	2806      	cmp	r0, #6
 800570a:	f47f af63 	bne.w	80055d4 <dir_register+0x3dc>
 800570e:	f89d 201b 	ldrb.w	r2, [sp, #27]
 8005712:	e760      	b.n	80055d6 <dir_register+0x3de>
				if (++n == nent)
 8005714:	f109 0901 	add.w	r9, r9, #1
 8005718:	45cb      	cmp	fp, r9
 800571a:	f47f af79 	bne.w	8005610 <dir_register+0x418>
	if (res == FR_OK && --nent)
 800571e:	e9dd 3b02 	ldrd	r3, fp, [sp, #8]
 8005722:	1e5d      	subs	r5, r3, #1
 8005724:	f040 80bd 	bne.w	80058a2 <dir_register+0x6aa>
	if (sector != fs->winsect)
 8005728:	9b01      	ldr	r3, [sp, #4]
		res = move_window(fs, dp->sect);
 800572a:	69e7      	ldr	r7, [r4, #28]
	if (sector != fs->winsect)
 800572c:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 800572e:	461a      	mov	r2, r3
 8005730:	42af      	cmp	r7, r5
 8005732:	f040 808a 	bne.w	800584a <dir_register+0x652>
 8005736:	2220      	movs	r2, #32
 8005738:	2100      	movs	r1, #0
 800573a:	6a20      	ldr	r0, [r4, #32]
 800573c:	f004 fd53 	bl	800a1e6 <memset>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11); /* Put SFN */
 8005740:	6a23      	ldr	r3, [r4, #32]
 8005742:	f104 0228 	add.w	r2, r4, #40	; 0x28
 8005746:	4293      	cmp	r3, r2
 8005748:	d203      	bcs.n	8005752 <dir_register+0x55a>
 800574a:	1d1a      	adds	r2, r3, #4
 800574c:	4593      	cmp	fp, r2
 800574e:	f0c0 8269 	bcc.w	8005c24 <dir_register+0xa2c>
			*d++ = *s++;
 8005752:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005754:	601a      	str	r2, [r3, #0]
 8005756:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005758:	605a      	str	r2, [r3, #4]
 800575a:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
}
 800575e:	9800      	ldr	r0, [sp, #0]
			*d++ = *s++;
 8005760:	721a      	strb	r2, [r3, #8]
 8005762:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8005766:	725a      	strb	r2, [r3, #9]
 8005768:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
 800576c:	729a      	strb	r2, [r3, #10]
			fs->wflag = 1;
 800576e:	2201      	movs	r2, #1
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT); /* Put NT flag */
 8005770:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8005774:	6a21      	ldr	r1, [r4, #32]
 8005776:	f003 0318 	and.w	r3, r3, #24
 800577a:	730b      	strb	r3, [r1, #12]
			fs->wflag = 1;
 800577c:	9b01      	ldr	r3, [sp, #4]
 800577e:	70da      	strb	r2, [r3, #3]
}
 8005780:	b00b      	add	sp, #44	; 0x2c
 8005782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ns[i] = '~';
 8005786:	237e      	movs	r3, #126	; 0x7e
	for (j = 0; j < i && dst[j] != ' '; j++)
 8005788:	2820      	cmp	r0, #32
	ns[i] = '~';
 800578a:	f88d 301a 	strb.w	r3, [sp, #26]
		ns[i--] = c;
 800578e:	bf18      	it	ne
 8005790:	2006      	movne	r0, #6
	for (j = 0; j < i && dst[j] != ' '; j++)
 8005792:	f47f aedc 	bne.w	800554e <dir_register+0x356>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005796:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 800579a:	2007      	movs	r0, #7
 800579c:	e756      	b.n	800564c <dir_register+0x454>
	ns[i] = '~';
 800579e:	237e      	movs	r3, #126	; 0x7e
	for (j = 0; j < i && dst[j] != ' '; j++)
 80057a0:	2820      	cmp	r0, #32
	ns[i] = '~';
 80057a2:	f88d 3019 	strb.w	r3, [sp, #25]
		ns[i--] = c;
 80057a6:	bf18      	it	ne
 80057a8:	2005      	movne	r0, #5
	for (j = 0; j < i && dst[j] != ' '; j++)
 80057aa:	f47f aed0 	bne.w	800554e <dir_register+0x356>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80057ae:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80057b2:	2006      	movs	r0, #6
 80057b4:	e74a      	b.n	800564c <dir_register+0x454>
	ns[i] = '~';
 80057b6:	237e      	movs	r3, #126	; 0x7e
	for (j = 0; j < i && dst[j] != ' '; j++)
 80057b8:	2820      	cmp	r0, #32
	ns[i] = '~';
 80057ba:	f88d 3017 	strb.w	r3, [sp, #23]
		ns[i--] = c;
 80057be:	bf18      	it	ne
 80057c0:	2003      	movne	r0, #3
	for (j = 0; j < i && dst[j] != ' '; j++)
 80057c2:	f47f aec4 	bne.w	800554e <dir_register+0x356>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80057c6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80057ca:	2004      	movs	r0, #4
 80057cc:	e73e      	b.n	800564c <dir_register+0x454>
		if (res != FR_NO_FILE)
 80057ce:	2804      	cmp	r0, #4
 80057d0:	9f00      	ldr	r7, [sp, #0]
 80057d2:	9000      	str	r0, [sp, #0]
 80057d4:	f47f ad8c 	bne.w	80052f0 <dir_register+0xf8>
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1; /* Number of entries to allocate */
 80057d8:	07bb      	lsls	r3, r7, #30
		dp->fn[NSFLAG] = sn[NSFLAG];
 80057da:	f884 702f 	strb.w	r7, [r4, #47]	; 0x2f
 80057de:	6826      	ldr	r6, [r4, #0]
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1; /* Number of entries to allocate */
 80057e0:	f53f ad35 	bmi.w	800524e <dir_register+0x56>
 80057e4:	2301      	movs	r3, #1
 80057e6:	9302      	str	r3, [sp, #8]
 80057e8:	e539      	b.n	800525e <dir_register+0x66>
		return FR_INVALID_NAME; /* Check name validity */
 80057ea:	2306      	movs	r3, #6
 80057ec:	9300      	str	r3, [sp, #0]
}
 80057ee:	9800      	ldr	r0, [sp, #0]
 80057f0:	b00b      	add	sp, #44	; 0x2c
 80057f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ns[i] = '~';
 80057f6:	237e      	movs	r3, #126	; 0x7e
	for (j = 0; j < i && dst[j] != ' '; j++)
 80057f8:	2820      	cmp	r0, #32
	ns[i] = '~';
 80057fa:	f88d 3016 	strb.w	r3, [sp, #22]
		ns[i--] = c;
 80057fe:	bf18      	it	ne
 8005800:	2002      	movne	r0, #2
	for (j = 0; j < i && dst[j] != ' '; j++)
 8005802:	f47f aea4 	bne.w	800554e <dir_register+0x356>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005806:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 800580a:	2003      	movs	r0, #3
 800580c:	e71e      	b.n	800564c <dir_register+0x454>
		return FR_INVALID_NAME; /* Check name validity */
 800580e:	2301      	movs	r3, #1
 8005810:	9300      	str	r3, [sp, #0]
}
 8005812:	9800      	ldr	r0, [sp, #0]
 8005814:	b00b      	add	sp, #44	; 0x2c
 8005816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ns[i] = '~';
 800581a:	237e      	movs	r3, #126	; 0x7e
	for (j = 0; j < i && dst[j] != ' '; j++)
 800581c:	2820      	cmp	r0, #32
	ns[i] = '~';
 800581e:	f88d 3015 	strb.w	r3, [sp, #21]
		ns[i--] = c;
 8005822:	bf18      	it	ne
 8005824:	2001      	movne	r0, #1
	for (j = 0; j < i && dst[j] != ' '; j++)
 8005826:	f47f ae92 	bne.w	800554e <dir_register+0x356>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800582a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 800582e:	2002      	movs	r0, #2
 8005830:	e70c      	b.n	800564c <dir_register+0x454>
	ns[i] = '~';
 8005832:	217e      	movs	r1, #126	; 0x7e
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005834:	2202      	movs	r2, #2
 8005836:	f89d c015 	ldrb.w	ip, [sp, #21]
	ns[i] = '~';
 800583a:	f88d 1014 	strb.w	r1, [sp, #20]
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800583e:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
 8005842:	4610      	mov	r0, r2
 8005844:	f884 c025 	strb.w	ip, [r4, #37]	; 0x25
 8005848:	e710      	b.n	800566c <dir_register+0x474>
	if (fs->wflag)
 800584a:	461e      	mov	r6, r3
 800584c:	78db      	ldrb	r3, [r3, #3]
 800584e:	f102 083c 	add.w	r8, r2, #60	; 0x3c
 8005852:	7850      	ldrb	r0, [r2, #1]
 8005854:	2b00      	cmp	r3, #0
 8005856:	f000 8110 	beq.w	8005a7a <dir_register+0x882>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 800585a:	2301      	movs	r3, #1
 800585c:	462a      	mov	r2, r5
 800585e:	4641      	mov	r1, r8
 8005860:	f7fd fefc 	bl	800365c <disk_write>
 8005864:	2800      	cmp	r0, #0
 8005866:	d1d2      	bne.n	800580e <dir_register+0x616>
			if (wsect - fs->fatbase < fs->fsize)
 8005868:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 800586a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800586c:	1aaa      	subs	r2, r5, r2
 800586e:	429a      	cmp	r2, r3
			fs->wflag = 0;
 8005870:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize)
 8005872:	4631      	mov	r1, r6
 8005874:	7870      	ldrb	r0, [r6, #1]
 8005876:	f080 8100 	bcs.w	8005a7a <dir_register+0x882>
				for (nf = fs->n_fats; nf >= 2; nf--)
 800587a:	78b6      	ldrb	r6, [r6, #2]
 800587c:	2e01      	cmp	r6, #1
 800587e:	f240 80fc 	bls.w	8005a7a <dir_register+0x882>
 8005882:	4689      	mov	r9, r1
					wsect += fs->fsize;
 8005884:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--)
 8005886:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8005888:	462a      	mov	r2, r5
 800588a:	2301      	movs	r3, #1
 800588c:	4641      	mov	r1, r8
 800588e:	f7fd fee5 	bl	800365c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--)
 8005892:	2e01      	cmp	r6, #1
 8005894:	f000 80ef 	beq.w	8005a76 <dir_register+0x87e>
 8005898:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 800589c:	f899 0001 	ldrb.w	r0, [r9, #1]
 80058a0:	e7f0      	b.n	8005884 <dir_register+0x68c>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80058a2:	6961      	ldr	r1, [r4, #20]
 80058a4:	4620      	mov	r0, r4
 80058a6:	eba1 1145 	sub.w	r1, r1, r5, lsl #5
 80058aa:	f7fd ffa7 	bl	80037fc <dir_sdi>
		if (res == FR_OK)
 80058ae:	2800      	cmp	r0, #0
 80058b0:	f040 81b5 	bne.w	8005c1e <dir_register+0xa26>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80058b4:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 80058b8:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
 80058bc:	01d3      	lsls	r3, r2, #7
 80058be:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
 80058c2:	185a      	adds	r2, r3, r1
 80058c4:	f3c2 0346 	ubfx	r3, r2, #1, #7
 80058c8:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80058cc:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	441a      	add	r2, r3
 80058d4:	f3c2 0346 	ubfx	r3, r2, #1, #7
 80058d8:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80058dc:	f8cd b00c 	str.w	fp, [sp, #12]
 80058e0:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
 80058e4:	f04f 0a01 	mov.w	sl, #1
 80058e8:	46a3      	mov	fp, r4
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	441a      	add	r2, r3
 80058ee:	f3c2 0346 	ubfx	r3, r2, #1, #7
 80058f2:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80058f6:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 80058fa:	b2db      	uxtb	r3, r3
 80058fc:	441a      	add	r2, r3
 80058fe:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8005902:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8005906:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
 800590a:	b2db      	uxtb	r3, r3
 800590c:	441a      	add	r2, r3
 800590e:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8005912:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8005916:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 800591a:	b2db      	uxtb	r3, r3
 800591c:	441a      	add	r2, r3
 800591e:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8005922:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8005926:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
 800592a:	b2db      	uxtb	r3, r3
 800592c:	441a      	add	r2, r3
 800592e:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8005932:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8005936:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 800593a:	b2db      	uxtb	r3, r3
 800593c:	441a      	add	r2, r3
 800593e:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8005942:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8005946:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 800594a:	b2db      	uxtb	r3, r3
 800594c:	4413      	add	r3, r2
 800594e:	f3c3 0246 	ubfx	r2, r3, #1, #7
 8005952:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e
 8005956:	ea42 13c3 	orr.w	r3, r2, r3, lsl #7
 800595a:	440b      	add	r3, r1
 800595c:	9e01      	ldr	r6, [sp, #4]
 800595e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8005962:	9302      	str	r3, [sp, #8]
 8005964:	f106 093c 	add.w	r9, r6, #60	; 0x3c
				res = move_window(fs, dp->sect);
 8005968:	f8db 401c 	ldr.w	r4, [fp, #28]
	if (sector != fs->winsect)
 800596c:	6bb7      	ldr	r7, [r6, #56]	; 0x38
 800596e:	42bc      	cmp	r4, r7
 8005970:	d01f      	beq.n	80059b2 <dir_register+0x7ba>
	if (fs->wflag)
 8005972:	78f3      	ldrb	r3, [r6, #3]
 8005974:	7870      	ldrb	r0, [r6, #1]
 8005976:	b19b      	cbz	r3, 80059a0 <dir_register+0x7a8>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 8005978:	2301      	movs	r3, #1
 800597a:	463a      	mov	r2, r7
 800597c:	4649      	mov	r1, r9
 800597e:	f7fd fe6d 	bl	800365c <disk_write>
 8005982:	2800      	cmp	r0, #0
 8005984:	f47f af43 	bne.w	800580e <dir_register+0x616>
			if (wsect - fs->fatbase < fs->fsize)
 8005988:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 800598a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800598c:	1aba      	subs	r2, r7, r2
 800598e:	429a      	cmp	r2, r3
			fs->wflag = 0;
 8005990:	70f0      	strb	r0, [r6, #3]
 8005992:	7870      	ldrb	r0, [r6, #1]
			if (wsect - fs->fatbase < fs->fsize)
 8005994:	d204      	bcs.n	80059a0 <dir_register+0x7a8>
				for (nf = fs->n_fats; nf >= 2; nf--)
 8005996:	f896 8002 	ldrb.w	r8, [r6, #2]
 800599a:	f1b8 0f01 	cmp.w	r8, #1
 800599e:	d85d      	bhi.n	8005a5c <dir_register+0x864>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
 80059a0:	2301      	movs	r3, #1
 80059a2:	4622      	mov	r2, r4
 80059a4:	4649      	mov	r1, r9
 80059a6:	f7fd fe4b 	bl	8003640 <disk_read>
 80059aa:	2800      	cmp	r0, #0
 80059ac:	f040 8126 	bne.w	8005bfc <dir_register+0xa04>
			fs->winsect = sector;
 80059b0:	63b4      	str	r4, [r6, #56]	; 0x38
				put_lfn(fs->lfnbuf, dp->dir, (BYTE) nent, sum);
 80059b2:	b2ec      	uxtb	r4, r5
	i = (ord - 1) * 13; /* Get offset in the LFN working buffer */
 80059b4:	1e62      	subs	r2, r4, #1
 80059b6:	eb02 0742 	add.w	r7, r2, r2, lsl #1
				put_lfn(fs->lfnbuf, dp->dir, (BYTE) nent, sum);
 80059ba:	f8db 3020 	ldr.w	r3, [fp, #32]
	i = (ord - 1) * 13; /* Get offset in the LFN working buffer */
 80059be:	eb02 0287 	add.w	r2, r2, r7, lsl #2
	dir[LDIR_Chksum] = sum; /* Set checksum */
 80059c2:	9f02      	ldr	r7, [sp, #8]
				put_lfn(fs->lfnbuf, dp->dir, (BYTE) nent, sum);
 80059c4:	6931      	ldr	r1, [r6, #16]
	dir[LDIR_Type] = 0;
 80059c6:	2000      	movs	r0, #0
	dir[LDIR_Chksum] = sum; /* Set checksum */
 80059c8:	735f      	strb	r7, [r3, #13]
	dir[LDIR_Attr] = AM_LFN; /* Set attribute. LFN entry */
 80059ca:	f04f 070f 	mov.w	r7, #15
	dir[LDIR_Type] = 0;
 80059ce:	7318      	strb	r0, [r3, #12]
	dir[LDIR_Attr] = AM_LFN; /* Set attribute. LFN entry */
 80059d0:	72df      	strb	r7, [r3, #11]
	*ptr++ = (BYTE) val;
 80059d2:	7698      	strb	r0, [r3, #26]
	*ptr++ = (BYTE) val;
 80059d4:	76d8      	strb	r0, [r3, #27]
			wc = lfn[i++]; /* Get an effective character */
 80059d6:	f831 c012 	ldrh.w	ip, [r1, r2, lsl #1]
 80059da:	0057      	lsls	r7, r2, #1
	val >>= 8;
 80059dc:	ea4f 201c 	mov.w	r0, ip, lsr #8
	*ptr++ = (BYTE) val;
 80059e0:	f883 c001 	strb.w	ip, [r3, #1]
	*ptr++ = (BYTE) val;
 80059e4:	7098      	strb	r0, [r3, #2]
		if (wc == 0)
 80059e6:	f1bc 0f00 	cmp.w	ip, #0
 80059ea:	d151      	bne.n	8005a90 <dir_register+0x898>
	*ptr++ = (BYTE) val;
 80059ec:	22ff      	movs	r2, #255	; 0xff
 80059ee:	70da      	strb	r2, [r3, #3]
	*ptr++ = (BYTE) val;
 80059f0:	711a      	strb	r2, [r3, #4]
	*ptr++ = (BYTE) val;
 80059f2:	22ff      	movs	r2, #255	; 0xff
 80059f4:	715a      	strb	r2, [r3, #5]
	*ptr++ = (BYTE) val;
 80059f6:	719a      	strb	r2, [r3, #6]
	*ptr++ = (BYTE) val;
 80059f8:	22ff      	movs	r2, #255	; 0xff
 80059fa:	71da      	strb	r2, [r3, #7]
	*ptr++ = (BYTE) val;
 80059fc:	721a      	strb	r2, [r3, #8]
	*ptr++ = (BYTE) val;
 80059fe:	22ff      	movs	r2, #255	; 0xff
 8005a00:	725a      	strb	r2, [r3, #9]
	*ptr++ = (BYTE) val;
 8005a02:	729a      	strb	r2, [r3, #10]
	*ptr++ = (BYTE) val;
 8005a04:	22ff      	movs	r2, #255	; 0xff
 8005a06:	739a      	strb	r2, [r3, #14]
	*ptr++ = (BYTE) val;
 8005a08:	73da      	strb	r2, [r3, #15]
	*ptr++ = (BYTE) val;
 8005a0a:	22ff      	movs	r2, #255	; 0xff
 8005a0c:	741a      	strb	r2, [r3, #16]
	*ptr++ = (BYTE) val;
 8005a0e:	745a      	strb	r2, [r3, #17]
	*ptr++ = (BYTE) val;
 8005a10:	22ff      	movs	r2, #255	; 0xff
 8005a12:	749a      	strb	r2, [r3, #18]
	*ptr++ = (BYTE) val;
 8005a14:	74da      	strb	r2, [r3, #19]
	*ptr++ = (BYTE) val;
 8005a16:	22ff      	movs	r2, #255	; 0xff
 8005a18:	751a      	strb	r2, [r3, #20]
	*ptr++ = (BYTE) val;
 8005a1a:	755a      	strb	r2, [r3, #21]
	*ptr++ = (BYTE) val;
 8005a1c:	22ff      	movs	r2, #255	; 0xff
 8005a1e:	759a      	strb	r2, [r3, #22]
	*ptr++ = (BYTE) val;
 8005a20:	75da      	strb	r2, [r3, #23]
	*ptr++ = (BYTE) val;
 8005a22:	22ff      	movs	r2, #255	; 0xff
 8005a24:	761a      	strb	r2, [r3, #24]
	*ptr++ = (BYTE) val;
 8005a26:	765a      	strb	r2, [r3, #25]
	*ptr++ = (BYTE) val;
 8005a28:	22ff      	movs	r2, #255	; 0xff
 8005a2a:	771a      	strb	r2, [r3, #28]
	*ptr++ = (BYTE) val;
 8005a2c:	775a      	strb	r2, [r3, #29]
	*ptr++ = (BYTE) val;
 8005a2e:	22ff      	movs	r2, #255	; 0xff
 8005a30:	779a      	strb	r2, [r3, #30]
	*ptr++ = (BYTE) val;
 8005a32:	77da      	strb	r2, [r3, #31]
		ord |= LLEF; /* Last LFN part is the start of LFN sequence */
 8005a34:	f044 0440 	orr.w	r4, r4, #64	; 0x40
	dir[LDIR_Ord] = ord; /* Set the LFN order */
 8005a38:	701c      	strb	r4, [r3, #0]
				res = dir_next(dp, 0); /* Next entry */
 8005a3a:	2100      	movs	r1, #0
				fs->wflag = 1;
 8005a3c:	f886 a003 	strb.w	sl, [r6, #3]
				res = dir_next(dp, 0); /* Next entry */
 8005a40:	4658      	mov	r0, fp
 8005a42:	f7fe ffc9 	bl	80049d8 <dir_next>
			} while (res == FR_OK && --nent);
 8005a46:	2800      	cmp	r0, #0
 8005a48:	f040 80e9 	bne.w	8005c1e <dir_register+0xa26>
 8005a4c:	3d01      	subs	r5, #1
 8005a4e:	d18b      	bne.n	8005968 <dir_register+0x770>
 8005a50:	465c      	mov	r4, fp
 8005a52:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8005a56:	e667      	b.n	8005728 <dir_register+0x530>
 8005a58:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005a5a:	7870      	ldrb	r0, [r6, #1]
					wsect += fs->fsize;
 8005a5c:	441f      	add	r7, r3
				for (nf = fs->n_fats; nf >= 2; nf--)
 8005a5e:	f108 38ff 	add.w	r8, r8, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 8005a62:	463a      	mov	r2, r7
 8005a64:	2301      	movs	r3, #1
 8005a66:	4649      	mov	r1, r9
 8005a68:	f7fd fdf8 	bl	800365c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--)
 8005a6c:	f1b8 0f01 	cmp.w	r8, #1
 8005a70:	d1f2      	bne.n	8005a58 <dir_register+0x860>
 8005a72:	7870      	ldrb	r0, [r6, #1]
 8005a74:	e794      	b.n	80059a0 <dir_register+0x7a8>
 8005a76:	9b01      	ldr	r3, [sp, #4]
 8005a78:	7858      	ldrb	r0, [r3, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
 8005a7a:	4641      	mov	r1, r8
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	463a      	mov	r2, r7
 8005a80:	f7fd fdde 	bl	8003640 <disk_read>
 8005a84:	2800      	cmp	r0, #0
 8005a86:	f040 80b9 	bne.w	8005bfc <dir_register+0xa04>
			fs->winsect = sector;
 8005a8a:	9b01      	ldr	r3, [sp, #4]
 8005a8c:	639f      	str	r7, [r3, #56]	; 0x38
 8005a8e:	e652      	b.n	8005736 <dir_register+0x53e>
		if (wc != 0xFFFF)
 8005a90:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005a94:	4584      	cmp	ip, r0
 8005a96:	d0a9      	beq.n	80059ec <dir_register+0x7f4>
			wc = lfn[i++]; /* Get an effective character */
 8005a98:	3201      	adds	r2, #1
 8005a9a:	f831 c012 	ldrh.w	ip, [r1, r2, lsl #1]
 8005a9e:	0052      	lsls	r2, r2, #1
	val >>= 8;
 8005aa0:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
	*ptr++ = (BYTE) val;
 8005aa4:	f883 c003 	strb.w	ip, [r3, #3]
	*ptr++ = (BYTE) val;
 8005aa8:	f883 e004 	strb.w	lr, [r3, #4]
		if (wc == 0)
 8005aac:	f1bc 0f00 	cmp.w	ip, #0
 8005ab0:	d09f      	beq.n	80059f2 <dir_register+0x7fa>
		if (wc != 0xFFFF)
 8005ab2:	4584      	cmp	ip, r0
 8005ab4:	d09d      	beq.n	80059f2 <dir_register+0x7fa>
			wc = lfn[i++]; /* Get an effective character */
 8005ab6:	440a      	add	r2, r1
 8005ab8:	f8b2 c002 	ldrh.w	ip, [r2, #2]
	val >>= 8;
 8005abc:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
	*ptr++ = (BYTE) val;
 8005ac0:	f883 c005 	strb.w	ip, [r3, #5]
	*ptr++ = (BYTE) val;
 8005ac4:	f883 e006 	strb.w	lr, [r3, #6]
		if (wc == 0)
 8005ac8:	f1bc 0f00 	cmp.w	ip, #0
 8005acc:	d094      	beq.n	80059f8 <dir_register+0x800>
		if (wc != 0xFFFF)
 8005ace:	4584      	cmp	ip, r0
 8005ad0:	d092      	beq.n	80059f8 <dir_register+0x800>
			wc = lfn[i++]; /* Get an effective character */
 8005ad2:	f8b2 c004 	ldrh.w	ip, [r2, #4]
	val >>= 8;
 8005ad6:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
	*ptr++ = (BYTE) val;
 8005ada:	f883 c007 	strb.w	ip, [r3, #7]
	*ptr++ = (BYTE) val;
 8005ade:	f883 e008 	strb.w	lr, [r3, #8]
		if (wc == 0)
 8005ae2:	f1bc 0f00 	cmp.w	ip, #0
 8005ae6:	d08a      	beq.n	80059fe <dir_register+0x806>
		if (wc != 0xFFFF)
 8005ae8:	4584      	cmp	ip, r0
 8005aea:	d088      	beq.n	80059fe <dir_register+0x806>
			wc = lfn[i++]; /* Get an effective character */
 8005aec:	f8b2 c006 	ldrh.w	ip, [r2, #6]
	val >>= 8;
 8005af0:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
	*ptr++ = (BYTE) val;
 8005af4:	f883 c009 	strb.w	ip, [r3, #9]
	*ptr++ = (BYTE) val;
 8005af8:	f883 e00a 	strb.w	lr, [r3, #10]
		if (wc == 0)
 8005afc:	f1bc 0f00 	cmp.w	ip, #0
 8005b00:	d080      	beq.n	8005a04 <dir_register+0x80c>
		if (wc != 0xFFFF)
 8005b02:	4584      	cmp	ip, r0
 8005b04:	f43f af7e 	beq.w	8005a04 <dir_register+0x80c>
			wc = lfn[i++]; /* Get an effective character */
 8005b08:	f8b2 c008 	ldrh.w	ip, [r2, #8]
	val >>= 8;
 8005b0c:	ea4f 201c 	mov.w	r0, ip, lsr #8
	*ptr++ = (BYTE) val;
 8005b10:	f883 c00e 	strb.w	ip, [r3, #14]
	*ptr++ = (BYTE) val;
 8005b14:	73d8      	strb	r0, [r3, #15]
		if (wc == 0)
 8005b16:	f1bc 0f00 	cmp.w	ip, #0
 8005b1a:	f43f af76 	beq.w	8005a0a <dir_register+0x812>
		if (wc != 0xFFFF)
 8005b1e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005b22:	4584      	cmp	ip, r0
 8005b24:	f43f af71 	beq.w	8005a0a <dir_register+0x812>
			wc = lfn[i++]; /* Get an effective character */
 8005b28:	f8b2 c00a 	ldrh.w	ip, [r2, #10]
	val >>= 8;
 8005b2c:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
	*ptr++ = (BYTE) val;
 8005b30:	f883 c010 	strb.w	ip, [r3, #16]
	*ptr++ = (BYTE) val;
 8005b34:	f883 e011 	strb.w	lr, [r3, #17]
		if (wc == 0)
 8005b38:	f1bc 0f00 	cmp.w	ip, #0
 8005b3c:	f43f af68 	beq.w	8005a10 <dir_register+0x818>
		if (wc != 0xFFFF)
 8005b40:	4584      	cmp	ip, r0
 8005b42:	f43f af65 	beq.w	8005a10 <dir_register+0x818>
			wc = lfn[i++]; /* Get an effective character */
 8005b46:	f8b2 c00c 	ldrh.w	ip, [r2, #12]
	val >>= 8;
 8005b4a:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
	*ptr++ = (BYTE) val;
 8005b4e:	f883 c012 	strb.w	ip, [r3, #18]
	*ptr++ = (BYTE) val;
 8005b52:	f883 e013 	strb.w	lr, [r3, #19]
		if (wc == 0)
 8005b56:	f1bc 0f00 	cmp.w	ip, #0
 8005b5a:	f43f af5c 	beq.w	8005a16 <dir_register+0x81e>
		if (wc != 0xFFFF)
 8005b5e:	4584      	cmp	ip, r0
 8005b60:	f43f af59 	beq.w	8005a16 <dir_register+0x81e>
			wc = lfn[i++]; /* Get an effective character */
 8005b64:	f8b2 c00e 	ldrh.w	ip, [r2, #14]
	val >>= 8;
 8005b68:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
	*ptr++ = (BYTE) val;
 8005b6c:	f883 c014 	strb.w	ip, [r3, #20]
	*ptr++ = (BYTE) val;
 8005b70:	f883 e015 	strb.w	lr, [r3, #21]
		if (wc == 0)
 8005b74:	f1bc 0f00 	cmp.w	ip, #0
 8005b78:	f43f af50 	beq.w	8005a1c <dir_register+0x824>
		if (wc != 0xFFFF)
 8005b7c:	4584      	cmp	ip, r0
 8005b7e:	f43f af4d 	beq.w	8005a1c <dir_register+0x824>
			wc = lfn[i++]; /* Get an effective character */
 8005b82:	f8b2 c010 	ldrh.w	ip, [r2, #16]
	val >>= 8;
 8005b86:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
	*ptr++ = (BYTE) val;
 8005b8a:	f883 c016 	strb.w	ip, [r3, #22]
	*ptr++ = (BYTE) val;
 8005b8e:	f883 e017 	strb.w	lr, [r3, #23]
		if (wc == 0)
 8005b92:	f1bc 0f00 	cmp.w	ip, #0
 8005b96:	f43f af44 	beq.w	8005a22 <dir_register+0x82a>
		if (wc != 0xFFFF)
 8005b9a:	4584      	cmp	ip, r0
 8005b9c:	f43f af41 	beq.w	8005a22 <dir_register+0x82a>
			wc = lfn[i++]; /* Get an effective character */
 8005ba0:	8a50      	ldrh	r0, [r2, #18]
	val >>= 8;
 8005ba2:	ea4f 2c10 	mov.w	ip, r0, lsr #8
	*ptr++ = (BYTE) val;
 8005ba6:	7618      	strb	r0, [r3, #24]
	*ptr++ = (BYTE) val;
 8005ba8:	f883 c019 	strb.w	ip, [r3, #25]
		if (wc == 0)
 8005bac:	2800      	cmp	r0, #0
 8005bae:	f43f af3b 	beq.w	8005a28 <dir_register+0x830>
		if (wc != 0xFFFF)
 8005bb2:	f64f 7cff 	movw	ip, #65535	; 0xffff
 8005bb6:	4560      	cmp	r0, ip
 8005bb8:	f43f af36 	beq.w	8005a28 <dir_register+0x830>
			wc = lfn[i++]; /* Get an effective character */
 8005bbc:	8a90      	ldrh	r0, [r2, #20]
	val >>= 8;
 8005bbe:	ea4f 2e10 	mov.w	lr, r0, lsr #8
	*ptr++ = (BYTE) val;
 8005bc2:	7718      	strb	r0, [r3, #28]
	*ptr++ = (BYTE) val;
 8005bc4:	f883 e01d 	strb.w	lr, [r3, #29]
		if (wc == 0)
 8005bc8:	2800      	cmp	r0, #0
 8005bca:	f43f af30 	beq.w	8005a2e <dir_register+0x836>
		if (wc != 0xFFFF)
 8005bce:	4560      	cmp	r0, ip
 8005bd0:	f43f af2d 	beq.w	8005a2e <dir_register+0x836>
		if (wc == 0)
 8005bd4:	f64f 70fd 	movw	r0, #65533	; 0xfffd
			wc = lfn[i++]; /* Get an effective character */
 8005bd8:	8ad2      	ldrh	r2, [r2, #22]
		if (wc == 0)
 8005bda:	f102 3cff 	add.w	ip, r2, #4294967295
 8005bde:	fa1f fc8c 	uxth.w	ip, ip
	*ptr++ = (BYTE) val;
 8005be2:	779a      	strb	r2, [r3, #30]
		if (wc == 0)
 8005be4:	4584      	cmp	ip, r0
	val >>= 8;
 8005be6:	ea4f 2212 	mov.w	r2, r2, lsr #8
	*ptr++ = (BYTE) val;
 8005bea:	77da      	strb	r2, [r3, #31]
		if (wc == 0)
 8005bec:	f63f af22 	bhi.w	8005a34 <dir_register+0x83c>
	if (wc == 0xFFFF || !lfn[i])
 8005bf0:	4439      	add	r1, r7
 8005bf2:	8b4a      	ldrh	r2, [r1, #26]
 8005bf4:	2a00      	cmp	r2, #0
 8005bf6:	f43f af1d 	beq.w	8005a34 <dir_register+0x83c>
 8005bfa:	e71d      	b.n	8005a38 <dir_register+0x840>
				res = FR_DISK_ERR;
 8005bfc:	2201      	movs	r2, #1
			fs->winsect = sector;
 8005bfe:	f04f 33ff 	mov.w	r3, #4294967295
				res = FR_DISK_ERR;
 8005c02:	9200      	str	r2, [sp, #0]
			fs->winsect = sector;
 8005c04:	9a01      	ldr	r2, [sp, #4]
 8005c06:	6393      	str	r3, [r2, #56]	; 0x38
 8005c08:	f7ff bb72 	b.w	80052f0 <dir_register+0xf8>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++)
 8005c0c:	4698      	mov	r8, r3
 8005c0e:	f7ff bb0c 	b.w	800522a <dir_register+0x32>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005c12:	f242 0320 	movw	r3, #8224	; 0x2020
 8005c16:	2202      	movs	r2, #2
 8005c18:	84a3      	strh	r3, [r4, #36]	; 0x24
	for (j = 0; j < i && dst[j] != ' '; j++)
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	e4bf      	b.n	800559e <dir_register+0x3a6>
 8005c1e:	9000      	str	r0, [sp, #0]
 8005c20:	f7ff bb66 	b.w	80052f0 <dir_register+0xf8>
			*d++ = *s++;
 8005c24:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8005c28:	701a      	strb	r2, [r3, #0]
 8005c2a:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 8005c2e:	705a      	strb	r2, [r3, #1]
 8005c30:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 8005c34:	709a      	strb	r2, [r3, #2]
 8005c36:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
 8005c3a:	70da      	strb	r2, [r3, #3]
 8005c3c:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8005c40:	711a      	strb	r2, [r3, #4]
 8005c42:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
 8005c46:	715a      	strb	r2, [r3, #5]
 8005c48:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 8005c4c:	719a      	strb	r2, [r3, #6]
 8005c4e:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
 8005c52:	71da      	strb	r2, [r3, #7]
 8005c54:	e581      	b.n	800575a <dir_register+0x562>
 8005c56:	bf00      	nop

08005c58 <f_mount>:

FRESULT f_mount(FATFS *fs, /* Pointer to the file system object (NULL:unmount)*/
const TCHAR *path, /* Logical drive number to be mounted/unmounted */
BYTE opt /* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c5c:	b089      	sub	sp, #36	; 0x24
	if (*path)
 8005c5e:	2900      	cmp	r1, #0
 8005c60:	d04c      	beq.n	8005cfc <f_mount+0xa4>
 8005c62:	460f      	mov	r7, r1
		for (tt = *path; (UINT) *tt >= (_USE_LFN ? ' ' : '!') && *tt != ':';
 8005c64:	7809      	ldrb	r1, [r1, #0]
 8005c66:	4604      	mov	r4, r0
 8005c68:	291f      	cmp	r1, #31
 8005c6a:	4616      	mov	r6, r2
 8005c6c:	d909      	bls.n	8005c82 <f_mount+0x2a>
 8005c6e:	293a      	cmp	r1, #58	; 0x3a
 8005c70:	d044      	beq.n	8005cfc <f_mount+0xa4>
 8005c72:	463a      	mov	r2, r7
 8005c74:	e001      	b.n	8005c7a <f_mount+0x22>
 8005c76:	2b3a      	cmp	r3, #58	; 0x3a
 8005c78:	d039      	beq.n	8005cee <f_mount+0x96>
 8005c7a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8005c7e:	2b1f      	cmp	r3, #31
 8005c80:	d8f9      	bhi.n	8005c76 <f_mount+0x1e>
		vol = 0; /* Drive 0 */
 8005c82:	f04f 0800 	mov.w	r8, #0

	/* Get logical drive number */
	vol = get_ldnumber(&rp);
	if (vol < 0)
		return FR_INVALID_DRIVE;
	cfs = FatFs[vol]; /* Pointer to fs object */
 8005c86:	f8df 930c 	ldr.w	r9, [pc, #780]	; 8005f94 <f_mount+0x33c>
 8005c8a:	f859 5028 	ldr.w	r5, [r9, r8, lsl #2]

	if (cfs)
 8005c8e:	b185      	cbz	r5, 8005cb2 <f_mount+0x5a>
		if (Files[i].fs == fs)
 8005c90:	4bbb      	ldr	r3, [pc, #748]	; (8005f80 <f_mount+0x328>)
	{
#if _FS_LOCK != 0
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj))
 8005c92:	6968      	ldr	r0, [r5, #20]
		if (Files[i].fs == fs)
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	4295      	cmp	r5, r2
			Files[i].fs = 0;
 8005c98:	bf04      	itt	eq
 8005c9a:	2200      	moveq	r2, #0
 8005c9c:	601a      	streq	r2, [r3, #0]
		if (Files[i].fs == fs)
 8005c9e:	691a      	ldr	r2, [r3, #16]
 8005ca0:	4295      	cmp	r5, r2
			Files[i].fs = 0;
 8005ca2:	bf04      	itt	eq
 8005ca4:	2200      	moveq	r2, #0
 8005ca6:	611a      	streq	r2, [r3, #16]
		if (!ff_del_syncobj(cfs->sobj))
 8005ca8:	f002 fb0c 	bl	80082c4 <ff_del_syncobj>
 8005cac:	b1d0      	cbz	r0, 8005ce4 <f_mount+0x8c>
			return FR_INT_ERR;
#endif
		cfs->fs_type = 0; /* Clear old fs object */
 8005cae:	2300      	movs	r3, #0
 8005cb0:	702b      	strb	r3, [r5, #0]
	}

	if (fs)
 8005cb2:	b184      	cbz	r4, 8005cd6 <f_mount+0x7e>
	{
		fs->fs_type = 0; /* Clear new fs object */
 8005cb4:	2500      	movs	r5, #0
 8005cb6:	4621      	mov	r1, r4
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE) vol, &fs->sobj))
 8005cb8:	fa5f f088 	uxtb.w	r0, r8
		fs->fs_type = 0; /* Clear new fs object */
 8005cbc:	f801 5b14 	strb.w	r5, [r1], #20
		if (!ff_cre_syncobj((BYTE) vol, &fs->sobj))
 8005cc0:	f002 faf0 	bl	80082a4 <ff_cre_syncobj>
 8005cc4:	b170      	cbz	r0, 8005ce4 <f_mount+0x8c>
			return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs; /* Register new fs object */

	if (!fs || opt != 1)
 8005cc6:	2e01      	cmp	r6, #1
	FatFs[vol] = fs; /* Register new fs object */
 8005cc8:	f849 4028 	str.w	r4, [r9, r8, lsl #2]
	if (!fs || opt != 1)
 8005ccc:	d01b      	beq.n	8005d06 <f_mount+0xae>
		return FR_OK; /* Do not mount now, it will be mounted later */

	res = find_volume(&path, &fs, 0); /* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 8005cce:	4628      	mov	r0, r5
 8005cd0:	b009      	add	sp, #36	; 0x24
 8005cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return FR_OK; /* Do not mount now, it will be mounted later */
 8005cd6:	4625      	mov	r5, r4
}
 8005cd8:	4628      	mov	r0, r5
	FatFs[vol] = fs; /* Register new fs object */
 8005cda:	f849 4028 	str.w	r4, [r9, r8, lsl #2]
}
 8005cde:	b009      	add	sp, #36	; 0x24
 8005ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return FR_INT_ERR;
 8005ce4:	2502      	movs	r5, #2
}
 8005ce6:	4628      	mov	r0, r5
 8005ce8:	b009      	add	sp, #36	; 0x24
 8005cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			i = *tp++ - '0';
 8005cee:	1c7b      	adds	r3, r7, #1
			if (i < 10 && tp == tt)
 8005cf0:	429a      	cmp	r2, r3
			i = *tp++ - '0';
 8005cf2:	f1a1 0830 	sub.w	r8, r1, #48	; 0x30
			if (i < 10 && tp == tt)
 8005cf6:	d101      	bne.n	8005cfc <f_mount+0xa4>
				if (i < _VOLUMES)
 8005cf8:	2930      	cmp	r1, #48	; 0x30
 8005cfa:	d0c4      	beq.n	8005c86 <f_mount+0x2e>
 8005cfc:	250b      	movs	r5, #11
}
 8005cfe:	4628      	mov	r0, r5
 8005d00:	b009      	add	sp, #36	; 0x24
 8005d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (tt = *path; (UINT) *tt >= (_USE_LFN ? ' ' : '!') && *tt != ':';
 8005d06:	7839      	ldrb	r1, [r7, #0]
 8005d08:	291f      	cmp	r1, #31
 8005d0a:	d90b      	bls.n	8005d24 <f_mount+0xcc>
 8005d0c:	293a      	cmp	r1, #58	; 0x3a
 8005d0e:	bf18      	it	ne
 8005d10:	463a      	movne	r2, r7
 8005d12:	d102      	bne.n	8005d1a <f_mount+0xc2>
 8005d14:	e7f2      	b.n	8005cfc <f_mount+0xa4>
 8005d16:	2b3a      	cmp	r3, #58	; 0x3a
 8005d18:	d018      	beq.n	8005d4c <f_mount+0xf4>
 8005d1a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8005d1e:	2b1f      	cmp	r3, #31
 8005d20:	d8f9      	bhi.n	8005d16 <f_mount+0xbe>
		vol = 0; /* Drive 0 */
 8005d22:	2500      	movs	r5, #0
	if (!fs)
 8005d24:	b3b4      	cbz	r4, 8005d94 <f_mount+0x13c>
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8005d26:	6960      	ldr	r0, [r4, #20]
 8005d28:	f002 fad2 	bl	80082d0 <ff_req_grant>
 8005d2c:	b908      	cbnz	r0, 8005d32 <f_mount+0xda>
	ENTER_FF(fs); /* Lock the volume */
 8005d2e:	250f      	movs	r5, #15
 8005d30:	e7cd      	b.n	8005cce <f_mount+0x76>
	if (fs->fs_type)
 8005d32:	7823      	ldrb	r3, [r4, #0]
 8005d34:	b193      	cbz	r3, 8005d5c <f_mount+0x104>
		stat = disk_status(fs->drv);
 8005d36:	7860      	ldrb	r0, [r4, #1]
 8005d38:	f7fd fc68 	bl	800360c <disk_status>
		if (!(stat & STA_NOINIT))
 8005d3c:	f010 0001 	ands.w	r0, r0, #1
 8005d40:	d10c      	bne.n	8005d5c <f_mount+0x104>
 8005d42:	4605      	mov	r5, r0
		ff_rel_grant(fs->sobj);
 8005d44:	6960      	ldr	r0, [r4, #20]
 8005d46:	f002 facd 	bl	80082e4 <ff_rel_grant>
 8005d4a:	e7c0      	b.n	8005cce <f_mount+0x76>
			i = *tp++ - '0';
 8005d4c:	3701      	adds	r7, #1
			if (i < 10 && tp == tt)
 8005d4e:	42ba      	cmp	r2, r7
			i = *tp++ - '0';
 8005d50:	f1a1 0530 	sub.w	r5, r1, #48	; 0x30
			if (i < 10 && tp == tt)
 8005d54:	d1d2      	bne.n	8005cfc <f_mount+0xa4>
				if (i < _VOLUMES)
 8005d56:	2930      	cmp	r1, #48	; 0x30
 8005d58:	d0e4      	beq.n	8005d24 <f_mount+0xcc>
 8005d5a:	e7cf      	b.n	8005cfc <f_mount+0xa4>
	fs->fs_type = 0; /* Clear the file system object */
 8005d5c:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol); /* Bind the logical drive and a physical drive */
 8005d5e:	b2e8      	uxtb	r0, r5
	fs->fs_type = 0; /* Clear the file system object */
 8005d60:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol); /* Bind the logical drive and a physical drive */
 8005d62:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv); /* Initialize the physical drive */
 8005d64:	f7fd fc5c 	bl	8003620 <disk_initialize>
	if (stat & STA_NOINIT)
 8005d68:	07c3      	lsls	r3, r0, #31
 8005d6a:	d411      	bmi.n	8005d90 <f_mount+0x138>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK)
 8005d6c:	f104 020c 	add.w	r2, r4, #12
 8005d70:	2102      	movs	r1, #2
 8005d72:	7860      	ldrb	r0, [r4, #1]
 8005d74:	f7fd fc80 	bl	8003678 <disk_ioctl>
 8005d78:	b940      	cbnz	r0, 8005d8c <f_mount+0x134>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1)))
 8005d7a:	89a3      	ldrh	r3, [r4, #12]
 8005d7c:	f5a3 7200 	sub.w	r2, r3, #512	; 0x200
 8005d80:	f5b2 6f60 	cmp.w	r2, #3584	; 0xe00
 8005d84:	d802      	bhi.n	8005d8c <f_mount+0x134>
 8005d86:	1e59      	subs	r1, r3, #1
 8005d88:	4019      	ands	r1, r3
 8005d8a:	d005      	beq.n	8005d98 <f_mount+0x140>
 8005d8c:	2501      	movs	r5, #1
 8005d8e:	e7d9      	b.n	8005d44 <f_mount+0xec>
 8005d90:	2503      	movs	r5, #3
 8005d92:	e7d7      	b.n	8005d44 <f_mount+0xec>
		return FR_NOT_ENABLED; /* Is the file system object available? */
 8005d94:	250c      	movs	r5, #12
 8005d96:	e79a      	b.n	8005cce <f_mount+0x76>
	fs->winsect = 0xFFFFFFFF; /* Invaidate window */
 8005d98:	f04f 33ff 	mov.w	r3, #4294967295
	fs->wflag = 0;
 8005d9c:	70e1      	strb	r1, [r4, #3]
	fs->winsect = 0xFFFFFFFF; /* Invaidate window */
 8005d9e:	63a3      	str	r3, [r4, #56]	; 0x38
 8005da0:	4620      	mov	r0, r4
 8005da2:	f7fd fc77 	bl	8003694 <move_window.part.6>
	if (move_window(fs, sect) != FR_OK)
 8005da6:	4605      	mov	r5, r0
 8005da8:	2800      	cmp	r0, #0
 8005daa:	d1ef      	bne.n	8005d8c <f_mount+0x134>
	if (ld_word(fs->win + BS_55AA) != 0xAA55)
 8005dac:	f64a 2355 	movw	r3, #43605	; 0xaa55
	rv = rv << 8 | ptr[0];
 8005db0:	f894 c23b 	ldrb.w	ip, [r4, #571]	; 0x23b
 8005db4:	f894 023a 	ldrb.w	r0, [r4, #570]	; 0x23a
 8005db8:	ea40 220c 	orr.w	r2, r0, ip, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55)
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	f040 8167 	bne.w	8006090 <f_mount+0x438>
	if (fs->win[BS_JmpBoot] == 0xE9
 8005dc2:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 8005dc6:	29e9      	cmp	r1, #233	; 0xe9
 8005dc8:	d006      	beq.n	8005dd8 <f_mount+0x180>
			|| (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90))
 8005dca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005dcc:	4a6d      	ldr	r2, [pc, #436]	; (8005f84 <f_mount+0x32c>)
 8005dce:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	f040 80e0 	bne.w	8005f98 <f_mount+0x340>
	rv = rv << 8 | ptr[2];
 8005dd8:	f8b4 7074 	ldrh.w	r7, [r4, #116]	; 0x74
	rv = rv << 8 | ptr[1];
 8005ddc:	f894 2073 	ldrb.w	r2, [r4, #115]	; 0x73
	rv = rv << 8 | ptr[0];
 8005de0:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
	rv = rv << 8 | ptr[1];
 8005de4:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
	rv = rv << 8 | ptr[0];
 8005de8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146)
 8005dec:	4a66      	ldr	r2, [pc, #408]	; (8005f88 <f_mount+0x330>)
 8005dee:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d00d      	beq.n	8005e12 <f_mount+0x1ba>
	rv = rv << 8 | ptr[2];
 8005df6:	f8b4 7090 	ldrh.w	r7, [r4, #144]	; 0x90
	rv = rv << 8 | ptr[1];
 8005dfa:	f894 208f 	ldrb.w	r2, [r4, #143]	; 0x8f
	rv = rv << 8 | ptr[0];
 8005dfe:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
	rv = rv << 8 | ptr[1];
 8005e02:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146)
 8005e06:	4f61      	ldr	r7, [pc, #388]	; (8005f8c <f_mount+0x334>)
	rv = rv << 8 | ptr[0];
 8005e08:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146)
 8005e0c:	42bb      	cmp	r3, r7
 8005e0e:	f040 80c3 	bne.w	8005f98 <f_mount+0x340>
	bsect = 0;
 8005e12:	2700      	movs	r7, #0
	rv = rv << 8 | ptr[0];
 8005e14:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 8005e18:	f894 e047 	ldrb.w	lr, [r4, #71]	; 0x47
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs))
 8005e1c:	89a3      	ldrh	r3, [r4, #12]
	rv = rv << 8 | ptr[0];
 8005e1e:	ea4e 2e02 	orr.w	lr, lr, r2, lsl #8
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs))
 8005e22:	4573      	cmp	r3, lr
 8005e24:	f040 8134 	bne.w	8006090 <f_mount+0x438>
	rv = rv << 8 | ptr[0];
 8005e28:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 8005e2c:	f894 1052 	ldrb.w	r1, [r4, #82]	; 0x52
		if (fasize == 0)
 8005e30:	ea51 2103 	orrs.w	r1, r1, r3, lsl #8
 8005e34:	d109      	bne.n	8005e4a <f_mount+0x1f2>
	rv = rv << 8 | ptr[2];
 8005e36:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
	rv = rv << 8 | ptr[1];
 8005e3a:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
	rv = rv << 8 | ptr[0];
 8005e3e:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
	rv = rv << 8 | ptr[1];
 8005e42:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 8005e46:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
		fs->n_fats = fs->win[BPB_NumFATs]; /* Number of FATs */
 8005e4a:	f894 904c 	ldrb.w	r9, [r4, #76]	; 0x4c
		fs->fsize = fasize;
 8005e4e:	6261      	str	r1, [r4, #36]	; 0x24
		if (fs->n_fats != 1 && fs->n_fats != 2)
 8005e50:	f109 33ff 	add.w	r3, r9, #4294967295
 8005e54:	2b01      	cmp	r3, #1
		fs->n_fats = fs->win[BPB_NumFATs]; /* Number of FATs */
 8005e56:	f884 9002 	strb.w	r9, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2)
 8005e5a:	f200 8119 	bhi.w	8006090 <f_mount+0x438>
		fs->csize = fs->win[BPB_SecPerClus]; /* Cluster size */
 8005e5e:	f894 a049 	ldrb.w	sl, [r4, #73]	; 0x49
		fasize *= fs->n_fats; /* Number of sectors for FAT area */
 8005e62:	fb01 f909 	mul.w	r9, r1, r9
		fs->csize = fs->win[BPB_SecPerClus]; /* Cluster size */
 8005e66:	fa1f f38a 	uxth.w	r3, sl
 8005e6a:	8163      	strh	r3, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1)))
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	f000 810f 	beq.w	8006090 <f_mount+0x438>
 8005e72:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005e76:	ea13 0f0a 	tst.w	r3, sl
 8005e7a:	f040 8109 	bne.w	8006090 <f_mount+0x438>
	rv = rv << 8 | ptr[0];
 8005e7e:	f894 204e 	ldrb.w	r2, [r4, #78]	; 0x4e
 8005e82:	f894 804d 	ldrb.w	r8, [r4, #77]	; 0x4d
		if (fs->n_rootdir % (SS(fs) / SZDIRE))
 8005e86:	ea4f 135e 	mov.w	r3, lr, lsr #5
	rv = rv << 8 | ptr[0];
 8005e8a:	ea48 2802 	orr.w	r8, r8, r2, lsl #8
		if (fs->n_rootdir % (SS(fs) / SZDIRE))
 8005e8e:	fbb8 f2f3 	udiv	r2, r8, r3
 8005e92:	fb03 8312 	mls	r3, r3, r2, r8
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	9203      	str	r2, [sp, #12]
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt); /* Number of root directory entries */
 8005e9a:	f8a4 8008 	strh.w	r8, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE))
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	f040 80f6 	bne.w	8006090 <f_mount+0x438>
	rv = rv << 8 | ptr[0];
 8005ea4:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 8005ea8:	f894 304f 	ldrb.w	r3, [r4, #79]	; 0x4f
		if (tsect == 0)
 8005eac:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 8005eb0:	9302      	str	r3, [sp, #8]
 8005eb2:	d10a      	bne.n	8005eca <f_mount+0x272>
	rv = rv << 8 | ptr[2];
 8005eb4:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
	rv = rv << 8 | ptr[1];
 8005eb8:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
	rv = rv << 8 | ptr[0];
 8005ebc:	f894 b05c 	ldrb.w	fp, [r4, #92]	; 0x5c
	rv = rv << 8 | ptr[1];
 8005ec0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 8005ec4:	ea4b 2303 	orr.w	r3, fp, r3, lsl #8
 8005ec8:	9302      	str	r3, [sp, #8]
	rv = rv << 8 | ptr[0];
 8005eca:	f894 b04b 	ldrb.w	fp, [r4, #75]	; 0x4b
 8005ece:	f894 204a 	ldrb.w	r2, [r4, #74]	; 0x4a
		if (nrsv == 0)
 8005ed2:	ea52 230b 	orrs.w	r3, r2, fp, lsl #8
 8005ed6:	9301      	str	r3, [sp, #4]
 8005ed8:	f000 80da 	beq.w	8006090 <f_mount+0x438>
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE); /* RSV + FAT + DIR */
 8005edc:	9b03      	ldr	r3, [sp, #12]
 8005ede:	9a01      	ldr	r2, [sp, #4]
 8005ee0:	4413      	add	r3, r2
 8005ee2:	469b      	mov	fp, r3
		if (tsect < sysect)
 8005ee4:	9b02      	ldr	r3, [sp, #8]
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE); /* RSV + FAT + DIR */
 8005ee6:	44cb      	add	fp, r9
		if (tsect < sysect)
 8005ee8:	459b      	cmp	fp, r3
 8005eea:	f200 80d1 	bhi.w	8006090 <f_mount+0x438>
		nclst = (tsect - sysect) / fs->csize; /* Number of clusters */
 8005eee:	eba3 030b 	sub.w	r3, r3, fp
 8005ef2:	fbb3 f3fa 	udiv	r3, r3, sl
		if (nclst == 0)
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	f000 80ca 	beq.w	8006090 <f_mount+0x438>
		if (nclst <= MAX_FAT16)
 8005efc:	f64f 7af5 	movw	sl, #65525	; 0xfff5
 8005f00:	4553      	cmp	r3, sl
 8005f02:	f200 81b0 	bhi.w	8006266 <f_mount+0x60e>
		if (nclst <= MAX_FAT12)
 8005f06:	f640 7cf5 	movw	ip, #4085	; 0xff5
 8005f0a:	9a01      	ldr	r2, [sp, #4]
 8005f0c:	4563      	cmp	r3, ip
 8005f0e:	443a      	add	r2, r7
 8005f10:	44bb      	add	fp, r7
 8005f12:	f103 0002 	add.w	r0, r3, #2
 8005f16:	f200 818a 	bhi.w	800622e <f_mount+0x5d6>
		fs->n_fatent = nclst + 2; /* Number of FAT entries */
 8005f1a:	6220      	str	r0, [r4, #32]
		fs->fatbase = bsect + nrsv; /* FAT start sector */
 8005f1c:	e9c4 720a 	strd	r7, r2, [r4, #40]	; 0x28
		fs->database = bsect + sysect; /* Data start sector */
 8005f20:	f8c4 b034 	str.w	fp, [r4, #52]	; 0x34
			if (fs->n_rootdir == 0)
 8005f24:	f1b8 0f00 	cmp.w	r8, #0
 8005f28:	f000 80b2 	beq.w	8006090 <f_mount+0x438>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))
 8005f2c:	f10e 33ff 	add.w	r3, lr, #4294967295
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005f30:	f000 0701 	and.w	r7, r0, #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))
 8005f34:	443b      	add	r3, r7
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005f36:	eb00 0040 	add.w	r0, r0, r0, lsl #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))
 8005f3a:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 8005f3e:	fbb3 fefe 	udiv	lr, r3, lr
			fs->dirbase = fs->fatbase + fasize; /* Root directory start sector */
 8005f42:	444a      	add	r2, r9
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))
 8005f44:	458e      	cmp	lr, r1
			fs->dirbase = fs->fatbase + fasize; /* Root directory start sector */
 8005f46:	6322      	str	r2, [r4, #48]	; 0x30
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))
 8005f48:	f200 80a2 	bhi.w	8006090 <f_mount+0x438>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF; /* Initialize cluster allocation information */
 8005f4c:	f04f 33ff 	mov.w	r3, #4294967295
		fs->fsi_flag = 0x80;
 8005f50:	2280      	movs	r2, #128	; 0x80
		fs->last_clst = fs->free_clst = 0xFFFFFFFF; /* Initialize cluster allocation information */
 8005f52:	e9c4 3306 	strd	r3, r3, [r4, #24]
		fs->fsi_flag = 0x80;
 8005f56:	7122      	strb	r2, [r4, #4]
	fs->id = ++Fsid; /* File system mount ID */
 8005f58:	490d      	ldr	r1, [pc, #52]	; (8005f90 <f_mount+0x338>)
		if (Files[i].fs == fs)
 8005f5a:	4b09      	ldr	r3, [pc, #36]	; (8005f80 <f_mount+0x328>)
	fs->id = ++Fsid; /* File system mount ID */
 8005f5c:	880a      	ldrh	r2, [r1, #0]
		if (Files[i].fs == fs)
 8005f5e:	6818      	ldr	r0, [r3, #0]
	fs->id = ++Fsid; /* File system mount ID */
 8005f60:	3201      	adds	r2, #1
 8005f62:	b292      	uxth	r2, r2
		if (Files[i].fs == fs)
 8005f64:	42a0      	cmp	r0, r4
	fs->id = ++Fsid; /* File system mount ID */
 8005f66:	800a      	strh	r2, [r1, #0]
 8005f68:	80e2      	strh	r2, [r4, #6]
			Files[i].fs = 0;
 8005f6a:	bf04      	itt	eq
 8005f6c:	2200      	moveq	r2, #0
 8005f6e:	601a      	streq	r2, [r3, #0]
		if (Files[i].fs == fs)
 8005f70:	691a      	ldr	r2, [r3, #16]
	fs->fs_type = fmt; /* FAT sub-type */
 8005f72:	7026      	strb	r6, [r4, #0]
		if (Files[i].fs == fs)
 8005f74:	42a2      	cmp	r2, r4
 8005f76:	f47f aee5 	bne.w	8005d44 <f_mount+0xec>
			Files[i].fs = 0;
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	611a      	str	r2, [r3, #16]
 8005f7e:	e6e1      	b.n	8005d44 <f_mount+0xec>
 8005f80:	2000028c 	.word	0x2000028c
 8005f84:	009000eb 	.word	0x009000eb
 8005f88:	00544146 	.word	0x00544146
 8005f8c:	33544146 	.word	0x33544146
 8005f90:	200002ac 	.word	0x200002ac
 8005f94:	20000288 	.word	0x20000288
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005f98:	f894 71fe 	ldrb.w	r7, [r4, #510]	; 0x1fe
 8005f9c:	b14f      	cbz	r7, 8005fb2 <f_mount+0x35a>
	rv = rv << 8 | ptr[2];
 8005f9e:	f8b4 2204 	ldrh.w	r2, [r4, #516]	; 0x204
	rv = rv << 8 | ptr[1];
 8005fa2:	f894 3203 	ldrb.w	r3, [r4, #515]	; 0x203
	rv = rv << 8 | ptr[0];
 8005fa6:	f894 7202 	ldrb.w	r7, [r4, #514]	; 0x202
	rv = rv << 8 | ptr[1];
 8005faa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 8005fae:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005fb2:	f894 320e 	ldrb.w	r3, [r4, #526]	; 0x20e
 8005fb6:	b14b      	cbz	r3, 8005fcc <f_mount+0x374>
	rv = rv << 8 | ptr[2];
 8005fb8:	f8b4 e214 	ldrh.w	lr, [r4, #532]	; 0x214
	rv = rv << 8 | ptr[1];
 8005fbc:	f894 2213 	ldrb.w	r2, [r4, #531]	; 0x213
	rv = rv << 8 | ptr[0];
 8005fc0:	f894 3212 	ldrb.w	r3, [r4, #530]	; 0x212
	rv = rv << 8 | ptr[1];
 8005fc4:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
	rv = rv << 8 | ptr[0];
 8005fc8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005fcc:	f894 221e 	ldrb.w	r2, [r4, #542]	; 0x21e
 8005fd0:	9305      	str	r3, [sp, #20]
 8005fd2:	b14a      	cbz	r2, 8005fe8 <f_mount+0x390>
	rv = rv << 8 | ptr[2];
 8005fd4:	f8b4 e224 	ldrh.w	lr, [r4, #548]	; 0x224
	rv = rv << 8 | ptr[1];
 8005fd8:	f894 3223 	ldrb.w	r3, [r4, #547]	; 0x223
	rv = rv << 8 | ptr[0];
 8005fdc:	f894 2222 	ldrb.w	r2, [r4, #546]	; 0x222
	rv = rv << 8 | ptr[1];
 8005fe0:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
	rv = rv << 8 | ptr[0];
 8005fe4:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005fe8:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
 8005fec:	9206      	str	r2, [sp, #24]
 8005fee:	b14b      	cbz	r3, 8006004 <f_mount+0x3ac>
	rv = rv << 8 | ptr[2];
 8005ff0:	f8b4 e234 	ldrh.w	lr, [r4, #564]	; 0x234
	rv = rv << 8 | ptr[1];
 8005ff4:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
	rv = rv << 8 | ptr[0];
 8005ff8:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
	rv = rv << 8 | ptr[1];
 8005ffc:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
	rv = rv << 8 | ptr[0];
 8006000:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006004:	9307      	str	r3, [sp, #28]
			fmt = bsect ? check_fs(fs, bsect) : 3; /* Check the partition */
 8006006:	2f00      	cmp	r7, #0
 8006008:	f040 80ce 	bne.w	80061a8 <f_mount+0x550>
			bsect = br[i];
 800600c:	9f05      	ldr	r7, [sp, #20]
			fmt = bsect ? check_fs(fs, bsect) : 3; /* Check the partition */
 800600e:	2f00      	cmp	r7, #0
 8006010:	f040 8087 	bne.w	8006122 <f_mount+0x4ca>
			bsect = br[i];
 8006014:	9f06      	ldr	r7, [sp, #24]
			fmt = bsect ? check_fs(fs, bsect) : 3; /* Check the partition */
 8006016:	2f00      	cmp	r7, #0
 8006018:	d143      	bne.n	80060a2 <f_mount+0x44a>
			bsect = br[i];
 800601a:	9f07      	ldr	r7, [sp, #28]
			fmt = bsect ? check_fs(fs, bsect) : 3; /* Check the partition */
 800601c:	b3c7      	cbz	r7, 8006090 <f_mount+0x438>
	fs->winsect = 0xFFFFFFFF; /* Invaidate window */
 800601e:	f04f 33ff 	mov.w	r3, #4294967295
	fs->wflag = 0;
 8006022:	2200      	movs	r2, #0
	if (sector != fs->winsect)
 8006024:	429f      	cmp	r7, r3
	fs->wflag = 0;
 8006026:	70e2      	strb	r2, [r4, #3]
	fs->winsect = 0xFFFFFFFF; /* Invaidate window */
 8006028:	63a3      	str	r3, [r4, #56]	; 0x38
	if (sector != fs->winsect)
 800602a:	d133      	bne.n	8006094 <f_mount+0x43c>
	if (ld_word(fs->win + BS_55AA) != 0xAA55)
 800602c:	f64a 2355 	movw	r3, #43605	; 0xaa55
	rv = rv << 8 | ptr[0];
 8006030:	f894 c23b 	ldrb.w	ip, [r4, #571]	; 0x23b
 8006034:	f894 023a 	ldrb.w	r0, [r4, #570]	; 0x23a
 8006038:	ea40 220c 	orr.w	r2, r0, ip, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55)
 800603c:	429a      	cmp	r2, r3
 800603e:	d127      	bne.n	8006090 <f_mount+0x438>
	if (fs->win[BS_JmpBoot] == 0xE9
 8006040:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8006044:	2be9      	cmp	r3, #233	; 0xe9
 8006046:	d005      	beq.n	8006054 <f_mount+0x3fc>
			|| (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90))
 8006048:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800604a:	4ac7      	ldr	r2, [pc, #796]	; (8006368 <f_mount+0x710>)
 800604c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8006050:	4293      	cmp	r3, r2
 8006052:	d11d      	bne.n	8006090 <f_mount+0x438>
	rv = rv << 8 | ptr[2];
 8006054:	f8b4 1074 	ldrh.w	r1, [r4, #116]	; 0x74
	rv = rv << 8 | ptr[1];
 8006058:	f894 2073 	ldrb.w	r2, [r4, #115]	; 0x73
	rv = rv << 8 | ptr[0];
 800605c:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
	rv = rv << 8 | ptr[1];
 8006060:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	rv = rv << 8 | ptr[0];
 8006064:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146)
 8006068:	4ac0      	ldr	r2, [pc, #768]	; (800636c <f_mount+0x714>)
 800606a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800606e:	4293      	cmp	r3, r2
 8006070:	f43f aed0 	beq.w	8005e14 <f_mount+0x1bc>
	rv = rv << 8 | ptr[2];
 8006074:	f8b4 1090 	ldrh.w	r1, [r4, #144]	; 0x90
	rv = rv << 8 | ptr[1];
 8006078:	f894 208f 	ldrb.w	r2, [r4, #143]	; 0x8f
	rv = rv << 8 | ptr[0];
 800607c:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
	rv = rv << 8 | ptr[1];
 8006080:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146)
 8006084:	49ba      	ldr	r1, [pc, #744]	; (8006370 <f_mount+0x718>)
	rv = rv << 8 | ptr[0];
 8006086:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146)
 800608a:	428b      	cmp	r3, r1
 800608c:	f43f aec2 	beq.w	8005e14 <f_mount+0x1bc>
 8006090:	250d      	movs	r5, #13
 8006092:	e657      	b.n	8005d44 <f_mount+0xec>
 8006094:	4639      	mov	r1, r7
 8006096:	4620      	mov	r0, r4
 8006098:	f7fd fafc 	bl	8003694 <move_window.part.6>
	if (move_window(fs, sect) != FR_OK)
 800609c:	2800      	cmp	r0, #0
 800609e:	d0c5      	beq.n	800602c <f_mount+0x3d4>
 80060a0:	e674      	b.n	8005d8c <f_mount+0x134>
	fs->winsect = 0xFFFFFFFF; /* Invaidate window */
 80060a2:	f04f 33ff 	mov.w	r3, #4294967295
	fs->wflag = 0;
 80060a6:	2200      	movs	r2, #0
	if (sector != fs->winsect)
 80060a8:	429f      	cmp	r7, r3
	fs->wflag = 0;
 80060aa:	70e2      	strb	r2, [r4, #3]
	fs->winsect = 0xFFFFFFFF; /* Invaidate window */
 80060ac:	63a3      	str	r3, [r4, #56]	; 0x38
	if (sector != fs->winsect)
 80060ae:	d005      	beq.n	80060bc <f_mount+0x464>
 80060b0:	4639      	mov	r1, r7
 80060b2:	4620      	mov	r0, r4
 80060b4:	f7fd faee 	bl	8003694 <move_window.part.6>
	if (move_window(fs, sect) != FR_OK)
 80060b8:	2800      	cmp	r0, #0
 80060ba:	d1ae      	bne.n	800601a <f_mount+0x3c2>
	if (ld_word(fs->win + BS_55AA) != 0xAA55)
 80060bc:	f64a 2355 	movw	r3, #43605	; 0xaa55
	rv = rv << 8 | ptr[0];
 80060c0:	f894 c23b 	ldrb.w	ip, [r4, #571]	; 0x23b
 80060c4:	f894 023a 	ldrb.w	r0, [r4, #570]	; 0x23a
 80060c8:	ea40 220c 	orr.w	r2, r0, ip, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55)
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d1a4      	bne.n	800601a <f_mount+0x3c2>
	if (fs->win[BS_JmpBoot] == 0xE9
 80060d0:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80060d4:	2be9      	cmp	r3, #233	; 0xe9
 80060d6:	d005      	beq.n	80060e4 <f_mount+0x48c>
			|| (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90))
 80060d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80060da:	4aa3      	ldr	r2, [pc, #652]	; (8006368 <f_mount+0x710>)
 80060dc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d19a      	bne.n	800601a <f_mount+0x3c2>
	rv = rv << 8 | ptr[2];
 80060e4:	f8b4 1074 	ldrh.w	r1, [r4, #116]	; 0x74
	rv = rv << 8 | ptr[1];
 80060e8:	f894 2073 	ldrb.w	r2, [r4, #115]	; 0x73
	rv = rv << 8 | ptr[0];
 80060ec:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
	rv = rv << 8 | ptr[1];
 80060f0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	rv = rv << 8 | ptr[0];
 80060f4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146)
 80060f8:	4a9c      	ldr	r2, [pc, #624]	; (800636c <f_mount+0x714>)
 80060fa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80060fe:	4293      	cmp	r3, r2
 8006100:	f43f ae88 	beq.w	8005e14 <f_mount+0x1bc>
	rv = rv << 8 | ptr[2];
 8006104:	f8b4 1090 	ldrh.w	r1, [r4, #144]	; 0x90
	rv = rv << 8 | ptr[1];
 8006108:	f894 208f 	ldrb.w	r2, [r4, #143]	; 0x8f
	rv = rv << 8 | ptr[0];
 800610c:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
	rv = rv << 8 | ptr[1];
 8006110:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146)
 8006114:	4996      	ldr	r1, [pc, #600]	; (8006370 <f_mount+0x718>)
	rv = rv << 8 | ptr[0];
 8006116:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146)
 800611a:	428b      	cmp	r3, r1
 800611c:	f43f ae7a 	beq.w	8005e14 <f_mount+0x1bc>
 8006120:	e77b      	b.n	800601a <f_mount+0x3c2>
	fs->winsect = 0xFFFFFFFF; /* Invaidate window */
 8006122:	f04f 33ff 	mov.w	r3, #4294967295
	fs->wflag = 0;
 8006126:	2200      	movs	r2, #0
	if (sector != fs->winsect)
 8006128:	429f      	cmp	r7, r3
	fs->wflag = 0;
 800612a:	70e2      	strb	r2, [r4, #3]
	fs->winsect = 0xFFFFFFFF; /* Invaidate window */
 800612c:	63a3      	str	r3, [r4, #56]	; 0x38
	if (sector != fs->winsect)
 800612e:	d006      	beq.n	800613e <f_mount+0x4e6>
 8006130:	4639      	mov	r1, r7
 8006132:	4620      	mov	r0, r4
 8006134:	f7fd faae 	bl	8003694 <move_window.part.6>
	if (move_window(fs, sect) != FR_OK)
 8006138:	2800      	cmp	r0, #0
 800613a:	f47f af6b 	bne.w	8006014 <f_mount+0x3bc>
	if (ld_word(fs->win + BS_55AA) != 0xAA55)
 800613e:	f64a 2355 	movw	r3, #43605	; 0xaa55
	rv = rv << 8 | ptr[0];
 8006142:	f894 c23b 	ldrb.w	ip, [r4, #571]	; 0x23b
 8006146:	f894 023a 	ldrb.w	r0, [r4, #570]	; 0x23a
 800614a:	ea40 220c 	orr.w	r2, r0, ip, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55)
 800614e:	429a      	cmp	r2, r3
 8006150:	f47f af60 	bne.w	8006014 <f_mount+0x3bc>
	if (fs->win[BS_JmpBoot] == 0xE9
 8006154:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8006158:	2be9      	cmp	r3, #233	; 0xe9
 800615a:	d006      	beq.n	800616a <f_mount+0x512>
			|| (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90))
 800615c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800615e:	4a82      	ldr	r2, [pc, #520]	; (8006368 <f_mount+0x710>)
 8006160:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8006164:	4293      	cmp	r3, r2
 8006166:	f47f af55 	bne.w	8006014 <f_mount+0x3bc>
	rv = rv << 8 | ptr[2];
 800616a:	f8b4 1074 	ldrh.w	r1, [r4, #116]	; 0x74
	rv = rv << 8 | ptr[1];
 800616e:	f894 2073 	ldrb.w	r2, [r4, #115]	; 0x73
	rv = rv << 8 | ptr[0];
 8006172:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
	rv = rv << 8 | ptr[1];
 8006176:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	rv = rv << 8 | ptr[0];
 800617a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146)
 800617e:	4a7b      	ldr	r2, [pc, #492]	; (800636c <f_mount+0x714>)
 8006180:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006184:	4293      	cmp	r3, r2
 8006186:	f43f ae45 	beq.w	8005e14 <f_mount+0x1bc>
	rv = rv << 8 | ptr[2];
 800618a:	f8b4 1090 	ldrh.w	r1, [r4, #144]	; 0x90
	rv = rv << 8 | ptr[1];
 800618e:	f894 208f 	ldrb.w	r2, [r4, #143]	; 0x8f
	rv = rv << 8 | ptr[0];
 8006192:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
	rv = rv << 8 | ptr[1];
 8006196:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146)
 800619a:	4975      	ldr	r1, [pc, #468]	; (8006370 <f_mount+0x718>)
	rv = rv << 8 | ptr[0];
 800619c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146)
 80061a0:	428b      	cmp	r3, r1
 80061a2:	f43f ae37 	beq.w	8005e14 <f_mount+0x1bc>
 80061a6:	e735      	b.n	8006014 <f_mount+0x3bc>
	fs->winsect = 0xFFFFFFFF; /* Invaidate window */
 80061a8:	f04f 33ff 	mov.w	r3, #4294967295
	fs->wflag = 0;
 80061ac:	2200      	movs	r2, #0
	if (sector != fs->winsect)
 80061ae:	429f      	cmp	r7, r3
	fs->wflag = 0;
 80061b0:	70e2      	strb	r2, [r4, #3]
	fs->winsect = 0xFFFFFFFF; /* Invaidate window */
 80061b2:	63a3      	str	r3, [r4, #56]	; 0x38
	if (sector != fs->winsect)
 80061b4:	d013      	beq.n	80061de <f_mount+0x586>
 80061b6:	4639      	mov	r1, r7
 80061b8:	4620      	mov	r0, r4
 80061ba:	f7fd fa6b 	bl	8003694 <move_window.part.6>
	if (move_window(fs, sect) != FR_OK)
 80061be:	2800      	cmp	r0, #0
 80061c0:	f47f af24 	bne.w	800600c <f_mount+0x3b4>
	if (ld_word(fs->win + BS_55AA) != 0xAA55)
 80061c4:	f64a 2355 	movw	r3, #43605	; 0xaa55
	rv = rv << 8 | ptr[0];
 80061c8:	f894 c23b 	ldrb.w	ip, [r4, #571]	; 0x23b
 80061cc:	f894 023a 	ldrb.w	r0, [r4, #570]	; 0x23a
 80061d0:	ea40 220c 	orr.w	r2, r0, ip, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55)
 80061d4:	429a      	cmp	r2, r3
 80061d6:	f47f af19 	bne.w	800600c <f_mount+0x3b4>
 80061da:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
	if (fs->win[BS_JmpBoot] == 0xE9
 80061de:	29e9      	cmp	r1, #233	; 0xe9
 80061e0:	d006      	beq.n	80061f0 <f_mount+0x598>
			|| (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90))
 80061e2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80061e4:	4a60      	ldr	r2, [pc, #384]	; (8006368 <f_mount+0x710>)
 80061e6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80061ea:	4293      	cmp	r3, r2
 80061ec:	f47f af0e 	bne.w	800600c <f_mount+0x3b4>
	rv = rv << 8 | ptr[2];
 80061f0:	f8b4 1074 	ldrh.w	r1, [r4, #116]	; 0x74
	rv = rv << 8 | ptr[1];
 80061f4:	f894 2073 	ldrb.w	r2, [r4, #115]	; 0x73
	rv = rv << 8 | ptr[0];
 80061f8:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
	rv = rv << 8 | ptr[1];
 80061fc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	rv = rv << 8 | ptr[0];
 8006200:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146)
 8006204:	4a59      	ldr	r2, [pc, #356]	; (800636c <f_mount+0x714>)
 8006206:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800620a:	4293      	cmp	r3, r2
 800620c:	f43f ae02 	beq.w	8005e14 <f_mount+0x1bc>
	rv = rv << 8 | ptr[2];
 8006210:	f8b4 1090 	ldrh.w	r1, [r4, #144]	; 0x90
	rv = rv << 8 | ptr[1];
 8006214:	f894 208f 	ldrb.w	r2, [r4, #143]	; 0x8f
	rv = rv << 8 | ptr[0];
 8006218:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
	rv = rv << 8 | ptr[1];
 800621c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146)
 8006220:	4953      	ldr	r1, [pc, #332]	; (8006370 <f_mount+0x718>)
	rv = rv << 8 | ptr[0];
 8006222:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146)
 8006226:	428b      	cmp	r3, r1
 8006228:	f43f adf4 	beq.w	8005e14 <f_mount+0x1bc>
 800622c:	e6ee      	b.n	800600c <f_mount+0x3b4>
		fs->n_fatent = nclst + 2; /* Number of FAT entries */
 800622e:	6220      	str	r0, [r4, #32]
		fs->fatbase = bsect + nrsv; /* FAT start sector */
 8006230:	e9c4 720a 	strd	r7, r2, [r4, #40]	; 0x28
		fs->database = bsect + sysect; /* Data start sector */
 8006234:	f8c4 b034 	str.w	fp, [r4, #52]	; 0x34
			if (fs->n_rootdir == 0)
 8006238:	f1b8 0f00 	cmp.w	r8, #0
 800623c:	f43f af28 	beq.w	8006090 <f_mount+0x438>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))
 8006240:	f10e 33ff 	add.w	r3, lr, #4294967295
 8006244:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8006248:	fbb0 fefe 	udiv	lr, r0, lr
			fs->dirbase = fs->fatbase + fasize; /* Root directory start sector */
 800624c:	444a      	add	r2, r9
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))
 800624e:	458e      	cmp	lr, r1
			fs->dirbase = fs->fatbase + fasize; /* Root directory start sector */
 8006250:	6322      	str	r2, [r4, #48]	; 0x30
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))
 8006252:	f63f af1d 	bhi.w	8006090 <f_mount+0x438>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF; /* Initialize cluster allocation information */
 8006256:	f04f 33ff 	mov.w	r3, #4294967295
		fs->fsi_flag = 0x80;
 800625a:	2280      	movs	r2, #128	; 0x80
		fs->last_clst = fs->free_clst = 0xFFFFFFFF; /* Initialize cluster allocation information */
 800625c:	e9c4 3306 	strd	r3, r3, [r4, #24]
		fs->fsi_flag = 0x80;
 8006260:	7122      	strb	r2, [r4, #4]
 8006262:	2602      	movs	r6, #2
 8006264:	e678      	b.n	8005f58 <f_mount+0x300>
		fs->fatbase = bsect + nrsv; /* FAT start sector */
 8006266:	9a01      	ldr	r2, [sp, #4]
	rv = rv << 8 | ptr[0];
 8006268:	f894 9067 	ldrb.w	r9, [r4, #103]	; 0x67
		fs->fatbase = bsect + nrsv; /* FAT start sector */
 800626c:	443a      	add	r2, r7
 800626e:	62e2      	str	r2, [r4, #44]	; 0x2c
	rv = rv << 8 | ptr[0];
 8006270:	f894 2066 	ldrb.w	r2, [r4, #102]	; 0x66
 8006274:	3302      	adds	r3, #2
		fs->database = bsect + sysect; /* Data start sector */
 8006276:	eb0b 0607 	add.w	r6, fp, r7
			if (ld_word(fs->win + BPB_FSVer32) != 0)
 800627a:	ea52 2209 	orrs.w	r2, r2, r9, lsl #8
		fs->n_fatent = nclst + 2; /* Number of FAT entries */
 800627e:	6223      	str	r3, [r4, #32]
		fs->database = bsect + sysect; /* Data start sector */
 8006280:	6366      	str	r6, [r4, #52]	; 0x34
		fs->volbase = bsect; /* Volume start sector */
 8006282:	62a7      	str	r7, [r4, #40]	; 0x28
			if (ld_word(fs->win + BPB_FSVer32) != 0)
 8006284:	f47f af04 	bne.w	8006090 <f_mount+0x438>
			if (fs->n_rootdir)
 8006288:	f1b8 0f00 	cmp.w	r8, #0
 800628c:	f47f af00 	bne.w	8006090 <f_mount+0x438>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))
 8006290:	f10e 32ff 	add.w	r2, lr, #4294967295
 8006294:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006298:	fbb3 fefe 	udiv	lr, r3, lr
	rv = rv << 8 | ptr[2];
 800629c:	f8b4 606a 	ldrh.w	r6, [r4, #106]	; 0x6a
	rv = rv << 8 | ptr[1];
 80062a0:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
	rv = rv << 8 | ptr[0];
 80062a4:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
	rv = rv << 8 | ptr[1];
 80062a8:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
	rv = rv << 8 | ptr[0];
 80062ac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))
 80062b0:	4571      	cmp	r1, lr
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32); /* Root directory start cluster */
 80062b2:	6323      	str	r3, [r4, #48]	; 0x30
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))
 80062b4:	f4ff aeec 	bcc.w	8006090 <f_mount+0x438>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF; /* Initialize cluster allocation information */
 80062b8:	f04f 32ff 	mov.w	r2, #4294967295
		fs->fsi_flag = 0x80;
 80062bc:	2180      	movs	r1, #128	; 0x80
	rv = rv << 8 | ptr[0];
 80062be:	f894 606d 	ldrb.w	r6, [r4, #109]	; 0x6d
 80062c2:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
		fs->last_clst = fs->free_clst = 0xFFFFFFFF; /* Initialize cluster allocation information */
 80062c6:	61e2      	str	r2, [r4, #28]
	rv = rv << 8 | ptr[0];
 80062c8:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
		&& ld_word(fs->win + BPB_FSInfo32) == 1
 80062cc:	2b01      	cmp	r3, #1
		fs->last_clst = fs->free_clst = 0xFFFFFFFF; /* Initialize cluster allocation information */
 80062ce:	61a2      	str	r2, [r4, #24]
		fs->fsi_flag = 0x80;
 80062d0:	7121      	strb	r1, [r4, #4]
		&& ld_word(fs->win + BPB_FSInfo32) == 1
 80062d2:	d001      	beq.n	80062d8 <f_mount+0x680>
					&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80062d4:	2603      	movs	r6, #3
 80062d6:	e63f      	b.n	8005f58 <f_mount+0x300>
	if (sector != fs->winsect)
 80062d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
				&& move_window(fs, bsect + 1) == FR_OK)
 80062da:	1c79      	adds	r1, r7, #1
	if (sector != fs->winsect)
 80062dc:	4299      	cmp	r1, r3
 80062de:	d138      	bne.n	8006352 <f_mount+0x6fa>
			if (ld_word(fs->win + BS_55AA) == 0xAA55 /* Load FSINFO data if available */
 80062e0:	f64a 2355 	movw	r3, #43605	; 0xaa55
			fs->fsi_flag = 0;
 80062e4:	2200      	movs	r2, #0
	rv = rv << 8 | ptr[0];
 80062e6:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
			if (ld_word(fs->win + BS_55AA) == 0xAA55 /* Load FSINFO data if available */
 80062ea:	4298      	cmp	r0, r3
			fs->fsi_flag = 0;
 80062ec:	7122      	strb	r2, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55 /* Load FSINFO data if available */
 80062ee:	d1f1      	bne.n	80062d4 <f_mount+0x67c>
	rv = rv << 8 | ptr[2];
 80062f0:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
	rv = rv << 8 | ptr[1];
 80062f2:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
	rv = rv << 8 | ptr[0];
 80062f6:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
	rv = rv << 8 | ptr[1];
 80062fa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
			&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80062fe:	491d      	ldr	r1, [pc, #116]	; (8006374 <f_mount+0x71c>)
	rv = rv << 8 | ptr[0];
 8006300:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006304:	428b      	cmp	r3, r1
 8006306:	d1e5      	bne.n	80062d4 <f_mount+0x67c>
	rv = rv << 8 | ptr[2];
 8006308:	f8b4 1222 	ldrh.w	r1, [r4, #546]	; 0x222
	rv = rv << 8 | ptr[1];
 800630c:	f894 2221 	ldrb.w	r2, [r4, #545]	; 0x221
	rv = rv << 8 | ptr[0];
 8006310:	f894 3220 	ldrb.w	r3, [r4, #544]	; 0x220
	rv = rv << 8 | ptr[1];
 8006314:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
					&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006318:	4917      	ldr	r1, [pc, #92]	; (8006378 <f_mount+0x720>)
	rv = rv << 8 | ptr[0];
 800631a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800631e:	428b      	cmp	r3, r1
 8006320:	d1d8      	bne.n	80062d4 <f_mount+0x67c>
	rv = rv << 8 | ptr[1];
 8006322:	f894 2225 	ldrb.w	r2, [r4, #549]	; 0x225
 8006326:	f894 3229 	ldrb.w	r3, [r4, #553]	; 0x229
	rv = rv << 8 | ptr[2];
 800632a:	f8b4 0226 	ldrh.w	r0, [r4, #550]	; 0x226
 800632e:	f8b4 122a 	ldrh.w	r1, [r4, #554]	; 0x22a
	rv = rv << 8 | ptr[1];
 8006332:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 8006336:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
	rv = rv << 8 | ptr[0];
 800633a:	f894 2224 	ldrb.w	r2, [r4, #548]	; 0x224
 800633e:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 8006342:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8006346:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800634a:	e9c4 3206 	strd	r3, r2, [r4, #24]
 800634e:	2603      	movs	r6, #3
 8006350:	e602      	b.n	8005f58 <f_mount+0x300>
 8006352:	4620      	mov	r0, r4
 8006354:	f7fd f99e 	bl	8003694 <move_window.part.6>
				&& move_window(fs, bsect + 1) == FR_OK)
 8006358:	2800      	cmp	r0, #0
 800635a:	d1bb      	bne.n	80062d4 <f_mount+0x67c>
 800635c:	f894 c23b 	ldrb.w	ip, [r4, #571]	; 0x23b
 8006360:	f894 023a 	ldrb.w	r0, [r4, #570]	; 0x23a
 8006364:	e7bc      	b.n	80062e0 <f_mount+0x688>
 8006366:	bf00      	nop
 8006368:	009000eb 	.word	0x009000eb
 800636c:	00544146 	.word	0x00544146
 8006370:	33544146 	.word	0x33544146
 8006374:	41615252 	.word	0x41615252
 8006378:	61417272 	.word	0x61417272

0800637c <f_open>:

FRESULT f_open(FIL *fp, /* Pointer to the blank file object */
const TCHAR *path, /* Pointer to the file name */
BYTE mode /* Access mode and file open mode flags */
)
{
 800637c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006380:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
	DWORD dw, cl, bcs, clst, sc;
	FSIZE_t ofs;
#endif
	DEF_NAMBUF

	if (!fp)
 8006384:	2800      	cmp	r0, #0
 8006386:	f000 8196 	beq.w	80066b6 <f_open+0x33a>
 800638a:	460e      	mov	r6, r1
 800638c:	4605      	mov	r5, r0
	if (*path)
 800638e:	2900      	cmp	r1, #0
 8006390:	f000 81ac 	beq.w	80066ec <f_open+0x370>
		for (tt = *path; (UINT) *tt >= (_USE_LFN ? ' ' : '!') && *tt != ':';
 8006394:	7808      	ldrb	r0, [r1, #0]
 8006396:	4617      	mov	r7, r2
 8006398:	281f      	cmp	r0, #31
 800639a:	d90b      	bls.n	80063b4 <f_open+0x38>
 800639c:	283a      	cmp	r0, #58	; 0x3a
 800639e:	f000 81a5 	beq.w	80066ec <f_open+0x370>
 80063a2:	460b      	mov	r3, r1
 80063a4:	e002      	b.n	80063ac <f_open+0x30>
 80063a6:	2a3a      	cmp	r2, #58	; 0x3a
 80063a8:	d015      	beq.n	80063d6 <f_open+0x5a>
 80063aa:	460b      	mov	r3, r1
 80063ac:	785a      	ldrb	r2, [r3, #1]
				tt++)
 80063ae:	1c59      	adds	r1, r3, #1
		for (tt = *path; (UINT) *tt >= (_USE_LFN ? ' ' : '!') && *tt != ':';
 80063b0:	2a1f      	cmp	r2, #31
 80063b2:	d8f8      	bhi.n	80063a6 <f_open+0x2a>
		vol = 0; /* Drive 0 */
 80063b4:	f04f 0800 	mov.w	r8, #0
	fs = FatFs[vol]; /* Get pointer to the file system object */
 80063b8:	4bd4      	ldr	r3, [pc, #848]	; (800670c <f_open+0x390>)
 80063ba:	f853 4028 	ldr.w	r4, [r3, r8, lsl #2]
	if (!fs)
 80063be:	b1cc      	cbz	r4, 80063f4 <f_open+0x78>
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 80063c0:	6960      	ldr	r0, [r4, #20]
 80063c2:	f001 ff85 	bl	80082d0 <ff_req_grant>
 80063c6:	b9e0      	cbnz	r0, 8006402 <f_open+0x86>
	ENTER_FF(fs); /* Lock the volume */
 80063c8:	260f      	movs	r6, #15

		FREE_NAMBUF();
	}

	if (res != FR_OK)
		fp->obj.fs = 0; /* Invalidate file object on error */
 80063ca:	6028      	str	r0, [r5, #0]

	LEAVE_FF(fs, res);
}
 80063cc:	4630      	mov	r0, r6
 80063ce:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 80063d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			i = *tp++ - '0';
 80063d6:	3601      	adds	r6, #1
			if (i < 10 && tp == tt)
 80063d8:	42b1      	cmp	r1, r6
			i = *tp++ - '0';
 80063da:	f1a0 0830 	sub.w	r8, r0, #48	; 0x30
			if (i < 10 && tp == tt)
 80063de:	f040 8185 	bne.w	80066ec <f_open+0x370>
				if (i < _VOLUMES)
 80063e2:	2830      	cmp	r0, #48	; 0x30
 80063e4:	f040 8182 	bne.w	80066ec <f_open+0x370>
					*path = ++tt;
 80063e8:	1c9e      	adds	r6, r3, #2
	fs = FatFs[vol]; /* Get pointer to the file system object */
 80063ea:	4bc8      	ldr	r3, [pc, #800]	; (800670c <f_open+0x390>)
 80063ec:	f853 4028 	ldr.w	r4, [r3, r8, lsl #2]
	if (!fs)
 80063f0:	2c00      	cmp	r4, #0
 80063f2:	d1e5      	bne.n	80063c0 <f_open+0x44>
		return FR_NOT_ENABLED; /* Is the file system object available? */
 80063f4:	260c      	movs	r6, #12
}
 80063f6:	4630      	mov	r0, r6
		fp->obj.fs = 0; /* Invalidate file object on error */
 80063f8:	602c      	str	r4, [r5, #0]
}
 80063fa:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 80063fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (fs->fs_type)
 8006402:	7823      	ldrb	r3, [r4, #0]
	mode &= (BYTE) ~FA_READ; /* Desired access mode, write access or not */
 8006404:	f007 093e 	and.w	r9, r7, #62	; 0x3e
	if (fs->fs_type)
 8006408:	b17b      	cbz	r3, 800642a <f_open+0xae>
		stat = disk_status(fs->drv);
 800640a:	7860      	ldrb	r0, [r4, #1]
 800640c:	f7fd f8fe 	bl	800360c <disk_status>
		if (!(stat & STA_NOINIT))
 8006410:	07c3      	lsls	r3, r0, #31
 8006412:	d40a      	bmi.n	800642a <f_open+0xae>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT))
 8006414:	f1b9 0f00 	cmp.w	r9, #0
 8006418:	f000 811e 	beq.w	8006658 <f_open+0x2dc>
 800641c:	0740      	lsls	r0, r0, #29
 800641e:	f140 811b 	bpl.w	8006658 <f_open+0x2dc>
		fp->obj.fs = 0; /* Invalidate file object on error */
 8006422:	2300      	movs	r3, #0
		return FR_WRITE_PROTECTED;
 8006424:	260a      	movs	r6, #10
		fp->obj.fs = 0; /* Invalidate file object on error */
 8006426:	602b      	str	r3, [r5, #0]
 8006428:	e158      	b.n	80066dc <f_open+0x360>
	fs->fs_type = 0; /* Clear the file system object */
 800642a:	f04f 0a00 	mov.w	sl, #0
	fs->drv = LD2PD(vol); /* Bind the logical drive and a physical drive */
 800642e:	fa5f f088 	uxtb.w	r0, r8
 8006432:	7060      	strb	r0, [r4, #1]
	fs->fs_type = 0; /* Clear the file system object */
 8006434:	f884 a000 	strb.w	sl, [r4]
	stat = disk_initialize(fs->drv); /* Initialize the physical drive */
 8006438:	f7fd f8f2 	bl	8003620 <disk_initialize>
	if (stat & STA_NOINIT)
 800643c:	07c1      	lsls	r1, r0, #31
 800643e:	f100 8183 	bmi.w	8006748 <f_open+0x3cc>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT))
 8006442:	f1b9 0f00 	cmp.w	r9, #0
 8006446:	d001      	beq.n	800644c <f_open+0xd0>
 8006448:	0741      	lsls	r1, r0, #29
 800644a:	d4ea      	bmi.n	8006422 <f_open+0xa6>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK)
 800644c:	f104 020c 	add.w	r2, r4, #12
 8006450:	2102      	movs	r1, #2
 8006452:	7860      	ldrb	r0, [r4, #1]
 8006454:	f7fd f910 	bl	8003678 <disk_ioctl>
 8006458:	2800      	cmp	r0, #0
 800645a:	f040 813c 	bne.w	80066d6 <f_open+0x35a>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1)))
 800645e:	89a3      	ldrh	r3, [r4, #12]
 8006460:	f5a3 7200 	sub.w	r2, r3, #512	; 0x200
 8006464:	f5b2 6f60 	cmp.w	r2, #3584	; 0xe00
 8006468:	f200 8135 	bhi.w	80066d6 <f_open+0x35a>
 800646c:	1e5a      	subs	r2, r3, #1
 800646e:	ea12 0103 	ands.w	r1, r2, r3
 8006472:	f040 8130 	bne.w	80066d6 <f_open+0x35a>
	fs->winsect = 0xFFFFFFFF; /* Invaidate window */
 8006476:	f04f 33ff 	mov.w	r3, #4294967295
	fs->wflag = 0;
 800647a:	70e1      	strb	r1, [r4, #3]
	fs->winsect = 0xFFFFFFFF; /* Invaidate window */
 800647c:	63a3      	str	r3, [r4, #56]	; 0x38
 800647e:	4620      	mov	r0, r4
 8006480:	f7fd f908 	bl	8003694 <move_window.part.6>
	if (move_window(fs, sect) != FR_OK)
 8006484:	2800      	cmp	r0, #0
 8006486:	f040 8126 	bne.w	80066d6 <f_open+0x35a>
	if (ld_word(fs->win + BS_55AA) != 0xAA55)
 800648a:	f64a 2255 	movw	r2, #43605	; 0xaa55
	rv = rv << 8 | ptr[0];
 800648e:	f894 123b 	ldrb.w	r1, [r4, #571]	; 0x23b
 8006492:	f894 323a 	ldrb.w	r3, [r4, #570]	; 0x23a
 8006496:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55)
 800649a:	4293      	cmp	r3, r2
 800649c:	f040 8325 	bne.w	8006aea <f_open+0x76e>
	if (fs->win[BS_JmpBoot] == 0xE9
 80064a0:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80064a4:	2be9      	cmp	r3, #233	; 0xe9
 80064a6:	d006      	beq.n	80064b6 <f_open+0x13a>
			|| (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90))
 80064a8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80064aa:	4a99      	ldr	r2, [pc, #612]	; (8006710 <f_open+0x394>)
 80064ac:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80064b0:	4293      	cmp	r3, r2
 80064b2:	f040 8293 	bne.w	80069dc <f_open+0x660>
	rv = rv << 8 | ptr[2];
 80064b6:	f8b4 1074 	ldrh.w	r1, [r4, #116]	; 0x74
	rv = rv << 8 | ptr[1];
 80064ba:	f894 2073 	ldrb.w	r2, [r4, #115]	; 0x73
	rv = rv << 8 | ptr[0];
 80064be:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
	rv = rv << 8 | ptr[1];
 80064c2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	rv = rv << 8 | ptr[0];
 80064c6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146)
 80064ca:	4a92      	ldr	r2, [pc, #584]	; (8006714 <f_open+0x398>)
 80064cc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d00d      	beq.n	80064f0 <f_open+0x174>
	rv = rv << 8 | ptr[2];
 80064d4:	f8b4 1090 	ldrh.w	r1, [r4, #144]	; 0x90
	rv = rv << 8 | ptr[1];
 80064d8:	f894 208f 	ldrb.w	r2, [r4, #143]	; 0x8f
	rv = rv << 8 | ptr[0];
 80064dc:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
	rv = rv << 8 | ptr[1];
 80064e0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146)
 80064e4:	498c      	ldr	r1, [pc, #560]	; (8006718 <f_open+0x39c>)
	rv = rv << 8 | ptr[0];
 80064e6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146)
 80064ea:	428b      	cmp	r3, r1
 80064ec:	f040 8276 	bne.w	80069dc <f_open+0x660>
	bsect = 0;
 80064f0:	f04f 0800 	mov.w	r8, #0
	rv = rv << 8 | ptr[0];
 80064f4:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 80064f8:	f894 c047 	ldrb.w	ip, [r4, #71]	; 0x47
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs))
 80064fc:	89a3      	ldrh	r3, [r4, #12]
	rv = rv << 8 | ptr[0];
 80064fe:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs))
 8006502:	4563      	cmp	r3, ip
 8006504:	f040 82f1 	bne.w	8006aea <f_open+0x76e>
	rv = rv << 8 | ptr[0];
 8006508:	f894 0053 	ldrb.w	r0, [r4, #83]	; 0x53
 800650c:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
		if (fasize == 0)
 8006510:	ea53 2300 	orrs.w	r3, r3, r0, lsl #8
 8006514:	f040 8325 	bne.w	8006b62 <f_open+0x7e6>
	rv = rv << 8 | ptr[2];
 8006518:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
	rv = rv << 8 | ptr[1];
 800651c:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
	rv = rv << 8 | ptr[0];
 8006520:	f894 0060 	ldrb.w	r0, [r4, #96]	; 0x60
	rv = rv << 8 | ptr[1];
 8006524:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 8006528:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
		fs->n_fats = fs->win[BPB_NumFATs]; /* Number of FATs */
 800652c:	f894 904c 	ldrb.w	r9, [r4, #76]	; 0x4c
		fs->fsize = fasize;
 8006530:	6260      	str	r0, [r4, #36]	; 0x24
		if (fs->n_fats != 1 && fs->n_fats != 2)
 8006532:	f109 33ff 	add.w	r3, r9, #4294967295
 8006536:	2b01      	cmp	r3, #1
		fs->n_fats = fs->win[BPB_NumFATs]; /* Number of FATs */
 8006538:	f884 9002 	strb.w	r9, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2)
 800653c:	f200 82d5 	bhi.w	8006aea <f_open+0x76e>
		fs->csize = fs->win[BPB_SecPerClus]; /* Cluster size */
 8006540:	f894 a049 	ldrb.w	sl, [r4, #73]	; 0x49
 8006544:	fa1f f38a 	uxth.w	r3, sl
 8006548:	8163      	strh	r3, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1)))
 800654a:	2b00      	cmp	r3, #0
 800654c:	f000 82cd 	beq.w	8006aea <f_open+0x76e>
 8006550:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006554:	ea13 0f0a 	tst.w	r3, sl
 8006558:	f040 82c7 	bne.w	8006aea <f_open+0x76e>
	rv = rv << 8 | ptr[0];
 800655c:	f894 204e 	ldrb.w	r2, [r4, #78]	; 0x4e
 8006560:	f894 e04d 	ldrb.w	lr, [r4, #77]	; 0x4d
		if (fs->n_rootdir % (SS(fs) / SZDIRE))
 8006564:	ea4f 135c 	mov.w	r3, ip, lsr #5
	rv = rv << 8 | ptr[0];
 8006568:	ea4e 2e02 	orr.w	lr, lr, r2, lsl #8
		if (fs->n_rootdir % (SS(fs) / SZDIRE))
 800656c:	fbbe f1f3 	udiv	r1, lr, r3
 8006570:	fb03 e311 	mls	r3, r3, r1, lr
 8006574:	b29b      	uxth	r3, r3
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt); /* Number of root directory entries */
 8006576:	f8a4 e008 	strh.w	lr, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE))
 800657a:	2b00      	cmp	r3, #0
 800657c:	f040 82b5 	bne.w	8006aea <f_open+0x76e>
	rv = rv << 8 | ptr[0];
 8006580:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 8006584:	f894 304f 	ldrb.w	r3, [r4, #79]	; 0x4f
		if (tsect == 0)
 8006588:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 800658c:	d109      	bne.n	80065a2 <f_open+0x226>
	rv = rv << 8 | ptr[2];
 800658e:	f8b4 b05e 	ldrh.w	fp, [r4, #94]	; 0x5e
	rv = rv << 8 | ptr[1];
 8006592:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
	rv = rv << 8 | ptr[0];
 8006596:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
	rv = rv << 8 | ptr[1];
 800659a:	ea43 230b 	orr.w	r3, r3, fp, lsl #8
	rv = rv << 8 | ptr[0];
 800659e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	rv = rv << 8 | ptr[0];
 80065a2:	f894 b04b 	ldrb.w	fp, [r4, #75]	; 0x4b
 80065a6:	f894 204a 	ldrb.w	r2, [r4, #74]	; 0x4a
		if (nrsv == 0)
 80065aa:	ea52 220b 	orrs.w	r2, r2, fp, lsl #8
 80065ae:	f000 829c 	beq.w	8006aea <f_open+0x76e>
		fasize *= fs->n_fats; /* Number of sectors for FAT area */
 80065b2:	fb00 f909 	mul.w	r9, r0, r9
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE); /* RSV + FAT + DIR */
 80065b6:	4411      	add	r1, r2
 80065b8:	4449      	add	r1, r9
		if (tsect < sysect)
 80065ba:	4299      	cmp	r1, r3
 80065bc:	f200 8295 	bhi.w	8006aea <f_open+0x76e>
		nclst = (tsect - sysect) / fs->csize; /* Number of clusters */
 80065c0:	1a5b      	subs	r3, r3, r1
 80065c2:	fbb3 f3fa 	udiv	r3, r3, sl
		if (nclst == 0)
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	f000 828f 	beq.w	8006aea <f_open+0x76e>
		if (nclst <= MAX_FAT16)
 80065cc:	f64f 7af5 	movw	sl, #65525	; 0xfff5
 80065d0:	4553      	cmp	r3, sl
 80065d2:	f200 83d0 	bhi.w	8006d76 <f_open+0x9fa>
		if (nclst <= MAX_FAT12)
 80065d6:	f640 7af5 	movw	sl, #4085	; 0xff5
 80065da:	4553      	cmp	r3, sl
 80065dc:	eb01 0b08 	add.w	fp, r1, r8
 80065e0:	4442      	add	r2, r8
 80065e2:	f103 0102 	add.w	r1, r3, #2
 80065e6:	f200 83aa 	bhi.w	8006d3e <f_open+0x9c2>
		fs->n_fatent = nclst + 2; /* Number of FAT entries */
 80065ea:	6221      	str	r1, [r4, #32]
		fs->fatbase = bsect + nrsv; /* FAT start sector */
 80065ec:	e9c4 820a 	strd	r8, r2, [r4, #40]	; 0x28
		fs->database = bsect + sysect; /* Data start sector */
 80065f0:	f8c4 b034 	str.w	fp, [r4, #52]	; 0x34
			if (fs->n_rootdir == 0)
 80065f4:	f1be 0f00 	cmp.w	lr, #0
 80065f8:	f000 8277 	beq.w	8006aea <f_open+0x76e>
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80065fc:	f001 0301 	and.w	r3, r1, #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))
 8006600:	f10c 3eff 	add.w	lr, ip, #4294967295
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006604:	eb01 0141 	add.w	r1, r1, r1, lsl #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))
 8006608:	4473      	add	r3, lr
 800660a:	eb03 0351 	add.w	r3, r3, r1, lsr #1
 800660e:	fbb3 fcfc 	udiv	ip, r3, ip
			fs->dirbase = fs->fatbase + fasize; /* Root directory start sector */
 8006612:	444a      	add	r2, r9
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))
 8006614:	4584      	cmp	ip, r0
			fs->dirbase = fs->fatbase + fasize; /* Root directory start sector */
 8006616:	6322      	str	r2, [r4, #48]	; 0x30
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))
 8006618:	f200 8267 	bhi.w	8006aea <f_open+0x76e>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF; /* Initialize cluster allocation information */
 800661c:	f04f 33ff 	mov.w	r3, #4294967295
		fs->fsi_flag = 0x80;
 8006620:	2280      	movs	r2, #128	; 0x80
		fs->last_clst = fs->free_clst = 0xFFFFFFFF; /* Initialize cluster allocation information */
 8006622:	e9c4 3306 	strd	r3, r3, [r4, #24]
		fs->fsi_flag = 0x80;
 8006626:	2301      	movs	r3, #1
 8006628:	7122      	strb	r2, [r4, #4]
	fs->id = ++Fsid; /* File system mount ID */
 800662a:	493c      	ldr	r1, [pc, #240]	; (800671c <f_open+0x3a0>)
		if (Files[i].fs == fs)
 800662c:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8006720 <f_open+0x3a4>
	fs->id = ++Fsid; /* File system mount ID */
 8006630:	880a      	ldrh	r2, [r1, #0]
	fs->fs_type = fmt; /* FAT sub-type */
 8006632:	7023      	strb	r3, [r4, #0]
	fs->id = ++Fsid; /* File system mount ID */
 8006634:	1c53      	adds	r3, r2, #1
		if (Files[i].fs == fs)
 8006636:	f8d8 2000 	ldr.w	r2, [r8]
	fs->id = ++Fsid; /* File system mount ID */
 800663a:	b29b      	uxth	r3, r3
		if (Files[i].fs == fs)
 800663c:	42a2      	cmp	r2, r4
	fs->id = ++Fsid; /* File system mount ID */
 800663e:	800b      	strh	r3, [r1, #0]
 8006640:	80e3      	strh	r3, [r4, #6]
			Files[i].fs = 0;
 8006642:	bf04      	itt	eq
 8006644:	2300      	moveq	r3, #0
 8006646:	f8c8 3000 	streq.w	r3, [r8]
		if (Files[i].fs == fs)
 800664a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800664e:	42a3      	cmp	r3, r4
 8006650:	d102      	bne.n	8006658 <f_open+0x2dc>
			Files[i].fs = 0;
 8006652:	2300      	movs	r3, #0
 8006654:	f8c8 3010 	str.w	r3, [r8, #16]
		INIT_NAMBUF(fs);
 8006658:	ab0e      	add	r3, sp, #56	; 0x38
		res = follow_path(&dj, path); /* Follow the file path */
 800665a:	4631      	mov	r1, r6
		INIT_NAMBUF(fs);
 800665c:	6123      	str	r3, [r4, #16]
		res = follow_path(&dj, path); /* Follow the file path */
 800665e:	a801      	add	r0, sp, #4
		dj.obj.fs = fs;
 8006660:	9401      	str	r4, [sp, #4]
		res = follow_path(&dj, path); /* Follow the file path */
 8006662:	f7fe fc59 	bl	8004f18 <follow_path>
	mode &= _FS_READONLY ?
 8006666:	f007 093f 	and.w	r9, r7, #63	; 0x3f
		if (res == FR_OK)
 800666a:	4606      	mov	r6, r0
 800666c:	f007 031c 	and.w	r3, r7, #28
 8006670:	2800      	cmp	r0, #0
 8006672:	d143      	bne.n	80066fc <f_open+0x380>
			if (dj.fn[NSFLAG] & NS_NONAME)
 8006674:	f99d 2033 	ldrsb.w	r2, [sp, #51]	; 0x33
 8006678:	2a00      	cmp	r2, #0
 800667a:	f2c0 811d 	blt.w	80068b8 <f_open+0x53c>
		if (Files[i].fs)
 800667e:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8006720 <f_open+0x3a4>
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006682:	f029 0001 	bic.w	r0, r9, #1
		if (Files[i].fs)
 8006686:	f8d8 2000 	ldr.w	r2, [r8]
			if (Files[i].fs == dp->obj.fs && /* Check if the object matched with an open object */
 800668a:	9901      	ldr	r1, [sp, #4]
			Files[i].clu == dp->obj.sclust && Files[i].ofs == dp->dptr)
 800668c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8006690:	f8dd e018 	ldr.w	lr, [sp, #24]
		if (Files[i].fs)
 8006694:	2a00      	cmp	r2, #0
 8006696:	f000 812a 	beq.w	80068ee <f_open+0x572>
			if (Files[i].fs == dp->obj.fs && /* Check if the object matched with an open object */
 800669a:	428a      	cmp	r2, r1
 800669c:	d058      	beq.n	8006750 <f_open+0x3d4>
		if (Files[i].fs)
 800669e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80066a2:	2a00      	cmp	r2, #0
 80066a4:	d06a      	beq.n	800677c <f_open+0x400>
			if (Files[i].fs == dp->obj.fs && /* Check if the object matched with an open object */
 80066a6:	4291      	cmp	r1, r2
 80066a8:	d074      	beq.n	8006794 <f_open+0x418>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW))
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d148      	bne.n	8006740 <f_open+0x3c4>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES; /* Is there a blank entry for new object? */
 80066ae:	2612      	movs	r6, #18
		fp->obj.fs = 0; /* Invalidate file object on error */
 80066b0:	2300      	movs	r3, #0
 80066b2:	602b      	str	r3, [r5, #0]
 80066b4:	e012      	b.n	80066dc <f_open+0x360>
		return FR_INVALID_OBJECT;
 80066b6:	2609      	movs	r6, #9
}
 80066b8:	4630      	mov	r0, r6
 80066ba:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 80066be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						fp->sect = sc + (DWORD) (ofs / SS(fs));
 80066c2:	441a      	add	r2, r3
 80066c4:	622a      	str	r2, [r5, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK)
 80066c6:	4651      	mov	r1, sl
 80066c8:	7860      	ldrb	r0, [r4, #1]
 80066ca:	2301      	movs	r3, #1
 80066cc:	f7fc ffb8 	bl	8003640 <disk_read>
 80066d0:	2800      	cmp	r0, #0
 80066d2:	f000 80ef 	beq.w	80068b4 <f_open+0x538>
		fp->obj.fs = 0; /* Invalidate file object on error */
 80066d6:	2300      	movs	r3, #0
 80066d8:	2601      	movs	r6, #1
 80066da:	602b      	str	r3, [r5, #0]
		ff_rel_grant(fs->sobj);
 80066dc:	6960      	ldr	r0, [r4, #20]
 80066de:	f001 fe01 	bl	80082e4 <ff_rel_grant>
}
 80066e2:	4630      	mov	r0, r6
 80066e4:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 80066e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		fp->obj.fs = 0; /* Invalidate file object on error */
 80066ec:	260b      	movs	r6, #11
 80066ee:	2300      	movs	r3, #0
}
 80066f0:	4630      	mov	r0, r6
		fp->obj.fs = 0; /* Invalidate file object on error */
 80066f2:	602b      	str	r3, [r5, #0]
}
 80066f4:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 80066f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW))
 80066fc:	b993      	cbnz	r3, 8006724 <f_open+0x3a8>
		fp->obj.fs = 0; /* Invalidate file object on error */
 80066fe:	2300      	movs	r3, #0
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE
 8006700:	2e0c      	cmp	r6, #12
		fp->obj.fs = 0; /* Invalidate file object on error */
 8006702:	602b      	str	r3, [r5, #0]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE
 8006704:	f040 80cf 	bne.w	80068a6 <f_open+0x52a>
 8006708:	e660      	b.n	80063cc <f_open+0x50>
 800670a:	bf00      	nop
 800670c:	20000288 	.word	0x20000288
 8006710:	009000eb 	.word	0x009000eb
 8006714:	00544146 	.word	0x00544146
 8006718:	33544146 	.word	0x33544146
 800671c:	200002ac 	.word	0x200002ac
 8006720:	2000028c 	.word	0x2000028c
				if (res == FR_NO_FILE)
 8006724:	2804      	cmp	r0, #4
 8006726:	d1ea      	bne.n	80066fe <f_open+0x382>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++)
 8006728:	f8df 86cc 	ldr.w	r8, [pc, #1740]	; 8006df8 <f_open+0xa7c>
 800672c:	f8d8 3000 	ldr.w	r3, [r8]
 8006730:	2b00      	cmp	r3, #0
 8006732:	f000 8107 	beq.w	8006944 <f_open+0x5c8>
 8006736:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800673a:	2b00      	cmp	r3, #0
 800673c:	f000 8102 	beq.w	8006944 <f_open+0x5c8>
		fp->obj.fs = 0; /* Invalidate file object on error */
 8006740:	2300      	movs	r3, #0
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES; /* Is there a blank entry for new object? */
 8006742:	2612      	movs	r6, #18
		fp->obj.fs = 0; /* Invalidate file object on error */
 8006744:	602b      	str	r3, [r5, #0]
 8006746:	e7c9      	b.n	80066dc <f_open+0x360>
 8006748:	f8c5 a000 	str.w	sl, [r5]
		return FR_NOT_READY; /* Failed to initialize due to no medium or hard error */
 800674c:	2603      	movs	r6, #3
 800674e:	e7c5      	b.n	80066dc <f_open+0x360>
			if (Files[i].fs == dp->obj.fs && /* Check if the object matched with an open object */
 8006750:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8006754:	4562      	cmp	r2, ip
 8006756:	f000 81e9 	beq.w	8006b2c <f_open+0x7b0>
		if (Files[i].fs)
 800675a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800675e:	b16a      	cbz	r2, 800677c <f_open+0x400>
			if (Files[i].fs == dp->obj.fs && /* Check if the object matched with an open object */
 8006760:	428a      	cmp	r2, r1
 8006762:	d1a2      	bne.n	80066aa <f_open+0x32e>
 8006764:	f8d8 2014 	ldr.w	r2, [r8, #20]
 8006768:	4594      	cmp	ip, r2
 800676a:	d19e      	bne.n	80066aa <f_open+0x32e>
 800676c:	2600      	movs	r6, #0
			Files[i].clu == dp->obj.sclust && Files[i].ofs == dp->dptr)
 800676e:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8006772:	4572      	cmp	r2, lr
 8006774:	f000 82e1 	beq.w	8006d3a <f_open+0x9be>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES; /* Is there a blank entry for new object? */
 8006778:	2e00      	cmp	r6, #0
 800677a:	d096      	beq.n	80066aa <f_open+0x32e>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW))
 800677c:	b17b      	cbz	r3, 800679e <f_open+0x422>
				if (dj.obj.attr & (AM_RDO | AM_DIR))
 800677e:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8006782:	f013 0311 	ands.w	r3, r3, #17
 8006786:	d113      	bne.n	80067b0 <f_open+0x434>
					if (mode & FA_CREATE_NEW)
 8006788:	077a      	lsls	r2, r7, #29
 800678a:	f140 80ac 	bpl.w	80068e6 <f_open+0x56a>
		fp->obj.fs = 0; /* Invalidate file object on error */
 800678e:	602b      	str	r3, [r5, #0]
						res = FR_EXIST; /* Cannot create as new file */
 8006790:	2608      	movs	r6, #8
 8006792:	e7a3      	b.n	80066dc <f_open+0x360>
			if (Files[i].fs == dp->obj.fs && /* Check if the object matched with an open object */
 8006794:	f8d8 2014 	ldr.w	r2, [r8, #20]
 8006798:	4594      	cmp	ip, r2
 800679a:	d0e8      	beq.n	800676e <f_open+0x3f2>
 800679c:	e785      	b.n	80066aa <f_open+0x32e>
				if (dj.obj.attr & AM_DIR)
 800679e:	f89d 300a 	ldrb.w	r3, [sp, #10]
 80067a2:	06da      	lsls	r2, r3, #27
 80067a4:	f100 80b2 	bmi.w	800690c <f_open+0x590>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO))
 80067a8:	07ba      	lsls	r2, r7, #30
 80067aa:	d505      	bpl.n	80067b8 <f_open+0x43c>
 80067ac:	07db      	lsls	r3, r3, #31
 80067ae:	d503      	bpl.n	80067b8 <f_open+0x43c>
		fp->obj.fs = 0; /* Invalidate file object on error */
 80067b0:	2300      	movs	r3, #0
					res = FR_DENIED;
 80067b2:	2607      	movs	r6, #7
		fp->obj.fs = 0; /* Invalidate file object on error */
 80067b4:	602b      	str	r3, [r5, #0]
 80067b6:	e791      	b.n	80066dc <f_open+0x360>
			if (mode & FA_CREATE_ALWAYS) /* Set file change flag if created or overwritten */
 80067b8:	073e      	lsls	r6, r7, #28
 80067ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80067bc:	d503      	bpl.n	80067c6 <f_open+0x44a>
				mode |= FA_MODIFIED;
 80067be:	f049 0940 	orr.w	r9, r9, #64	; 0x40
 80067c2:	f029 0001 	bic.w	r0, r9, #1
		if (Files[i].fs == dp->obj.fs && Files[i].clu == dp->obj.sclust
 80067c6:	f8d8 6000 	ldr.w	r6, [r8]
			fp->dir_ptr = dj.dir;
 80067ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
		if (Files[i].fs == dp->obj.fs && Files[i].clu == dp->obj.sclust
 80067cc:	428e      	cmp	r6, r1
			fp->dir_sect = fs->winsect; /* Pointer to the directory entry */
 80067ce:	e9c5 3209 	strd	r3, r2, [r5, #36]	; 0x24
		if (Files[i].fs == dp->obj.fs && Files[i].clu == dp->obj.sclust
 80067d2:	d07c      	beq.n	80068ce <f_open+0x552>
 80067d4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80067d8:	428f      	cmp	r7, r1
 80067da:	d00a      	beq.n	80067f2 <f_open+0x476>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++)
 80067dc:	2e00      	cmp	r6, #0
 80067de:	f000 8188 	beq.w	8006af2 <f_open+0x776>
 80067e2:	2f00      	cmp	r7, #0
 80067e4:	f000 81ba 	beq.w	8006b5c <f_open+0x7e0>
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80067e8:	2300      	movs	r3, #0
		fp->obj.fs = 0; /* Invalidate file object on error */
 80067ea:	2602      	movs	r6, #2
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80067ec:	612b      	str	r3, [r5, #16]
		fp->obj.fs = 0; /* Invalidate file object on error */
 80067ee:	602b      	str	r3, [r5, #0]
 80067f0:	e774      	b.n	80066dc <f_open+0x360>
		if (Files[i].fs == dp->obj.fs && Files[i].clu == dp->obj.sclust
 80067f2:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80067f6:	4563      	cmp	r3, ip
 80067f8:	d1f0      	bne.n	80067dc <f_open+0x460>
				&& Files[i].ofs == dp->dptr)
 80067fa:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80067fe:	4573      	cmp	r3, lr
 8006800:	d1ec      	bne.n	80067dc <f_open+0x460>
	for (i = 0; i < _FS_LOCK; i++)
 8006802:	2601      	movs	r6, #1
 8006804:	0133      	lsls	r3, r6, #4
 8006806:	eb08 0103 	add.w	r1, r8, r3
 800680a:	8989      	ldrh	r1, [r1, #12]
	if (acc && Files[i].ctr)
 800680c:	2800      	cmp	r0, #0
 800680e:	d156      	bne.n	80068be <f_open+0x542>
 8006810:	3101      	adds	r1, #1
 8006812:	b289      	uxth	r1, r1
 8006814:	1c77      	adds	r7, r6, #1
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006816:	612f      	str	r7, [r5, #16]
	if (fs->fs_type == FS_FAT32)
 8006818:	7820      	ldrb	r0, [r4, #0]
	rv = rv << 8 | ptr[0];
 800681a:	7ed6      	ldrb	r6, [r2, #27]
 800681c:	7e97      	ldrb	r7, [r2, #26]
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1; /* Set semaphore value */
 800681e:	4443      	add	r3, r8
	if (fs->fs_type == FS_FAT32)
 8006820:	2803      	cmp	r0, #3
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1; /* Set semaphore value */
 8006822:	8199      	strh	r1, [r3, #12]
	cl = ld_word(dir + DIR_FstClusLO);
 8006824:	ea47 2706 	orr.w	r7, r7, r6, lsl #8
	if (fs->fs_type == FS_FAT32)
 8006828:	d105      	bne.n	8006836 <f_open+0x4ba>
	rv = rv << 8 | ptr[0];
 800682a:	7d51      	ldrb	r1, [r2, #21]
 800682c:	7d13      	ldrb	r3, [r2, #20]
		cl |= (DWORD) ld_word(dir + DIR_FstClusHI) << 16;
 800682e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006832:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
			fp->cltbl = 0; /* Disable fast seek mode */
 8006836:	2100      	movs	r1, #0
				fp->obj.sclust = ld_clust(fs, dj.dir); /* Get object allocation info */
 8006838:	60af      	str	r7, [r5, #8]
	rv = rv << 8 | ptr[2];
 800683a:	8bd0      	ldrh	r0, [r2, #30]
	rv = rv << 8 | ptr[1];
 800683c:	7f53      	ldrb	r3, [r2, #29]
	rv = rv << 8 | ptr[0];
 800683e:	7f16      	ldrb	r6, [r2, #28]
	rv = rv << 8 | ptr[1];
 8006840:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
			fp->obj.id = fs->id;
 8006844:	88e2      	ldrh	r2, [r4, #6]
	rv = rv << 8 | ptr[0];
 8006846:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
			mem_set(fp->buf, 0, _MAX_SS); /* Clear sector buffer */
 800684a:	f105 0a30 	add.w	sl, r5, #48	; 0x30
			fp->obj.id = fs->id;
 800684e:	80aa      	strh	r2, [r5, #4]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8006850:	60ee      	str	r6, [r5, #12]
			fp->obj.fs = fs; /* Validate the file object */
 8006852:	602c      	str	r4, [r5, #0]
			fp->cltbl = 0; /* Disable fast seek mode */
 8006854:	62e9      	str	r1, [r5, #44]	; 0x2c
			fp->err = 0; /* Clear error flag */
 8006856:	7569      	strb	r1, [r5, #21]
			fp->sect = 0; /* Invalidate current data sector */
 8006858:	6229      	str	r1, [r5, #32]
			fp->fptr = 0; /* Set file pointer top of the file */
 800685a:	61a9      	str	r1, [r5, #24]
			fp->flag = mode; /* Set file access mode */
 800685c:	f885 9014 	strb.w	r9, [r5, #20]
 8006860:	4650      	mov	r0, sl
 8006862:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006866:	f003 fcbe 	bl	800a1e6 <memset>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0)
 800686a:	f019 0f20 	tst.w	r9, #32
 800686e:	d021      	beq.n	80068b4 <f_open+0x538>
 8006870:	b306      	cbz	r6, 80068b4 <f_open+0x538>
				bcs = (DWORD) fs->csize * SS(fs); /* Cluster size in byte */
 8006872:	89a3      	ldrh	r3, [r4, #12]
 8006874:	f8b4 800a 	ldrh.w	r8, [r4, #10]
				fp->fptr = fp->obj.objsize; /* Offset to seek */
 8006878:	61ae      	str	r6, [r5, #24]
				bcs = (DWORD) fs->csize * SS(fs); /* Cluster size in byte */
 800687a:	fb03 f808 	mul.w	r8, r3, r8
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -=
 800687e:	45b0      	cmp	r8, r6
 8006880:	d304      	bcc.n	800688c <f_open+0x510>
 8006882:	e048      	b.n	8006916 <f_open+0x59a>
					if (clst == 0xFFFFFFFF)
 8006884:	3001      	adds	r0, #1
 8006886:	d020      	beq.n	80068ca <f_open+0x54e>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -=
 8006888:	45b0      	cmp	r8, r6
 800688a:	d243      	bcs.n	8006914 <f_open+0x598>
					clst = get_fat(&fp->obj, clst);
 800688c:	4639      	mov	r1, r7
 800688e:	6828      	ldr	r0, [r5, #0]
 8006890:	f7fd fd98 	bl	80043c4 <get_fat.isra.9>
					if (clst <= 1)
 8006894:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
 8006896:	4607      	mov	r7, r0
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -=
 8006898:	eba6 0608 	sub.w	r6, r6, r8
					if (clst <= 1)
 800689c:	d8f2      	bhi.n	8006884 <f_open+0x508>
						res = FR_INT_ERR;
 800689e:	2602      	movs	r6, #2
		fp->obj.fs = 0; /* Invalidate file object on error */
 80068a0:	2300      	movs	r3, #0
				fp->clust = clst;
 80068a2:	61ef      	str	r7, [r5, #28]
		fp->obj.fs = 0; /* Invalidate file object on error */
 80068a4:	602b      	str	r3, [r5, #0]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE
 80068a6:	2e0b      	cmp	r6, #11
 80068a8:	f43f ad90 	beq.w	80063cc <f_open+0x50>
			&& res != FR_TIMEOUT)
 80068ac:	2e0f      	cmp	r6, #15
 80068ae:	f43f ad8d 	beq.w	80063cc <f_open+0x50>
 80068b2:	e713      	b.n	80066dc <f_open+0x360>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1; /* Set semaphore value */
 80068b4:	2600      	movs	r6, #0
 80068b6:	e711      	b.n	80066dc <f_open+0x360>
		fp->obj.fs = 0; /* Invalidate file object on error */
 80068b8:	6028      	str	r0, [r5, #0]
				res = FR_INVALID_NAME;
 80068ba:	2606      	movs	r6, #6
 80068bc:	e70e      	b.n	80066dc <f_open+0x360>
	if (acc && Files[i].ctr)
 80068be:	2900      	cmp	r1, #0
 80068c0:	d192      	bne.n	80067e8 <f_open+0x46c>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1; /* Set semaphore value */
 80068c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80068c6:	1c77      	adds	r7, r6, #1
 80068c8:	e7a5      	b.n	8006816 <f_open+0x49a>
					if (clst == 0xFFFFFFFF)
 80068ca:	2601      	movs	r6, #1
 80068cc:	e7e8      	b.n	80068a0 <f_open+0x524>
		if (Files[i].fs == dp->obj.fs && Files[i].clu == dp->obj.sclust
 80068ce:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80068d2:	4563      	cmp	r3, ip
 80068d4:	f47f af7e 	bne.w	80067d4 <f_open+0x458>
				&& Files[i].ofs == dp->dptr)
 80068d8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80068dc:	4573      	cmp	r3, lr
 80068de:	f47f af79 	bne.w	80067d4 <f_open+0x458>
	for (i = 0; i < _FS_LOCK; i++)
 80068e2:	2600      	movs	r6, #0
 80068e4:	e78e      	b.n	8006804 <f_open+0x488>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS))
 80068e6:	073e      	lsls	r6, r7, #28
 80068e8:	d435      	bmi.n	8006956 <f_open+0x5da>
 80068ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80068ec:	e76b      	b.n	80067c6 <f_open+0x44a>
		if (Files[i].fs)
 80068ee:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80068f2:	2a00      	cmp	r2, #0
 80068f4:	f43f af42 	beq.w	800677c <f_open+0x400>
			if (Files[i].fs == dp->obj.fs && /* Check if the object matched with an open object */
 80068f8:	4291      	cmp	r1, r2
 80068fa:	f47f af3f 	bne.w	800677c <f_open+0x400>
 80068fe:	f8d8 2014 	ldr.w	r2, [r8, #20]
 8006902:	4594      	cmp	ip, r2
 8006904:	f47f af3a 	bne.w	800677c <f_open+0x400>
			be = 1;
 8006908:	2601      	movs	r6, #1
 800690a:	e730      	b.n	800676e <f_open+0x3f2>
		fp->obj.fs = 0; /* Invalidate file object on error */
 800690c:	2300      	movs	r3, #0
 800690e:	2604      	movs	r6, #4
 8006910:	602b      	str	r3, [r5, #0]
 8006912:	e6e3      	b.n	80066dc <f_open+0x360>
 8006914:	89a3      	ldrh	r3, [r4, #12]
				if (res == FR_OK && ofs % SS(fs))
 8006916:	fbb6 f2f3 	udiv	r2, r6, r3
 800691a:	fb03 6312 	mls	r3, r3, r2, r6
				fp->clust = clst;
 800691e:	61ef      	str	r7, [r5, #28]
				if (res == FR_OK && ofs % SS(fs))
 8006920:	2b00      	cmp	r3, #0
 8006922:	d0c7      	beq.n	80068b4 <f_open+0x538>
	if (clst >= fs->n_fatent - 2)
 8006924:	6a23      	ldr	r3, [r4, #32]
	clst -= 2;
 8006926:	3f02      	subs	r7, #2
	if (clst >= fs->n_fatent - 2)
 8006928:	3b02      	subs	r3, #2
 800692a:	429f      	cmp	r7, r3
 800692c:	d206      	bcs.n	800693c <f_open+0x5c0>
	return clst * fs->csize + fs->database;
 800692e:	8963      	ldrh	r3, [r4, #10]
 8006930:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006932:	fb07 1303 	mla	r3, r7, r3, r1
					if ((sc = clust2sect(fs, clst)) == 0)
 8006936:	2b00      	cmp	r3, #0
 8006938:	f47f aec3 	bne.w	80066c2 <f_open+0x346>
		fp->obj.fs = 0; /* Invalidate file object on error */
 800693c:	2300      	movs	r3, #0
 800693e:	2602      	movs	r6, #2
 8006940:	602b      	str	r3, [r5, #0]
 8006942:	e6cb      	b.n	80066dc <f_open+0x360>
							dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006944:	a801      	add	r0, sp, #4
 8006946:	f7fe fc57 	bl	80051f8 <dir_register>
				mode |= FA_CREATE_ALWAYS; /* File is created */
 800694a:	f049 0908 	orr.w	r9, r9, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS))
 800694e:	4606      	mov	r6, r0
 8006950:	2800      	cmp	r0, #0
 8006952:	f47f aed4 	bne.w	80066fe <f_open+0x382>
				dw = GET_FATTIME();
 8006956:	f7fc fddb 	bl	8003510 <get_fattime>
					dj.dir[DIR_Attr] = AM_ARC; /* Reset attribute */
 800695a:	2720      	movs	r7, #32
					st_dword(dj.dir + DIR_CrtTime, dw); /* Set created time */
 800695c:	9b09      	ldr	r3, [sp, #36]	; 0x24
	*ptr++ = (BYTE) val;
 800695e:	f3c0 2107 	ubfx	r1, r0, #8, #8
	*ptr++ = (BYTE) val;
 8006962:	f3c0 4207 	ubfx	r2, r0, #16, #8
	*ptr++ = (BYTE) val;
 8006966:	b2c6      	uxtb	r6, r0
	*ptr++ = (BYTE) val;
 8006968:	0e00      	lsrs	r0, r0, #24
	*ptr++ = (BYTE) val;
 800696a:	73d9      	strb	r1, [r3, #15]
	*ptr++ = (BYTE) val;
 800696c:	739e      	strb	r6, [r3, #14]
	*ptr++ = (BYTE) val;
 800696e:	741a      	strb	r2, [r3, #16]
	*ptr++ = (BYTE) val;
 8006970:	7458      	strb	r0, [r3, #17]
					st_dword(dj.dir + DIR_ModTime, dw); /* Set modified time */
 8006972:	9b09      	ldr	r3, [sp, #36]	; 0x24
	*ptr++ = (BYTE) val;
 8006974:	75d9      	strb	r1, [r3, #23]
	*ptr++ = (BYTE) val;
 8006976:	759e      	strb	r6, [r3, #22]
	*ptr++ = (BYTE) val;
 8006978:	761a      	strb	r2, [r3, #24]
	*ptr++ = (BYTE) val;
 800697a:	7658      	strb	r0, [r3, #25]
					dj.dir[DIR_Attr] = AM_ARC; /* Reset attribute */
 800697c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800697e:	72df      	strb	r7, [r3, #11]
					cl = ld_clust(fs, dj.dir); /* Get cluster chain */
 8006980:	9b09      	ldr	r3, [sp, #36]	; 0x24
	if (fs->fs_type == FS_FAT32)
 8006982:	7822      	ldrb	r2, [r4, #0]
	rv = rv << 8 | ptr[0];
 8006984:	7ed9      	ldrb	r1, [r3, #27]
 8006986:	7e9f      	ldrb	r7, [r3, #26]
	if (fs->fs_type == FS_FAT32)
 8006988:	2a03      	cmp	r2, #3
	cl = ld_word(dir + DIR_FstClusLO);
 800698a:	ea47 2701 	orr.w	r7, r7, r1, lsl #8
	if (fs->fs_type == FS_FAT32)
 800698e:	f000 80de 	beq.w	8006b4e <f_open+0x7d2>
	*ptr++ = (BYTE) val;
 8006992:	2200      	movs	r2, #0
 8006994:	769a      	strb	r2, [r3, #26]
	*ptr++ = (BYTE) val;
 8006996:	76da      	strb	r2, [r3, #27]
	if (fs->fs_type == FS_FAT32)
 8006998:	7821      	ldrb	r1, [r4, #0]
 800699a:	2903      	cmp	r1, #3
 800699c:	f000 80d4 	beq.w	8006b48 <f_open+0x7cc>
	*ptr++ = (BYTE) val;
 80069a0:	2200      	movs	r2, #0
					fs->wflag = 1;
 80069a2:	2301      	movs	r3, #1
					st_dword(dj.dir + DIR_FileSize, 0);
 80069a4:	9909      	ldr	r1, [sp, #36]	; 0x24
	*ptr++ = (BYTE) val;
 80069a6:	61ca      	str	r2, [r1, #28]
					fs->wflag = 1;
 80069a8:	70e3      	strb	r3, [r4, #3]
					if (cl)
 80069aa:	2f00      	cmp	r7, #0
 80069ac:	f000 80bc 	beq.w	8006b28 <f_open+0x7ac>
						res = remove_chain(&dj.obj, cl, 0);
 80069b0:	4639      	mov	r1, r7
 80069b2:	a801      	add	r0, sp, #4
						dw = fs->winsect;
 80069b4:	f8d4 a038 	ldr.w	sl, [r4, #56]	; 0x38
						res = remove_chain(&dj.obj, cl, 0);
 80069b8:	f7fd fa3c 	bl	8003e34 <remove_chain>
						if (res == FR_OK)
 80069bc:	4606      	mov	r6, r0
 80069be:	2800      	cmp	r0, #0
 80069c0:	f47f ae9d 	bne.w	80066fe <f_open+0x382>
	if (sector != fs->winsect)
 80069c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80069c6:	3f01      	subs	r7, #1
 80069c8:	459a      	cmp	sl, r3
 80069ca:	f040 80a4 	bne.w	8006b16 <f_open+0x79a>
							fs->last_clst = cl - 1; /* Reuse the cluster hole */
 80069ce:	61a7      	str	r7, [r4, #24]
 80069d0:	9901      	ldr	r1, [sp, #4]
 80069d2:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80069d6:	f8dd e018 	ldr.w	lr, [sp, #24]
 80069da:	e6f0      	b.n	80067be <f_open+0x442>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80069dc:	f894 31fe 	ldrb.w	r3, [r4, #510]	; 0x1fe
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	f000 8191 	beq.w	8006d08 <f_open+0x98c>
	rv = rv << 8 | ptr[2];
 80069e6:	f8b4 2204 	ldrh.w	r2, [r4, #516]	; 0x204
	rv = rv << 8 | ptr[1];
 80069ea:	f894 3203 	ldrb.w	r3, [r4, #515]	; 0x203
	rv = rv << 8 | ptr[0];
 80069ee:	f894 8202 	ldrb.w	r8, [r4, #514]	; 0x202
	rv = rv << 8 | ptr[1];
 80069f2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 80069f6:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80069fa:	f894 320e 	ldrb.w	r3, [r4, #526]	; 0x20e
 80069fe:	b14b      	cbz	r3, 8006a14 <f_open+0x698>
	rv = rv << 8 | ptr[2];
 8006a00:	f8b4 1214 	ldrh.w	r1, [r4, #532]	; 0x214
	rv = rv << 8 | ptr[1];
 8006a04:	f894 2213 	ldrb.w	r2, [r4, #531]	; 0x213
	rv = rv << 8 | ptr[0];
 8006a08:	f894 3212 	ldrb.w	r3, [r4, #530]	; 0x212
	rv = rv << 8 | ptr[1];
 8006a0c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	rv = rv << 8 | ptr[0];
 8006a10:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006a14:	930f      	str	r3, [sp, #60]	; 0x3c
 8006a16:	f894 321e 	ldrb.w	r3, [r4, #542]	; 0x21e
 8006a1a:	b14b      	cbz	r3, 8006a30 <f_open+0x6b4>
	rv = rv << 8 | ptr[2];
 8006a1c:	f8b4 1224 	ldrh.w	r1, [r4, #548]	; 0x224
	rv = rv << 8 | ptr[1];
 8006a20:	f894 2223 	ldrb.w	r2, [r4, #547]	; 0x223
	rv = rv << 8 | ptr[0];
 8006a24:	f894 3222 	ldrb.w	r3, [r4, #546]	; 0x222
	rv = rv << 8 | ptr[1];
 8006a28:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	rv = rv << 8 | ptr[0];
 8006a2c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006a30:	9310      	str	r3, [sp, #64]	; 0x40
 8006a32:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
 8006a36:	b14b      	cbz	r3, 8006a4c <f_open+0x6d0>
	rv = rv << 8 | ptr[2];
 8006a38:	f8b4 1234 	ldrh.w	r1, [r4, #564]	; 0x234
	rv = rv << 8 | ptr[1];
 8006a3c:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
	rv = rv << 8 | ptr[0];
 8006a40:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
	rv = rv << 8 | ptr[1];
 8006a44:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	rv = rv << 8 | ptr[0];
 8006a48:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006a4c:	9311      	str	r3, [sp, #68]	; 0x44
			fmt = bsect ? check_fs(fs, bsect) : 3; /* Check the partition */
 8006a4e:	f1b8 0f00 	cmp.w	r8, #0
 8006a52:	f040 810e 	bne.w	8006c72 <f_open+0x8f6>
			bsect = br[i];
 8006a56:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
			fmt = bsect ? check_fs(fs, bsect) : 3; /* Check the partition */
 8006a5a:	f1b8 0f00 	cmp.w	r8, #0
 8006a5e:	f040 80c5 	bne.w	8006bec <f_open+0x870>
			bsect = br[i];
 8006a62:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
			fmt = bsect ? check_fs(fs, bsect) : 3; /* Check the partition */
 8006a66:	f1b8 0f00 	cmp.w	r8, #0
 8006a6a:	d17c      	bne.n	8006b66 <f_open+0x7ea>
			bsect = br[i];
 8006a6c:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
			fmt = bsect ? check_fs(fs, bsect) : 3; /* Check the partition */
 8006a70:	f1b8 0f00 	cmp.w	r8, #0
 8006a74:	d039      	beq.n	8006aea <f_open+0x76e>
	fs->winsect = 0xFFFFFFFF; /* Invaidate window */
 8006a76:	f04f 33ff 	mov.w	r3, #4294967295
	fs->wflag = 0;
 8006a7a:	2200      	movs	r2, #0
	if (sector != fs->winsect)
 8006a7c:	4598      	cmp	r8, r3
	fs->wflag = 0;
 8006a7e:	70e2      	strb	r2, [r4, #3]
	fs->winsect = 0xFFFFFFFF; /* Invaidate window */
 8006a80:	63a3      	str	r3, [r4, #56]	; 0x38
	if (sector != fs->winsect)
 8006a82:	f040 8139 	bne.w	8006cf8 <f_open+0x97c>
	if (ld_word(fs->win + BS_55AA) != 0xAA55)
 8006a86:	f64a 2255 	movw	r2, #43605	; 0xaa55
	rv = rv << 8 | ptr[0];
 8006a8a:	f894 123b 	ldrb.w	r1, [r4, #571]	; 0x23b
 8006a8e:	f894 323a 	ldrb.w	r3, [r4, #570]	; 0x23a
 8006a92:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d127      	bne.n	8006aea <f_open+0x76e>
	if (fs->win[BS_JmpBoot] == 0xE9
 8006a9a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8006a9e:	2be9      	cmp	r3, #233	; 0xe9
 8006aa0:	d005      	beq.n	8006aae <f_open+0x732>
			|| (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90))
 8006aa2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006aa4:	4ad1      	ldr	r2, [pc, #836]	; (8006dec <f_open+0xa70>)
 8006aa6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d11d      	bne.n	8006aea <f_open+0x76e>
	rv = rv << 8 | ptr[2];
 8006aae:	f8b4 1074 	ldrh.w	r1, [r4, #116]	; 0x74
	rv = rv << 8 | ptr[1];
 8006ab2:	f894 2073 	ldrb.w	r2, [r4, #115]	; 0x73
	rv = rv << 8 | ptr[0];
 8006ab6:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
	rv = rv << 8 | ptr[1];
 8006aba:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	rv = rv << 8 | ptr[0];
 8006abe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146)
 8006ac2:	4acb      	ldr	r2, [pc, #812]	; (8006df0 <f_open+0xa74>)
 8006ac4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	f43f ad13 	beq.w	80064f4 <f_open+0x178>
	rv = rv << 8 | ptr[2];
 8006ace:	f8b4 1090 	ldrh.w	r1, [r4, #144]	; 0x90
	rv = rv << 8 | ptr[1];
 8006ad2:	f894 208f 	ldrb.w	r2, [r4, #143]	; 0x8f
	rv = rv << 8 | ptr[0];
 8006ad6:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
	rv = rv << 8 | ptr[1];
 8006ada:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146)
 8006ade:	49c5      	ldr	r1, [pc, #788]	; (8006df4 <f_open+0xa78>)
	rv = rv << 8 | ptr[0];
 8006ae0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146)
 8006ae4:	428b      	cmp	r3, r1
 8006ae6:	f43f ad05 	beq.w	80064f4 <f_open+0x178>
		fp->obj.fs = 0; /* Invalidate file object on error */
 8006aea:	2300      	movs	r3, #0
				return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006aec:	260d      	movs	r6, #13
		fp->obj.fs = 0; /* Invalidate file object on error */
 8006aee:	602b      	str	r3, [r5, #0]
 8006af0:	e5f4      	b.n	80066dc <f_open+0x360>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++)
 8006af2:	2701      	movs	r7, #1
		Files[i].ctr = 0;
 8006af4:	f04f 0a00 	mov.w	sl, #0
		Files[i].fs = dp->obj.fs;
 8006af8:	0133      	lsls	r3, r6, #4
	if (acc && Files[i].ctr)
 8006afa:	4550      	cmp	r0, sl
		Files[i].fs = dp->obj.fs;
 8006afc:	eb08 0003 	add.w	r0, r8, r3
 8006b00:	f848 1003 	str.w	r1, [r8, r3]
		Files[i].ofs = dp->dptr;
 8006b04:	e9c0 ce01 	strd	ip, lr, [r0, #4]
		Files[i].ctr = 0;
 8006b08:	f8a0 a00c 	strh.w	sl, [r0, #12]
	if (acc && Files[i].ctr)
 8006b0c:	bf14      	ite	ne
 8006b0e:	f44f 7180 	movne.w	r1, #256	; 0x100
 8006b12:	2101      	moveq	r1, #1
 8006b14:	e67f      	b.n	8006816 <f_open+0x49a>
 8006b16:	4651      	mov	r1, sl
 8006b18:	4620      	mov	r0, r4
 8006b1a:	f7fc fdbb 	bl	8003694 <move_window.part.6>
							fs->last_clst = cl - 1; /* Reuse the cluster hole */
 8006b1e:	61a7      	str	r7, [r4, #24]
		if (res == FR_OK)
 8006b20:	4606      	mov	r6, r0
 8006b22:	2800      	cmp	r0, #0
 8006b24:	f47f adeb 	bne.w	80066fe <f_open+0x382>
 8006b28:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006b2a:	e751      	b.n	80069d0 <f_open+0x654>
			Files[i].clu == dp->obj.sclust && Files[i].ofs == dp->dptr)
 8006b2c:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8006b30:	4572      	cmp	r2, lr
 8006b32:	f000 80eb 	beq.w	8006d0c <f_open+0x990>
		if (Files[i].fs)
 8006b36:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006b3a:	2a00      	cmp	r2, #0
 8006b3c:	f43f ae1e 	beq.w	800677c <f_open+0x400>
			if (Files[i].fs == dp->obj.fs && /* Check if the object matched with an open object */
 8006b40:	4291      	cmp	r1, r2
 8006b42:	f47f adb2 	bne.w	80066aa <f_open+0x32e>
 8006b46:	e60d      	b.n	8006764 <f_open+0x3e8>
	*ptr++ = (BYTE) val;
 8006b48:	751a      	strb	r2, [r3, #20]
	*ptr++ = (BYTE) val;
 8006b4a:	755a      	strb	r2, [r3, #21]
 8006b4c:	e728      	b.n	80069a0 <f_open+0x624>
	rv = rv << 8 | ptr[0];
 8006b4e:	7d59      	ldrb	r1, [r3, #21]
 8006b50:	7d1a      	ldrb	r2, [r3, #20]
		cl |= (DWORD) ld_word(dir + DIR_FstClusHI) << 16;
 8006b52:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8006b56:	ea47 4702 	orr.w	r7, r7, r2, lsl #16
 8006b5a:	e71a      	b.n	8006992 <f_open+0x616>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++)
 8006b5c:	2702      	movs	r7, #2
 8006b5e:	2601      	movs	r6, #1
 8006b60:	e7c8      	b.n	8006af4 <f_open+0x778>
		fasize = ld_word(fs->win + BPB_FATSz16); /* Number of sectors per FAT */
 8006b62:	4618      	mov	r0, r3
 8006b64:	e4e2      	b.n	800652c <f_open+0x1b0>
	fs->winsect = 0xFFFFFFFF; /* Invaidate window */
 8006b66:	f04f 33ff 	mov.w	r3, #4294967295
	fs->wflag = 0;
 8006b6a:	2200      	movs	r2, #0
	if (sector != fs->winsect)
 8006b6c:	4598      	cmp	r8, r3
	fs->wflag = 0;
 8006b6e:	70e2      	strb	r2, [r4, #3]
	fs->winsect = 0xFFFFFFFF; /* Invaidate window */
 8006b70:	63a3      	str	r3, [r4, #56]	; 0x38
	if (sector != fs->winsect)
 8006b72:	d006      	beq.n	8006b82 <f_open+0x806>
 8006b74:	4641      	mov	r1, r8
 8006b76:	4620      	mov	r0, r4
 8006b78:	f7fc fd8c 	bl	8003694 <move_window.part.6>
	if (move_window(fs, sect) != FR_OK)
 8006b7c:	2800      	cmp	r0, #0
 8006b7e:	f47f af75 	bne.w	8006a6c <f_open+0x6f0>
	if (ld_word(fs->win + BS_55AA) != 0xAA55)
 8006b82:	f64a 2255 	movw	r2, #43605	; 0xaa55
	rv = rv << 8 | ptr[0];
 8006b86:	f894 123b 	ldrb.w	r1, [r4, #571]	; 0x23b
 8006b8a:	f894 323a 	ldrb.w	r3, [r4, #570]	; 0x23a
 8006b8e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	f47f af6a 	bne.w	8006a6c <f_open+0x6f0>
	if (fs->win[BS_JmpBoot] == 0xE9
 8006b98:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8006b9c:	2be9      	cmp	r3, #233	; 0xe9
 8006b9e:	d006      	beq.n	8006bae <f_open+0x832>
			|| (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90))
 8006ba0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006ba2:	4a92      	ldr	r2, [pc, #584]	; (8006dec <f_open+0xa70>)
 8006ba4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	f47f af5f 	bne.w	8006a6c <f_open+0x6f0>
	rv = rv << 8 | ptr[2];
 8006bae:	f8b4 1074 	ldrh.w	r1, [r4, #116]	; 0x74
	rv = rv << 8 | ptr[1];
 8006bb2:	f894 2073 	ldrb.w	r2, [r4, #115]	; 0x73
	rv = rv << 8 | ptr[0];
 8006bb6:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
	rv = rv << 8 | ptr[1];
 8006bba:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	rv = rv << 8 | ptr[0];
 8006bbe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146)
 8006bc2:	4a8b      	ldr	r2, [pc, #556]	; (8006df0 <f_open+0xa74>)
 8006bc4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	f43f ac93 	beq.w	80064f4 <f_open+0x178>
	rv = rv << 8 | ptr[2];
 8006bce:	f8b4 1090 	ldrh.w	r1, [r4, #144]	; 0x90
	rv = rv << 8 | ptr[1];
 8006bd2:	f894 208f 	ldrb.w	r2, [r4, #143]	; 0x8f
	rv = rv << 8 | ptr[0];
 8006bd6:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
	rv = rv << 8 | ptr[1];
 8006bda:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146)
 8006bde:	4985      	ldr	r1, [pc, #532]	; (8006df4 <f_open+0xa78>)
	rv = rv << 8 | ptr[0];
 8006be0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146)
 8006be4:	428b      	cmp	r3, r1
 8006be6:	f43f ac85 	beq.w	80064f4 <f_open+0x178>
 8006bea:	e73f      	b.n	8006a6c <f_open+0x6f0>
	fs->winsect = 0xFFFFFFFF; /* Invaidate window */
 8006bec:	f04f 33ff 	mov.w	r3, #4294967295
	fs->wflag = 0;
 8006bf0:	2200      	movs	r2, #0
	if (sector != fs->winsect)
 8006bf2:	4598      	cmp	r8, r3
	fs->wflag = 0;
 8006bf4:	70e2      	strb	r2, [r4, #3]
	fs->winsect = 0xFFFFFFFF; /* Invaidate window */
 8006bf6:	63a3      	str	r3, [r4, #56]	; 0x38
	if (sector != fs->winsect)
 8006bf8:	d006      	beq.n	8006c08 <f_open+0x88c>
 8006bfa:	4641      	mov	r1, r8
 8006bfc:	4620      	mov	r0, r4
 8006bfe:	f7fc fd49 	bl	8003694 <move_window.part.6>
	if (move_window(fs, sect) != FR_OK)
 8006c02:	2800      	cmp	r0, #0
 8006c04:	f47f af2d 	bne.w	8006a62 <f_open+0x6e6>
	if (ld_word(fs->win + BS_55AA) != 0xAA55)
 8006c08:	f64a 2255 	movw	r2, #43605	; 0xaa55
	rv = rv << 8 | ptr[0];
 8006c0c:	f894 123b 	ldrb.w	r1, [r4, #571]	; 0x23b
 8006c10:	f894 323a 	ldrb.w	r3, [r4, #570]	; 0x23a
 8006c14:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	f47f af22 	bne.w	8006a62 <f_open+0x6e6>
	if (fs->win[BS_JmpBoot] == 0xE9
 8006c1e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8006c22:	2be9      	cmp	r3, #233	; 0xe9
 8006c24:	d006      	beq.n	8006c34 <f_open+0x8b8>
			|| (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90))
 8006c26:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006c28:	4a70      	ldr	r2, [pc, #448]	; (8006dec <f_open+0xa70>)
 8006c2a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	f47f af17 	bne.w	8006a62 <f_open+0x6e6>
	rv = rv << 8 | ptr[2];
 8006c34:	f8b4 1074 	ldrh.w	r1, [r4, #116]	; 0x74
	rv = rv << 8 | ptr[1];
 8006c38:	f894 2073 	ldrb.w	r2, [r4, #115]	; 0x73
	rv = rv << 8 | ptr[0];
 8006c3c:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
	rv = rv << 8 | ptr[1];
 8006c40:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	rv = rv << 8 | ptr[0];
 8006c44:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146)
 8006c48:	4a69      	ldr	r2, [pc, #420]	; (8006df0 <f_open+0xa74>)
 8006c4a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	f43f ac50 	beq.w	80064f4 <f_open+0x178>
	rv = rv << 8 | ptr[2];
 8006c54:	f8b4 1090 	ldrh.w	r1, [r4, #144]	; 0x90
	rv = rv << 8 | ptr[1];
 8006c58:	f894 208f 	ldrb.w	r2, [r4, #143]	; 0x8f
	rv = rv << 8 | ptr[0];
 8006c5c:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
	rv = rv << 8 | ptr[1];
 8006c60:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146)
 8006c64:	4963      	ldr	r1, [pc, #396]	; (8006df4 <f_open+0xa78>)
	rv = rv << 8 | ptr[0];
 8006c66:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146)
 8006c6a:	428b      	cmp	r3, r1
 8006c6c:	f43f ac42 	beq.w	80064f4 <f_open+0x178>
 8006c70:	e6f7      	b.n	8006a62 <f_open+0x6e6>
	fs->winsect = 0xFFFFFFFF; /* Invaidate window */
 8006c72:	f04f 33ff 	mov.w	r3, #4294967295
	fs->wflag = 0;
 8006c76:	2200      	movs	r2, #0
	if (sector != fs->winsect)
 8006c78:	4598      	cmp	r8, r3
	fs->wflag = 0;
 8006c7a:	70e2      	strb	r2, [r4, #3]
	fs->winsect = 0xFFFFFFFF; /* Invaidate window */
 8006c7c:	63a3      	str	r3, [r4, #56]	; 0x38
	if (sector != fs->winsect)
 8006c7e:	d011      	beq.n	8006ca4 <f_open+0x928>
 8006c80:	4641      	mov	r1, r8
 8006c82:	4620      	mov	r0, r4
 8006c84:	f7fc fd06 	bl	8003694 <move_window.part.6>
	if (move_window(fs, sect) != FR_OK)
 8006c88:	2800      	cmp	r0, #0
 8006c8a:	f47f aee4 	bne.w	8006a56 <f_open+0x6da>
	if (ld_word(fs->win + BS_55AA) != 0xAA55)
 8006c8e:	f64a 2255 	movw	r2, #43605	; 0xaa55
	rv = rv << 8 | ptr[0];
 8006c92:	f894 123b 	ldrb.w	r1, [r4, #571]	; 0x23b
 8006c96:	f894 323a 	ldrb.w	r3, [r4, #570]	; 0x23a
 8006c9a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	f47f aed9 	bne.w	8006a56 <f_open+0x6da>
	if (fs->win[BS_JmpBoot] == 0xE9
 8006ca4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8006ca8:	2be9      	cmp	r3, #233	; 0xe9
 8006caa:	d006      	beq.n	8006cba <f_open+0x93e>
			|| (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90))
 8006cac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006cae:	4a4f      	ldr	r2, [pc, #316]	; (8006dec <f_open+0xa70>)
 8006cb0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	f47f aece 	bne.w	8006a56 <f_open+0x6da>
	rv = rv << 8 | ptr[2];
 8006cba:	f8b4 1074 	ldrh.w	r1, [r4, #116]	; 0x74
	rv = rv << 8 | ptr[1];
 8006cbe:	f894 2073 	ldrb.w	r2, [r4, #115]	; 0x73
	rv = rv << 8 | ptr[0];
 8006cc2:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
	rv = rv << 8 | ptr[1];
 8006cc6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	rv = rv << 8 | ptr[0];
 8006cca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146)
 8006cce:	4a48      	ldr	r2, [pc, #288]	; (8006df0 <f_open+0xa74>)
 8006cd0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	f43f ac0d 	beq.w	80064f4 <f_open+0x178>
	rv = rv << 8 | ptr[2];
 8006cda:	f8b4 1090 	ldrh.w	r1, [r4, #144]	; 0x90
	rv = rv << 8 | ptr[1];
 8006cde:	f894 208f 	ldrb.w	r2, [r4, #143]	; 0x8f
	rv = rv << 8 | ptr[0];
 8006ce2:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
	rv = rv << 8 | ptr[1];
 8006ce6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146)
 8006cea:	4942      	ldr	r1, [pc, #264]	; (8006df4 <f_open+0xa78>)
	rv = rv << 8 | ptr[0];
 8006cec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146)
 8006cf0:	428b      	cmp	r3, r1
 8006cf2:	f43f abff 	beq.w	80064f4 <f_open+0x178>
 8006cf6:	e6ae      	b.n	8006a56 <f_open+0x6da>
 8006cf8:	4641      	mov	r1, r8
 8006cfa:	4620      	mov	r0, r4
 8006cfc:	f7fc fcca 	bl	8003694 <move_window.part.6>
	if (move_window(fs, sect) != FR_OK)
 8006d00:	2800      	cmp	r0, #0
 8006d02:	f43f aec0 	beq.w	8006a86 <f_open+0x70a>
 8006d06:	e4e6      	b.n	80066d6 <f_open+0x35a>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006d08:	4698      	mov	r8, r3
 8006d0a:	e676      	b.n	80069fa <f_open+0x67e>
	for (i = be = 0; i < _FS_LOCK; i++)
 8006d0c:	4632      	mov	r2, r6
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006d0e:	b948      	cbnz	r0, 8006d24 <f_open+0x9a8>
 8006d10:	eb08 1202 	add.w	r2, r8, r2, lsl #4
 8006d14:	8992      	ldrh	r2, [r2, #12]
 8006d16:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8006d1a:	f47f ad2f 	bne.w	800677c <f_open+0x400>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW))
 8006d1e:	b94b      	cbnz	r3, 8006d34 <f_open+0x9b8>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006d20:	2610      	movs	r6, #16
 8006d22:	e4c5      	b.n	80066b0 <f_open+0x334>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW))
 8006d24:	b11b      	cbz	r3, 8006d2e <f_open+0x9b2>
		fp->obj.fs = 0; /* Invalidate file object on error */
 8006d26:	2300      	movs	r3, #0
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006d28:	2610      	movs	r6, #16
		fp->obj.fs = 0; /* Invalidate file object on error */
 8006d2a:	602b      	str	r3, [r5, #0]
 8006d2c:	e4d6      	b.n	80066dc <f_open+0x360>
 8006d2e:	602b      	str	r3, [r5, #0]
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006d30:	2610      	movs	r6, #16
 8006d32:	e4d3      	b.n	80066dc <f_open+0x360>
		fp->obj.fs = 0; /* Invalidate file object on error */
 8006d34:	6028      	str	r0, [r5, #0]
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006d36:	2610      	movs	r6, #16
 8006d38:	e4d0      	b.n	80066dc <f_open+0x360>
			Files[i].clu == dp->obj.sclust && Files[i].ofs == dp->dptr)
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	e7e7      	b.n	8006d0e <f_open+0x992>
		fs->n_fatent = nclst + 2; /* Number of FAT entries */
 8006d3e:	6221      	str	r1, [r4, #32]
		fs->fatbase = bsect + nrsv; /* FAT start sector */
 8006d40:	e9c4 820a 	strd	r8, r2, [r4, #40]	; 0x28
		fs->database = bsect + sysect; /* Data start sector */
 8006d44:	f8c4 b034 	str.w	fp, [r4, #52]	; 0x34
			if (fs->n_rootdir == 0)
 8006d48:	f1be 0f00 	cmp.w	lr, #0
 8006d4c:	f43f aecd 	beq.w	8006aea <f_open+0x76e>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))
 8006d50:	f10c 33ff 	add.w	r3, ip, #4294967295
 8006d54:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 8006d58:	fbb1 fcfc 	udiv	ip, r1, ip
			fs->dirbase = fs->fatbase + fasize; /* Root directory start sector */
 8006d5c:	444a      	add	r2, r9
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))
 8006d5e:	4584      	cmp	ip, r0
			fs->dirbase = fs->fatbase + fasize; /* Root directory start sector */
 8006d60:	6322      	str	r2, [r4, #48]	; 0x30
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))
 8006d62:	f63f aec2 	bhi.w	8006aea <f_open+0x76e>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF; /* Initialize cluster allocation information */
 8006d66:	f04f 33ff 	mov.w	r3, #4294967295
		fs->fsi_flag = 0x80;
 8006d6a:	2280      	movs	r2, #128	; 0x80
		fs->last_clst = fs->free_clst = 0xFFFFFFFF; /* Initialize cluster allocation information */
 8006d6c:	e9c4 3306 	strd	r3, r3, [r4, #24]
		fs->fsi_flag = 0x80;
 8006d70:	7122      	strb	r2, [r4, #4]
 8006d72:	2302      	movs	r3, #2
 8006d74:	e459      	b.n	800662a <f_open+0x2ae>
 8006d76:	f103 0902 	add.w	r9, r3, #2
	rv = rv << 8 | ptr[0];
 8006d7a:	f894 a067 	ldrb.w	sl, [r4, #103]	; 0x67
 8006d7e:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
		fs->fatbase = bsect + nrsv; /* FAT start sector */
 8006d82:	4442      	add	r2, r8
		fs->database = bsect + sysect; /* Data start sector */
 8006d84:	4441      	add	r1, r8
			if (ld_word(fs->win + BPB_FSVer32) != 0)
 8006d86:	ea53 230a 	orrs.w	r3, r3, sl, lsl #8
		fs->n_fatent = nclst + 2; /* Number of FAT entries */
 8006d8a:	f8c4 9020 	str.w	r9, [r4, #32]
		fs->fatbase = bsect + nrsv; /* FAT start sector */
 8006d8e:	62e2      	str	r2, [r4, #44]	; 0x2c
		fs->database = bsect + sysect; /* Data start sector */
 8006d90:	6361      	str	r1, [r4, #52]	; 0x34
		fs->volbase = bsect; /* Volume start sector */
 8006d92:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
			if (ld_word(fs->win + BPB_FSVer32) != 0)
 8006d96:	f47f aea8 	bne.w	8006aea <f_open+0x76e>
			if (fs->n_rootdir)
 8006d9a:	f1be 0f00 	cmp.w	lr, #0
 8006d9e:	f47f aea4 	bne.w	8006aea <f_open+0x76e>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))
 8006da2:	f10c 33ff 	add.w	r3, ip, #4294967295
 8006da6:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8006daa:	fbb3 fcfc 	udiv	ip, r3, ip
	rv = rv << 8 | ptr[2];
 8006dae:	f8b4 106a 	ldrh.w	r1, [r4, #106]	; 0x6a
	rv = rv << 8 | ptr[1];
 8006db2:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
	rv = rv << 8 | ptr[0];
 8006db6:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
	rv = rv << 8 | ptr[1];
 8006dba:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	rv = rv << 8 | ptr[0];
 8006dbe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))
 8006dc2:	4584      	cmp	ip, r0
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32); /* Root directory start cluster */
 8006dc4:	6323      	str	r3, [r4, #48]	; 0x30
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))
 8006dc6:	f63f ae90 	bhi.w	8006aea <f_open+0x76e>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF; /* Initialize cluster allocation information */
 8006dca:	f04f 32ff 	mov.w	r2, #4294967295
		fs->fsi_flag = 0x80;
 8006dce:	2180      	movs	r1, #128	; 0x80
	rv = rv << 8 | ptr[0];
 8006dd0:	f894 006d 	ldrb.w	r0, [r4, #109]	; 0x6d
 8006dd4:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
		fs->last_clst = fs->free_clst = 0xFFFFFFFF; /* Initialize cluster allocation information */
 8006dd8:	61e2      	str	r2, [r4, #28]
	rv = rv << 8 | ptr[0];
 8006dda:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
		&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006dde:	2b01      	cmp	r3, #1
		fs->last_clst = fs->free_clst = 0xFFFFFFFF; /* Initialize cluster allocation information */
 8006de0:	61a2      	str	r2, [r4, #24]
		fs->fsi_flag = 0x80;
 8006de2:	7121      	strb	r1, [r4, #4]
		&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006de4:	d00a      	beq.n	8006dfc <f_open+0xa80>
					&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006de6:	2303      	movs	r3, #3
 8006de8:	e41f      	b.n	800662a <f_open+0x2ae>
 8006dea:	bf00      	nop
 8006dec:	009000eb 	.word	0x009000eb
 8006df0:	00544146 	.word	0x00544146
 8006df4:	33544146 	.word	0x33544146
 8006df8:	2000028c 	.word	0x2000028c
	if (sector != fs->winsect)
 8006dfc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
				&& move_window(fs, bsect + 1) == FR_OK)
 8006dfe:	f108 0101 	add.w	r1, r8, #1
	if (sector != fs->winsect)
 8006e02:	4299      	cmp	r1, r3
 8006e04:	d13d      	bne.n	8006e82 <f_open+0xb06>
			if (ld_word(fs->win + BS_55AA) == 0xAA55 /* Load FSINFO data if available */
 8006e06:	f64a 2255 	movw	r2, #43605	; 0xaa55
			fs->fsi_flag = 0;
 8006e0a:	2000      	movs	r0, #0
	rv = rv << 8 | ptr[0];
 8006e0c:	f894 123b 	ldrb.w	r1, [r4, #571]	; 0x23b
 8006e10:	f894 323a 	ldrb.w	r3, [r4, #570]	; 0x23a
			fs->fsi_flag = 0;
 8006e14:	7120      	strb	r0, [r4, #4]
	rv = rv << 8 | ptr[0];
 8006e16:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			if (ld_word(fs->win + BS_55AA) == 0xAA55 /* Load FSINFO data if available */
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d1e3      	bne.n	8006de6 <f_open+0xa6a>
	rv = rv << 8 | ptr[2];
 8006e1e:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
	rv = rv << 8 | ptr[1];
 8006e20:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
	rv = rv << 8 | ptr[0];
 8006e24:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
	rv = rv << 8 | ptr[1];
 8006e28:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
			&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006e2c:	4918      	ldr	r1, [pc, #96]	; (8006e90 <f_open+0xb14>)
	rv = rv << 8 | ptr[0];
 8006e2e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006e32:	428b      	cmp	r3, r1
 8006e34:	d1d7      	bne.n	8006de6 <f_open+0xa6a>
	rv = rv << 8 | ptr[2];
 8006e36:	f8b4 1222 	ldrh.w	r1, [r4, #546]	; 0x222
	rv = rv << 8 | ptr[1];
 8006e3a:	f894 2221 	ldrb.w	r2, [r4, #545]	; 0x221
	rv = rv << 8 | ptr[0];
 8006e3e:	f894 3220 	ldrb.w	r3, [r4, #544]	; 0x220
	rv = rv << 8 | ptr[1];
 8006e42:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
					&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006e46:	4913      	ldr	r1, [pc, #76]	; (8006e94 <f_open+0xb18>)
	rv = rv << 8 | ptr[0];
 8006e48:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006e4c:	428b      	cmp	r3, r1
 8006e4e:	d1ca      	bne.n	8006de6 <f_open+0xa6a>
	rv = rv << 8 | ptr[2];
 8006e50:	f8b4 1226 	ldrh.w	r1, [r4, #550]	; 0x226
	rv = rv << 8 | ptr[1];
 8006e54:	f894 2225 	ldrb.w	r2, [r4, #549]	; 0x225
 8006e58:	f894 3229 	ldrb.w	r3, [r4, #553]	; 0x229
 8006e5c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	rv = rv << 8 | ptr[2];
 8006e60:	f8b4 022a 	ldrh.w	r0, [r4, #554]	; 0x22a
	rv = rv << 8 | ptr[0];
 8006e64:	f894 1224 	ldrb.w	r1, [r4, #548]	; 0x224
 8006e68:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
	rv = rv << 8 | ptr[1];
 8006e6c:	ea43 2200 	orr.w	r2, r3, r0, lsl #8
	rv = rv << 8 | ptr[0];
 8006e70:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006e74:	61e1      	str	r1, [r4, #28]
	rv = rv << 8 | ptr[0];
 8006e76:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006e7a:	61a3      	str	r3, [r4, #24]
 8006e7c:	2303      	movs	r3, #3
 8006e7e:	f7ff bbd4 	b.w	800662a <f_open+0x2ae>
 8006e82:	4620      	mov	r0, r4
 8006e84:	f7fc fc06 	bl	8003694 <move_window.part.6>
				&& move_window(fs, bsect + 1) == FR_OK)
 8006e88:	2800      	cmp	r0, #0
 8006e8a:	d0bc      	beq.n	8006e06 <f_open+0xa8a>
 8006e8c:	e7ab      	b.n	8006de6 <f_open+0xa6a>
 8006e8e:	bf00      	nop
 8006e90:	41615252 	.word	0x41615252
 8006e94:	61417272 	.word	0x61417272

08006e98 <f_read>:
FRESULT f_read(FIL *fp, /* Pointer to the file object */
void *buff, /* Pointer to data buffer */
UINT btr, /* Number of bytes to read */
UINT *br /* Pointer to number of bytes read */
)
{
 8006e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e9c:	461f      	mov	r7, r3
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*) buff;

	*br = 0; /* Clear read byte counter */
 8006e9e:	2300      	movs	r3, #0
{
 8006ea0:	b089      	sub	sp, #36	; 0x24
	*br = 0; /* Clear read byte counter */
 8006ea2:	603b      	str	r3, [r7, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id)
 8006ea4:	b150      	cbz	r0, 8006ebc <f_read+0x24>
 8006ea6:	6803      	ldr	r3, [r0, #0]
 8006ea8:	4604      	mov	r4, r0
 8006eaa:	b13b      	cbz	r3, 8006ebc <f_read+0x24>
 8006eac:	4689      	mov	r9, r1
 8006eae:	7819      	ldrb	r1, [r3, #0]
 8006eb0:	b121      	cbz	r1, 8006ebc <f_read+0x24>
 8006eb2:	4693      	mov	fp, r2
 8006eb4:	8881      	ldrh	r1, [r0, #4]
 8006eb6:	88da      	ldrh	r2, [r3, #6]
 8006eb8:	4291      	cmp	r1, r2
 8006eba:	d004      	beq.n	8006ec6 <f_read+0x2e>
	FRESULT res = FR_INVALID_OBJECT;
 8006ebc:	2509      	movs	r5, #9
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt); /* Extract partial sector */
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 8006ebe:	4628      	mov	r0, r5
 8006ec0:	b009      	add	sp, #36	; 0x24
 8006ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8006ec6:	6958      	ldr	r0, [r3, #20]
 8006ec8:	f001 fa02 	bl	80082d0 <ff_req_grant>
 8006ecc:	b908      	cbnz	r0, 8006ed2 <f_read+0x3a>
			res = FR_TIMEOUT;
 8006ece:	250f      	movs	r5, #15
 8006ed0:	e7f5      	b.n	8006ebe <f_read+0x26>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT))
 8006ed2:	6823      	ldr	r3, [r4, #0]
 8006ed4:	7858      	ldrb	r0, [r3, #1]
 8006ed6:	f7fc fb99 	bl	800360c <disk_status>
 8006eda:	07c1      	lsls	r1, r0, #31
 8006edc:	d506      	bpl.n	8006eec <f_read+0x54>
				unlock_fs(obj->fs, FR_OK);
 8006ede:	6823      	ldr	r3, [r4, #0]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d0eb      	beq.n	8006ebc <f_read+0x24>
		ff_rel_grant(fs->sobj);
 8006ee4:	6958      	ldr	r0, [r3, #20]
 8006ee6:	f001 f9fd 	bl	80082e4 <ff_rel_grant>
 8006eea:	e7e7      	b.n	8006ebc <f_read+0x24>
	if (res != FR_OK || (res = (FRESULT) fp->err) != FR_OK)
 8006eec:	7d65      	ldrb	r5, [r4, #21]
	*fs = (res == FR_OK) ? obj->fs : 0; /* Corresponding filesystem object */
 8006eee:	6826      	ldr	r6, [r4, #0]
	if (res != FR_OK || (res = (FRESULT) fp->err) != FR_OK)
 8006ef0:	b175      	cbz	r5, 8006f10 <f_read+0x78>
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE
 8006ef2:	2e00      	cmp	r6, #0
 8006ef4:	d0e3      	beq.n	8006ebe <f_read+0x26>
 8006ef6:	2d0c      	cmp	r5, #12
 8006ef8:	d0e1      	beq.n	8006ebe <f_read+0x26>
 8006efa:	2d0b      	cmp	r5, #11
 8006efc:	d0df      	beq.n	8006ebe <f_read+0x26>
			&& res != FR_TIMEOUT)
 8006efe:	2d0f      	cmp	r5, #15
 8006f00:	d0dd      	beq.n	8006ebe <f_read+0x26>
		ff_rel_grant(fs->sobj);
 8006f02:	6970      	ldr	r0, [r6, #20]
 8006f04:	f001 f9ee 	bl	80082e4 <ff_rel_grant>
}
 8006f08:	4628      	mov	r0, r5
 8006f0a:	b009      	add	sp, #36	; 0x24
 8006f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!(fp->flag & FA_READ))
 8006f10:	7d23      	ldrb	r3, [r4, #20]
 8006f12:	07da      	lsls	r2, r3, #31
 8006f14:	d407      	bmi.n	8006f26 <f_read+0x8e>
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE
 8006f16:	2e00      	cmp	r6, #0
 8006f18:	f000 8115 	beq.w	8007146 <f_read+0x2ae>
		ff_rel_grant(fs->sobj);
 8006f1c:	6970      	ldr	r0, [r6, #20]
 8006f1e:	f001 f9e1 	bl	80082e4 <ff_rel_grant>
		LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8006f22:	2507      	movs	r5, #7
 8006f24:	e7cb      	b.n	8006ebe <f_read+0x26>
	remain = fp->obj.objsize - fp->fptr;
 8006f26:	69a0      	ldr	r0, [r4, #24]
 8006f28:	68e2      	ldr	r2, [r4, #12]
 8006f2a:	1a12      	subs	r2, r2, r0
 8006f2c:	4593      	cmp	fp, r2
 8006f2e:	bf28      	it	cs
 8006f30:	4693      	movcs	fp, r2
	for (; btr; /* Repeat until all data read */
 8006f32:	f1bb 0f00 	cmp.w	fp, #0
 8006f36:	f000 81bd 	beq.w	80072b4 <f_read+0x41c>
 8006f3a:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8006f3e:	9301      	str	r3, [sp, #4]
 8006f40:	425b      	negs	r3, r3
 8006f42:	f003 0303 	and.w	r3, r3, #3
 8006f46:	9304      	str	r3, [sp, #16]
 8006f48:	89b1      	ldrh	r1, [r6, #12]
 8006f4a:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8006f4e:	9305      	str	r3, [sp, #20]
 8006f50:	9503      	str	r5, [sp, #12]
		if (fp->fptr % SS(fs) == 0)
 8006f52:	fbb0 f2f1 	udiv	r2, r0, r1
 8006f56:	fb01 0312 	mls	r3, r1, r2, r0
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d149      	bne.n	8006ff2 <f_read+0x15a>
			csect = (UINT) (fp->fptr / SS(fs) & (fs->csize - 1)); /* Sector offset in the cluster */
 8006f5e:	f8b6 a00a 	ldrh.w	sl, [r6, #10]
 8006f62:	f10a 3aff 	add.w	sl, sl, #4294967295
			if (csect == 0)
 8006f66:	ea1a 0a02 	ands.w	sl, sl, r2
 8006f6a:	f000 80c4 	beq.w	80070f6 <f_read+0x25e>
 8006f6e:	69e0      	ldr	r0, [r4, #28]
	if (clst >= fs->n_fatent - 2)
 8006f70:	6a33      	ldr	r3, [r6, #32]
	clst -= 2;
 8006f72:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2)
 8006f74:	3b02      	subs	r3, #2
 8006f76:	4298      	cmp	r0, r3
 8006f78:	f080 80dd 	bcs.w	8007136 <f_read+0x29e>
	return clst * fs->csize + fs->database;
 8006f7c:	8973      	ldrh	r3, [r6, #10]
 8006f7e:	6b72      	ldr	r2, [r6, #52]	; 0x34
 8006f80:	fb03 2000 	mla	r0, r3, r0, r2
			if (!sect)
 8006f84:	2800      	cmp	r0, #0
 8006f86:	f000 80d6 	beq.w	8007136 <f_read+0x29e>
			cc = btr / SS(fs); /* When remaining bytes >= sector size, */
 8006f8a:	89b1      	ldrh	r1, [r6, #12]
			sect += csect;
 8006f8c:	eb0a 0800 	add.w	r8, sl, r0
			cc = btr / SS(fs); /* When remaining bytes >= sector size, */
 8006f90:	fbbb f2f1 	udiv	r2, fp, r1
 8006f94:	9202      	str	r2, [sp, #8]
			if (cc)
 8006f96:	b1a2      	cbz	r2, 8006fc2 <f_read+0x12a>
				if (csect + cc > fs->csize)
 8006f98:	4452      	add	r2, sl
 8006f9a:	429a      	cmp	r2, r3
					cc = fs->csize - csect;
 8006f9c:	bf84      	itt	hi
 8006f9e:	eba3 030a 	subhi.w	r3, r3, sl
 8006fa2:	9302      	strhi	r3, [sp, #8]
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK)
 8006fa4:	9b02      	ldr	r3, [sp, #8]
 8006fa6:	4642      	mov	r2, r8
 8006fa8:	4649      	mov	r1, r9
 8006faa:	7870      	ldrb	r0, [r6, #1]
 8006fac:	f7fc fb48 	bl	8003640 <disk_read>
 8006fb0:	2800      	cmp	r0, #0
 8006fb2:	f000 80ca 	beq.w	800714a <f_read+0x2b2>
					ABORT(fs, FR_DISK_ERR); /* Fill sector cache */
 8006fb6:	2501      	movs	r5, #1
 8006fb8:	7565      	strb	r5, [r4, #21]
		ff_rel_grant(fs->sobj);
 8006fba:	6970      	ldr	r0, [r6, #20]
 8006fbc:	f001 f992 	bl	80082e4 <ff_rel_grant>
 8006fc0:	e77d      	b.n	8006ebe <f_read+0x26>
			if (fp->sect != sect)
 8006fc2:	6a22      	ldr	r2, [r4, #32]
 8006fc4:	4542      	cmp	r2, r8
 8006fc6:	d00d      	beq.n	8006fe4 <f_read+0x14c>
				if (fp->flag & FA_DIRTY)
 8006fc8:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8006fcc:	7870      	ldrb	r0, [r6, #1]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	f2c0 80d7 	blt.w	8007182 <f_read+0x2ea>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	4642      	mov	r2, r8
 8006fd8:	9901      	ldr	r1, [sp, #4]
 8006fda:	f7fc fb31 	bl	8003640 <disk_read>
 8006fde:	2800      	cmp	r0, #0
 8006fe0:	d1e9      	bne.n	8006fb6 <f_read+0x11e>
 8006fe2:	89b1      	ldrh	r1, [r6, #12]
 8006fe4:	69a0      	ldr	r0, [r4, #24]
			fp->sect = sect;
 8006fe6:	f8c4 8020 	str.w	r8, [r4, #32]
 8006fea:	fbb0 f3f1 	udiv	r3, r0, r1
 8006fee:	fb01 0313 	mls	r3, r1, r3, r0
		rcnt = SS(fs) - (UINT) fp->fptr % SS(fs); /* Number of bytes left in the sector */
 8006ff2:	1aca      	subs	r2, r1, r3
		if (rcnt > btr)
 8006ff4:	455a      	cmp	r2, fp
 8006ff6:	d804      	bhi.n	8007002 <f_read+0x16a>
	if (cnt)
 8006ff8:	2a00      	cmp	r2, #0
 8006ffa:	f040 816e 	bne.w	80072da <f_read+0x442>
	rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt)
 8006ffe:	61a0      	str	r0, [r4, #24]
 8007000:	e7a7      	b.n	8006f52 <f_read+0xba>
 8007002:	2200      	movs	r2, #0
 8007004:	9202      	str	r2, [sp, #8]
 8007006:	9901      	ldr	r1, [sp, #4]
 8007008:	1d1a      	adds	r2, r3, #4
 800700a:	440a      	add	r2, r1
 800700c:	18c8      	adds	r0, r1, r3
 800700e:	f109 0104 	add.w	r1, r9, #4
 8007012:	4288      	cmp	r0, r1
 8007014:	bf38      	it	cc
 8007016:	4591      	cmpcc	r9, r2
 8007018:	f0c0 80a8 	bcc.w	800716c <f_read+0x2d4>
 800701c:	f1bb 0f0b 	cmp.w	fp, #11
 8007020:	f240 80a4 	bls.w	800716c <f_read+0x2d4>
 8007024:	4242      	negs	r2, r0
 8007026:	f012 0203 	ands.w	r2, r2, #3
 800702a:	f10b 3cff 	add.w	ip, fp, #4294967295
 800702e:	f000 809a 	beq.w	8007166 <f_read+0x2ce>
			*d++ = *s++;
 8007032:	7805      	ldrb	r5, [r0, #0]
 8007034:	2a01      	cmp	r2, #1
 8007036:	f100 0101 	add.w	r1, r0, #1
 800703a:	f889 5000 	strb.w	r5, [r9]
 800703e:	f109 0a01 	add.w	sl, r9, #1
 8007042:	d07e      	beq.n	8007142 <f_read+0x2aa>
 8007044:	7845      	ldrb	r5, [r0, #1]
 8007046:	2a03      	cmp	r2, #3
 8007048:	f100 0102 	add.w	r1, r0, #2
 800704c:	f889 5001 	strb.w	r5, [r9, #1]
 8007050:	f109 0a02 	add.w	sl, r9, #2
		} while (--cnt);
 8007054:	f1ab 0c02 	sub.w	ip, fp, #2
 8007058:	d173      	bne.n	8007142 <f_read+0x2aa>
			*d++ = *s++;
 800705a:	7881      	ldrb	r1, [r0, #2]
 800705c:	f109 0a03 	add.w	sl, r9, #3
 8007060:	f889 1002 	strb.w	r1, [r9, #2]
 8007064:	3003      	adds	r0, #3
		} while (--cnt);
 8007066:	f1ab 0c03 	sub.w	ip, fp, #3
			*d++ = *s++;
 800706a:	2100      	movs	r1, #0
 800706c:	9d01      	ldr	r5, [sp, #4]
 800706e:	4413      	add	r3, r2
 8007070:	ebab 0802 	sub.w	r8, fp, r2
 8007074:	442b      	add	r3, r5
 8007076:	444a      	add	r2, r9
 8007078:	ea4f 0e98 	mov.w	lr, r8, lsr #2
 800707c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007080:	3101      	adds	r1, #1
 8007082:	458e      	cmp	lr, r1
 8007084:	f842 5b04 	str.w	r5, [r2], #4
 8007088:	d8f8      	bhi.n	800707c <f_read+0x1e4>
 800708a:	f028 0303 	bic.w	r3, r8, #3
 800708e:	4598      	cmp	r8, r3
 8007090:	ebac 0c03 	sub.w	ip, ip, r3
 8007094:	eb0a 0203 	add.w	r2, sl, r3
 8007098:	eb00 0103 	add.w	r1, r0, r3
 800709c:	d01b      	beq.n	80070d6 <f_read+0x23e>
 800709e:	5cc0      	ldrb	r0, [r0, r3]
		} while (--cnt);
 80070a0:	f1bc 0f01 	cmp.w	ip, #1
			*d++ = *s++;
 80070a4:	f80a 0003 	strb.w	r0, [sl, r3]
		} while (--cnt);
 80070a8:	d015      	beq.n	80070d6 <f_read+0x23e>
			*d++ = *s++;
 80070aa:	784b      	ldrb	r3, [r1, #1]
		} while (--cnt);
 80070ac:	f1bc 0f02 	cmp.w	ip, #2
			*d++ = *s++;
 80070b0:	7053      	strb	r3, [r2, #1]
		} while (--cnt);
 80070b2:	d010      	beq.n	80070d6 <f_read+0x23e>
			*d++ = *s++;
 80070b4:	788b      	ldrb	r3, [r1, #2]
		} while (--cnt);
 80070b6:	f1bc 0f03 	cmp.w	ip, #3
			*d++ = *s++;
 80070ba:	7093      	strb	r3, [r2, #2]
		} while (--cnt);
 80070bc:	d00b      	beq.n	80070d6 <f_read+0x23e>
			*d++ = *s++;
 80070be:	78cb      	ldrb	r3, [r1, #3]
		} while (--cnt);
 80070c0:	f1bc 0f04 	cmp.w	ip, #4
			*d++ = *s++;
 80070c4:	70d3      	strb	r3, [r2, #3]
		} while (--cnt);
 80070c6:	d006      	beq.n	80070d6 <f_read+0x23e>
			*d++ = *s++;
 80070c8:	790b      	ldrb	r3, [r1, #4]
		} while (--cnt);
 80070ca:	f1bc 0f05 	cmp.w	ip, #5
			*d++ = *s++;
 80070ce:	7113      	strb	r3, [r2, #4]
		} while (--cnt);
 80070d0:	d001      	beq.n	80070d6 <f_read+0x23e>
			*d++ = *s++;
 80070d2:	794b      	ldrb	r3, [r1, #5]
 80070d4:	7153      	strb	r3, [r2, #5]
 80070d6:	44d9      	add	r9, fp
 80070d8:	465b      	mov	r3, fp
 80070da:	69a0      	ldr	r0, [r4, #24]
 80070dc:	f8dd b008 	ldr.w	fp, [sp, #8]
	rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt)
 80070e0:	6839      	ldr	r1, [r7, #0]
 80070e2:	4418      	add	r0, r3
 80070e4:	4419      	add	r1, r3
 80070e6:	61a0      	str	r0, [r4, #24]
 80070e8:	6039      	str	r1, [r7, #0]
	for (; btr; /* Repeat until all data read */
 80070ea:	f1bb 0f00 	cmp.w	fp, #0
 80070ee:	f000 80df 	beq.w	80072b0 <f_read+0x418>
 80070f2:	89b1      	ldrh	r1, [r6, #12]
 80070f4:	e72d      	b.n	8006f52 <f_read+0xba>
				if (fp->fptr == 0)
 80070f6:	b938      	cbnz	r0, 8007108 <f_read+0x270>
					clst = fp->obj.sclust; /* Follow cluster chain from the origin */
 80070f8:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2)
 80070fa:	2801      	cmp	r0, #1
 80070fc:	d91b      	bls.n	8007136 <f_read+0x29e>
				if (clst == 0xFFFFFFFF)
 80070fe:	1c43      	adds	r3, r0, #1
 8007100:	f43f af59 	beq.w	8006fb6 <f_read+0x11e>
				fp->clust = clst; /* Update current cluster */
 8007104:	61e0      	str	r0, [r4, #28]
 8007106:	e733      	b.n	8006f70 <f_read+0xd8>
					if (fp->cltbl)
 8007108:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800710a:	6821      	ldr	r1, [r4, #0]
 800710c:	2a00      	cmp	r2, #0
 800710e:	d048      	beq.n	80071a2 <f_read+0x30a>
	cl = (DWORD) (ofs / SS(fs) / fs->csize); /* Cluster order from top of the file */
 8007110:	898b      	ldrh	r3, [r1, #12]
 8007112:	8949      	ldrh	r1, [r1, #10]
 8007114:	fbb0 f0f3 	udiv	r0, r0, r3
		ncl = *tbl++; /* Number of cluters in the fragment */
 8007118:	6853      	ldr	r3, [r2, #4]
	cl = (DWORD) (ofs / SS(fs) / fs->csize); /* Cluster order from top of the file */
 800711a:	fbb0 f0f1 	udiv	r0, r0, r1
	tbl = fp->cltbl + 1; /* Top of CLMT */
 800711e:	3204      	adds	r2, #4
		if (ncl == 0)
 8007120:	b14b      	cbz	r3, 8007136 <f_read+0x29e>
		if (cl < ncl)
 8007122:	4298      	cmp	r0, r3
 8007124:	d202      	bcs.n	800712c <f_read+0x294>
 8007126:	e039      	b.n	800719c <f_read+0x304>
 8007128:	4283      	cmp	r3, r0
 800712a:	d837      	bhi.n	800719c <f_read+0x304>
		cl -= ncl;
 800712c:	1ac0      	subs	r0, r0, r3
		ncl = *tbl++; /* Number of cluters in the fragment */
 800712e:	f852 3f08 	ldr.w	r3, [r2, #8]!
		if (ncl == 0)
 8007132:	2b00      	cmp	r3, #0
 8007134:	d1f8      	bne.n	8007128 <f_read+0x290>
				ABORT(fs, FR_INT_ERR);
 8007136:	2502      	movs	r5, #2
 8007138:	7565      	strb	r5, [r4, #21]
		ff_rel_grant(fs->sobj);
 800713a:	6970      	ldr	r0, [r6, #20]
 800713c:	f001 f8d2 	bl	80082e4 <ff_rel_grant>
 8007140:	e6bd      	b.n	8006ebe <f_read+0x26>
			*d++ = *s++;
 8007142:	4608      	mov	r0, r1
 8007144:	e791      	b.n	800706a <f_read+0x1d2>
		LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8007146:	2507      	movs	r5, #7
 8007148:	e6b9      	b.n	8006ebe <f_read+0x26>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc)
 800714a:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800714e:	89b1      	ldrh	r1, [r6, #12]
 8007150:	2b00      	cmp	r3, #0
 8007152:	9106      	str	r1, [sp, #24]
 8007154:	db2a      	blt.n	80071ac <f_read+0x314>
				rcnt = SS(fs) * cc; /* Number of bytes transferred */
 8007156:	9b02      	ldr	r3, [sp, #8]
 8007158:	69a0      	ldr	r0, [r4, #24]
 800715a:	fb03 f301 	mul.w	r3, r3, r1
 800715e:	4499      	add	r9, r3
 8007160:	ebab 0b03 	sub.w	fp, fp, r3
				continue;
 8007164:	e7bc      	b.n	80070e0 <f_read+0x248>
			*d++ = *s++;
 8007166:	46ca      	mov	sl, r9
 8007168:	46dc      	mov	ip, fp
 800716a:	e77e      	b.n	800706a <f_read+0x1d2>
 800716c:	f109 33ff 	add.w	r3, r9, #4294967295
 8007170:	eb00 010b 	add.w	r1, r0, fp
 8007174:	f810 2b01 	ldrb.w	r2, [r0], #1
		} while (--cnt);
 8007178:	4288      	cmp	r0, r1
			*d++ = *s++;
 800717a:	f803 2f01 	strb.w	r2, [r3, #1]!
		} while (--cnt);
 800717e:	d1f9      	bne.n	8007174 <f_read+0x2dc>
 8007180:	e7a9      	b.n	80070d6 <f_read+0x23e>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK)
 8007182:	2301      	movs	r3, #1
 8007184:	9901      	ldr	r1, [sp, #4]
 8007186:	f7fc fa69 	bl	800365c <disk_write>
 800718a:	2800      	cmp	r0, #0
 800718c:	f47f af13 	bne.w	8006fb6 <f_read+0x11e>
					fp->flag &= (BYTE) ~FA_DIRTY;
 8007190:	7d23      	ldrb	r3, [r4, #20]
 8007192:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007196:	7523      	strb	r3, [r4, #20]
 8007198:	7870      	ldrb	r0, [r6, #1]
 800719a:	e71b      	b.n	8006fd4 <f_read+0x13c>
	return cl + *tbl; /* Return the cluster number */
 800719c:	6853      	ldr	r3, [r2, #4]
 800719e:	4418      	add	r0, r3
 80071a0:	e7ab      	b.n	80070fa <f_read+0x262>
						clst = get_fat(&fp->obj, fp->clust); /* Follow cluster chain on the FAT */
 80071a2:	4608      	mov	r0, r1
 80071a4:	69e1      	ldr	r1, [r4, #28]
 80071a6:	f7fd f90d 	bl	80043c4 <get_fat.isra.9>
 80071aa:	e7a6      	b.n	80070fa <f_read+0x262>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc)
 80071ac:	6a23      	ldr	r3, [r4, #32]
 80071ae:	eba3 0808 	sub.w	r8, r3, r8
 80071b2:	9b02      	ldr	r3, [sp, #8]
 80071b4:	4598      	cmp	r8, r3
 80071b6:	d2ce      	bcs.n	8007156 <f_read+0x2be>
	if (cnt)
 80071b8:	2900      	cmp	r1, #0
 80071ba:	d0cc      	beq.n	8007156 <f_read+0x2be>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf,
 80071bc:	fb01 f808 	mul.w	r8, r1, r8
 80071c0:	9a01      	ldr	r2, [sp, #4]
 80071c2:	f108 0304 	add.w	r3, r8, #4
 80071c6:	9d05      	ldr	r5, [sp, #20]
 80071c8:	444b      	add	r3, r9
 80071ca:	eb09 0008 	add.w	r0, r9, r8
 80071ce:	42a8      	cmp	r0, r5
 80071d0:	bf38      	it	cc
 80071d2:	429a      	cmpcc	r2, r3
 80071d4:	4694      	mov	ip, r2
 80071d6:	d374      	bcc.n	80072c2 <f_read+0x42a>
 80071d8:	290b      	cmp	r1, #11
 80071da:	d972      	bls.n	80072c2 <f_read+0x42a>
 80071dc:	9a04      	ldr	r2, [sp, #16]
 80071de:	f101 3aff 	add.w	sl, r1, #4294967295
 80071e2:	4613      	mov	r3, r2
 80071e4:	3303      	adds	r3, #3
 80071e6:	4553      	cmp	r3, sl
 80071e8:	46d6      	mov	lr, sl
 80071ea:	d841      	bhi.n	8007270 <f_read+0x3d8>
 80071ec:	2a00      	cmp	r2, #0
 80071ee:	d065      	beq.n	80072bc <f_read+0x424>
			*d++ = *s++;
 80071f0:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80071f4:	2a01      	cmp	r2, #1
 80071f6:	7003      	strb	r3, [r0, #0]
 80071f8:	f100 0301 	add.w	r3, r0, #1
 80071fc:	f104 0c31 	add.w	ip, r4, #49	; 0x31
 8007200:	9307      	str	r3, [sp, #28]
 8007202:	d015      	beq.n	8007230 <f_read+0x398>
 8007204:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 8007208:	2a03      	cmp	r2, #3
 800720a:	7043      	strb	r3, [r0, #1]
 800720c:	f100 0302 	add.w	r3, r0, #2
 8007210:	f104 0c32 	add.w	ip, r4, #50	; 0x32
 8007214:	9307      	str	r3, [sp, #28]
		} while (--cnt);
 8007216:	f1a1 0a02 	sub.w	sl, r1, #2
 800721a:	d109      	bne.n	8007230 <f_read+0x398>
			*d++ = *s++;
 800721c:	1cc2      	adds	r2, r0, #3
 800721e:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 8007222:	9207      	str	r2, [sp, #28]
 8007224:	9a04      	ldr	r2, [sp, #16]
 8007226:	7083      	strb	r3, [r0, #2]
 8007228:	f104 0c33 	add.w	ip, r4, #51	; 0x33
		} while (--cnt);
 800722c:	f1a1 0a03 	sub.w	sl, r1, #3
 8007230:	1a8b      	subs	r3, r1, r2
 8007232:	4611      	mov	r1, r2
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf,
 8007234:	2000      	movs	r0, #0
 8007236:	469e      	mov	lr, r3
 8007238:	4442      	add	r2, r8
 800723a:	3130      	adds	r1, #48	; 0x30
 800723c:	9d02      	ldr	r5, [sp, #8]
 800723e:	444a      	add	r2, r9
 8007240:	ea4f 0893 	mov.w	r8, r3, lsr #2
 8007244:	4421      	add	r1, r4
			*d++ = *s++;
 8007246:	f851 3b04 	ldr.w	r3, [r1], #4
 800724a:	3001      	adds	r0, #1
 800724c:	4580      	cmp	r8, r0
 800724e:	f842 3b04 	str.w	r3, [r2], #4
 8007252:	d8f8      	bhi.n	8007246 <f_read+0x3ae>
 8007254:	9a07      	ldr	r2, [sp, #28]
 8007256:	f02e 0103 	bic.w	r1, lr, #3
 800725a:	9502      	str	r5, [sp, #8]
 800725c:	440a      	add	r2, r1
 800725e:	ebaa 0501 	sub.w	r5, sl, r1
 8007262:	4571      	cmp	r1, lr
 8007264:	9506      	str	r5, [sp, #24]
 8007266:	4610      	mov	r0, r2
 8007268:	448c      	add	ip, r1
 800726a:	d01f      	beq.n	80072ac <f_read+0x414>
 800726c:	f105 3eff 	add.w	lr, r5, #4294967295
 8007270:	f89c 3000 	ldrb.w	r3, [ip]
 8007274:	7003      	strb	r3, [r0, #0]
		} while (--cnt);
 8007276:	f1be 0f00 	cmp.w	lr, #0
 800727a:	d017      	beq.n	80072ac <f_read+0x414>
 800727c:	9a06      	ldr	r2, [sp, #24]
			*d++ = *s++;
 800727e:	f89c 3001 	ldrb.w	r3, [ip, #1]
		} while (--cnt);
 8007282:	2a02      	cmp	r2, #2
			*d++ = *s++;
 8007284:	7043      	strb	r3, [r0, #1]
		} while (--cnt);
 8007286:	d011      	beq.n	80072ac <f_read+0x414>
			*d++ = *s++;
 8007288:	f89c 3002 	ldrb.w	r3, [ip, #2]
		} while (--cnt);
 800728c:	2a03      	cmp	r2, #3
			*d++ = *s++;
 800728e:	7083      	strb	r3, [r0, #2]
		} while (--cnt);
 8007290:	d00c      	beq.n	80072ac <f_read+0x414>
			*d++ = *s++;
 8007292:	f89c 3003 	ldrb.w	r3, [ip, #3]
		} while (--cnt);
 8007296:	2a04      	cmp	r2, #4
			*d++ = *s++;
 8007298:	70c3      	strb	r3, [r0, #3]
		} while (--cnt);
 800729a:	d007      	beq.n	80072ac <f_read+0x414>
			*d++ = *s++;
 800729c:	f89c 3004 	ldrb.w	r3, [ip, #4]
		} while (--cnt);
 80072a0:	2a05      	cmp	r2, #5
			*d++ = *s++;
 80072a2:	7103      	strb	r3, [r0, #4]
		} while (--cnt);
 80072a4:	d002      	beq.n	80072ac <f_read+0x414>
			*d++ = *s++;
 80072a6:	f89c 3005 	ldrb.w	r3, [ip, #5]
 80072aa:	7143      	strb	r3, [r0, #5]
 80072ac:	89b1      	ldrh	r1, [r6, #12]
 80072ae:	e752      	b.n	8007156 <f_read+0x2be>
 80072b0:	9d03      	ldr	r5, [sp, #12]
 80072b2:	e626      	b.n	8006f02 <f_read+0x6a>
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE
 80072b4:	2e00      	cmp	r6, #0
 80072b6:	f43f ae02 	beq.w	8006ebe <f_read+0x26>
 80072ba:	e622      	b.n	8006f02 <f_read+0x6a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf,
 80072bc:	9007      	str	r0, [sp, #28]
 80072be:	468a      	mov	sl, r1
 80072c0:	e7b6      	b.n	8007230 <f_read+0x398>
 80072c2:	9b01      	ldr	r3, [sp, #4]
 80072c4:	9d02      	ldr	r5, [sp, #8]
 80072c6:	3801      	subs	r0, #1
 80072c8:	440b      	add	r3, r1
			*d++ = *s++;
 80072ca:	f81c 2b01 	ldrb.w	r2, [ip], #1
		} while (--cnt);
 80072ce:	4563      	cmp	r3, ip
			*d++ = *s++;
 80072d0:	f800 2f01 	strb.w	r2, [r0, #1]!
		} while (--cnt);
 80072d4:	d1f9      	bne.n	80072ca <f_read+0x432>
 80072d6:	9502      	str	r5, [sp, #8]
 80072d8:	e7e8      	b.n	80072ac <f_read+0x414>
 80072da:	ebab 0102 	sub.w	r1, fp, r2
 80072de:	9102      	str	r1, [sp, #8]
	if (cnt)
 80072e0:	4693      	mov	fp, r2
 80072e2:	e690      	b.n	8007006 <f_read+0x16e>

080072e4 <f_write>:
FRESULT f_write(FIL *fp, /* Pointer to the file object */
const void *buff, /* Pointer to the data to be written */
UINT btw, /* Number of bytes to write */
UINT *bw /* Pointer to number of bytes written */
)
{
 80072e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072e8:	4698      	mov	r8, r3
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*) buff;

	*bw = 0; /* Clear write byte counter */
 80072ea:	2300      	movs	r3, #0
{
 80072ec:	b087      	sub	sp, #28
	*bw = 0; /* Clear write byte counter */
 80072ee:	f8c8 3000 	str.w	r3, [r8]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id)
 80072f2:	b150      	cbz	r0, 800730a <f_write+0x26>
 80072f4:	6803      	ldr	r3, [r0, #0]
 80072f6:	4604      	mov	r4, r0
 80072f8:	b13b      	cbz	r3, 800730a <f_write+0x26>
 80072fa:	4616      	mov	r6, r2
 80072fc:	781a      	ldrb	r2, [r3, #0]
 80072fe:	b122      	cbz	r2, 800730a <f_write+0x26>
 8007300:	468b      	mov	fp, r1
 8007302:	88da      	ldrh	r2, [r3, #6]
 8007304:	8881      	ldrh	r1, [r0, #4]
 8007306:	4291      	cmp	r1, r2
 8007308:	d004      	beq.n	8007314 <f_write+0x30>
	FRESULT res = FR_INVALID_OBJECT;
 800730a:	2509      	movs	r5, #9
	}

	fp->flag |= FA_MODIFIED; /* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
 800730c:	4628      	mov	r0, r5
 800730e:	b007      	add	sp, #28
 8007310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8007314:	6958      	ldr	r0, [r3, #20]
 8007316:	f000 ffdb 	bl	80082d0 <ff_req_grant>
 800731a:	b908      	cbnz	r0, 8007320 <f_write+0x3c>
			res = FR_TIMEOUT;
 800731c:	250f      	movs	r5, #15
 800731e:	e7f5      	b.n	800730c <f_write+0x28>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT))
 8007320:	6823      	ldr	r3, [r4, #0]
 8007322:	7858      	ldrb	r0, [r3, #1]
 8007324:	f7fc f972 	bl	800360c <disk_status>
 8007328:	07c1      	lsls	r1, r0, #31
 800732a:	d506      	bpl.n	800733a <f_write+0x56>
				unlock_fs(obj->fs, FR_OK);
 800732c:	6823      	ldr	r3, [r4, #0]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE
 800732e:	2b00      	cmp	r3, #0
 8007330:	d0eb      	beq.n	800730a <f_write+0x26>
		ff_rel_grant(fs->sobj);
 8007332:	6958      	ldr	r0, [r3, #20]
 8007334:	f000 ffd6 	bl	80082e4 <ff_rel_grant>
 8007338:	e7e7      	b.n	800730a <f_write+0x26>
	if (res != FR_OK || (res = (FRESULT) fp->err) != FR_OK)
 800733a:	7d65      	ldrb	r5, [r4, #21]
	*fs = (res == FR_OK) ? obj->fs : 0; /* Corresponding filesystem object */
 800733c:	6827      	ldr	r7, [r4, #0]
	if (res != FR_OK || (res = (FRESULT) fp->err) != FR_OK)
 800733e:	b14d      	cbz	r5, 8007354 <f_write+0x70>
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE
 8007340:	2f00      	cmp	r7, #0
 8007342:	d0e3      	beq.n	800730c <f_write+0x28>
 8007344:	2d0c      	cmp	r5, #12
 8007346:	d0e1      	beq.n	800730c <f_write+0x28>
 8007348:	2d0b      	cmp	r5, #11
 800734a:	d0df      	beq.n	800730c <f_write+0x28>
			&& res != FR_TIMEOUT)
 800734c:	2d0f      	cmp	r5, #15
 800734e:	f040 8140 	bne.w	80075d2 <f_write+0x2ee>
 8007352:	e7db      	b.n	800730c <f_write+0x28>
	if (!(fp->flag & FA_WRITE))
 8007354:	7d23      	ldrb	r3, [r4, #20]
 8007356:	079a      	lsls	r2, r3, #30
 8007358:	d407      	bmi.n	800736a <f_write+0x86>
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE
 800735a:	2f00      	cmp	r7, #0
 800735c:	f000 812b 	beq.w	80075b6 <f_write+0x2d2>
		ff_rel_grant(fs->sobj);
 8007360:	6978      	ldr	r0, [r7, #20]
 8007362:	f000 ffbf 	bl	80082e4 <ff_rel_grant>
		LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8007366:	2507      	movs	r5, #7
 8007368:	e7d0      	b.n	800730c <f_write+0x28>
			&& (DWORD) (fp->fptr + btw) < (DWORD) fp->fptr)
 800736a:	69a0      	ldr	r0, [r4, #24]
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT)
 800736c:	42f0      	cmn	r0, r6
		btw = (UINT) (0xFFFFFFFF - (DWORD) fp->fptr);
 800736e:	bf28      	it	cs
 8007370:	43c6      	mvncs	r6, r0
	for (; btw;
 8007372:	2e00      	cmp	r6, #0
 8007374:	f000 81e8 	beq.w	8007748 <f_write+0x464>
 8007378:	f104 0330 	add.w	r3, r4, #48	; 0x30
 800737c:	9300      	str	r3, [sp, #0]
 800737e:	425b      	negs	r3, r3
 8007380:	f003 0303 	and.w	r3, r3, #3
 8007384:	9303      	str	r3, [sp, #12]
 8007386:	f104 0334 	add.w	r3, r4, #52	; 0x34
 800738a:	9304      	str	r3, [sp, #16]
 800738c:	9502      	str	r5, [sp, #8]
		if (fp->fptr % SS(fs) == 0)
 800738e:	89ba      	ldrh	r2, [r7, #12]
 8007390:	fbb0 f1f2 	udiv	r1, r0, r2
 8007394:	fb02 0311 	mls	r3, r2, r1, r0
 8007398:	2b00      	cmp	r3, #0
 800739a:	d152      	bne.n	8007442 <f_write+0x15e>
			csect = (UINT) (fp->fptr / SS(fs)) & (fs->csize - 1); /* Sector offset in the cluster */
 800739c:	f8b7 900a 	ldrh.w	r9, [r7, #10]
 80073a0:	f109 39ff 	add.w	r9, r9, #4294967295
			if (csect == 0)
 80073a4:	ea19 0901 	ands.w	r9, r9, r1
 80073a8:	d10f      	bne.n	80073ca <f_write+0xe6>
				if (fp->fptr == 0)
 80073aa:	2800      	cmp	r0, #0
 80073ac:	f040 80d9 	bne.w	8007562 <f_write+0x27e>
					clst = fp->obj.sclust; /* Follow from the origin */
 80073b0:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0)
 80073b2:	2800      	cmp	r0, #0
 80073b4:	f000 8101 	beq.w	80075ba <f_write+0x2d6>
				if (clst == 1)
 80073b8:	2801      	cmp	r0, #1
 80073ba:	f000 8142 	beq.w	8007642 <f_write+0x35e>
				if (clst == 0xFFFFFFFF)
 80073be:	1c43      	adds	r3, r0, #1
 80073c0:	d02c      	beq.n	800741c <f_write+0x138>
				if (fp->obj.sclust == 0)
 80073c2:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst; /* Update current cluster */
 80073c4:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0)
 80073c6:	b903      	cbnz	r3, 80073ca <f_write+0xe6>
					fp->obj.sclust = clst; /* Set start cluster if the first write */
 80073c8:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY)
 80073ca:	f994 3014 	ldrsb.w	r3, [r4, #20]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	f2c0 80e3 	blt.w	800759a <f_write+0x2b6>
	clst -= 2;
 80073d4:	69e5      	ldr	r5, [r4, #28]
	if (clst >= fs->n_fatent - 2)
 80073d6:	6a3b      	ldr	r3, [r7, #32]
	clst -= 2;
 80073d8:	3d02      	subs	r5, #2
	if (clst >= fs->n_fatent - 2)
 80073da:	3b02      	subs	r3, #2
 80073dc:	429d      	cmp	r5, r3
 80073de:	f080 8130 	bcs.w	8007642 <f_write+0x35e>
	return clst * fs->csize + fs->database;
 80073e2:	897b      	ldrh	r3, [r7, #10]
 80073e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80073e6:	fb03 2505 	mla	r5, r3, r5, r2
			if (!sect)
 80073ea:	2d00      	cmp	r5, #0
 80073ec:	f000 8129 	beq.w	8007642 <f_write+0x35e>
			cc = btw / SS(fs); /* When remaining bytes >= sector size, */
 80073f0:	89ba      	ldrh	r2, [r7, #12]
			sect += csect;
 80073f2:	444d      	add	r5, r9
			cc = btw / SS(fs); /* When remaining bytes >= sector size, */
 80073f4:	fbb6 faf2 	udiv	sl, r6, r2
			if (cc)
 80073f8:	f1ba 0f00 	cmp.w	sl, #0
 80073fc:	d014      	beq.n	8007428 <f_write+0x144>
				if (csect + cc > fs->csize)
 80073fe:	eb09 020a 	add.w	r2, r9, sl
 8007402:	429a      	cmp	r2, r3
					cc = fs->csize - csect;
 8007404:	bf88      	it	hi
 8007406:	eba3 0a09 	subhi.w	sl, r3, r9
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK)
 800740a:	4653      	mov	r3, sl
 800740c:	462a      	mov	r2, r5
 800740e:	4659      	mov	r1, fp
 8007410:	7878      	ldrb	r0, [r7, #1]
 8007412:	f7fc f923 	bl	800365c <disk_write>
 8007416:	2800      	cmp	r0, #0
 8007418:	f000 80e2 	beq.w	80075e0 <f_write+0x2fc>
				ABORT(fs, FR_DISK_ERR);
 800741c:	2501      	movs	r5, #1
 800741e:	7565      	strb	r5, [r4, #21]
		ff_rel_grant(fs->sobj);
 8007420:	6978      	ldr	r0, [r7, #20]
 8007422:	f000 ff5f 	bl	80082e4 <ff_rel_grant>
 8007426:	e771      	b.n	800730c <f_write+0x28>
			if (fp->sect != sect && /* Fill sector cache with file data */
 8007428:	6a23      	ldr	r3, [r4, #32]
 800742a:	69a0      	ldr	r0, [r4, #24]
 800742c:	42ab      	cmp	r3, r5
 800742e:	d003      	beq.n	8007438 <f_write+0x154>
 8007430:	68e3      	ldr	r3, [r4, #12]
 8007432:	4283      	cmp	r3, r0
 8007434:	f200 80f1 	bhi.w	800761a <f_write+0x336>
 8007438:	fbb0 f3f2 	udiv	r3, r0, r2
 800743c:	fb02 0313 	mls	r3, r2, r3, r0
			fp->sect = sect;
 8007440:	6225      	str	r5, [r4, #32]
		wcnt = SS(fs) - (UINT) fp->fptr % SS(fs); /* Number of bytes left in the sector */
 8007442:	1ad2      	subs	r2, r2, r3
		if (wcnt > btw)
 8007444:	4296      	cmp	r6, r2
 8007446:	d31b      	bcc.n	8007480 <f_write+0x19c>
	if (cnt)
 8007448:	2a00      	cmp	r2, #0
 800744a:	f040 8184 	bne.w	8007756 <f_write+0x472>
		fp->flag |= FA_DIRTY;
 800744e:	7d23      	ldrb	r3, [r4, #20]
 8007450:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007454:	7523      	strb	r3, [r4, #20]
					(fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw +=
 8007456:	68e3      	ldr	r3, [r4, #12]
			wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize =
 8007458:	4410      	add	r0, r2
					(fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw +=
 800745a:	4283      	cmp	r3, r0
 800745c:	bf38      	it	cc
 800745e:	4603      	movcc	r3, r0
 8007460:	4619      	mov	r1, r3
 8007462:	f8d8 3000 	ldr.w	r3, [r8]
			wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize =
 8007466:	61a0      	str	r0, [r4, #24]
					(fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw +=
 8007468:	441a      	add	r2, r3
			wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize =
 800746a:	60e1      	str	r1, [r4, #12]
					(fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw +=
 800746c:	f8c8 2000 	str.w	r2, [r8]
	for (; btw;
 8007470:	2e00      	cmp	r6, #0
 8007472:	d18c      	bne.n	800738e <f_write+0xaa>
 8007474:	7d23      	ldrb	r3, [r4, #20]
 8007476:	9d02      	ldr	r5, [sp, #8]
	fp->flag |= FA_MODIFIED; /* Set file change flag */
 8007478:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800747c:	7523      	strb	r3, [r4, #20]
 800747e:	e0a8      	b.n	80075d2 <f_write+0x2ee>
 8007480:	2200      	movs	r2, #0
 8007482:	9201      	str	r2, [sp, #4]
 8007484:	9900      	ldr	r1, [sp, #0]
 8007486:	1d1a      	adds	r2, r3, #4
 8007488:	440a      	add	r2, r1
 800748a:	18c8      	adds	r0, r1, r3
 800748c:	f10b 0104 	add.w	r1, fp, #4
 8007490:	4288      	cmp	r0, r1
 8007492:	bf38      	it	cc
 8007494:	4593      	cmpcc	fp, r2
 8007496:	f0c0 80b6 	bcc.w	8007606 <f_write+0x322>
 800749a:	2e0b      	cmp	r6, #11
 800749c:	f240 80b3 	bls.w	8007606 <f_write+0x322>
 80074a0:	f1cb 0200 	rsb	r2, fp, #0
 80074a4:	f012 0203 	ands.w	r2, r2, #3
 80074a8:	f106 3cff 	add.w	ip, r6, #4294967295
 80074ac:	f000 80a8 	beq.w	8007600 <f_write+0x31c>
			*d++ = *s++;
 80074b0:	f89b 1000 	ldrb.w	r1, [fp]
 80074b4:	2a01      	cmp	r2, #1
 80074b6:	7001      	strb	r1, [r0, #0]
 80074b8:	f10b 0a01 	add.w	sl, fp, #1
 80074bc:	f100 0101 	add.w	r1, r0, #1
 80074c0:	d069      	beq.n	8007596 <f_write+0x2b2>
 80074c2:	f89b 1001 	ldrb.w	r1, [fp, #1]
 80074c6:	2a03      	cmp	r2, #3
 80074c8:	7041      	strb	r1, [r0, #1]
 80074ca:	f10b 0a02 	add.w	sl, fp, #2
 80074ce:	f100 0102 	add.w	r1, r0, #2
		} while (--cnt);
 80074d2:	f1a6 0c02 	sub.w	ip, r6, #2
 80074d6:	d15e      	bne.n	8007596 <f_write+0x2b2>
			*d++ = *s++;
 80074d8:	f89b 1002 	ldrb.w	r1, [fp, #2]
 80074dc:	f10b 0a03 	add.w	sl, fp, #3
 80074e0:	7081      	strb	r1, [r0, #2]
		} while (--cnt);
 80074e2:	f1a6 0c03 	sub.w	ip, r6, #3
			*d++ = *s++;
 80074e6:	3003      	adds	r0, #3
 80074e8:	2100      	movs	r1, #0
 80074ea:	9d00      	ldr	r5, [sp, #0]
 80074ec:	4413      	add	r3, r2
 80074ee:	eba6 0902 	sub.w	r9, r6, r2
 80074f2:	442b      	add	r3, r5
 80074f4:	445a      	add	r2, fp
 80074f6:	ea4f 0e99 	mov.w	lr, r9, lsr #2
 80074fa:	f852 5b04 	ldr.w	r5, [r2], #4
 80074fe:	3101      	adds	r1, #1
 8007500:	458e      	cmp	lr, r1
 8007502:	f843 5b04 	str.w	r5, [r3], #4
 8007506:	d8f8      	bhi.n	80074fa <f_write+0x216>
 8007508:	f029 0303 	bic.w	r3, r9, #3
 800750c:	4599      	cmp	r9, r3
 800750e:	ebac 0c03 	sub.w	ip, ip, r3
 8007512:	eb00 0203 	add.w	r2, r0, r3
 8007516:	eb0a 0103 	add.w	r1, sl, r3
 800751a:	d020      	beq.n	800755e <f_write+0x27a>
 800751c:	f81a 5003 	ldrb.w	r5, [sl, r3]
		} while (--cnt);
 8007520:	f1bc 0f01 	cmp.w	ip, #1
			*d++ = *s++;
 8007524:	54c5      	strb	r5, [r0, r3]
		} while (--cnt);
 8007526:	d01a      	beq.n	800755e <f_write+0x27a>
			*d++ = *s++;
 8007528:	784b      	ldrb	r3, [r1, #1]
		} while (--cnt);
 800752a:	f1bc 0f02 	cmp.w	ip, #2
			*d++ = *s++;
 800752e:	7053      	strb	r3, [r2, #1]
		} while (--cnt);
 8007530:	d015      	beq.n	800755e <f_write+0x27a>
			*d++ = *s++;
 8007532:	788b      	ldrb	r3, [r1, #2]
		} while (--cnt);
 8007534:	f1bc 0f03 	cmp.w	ip, #3
			*d++ = *s++;
 8007538:	7093      	strb	r3, [r2, #2]
		} while (--cnt);
 800753a:	d010      	beq.n	800755e <f_write+0x27a>
			*d++ = *s++;
 800753c:	78cb      	ldrb	r3, [r1, #3]
		} while (--cnt);
 800753e:	f1bc 0f04 	cmp.w	ip, #4
			*d++ = *s++;
 8007542:	70d3      	strb	r3, [r2, #3]
		} while (--cnt);
 8007544:	d00b      	beq.n	800755e <f_write+0x27a>
			*d++ = *s++;
 8007546:	790b      	ldrb	r3, [r1, #4]
		} while (--cnt);
 8007548:	f1bc 0f05 	cmp.w	ip, #5
			*d++ = *s++;
 800754c:	7113      	strb	r3, [r2, #4]
		} while (--cnt);
 800754e:	d006      	beq.n	800755e <f_write+0x27a>
			*d++ = *s++;
 8007550:	794b      	ldrb	r3, [r1, #5]
 8007552:	44b3      	add	fp, r6
 8007554:	7153      	strb	r3, [r2, #5]
 8007556:	4632      	mov	r2, r6
 8007558:	69a0      	ldr	r0, [r4, #24]
 800755a:	9e01      	ldr	r6, [sp, #4]
 800755c:	e777      	b.n	800744e <f_write+0x16a>
 800755e:	44b3      	add	fp, r6
 8007560:	e7f9      	b.n	8007556 <f_write+0x272>
					if (fp->cltbl)
 8007562:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8007564:	2d00      	cmp	r5, #0
 8007566:	d067      	beq.n	8007638 <f_write+0x354>
						clst = clmt_clust(fp, fp->fptr); /* Get cluster# from the CLMT */
 8007568:	6821      	ldr	r1, [r4, #0]
		ncl = *tbl++; /* Number of cluters in the fragment */
 800756a:	686a      	ldr	r2, [r5, #4]
	cl = (DWORD) (ofs / SS(fs) / fs->csize); /* Cluster order from top of the file */
 800756c:	898b      	ldrh	r3, [r1, #12]
 800756e:	8949      	ldrh	r1, [r1, #10]
 8007570:	fbb0 f0f3 	udiv	r0, r0, r3
	tbl = fp->cltbl + 1; /* Top of CLMT */
 8007574:	1d2b      	adds	r3, r5, #4
	cl = (DWORD) (ofs / SS(fs) / fs->csize); /* Cluster order from top of the file */
 8007576:	fbb0 f0f1 	udiv	r0, r0, r1
		if (ncl == 0)
 800757a:	2a00      	cmp	r2, #0
 800757c:	f43f af7a 	beq.w	8007474 <f_write+0x190>
		if (cl < ncl)
 8007580:	4290      	cmp	r0, r2
 8007582:	d202      	bcs.n	800758a <f_write+0x2a6>
 8007584:	e055      	b.n	8007632 <f_write+0x34e>
 8007586:	4282      	cmp	r2, r0
 8007588:	d853      	bhi.n	8007632 <f_write+0x34e>
		cl -= ncl;
 800758a:	1a80      	subs	r0, r0, r2
		ncl = *tbl++; /* Number of cluters in the fragment */
 800758c:	f853 2f08 	ldr.w	r2, [r3, #8]!
		if (ncl == 0)
 8007590:	2a00      	cmp	r2, #0
 8007592:	d1f8      	bne.n	8007586 <f_write+0x2a2>
 8007594:	e76e      	b.n	8007474 <f_write+0x190>
			*d++ = *s++;
 8007596:	4608      	mov	r0, r1
 8007598:	e7a6      	b.n	80074e8 <f_write+0x204>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK)
 800759a:	2301      	movs	r3, #1
 800759c:	6a22      	ldr	r2, [r4, #32]
 800759e:	9900      	ldr	r1, [sp, #0]
 80075a0:	7878      	ldrb	r0, [r7, #1]
 80075a2:	f7fc f85b 	bl	800365c <disk_write>
 80075a6:	2800      	cmp	r0, #0
 80075a8:	f47f af38 	bne.w	800741c <f_write+0x138>
				fp->flag &= (BYTE) ~FA_DIRTY;
 80075ac:	7d23      	ldrb	r3, [r4, #20]
 80075ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075b2:	7523      	strb	r3, [r4, #20]
 80075b4:	e70e      	b.n	80073d4 <f_write+0xf0>
		LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80075b6:	2507      	movs	r5, #7
 80075b8:	e6a8      	b.n	800730c <f_write+0x28>
						clst = create_chain(&fp->obj, 0); /* create a new cluster chain */
 80075ba:	4649      	mov	r1, r9
 80075bc:	4620      	mov	r0, r4
 80075be:	f7fd f83f 	bl	8004640 <create_chain>
				if (clst == 0)
 80075c2:	2800      	cmp	r0, #0
 80075c4:	f47f aef8 	bne.w	80073b8 <f_write+0xd4>
	fp->flag |= FA_MODIFIED; /* Set file change flag */
 80075c8:	7d23      	ldrb	r3, [r4, #20]
 80075ca:	9d02      	ldr	r5, [sp, #8]
 80075cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075d0:	7523      	strb	r3, [r4, #20]
		ff_rel_grant(fs->sobj);
 80075d2:	6978      	ldr	r0, [r7, #20]
 80075d4:	f000 fe86 	bl	80082e4 <ff_rel_grant>
}
 80075d8:	4628      	mov	r0, r5
 80075da:	b007      	add	sp, #28
 80075dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (fp->sect - sect < cc)
 80075e0:	6a21      	ldr	r1, [r4, #32]
 80075e2:	89bb      	ldrh	r3, [r7, #12]
 80075e4:	1b4d      	subs	r5, r1, r5
 80075e6:	4555      	cmp	r5, sl
 80075e8:	d204      	bcs.n	80075f4 <f_write+0x310>
	if (cnt)
 80075ea:	bb83      	cbnz	r3, 800764e <f_write+0x36a>
					fp->flag &= (BYTE) ~FA_DIRTY;
 80075ec:	7d22      	ldrb	r2, [r4, #20]
 80075ee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80075f2:	7522      	strb	r2, [r4, #20]
				wcnt = SS(fs) * cc; /* Number of bytes transferred */
 80075f4:	fb0a f203 	mul.w	r2, sl, r3
 80075f8:	69a0      	ldr	r0, [r4, #24]
 80075fa:	4493      	add	fp, r2
 80075fc:	1ab6      	subs	r6, r6, r2
				continue;
 80075fe:	e72a      	b.n	8007456 <f_write+0x172>
			*d++ = *s++;
 8007600:	46da      	mov	sl, fp
 8007602:	46b4      	mov	ip, r6
 8007604:	e770      	b.n	80074e8 <f_write+0x204>
 8007606:	465b      	mov	r3, fp
 8007608:	3801      	subs	r0, #1
 800760a:	44b3      	add	fp, r6
 800760c:	f813 2b01 	ldrb.w	r2, [r3], #1
		} while (--cnt);
 8007610:	455b      	cmp	r3, fp
			*d++ = *s++;
 8007612:	f800 2f01 	strb.w	r2, [r0, #1]!
		} while (--cnt);
 8007616:	d1f9      	bne.n	800760c <f_write+0x328>
 8007618:	e79d      	b.n	8007556 <f_write+0x272>
					&& disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)
 800761a:	2301      	movs	r3, #1
 800761c:	462a      	mov	r2, r5
 800761e:	9900      	ldr	r1, [sp, #0]
 8007620:	7878      	ldrb	r0, [r7, #1]
 8007622:	f7fc f80d 	bl	8003640 <disk_read>
 8007626:	2800      	cmp	r0, #0
 8007628:	f47f aef8 	bne.w	800741c <f_write+0x138>
 800762c:	89ba      	ldrh	r2, [r7, #12]
 800762e:	69a0      	ldr	r0, [r4, #24]
 8007630:	e702      	b.n	8007438 <f_write+0x154>
	return cl + *tbl; /* Return the cluster number */
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	4418      	add	r0, r3
 8007636:	e7c4      	b.n	80075c2 <f_write+0x2de>
						clst = create_chain(&fp->obj, fp->clust); /* Follow or stretch cluster chain on the FAT */
 8007638:	69e1      	ldr	r1, [r4, #28]
 800763a:	4620      	mov	r0, r4
 800763c:	f7fd f800 	bl	8004640 <create_chain>
 8007640:	e7bf      	b.n	80075c2 <f_write+0x2de>
				ABORT(fs, FR_INT_ERR);
 8007642:	2502      	movs	r5, #2
 8007644:	7565      	strb	r5, [r4, #21]
		ff_rel_grant(fs->sobj);
 8007646:	6978      	ldr	r0, [r7, #20]
 8007648:	f000 fe4c 	bl	80082e4 <ff_rel_grant>
 800764c:	e65e      	b.n	800730c <f_write+0x28>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)),
 800764e:	fb05 f203 	mul.w	r2, r5, r3
 8007652:	9904      	ldr	r1, [sp, #16]
 8007654:	1d10      	adds	r0, r2, #4
 8007656:	9d00      	ldr	r5, [sp, #0]
 8007658:	9205      	str	r2, [sp, #20]
 800765a:	4458      	add	r0, fp
 800765c:	445a      	add	r2, fp
 800765e:	428a      	cmp	r2, r1
 8007660:	bf38      	it	cc
 8007662:	4285      	cmpcc	r5, r0
 8007664:	46ae      	mov	lr, r5
 8007666:	d362      	bcc.n	800772e <f_write+0x44a>
 8007668:	2b0b      	cmp	r3, #11
 800766a:	d960      	bls.n	800772e <f_write+0x44a>
 800766c:	9903      	ldr	r1, [sp, #12]
 800766e:	f103 39ff 	add.w	r9, r3, #4294967295
 8007672:	1cc8      	adds	r0, r1, #3
 8007674:	4548      	cmp	r0, r9
 8007676:	464d      	mov	r5, r9
 8007678:	d83c      	bhi.n	80076f4 <f_write+0x410>
 800767a:	460d      	mov	r5, r1
 800767c:	2900      	cmp	r1, #0
 800767e:	d060      	beq.n	8007742 <f_write+0x45e>
			*d++ = *s++;
 8007680:	7810      	ldrb	r0, [r2, #0]
 8007682:	1c51      	adds	r1, r2, #1
 8007684:	2d01      	cmp	r5, #1
 8007686:	9101      	str	r1, [sp, #4]
 8007688:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
 800768c:	f104 0e31 	add.w	lr, r4, #49	; 0x31
 8007690:	d013      	beq.n	80076ba <f_write+0x3d6>
 8007692:	7850      	ldrb	r0, [r2, #1]
 8007694:	1c91      	adds	r1, r2, #2
 8007696:	2d03      	cmp	r5, #3
 8007698:	9101      	str	r1, [sp, #4]
 800769a:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
 800769e:	f104 0e32 	add.w	lr, r4, #50	; 0x32
		} while (--cnt);
 80076a2:	f1a3 0902 	sub.w	r9, r3, #2
 80076a6:	d108      	bne.n	80076ba <f_write+0x3d6>
			*d++ = *s++;
 80076a8:	7890      	ldrb	r0, [r2, #2]
 80076aa:	3203      	adds	r2, #3
 80076ac:	9201      	str	r2, [sp, #4]
 80076ae:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
 80076b2:	f104 0e33 	add.w	lr, r4, #51	; 0x33
		} while (--cnt);
 80076b6:	f1a3 0903 	sub.w	r9, r3, #3
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)),
 80076ba:	2200      	movs	r2, #0
 80076bc:	9803      	ldr	r0, [sp, #12]
 80076be:	eba3 0c00 	sub.w	ip, r3, r0
 80076c2:	9b05      	ldr	r3, [sp, #20]
 80076c4:	f100 0130 	add.w	r1, r0, #48	; 0x30
 80076c8:	4403      	add	r3, r0
 80076ca:	445b      	add	r3, fp
 80076cc:	ea4f 059c 	mov.w	r5, ip, lsr #2
 80076d0:	4421      	add	r1, r4
			*d++ = *s++;
 80076d2:	f853 0b04 	ldr.w	r0, [r3], #4
 80076d6:	3201      	adds	r2, #1
 80076d8:	4295      	cmp	r5, r2
 80076da:	f841 0b04 	str.w	r0, [r1], #4
 80076de:	d8f8      	bhi.n	80076d2 <f_write+0x3ee>
 80076e0:	f02c 0103 	bic.w	r1, ip, #3
 80076e4:	9a01      	ldr	r2, [sp, #4]
 80076e6:	4561      	cmp	r1, ip
 80076e8:	eba9 0301 	sub.w	r3, r9, r1
 80076ec:	448e      	add	lr, r1
 80076ee:	440a      	add	r2, r1
 80076f0:	d01b      	beq.n	800772a <f_write+0x446>
 80076f2:	1e5d      	subs	r5, r3, #1
 80076f4:	7811      	ldrb	r1, [r2, #0]
 80076f6:	f88e 1000 	strb.w	r1, [lr]
		} while (--cnt);
 80076fa:	b1b5      	cbz	r5, 800772a <f_write+0x446>
			*d++ = *s++;
 80076fc:	7851      	ldrb	r1, [r2, #1]
		} while (--cnt);
 80076fe:	2b02      	cmp	r3, #2
			*d++ = *s++;
 8007700:	f88e 1001 	strb.w	r1, [lr, #1]
		} while (--cnt);
 8007704:	d011      	beq.n	800772a <f_write+0x446>
			*d++ = *s++;
 8007706:	7891      	ldrb	r1, [r2, #2]
		} while (--cnt);
 8007708:	2b03      	cmp	r3, #3
			*d++ = *s++;
 800770a:	f88e 1002 	strb.w	r1, [lr, #2]
		} while (--cnt);
 800770e:	d00c      	beq.n	800772a <f_write+0x446>
			*d++ = *s++;
 8007710:	78d1      	ldrb	r1, [r2, #3]
		} while (--cnt);
 8007712:	2b04      	cmp	r3, #4
			*d++ = *s++;
 8007714:	f88e 1003 	strb.w	r1, [lr, #3]
		} while (--cnt);
 8007718:	d007      	beq.n	800772a <f_write+0x446>
			*d++ = *s++;
 800771a:	7911      	ldrb	r1, [r2, #4]
		} while (--cnt);
 800771c:	2b05      	cmp	r3, #5
			*d++ = *s++;
 800771e:	f88e 1004 	strb.w	r1, [lr, #4]
		} while (--cnt);
 8007722:	d002      	beq.n	800772a <f_write+0x446>
			*d++ = *s++;
 8007724:	7953      	ldrb	r3, [r2, #5]
 8007726:	f88e 3005 	strb.w	r3, [lr, #5]
 800772a:	89bb      	ldrh	r3, [r7, #12]
 800772c:	e75e      	b.n	80075ec <f_write+0x308>
 800772e:	4413      	add	r3, r2
 8007730:	f104 012f 	add.w	r1, r4, #47	; 0x2f
 8007734:	f812 0b01 	ldrb.w	r0, [r2], #1
		} while (--cnt);
 8007738:	4293      	cmp	r3, r2
			*d++ = *s++;
 800773a:	f801 0f01 	strb.w	r0, [r1, #1]!
		} while (--cnt);
 800773e:	d1f9      	bne.n	8007734 <f_write+0x450>
 8007740:	e7f3      	b.n	800772a <f_write+0x446>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)),
 8007742:	9201      	str	r2, [sp, #4]
 8007744:	4699      	mov	r9, r3
 8007746:	e7b8      	b.n	80076ba <f_write+0x3d6>
	fp->flag |= FA_MODIFIED; /* Set file change flag */
 8007748:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800774c:	7523      	strb	r3, [r4, #20]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE
 800774e:	2f00      	cmp	r7, #0
 8007750:	f43f addc 	beq.w	800730c <f_write+0x28>
 8007754:	e73d      	b.n	80075d2 <f_write+0x2ee>
 8007756:	1ab1      	subs	r1, r6, r2
 8007758:	9101      	str	r1, [sp, #4]
	if (cnt)
 800775a:	4616      	mov	r6, r2
 800775c:	e692      	b.n	8007484 <f_write+0x1a0>
 800775e:	bf00      	nop

08007760 <f_close>:
/* Close File                                                            */
/*-----------------------------------------------------------------------*/

FRESULT f_close(FIL *fp /* Pointer to the file object to be closed */
)
{
 8007760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id)
 8007764:	b138      	cbz	r0, 8007776 <f_close+0x16>
 8007766:	6803      	ldr	r3, [r0, #0]
 8007768:	b12b      	cbz	r3, 8007776 <f_close+0x16>
 800776a:	781a      	ldrb	r2, [r3, #0]
 800776c:	b11a      	cbz	r2, 8007776 <f_close+0x16>
 800776e:	8881      	ldrh	r1, [r0, #4]
 8007770:	88da      	ldrh	r2, [r3, #6]
 8007772:	4291      	cmp	r1, r2
 8007774:	d003      	beq.n	800777e <f_close+0x1e>
	FRESULT res = FR_INVALID_OBJECT;
 8007776:	2509      	movs	r5, #9
			unlock_fs(fs, FR_OK); /* Unlock volume */
#endif
		}
	}
	return res;
}
 8007778:	4628      	mov	r0, r5
 800777a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800777e:	4604      	mov	r4, r0
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8007780:	6958      	ldr	r0, [r3, #20]
 8007782:	f000 fda5 	bl	80082d0 <ff_req_grant>
 8007786:	b918      	cbnz	r0, 8007790 <f_close+0x30>
			res = FR_TIMEOUT;
 8007788:	250f      	movs	r5, #15
}
 800778a:	4628      	mov	r0, r5
 800778c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (!(disk_status(obj->fs->drv) & STA_NOINIT))
 8007790:	6823      	ldr	r3, [r4, #0]
 8007792:	7858      	ldrb	r0, [r3, #1]
 8007794:	f7fb ff3a 	bl	800360c <disk_status>
 8007798:	07c1      	lsls	r1, r0, #31
 800779a:	d506      	bpl.n	80077aa <f_close+0x4a>
				unlock_fs(obj->fs, FR_OK);
 800779c:	6823      	ldr	r3, [r4, #0]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d0e9      	beq.n	8007776 <f_close+0x16>
		ff_rel_grant(fs->sobj);
 80077a2:	6958      	ldr	r0, [r3, #20]
 80077a4:	f000 fd9e 	bl	80082e4 <ff_rel_grant>
 80077a8:	e7e5      	b.n	8007776 <f_close+0x16>
		if (fp->flag & FA_MODIFIED)
 80077aa:	7d23      	ldrb	r3, [r4, #20]
	*fs = (res == FR_OK) ? obj->fs : 0; /* Corresponding filesystem object */
 80077ac:	6826      	ldr	r6, [r4, #0]
		if (fp->flag & FA_MODIFIED)
 80077ae:	065a      	lsls	r2, r3, #25
 80077b0:	d429      	bmi.n	8007806 <f_close+0xa6>
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE
 80077b2:	2e00      	cmp	r6, #0
 80077b4:	d0df      	beq.n	8007776 <f_close+0x16>
		ff_rel_grant(fs->sobj);
 80077b6:	6970      	ldr	r0, [r6, #20]
 80077b8:	f000 fd94 	bl	80082e4 <ff_rel_grant>
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id)
 80077bc:	6823      	ldr	r3, [r4, #0]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d0d9      	beq.n	8007776 <f_close+0x16>
 80077c2:	781a      	ldrb	r2, [r3, #0]
 80077c4:	2a00      	cmp	r2, #0
 80077c6:	d0d6      	beq.n	8007776 <f_close+0x16>
 80077c8:	88a1      	ldrh	r1, [r4, #4]
 80077ca:	88da      	ldrh	r2, [r3, #6]
 80077cc:	4291      	cmp	r1, r2
 80077ce:	d1d2      	bne.n	8007776 <f_close+0x16>
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 80077d0:	6958      	ldr	r0, [r3, #20]
 80077d2:	f000 fd7d 	bl	80082d0 <ff_req_grant>
 80077d6:	2800      	cmp	r0, #0
 80077d8:	d0d6      	beq.n	8007788 <f_close+0x28>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT))
 80077da:	6823      	ldr	r3, [r4, #0]
 80077dc:	7858      	ldrb	r0, [r3, #1]
 80077de:	f7fb ff15 	bl	800360c <disk_status>
 80077e2:	f010 0001 	ands.w	r0, r0, #1
 80077e6:	d1d9      	bne.n	800779c <f_close+0x3c>
	if (--i < _FS_LOCK)
 80077e8:	6923      	ldr	r3, [r4, #16]
	*fs = (res == FR_OK) ? obj->fs : 0; /* Corresponding filesystem object */
 80077ea:	6822      	ldr	r2, [r4, #0]
	if (--i < _FS_LOCK)
 80077ec:	3b01      	subs	r3, #1
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	f240 80a1 	bls.w	8007936 <f_close+0x1d6>
		res = FR_INT_ERR; /* Invalid index nunber */
 80077f4:	2502      	movs	r5, #2
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE
 80077f6:	2a00      	cmp	r2, #0
 80077f8:	d0be      	beq.n	8007778 <f_close+0x18>
		ff_rel_grant(fs->sobj);
 80077fa:	6950      	ldr	r0, [r2, #20]
 80077fc:	f000 fd72 	bl	80082e4 <ff_rel_grant>
}
 8007800:	4628      	mov	r0, r5
 8007802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (fp->flag & FA_DIRTY)
 8007806:	061b      	lsls	r3, r3, #24
 8007808:	f100 8088 	bmi.w	800791c <f_close+0x1bc>
			tm = GET_FATTIME(); /* Modified time */
 800780c:	f7fb fe80 	bl	8003510 <get_fattime>
				res = move_window(fs, fp->dir_sect);
 8007810:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
	if (sector != fs->winsect)
 8007814:	6bb7      	ldr	r7, [r6, #56]	; 0x38
			tm = GET_FATTIME(); /* Modified time */
 8007816:	4605      	mov	r5, r0
	if (sector != fs->winsect)
 8007818:	45b8      	cmp	r8, r7
 800781a:	d037      	beq.n	800788c <f_close+0x12c>
	if (fs->wflag)
 800781c:	78f3      	ldrb	r3, [r6, #3]
 800781e:	7870      	ldrb	r0, [r6, #1]
 8007820:	f106 093c 	add.w	r9, r6, #60	; 0x3c
 8007824:	b313      	cbz	r3, 800786c <f_close+0x10c>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 8007826:	2301      	movs	r3, #1
 8007828:	463a      	mov	r2, r7
 800782a:	4649      	mov	r1, r9
 800782c:	f7fb ff16 	bl	800365c <disk_write>
 8007830:	2800      	cmp	r0, #0
 8007832:	f040 8094 	bne.w	800795e <f_close+0x1fe>
			if (wsect - fs->fatbase < fs->fsize)
 8007836:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8007838:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800783a:	1aba      	subs	r2, r7, r2
 800783c:	429a      	cmp	r2, r3
			fs->wflag = 0;
 800783e:	70f0      	strb	r0, [r6, #3]
 8007840:	7870      	ldrb	r0, [r6, #1]
			if (wsect - fs->fatbase < fs->fsize)
 8007842:	d213      	bcs.n	800786c <f_close+0x10c>
				for (nf = fs->n_fats; nf >= 2; nf--)
 8007844:	f896 a002 	ldrb.w	sl, [r6, #2]
 8007848:	f1ba 0f01 	cmp.w	sl, #1
 800784c:	d802      	bhi.n	8007854 <f_close+0xf4>
 800784e:	e00d      	b.n	800786c <f_close+0x10c>
 8007850:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007852:	7870      	ldrb	r0, [r6, #1]
					wsect += fs->fsize;
 8007854:	441f      	add	r7, r3
				for (nf = fs->n_fats; nf >= 2; nf--)
 8007856:	f10a 3aff 	add.w	sl, sl, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 800785a:	463a      	mov	r2, r7
 800785c:	2301      	movs	r3, #1
 800785e:	4649      	mov	r1, r9
 8007860:	f7fb fefc 	bl	800365c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--)
 8007864:	f1ba 0f01 	cmp.w	sl, #1
 8007868:	d1f2      	bne.n	8007850 <f_close+0xf0>
 800786a:	7870      	ldrb	r0, [r6, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
 800786c:	4649      	mov	r1, r9
 800786e:	2301      	movs	r3, #1
 8007870:	4642      	mov	r2, r8
 8007872:	f7fb fee5 	bl	8003640 <disk_read>
 8007876:	b138      	cbz	r0, 8007888 <f_close+0x128>
			fs->winsect = sector;
 8007878:	f04f 33ff 	mov.w	r3, #4294967295
		ff_rel_grant(fs->sobj);
 800787c:	6970      	ldr	r0, [r6, #20]
			fs->winsect = sector;
 800787e:	63b3      	str	r3, [r6, #56]	; 0x38
		ff_rel_grant(fs->sobj);
 8007880:	f000 fd30 	bl	80082e4 <ff_rel_grant>
				res = FR_DISK_ERR;
 8007884:	2501      	movs	r5, #1
 8007886:	e777      	b.n	8007778 <f_close+0x18>
			fs->winsect = sector;
 8007888:	f8c6 8038 	str.w	r8, [r6, #56]	; 0x38
					dir = fp->dir_ptr;
 800788c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC; /* Set archive bit */
 800788e:	7ada      	ldrb	r2, [r3, #11]
 8007890:	f042 0220 	orr.w	r2, r2, #32
 8007894:	72da      	strb	r2, [r3, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust); /* Update file allocation info  */
 8007896:	68a2      	ldr	r2, [r4, #8]
 8007898:	6821      	ldr	r1, [r4, #0]
	val >>= 8;
 800789a:	f3c2 2007 	ubfx	r0, r2, #8, #8
	*ptr++ = (BYTE) val;
 800789e:	76d8      	strb	r0, [r3, #27]
	*ptr++ = (BYTE) val;
 80078a0:	769a      	strb	r2, [r3, #26]
	if (fs->fs_type == FS_FAT32)
 80078a2:	7809      	ldrb	r1, [r1, #0]
 80078a4:	2903      	cmp	r1, #3
 80078a6:	d103      	bne.n	80078b0 <f_close+0x150>
		st_word(dir + DIR_FstClusHI, (WORD) (cl >> 16));
 80078a8:	0c12      	lsrs	r2, r2, #16
	val >>= 8;
 80078aa:	0a11      	lsrs	r1, r2, #8
	*ptr++ = (BYTE) val;
 80078ac:	751a      	strb	r2, [r3, #20]
	*ptr++ = (BYTE) val;
 80078ae:	7559      	strb	r1, [r3, #21]
	*ptr++ = (BYTE) val;
 80078b0:	2100      	movs	r1, #0
					fs->wflag = 1;
 80078b2:	2701      	movs	r7, #1
	*ptr++ = (BYTE) val;
 80078b4:	4608      	mov	r0, r1
					st_dword(dir + DIR_FileSize, (DWORD) fp->obj.objsize); /* Update file size */
 80078b6:	68e2      	ldr	r2, [r4, #12]
	*ptr++ = (BYTE) val;
 80078b8:	759d      	strb	r5, [r3, #22]
	val >>= 8;
 80078ba:	ea4f 2c12 	mov.w	ip, r2, lsr #8
	*ptr++ = (BYTE) val;
 80078be:	f362 0107 	bfi	r1, r2, #0, #8
 80078c2:	f36c 210f 	bfi	r1, ip, #8, #8
	val >>= 8;
 80078c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
	*ptr++ = (BYTE) val;
 80078ca:	f36c 4117 	bfi	r1, ip, #16, #8
	val >>= 8;
 80078ce:	0e12      	lsrs	r2, r2, #24
	*ptr++ = (BYTE) val;
 80078d0:	f362 611f 	bfi	r1, r2, #24, #8
	val >>= 8;
 80078d4:	ea4f 2c15 	mov.w	ip, r5, lsr #8
	val >>= 8;
 80078d8:	0c2a      	lsrs	r2, r5, #16
	val >>= 8;
 80078da:	0e2d      	lsrs	r5, r5, #24
	*ptr++ = (BYTE) val;
 80078dc:	7498      	strb	r0, [r3, #18]
	*ptr++ = (BYTE) val;
 80078de:	74d8      	strb	r0, [r3, #19]
	*ptr++ = (BYTE) val;
 80078e0:	765d      	strb	r5, [r3, #25]
	*ptr++ = (BYTE) val;
 80078e2:	61d9      	str	r1, [r3, #28]
	*ptr++ = (BYTE) val;
 80078e4:	f883 c017 	strb.w	ip, [r3, #23]
	*ptr++ = (BYTE) val;
 80078e8:	761a      	strb	r2, [r3, #24]
					res = sync_fs(fs); /* Restore it to the directory */
 80078ea:	4630      	mov	r0, r6
					fs->wflag = 1;
 80078ec:	70f7      	strb	r7, [r6, #3]
					res = sync_fs(fs); /* Restore it to the directory */
 80078ee:	f7fb ff0d 	bl	800370c <sync_fs>
					fp->flag &= (BYTE) ~FA_MODIFIED;
 80078f2:	7d23      	ldrb	r3, [r4, #20]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE
 80078f4:	280c      	cmp	r0, #12
					fp->flag &= (BYTE) ~FA_MODIFIED;
 80078f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
					res = sync_fs(fs); /* Restore it to the directory */
 80078fa:	4605      	mov	r5, r0
					fp->flag &= (BYTE) ~FA_MODIFIED;
 80078fc:	7523      	strb	r3, [r4, #20]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE
 80078fe:	f43f af3b 	beq.w	8007778 <f_close+0x18>
 8007902:	280b      	cmp	r0, #11
 8007904:	f43f af38 	beq.w	8007778 <f_close+0x18>
			&& res != FR_TIMEOUT)
 8007908:	280f      	cmp	r0, #15
 800790a:	f43f af3d 	beq.w	8007788 <f_close+0x28>
		ff_rel_grant(fs->sobj);
 800790e:	6970      	ldr	r0, [r6, #20]
 8007910:	f000 fce8 	bl	80082e4 <ff_rel_grant>
	if (res == FR_OK)
 8007914:	2d00      	cmp	r5, #0
 8007916:	f43f af51 	beq.w	80077bc <f_close+0x5c>
 800791a:	e72d      	b.n	8007778 <f_close+0x18>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK)
 800791c:	2301      	movs	r3, #1
 800791e:	6a22      	ldr	r2, [r4, #32]
 8007920:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8007924:	7870      	ldrb	r0, [r6, #1]
 8007926:	f7fb fe99 	bl	800365c <disk_write>
 800792a:	b9c0      	cbnz	r0, 800795e <f_close+0x1fe>
				fp->flag &= (BYTE) ~FA_DIRTY;
 800792c:	7d23      	ldrb	r3, [r4, #20]
 800792e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007932:	7523      	strb	r3, [r4, #20]
 8007934:	e76a      	b.n	800780c <f_close+0xac>
		n = Files[i].ctr;
 8007936:	4d0c      	ldr	r5, [pc, #48]	; (8007968 <f_close+0x208>)
 8007938:	011b      	lsls	r3, r3, #4
 800793a:	18ee      	adds	r6, r5, r3
 800793c:	89b1      	ldrh	r1, [r6, #12]
		if (n == 0x100)
 800793e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8007942:	d008      	beq.n	8007956 <f_close+0x1f6>
		if (n > 0)
 8007944:	b141      	cbz	r1, 8007958 <f_close+0x1f8>
			n--; /* Decrement read mode open count */
 8007946:	3901      	subs	r1, #1
 8007948:	b289      	uxth	r1, r1
		Files[i].ctr = n;
 800794a:	81b1      	strh	r1, [r6, #12]
		if (n == 0)
 800794c:	b121      	cbz	r1, 8007958 <f_close+0x1f8>
				fp->obj.fs = 0; /* Invalidate file object */
 800794e:	2300      	movs	r3, #0
 8007950:	461d      	mov	r5, r3
 8007952:	6023      	str	r3, [r4, #0]
 8007954:	e74f      	b.n	80077f6 <f_close+0x96>
		Files[i].ctr = n;
 8007956:	81b0      	strh	r0, [r6, #12]
			Files[i].fs = 0; /* Delete the entry if open count gets zero */
 8007958:	2100      	movs	r1, #0
 800795a:	50e9      	str	r1, [r5, r3]
 800795c:	e7f7      	b.n	800794e <f_close+0x1ee>
		ff_rel_grant(fs->sobj);
 800795e:	6970      	ldr	r0, [r6, #20]
 8007960:	f000 fcc0 	bl	80082e4 <ff_rel_grant>
			res = FR_DISK_ERR;
 8007964:	2501      	movs	r5, #1
 8007966:	e707      	b.n	8007778 <f_close+0x18>
 8007968:	2000028c 	.word	0x2000028c

0800796c <f_mkfs>:
	if (*path)
 800796c:	2800      	cmp	r0, #0
 800796e:	f000 8084 	beq.w	8007a7a <f_mkfs+0x10e>
BYTE opt, /* Format option */
DWORD au, /* Size of allocation unit (cluster) [byte] */
void *work, /* Pointer to working buffer */
UINT len /* Size of working buffer */
)
{
 8007972:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		for (tt = *path; (UINT) *tt >= (_USE_LFN ? ' ' : '!') && *tt != ':';
 8007976:	f890 e000 	ldrb.w	lr, [r0]
{
 800797a:	b091      	sub	sp, #68	; 0x44
		for (tt = *path; (UINT) *tt >= (_USE_LFN ? ' ' : '!') && *tt != ':';
 800797c:	f1be 0f1f 	cmp.w	lr, #31
 8007980:	d90a      	bls.n	8007998 <f_mkfs+0x2c>
 8007982:	f1be 0f3a 	cmp.w	lr, #58	; 0x3a
 8007986:	d06f      	beq.n	8007a68 <f_mkfs+0xfc>
 8007988:	4684      	mov	ip, r0
 800798a:	e001      	b.n	8007990 <f_mkfs+0x24>
 800798c:	2c3a      	cmp	r4, #58	; 0x3a
 800798e:	d054      	beq.n	8007a3a <f_mkfs+0xce>
 8007990:	f81c 4f01 	ldrb.w	r4, [ip, #1]!
 8007994:	2c1f      	cmp	r4, #31
 8007996:	d8f9      	bhi.n	800798c <f_mkfs+0x20>
 8007998:	2500      	movs	r5, #0
		vol = 0; /* Drive 0 */
 800799a:	46a8      	mov	r8, r5

	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path); /* Get target logical drive */
	if (vol < 0)
		return FR_INVALID_DRIVE;
	if (FatFs[vol])
 800799c:	488b      	ldr	r0, [pc, #556]	; (8007bcc <f_mkfs+0x260>)
 800799e:	f850 0028 	ldr.w	r0, [r0, r8, lsl #2]
 80079a2:	b108      	cbz	r0, 80079a8 <f_mkfs+0x3c>
		FatFs[vol]->fs_type = 0; /* Clear the volume */
 80079a4:	2400      	movs	r4, #0
 80079a6:	7004      	strb	r4, [r0, #0]
	pdrv = LD2PD(vol); /* Physical drive */
	part = LD2PT(vol); /* Partition (0:create as new, 1-4:get from partition table) */

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 80079a8:	4628      	mov	r0, r5
 80079aa:	4617      	mov	r7, r2
 80079ac:	461c      	mov	r4, r3
 80079ae:	460e      	mov	r6, r1
 80079b0:	f7fb fe36 	bl	8003620 <disk_initialize>
	if (stat & STA_NOINIT)
 80079b4:	07c2      	lsls	r2, r0, #31
 80079b6:	d44b      	bmi.n	8007a50 <f_mkfs+0xe4>
		return FR_NOT_READY;
	if (stat & STA_PROTECT)
 80079b8:	0743      	lsls	r3, r0, #29
 80079ba:	d436      	bmi.n	8007a2a <f_mkfs+0xbe>
		return FR_WRITE_PROTECTED;
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk
 80079bc:	aa0e      	add	r2, sp, #56	; 0x38
 80079be:	2103      	movs	r1, #3
 80079c0:	4628      	mov	r0, r5
 80079c2:	f7fb fe59 	bl	8003678 <disk_ioctl>
 80079c6:	2800      	cmp	r0, #0
 80079c8:	d046      	beq.n	8007a58 <f_mkfs+0xec>
			|| sz_blk > 32768 || (sz_blk & (sz_blk - 1)))
		sz_blk = 1; /* Erase block to align data area */
 80079ca:	2301      	movs	r3, #1
 80079cc:	930e      	str	r3, [sp, #56]	; 0x38
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK)
 80079ce:	f10d 0236 	add.w	r2, sp, #54	; 0x36
 80079d2:	2102      	movs	r1, #2
 80079d4:	4628      	mov	r0, r5
 80079d6:	f7fb fe4f 	bl	8003678 <disk_ioctl>
 80079da:	bb50      	cbnz	r0, 8007a32 <f_mkfs+0xc6>
		return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1)))
 80079dc:	f8bd 8036 	ldrh.w	r8, [sp, #54]	; 0x36
 80079e0:	f5a8 7300 	sub.w	r3, r8, #512	; 0x200
 80079e4:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 80079e8:	d823      	bhi.n	8007a32 <f_mkfs+0xc6>
 80079ea:	f108 33ff 	add.w	r3, r8, #4294967295
 80079ee:	ea13 0f08 	tst.w	r3, r8
 80079f2:	d11e      	bne.n	8007a32 <f_mkfs+0xc6>
		return FR_DISK_ERR;
#else
	ss = _MAX_SS;
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1)))
 80079f4:	2f00      	cmp	r7, #0
 80079f6:	d139      	bne.n	8007a6c <f_mkfs+0x100>
		return FR_INVALID_PARAMETER; /* Check if au is valid */
	au /= ss; /* Cluster size in unit of sector */

	/* Get working buffer */
	buf = (BYTE*) work; /* Working buffer */
	sz_buf = len / ss; /* Size of working buffer (sector) */
 80079f8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80079fa:	fbb3 f3f8 	udiv	r3, r3, r8
 80079fe:	9306      	str	r3, [sp, #24]
	szb_buf = sz_buf * ss; /* Size of working buffer (byte) */
 8007a00:	fb08 f303 	mul.w	r3, r8, r3
 8007a04:	930a      	str	r3, [sp, #40]	; 0x28
	if (!szb_buf)
 8007a06:	b173      	cbz	r3, 8007a26 <f_mkfs+0xba>
		sz_vol = ld_dword(pte + PTE_SizLba); /* Get volume size */
	}
	else
	{
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK)
 8007a08:	aa0f      	add	r2, sp, #60	; 0x3c
 8007a0a:	2101      	movs	r1, #1
 8007a0c:	4628      	mov	r0, r5
 8007a0e:	f7fb fe33 	bl	8003678 <disk_ioctl>
 8007a12:	4603      	mov	r3, r0
 8007a14:	b968      	cbnz	r0, 8007a32 <f_mkfs+0xc6>
			return FR_DISK_ERR;
		b_vol = (opt & FM_SFD) ? 0 : 63; /* Volume start sector */
 8007a16:	f016 0208 	ands.w	r2, r6, #8
 8007a1a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8007a1c:	9208      	str	r2, [sp, #32]
 8007a1e:	d132      	bne.n	8007a86 <f_mkfs+0x11a>
		if (sz_vol < b_vol)
 8007a20:	283e      	cmp	r0, #62	; 0x3e
 8007a22:	f200 80bc 	bhi.w	8007b9e <f_mkfs+0x232>
		return FR_MKFS_ABORTED;
 8007a26:	200e      	movs	r0, #14
 8007a28:	e000      	b.n	8007a2c <f_mkfs+0xc0>
		return FR_WRITE_PROTECTED;
 8007a2a:	200a      	movs	r0, #10

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK)
		return FR_DISK_ERR;

	return FR_OK;
}
 8007a2c:	b011      	add	sp, #68	; 0x44
 8007a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					return FR_DISK_ERR;
 8007a32:	2001      	movs	r0, #1
}
 8007a34:	b011      	add	sp, #68	; 0x44
 8007a36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			i = *tp++ - '0';
 8007a3a:	3001      	adds	r0, #1
			if (i < 10 && tp == tt)
 8007a3c:	4584      	cmp	ip, r0
			i = *tp++ - '0';
 8007a3e:	f1ae 0830 	sub.w	r8, lr, #48	; 0x30
			if (i < 10 && tp == tt)
 8007a42:	d111      	bne.n	8007a68 <f_mkfs+0xfc>
				if (i < _VOLUMES)
 8007a44:	f1be 0f30 	cmp.w	lr, #48	; 0x30
 8007a48:	d10e      	bne.n	8007a68 <f_mkfs+0xfc>
 8007a4a:	fa5f f588 	uxtb.w	r5, r8
 8007a4e:	e7a5      	b.n	800799c <f_mkfs+0x30>
		return FR_NOT_READY;
 8007a50:	2003      	movs	r0, #3
}
 8007a52:	b011      	add	sp, #68	; 0x44
 8007a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk
 8007a58:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007a5a:	1e53      	subs	r3, r2, #1
 8007a5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a60:	d2b3      	bcs.n	80079ca <f_mkfs+0x5e>
			|| sz_blk > 32768 || (sz_blk & (sz_blk - 1)))
 8007a62:	421a      	tst	r2, r3
 8007a64:	d0b3      	beq.n	80079ce <f_mkfs+0x62>
 8007a66:	e7b0      	b.n	80079ca <f_mkfs+0x5e>
		return FR_INVALID_DRIVE;
 8007a68:	200b      	movs	r0, #11
 8007a6a:	e7df      	b.n	8007a2c <f_mkfs+0xc0>
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1)))
 8007a6c:	4547      	cmp	r7, r8
 8007a6e:	d302      	bcc.n	8007a76 <f_mkfs+0x10a>
 8007a70:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
 8007a74:	d903      	bls.n	8007a7e <f_mkfs+0x112>
		return FR_INVALID_PARAMETER; /* Check if au is valid */
 8007a76:	2013      	movs	r0, #19
 8007a78:	e7d8      	b.n	8007a2c <f_mkfs+0xc0>
		return FR_INVALID_DRIVE;
 8007a7a:	200b      	movs	r0, #11
}
 8007a7c:	4770      	bx	lr
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1)))
 8007a7e:	1e7b      	subs	r3, r7, #1
 8007a80:	423b      	tst	r3, r7
 8007a82:	d1f8      	bne.n	8007a76 <f_mkfs+0x10a>
 8007a84:	e7b8      	b.n	80079f8 <f_mkfs+0x8c>
		b_vol = (opt & FM_SFD) ? 0 : 63; /* Volume start sector */
 8007a86:	9302      	str	r3, [sp, #8]
 8007a88:	2320      	movs	r3, #32
 8007a8a:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	9307      	str	r3, [sp, #28]
	if (sz_vol < 128)
 8007a90:	287f      	cmp	r0, #127	; 0x7f
		sz_vol -= b_vol; /* Volume size */
 8007a92:	900f      	str	r0, [sp, #60]	; 0x3c
	if (sz_vol < 128)
 8007a94:	d9c7      	bls.n	8007a26 <f_mkfs+0xba>
	au /= ss; /* Cluster size in unit of sector */
 8007a96:	fbb7 f3f8 	udiv	r3, r7, r8
		if (au > 128)
 8007a9a:	2b80      	cmp	r3, #128	; 0x80
	au /= ss; /* Cluster size in unit of sector */
 8007a9c:	9301      	str	r3, [sp, #4]
		if (au > 128)
 8007a9e:	d8ea      	bhi.n	8007a76 <f_mkfs+0x10a>
		if (opt & FM_FAT32)
 8007aa0:	f016 0202 	ands.w	r2, r6, #2
 8007aa4:	9209      	str	r2, [sp, #36]	; 0x24
 8007aa6:	f000 81ca 	beq.w	8007e3e <f_mkfs+0x4d2>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT))
 8007aaa:	f006 0207 	and.w	r2, r6, #7
 8007aae:	2a02      	cmp	r2, #2
 8007ab0:	d002      	beq.n	8007ab8 <f_mkfs+0x14c>
 8007ab2:	07f2      	lsls	r2, r6, #31
 8007ab4:	f100 81c6 	bmi.w	8007e44 <f_mkfs+0x4d8>
 8007ab8:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
				if (!pau)
 8007abc:	9b01      	ldr	r3, [sp, #4]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	f000 81e8 	beq.w	8007e94 <f_mkfs+0x528>
 8007ac4:	9901      	ldr	r1, [sp, #4]
				n_clst = sz_vol / pau; /* Number of clusters */
 8007ac6:	9b01      	ldr	r3, [sp, #4]
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32)
 8007ac8:	f8df c104 	ldr.w	ip, [pc, #260]	; 8007bd0 <f_mkfs+0x264>
				n_clst = sz_vol / pau; /* Number of clusters */
 8007acc:	fbb0 f6f3 	udiv	r6, r0, r3
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss; /* FAT size [sector] */
 8007ad0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32)
 8007ad4:	f5a6 467f 	sub.w	r6, r6, #65280	; 0xff00
 8007ad8:	3ef6      	subs	r6, #246	; 0xf6
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss; /* FAT size [sector] */
 8007ada:	3707      	adds	r7, #7
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32)
 8007adc:	4566      	cmp	r6, ip
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss; /* FAT size [sector] */
 8007ade:	fbb7 f7f2 	udiv	r7, r7, r2
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32)
 8007ae2:	d8a0      	bhi.n	8007a26 <f_mkfs+0xba>
 8007ae4:	9101      	str	r1, [sp, #4]
				sz_dir = 0; /* No static directory */
 8007ae6:	2100      	movs	r1, #0
				sz_rsv = 32; /* Number of reserved sectors */
 8007ae8:	f04f 0b20 	mov.w	fp, #32
 8007aec:	f04f 0803 	mov.w	r8, #3
 8007af0:	461e      	mov	r6, r3
 8007af2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007af4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
				sz_dir = 0; /* No static directory */
 8007af8:	9104      	str	r1, [sp, #16]
 8007afa:	9303      	str	r3, [sp, #12]
			b_data = b_fat + sz_fat * n_fats + sz_dir; /* Data base */
 8007afc:	eb07 0e01 	add.w	lr, r7, r1
 8007b00:	44ce      	add	lr, r9
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data; /* Next nearest erase block from current data base */
 8007b02:	f103 3cff 	add.w	ip, r3, #4294967295
 8007b06:	44f4      	add	ip, lr
 8007b08:	f1c3 0a00 	rsb	sl, r3, #0
 8007b0c:	ea0c 0c0a 	and.w	ip, ip, sl
			if (fmt == FS_FAT32)
 8007b10:	f1b8 0f03 	cmp.w	r8, #3
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data; /* Next nearest erase block from current data base */
 8007b14:	ebac 0c0e 	sub.w	ip, ip, lr
			if (sz_vol < b_data + pau * 16 - b_vol)
 8007b18:	9902      	ldr	r1, [sp, #8]
			if (fmt == FS_FAT32)
 8007b1a:	d05b      	beq.n	8007bd4 <f_mkfs+0x268>
			if (sz_vol < b_data + pau * 16 - b_vol)
 8007b1c:	ebc1 1a06 	rsb	sl, r1, r6, lsl #4
 8007b20:	44d6      	add	lr, sl
 8007b22:	4586      	cmp	lr, r0
				sz_fat += n / n_fats;
 8007b24:	4467      	add	r7, ip
			if (sz_vol < b_data + pau * 16 - b_vol)
 8007b26:	f63f af7e 	bhi.w	8007a26 <f_mkfs+0xba>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 8007b2a:	9b04      	ldr	r3, [sp, #16]
 8007b2c:	eba0 0c0b 	sub.w	ip, r0, fp
 8007b30:	ebac 0c07 	sub.w	ip, ip, r7
 8007b34:	ebac 0c03 	sub.w	ip, ip, r3
 8007b38:	fbbc f3f6 	udiv	r3, ip, r6
			if (fmt == FS_FAT16)
 8007b3c:	f1b8 0f02 	cmp.w	r8, #2
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 8007b40:	9305      	str	r3, [sp, #20]
			if (fmt == FS_FAT16)
 8007b42:	f040 819e 	bne.w	8007e82 <f_mkfs+0x516>
				if (n_clst > MAX_FAT16)
 8007b46:	f64f 7cf5 	movw	ip, #65525	; 0xfff5
 8007b4a:	4563      	cmp	r3, ip
 8007b4c:	d933      	bls.n	8007bb6 <f_mkfs+0x24a>
					if (!au && (pau * 2) <= 64)
 8007b4e:	9b01      	ldr	r3, [sp, #4]
 8007b50:	bb6b      	cbnz	r3, 8007bae <f_mkfs+0x242>
 8007b52:	0076      	lsls	r6, r6, #1
 8007b54:	2e40      	cmp	r6, #64	; 0x40
 8007b56:	d906      	bls.n	8007b66 <f_mkfs+0x1fa>
					if ((opt & FM_FAT32))
 8007b58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	f040 819a 	bne.w	8007e94 <f_mkfs+0x528>
					if (!au && (au = pau * 2) <= 128)
 8007b60:	2e80      	cmp	r6, #128	; 0x80
 8007b62:	f63f af60 	bhi.w	8007a26 <f_mkfs+0xba>
 8007b66:	9601      	str	r6, [sp, #4]
				n_clst = sz_vol / pau;
 8007b68:	fbb0 f7f6 	udiv	r7, r0, r6
				if (n_clst > MAX_FAT12)
 8007b6c:	f640 7cf5 	movw	ip, #4085	; 0xff5
 8007b70:	4567      	cmp	r7, ip
 8007b72:	f240 817d 	bls.w	8007e70 <f_mkfs+0x504>
 8007b76:	f04f 0802 	mov.w	r8, #2
					n = n_clst * 2 + 4; /* FAT size [byte] */
 8007b7a:	3702      	adds	r7, #2
 8007b7c:	007f      	lsls	r7, r7, #1
				sz_dir = (DWORD) n_rootdir * SZDIRE / ss; /* Rootdir size [sector] */
 8007b7e:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
 8007b82:	fbbc f1f2 	udiv	r1, ip, r2
				sz_fat = (n + ss - 1) / ss; /* FAT size [sector] */
 8007b86:	f102 3eff 	add.w	lr, r2, #4294967295
 8007b8a:	4477      	add	r7, lr
 8007b8c:	fbb7 f7f2 	udiv	r7, r7, r2
				sz_dir = (DWORD) n_rootdir * SZDIRE / ss; /* Rootdir size [sector] */
 8007b90:	9104      	str	r1, [sp, #16]
				sz_rsv = 1; /* Number of reserved sectors */
 8007b92:	f04f 0b01 	mov.w	fp, #1
 8007b96:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8007b9a:	9b03      	ldr	r3, [sp, #12]
 8007b9c:	e7ae      	b.n	8007afc <f_mkfs+0x190>
		if (sz_vol < b_vol)
 8007b9e:	235f      	movs	r3, #95	; 0x5f
 8007ba0:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ba2:	2340      	movs	r3, #64	; 0x40
 8007ba4:	9307      	str	r3, [sp, #28]
		b_vol = (opt & FM_SFD) ? 0 : 63; /* Volume start sector */
 8007ba6:	233f      	movs	r3, #63	; 0x3f
 8007ba8:	383f      	subs	r0, #63	; 0x3f
 8007baa:	9302      	str	r3, [sp, #8]
 8007bac:	e770      	b.n	8007a90 <f_mkfs+0x124>
					if ((opt & FM_FAT32))
 8007bae:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007bb0:	2900      	cmp	r1, #0
 8007bb2:	d183      	bne.n	8007abc <f_mkfs+0x150>
 8007bb4:	e737      	b.n	8007a26 <f_mkfs+0xba>
				if (n_clst <= MAX_FAT12)
 8007bb6:	f640 7cf5 	movw	ip, #4085	; 0xff5
 8007bba:	9905      	ldr	r1, [sp, #20]
 8007bbc:	4561      	cmp	r1, ip
 8007bbe:	d81e      	bhi.n	8007bfe <f_mkfs+0x292>
					if (!au && (au = pau * 2) <= 128)
 8007bc0:	9b01      	ldr	r3, [sp, #4]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	f47f af2f 	bne.w	8007a26 <f_mkfs+0xba>
 8007bc8:	0076      	lsls	r6, r6, #1
 8007bca:	e7c9      	b.n	8007b60 <f_mkfs+0x1f4>
 8007bcc:	20000288 	.word	0x20000288
 8007bd0:	0ffeffff 	.word	0x0ffeffff
			if (sz_vol < b_data + pau * 16 - b_vol)
 8007bd4:	ebc1 1106 	rsb	r1, r1, r6, lsl #4
 8007bd8:	4471      	add	r1, lr
 8007bda:	4281      	cmp	r1, r0
				sz_rsv += n;
 8007bdc:	44e3      	add	fp, ip
				b_fat += n;
 8007bde:	44e1      	add	r9, ip
			if (sz_vol < b_data + pau * 16 - b_vol)
 8007be0:	f63f af21 	bhi.w	8007a26 <f_mkfs+0xba>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 8007be4:	9b04      	ldr	r3, [sp, #16]
 8007be6:	eba0 010b 	sub.w	r1, r0, fp
 8007bea:	1bc9      	subs	r1, r1, r7
 8007bec:	1ac9      	subs	r1, r1, r3
 8007bee:	fbb1 f1f6 	udiv	r1, r1, r6
				if (n_clst <= MAX_FAT16)
 8007bf2:	f64f 73f5 	movw	r3, #65525	; 0xfff5
 8007bf6:	4299      	cmp	r1, r3
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 8007bf8:	9105      	str	r1, [sp, #20]
				if (n_clst <= MAX_FAT16)
 8007bfa:	f240 8117 	bls.w	8007e2c <f_mkfs+0x4c0>
 8007bfe:	4623      	mov	r3, r4
		*d++ = (BYTE) val;
 8007c00:	f04f 0c00 	mov.w	ip, #0
 8007c04:	18a1      	adds	r1, r4, r2
 8007c06:	f803 cb01 	strb.w	ip, [r3], #1
	} while (--cnt);
 8007c0a:	428b      	cmp	r3, r1
 8007c0c:	d1fb      	bne.n	8007c06 <f_mkfs+0x29a>
 8007c0e:	2300      	movs	r3, #0
 8007c10:	49c7      	ldr	r1, [pc, #796]	; (8007f30 <f_mkfs+0x5c4>)
			*d++ = *s++;
 8007c12:	f811 c003 	ldrb.w	ip, [r1, r3]
 8007c16:	f804 c003 	strb.w	ip, [r4, r3]
 8007c1a:	3301      	adds	r3, #1
		} while (--cnt);
 8007c1c:	2b0b      	cmp	r3, #11
 8007c1e:	d1f8      	bne.n	8007c12 <f_mkfs+0x2a6>
		st_word(buf + BPB_RootEntCnt,
 8007c20:	f1b8 0f03 	cmp.w	r8, #3
	val >>= 8;
 8007c24:	bf14      	ite	ne
 8007c26:	f04f 0c02 	movne.w	ip, #2
 8007c2a:	f04f 0c00 	moveq.w	ip, #0
	*ptr++ = (BYTE) val;
 8007c2e:	2300      	movs	r3, #0
		buf[BPB_NumFATs] = (BYTE) n_fats; /* Number of FATs */
 8007c30:	2101      	movs	r1, #1
	*ptr++ = (BYTE) val;
 8007c32:	72e2      	strb	r2, [r4, #11]
 8007c34:	f884 b00e 	strb.w	fp, [r4, #14]
	val >>= 8;
 8007c38:	0a12      	lsrs	r2, r2, #8
 8007c3a:	f3cb 2b07 	ubfx	fp, fp, #8, #8
		if (sz_vol < 0x10000)
 8007c3e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
	*ptr++ = (BYTE) val;
 8007c42:	7463      	strb	r3, [r4, #17]
	*ptr++ = (BYTE) val;
 8007c44:	7322      	strb	r2, [r4, #12]
		buf[BPB_SecPerClus] = (BYTE) pau; /* Cluster size [sector] */
 8007c46:	7366      	strb	r6, [r4, #13]
	*ptr++ = (BYTE) val;
 8007c48:	f884 b00f 	strb.w	fp, [r4, #15]
 8007c4c:	f884 c012 	strb.w	ip, [r4, #18]
		buf[BPB_NumFATs] = (BYTE) n_fats; /* Number of FATs */
 8007c50:	7421      	strb	r1, [r4, #16]
 8007c52:	b2c3      	uxtb	r3, r0
		if (sz_vol < 0x10000)
 8007c54:	f080 81ef 	bcs.w	8008036 <f_mkfs+0x6ca>
	val >>= 8;
 8007c58:	f3c0 2007 	ubfx	r0, r0, #8, #8
	*ptr++ = (BYTE) val;
 8007c5c:	7520      	strb	r0, [r4, #20]
	*ptr++ = (BYTE) val;
 8007c5e:	74e3      	strb	r3, [r4, #19]
	*ptr++ = (BYTE) val;
 8007c60:	2300      	movs	r3, #0
		buf[BPB_Media] = 0xF8; /* Media descriptor byte */
 8007c62:	21f8      	movs	r1, #248	; 0xf8
	*ptr++ = (BYTE) val;
 8007c64:	4ab3      	ldr	r2, [pc, #716]	; (8007f34 <f_mkfs+0x5c8>)
	*ptr++ = (BYTE) val;
 8007c66:	f89d b008 	ldrb.w	fp, [sp, #8]
		if (fmt == FS_FAT32)
 8007c6a:	f1b8 0f03 	cmp.w	r8, #3
		buf[BPB_Media] = 0xF8; /* Media descriptor byte */
 8007c6e:	7561      	strb	r1, [r4, #21]
	*ptr++ = (BYTE) val;
 8007c70:	7763      	strb	r3, [r4, #29]
	*ptr++ = (BYTE) val;
 8007c72:	77a3      	strb	r3, [r4, #30]
	*ptr++ = (BYTE) val;
 8007c74:	77e3      	strb	r3, [r4, #31]
	*ptr++ = (BYTE) val;
 8007c76:	61a2      	str	r2, [r4, #24]
	*ptr++ = (BYTE) val;
 8007c78:	f884 b01c 	strb.w	fp, [r4, #28]
 8007c7c:	fa5f fa87 	uxtb.w	sl, r7
		if (fmt == FS_FAT32)
 8007c80:	f000 815e 	beq.w	8007f40 <f_mkfs+0x5d4>
			st_dword(buf + BS_VolID, GET_FATTIME()); /* VSN */
 8007c84:	f7fb fc44 	bl	8003510 <get_fattime>
			buf[BS_BootSig] = 0x29; /* Extended boot signature */
 8007c88:	2129      	movs	r1, #41	; 0x29
			buf[BS_DrvNum] = 0x80; /* Drive number (for int13) */
 8007c8a:	f04f 0c80 	mov.w	ip, #128	; 0x80
	val >>= 8;
 8007c8e:	0a03      	lsrs	r3, r0, #8
	*ptr++ = (BYTE) val;
 8007c90:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	val >>= 8;
 8007c94:	0c03      	lsrs	r3, r0, #16
	*ptr++ = (BYTE) val;
 8007c96:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
	*ptr++ = (BYTE) val;
 8007c9a:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	val >>= 8;
 8007c9e:	0e00      	lsrs	r0, r0, #24
	val >>= 8;
 8007ca0:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8007ca4:	4aa4      	ldr	r2, [pc, #656]	; (8007f38 <f_mkfs+0x5cc>)
			buf[BS_BootSig] = 0x29; /* Extended boot signature */
 8007ca6:	f884 1026 	strb.w	r1, [r4, #38]	; 0x26
	*ptr++ = (BYTE) val;
 8007caa:	75e3      	strb	r3, [r4, #23]
	*ptr++ = (BYTE) val;
 8007cac:	f884 a016 	strb.w	sl, [r4, #22]
	*ptr++ = (BYTE) val;
 8007cb0:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
			buf[BS_DrvNum] = 0x80; /* Drive number (for int13) */
 8007cb4:	f884 c024 	strb.w	ip, [r4, #36]	; 0x24
 8007cb8:	f104 032a 	add.w	r3, r4, #42	; 0x2a
 8007cbc:	f104 013d 	add.w	r1, r4, #61	; 0x3d
			*d++ = *s++;
 8007cc0:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8007cc4:	f803 0f01 	strb.w	r0, [r3, #1]!
		} while (--cnt);
 8007cc8:	4299      	cmp	r1, r3
 8007cca:	d1f9      	bne.n	8007cc0 <f_mkfs+0x354>
	*ptr++ = (BYTE) val;
 8007ccc:	2255      	movs	r2, #85	; 0x55
	*ptr++ = (BYTE) val;
 8007cce:	23aa      	movs	r3, #170	; 0xaa
	*ptr++ = (BYTE) val;
 8007cd0:	f884 21fe 	strb.w	r2, [r4, #510]	; 0x1fe
	*ptr++ = (BYTE) val;
 8007cd4:	f884 31ff 	strb.w	r3, [r4, #511]	; 0x1ff
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK)
 8007cd8:	9a02      	ldr	r2, [sp, #8]
 8007cda:	2301      	movs	r3, #1
 8007cdc:	4621      	mov	r1, r4
 8007cde:	4628      	mov	r0, r5
 8007ce0:	f7fb fcbc 	bl	800365c <disk_write>
 8007ce4:	2800      	cmp	r0, #0
 8007ce6:	f47f aea4 	bne.w	8007a32 <f_mkfs+0xc6>
			mem_set(buf, 0, ss);
 8007cea:	4623      	mov	r3, r4
		*d++ = (BYTE) val;
 8007cec:	2100      	movs	r1, #0
 8007cee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007cf0:	4422      	add	r2, r4
 8007cf2:	f803 1b01 	strb.w	r1, [r3], #1
	} while (--cnt);
 8007cf6:	429a      	cmp	r2, r3
 8007cf8:	d1fb      	bne.n	8007cf2 <f_mkfs+0x386>
			if (fmt == FS_FAT32)
 8007cfa:	f1b8 0f03 	cmp.w	r8, #3
 8007cfe:	f000 81a6 	beq.w	800804e <f_mkfs+0x6e2>
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8); /* Entry 0 and 1 */
 8007d02:	f1b8 0f01 	cmp.w	r8, #1
	*ptr++ = (BYTE) val;
 8007d06:	f04f 03ff 	mov.w	r3, #255	; 0xff
	val >>= 8;
 8007d0a:	bf14      	ite	ne
 8007d0c:	21ff      	movne	r1, #255	; 0xff
 8007d0e:	2100      	moveq	r1, #0
	*ptr++ = (BYTE) val;
 8007d10:	22f8      	movs	r2, #248	; 0xf8
	*ptr++ = (BYTE) val;
 8007d12:	70e1      	strb	r1, [r4, #3]
	*ptr++ = (BYTE) val;
 8007d14:	7022      	strb	r2, [r4, #0]
	*ptr++ = (BYTE) val;
 8007d16:	7063      	strb	r3, [r4, #1]
	*ptr++ = (BYTE) val;
 8007d18:	70a3      	strb	r3, [r4, #2]
				n = (nsect > sz_buf) ? sz_buf : nsect;
 8007d1a:	9b06      	ldr	r3, [sp, #24]
				if (disk_write(pdrv, buf, sect, (UINT) n) != RES_OK)
 8007d1c:	464a      	mov	r2, r9
				n = (nsect > sz_buf) ? sz_buf : nsect;
 8007d1e:	42bb      	cmp	r3, r7
 8007d20:	bf28      	it	cs
 8007d22:	463b      	movcs	r3, r7
				if (disk_write(pdrv, buf, sect, (UINT) n) != RES_OK)
 8007d24:	4621      	mov	r1, r4
 8007d26:	4628      	mov	r0, r5
				n = (nsect > sz_buf) ? sz_buf : nsect;
 8007d28:	469a      	mov	sl, r3
				if (disk_write(pdrv, buf, sect, (UINT) n) != RES_OK)
 8007d2a:	f7fb fc97 	bl	800365c <disk_write>
 8007d2e:	2800      	cmp	r0, #0
 8007d30:	f47f ae7f 	bne.w	8007a32 <f_mkfs+0xc6>
				mem_set(buf, 0, ss);
 8007d34:	4622      	mov	r2, r4
 8007d36:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
		*d++ = (BYTE) val;
 8007d3a:	f04f 0100 	mov.w	r1, #0
	} while (--cnt);
 8007d3e:	3b01      	subs	r3, #1
		*d++ = (BYTE) val;
 8007d40:	f802 1b01 	strb.w	r1, [r2], #1
	} while (--cnt);
 8007d44:	d1f9      	bne.n	8007d3a <f_mkfs+0x3ce>
			} while (nsect);
 8007d46:	ebb7 070a 	subs.w	r7, r7, sl
				sect += n;
 8007d4a:	44d1      	add	r9, sl
			} while (nsect);
 8007d4c:	d1e5      	bne.n	8007d1a <f_mkfs+0x3ae>
		nsect = (fmt == FS_FAT32) ? pau : sz_dir; /* Number of root directory sectors */
 8007d4e:	9f04      	ldr	r7, [sp, #16]
 8007d50:	f1b8 0f03 	cmp.w	r8, #3
 8007d54:	bf08      	it	eq
 8007d56:	4637      	moveq	r7, r6
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8007d58:	9b06      	ldr	r3, [sp, #24]
			if (disk_write(pdrv, buf, sect, (UINT) n) != RES_OK)
 8007d5a:	464a      	mov	r2, r9
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8007d5c:	42bb      	cmp	r3, r7
 8007d5e:	bf28      	it	cs
 8007d60:	463b      	movcs	r3, r7
			if (disk_write(pdrv, buf, sect, (UINT) n) != RES_OK)
 8007d62:	4621      	mov	r1, r4
 8007d64:	4628      	mov	r0, r5
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8007d66:	461e      	mov	r6, r3
			if (disk_write(pdrv, buf, sect, (UINT) n) != RES_OK)
 8007d68:	f7fb fc78 	bl	800365c <disk_write>
			sect += n;
 8007d6c:	44b1      	add	r9, r6
			if (disk_write(pdrv, buf, sect, (UINT) n) != RES_OK)
 8007d6e:	2800      	cmp	r0, #0
 8007d70:	f47f ae5f 	bne.w	8007a32 <f_mkfs+0xc6>
		} while (nsect);
 8007d74:	1bbf      	subs	r7, r7, r6
 8007d76:	d1ef      	bne.n	8007d58 <f_mkfs+0x3ec>
		if (fmt == FS_FAT32)
 8007d78:	f1b8 0f03 	cmp.w	r8, #3
 8007d7c:	f000 8171 	beq.w	8008062 <f_mkfs+0x6f6>
			if (sz_vol >= 0x10000)
 8007d80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007d82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d86:	f080 816e 	bcs.w	8008066 <f_mkfs+0x6fa>
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01; /* FAT16 (<64KS) : FAT12 (<64KS) */
 8007d8a:	f1b8 0f02 	cmp.w	r8, #2
 8007d8e:	bf14      	ite	ne
 8007d90:	2301      	movne	r3, #1
 8007d92:	2304      	moveq	r3, #4
		if (!(opt & FM_SFD))
 8007d94:	9a08      	ldr	r2, [sp, #32]
 8007d96:	2a00      	cmp	r2, #0
 8007d98:	d13f      	bne.n	8007e1a <f_mkfs+0x4ae>
			mem_set(buf, 0, ss);
 8007d9a:	4621      	mov	r1, r4
		*d++ = (BYTE) val;
 8007d9c:	9808      	ldr	r0, [sp, #32]
			mem_set(buf, 0, ss);
 8007d9e:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
	} while (--cnt);
 8007da2:	3a01      	subs	r2, #1
		*d++ = (BYTE) val;
 8007da4:	f801 0b01 	strb.w	r0, [r1], #1
	} while (--cnt);
 8007da8:	d1fb      	bne.n	8007da2 <f_mkfs+0x436>
			n = (b_vol + sz_vol) / (63 * 255); /* (End CHS may be invalid) */
 8007daa:	f643 60c1 	movw	r0, #16065	; 0x3ec1
 8007dae:	990f      	ldr	r1, [sp, #60]	; 0x3c
			pte[PTE_System] = sys; /* System type */
 8007db0:	f884 31c2 	strb.w	r3, [r4, #450]	; 0x1c2
			n = (b_vol + sz_vol) / (63 * 255); /* (End CHS may be invalid) */
 8007db4:	9b02      	ldr	r3, [sp, #8]
	*ptr++ = (BYTE) val;
 8007db6:	2755      	movs	r7, #85	; 0x55
			n = (b_vol + sz_vol) / (63 * 255); /* (End CHS may be invalid) */
 8007db8:	440b      	add	r3, r1
 8007dba:	fbb3 f3f0 	udiv	r3, r3, r0
	*ptr++ = (BYTE) val;
 8007dbe:	26aa      	movs	r6, #170	; 0xaa
			pte[PTE_EdHead] = 254; /* End head */
 8007dc0:	20fe      	movs	r0, #254	; 0xfe
			pte[PTE_EdCyl] = (BYTE) n; /* End cylinder */
 8007dc2:	f884 31c5 	strb.w	r3, [r4, #453]	; 0x1c5
			pte[PTE_EdSec] = (BYTE) (n >> 2 | 63); /* End sector */
 8007dc6:	089b      	lsrs	r3, r3, #2
 8007dc8:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8007dcc:	f884 31c4 	strb.w	r3, [r4, #452]	; 0x1c4
	val >>= 8;
 8007dd0:	0a0b      	lsrs	r3, r1, #8
	*ptr++ = (BYTE) val;
 8007dd2:	f884 31cb 	strb.w	r3, [r4, #459]	; 0x1cb
	val >>= 8;
 8007dd6:	0e0b      	lsrs	r3, r1, #24
	*ptr++ = (BYTE) val;
 8007dd8:	f884 31cd 	strb.w	r3, [r4, #461]	; 0x1cd
			pte[PTE_Boot] = 0; /* Boot indicator */
 8007ddc:	4b57      	ldr	r3, [pc, #348]	; (8007f3c <f_mkfs+0x5d0>)
	val >>= 8;
 8007dde:	ea4f 4c11 	mov.w	ip, r1, lsr #16
	*ptr++ = (BYTE) val;
 8007de2:	f884 11ca 	strb.w	r1, [r4, #458]	; 0x1ca
			pte[PTE_EdHead] = 254; /* End head */
 8007de6:	f884 01c3 	strb.w	r0, [r4, #451]	; 0x1c3
			pte[PTE_Boot] = 0; /* Boot indicator */
 8007dea:	f8c4 31be 	str.w	r3, [r4, #446]	; 0x1be
	*ptr++ = (BYTE) val;
 8007dee:	f884 b1c6 	strb.w	fp, [r4, #454]	; 0x1c6
	*ptr++ = (BYTE) val;
 8007df2:	f884 21c7 	strb.w	r2, [r4, #455]	; 0x1c7
	*ptr++ = (BYTE) val;
 8007df6:	f884 21c8 	strb.w	r2, [r4, #456]	; 0x1c8
	*ptr++ = (BYTE) val;
 8007dfa:	f884 21c9 	strb.w	r2, [r4, #457]	; 0x1c9
	*ptr++ = (BYTE) val;
 8007dfe:	f884 c1cc 	strb.w	ip, [r4, #460]	; 0x1cc
	*ptr++ = (BYTE) val;
 8007e02:	f884 71fe 	strb.w	r7, [r4, #510]	; 0x1fe
	*ptr++ = (BYTE) val;
 8007e06:	f884 61ff 	strb.w	r6, [r4, #511]	; 0x1ff
			if (disk_write(pdrv, buf, 0, 1) != RES_OK)
 8007e0a:	4621      	mov	r1, r4
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	4628      	mov	r0, r5
 8007e10:	f7fb fc24 	bl	800365c <disk_write>
 8007e14:	2800      	cmp	r0, #0
 8007e16:	f47f ae0c 	bne.w	8007a32 <f_mkfs+0xc6>
	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK)
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	4628      	mov	r0, r5
 8007e1e:	4611      	mov	r1, r2
 8007e20:	f7fb fc2a 	bl	8003678 <disk_ioctl>
					return FR_MKFS_ABORTED;
 8007e24:	3000      	adds	r0, #0
 8007e26:	bf18      	it	ne
 8007e28:	2001      	movne	r0, #1
 8007e2a:	e5ff      	b.n	8007a2c <f_mkfs+0xc0>
					if (!au && (au = pau / 2) != 0)
 8007e2c:	9b01      	ldr	r3, [sp, #4]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	f47f adf9 	bne.w	8007a26 <f_mkfs+0xba>
 8007e34:	0873      	lsrs	r3, r6, #1
 8007e36:	9301      	str	r3, [sp, #4]
 8007e38:	f47f ae44 	bne.w	8007ac4 <f_mkfs+0x158>
 8007e3c:	e5f3      	b.n	8007a26 <f_mkfs+0xba>
		if (!(opt & FM_FAT))
 8007e3e:	07f3      	lsls	r3, r6, #31
 8007e40:	f57f ae19 	bpl.w	8007a76 <f_mkfs+0x10a>
				if (!pau)
 8007e44:	9b01      	ldr	r3, [sp, #4]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d16c      	bne.n	8007f24 <f_mkfs+0x5b8>
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1)
 8007e4a:	0b02      	lsrs	r2, r0, #12
 8007e4c:	d04b      	beq.n	8007ee6 <f_mkfs+0x57a>
 8007e4e:	2a03      	cmp	r2, #3
 8007e50:	d94f      	bls.n	8007ef2 <f_mkfs+0x586>
 8007e52:	2a0f      	cmp	r2, #15
 8007e54:	d92f      	bls.n	8007eb6 <f_mkfs+0x54a>
 8007e56:	2a3f      	cmp	r2, #63	; 0x3f
 8007e58:	d939      	bls.n	8007ece <f_mkfs+0x562>
 8007e5a:	2aff      	cmp	r2, #255	; 0xff
 8007e5c:	d931      	bls.n	8007ec2 <f_mkfs+0x556>
 8007e5e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8007e62:	d33a      	bcc.n	8007eda <f_mkfs+0x56e>
 8007e64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e66:	2640      	movs	r6, #64	; 0x40
 8007e68:	9303      	str	r3, [sp, #12]
 8007e6a:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
 8007e6e:	e67b      	b.n	8007b68 <f_mkfs+0x1fc>
					fmt = FS_FAT12;
 8007e70:	f04f 0801 	mov.w	r8, #1
					n = (n_clst * 3 + 1) / 2 + 3; /* FAT size [byte] */
 8007e74:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8007e78:	4447      	add	r7, r8
 8007e7a:	fa27 f708 	lsr.w	r7, r7, r8
 8007e7e:	3703      	adds	r7, #3
 8007e80:	e67d      	b.n	8007b7e <f_mkfs+0x212>
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12)
 8007e82:	f640 73f5 	movw	r3, #4085	; 0xff5
 8007e86:	9905      	ldr	r1, [sp, #20]
 8007e88:	4299      	cmp	r1, r3
 8007e8a:	f63f adcc 	bhi.w	8007a26 <f_mkfs+0xba>
 8007e8e:	f04f 0801 	mov.w	r8, #1
 8007e92:	e6b4      	b.n	8007bfe <f_mkfs+0x292>
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<=
 8007e94:	0c41      	lsrs	r1, r0, #17
 8007e96:	d042      	beq.n	8007f1e <f_mkfs+0x5b2>
 8007e98:	2901      	cmp	r1, #1
 8007e9a:	d03c      	beq.n	8007f16 <f_mkfs+0x5aa>
 8007e9c:	2903      	cmp	r1, #3
 8007e9e:	d936      	bls.n	8007f0e <f_mkfs+0x5a2>
 8007ea0:	2907      	cmp	r1, #7
 8007ea2:	d930      	bls.n	8007f06 <f_mkfs+0x59a>
 8007ea4:	290f      	cmp	r1, #15
 8007ea6:	d92a      	bls.n	8007efe <f_mkfs+0x592>
 8007ea8:	2920      	cmp	r1, #32
 8007eaa:	bf34      	ite	cc
 8007eac:	2320      	movcc	r3, #32
 8007eae:	2340      	movcs	r3, #64	; 0x40
 8007eb0:	2100      	movs	r1, #0
 8007eb2:	9301      	str	r3, [sp, #4]
 8007eb4:	e607      	b.n	8007ac6 <f_mkfs+0x15a>
 8007eb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1)
 8007eb8:	2604      	movs	r6, #4
 8007eba:	9303      	str	r3, [sp, #12]
 8007ebc:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
 8007ec0:	e652      	b.n	8007b68 <f_mkfs+0x1fc>
 8007ec2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007ec4:	2610      	movs	r6, #16
 8007ec6:	9303      	str	r3, [sp, #12]
 8007ec8:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
 8007ecc:	e64c      	b.n	8007b68 <f_mkfs+0x1fc>
 8007ece:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007ed0:	2608      	movs	r6, #8
 8007ed2:	9303      	str	r3, [sp, #12]
 8007ed4:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
 8007ed8:	e646      	b.n	8007b68 <f_mkfs+0x1fc>
 8007eda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007edc:	2620      	movs	r6, #32
 8007ede:	9303      	str	r3, [sp, #12]
 8007ee0:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
 8007ee4:	e640      	b.n	8007b68 <f_mkfs+0x1fc>
 8007ee6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007ee8:	2601      	movs	r6, #1
 8007eea:	9303      	str	r3, [sp, #12]
 8007eec:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
 8007ef0:	e63a      	b.n	8007b68 <f_mkfs+0x1fc>
 8007ef2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007ef4:	2602      	movs	r6, #2
 8007ef6:	9303      	str	r3, [sp, #12]
 8007ef8:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
 8007efc:	e634      	b.n	8007b68 <f_mkfs+0x1fc>
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<=
 8007efe:	2310      	movs	r3, #16
 8007f00:	2100      	movs	r1, #0
 8007f02:	9301      	str	r3, [sp, #4]
 8007f04:	e5df      	b.n	8007ac6 <f_mkfs+0x15a>
 8007f06:	2308      	movs	r3, #8
 8007f08:	2100      	movs	r1, #0
 8007f0a:	9301      	str	r3, [sp, #4]
 8007f0c:	e5db      	b.n	8007ac6 <f_mkfs+0x15a>
 8007f0e:	2304      	movs	r3, #4
 8007f10:	2100      	movs	r1, #0
 8007f12:	9301      	str	r3, [sp, #4]
 8007f14:	e5d7      	b.n	8007ac6 <f_mkfs+0x15a>
 8007f16:	2302      	movs	r3, #2
 8007f18:	2100      	movs	r1, #0
 8007f1a:	9301      	str	r3, [sp, #4]
 8007f1c:	e5d3      	b.n	8007ac6 <f_mkfs+0x15a>
 8007f1e:	2301      	movs	r3, #1
 8007f20:	9301      	str	r3, [sp, #4]
 8007f22:	e5d0      	b.n	8007ac6 <f_mkfs+0x15a>
 8007f24:	461e      	mov	r6, r3
 8007f26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f28:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
 8007f2c:	9303      	str	r3, [sp, #12]
 8007f2e:	e61b      	b.n	8007b68 <f_mkfs+0x1fc>
 8007f30:	0800a36c 	.word	0x0800a36c
 8007f34:	00ff003f 	.word	0x00ff003f
 8007f38:	0800a38b 	.word	0x0800a38b
 8007f3c:	00010100 	.word	0x00010100
			st_dword(buf + BS_VolID32, GET_FATTIME()); /* VSN */
 8007f40:	f7fb fae6 	bl	8003510 <get_fattime>
			buf[BS_DrvNum32] = 0x80; /* Drive number (for int13) */
 8007f44:	2280      	movs	r2, #128	; 0x80
			buf[BS_BootSig32] = 0x29; /* Extended boot signature */
 8007f46:	2329      	movs	r3, #41	; 0x29
	*ptr++ = (BYTE) val;
 8007f48:	f04f 0c02 	mov.w	ip, #2
	val >>= 8;
 8007f4c:	0a01      	lsrs	r1, r0, #8
	*ptr++ = (BYTE) val;
 8007f4e:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
	val >>= 8;
 8007f52:	0c01      	lsrs	r1, r0, #16
	*ptr++ = (BYTE) val;
 8007f54:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
	*ptr++ = (BYTE) val;
 8007f58:	4944      	ldr	r1, [pc, #272]	; (800806c <f_mkfs+0x700>)
 8007f5a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
	val >>= 8;
 8007f5e:	0e00      	lsrs	r0, r0, #24
	*ptr++ = (BYTE) val;
 8007f60:	f884 0046 	strb.w	r0, [r4, #70]	; 0x46
			buf[BS_DrvNum32] = 0x80; /* Drive number (for int13) */
 8007f64:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
	val >>= 8;
 8007f68:	0a38      	lsrs	r0, r7, #8
	val >>= 8;
 8007f6a:	0c3a      	lsrs	r2, r7, #16
			buf[BS_BootSig32] = 0x29; /* Extended boot signature */
 8007f6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
	*ptr++ = (BYTE) val;
 8007f70:	6321      	str	r1, [r4, #48]	; 0x30
	val >>= 8;
 8007f72:	0e3b      	lsrs	r3, r7, #24
 8007f74:	493e      	ldr	r1, [pc, #248]	; (8008070 <f_mkfs+0x704>)
	*ptr++ = (BYTE) val;
 8007f76:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
	*ptr++ = (BYTE) val;
 8007f7a:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	*ptr++ = (BYTE) val;
 8007f7e:	f884 a024 	strb.w	sl, [r4, #36]	; 0x24
 8007f82:	f8c4 c02c 	str.w	ip, [r4, #44]	; 0x2c
	*ptr++ = (BYTE) val;
 8007f86:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
 8007f8a:	f104 0346 	add.w	r3, r4, #70	; 0x46
 8007f8e:	f104 0259 	add.w	r2, r4, #89	; 0x59
			*d++ = *s++;
 8007f92:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007f96:	f803 0f01 	strb.w	r0, [r3, #1]!
		} while (--cnt);
 8007f9a:	429a      	cmp	r2, r3
 8007f9c:	d1f9      	bne.n	8007f92 <f_mkfs+0x626>
	*ptr++ = (BYTE) val;
 8007f9e:	2255      	movs	r2, #85	; 0x55
	*ptr++ = (BYTE) val;
 8007fa0:	23aa      	movs	r3, #170	; 0xaa
	*ptr++ = (BYTE) val;
 8007fa2:	f884 21fe 	strb.w	r2, [r4, #510]	; 0x1fe
	*ptr++ = (BYTE) val;
 8007fa6:	f884 31ff 	strb.w	r3, [r4, #511]	; 0x1ff
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK)
 8007faa:	9a02      	ldr	r2, [sp, #8]
 8007fac:	2301      	movs	r3, #1
 8007fae:	4621      	mov	r1, r4
 8007fb0:	4628      	mov	r0, r5
 8007fb2:	f7fb fb53 	bl	800365c <disk_write>
 8007fb6:	4682      	mov	sl, r0
 8007fb8:	2800      	cmp	r0, #0
 8007fba:	f47f ad3a 	bne.w	8007a32 <f_mkfs+0xc6>
			disk_write(pdrv, buf, b_vol + 6, 1); /* Write backup VBR (VBR + 6) */
 8007fbe:	9a02      	ldr	r2, [sp, #8]
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	3206      	adds	r2, #6
 8007fc4:	4621      	mov	r1, r4
 8007fc6:	4628      	mov	r0, r5
 8007fc8:	f7fb fb48 	bl	800365c <disk_write>
			mem_set(buf, 0, ss);
 8007fcc:	4622      	mov	r2, r4
 8007fce:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
	} while (--cnt);
 8007fd2:	3b01      	subs	r3, #1
		*d++ = (BYTE) val;
 8007fd4:	f802 ab01 	strb.w	sl, [r2], #1
	} while (--cnt);
 8007fd8:	d1fb      	bne.n	8007fd2 <f_mkfs+0x666>
	*ptr++ = (BYTE) val;
 8007fda:	f04f 0c02 	mov.w	ip, #2
	*ptr++ = (BYTE) val;
 8007fde:	2055      	movs	r0, #85	; 0x55
	*ptr++ = (BYTE) val;
 8007fe0:	21aa      	movs	r1, #170	; 0xaa
			st_dword(buf + FSI_Free_Count, n_clst - 1); /* Number of free clusters */
 8007fe2:	9a05      	ldr	r2, [sp, #20]
	*ptr++ = (BYTE) val;
 8007fe4:	f884 01fe 	strb.w	r0, [r4, #510]	; 0x1fe
			st_dword(buf + FSI_Free_Count, n_clst - 1); /* Number of free clusters */
 8007fe8:	3a01      	subs	r2, #1
	val >>= 8;
 8007fea:	ea4f 2e12 	mov.w	lr, r2, lsr #8
	*ptr++ = (BYTE) val;
 8007fee:	f362 0307 	bfi	r3, r2, #0, #8
 8007ff2:	f36e 230f 	bfi	r3, lr, #8, #8
	val >>= 8;
 8007ff6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
	*ptr++ = (BYTE) val;
 8007ffa:	f36e 4317 	bfi	r3, lr, #16, #8
	val >>= 8;
 8007ffe:	0e12      	lsrs	r2, r2, #24
	*ptr++ = (BYTE) val;
 8008000:	f362 631f 	bfi	r3, r2, #24, #8
 8008004:	4a1b      	ldr	r2, [pc, #108]	; (8008074 <f_mkfs+0x708>)
 8008006:	f8c4 31e8 	str.w	r3, [r4, #488]	; 0x1e8
 800800a:	6022      	str	r2, [r4, #0]
 800800c:	4b1a      	ldr	r3, [pc, #104]	; (8008078 <f_mkfs+0x70c>)
			disk_write(pdrv, buf, b_vol + 7, 1); /* Write backup FSINFO (VBR + 7) */
 800800e:	9a02      	ldr	r2, [sp, #8]
	*ptr++ = (BYTE) val;
 8008010:	f884 11ff 	strb.w	r1, [r4, #511]	; 0x1ff
	*ptr++ = (BYTE) val;
 8008014:	f8c4 31e4 	str.w	r3, [r4, #484]	; 0x1e4
			disk_write(pdrv, buf, b_vol + 7, 1); /* Write backup FSINFO (VBR + 7) */
 8008018:	4621      	mov	r1, r4
	*ptr++ = (BYTE) val;
 800801a:	f8c4 c1ec 	str.w	ip, [r4, #492]	; 0x1ec
			disk_write(pdrv, buf, b_vol + 7, 1); /* Write backup FSINFO (VBR + 7) */
 800801e:	2301      	movs	r3, #1
 8008020:	3207      	adds	r2, #7
 8008022:	4628      	mov	r0, r5
 8008024:	f7fb fb1a 	bl	800365c <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1); /* Write original FSINFO (VBR + 1) */
 8008028:	9a07      	ldr	r2, [sp, #28]
 800802a:	2301      	movs	r3, #1
 800802c:	4621      	mov	r1, r4
 800802e:	4628      	mov	r0, r5
 8008030:	f7fb fb14 	bl	800365c <disk_write>
 8008034:	e659      	b.n	8007cea <f_mkfs+0x37e>
	val >>= 8;
 8008036:	0a02      	lsrs	r2, r0, #8
	*ptr++ = (BYTE) val;
 8008038:	f884 3020 	strb.w	r3, [r4, #32]
	val >>= 8;
 800803c:	0c03      	lsrs	r3, r0, #16
	val >>= 8;
 800803e:	0e00      	lsrs	r0, r0, #24
	*ptr++ = (BYTE) val;
 8008040:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
	*ptr++ = (BYTE) val;
 8008044:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	*ptr++ = (BYTE) val;
 8008048:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
 800804c:	e608      	b.n	8007c60 <f_mkfs+0x2f4>
	*ptr++ = (BYTE) val;
 800804e:	f06f 0107 	mvn.w	r1, #7
 8008052:	f04f 32ff 	mov.w	r2, #4294967295
 8008056:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800805a:	6021      	str	r1, [r4, #0]
 800805c:	6062      	str	r2, [r4, #4]
 800805e:	60a3      	str	r3, [r4, #8]
 8008060:	e65b      	b.n	8007d1a <f_mkfs+0x3ae>
			sys = 0x0C; /* FAT32X */
 8008062:	230c      	movs	r3, #12
 8008064:	e696      	b.n	8007d94 <f_mkfs+0x428>
				sys = 0x06; /* FAT12/16 (>=64KS) */
 8008066:	2306      	movs	r3, #6
 8008068:	e694      	b.n	8007d94 <f_mkfs+0x428>
 800806a:	bf00      	nop
 800806c:	00060001 	.word	0x00060001
 8008070:	0800a377 	.word	0x0800a377
 8008074:	41615252 	.word	0x41615252
 8008078:	61417272 	.word	0x61417272

0800807c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800807c:	b4f0      	push	{r4, r5, r6, r7}
  if(disk.nbr < _VOLUMES)
 800807e:	4b11      	ldr	r3, [pc, #68]	; (80080c4 <FATFS_LinkDriver+0x48>)
 8008080:	7a5c      	ldrb	r4, [r3, #9]
 8008082:	b114      	cbz	r4, 800808a <FATFS_LinkDriver+0xe>
  return FATFS_LinkDriverEx(drv, path, 0);
}
 8008084:	bcf0      	pop	{r4, r5, r6, r7}
  uint8_t ret = 1;
 8008086:	2001      	movs	r0, #1
}
 8008088:	4770      	bx	lr
    path[1] = ':';
 800808a:	273a      	movs	r7, #58	; 0x3a
    path[2] = '/';
 800808c:	262f      	movs	r6, #47	; 0x2f
    disk.is_initialized[disk.nbr] = 0;
 800808e:	f893 c009 	ldrb.w	ip, [r3, #9]
    disk.drv[disk.nbr] = drv;
 8008092:	7a5d      	ldrb	r5, [r3, #9]
 8008094:	f004 02ff 	and.w	r2, r4, #255	; 0xff
 8008098:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    disk.lun[disk.nbr] = lun;
 800809c:	7a5c      	ldrb	r4, [r3, #9]
    disk.drv[disk.nbr] = drv;
 800809e:	6068      	str	r0, [r5, #4]
    DiskNum = disk.nbr++;
 80080a0:	7a58      	ldrb	r0, [r3, #9]
    disk.lun[disk.nbr] = lun;
 80080a2:	441c      	add	r4, r3
    DiskNum = disk.nbr++;
 80080a4:	b2c0      	uxtb	r0, r0
    disk.lun[disk.nbr] = lun;
 80080a6:	7222      	strb	r2, [r4, #8]
    DiskNum = disk.nbr++;
 80080a8:	1c44      	adds	r4, r0, #1
 80080aa:	b2e4      	uxtb	r4, r4
 80080ac:	725c      	strb	r4, [r3, #9]
    disk.is_initialized[disk.nbr] = 0;
 80080ae:	f803 200c 	strb.w	r2, [r3, ip]
    path[0] = DiskNum + '0';
 80080b2:	3030      	adds	r0, #48	; 0x30
 80080b4:	7008      	strb	r0, [r1, #0]
    path[1] = ':';
 80080b6:	704f      	strb	r7, [r1, #1]
    path[3] = 0;
 80080b8:	4610      	mov	r0, r2
    path[2] = '/';
 80080ba:	708e      	strb	r6, [r1, #2]
    path[3] = 0;
 80080bc:	70ca      	strb	r2, [r1, #3]
}
 80080be:	bcf0      	pop	{r4, r5, r6, r7}
 80080c0:	4770      	bx	lr
 80080c2:	bf00      	nop
 80080c4:	200002b0 	.word	0x200002b0

080080c8 <SD_initialize>:
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
  Stat = STA_NOINIT;
 80080c8:	2301      	movs	r3, #1
{
 80080ca:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 80080cc:	4c05      	ldr	r4, [pc, #20]	; (80080e4 <SD_initialize+0x1c>)
 80080ce:	7023      	strb	r3, [r4, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 80080d0:	f7fb fa78 	bl	80035c4 <BSP_SD_Init>
 80080d4:	b918      	cbnz	r0, 80080de <SD_initialize+0x16>
  {
    Stat &= ~STA_NOINIT;
 80080d6:	7823      	ldrb	r3, [r4, #0]
 80080d8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80080dc:	7023      	strb	r3, [r4, #0]
  }

  return Stat;
 80080de:	7820      	ldrb	r0, [r4, #0]
}
 80080e0:	bd10      	pop	{r4, pc}
 80080e2:	bf00      	nop
 80080e4:	2000000c 	.word	0x2000000c

080080e8 <SD_status>:
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
  Stat = STA_NOINIT;
 80080e8:	2301      	movs	r3, #1
{
 80080ea:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 80080ec:	4c05      	ldr	r4, [pc, #20]	; (8008104 <SD_status+0x1c>)
 80080ee:	7023      	strb	r3, [r4, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80080f0:	f7fb fa36 	bl	8003560 <BSP_SD_GetCardState>
 80080f4:	b918      	cbnz	r0, 80080fe <SD_status+0x16>
  {
    Stat &= ~STA_NOINIT;
 80080f6:	7823      	ldrb	r3, [r4, #0]
 80080f8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80080fc:	7023      	strb	r3, [r4, #0]
  }
  
  return Stat;
 80080fe:	7820      	ldrb	r0, [r4, #0]
}
 8008100:	bd10      	pop	{r4, pc}
 8008102:	bf00      	nop
 8008104:	2000000c 	.word	0x2000000c

08008108 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008108:	b510      	push	{r4, lr}
  DRESULT res = RES_ERROR;
  uint32_t timeout = 100000;

  if(BSP_SD_ReadBlocks((uint32_t*)buff, 
 800810a:	4608      	mov	r0, r1
 800810c:	4611      	mov	r1, r2
 800810e:	461a      	mov	r2, r3
 8008110:	4b07      	ldr	r3, [pc, #28]	; (8008130 <SD_read+0x28>)
 8008112:	f7fb fa01 	bl	8003518 <BSP_SD_ReadBlocks>
 8008116:	b940      	cbnz	r0, 800812a <SD_read+0x22>
 8008118:	4c06      	ldr	r4, [pc, #24]	; (8008134 <SD_read+0x2c>)
 800811a:	e001      	b.n	8008120 <SD_read+0x18>
                       (uint32_t) (sector), 
                       count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
    {
      if (timeout-- == 0)
 800811c:	3c01      	subs	r4, #1
 800811e:	d004      	beq.n	800812a <SD_read+0x22>
    while(BSP_SD_GetCardState()!= MSD_OK)
 8008120:	f7fb fa1e 	bl	8003560 <BSP_SD_GetCardState>
 8008124:	2800      	cmp	r0, #0
 8008126:	d1f9      	bne.n	800811c <SD_read+0x14>
    }
    res = RES_OK;
  }
  
  return res;
}
 8008128:	bd10      	pop	{r4, pc}
  DRESULT res = RES_ERROR;
 800812a:	2001      	movs	r0, #1
}
 800812c:	bd10      	pop	{r4, pc}
 800812e:	bf00      	nop
 8008130:	05f5e100 	.word	0x05f5e100
 8008134:	000186a1 	.word	0x000186a1

08008138 <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008138:	4b16      	ldr	r3, [pc, #88]	; (8008194 <SD_ioctl+0x5c>)
 800813a:	781b      	ldrb	r3, [r3, #0]
 800813c:	07db      	lsls	r3, r3, #31
 800813e:	d408      	bmi.n	8008152 <SD_ioctl+0x1a>
{
 8008140:	b510      	push	{r4, lr}
 8008142:	4614      	mov	r4, r2
 8008144:	b088      	sub	sp, #32
  
  switch (cmd)
 8008146:	2903      	cmp	r1, #3
 8008148:	d820      	bhi.n	800818c <SD_ioctl+0x54>
 800814a:	e8df f001 	tbb	[pc, r1]
 800814e:	0704      	.short	0x0704
 8008150:	170f      	.short	0x170f
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008152:	2003      	movs	r0, #3
  default:
    res = RES_PARERR;
  }
  
  return res;
}
 8008154:	4770      	bx	lr
    res = RES_OK;
 8008156:	2000      	movs	r0, #0
}
 8008158:	b008      	add	sp, #32
 800815a:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800815c:	4668      	mov	r0, sp
 800815e:	f7fb fa09 	bl	8003574 <BSP_SD_GetCardInfo>
 8008162:	2000      	movs	r0, #0
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8008164:	9b06      	ldr	r3, [sp, #24]
 8008166:	6023      	str	r3, [r4, #0]
}
 8008168:	b008      	add	sp, #32
 800816a:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800816c:	4668      	mov	r0, sp
 800816e:	f7fb fa01 	bl	8003574 <BSP_SD_GetCardInfo>
    res = RES_OK;
 8008172:	2000      	movs	r0, #0
    *(WORD*)buff = CardInfo.LogBlockSize;
 8008174:	9b07      	ldr	r3, [sp, #28]
 8008176:	8023      	strh	r3, [r4, #0]
}
 8008178:	b008      	add	sp, #32
 800817a:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800817c:	4668      	mov	r0, sp
 800817e:	f7fb f9f9 	bl	8003574 <BSP_SD_GetCardInfo>
    res = RES_OK;
 8008182:	2000      	movs	r0, #0
    *(DWORD*)buff = CardInfo.LogBlockSize;
 8008184:	9b07      	ldr	r3, [sp, #28]
 8008186:	6023      	str	r3, [r4, #0]
}
 8008188:	b008      	add	sp, #32
 800818a:	bd10      	pop	{r4, pc}
    res = RES_PARERR;
 800818c:	2004      	movs	r0, #4
}
 800818e:	b008      	add	sp, #32
 8008190:	bd10      	pop	{r4, pc}
 8008192:	bf00      	nop
 8008194:	2000000c 	.word	0x2000000c

08008198 <SD_write>:
{
 8008198:	b510      	push	{r4, lr}
  if(BSP_SD_WriteBlocks((uint32_t*)buff, 
 800819a:	4608      	mov	r0, r1
 800819c:	4611      	mov	r1, r2
 800819e:	461a      	mov	r2, r3
 80081a0:	4b07      	ldr	r3, [pc, #28]	; (80081c0 <SD_write+0x28>)
 80081a2:	f7fb f9cb 	bl	800353c <BSP_SD_WriteBlocks>
 80081a6:	b940      	cbnz	r0, 80081ba <SD_write+0x22>
 80081a8:	4c06      	ldr	r4, [pc, #24]	; (80081c4 <SD_write+0x2c>)
 80081aa:	e001      	b.n	80081b0 <SD_write+0x18>
      if (timeout-- == 0)
 80081ac:	3c01      	subs	r4, #1
 80081ae:	d004      	beq.n	80081ba <SD_write+0x22>
    while(BSP_SD_GetCardState()!= MSD_OK)
 80081b0:	f7fb f9d6 	bl	8003560 <BSP_SD_GetCardState>
 80081b4:	2800      	cmp	r0, #0
 80081b6:	d1f9      	bne.n	80081ac <SD_write+0x14>
}
 80081b8:	bd10      	pop	{r4, pc}
  DRESULT res = RES_ERROR;
 80081ba:	2001      	movs	r0, #1
}
 80081bc:	bd10      	pop	{r4, pc}
 80081be:	bf00      	nop
 80081c0:	05f5e100 	.word	0x05f5e100
 80081c4:	000186a1 	.word	0x000186a1

080081c8 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80081c8:	287f      	cmp	r0, #127	; 0x7f
 80081ca:	d918      	bls.n	80081fe <ff_convert+0x36>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
 80081cc:	b981      	cbnz	r1, 80081f0 <ff_convert+0x28>
{
 80081ce:	b410      	push	{r4}
 80081d0:	4b0d      	ldr	r3, [pc, #52]	; (8008208 <ff_convert+0x40>)
 80081d2:	e001      	b.n	80081d8 <ff_convert+0x10>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80081d4:	2980      	cmp	r1, #128	; 0x80
 80081d6:	d015      	beq.n	8008204 <ff_convert+0x3c>
				if (chr == Tbl[c]) break;
 80081d8:	f833 2b02 	ldrh.w	r2, [r3], #2
 80081dc:	b28c      	uxth	r4, r1
 80081de:	4282      	cmp	r2, r0
 80081e0:	f101 0101 	add.w	r1, r1, #1
 80081e4:	d1f6      	bne.n	80081d4 <ff_convert+0xc>
 80081e6:	f104 0080 	add.w	r0, r4, #128	; 0x80
 80081ea:	b280      	uxth	r0, r0
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
 80081ec:	bc10      	pop	{r4}
 80081ee:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80081f0:	28ff      	cmp	r0, #255	; 0xff
 80081f2:	d805      	bhi.n	8008200 <ff_convert+0x38>
 80081f4:	4b04      	ldr	r3, [pc, #16]	; (8008208 <ff_convert+0x40>)
 80081f6:	3880      	subs	r0, #128	; 0x80
 80081f8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80081fc:	4770      	bx	lr
}
 80081fe:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8008200:	2000      	movs	r0, #0
 8008202:	4770      	bx	lr
 8008204:	2000      	movs	r0, #0
 8008206:	e7f1      	b.n	80081ec <ff_convert+0x24>
 8008208:	0800a3c8 	.word	0x0800a3c8

0800820c <ff_wtoupper>:
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800820c:	4b23      	ldr	r3, [pc, #140]	; (800829c <ff_wtoupper+0x90>)
 800820e:	4a24      	ldr	r2, [pc, #144]	; (80082a0 <ff_wtoupper+0x94>)
{
 8008210:	b470      	push	{r4, r5, r6}
	p = chr < 0x1000 ? cvt1 : cvt2;
 8008212:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8008216:	bf28      	it	cs
 8008218:	4613      	movcs	r3, r2
 800821a:	3304      	adds	r3, #4
 800821c:	e00b      	b.n	8008236 <ff_wtoupper+0x2a>
	for (;;) {
		bc = *p++;								/* Get block base */
		if (!bc || chr < bc) break;
 800821e:	4288      	cmp	r0, r1
 8008220:	d30e      	bcc.n	8008240 <ff_wtoupper+0x34>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8008222:	f833 2c02 	ldrh.w	r2, [r3, #-2]
 8008226:	b2d4      	uxtb	r4, r2
		if (chr < bc + nc) {	/* In the block? */
 8008228:	1865      	adds	r5, r4, r1
 800822a:	42a8      	cmp	r0, r5
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800822c:	ea4f 2212 	mov.w	r2, r2, lsr #8
		if (chr < bc + nc) {	/* In the block? */
 8008230:	db08      	blt.n	8008244 <ff_wtoupper+0x38>
 8008232:	3304      	adds	r3, #4
			case 7: chr -= 80; break;				/* Shift -80 */
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
			}
			break;
		}
		if (!cmd) p += nc;
 8008234:	b17a      	cbz	r2, 8008256 <ff_wtoupper+0x4a>
		bc = *p++;								/* Get block base */
 8008236:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 800823a:	461e      	mov	r6, r3
		if (!bc || chr < bc) break;
 800823c:	2900      	cmp	r1, #0
 800823e:	d1ee      	bne.n	800821e <ff_wtoupper+0x12>
	}

	return chr;
}
 8008240:	bc70      	pop	{r4, r5, r6}
 8008242:	4770      	bx	lr
			switch (cmd) {
 8008244:	2a08      	cmp	r2, #8
 8008246:	d8fb      	bhi.n	8008240 <ff_wtoupper+0x34>
 8008248:	e8df f002 	tbb	[pc, r2]
 800824c:	1916100c 	.word	0x1916100c
 8008250:	25221f1c 	.word	0x25221f1c
 8008254:	08          	.byte	0x08
 8008255:	00          	.byte	0x00
		if (!cmd) p += nc;
 8008256:	eb06 0344 	add.w	r3, r6, r4, lsl #1
 800825a:	e7de      	b.n	800821a <ff_wtoupper+0xe>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800825c:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
 8008260:	b280      	uxth	r0, r0
 8008262:	e7ed      	b.n	8008240 <ff_wtoupper+0x34>
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8008264:	1a41      	subs	r1, r0, r1
 8008266:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 800826a:	e7e9      	b.n	8008240 <ff_wtoupper+0x34>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800826c:	1a41      	subs	r1, r0, r1
 800826e:	f001 0301 	and.w	r3, r1, #1
 8008272:	1ac0      	subs	r0, r0, r3
 8008274:	b280      	uxth	r0, r0
 8008276:	e7e3      	b.n	8008240 <ff_wtoupper+0x34>
			case 2: chr -= 16; break;				/* Shift -16 */
 8008278:	3810      	subs	r0, #16
 800827a:	b280      	uxth	r0, r0
 800827c:	e7e0      	b.n	8008240 <ff_wtoupper+0x34>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800827e:	3820      	subs	r0, #32
 8008280:	b280      	uxth	r0, r0
 8008282:	e7dd      	b.n	8008240 <ff_wtoupper+0x34>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8008284:	3830      	subs	r0, #48	; 0x30
 8008286:	b280      	uxth	r0, r0
 8008288:	e7da      	b.n	8008240 <ff_wtoupper+0x34>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800828a:	381a      	subs	r0, #26
 800828c:	b280      	uxth	r0, r0
 800828e:	e7d7      	b.n	8008240 <ff_wtoupper+0x34>
			case 6:	chr += 8; break;				/* Shift +8 */
 8008290:	3008      	adds	r0, #8
 8008292:	b280      	uxth	r0, r0
 8008294:	e7d4      	b.n	8008240 <ff_wtoupper+0x34>
			case 7: chr -= 80; break;				/* Shift -80 */
 8008296:	3850      	subs	r0, #80	; 0x50
 8008298:	b280      	uxth	r0, r0
 800829a:	e7d1      	b.n	8008240 <ff_wtoupper+0x34>
 800829c:	0800a4c8 	.word	0x0800a4c8
 80082a0:	0800a6bc 	.word	0x0800a6bc

080082a4 <ff_cre_syncobj>:
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
  int ret;
  
  osSemaphoreDef(SEM);
 80082a4:	2300      	movs	r3, #0
{
 80082a6:	b510      	push	{r4, lr}
 80082a8:	b082      	sub	sp, #8
 80082aa:	460c      	mov	r4, r1
  *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);		
 80082ac:	4668      	mov	r0, sp
 80082ae:	2101      	movs	r1, #1
  osSemaphoreDef(SEM);
 80082b0:	e9cd 3300 	strd	r3, r3, [sp]
  *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);		
 80082b4:	f000 f850 	bl	8008358 <osSemaphoreCreate>
 80082b8:	6020      	str	r0, [r4, #0]
  ret = (*sobj != NULL);
  
  return ret;
}
 80082ba:	3000      	adds	r0, #0
 80082bc:	bf18      	it	ne
 80082be:	2001      	movne	r0, #1
 80082c0:	b002      	add	sp, #8
 80082c2:	bd10      	pop	{r4, pc}

080082c4 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* TRUE:Function succeeded, FALSE:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 80082c4:	b508      	push	{r3, lr}
  osSemaphoreDelete (sobj);
 80082c6:	f000 f8c5 	bl	8008454 <osSemaphoreDelete>
  return 1;
}
 80082ca:	2001      	movs	r0, #1
 80082cc:	bd08      	pop	{r3, pc}
 80082ce:	bf00      	nop

080082d0 <ff_req_grant>:
*/

int ff_req_grant (	/* TRUE:Got a grant to access the volume, FALSE:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 80082d0:	b508      	push	{r3, lr}
  int ret = 0;
  
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 80082d2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80082d6:	f000 f869 	bl	80083ac <osSemaphoreWait>
  {
    ret = 1;
  }
  
  return ret;
}
 80082da:	fab0 f080 	clz	r0, r0
 80082de:	0940      	lsrs	r0, r0, #5
 80082e0:	bd08      	pop	{r3, pc}
 80082e2:	bf00      	nop

080082e4 <ff_rel_grant>:

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
  osSemaphoreRelease(sobj);
 80082e4:	f000 b88e 	b.w	8008404 <osSemaphoreRelease>

080082e8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80082e8:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80082ea:	f001 f8cf 	bl	800948c <vTaskStartScheduler>
  
  return osOK;
}
 80082ee:	2000      	movs	r0, #0
 80082f0:	bd08      	pop	{r3, pc}
 80082f2:	bf00      	nop

080082f4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80082f4:	b570      	push	{r4, r5, r6, lr}
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80082f6:	6945      	ldr	r5, [r0, #20]
{
 80082f8:	460b      	mov	r3, r1
 80082fa:	e9d0 1600 	ldrd	r1, r6, [r0]
 80082fe:	b086      	sub	sp, #24
 8008300:	6902      	ldr	r2, [r0, #16]
 8008302:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008306:	b16d      	cbz	r5, 8008324 <osThreadCreate+0x30>
 8008308:	6980      	ldr	r0, [r0, #24]
 800830a:	b158      	cbz	r0, 8008324 <osThreadCreate+0x30>
  if (priority != osPriorityError) {
 800830c:	2c84      	cmp	r4, #132	; 0x84
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800830e:	bf0c      	ite	eq
 8008310:	2400      	moveq	r4, #0
    fpriority += (priority - osPriorityIdle);
 8008312:	3403      	addne	r4, #3
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008314:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8008318:	9400      	str	r4, [sp, #0]
 800831a:	4630      	mov	r0, r6
 800831c:	f000 ffd6 	bl	80092cc <xTaskCreateStatic>
    return NULL;
  }     
#endif
  
  return handle;
}
 8008320:	b006      	add	sp, #24
 8008322:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 8008324:	2c84      	cmp	r4, #132	; 0x84
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008326:	bf0c      	ite	eq
 8008328:	2400      	moveq	r4, #0
    fpriority += (priority - osPriorityIdle);
 800832a:	3403      	addne	r4, #3
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800832c:	ad05      	add	r5, sp, #20
 800832e:	b292      	uxth	r2, r2
 8008330:	9400      	str	r4, [sp, #0]
 8008332:	4630      	mov	r0, r6
 8008334:	9501      	str	r5, [sp, #4]
 8008336:	f001 f801 	bl	800933c <xTaskCreate>
 800833a:	2801      	cmp	r0, #1
      return NULL;
 800833c:	bf14      	ite	ne
 800833e:	2000      	movne	r0, #0
 8008340:	9805      	ldreq	r0, [sp, #20]
}
 8008342:	b006      	add	sp, #24
 8008344:	bd70      	pop	{r4, r5, r6, pc}
 8008346:	bf00      	nop

08008348 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008348:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800834a:	2800      	cmp	r0, #0
 800834c:	bf08      	it	eq
 800834e:	2001      	moveq	r0, #1
 8008350:	f001 fa3a 	bl	80097c8 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008354:	2000      	movs	r0, #0
 8008356:	bd08      	pop	{r3, pc}

08008358 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8008358:	b530      	push	{r4, r5, lr}
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800835a:	6844      	ldr	r4, [r0, #4]
{ 
 800835c:	b083      	sub	sp, #12
  if (semaphore_def->controlblock != NULL){
 800835e:	b16c      	cbz	r4, 800837c <osSemaphoreCreate+0x24>
    if (count == 1) {
 8008360:	2901      	cmp	r1, #1
 8008362:	d11d      	bne.n	80083a0 <osSemaphoreCreate+0x48>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8008364:	2503      	movs	r5, #3
 8008366:	2200      	movs	r2, #0
 8008368:	4608      	mov	r0, r1
 800836a:	9500      	str	r5, [sp, #0]
 800836c:	4623      	mov	r3, r4
 800836e:	4611      	mov	r1, r2
 8008370:	f000 f952 	bl	8008618 <xQueueGenericCreateStatic>
 8008374:	4605      	mov	r5, r0
#else
    return NULL;
#endif
  }
#endif
}
 8008376:	4628      	mov	r0, r5
 8008378:	b003      	add	sp, #12
 800837a:	bd30      	pop	{r4, r5, pc}
    if (count == 1) {
 800837c:	2901      	cmp	r1, #1
 800837e:	d113      	bne.n	80083a8 <osSemaphoreCreate+0x50>
      vSemaphoreCreateBinary(sema);
 8008380:	4608      	mov	r0, r1
 8008382:	2203      	movs	r2, #3
 8008384:	4621      	mov	r1, r4
 8008386:	f000 f999 	bl	80086bc <xQueueGenericCreate>
 800838a:	4605      	mov	r5, r0
 800838c:	2800      	cmp	r0, #0
 800838e:	d0f2      	beq.n	8008376 <osSemaphoreCreate+0x1e>
 8008390:	4623      	mov	r3, r4
 8008392:	4622      	mov	r2, r4
 8008394:	4621      	mov	r1, r4
 8008396:	f000 f9db 	bl	8008750 <xQueueGenericSend>
}
 800839a:	4628      	mov	r0, r5
 800839c:	b003      	add	sp, #12
 800839e:	bd30      	pop	{r4, r5, pc}
      return NULL;
 80083a0:	2500      	movs	r5, #0
}
 80083a2:	4628      	mov	r0, r5
 80083a4:	b003      	add	sp, #12
 80083a6:	bd30      	pop	{r4, r5, pc}
      return NULL;
 80083a8:	4625      	mov	r5, r4
 80083aa:	e7e4      	b.n	8008376 <osSemaphoreCreate+0x1e>

080083ac <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80083ac:	b510      	push	{r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80083ae:	2400      	movs	r4, #0
{
 80083b0:	b082      	sub	sp, #8
  portBASE_TYPE taskWoken = pdFALSE;  
 80083b2:	9401      	str	r4, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 80083b4:	b300      	cbz	r0, 80083f8 <osSemaphoreWait+0x4c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80083b6:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 80083ba:	b933      	cbnz	r3, 80083ca <osSemaphoreWait+0x1e>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80083bc:	f000 fbb0 	bl	8008b20 <xQueueSemaphoreTake>
 80083c0:	2801      	cmp	r0, #1
 80083c2:	d116      	bne.n	80083f2 <osSemaphoreWait+0x46>
    return osErrorOS;
  }
  
  return osOK;
 80083c4:	2000      	movs	r0, #0
}
 80083c6:	b002      	add	sp, #8
 80083c8:	bd10      	pop	{r4, pc}
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80083ca:	aa01      	add	r2, sp, #4
 80083cc:	4621      	mov	r1, r4
 80083ce:	f000 fd31 	bl	8008e34 <xQueueReceiveFromISR>
 80083d2:	2801      	cmp	r0, #1
 80083d4:	d10d      	bne.n	80083f2 <osSemaphoreWait+0x46>
	portEND_SWITCHING_ISR(taskWoken);
 80083d6:	9b01      	ldr	r3, [sp, #4]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d0f3      	beq.n	80083c4 <osSemaphoreWait+0x18>
 80083dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083e0:	4b07      	ldr	r3, [pc, #28]	; (8008400 <osSemaphoreWait+0x54>)
 80083e2:	601a      	str	r2, [r3, #0]
 80083e4:	f3bf 8f4f 	dsb	sy
 80083e8:	f3bf 8f6f 	isb	sy
  return osOK;
 80083ec:	4620      	mov	r0, r4
}
 80083ee:	b002      	add	sp, #8
 80083f0:	bd10      	pop	{r4, pc}
      return osErrorOS;
 80083f2:	20ff      	movs	r0, #255	; 0xff
}
 80083f4:	b002      	add	sp, #8
 80083f6:	bd10      	pop	{r4, pc}
    return osErrorParameter;
 80083f8:	2080      	movs	r0, #128	; 0x80
}
 80083fa:	b002      	add	sp, #8
 80083fc:	bd10      	pop	{r4, pc}
 80083fe:	bf00      	nop
 8008400:	e000ed04 	.word	0xe000ed04

08008404 <osSemaphoreRelease>:
 8008404:	b510      	push	{r4, lr}
 8008406:	2400      	movs	r4, #0
 8008408:	b082      	sub	sp, #8
 800840a:	9401      	str	r4, [sp, #4]
 800840c:	f3ef 8305 	mrs	r3, IPSR
 8008410:	b14b      	cbz	r3, 8008426 <osSemaphoreRelease+0x22>
 8008412:	a901      	add	r1, sp, #4
 8008414:	f000 fb2e 	bl	8008a74 <xQueueGiveFromISR>
 8008418:	2801      	cmp	r0, #1
 800841a:	d10a      	bne.n	8008432 <osSemaphoreRelease+0x2e>
 800841c:	9b01      	ldr	r3, [sp, #4]
 800841e:	b95b      	cbnz	r3, 8008438 <osSemaphoreRelease+0x34>
 8008420:	2000      	movs	r0, #0
 8008422:	b002      	add	sp, #8
 8008424:	bd10      	pop	{r4, pc}
 8008426:	461a      	mov	r2, r3
 8008428:	4619      	mov	r1, r3
 800842a:	f000 f991 	bl	8008750 <xQueueGenericSend>
 800842e:	2801      	cmp	r0, #1
 8008430:	d0f6      	beq.n	8008420 <osSemaphoreRelease+0x1c>
 8008432:	20ff      	movs	r0, #255	; 0xff
 8008434:	b002      	add	sp, #8
 8008436:	bd10      	pop	{r4, pc}
 8008438:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800843c:	4b04      	ldr	r3, [pc, #16]	; (8008450 <osSemaphoreRelease+0x4c>)
 800843e:	601a      	str	r2, [r3, #0]
 8008440:	f3bf 8f4f 	dsb	sy
 8008444:	f3bf 8f6f 	isb	sy
 8008448:	4620      	mov	r0, r4
 800844a:	b002      	add	sp, #8
 800844c:	bd10      	pop	{r4, pc}
 800844e:	bf00      	nop
 8008450:	e000ed04 	.word	0xe000ed04

08008454 <osSemaphoreDelete>:
 8008454:	b510      	push	{r4, lr}
 8008456:	f3ef 8405 	mrs	r4, IPSR
 800845a:	b91c      	cbnz	r4, 8008464 <osSemaphoreDelete+0x10>
 800845c:	f000 fd46 	bl	8008eec <vQueueDelete>
 8008460:	4620      	mov	r0, r4
 8008462:	bd10      	pop	{r4, pc}
 8008464:	2082      	movs	r0, #130	; 0x82
 8008466:	bd10      	pop	{r4, pc}

08008468 <vListInitialise>:
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008468:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800846c:	2200      	movs	r2, #0
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800846e:	f100 0308 	add.w	r3, r0, #8
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008472:	6081      	str	r1, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008474:	6002      	str	r2, [r0, #0]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008476:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008478:	e9c0 3303 	strd	r3, r3, [r0, #12]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800847c:	4770      	bx	lr
 800847e:	bf00      	nop

08008480 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8008480:	2300      	movs	r3, #0
 8008482:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008484:	4770      	bx	lr
 8008486:	bf00      	nop

08008488 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8008488:	6843      	ldr	r3, [r0, #4]
{
 800848a:	b410      	push	{r4}

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800848c:	689c      	ldr	r4, [r3, #8]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800848e:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008490:	608c      	str	r4, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008492:	689c      	ldr	r4, [r3, #8]
	( pxList->uxNumberOfItems )++;
 8008494:	3201      	adds	r2, #1
	pxNewListItem->pxNext = pxIndex;
 8008496:	604b      	str	r3, [r1, #4]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008498:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800849a:	6099      	str	r1, [r3, #8]
}
 800849c:	bc10      	pop	{r4}
	pxNewListItem->pvContainer = ( void * ) pxList;
 800849e:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80084a0:	6002      	str	r2, [r0, #0]
}
 80084a2:	4770      	bx	lr

080084a4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80084a4:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80084a6:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80084a8:	1c6b      	adds	r3, r5, #1
 80084aa:	d011      	beq.n	80084d0 <vListInsert+0x2c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80084ac:	f100 0208 	add.w	r2, r0, #8
 80084b0:	e000      	b.n	80084b4 <vListInsert+0x10>
 80084b2:	461a      	mov	r2, r3
 80084b4:	6853      	ldr	r3, [r2, #4]
 80084b6:	681c      	ldr	r4, [r3, #0]
 80084b8:	42ac      	cmp	r4, r5
 80084ba:	d9fa      	bls.n	80084b2 <vListInsert+0xe>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80084bc:	6804      	ldr	r4, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 80084be:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 80084c0:	3401      	adds	r4, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80084c2:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80084c4:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80084c6:	6051      	str	r1, [r2, #4]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80084c8:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80084ca:	6004      	str	r4, [r0, #0]
}
 80084cc:	bc30      	pop	{r4, r5}
 80084ce:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 80084d0:	6902      	ldr	r2, [r0, #16]
 80084d2:	6853      	ldr	r3, [r2, #4]
 80084d4:	e7f2      	b.n	80084bc <vListInsert+0x18>
 80084d6:	bf00      	nop

080084d8 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80084d8:	6903      	ldr	r3, [r0, #16]
{
 80084da:	b410      	push	{r4}

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80084dc:	e9d0 2101 	ldrd	r2, r1, [r0, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80084e0:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80084e2:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80084e4:	6881      	ldr	r1, [r0, #8]
	if( pxList->pxIndex == pxItemToRemove )
 80084e6:	4284      	cmp	r4, r0
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80084e8:	604a      	str	r2, [r1, #4]
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80084ea:	bf08      	it	eq
 80084ec:	6059      	streq	r1, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80084ee:	2100      	movs	r1, #0
	( pxList->uxNumberOfItems )--;
 80084f0:	681a      	ldr	r2, [r3, #0]
	pxItemToRemove->pvContainer = NULL;
 80084f2:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80084f4:	3a01      	subs	r2, #1
 80084f6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80084f8:	6818      	ldr	r0, [r3, #0]
}
 80084fa:	bc10      	pop	{r4}
 80084fc:	4770      	bx	lr
 80084fe:	bf00      	nop

08008500 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008500:	b570      	push	{r4, r5, r6, lr}
 8008502:	4605      	mov	r5, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008504:	f001 fc36 	bl	8009d74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008508:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 800850c:	b264      	sxtb	r4, r4

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800850e:	2c00      	cmp	r4, #0
 8008510:	dd16      	ble.n	8008540 <prvUnlockQueue+0x40>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008512:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008514:	b1a3      	cbz	r3, 8008540 <prvUnlockQueue+0x40>
 8008516:	f105 0624 	add.w	r6, r5, #36	; 0x24
 800851a:	e005      	b.n	8008528 <prvUnlockQueue+0x28>
 800851c:	3c01      	subs	r4, #1
 800851e:	b2e3      	uxtb	r3, r4
 8008520:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008522:	b16b      	cbz	r3, 8008540 <prvUnlockQueue+0x40>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008524:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008526:	b15b      	cbz	r3, 8008540 <prvUnlockQueue+0x40>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008528:	4630      	mov	r0, r6
 800852a:	f001 f9ff 	bl	800992c <xTaskRemoveFromEventList>
 800852e:	2800      	cmp	r0, #0
 8008530:	d0f4      	beq.n	800851c <prvUnlockQueue+0x1c>
 8008532:	3c01      	subs	r4, #1
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008534:	f001 fa92 	bl	8009a5c <vTaskMissedYield>
 8008538:	b2e3      	uxtb	r3, r4
 800853a:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800853c:	2b00      	cmp	r3, #0
 800853e:	d1f1      	bne.n	8008524 <prvUnlockQueue+0x24>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008540:	23ff      	movs	r3, #255	; 0xff
 8008542:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008546:	f001 fc37 	bl	8009db8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800854a:	f001 fc13 	bl	8009d74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800854e:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8008552:	b264      	sxtb	r4, r4

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008554:	2c00      	cmp	r4, #0
 8008556:	dd16      	ble.n	8008586 <prvUnlockQueue+0x86>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008558:	692b      	ldr	r3, [r5, #16]
 800855a:	b1a3      	cbz	r3, 8008586 <prvUnlockQueue+0x86>
 800855c:	f105 0610 	add.w	r6, r5, #16
 8008560:	e005      	b.n	800856e <prvUnlockQueue+0x6e>
 8008562:	3c01      	subs	r4, #1
 8008564:	b2e3      	uxtb	r3, r4
 8008566:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008568:	b16b      	cbz	r3, 8008586 <prvUnlockQueue+0x86>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800856a:	692b      	ldr	r3, [r5, #16]
 800856c:	b15b      	cbz	r3, 8008586 <prvUnlockQueue+0x86>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800856e:	4630      	mov	r0, r6
 8008570:	f001 f9dc 	bl	800992c <xTaskRemoveFromEventList>
 8008574:	2800      	cmp	r0, #0
 8008576:	d0f4      	beq.n	8008562 <prvUnlockQueue+0x62>
 8008578:	3c01      	subs	r4, #1
				{
					vTaskMissedYield();
 800857a:	f001 fa6f 	bl	8009a5c <vTaskMissedYield>
 800857e:	b2e3      	uxtb	r3, r4
 8008580:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008582:	2b00      	cmp	r3, #0
 8008584:	d1f1      	bne.n	800856a <prvUnlockQueue+0x6a>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008586:	23ff      	movs	r3, #255	; 0xff
 8008588:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 800858c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8008590:	f001 bc12 	b.w	8009db8 <vPortExitCritical>

08008594 <xQueueGenericReset>:
	configASSERT( pxQueue );
 8008594:	b1e8      	cbz	r0, 80085d2 <xQueueGenericReset+0x3e>
{
 8008596:	b570      	push	{r4, r5, r6, lr}
 8008598:	4604      	mov	r4, r0
 800859a:	460d      	mov	r5, r1
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800859c:	2600      	movs	r6, #0
	taskENTER_CRITICAL();
 800859e:	f001 fbe9 	bl	8009d74 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80085a2:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
		pxQueue->cRxLock = queueUNLOCKED;
 80085a6:	20ff      	movs	r0, #255	; 0xff
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80085a8:	fb03 f302 	mul.w	r3, r3, r2
 80085ac:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80085ae:	1a9a      	subs	r2, r3, r2
 80085b0:	440a      	add	r2, r1
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80085b2:	440b      	add	r3, r1
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80085b4:	63a6      	str	r6, [r4, #56]	; 0x38
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80085b6:	60e2      	str	r2, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80085b8:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80085bc:	e9c4 3101 	strd	r3, r1, [r4, #4]
		pxQueue->cTxLock = queueUNLOCKED;
 80085c0:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 80085c4:	b975      	cbnz	r5, 80085e4 <xQueueGenericReset+0x50>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80085c6:	6923      	ldr	r3, [r4, #16]
 80085c8:	b9ab      	cbnz	r3, 80085f6 <xQueueGenericReset+0x62>
	taskEXIT_CRITICAL();
 80085ca:	f001 fbf5 	bl	8009db8 <vPortExitCritical>
}
 80085ce:	2001      	movs	r0, #1
 80085d0:	bd70      	pop	{r4, r5, r6, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80085d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d6:	f383 8811 	msr	BASEPRI, r3
 80085da:	f3bf 8f6f 	isb	sy
 80085de:	f3bf 8f4f 	dsb	sy
 80085e2:	e7fe      	b.n	80085e2 <xQueueGenericReset+0x4e>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80085e4:	f104 0010 	add.w	r0, r4, #16
 80085e8:	f7ff ff3e 	bl	8008468 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80085ec:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80085f0:	f7ff ff3a 	bl	8008468 <vListInitialise>
 80085f4:	e7e9      	b.n	80085ca <xQueueGenericReset+0x36>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80085f6:	f104 0010 	add.w	r0, r4, #16
 80085fa:	f001 f997 	bl	800992c <xTaskRemoveFromEventList>
 80085fe:	2800      	cmp	r0, #0
 8008600:	d0e3      	beq.n	80085ca <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8008602:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008606:	4b03      	ldr	r3, [pc, #12]	; (8008614 <xQueueGenericReset+0x80>)
 8008608:	601a      	str	r2, [r3, #0]
 800860a:	f3bf 8f4f 	dsb	sy
 800860e:	f3bf 8f6f 	isb	sy
 8008612:	e7da      	b.n	80085ca <xQueueGenericReset+0x36>
 8008614:	e000ed04 	.word	0xe000ed04

08008618 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008618:	b940      	cbnz	r0, 800862c <xQueueGenericCreateStatic+0x14>
 800861a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800861e:	f383 8811 	msr	BASEPRI, r3
 8008622:	f3bf 8f6f 	isb	sy
 8008626:	f3bf 8f4f 	dsb	sy
 800862a:	e7fe      	b.n	800862a <xQueueGenericCreateStatic+0x12>
	{
 800862c:	b510      	push	{r4, lr}
 800862e:	461c      	mov	r4, r3
 8008630:	b082      	sub	sp, #8
		configASSERT( pxStaticQueue != NULL );
 8008632:	b17b      	cbz	r3, 8008654 <xQueueGenericCreateStatic+0x3c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008634:	b36a      	cbz	r2, 8008692 <xQueueGenericCreateStatic+0x7a>
 8008636:	b1b1      	cbz	r1, 8008666 <xQueueGenericCreateStatic+0x4e>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008638:	2348      	movs	r3, #72	; 0x48
 800863a:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800863c:	9b01      	ldr	r3, [sp, #4]
 800863e:	2b48      	cmp	r3, #72	; 0x48
 8008640:	d01a      	beq.n	8008678 <xQueueGenericCreateStatic+0x60>
 8008642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008646:	f383 8811 	msr	BASEPRI, r3
 800864a:	f3bf 8f6f 	isb	sy
 800864e:	f3bf 8f4f 	dsb	sy
 8008652:	e7fe      	b.n	8008652 <xQueueGenericCreateStatic+0x3a>
 8008654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008658:	f383 8811 	msr	BASEPRI, r3
 800865c:	f3bf 8f6f 	isb	sy
 8008660:	f3bf 8f4f 	dsb	sy
 8008664:	e7fe      	b.n	8008664 <xQueueGenericCreateStatic+0x4c>
 8008666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800866a:	f383 8811 	msr	BASEPRI, r3
 800866e:	f3bf 8f6f 	isb	sy
 8008672:	f3bf 8f4f 	dsb	sy
 8008676:	e7fe      	b.n	8008676 <xQueueGenericCreateStatic+0x5e>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008678:	2301      	movs	r3, #1
 800867a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 800867e:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
 8008682:	6022      	str	r2, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008684:	2101      	movs	r1, #1
 8008686:	4620      	mov	r0, r4
 8008688:	f7ff ff84 	bl	8008594 <xQueueGenericReset>
	}
 800868c:	4620      	mov	r0, r4
 800868e:	b002      	add	sp, #8
 8008690:	bd10      	pop	{r4, pc}
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008692:	b141      	cbz	r1, 80086a6 <xQueueGenericCreateStatic+0x8e>
 8008694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008698:	f383 8811 	msr	BASEPRI, r3
 800869c:	f3bf 8f6f 	isb	sy
 80086a0:	f3bf 8f4f 	dsb	sy
 80086a4:	e7fe      	b.n	80086a4 <xQueueGenericCreateStatic+0x8c>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80086a6:	2348      	movs	r3, #72	; 0x48
 80086a8:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 80086aa:	9b01      	ldr	r3, [sp, #4]
 80086ac:	2b48      	cmp	r3, #72	; 0x48
 80086ae:	d1c8      	bne.n	8008642 <xQueueGenericCreateStatic+0x2a>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80086b0:	2301      	movs	r3, #1
 80086b2:	4622      	mov	r2, r4
 80086b4:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80086b8:	e7e1      	b.n	800867e <xQueueGenericCreateStatic+0x66>
 80086ba:	bf00      	nop

080086bc <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80086bc:	b940      	cbnz	r0, 80086d0 <xQueueGenericCreate+0x14>
 80086be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c2:	f383 8811 	msr	BASEPRI, r3
 80086c6:	f3bf 8f6f 	isb	sy
 80086ca:	f3bf 8f4f 	dsb	sy
 80086ce:	e7fe      	b.n	80086ce <xQueueGenericCreate+0x12>
	{
 80086d0:	b570      	push	{r4, r5, r6, lr}
 80086d2:	4606      	mov	r6, r0
 80086d4:	460d      	mov	r5, r1
		if( uxItemSize == ( UBaseType_t ) 0 )
 80086d6:	b169      	cbz	r1, 80086f4 <xQueueGenericCreate+0x38>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086d8:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80086dc:	3048      	adds	r0, #72	; 0x48
 80086de:	f001 fc87 	bl	8009ff0 <pvPortMalloc>
		if( pxNewQueue != NULL )
 80086e2:	4604      	mov	r4, r0
 80086e4:	b380      	cbz	r0, 8008748 <xQueueGenericCreate+0x8c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80086e6:	2200      	movs	r2, #0
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80086e8:	f100 0348 	add.w	r3, r0, #72	; 0x48
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80086ec:	f880 2046 	strb.w	r2, [r0, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80086f0:	6003      	str	r3, [r0, #0]
 80086f2:	e007      	b.n	8008704 <xQueueGenericCreate+0x48>
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80086f4:	2048      	movs	r0, #72	; 0x48
 80086f6:	f001 fc7b 	bl	8009ff0 <pvPortMalloc>
		if( pxNewQueue != NULL )
 80086fa:	4604      	mov	r4, r0
 80086fc:	b320      	cbz	r0, 8008748 <xQueueGenericCreate+0x8c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80086fe:	f884 5046 	strb.w	r5, [r4, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008702:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 8008704:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	taskENTER_CRITICAL();
 8008708:	f001 fb34 	bl	8009d74 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800870c:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
		pxQueue->cRxLock = queueUNLOCKED;
 8008710:	25ff      	movs	r5, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008712:	2000      	movs	r0, #0
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8008714:	fb03 f302 	mul.w	r3, r3, r2
 8008718:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800871a:	1a9a      	subs	r2, r3, r2
 800871c:	440a      	add	r2, r1
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800871e:	440b      	add	r3, r1
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008720:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8008722:	60e2      	str	r2, [r4, #12]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008724:	e9c4 3101 	strd	r3, r1, [r4, #4]
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008728:	f104 0010 	add.w	r0, r4, #16
		pxQueue->cRxLock = queueUNLOCKED;
 800872c:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008730:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008734:	f7ff fe98 	bl	8008468 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008738:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800873c:	f7ff fe94 	bl	8008468 <vListInitialise>
	taskEXIT_CRITICAL();
 8008740:	f001 fb3a 	bl	8009db8 <vPortExitCritical>
	}
 8008744:	4620      	mov	r0, r4
 8008746:	bd70      	pop	{r4, r5, r6, pc}
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8008748:	2400      	movs	r4, #0
	}
 800874a:	4620      	mov	r0, r4
 800874c:	bd70      	pop	{r4, r5, r6, pc}
 800874e:	bf00      	nop

08008750 <xQueueGenericSend>:
{
 8008750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008754:	b085      	sub	sp, #20
 8008756:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8008758:	2800      	cmp	r0, #0
 800875a:	f000 8125 	beq.w	80089a8 <xQueueGenericSend+0x258>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800875e:	2900      	cmp	r1, #0
 8008760:	f000 8115 	beq.w	800898e <xQueueGenericSend+0x23e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008764:	2b02      	cmp	r3, #2
 8008766:	d10b      	bne.n	8008780 <xQueueGenericSend+0x30>
 8008768:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800876a:	2a01      	cmp	r2, #1
 800876c:	d008      	beq.n	8008780 <xQueueGenericSend+0x30>
 800876e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008772:	f383 8811 	msr	BASEPRI, r3
 8008776:	f3bf 8f6f 	isb	sy
 800877a:	f3bf 8f4f 	dsb	sy
 800877e:	e7fe      	b.n	800877e <xQueueGenericSend+0x2e>
 8008780:	4604      	mov	r4, r0
 8008782:	461f      	mov	r7, r3
 8008784:	460e      	mov	r6, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008786:	f001 f96f 	bl	8009a68 <xTaskGetSchedulerState>
 800878a:	2800      	cmp	r0, #0
 800878c:	f040 80fc 	bne.w	8008988 <xQueueGenericSend+0x238>
 8008790:	9b01      	ldr	r3, [sp, #4]
 8008792:	b143      	cbz	r3, 80087a6 <xQueueGenericSend+0x56>
 8008794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008798:	f383 8811 	msr	BASEPRI, r3
 800879c:	f3bf 8f6f 	isb	sy
 80087a0:	f3bf 8f4f 	dsb	sy
 80087a4:	e7fe      	b.n	80087a4 <xQueueGenericSend+0x54>
 80087a6:	469a      	mov	sl, r3
		taskENTER_CRITICAL();
 80087a8:	f001 fae4 	bl	8009d74 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80087ac:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80087ae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
		prvLockQueue( pxQueue );
 80087b0:	f04f 0800 	mov.w	r8, #0
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80087b4:	429a      	cmp	r2, r3
					portYIELD_WITHIN_API();
 80087b6:	f8df 92b8 	ldr.w	r9, [pc, #696]	; 8008a70 <xQueueGenericSend+0x320>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80087ba:	d375      	bcc.n	80088a8 <xQueueGenericSend+0x158>
 80087bc:	2f02      	cmp	r7, #2
 80087be:	f000 80fc 	beq.w	80089ba <xQueueGenericSend+0x26a>
				if( xTicksToWait == ( TickType_t ) 0 )
 80087c2:	9d01      	ldr	r5, [sp, #4]
 80087c4:	2d00      	cmp	r5, #0
 80087c6:	f000 814e 	beq.w	8008a66 <xQueueGenericSend+0x316>
				else if( xEntryTimeSet == pdFALSE )
 80087ca:	f1ba 0f00 	cmp.w	sl, #0
 80087ce:	d102      	bne.n	80087d6 <xQueueGenericSend+0x86>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80087d0:	a802      	add	r0, sp, #8
 80087d2:	f001 f8f1 	bl	80099b8 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80087d6:	f001 faef 	bl	8009db8 <vPortExitCritical>
		vTaskSuspendAll();
 80087da:	f000 feb7 	bl	800954c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80087de:	f001 fac9 	bl	8009d74 <vPortEnterCritical>
 80087e2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80087e6:	2bff      	cmp	r3, #255	; 0xff
 80087e8:	bf08      	it	eq
 80087ea:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 80087ee:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80087f2:	2bff      	cmp	r3, #255	; 0xff
 80087f4:	bf08      	it	eq
 80087f6:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 80087fa:	f001 fadd 	bl	8009db8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80087fe:	a901      	add	r1, sp, #4
 8008800:	a802      	add	r0, sp, #8
 8008802:	f001 f8e5 	bl	80099d0 <xTaskCheckForTimeOut>
 8008806:	2800      	cmp	r0, #0
 8008808:	f040 8126 	bne.w	8008a58 <xQueueGenericSend+0x308>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800880c:	f001 fab2 	bl	8009d74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008810:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008812:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008814:	429a      	cmp	r2, r3
 8008816:	d06a      	beq.n	80088ee <xQueueGenericSend+0x19e>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8008818:	f001 face 	bl	8009db8 <vPortExitCritical>
	taskENTER_CRITICAL();
 800881c:	f001 faaa 	bl	8009d74 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8008820:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8008824:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008826:	2d00      	cmp	r5, #0
 8008828:	dd11      	ble.n	800884e <xQueueGenericSend+0xfe>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800882a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800882c:	b17b      	cbz	r3, 800884e <xQueueGenericSend+0xfe>
 800882e:	f104 0a24 	add.w	sl, r4, #36	; 0x24
 8008832:	e001      	b.n	8008838 <xQueueGenericSend+0xe8>
 8008834:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008836:	b153      	cbz	r3, 800884e <xQueueGenericSend+0xfe>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008838:	4650      	mov	r0, sl
 800883a:	f001 f877 	bl	800992c <xTaskRemoveFromEventList>
 800883e:	b108      	cbz	r0, 8008844 <xQueueGenericSend+0xf4>
						vTaskMissedYield();
 8008840:	f001 f90c 	bl	8009a5c <vTaskMissedYield>
 8008844:	3d01      	subs	r5, #1
 8008846:	b2eb      	uxtb	r3, r5
 8008848:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800884a:	2b00      	cmp	r3, #0
 800884c:	d1f2      	bne.n	8008834 <xQueueGenericSend+0xe4>
		pxQueue->cTxLock = queueUNLOCKED;
 800884e:	23ff      	movs	r3, #255	; 0xff
 8008850:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8008854:	f001 fab0 	bl	8009db8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8008858:	f001 fa8c 	bl	8009d74 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800885c:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8008860:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008862:	2d00      	cmp	r5, #0
 8008864:	dd11      	ble.n	800888a <xQueueGenericSend+0x13a>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008866:	6923      	ldr	r3, [r4, #16]
 8008868:	b17b      	cbz	r3, 800888a <xQueueGenericSend+0x13a>
 800886a:	f104 0a10 	add.w	sl, r4, #16
 800886e:	e001      	b.n	8008874 <xQueueGenericSend+0x124>
 8008870:	6923      	ldr	r3, [r4, #16]
 8008872:	b153      	cbz	r3, 800888a <xQueueGenericSend+0x13a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008874:	4650      	mov	r0, sl
 8008876:	f001 f859 	bl	800992c <xTaskRemoveFromEventList>
 800887a:	b108      	cbz	r0, 8008880 <xQueueGenericSend+0x130>
					vTaskMissedYield();
 800887c:	f001 f8ee 	bl	8009a5c <vTaskMissedYield>
 8008880:	3d01      	subs	r5, #1
 8008882:	b2eb      	uxtb	r3, r5
 8008884:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008886:	2b00      	cmp	r3, #0
 8008888:	d1f2      	bne.n	8008870 <xQueueGenericSend+0x120>
		pxQueue->cRxLock = queueUNLOCKED;
 800888a:	23ff      	movs	r3, #255	; 0xff
 800888c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8008890:	f001 fa92 	bl	8009db8 <vPortExitCritical>
				( void ) xTaskResumeAll();
 8008894:	f000 ff0e 	bl	80096b4 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8008898:	f001 fa6c 	bl	8009d74 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800889c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800889e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80088a0:	f04f 0a01 	mov.w	sl, #1
 80088a4:	429a      	cmp	r2, r3
 80088a6:	d289      	bcs.n	80087bc <xQueueGenericSend+0x6c>
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80088a8:	6c22      	ldr	r2, [r4, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80088aa:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80088ac:	2a00      	cmp	r2, #0
 80088ae:	f000 8087 	beq.w	80089c0 <xQueueGenericSend+0x270>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80088b2:	4631      	mov	r1, r6
	else if( xPosition == queueSEND_TO_BACK )
 80088b4:	2f00      	cmp	r7, #0
 80088b6:	f040 80bb 	bne.w	8008a30 <xQueueGenericSend+0x2e0>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80088ba:	68a0      	ldr	r0, [r4, #8]
 80088bc:	f001 fc88 	bl	800a1d0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80088c0:	68a3      	ldr	r3, [r4, #8]
 80088c2:	6c21      	ldr	r1, [r4, #64]	; 0x40
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80088c4:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80088c6:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80088c8:	4293      	cmp	r3, r2
 80088ca:	f105 0501 	add.w	r5, r5, #1
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80088ce:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80088d0:	d379      	bcc.n	80089c6 <xQueueGenericSend+0x276>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80088d2:	63a5      	str	r5, [r4, #56]	; 0x38
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80088d4:	6822      	ldr	r2, [r4, #0]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80088d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80088d8:	60a2      	str	r2, [r4, #8]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d077      	beq.n	80089ce <xQueueGenericSend+0x27e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80088de:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80088e2:	f001 f823 	bl	800992c <xTaskRemoveFromEventList>
 80088e6:	2800      	cmp	r0, #0
 80088e8:	f040 8082 	bne.w	80089f0 <xQueueGenericSend+0x2a0>
 80088ec:	e06f      	b.n	80089ce <xQueueGenericSend+0x27e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80088ee:	f104 0a10 	add.w	sl, r4, #16
	taskEXIT_CRITICAL();
 80088f2:	f001 fa61 	bl	8009db8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80088f6:	4650      	mov	r0, sl
 80088f8:	9901      	ldr	r1, [sp, #4]
 80088fa:	f000 ffc7 	bl	800988c <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 80088fe:	f001 fa39 	bl	8009d74 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8008902:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8008906:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008908:	2d00      	cmp	r5, #0
 800890a:	dd11      	ble.n	8008930 <xQueueGenericSend+0x1e0>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800890c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800890e:	b17b      	cbz	r3, 8008930 <xQueueGenericSend+0x1e0>
 8008910:	f104 0b24 	add.w	fp, r4, #36	; 0x24
 8008914:	e001      	b.n	800891a <xQueueGenericSend+0x1ca>
 8008916:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008918:	b153      	cbz	r3, 8008930 <xQueueGenericSend+0x1e0>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800891a:	4658      	mov	r0, fp
 800891c:	f001 f806 	bl	800992c <xTaskRemoveFromEventList>
 8008920:	b108      	cbz	r0, 8008926 <xQueueGenericSend+0x1d6>
						vTaskMissedYield();
 8008922:	f001 f89b 	bl	8009a5c <vTaskMissedYield>
 8008926:	3d01      	subs	r5, #1
 8008928:	b2eb      	uxtb	r3, r5
 800892a:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800892c:	2b00      	cmp	r3, #0
 800892e:	d1f2      	bne.n	8008916 <xQueueGenericSend+0x1c6>
		pxQueue->cTxLock = queueUNLOCKED;
 8008930:	23ff      	movs	r3, #255	; 0xff
 8008932:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8008936:	f001 fa3f 	bl	8009db8 <vPortExitCritical>
	taskENTER_CRITICAL();
 800893a:	f001 fa1b 	bl	8009d74 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800893e:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8008942:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008944:	2d00      	cmp	r5, #0
 8008946:	dc0a      	bgt.n	800895e <xQueueGenericSend+0x20e>
 8008948:	e00c      	b.n	8008964 <xQueueGenericSend+0x214>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800894a:	4650      	mov	r0, sl
 800894c:	f000 ffee 	bl	800992c <xTaskRemoveFromEventList>
 8008950:	b108      	cbz	r0, 8008956 <xQueueGenericSend+0x206>
					vTaskMissedYield();
 8008952:	f001 f883 	bl	8009a5c <vTaskMissedYield>
 8008956:	3d01      	subs	r5, #1
 8008958:	b2eb      	uxtb	r3, r5
 800895a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800895c:	b113      	cbz	r3, 8008964 <xQueueGenericSend+0x214>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800895e:	6923      	ldr	r3, [r4, #16]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d1f2      	bne.n	800894a <xQueueGenericSend+0x1fa>
		pxQueue->cRxLock = queueUNLOCKED;
 8008964:	23ff      	movs	r3, #255	; 0xff
 8008966:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800896a:	f001 fa25 	bl	8009db8 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 800896e:	f000 fea1 	bl	80096b4 <xTaskResumeAll>
 8008972:	2800      	cmp	r0, #0
 8008974:	d190      	bne.n	8008898 <xQueueGenericSend+0x148>
					portYIELD_WITHIN_API();
 8008976:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800897a:	f8c9 3000 	str.w	r3, [r9]
 800897e:	f3bf 8f4f 	dsb	sy
 8008982:	f3bf 8f6f 	isb	sy
 8008986:	e787      	b.n	8008898 <xQueueGenericSend+0x148>
 8008988:	f04f 0a00 	mov.w	sl, #0
 800898c:	e70c      	b.n	80087a8 <xQueueGenericSend+0x58>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800898e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8008990:	2a00      	cmp	r2, #0
 8008992:	f43f aee7 	beq.w	8008764 <xQueueGenericSend+0x14>
 8008996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800899a:	f383 8811 	msr	BASEPRI, r3
 800899e:	f3bf 8f6f 	isb	sy
 80089a2:	f3bf 8f4f 	dsb	sy
 80089a6:	e7fe      	b.n	80089a6 <xQueueGenericSend+0x256>
 80089a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ac:	f383 8811 	msr	BASEPRI, r3
 80089b0:	f3bf 8f6f 	isb	sy
 80089b4:	f3bf 8f4f 	dsb	sy
 80089b8:	e7fe      	b.n	80089b8 <xQueueGenericSend+0x268>
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80089ba:	6c22      	ldr	r2, [r4, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80089bc:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80089be:	bb02      	cbnz	r2, 8008a02 <xQueueGenericSend+0x2b2>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80089c0:	6826      	ldr	r6, [r4, #0]
 80089c2:	3501      	adds	r5, #1
 80089c4:	b14e      	cbz	r6, 80089da <xQueueGenericSend+0x28a>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80089c6:	63a5      	str	r5, [r4, #56]	; 0x38
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80089c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d187      	bne.n	80088de <xQueueGenericSend+0x18e>
				taskEXIT_CRITICAL();
 80089ce:	f001 f9f3 	bl	8009db8 <vPortExitCritical>
				return pdPASS;
 80089d2:	2001      	movs	r0, #1
}
 80089d4:	b005      	add	sp, #20
 80089d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80089da:	6860      	ldr	r0, [r4, #4]
 80089dc:	f001 f8aa 	bl	8009b34 <xTaskPriorityDisinherit>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80089e0:	63a5      	str	r5, [r4, #56]	; 0x38
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80089e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
				pxQueue->pxMutexHolder = NULL;
 80089e4:	6066      	str	r6, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	f47f af79 	bne.w	80088de <xQueueGenericSend+0x18e>
					else if( xYieldRequired != pdFALSE )
 80089ec:	2800      	cmp	r0, #0
 80089ee:	d0ee      	beq.n	80089ce <xQueueGenericSend+0x27e>
						queueYIELD_IF_USING_PREEMPTION();
 80089f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089f4:	4b1e      	ldr	r3, [pc, #120]	; (8008a70 <xQueueGenericSend+0x320>)
 80089f6:	601a      	str	r2, [r3, #0]
 80089f8:	f3bf 8f4f 	dsb	sy
 80089fc:	f3bf 8f6f 	isb	sy
 8008a00:	e7e5      	b.n	80089ce <xQueueGenericSend+0x27e>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a02:	4631      	mov	r1, r6
 8008a04:	68e0      	ldr	r0, [r4, #12]
 8008a06:	f001 fbe3 	bl	800a1d0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8008a0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008a0c:	68e2      	ldr	r2, [r4, #12]
 8008a0e:	425b      	negs	r3, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008a10:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8008a12:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008a14:	4291      	cmp	r1, r2
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8008a16:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008a18:	d916      	bls.n	8008a48 <xQueueGenericSend+0x2f8>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8008a1a:	6862      	ldr	r2, [r4, #4]
 8008a1c:	4413      	add	r3, r2
 8008a1e:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8008a20:	2f02      	cmp	r7, #2
 8008a22:	d011      	beq.n	8008a48 <xQueueGenericSend+0x2f8>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008a24:	3501      	adds	r5, #1
 8008a26:	63a5      	str	r5, [r4, #56]	; 0x38
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d0cf      	beq.n	80089ce <xQueueGenericSend+0x27e>
 8008a2e:	e756      	b.n	80088de <xQueueGenericSend+0x18e>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a30:	68e0      	ldr	r0, [r4, #12]
 8008a32:	f001 fbcd 	bl	800a1d0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8008a36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008a38:	68e2      	ldr	r2, [r4, #12]
 8008a3a:	425b      	negs	r3, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008a3c:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8008a3e:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008a40:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8008a42:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008a44:	d2ec      	bcs.n	8008a20 <xQueueGenericSend+0x2d0>
 8008a46:	e7e8      	b.n	8008a1a <xQueueGenericSend+0x2ca>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008a48:	2d00      	cmp	r5, #0
 8008a4a:	d1bc      	bne.n	80089c6 <xQueueGenericSend+0x276>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	63a3      	str	r3, [r4, #56]	; 0x38
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d0bb      	beq.n	80089ce <xQueueGenericSend+0x27e>
 8008a56:	e742      	b.n	80088de <xQueueGenericSend+0x18e>
			prvUnlockQueue( pxQueue );
 8008a58:	4620      	mov	r0, r4
 8008a5a:	f7ff fd51 	bl	8008500 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008a5e:	f000 fe29 	bl	80096b4 <xTaskResumeAll>
			return errQUEUE_FULL;
 8008a62:	2000      	movs	r0, #0
 8008a64:	e7b6      	b.n	80089d4 <xQueueGenericSend+0x284>
					taskEXIT_CRITICAL();
 8008a66:	f001 f9a7 	bl	8009db8 <vPortExitCritical>
					return errQUEUE_FULL;
 8008a6a:	4628      	mov	r0, r5
 8008a6c:	e7b2      	b.n	80089d4 <xQueueGenericSend+0x284>
 8008a6e:	bf00      	nop
 8008a70:	e000ed04 	.word	0xe000ed04

08008a74 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 8008a74:	b370      	cbz	r0, 8008ad4 <xQueueGiveFromISR+0x60>
	configASSERT( pxQueue->uxItemSize == 0 );
 8008a76:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008a78:	b143      	cbz	r3, 8008a8c <xQueueGiveFromISR+0x18>
 8008a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a7e:	f383 8811 	msr	BASEPRI, r3
 8008a82:	f3bf 8f6f 	isb	sy
 8008a86:	f3bf 8f4f 	dsb	sy
 8008a8a:	e7fe      	b.n	8008a8a <xQueueGiveFromISR+0x16>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8008a8c:	6803      	ldr	r3, [r0, #0]
 8008a8e:	b353      	cbz	r3, 8008ae6 <xQueueGiveFromISR+0x72>
{
 8008a90:	b570      	push	{r4, r5, r6, lr}
 8008a92:	4604      	mov	r4, r0
 8008a94:	460d      	mov	r5, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008a96:	f001 fa55 	bl	8009f44 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008a9a:	f3ef 8611 	mrs	r6, BASEPRI
 8008a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa2:	f383 8811 	msr	BASEPRI, r3
 8008aa6:	f3bf 8f6f 	isb	sy
 8008aaa:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008aae:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008ab0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d931      	bls.n	8008b1a <xQueueGiveFromISR+0xa6>
			const int8_t cTxLock = pxQueue->cTxLock;
 8008ab6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008aba:	3201      	adds	r2, #1
			const int8_t cTxLock = pxQueue->cTxLock;
 8008abc:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008abe:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8008ac0:	1c5a      	adds	r2, r3, #1
 8008ac2:	d01c      	beq.n	8008afe <xQueueGiveFromISR+0x8a>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008ac4:	3301      	adds	r3, #1
 8008ac6:	b25b      	sxtb	r3, r3
 8008ac8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 8008acc:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008ace:	f386 8811 	msr	BASEPRI, r6
}
 8008ad2:	bd70      	pop	{r4, r5, r6, pc}
	__asm volatile
 8008ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ad8:	f383 8811 	msr	BASEPRI, r3
 8008adc:	f3bf 8f6f 	isb	sy
 8008ae0:	f3bf 8f4f 	dsb	sy
 8008ae4:	e7fe      	b.n	8008ae4 <xQueueGiveFromISR+0x70>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8008ae6:	6843      	ldr	r3, [r0, #4]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d0d1      	beq.n	8008a90 <xQueueGiveFromISR+0x1c>
 8008aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008af0:	f383 8811 	msr	BASEPRI, r3
 8008af4:	f3bf 8f6f 	isb	sy
 8008af8:	f3bf 8f4f 	dsb	sy
 8008afc:	e7fe      	b.n	8008afc <xQueueGiveFromISR+0x88>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008afe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d0e3      	beq.n	8008acc <xQueueGiveFromISR+0x58>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b04:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008b08:	f000 ff10 	bl	800992c <xTaskRemoveFromEventList>
 8008b0c:	2800      	cmp	r0, #0
 8008b0e:	d0dd      	beq.n	8008acc <xQueueGiveFromISR+0x58>
							if( pxHigherPriorityTaskWoken != NULL )
 8008b10:	2d00      	cmp	r5, #0
 8008b12:	d0db      	beq.n	8008acc <xQueueGiveFromISR+0x58>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008b14:	2001      	movs	r0, #1
 8008b16:	6028      	str	r0, [r5, #0]
 8008b18:	e7d9      	b.n	8008ace <xQueueGiveFromISR+0x5a>
			xReturn = errQUEUE_FULL;
 8008b1a:	2000      	movs	r0, #0
 8008b1c:	e7d7      	b.n	8008ace <xQueueGiveFromISR+0x5a>
 8008b1e:	bf00      	nop

08008b20 <xQueueSemaphoreTake>:
{
 8008b20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008b24:	b085      	sub	sp, #20
 8008b26:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8008b28:	b150      	cbz	r0, 8008b40 <xQueueSemaphoreTake+0x20>
	configASSERT( pxQueue->uxItemSize == 0 );
 8008b2a:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8008b2c:	b18d      	cbz	r5, 8008b52 <xQueueSemaphoreTake+0x32>
 8008b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b32:	f383 8811 	msr	BASEPRI, r3
 8008b36:	f3bf 8f6f 	isb	sy
 8008b3a:	f3bf 8f4f 	dsb	sy
 8008b3e:	e7fe      	b.n	8008b3e <xQueueSemaphoreTake+0x1e>
 8008b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b44:	f383 8811 	msr	BASEPRI, r3
 8008b48:	f3bf 8f6f 	isb	sy
 8008b4c:	f3bf 8f4f 	dsb	sy
 8008b50:	e7fe      	b.n	8008b50 <xQueueSemaphoreTake+0x30>
 8008b52:	4604      	mov	r4, r0
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008b54:	f000 ff88 	bl	8009a68 <xTaskGetSchedulerState>
 8008b58:	b950      	cbnz	r0, 8008b70 <xQueueSemaphoreTake+0x50>
 8008b5a:	9d01      	ldr	r5, [sp, #4]
 8008b5c:	b145      	cbz	r5, 8008b70 <xQueueSemaphoreTake+0x50>
 8008b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b62:	f383 8811 	msr	BASEPRI, r3
 8008b66:	f3bf 8f6f 	isb	sy
 8008b6a:	f3bf 8f4f 	dsb	sy
 8008b6e:	e7fe      	b.n	8008b6e <xQueueSemaphoreTake+0x4e>
		taskENTER_CRITICAL();
 8008b70:	f001 f900 	bl	8009d74 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008b74:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008b76:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 8008b78:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 8008b7a:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 8008e30 <xQueueSemaphoreTake+0x310>
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	f040 80b3 	bne.w	8008cea <xQueueSemaphoreTake+0x1ca>
				if( xTicksToWait == ( TickType_t ) 0 )
 8008b84:	9b01      	ldr	r3, [sp, #4]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	f000 8129 	beq.w	8008dde <xQueueSemaphoreTake+0x2be>
				else if( xEntryTimeSet == pdFALSE )
 8008b8c:	b916      	cbnz	r6, 8008b94 <xQueueSemaphoreTake+0x74>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008b8e:	a802      	add	r0, sp, #8
 8008b90:	f000 ff12 	bl	80099b8 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8008b94:	f001 f910 	bl	8009db8 <vPortExitCritical>
		vTaskSuspendAll();
 8008b98:	f000 fcd8 	bl	800954c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008b9c:	f001 f8ea 	bl	8009d74 <vPortEnterCritical>
 8008ba0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008ba4:	2bff      	cmp	r3, #255	; 0xff
 8008ba6:	bf08      	it	eq
 8008ba8:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 8008bac:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008bb0:	2bff      	cmp	r3, #255	; 0xff
 8008bb2:	bf08      	it	eq
 8008bb4:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 8008bb8:	f001 f8fe 	bl	8009db8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008bbc:	a901      	add	r1, sp, #4
 8008bbe:	a802      	add	r0, sp, #8
 8008bc0:	f000 ff06 	bl	80099d0 <xTaskCheckForTimeOut>
 8008bc4:	2800      	cmp	r0, #0
 8008bc6:	d144      	bne.n	8008c52 <xQueueSemaphoreTake+0x132>
	taskENTER_CRITICAL();
 8008bc8:	f001 f8d4 	bl	8009d74 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008bcc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	f000 809d 	beq.w	8008d0e <xQueueSemaphoreTake+0x1ee>
	taskEXIT_CRITICAL();
 8008bd4:	f001 f8f0 	bl	8009db8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8008bd8:	f001 f8cc 	bl	8009d74 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8008bdc:	f894 6045 	ldrb.w	r6, [r4, #69]	; 0x45
 8008be0:	b276      	sxtb	r6, r6
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008be2:	2e00      	cmp	r6, #0
 8008be4:	dd10      	ble.n	8008c08 <xQueueSemaphoreTake+0xe8>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008be6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008be8:	b173      	cbz	r3, 8008c08 <xQueueSemaphoreTake+0xe8>
 8008bea:	f104 0924 	add.w	r9, r4, #36	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008bee:	4648      	mov	r0, r9
 8008bf0:	f000 fe9c 	bl	800992c <xTaskRemoveFromEventList>
 8008bf4:	2800      	cmp	r0, #0
 8008bf6:	f040 8087 	bne.w	8008d08 <xQueueSemaphoreTake+0x1e8>
 8008bfa:	3e01      	subs	r6, #1
 8008bfc:	b2f3      	uxtb	r3, r6
 8008bfe:	b25e      	sxtb	r6, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008c00:	b113      	cbz	r3, 8008c08 <xQueueSemaphoreTake+0xe8>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d1f2      	bne.n	8008bee <xQueueSemaphoreTake+0xce>
		pxQueue->cTxLock = queueUNLOCKED;
 8008c08:	23ff      	movs	r3, #255	; 0xff
 8008c0a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8008c0e:	f001 f8d3 	bl	8009db8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8008c12:	f001 f8af 	bl	8009d74 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8008c16:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 8008c1a:	b276      	sxtb	r6, r6
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008c1c:	2e00      	cmp	r6, #0
 8008c1e:	dd10      	ble.n	8008c42 <xQueueSemaphoreTake+0x122>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c20:	6923      	ldr	r3, [r4, #16]
 8008c22:	b173      	cbz	r3, 8008c42 <xQueueSemaphoreTake+0x122>
 8008c24:	f104 0910 	add.w	r9, r4, #16
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c28:	4648      	mov	r0, r9
 8008c2a:	f000 fe7f 	bl	800992c <xTaskRemoveFromEventList>
 8008c2e:	2800      	cmp	r0, #0
 8008c30:	f040 80bf 	bne.w	8008db2 <xQueueSemaphoreTake+0x292>
 8008c34:	3e01      	subs	r6, #1
 8008c36:	b2f3      	uxtb	r3, r6
 8008c38:	b25e      	sxtb	r6, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008c3a:	b113      	cbz	r3, 8008c42 <xQueueSemaphoreTake+0x122>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c3c:	6923      	ldr	r3, [r4, #16]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d1f2      	bne.n	8008c28 <xQueueSemaphoreTake+0x108>
		pxQueue->cRxLock = queueUNLOCKED;
 8008c42:	23ff      	movs	r3, #255	; 0xff
 8008c44:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8008c48:	f001 f8b6 	bl	8009db8 <vPortExitCritical>
				( void ) xTaskResumeAll();
 8008c4c:	f000 fd32 	bl	80096b4 <xTaskResumeAll>
 8008c50:	e044      	b.n	8008cdc <xQueueSemaphoreTake+0x1bc>
	taskENTER_CRITICAL();
 8008c52:	f001 f88f 	bl	8009d74 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8008c56:	f894 6045 	ldrb.w	r6, [r4, #69]	; 0x45
 8008c5a:	b276      	sxtb	r6, r6
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008c5c:	2e00      	cmp	r6, #0
 8008c5e:	dd11      	ble.n	8008c84 <xQueueSemaphoreTake+0x164>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c62:	b17b      	cbz	r3, 8008c84 <xQueueSemaphoreTake+0x164>
 8008c64:	f104 0924 	add.w	r9, r4, #36	; 0x24
 8008c68:	e001      	b.n	8008c6e <xQueueSemaphoreTake+0x14e>
 8008c6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c6c:	b153      	cbz	r3, 8008c84 <xQueueSemaphoreTake+0x164>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c6e:	4648      	mov	r0, r9
 8008c70:	f000 fe5c 	bl	800992c <xTaskRemoveFromEventList>
 8008c74:	b108      	cbz	r0, 8008c7a <xQueueSemaphoreTake+0x15a>
						vTaskMissedYield();
 8008c76:	f000 fef1 	bl	8009a5c <vTaskMissedYield>
 8008c7a:	3e01      	subs	r6, #1
 8008c7c:	b2f3      	uxtb	r3, r6
 8008c7e:	b25e      	sxtb	r6, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d1f2      	bne.n	8008c6a <xQueueSemaphoreTake+0x14a>
		pxQueue->cTxLock = queueUNLOCKED;
 8008c84:	23ff      	movs	r3, #255	; 0xff
 8008c86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8008c8a:	f001 f895 	bl	8009db8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8008c8e:	f001 f871 	bl	8009d74 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8008c92:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 8008c96:	b276      	sxtb	r6, r6
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008c98:	2e00      	cmp	r6, #0
 8008c9a:	dd11      	ble.n	8008cc0 <xQueueSemaphoreTake+0x1a0>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c9c:	6923      	ldr	r3, [r4, #16]
 8008c9e:	b17b      	cbz	r3, 8008cc0 <xQueueSemaphoreTake+0x1a0>
 8008ca0:	f104 0910 	add.w	r9, r4, #16
 8008ca4:	e001      	b.n	8008caa <xQueueSemaphoreTake+0x18a>
 8008ca6:	6923      	ldr	r3, [r4, #16]
 8008ca8:	b153      	cbz	r3, 8008cc0 <xQueueSemaphoreTake+0x1a0>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008caa:	4648      	mov	r0, r9
 8008cac:	f000 fe3e 	bl	800992c <xTaskRemoveFromEventList>
 8008cb0:	b108      	cbz	r0, 8008cb6 <xQueueSemaphoreTake+0x196>
					vTaskMissedYield();
 8008cb2:	f000 fed3 	bl	8009a5c <vTaskMissedYield>
 8008cb6:	3e01      	subs	r6, #1
 8008cb8:	b2f3      	uxtb	r3, r6
 8008cba:	b25e      	sxtb	r6, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d1f2      	bne.n	8008ca6 <xQueueSemaphoreTake+0x186>
		pxQueue->cRxLock = queueUNLOCKED;
 8008cc0:	23ff      	movs	r3, #255	; 0xff
 8008cc2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8008cc6:	f001 f877 	bl	8009db8 <vPortExitCritical>
			( void ) xTaskResumeAll();
 8008cca:	f000 fcf3 	bl	80096b4 <xTaskResumeAll>
	taskENTER_CRITICAL();
 8008cce:	f001 f851 	bl	8009d74 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008cd2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d07b      	beq.n	8008dd0 <xQueueSemaphoreTake+0x2b0>
	taskEXIT_CRITICAL();
 8008cd8:	f001 f86e 	bl	8009db8 <vPortExitCritical>
		taskENTER_CRITICAL();
 8008cdc:	f001 f84a 	bl	8009d74 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008ce0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008ce2:	2601      	movs	r6, #1
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	f43f af4d 	beq.w	8008b84 <xQueueSemaphoreTake+0x64>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008cea:	6822      	ldr	r2, [r4, #0]
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008cec:	3b01      	subs	r3, #1
 8008cee:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008cf0:	b912      	cbnz	r2, 8008cf8 <xQueueSemaphoreTake+0x1d8>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8008cf2:	f000 ffd9 	bl	8009ca8 <pvTaskIncrementMutexHeldCount>
 8008cf6:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008cf8:	6923      	ldr	r3, [r4, #16]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	f040 8088 	bne.w	8008e10 <xQueueSemaphoreTake+0x2f0>
				taskEXIT_CRITICAL();
 8008d00:	f001 f85a 	bl	8009db8 <vPortExitCritical>
				return pdPASS;
 8008d04:	2501      	movs	r5, #1
 8008d06:	e066      	b.n	8008dd6 <xQueueSemaphoreTake+0x2b6>
						vTaskMissedYield();
 8008d08:	f000 fea8 	bl	8009a5c <vTaskMissedYield>
 8008d0c:	e775      	b.n	8008bfa <xQueueSemaphoreTake+0xda>
	taskEXIT_CRITICAL();
 8008d0e:	f001 f853 	bl	8009db8 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008d12:	6823      	ldr	r3, [r4, #0]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d052      	beq.n	8008dbe <xQueueSemaphoreTake+0x29e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008d18:	f104 0924 	add.w	r9, r4, #36	; 0x24
 8008d1c:	4648      	mov	r0, r9
 8008d1e:	9901      	ldr	r1, [sp, #4]
 8008d20:	f000 fdb4 	bl	800988c <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 8008d24:	f001 f826 	bl	8009d74 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8008d28:	f894 6045 	ldrb.w	r6, [r4, #69]	; 0x45
 8008d2c:	b276      	sxtb	r6, r6
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008d2e:	2e00      	cmp	r6, #0
 8008d30:	dc04      	bgt.n	8008d3c <xQueueSemaphoreTake+0x21c>
 8008d32:	e011      	b.n	8008d58 <xQueueSemaphoreTake+0x238>
 8008d34:	3e01      	subs	r6, #1
 8008d36:	b2f3      	uxtb	r3, r6
 8008d38:	b25e      	sxtb	r6, r3
 8008d3a:	b16b      	cbz	r3, 8008d58 <xQueueSemaphoreTake+0x238>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008d3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d3e:	b15b      	cbz	r3, 8008d58 <xQueueSemaphoreTake+0x238>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008d40:	4648      	mov	r0, r9
 8008d42:	f000 fdf3 	bl	800992c <xTaskRemoveFromEventList>
 8008d46:	2800      	cmp	r0, #0
 8008d48:	d0f4      	beq.n	8008d34 <xQueueSemaphoreTake+0x214>
 8008d4a:	3e01      	subs	r6, #1
						vTaskMissedYield();
 8008d4c:	f000 fe86 	bl	8009a5c <vTaskMissedYield>
 8008d50:	b2f3      	uxtb	r3, r6
 8008d52:	b25e      	sxtb	r6, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d1f1      	bne.n	8008d3c <xQueueSemaphoreTake+0x21c>
		pxQueue->cTxLock = queueUNLOCKED;
 8008d58:	23ff      	movs	r3, #255	; 0xff
 8008d5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8008d5e:	f001 f82b 	bl	8009db8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8008d62:	f001 f807 	bl	8009d74 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8008d66:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 8008d6a:	b276      	sxtb	r6, r6
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008d6c:	2e00      	cmp	r6, #0
 8008d6e:	dd0e      	ble.n	8008d8e <xQueueSemaphoreTake+0x26e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d70:	6923      	ldr	r3, [r4, #16]
 8008d72:	b163      	cbz	r3, 8008d8e <xQueueSemaphoreTake+0x26e>
 8008d74:	f104 0910 	add.w	r9, r4, #16
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d78:	4648      	mov	r0, r9
 8008d7a:	f000 fdd7 	bl	800992c <xTaskRemoveFromEventList>
 8008d7e:	b9d8      	cbnz	r0, 8008db8 <xQueueSemaphoreTake+0x298>
 8008d80:	3e01      	subs	r6, #1
 8008d82:	b2f3      	uxtb	r3, r6
 8008d84:	b25e      	sxtb	r6, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008d86:	b113      	cbz	r3, 8008d8e <xQueueSemaphoreTake+0x26e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d88:	6923      	ldr	r3, [r4, #16]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d1f4      	bne.n	8008d78 <xQueueSemaphoreTake+0x258>
		pxQueue->cRxLock = queueUNLOCKED;
 8008d8e:	23ff      	movs	r3, #255	; 0xff
 8008d90:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8008d94:	f001 f810 	bl	8009db8 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 8008d98:	f000 fc8c 	bl	80096b4 <xTaskResumeAll>
 8008d9c:	2800      	cmp	r0, #0
 8008d9e:	d19d      	bne.n	8008cdc <xQueueSemaphoreTake+0x1bc>
					portYIELD_WITHIN_API();
 8008da0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008da4:	f8c8 3000 	str.w	r3, [r8]
 8008da8:	f3bf 8f4f 	dsb	sy
 8008dac:	f3bf 8f6f 	isb	sy
 8008db0:	e794      	b.n	8008cdc <xQueueSemaphoreTake+0x1bc>
					vTaskMissedYield();
 8008db2:	f000 fe53 	bl	8009a5c <vTaskMissedYield>
 8008db6:	e73d      	b.n	8008c34 <xQueueSemaphoreTake+0x114>
 8008db8:	f000 fe50 	bl	8009a5c <vTaskMissedYield>
 8008dbc:	e7e0      	b.n	8008d80 <xQueueSemaphoreTake+0x260>
						taskENTER_CRITICAL();
 8008dbe:	f000 ffd9 	bl	8009d74 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8008dc2:	6860      	ldr	r0, [r4, #4]
 8008dc4:	f000 fe60 	bl	8009a88 <xTaskPriorityInherit>
 8008dc8:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8008dca:	f000 fff5 	bl	8009db8 <vPortExitCritical>
 8008dce:	e7a3      	b.n	8008d18 <xQueueSemaphoreTake+0x1f8>
	taskEXIT_CRITICAL();
 8008dd0:	f000 fff2 	bl	8009db8 <vPortExitCritical>
					if( xInheritanceOccurred != pdFALSE )
 8008dd4:	b96d      	cbnz	r5, 8008df2 <xQueueSemaphoreTake+0x2d2>
}
 8008dd6:	4628      	mov	r0, r5
 8008dd8:	b005      	add	sp, #20
 8008dda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008dde:	b1a5      	cbz	r5, 8008e0a <xQueueSemaphoreTake+0x2ea>
 8008de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008de4:	f383 8811 	msr	BASEPRI, r3
 8008de8:	f3bf 8f6f 	isb	sy
 8008dec:	f3bf 8f4f 	dsb	sy
 8008df0:	e7fe      	b.n	8008df0 <xQueueSemaphoreTake+0x2d0>
						taskENTER_CRITICAL();
 8008df2:	f000 ffbf 	bl	8009d74 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8008df6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008df8:	b119      	cbz	r1, 8008e02 <xQueueSemaphoreTake+0x2e2>
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008dfa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008dfc:	6819      	ldr	r1, [r3, #0]
 8008dfe:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8008e02:	6860      	ldr	r0, [r4, #4]
 8008e04:	f000 fef2 	bl	8009bec <vTaskPriorityDisinheritAfterTimeout>
				return errQUEUE_EMPTY;
 8008e08:	2500      	movs	r5, #0
						taskEXIT_CRITICAL();
 8008e0a:	f000 ffd5 	bl	8009db8 <vPortExitCritical>
 8008e0e:	e7e2      	b.n	8008dd6 <xQueueSemaphoreTake+0x2b6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e10:	f104 0010 	add.w	r0, r4, #16
 8008e14:	f000 fd8a 	bl	800992c <xTaskRemoveFromEventList>
 8008e18:	2800      	cmp	r0, #0
 8008e1a:	f43f af71 	beq.w	8008d00 <xQueueSemaphoreTake+0x1e0>
						queueYIELD_IF_USING_PREEMPTION();
 8008e1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e22:	4b03      	ldr	r3, [pc, #12]	; (8008e30 <xQueueSemaphoreTake+0x310>)
 8008e24:	601a      	str	r2, [r3, #0]
 8008e26:	f3bf 8f4f 	dsb	sy
 8008e2a:	f3bf 8f6f 	isb	sy
 8008e2e:	e767      	b.n	8008d00 <xQueueSemaphoreTake+0x1e0>
 8008e30:	e000ed04 	.word	0xe000ed04

08008e34 <xQueueReceiveFromISR>:
{
 8008e34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8008e38:	b1b8      	cbz	r0, 8008e6a <xQueueReceiveFromISR+0x36>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008e3a:	2900      	cmp	r1, #0
 8008e3c:	d038      	beq.n	8008eb0 <xQueueReceiveFromISR+0x7c>
 8008e3e:	4604      	mov	r4, r0
 8008e40:	4690      	mov	r8, r2
 8008e42:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008e44:	f001 f87e 	bl	8009f44 <vPortValidateInterruptPriority>
	__asm volatile
 8008e48:	f3ef 8711 	mrs	r7, BASEPRI
 8008e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e50:	f383 8811 	msr	BASEPRI, r3
 8008e54:	f3bf 8f6f 	isb	sy
 8008e58:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e5c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008e5e:	b96d      	cbnz	r5, 8008e7c <xQueueReceiveFromISR+0x48>
			xReturn = pdFAIL;
 8008e60:	4628      	mov	r0, r5
	__asm volatile
 8008e62:	f387 8811 	msr	BASEPRI, r7
}
 8008e66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 8008e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e6e:	f383 8811 	msr	BASEPRI, r3
 8008e72:	f3bf 8f6f 	isb	sy
 8008e76:	f3bf 8f4f 	dsb	sy
 8008e7a:	e7fe      	b.n	8008e7a <xQueueReceiveFromISR+0x46>
			const int8_t cRxLock = pxQueue->cRxLock;
 8008e7c:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008e80:	6c22      	ldr	r2, [r4, #64]	; 0x40
			const int8_t cRxLock = pxQueue->cRxLock;
 8008e82:	b276      	sxtb	r6, r6
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008e84:	b15a      	cbz	r2, 8008e9e <xQueueReceiveFromISR+0x6a>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8008e86:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008e88:	6863      	ldr	r3, [r4, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8008e8a:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008e8c:	4299      	cmp	r1, r3
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8008e8e:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008e90:	d302      	bcc.n	8008e98 <xQueueReceiveFromISR+0x64>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8008e92:	6823      	ldr	r3, [r4, #0]
 8008e94:	4619      	mov	r1, r3
 8008e96:	60e3      	str	r3, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8008e98:	4648      	mov	r0, r9
 8008e9a:	f001 f999 	bl	800a1d0 <memcpy>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008e9e:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
 8008ea0:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008ea2:	63a5      	str	r5, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8008ea4:	d010      	beq.n	8008ec8 <xQueueReceiveFromISR+0x94>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008ea6:	1c73      	adds	r3, r6, #1
 8008ea8:	b25b      	sxtb	r3, r3
 8008eaa:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008eae:	e00d      	b.n	8008ecc <xQueueReceiveFromISR+0x98>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008eb0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d0c3      	beq.n	8008e3e <xQueueReceiveFromISR+0xa>
 8008eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eba:	f383 8811 	msr	BASEPRI, r3
 8008ebe:	f3bf 8f6f 	isb	sy
 8008ec2:	f3bf 8f4f 	dsb	sy
 8008ec6:	e7fe      	b.n	8008ec6 <xQueueReceiveFromISR+0x92>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ec8:	6923      	ldr	r3, [r4, #16]
 8008eca:	b90b      	cbnz	r3, 8008ed0 <xQueueReceiveFromISR+0x9c>
			xReturn = pdPASS;
 8008ecc:	2001      	movs	r0, #1
 8008ece:	e7c8      	b.n	8008e62 <xQueueReceiveFromISR+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ed0:	f104 0010 	add.w	r0, r4, #16
 8008ed4:	f000 fd2a 	bl	800992c <xTaskRemoveFromEventList>
 8008ed8:	2800      	cmp	r0, #0
 8008eda:	d0f7      	beq.n	8008ecc <xQueueReceiveFromISR+0x98>
						if( pxHigherPriorityTaskWoken != NULL )
 8008edc:	f1b8 0f00 	cmp.w	r8, #0
 8008ee0:	d0f4      	beq.n	8008ecc <xQueueReceiveFromISR+0x98>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008ee2:	2001      	movs	r0, #1
 8008ee4:	f8c8 0000 	str.w	r0, [r8]
 8008ee8:	e7bb      	b.n	8008e62 <xQueueReceiveFromISR+0x2e>
 8008eea:	bf00      	nop

08008eec <vQueueDelete>:
	configASSERT( pxQueue );
 8008eec:	b1f0      	cbz	r0, 8008f2c <vQueueDelete+0x40>

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008eee:	4b23      	ldr	r3, [pc, #140]	; (8008f7c <vQueueDelete+0x90>)
 8008ef0:	685a      	ldr	r2, [r3, #4]
 8008ef2:	4290      	cmp	r0, r2
 8008ef4:	d032      	beq.n	8008f5c <vQueueDelete+0x70>
 8008ef6:	68da      	ldr	r2, [r3, #12]
 8008ef8:	4290      	cmp	r0, r2
 8008efa:	d03c      	beq.n	8008f76 <vQueueDelete+0x8a>
 8008efc:	695a      	ldr	r2, [r3, #20]
 8008efe:	4290      	cmp	r0, r2
 8008f00:	d037      	beq.n	8008f72 <vQueueDelete+0x86>
 8008f02:	69da      	ldr	r2, [r3, #28]
 8008f04:	4290      	cmp	r0, r2
 8008f06:	d032      	beq.n	8008f6e <vQueueDelete+0x82>
 8008f08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008f0a:	4290      	cmp	r0, r2
 8008f0c:	d02d      	beq.n	8008f6a <vQueueDelete+0x7e>
 8008f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f10:	4290      	cmp	r0, r2
 8008f12:	d028      	beq.n	8008f66 <vQueueDelete+0x7a>
 8008f14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f16:	4290      	cmp	r0, r2
 8008f18:	d013      	beq.n	8008f42 <vQueueDelete+0x56>
 8008f1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f1c:	4290      	cmp	r0, r2
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008f1e:	bf08      	it	eq
 8008f20:	2207      	moveq	r2, #7
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008f22:	d00f      	beq.n	8008f44 <vQueueDelete+0x58>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008f24:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
 8008f28:	b14b      	cbz	r3, 8008f3e <vQueueDelete+0x52>
 8008f2a:	4770      	bx	lr
 8008f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f30:	f383 8811 	msr	BASEPRI, r3
 8008f34:	f3bf 8f6f 	isb	sy
 8008f38:	f3bf 8f4f 	dsb	sy
 8008f3c:	e7fe      	b.n	8008f3c <vQueueDelete+0x50>
			vPortFree( pxQueue );
 8008f3e:	f001 b8eb 	b.w	800a118 <vPortFree>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008f42:	2206      	movs	r2, #6
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008f44:	2100      	movs	r1, #0
{
 8008f46:	b410      	push	{r4}

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008f48:	eb03 04c2 	add.w	r4, r3, r2, lsl #3
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008f4c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008f50:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008f54:	6061      	str	r1, [r4, #4]
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008f56:	b11b      	cbz	r3, 8008f60 <vQueueDelete+0x74>
}
 8008f58:	bc10      	pop	{r4}
 8008f5a:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	e7f1      	b.n	8008f44 <vQueueDelete+0x58>
}
 8008f60:	bc10      	pop	{r4}
			vPortFree( pxQueue );
 8008f62:	f001 b8d9 	b.w	800a118 <vPortFree>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008f66:	2205      	movs	r2, #5
 8008f68:	e7ec      	b.n	8008f44 <vQueueDelete+0x58>
 8008f6a:	2204      	movs	r2, #4
 8008f6c:	e7ea      	b.n	8008f44 <vQueueDelete+0x58>
 8008f6e:	2203      	movs	r2, #3
 8008f70:	e7e8      	b.n	8008f44 <vQueueDelete+0x58>
 8008f72:	2202      	movs	r2, #2
 8008f74:	e7e6      	b.n	8008f44 <vQueueDelete+0x58>
 8008f76:	2201      	movs	r2, #1
 8008f78:	e7e4      	b.n	8008f44 <vQueueDelete+0x58>
 8008f7a:	bf00      	nop
 8008f7c:	2000a2bc 	.word	0x2000a2bc

08008f80 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f84:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008f86:	f000 fef5 	bl	8009d74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008f8a:	4a33      	ldr	r2, [pc, #204]	; (8009058 <prvAddNewTaskToReadyList+0xd8>)
		if( pxCurrentTCB == NULL )
 8008f8c:	4d33      	ldr	r5, [pc, #204]	; (800905c <prvAddNewTaskToReadyList+0xdc>)
		uxCurrentNumberOfTasks++;
 8008f8e:	6813      	ldr	r3, [r2, #0]
 8008f90:	3301      	adds	r3, #1
 8008f92:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008f94:	682b      	ldr	r3, [r5, #0]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d031      	beq.n	8008ffe <prvAddNewTaskToReadyList+0x7e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008f9a:	4e31      	ldr	r6, [pc, #196]	; (8009060 <prvAddNewTaskToReadyList+0xe0>)
 8008f9c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8008f9e:	6833      	ldr	r3, [r6, #0]
 8008fa0:	b32b      	cbz	r3, 8008fee <prvAddNewTaskToReadyList+0x6e>
 8008fa2:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 800908c <prvAddNewTaskToReadyList+0x10c>
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	492e      	ldr	r1, [pc, #184]	; (8009064 <prvAddNewTaskToReadyList+0xe4>)
		uxTaskNumber++;
 8008faa:	4f2f      	ldr	r7, [pc, #188]	; (8009068 <prvAddNewTaskToReadyList+0xe8>)
		prvAddTaskToReadyList( pxNewTCB );
 8008fac:	680a      	ldr	r2, [r1, #0]
 8008fae:	4083      	lsls	r3, r0
 8008fb0:	4313      	orrs	r3, r2
		uxTaskNumber++;
 8008fb2:	683a      	ldr	r2, [r7, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8008fb4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8008fb8:	600b      	str	r3, [r1, #0]
		uxTaskNumber++;
 8008fba:	3201      	adds	r2, #1
		prvAddTaskToReadyList( pxNewTCB );
 8008fbc:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8008fc0:	1d21      	adds	r1, r4, #4
		uxTaskNumber++;
 8008fc2:	603a      	str	r2, [r7, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8008fc4:	f7ff fa60 	bl	8008488 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008fc8:	f000 fef6 	bl	8009db8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008fcc:	6833      	ldr	r3, [r6, #0]
 8008fce:	b163      	cbz	r3, 8008fea <prvAddNewTaskToReadyList+0x6a>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008fd0:	682a      	ldr	r2, [r5, #0]
 8008fd2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008fd4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008fd6:	429a      	cmp	r2, r3
 8008fd8:	d207      	bcs.n	8008fea <prvAddNewTaskToReadyList+0x6a>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008fda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fde:	4b23      	ldr	r3, [pc, #140]	; (800906c <prvAddNewTaskToReadyList+0xec>)
 8008fe0:	601a      	str	r2, [r3, #0]
 8008fe2:	f3bf 8f4f 	dsb	sy
 8008fe6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008fea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008fee:	682b      	ldr	r3, [r5, #0]
 8008ff0:	f8df 8098 	ldr.w	r8, [pc, #152]	; 800908c <prvAddNewTaskToReadyList+0x10c>
 8008ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ff6:	4283      	cmp	r3, r0
					pxCurrentTCB = pxNewTCB;
 8008ff8:	bf98      	it	ls
 8008ffa:	602c      	strls	r4, [r5, #0]
 8008ffc:	e7d3      	b.n	8008fa6 <prvAddNewTaskToReadyList+0x26>
			pxCurrentTCB = pxNewTCB;
 8008ffe:	602c      	str	r4, [r5, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009000:	6813      	ldr	r3, [r2, #0]
 8009002:	2b01      	cmp	r3, #1
 8009004:	d004      	beq.n	8009010 <prvAddNewTaskToReadyList+0x90>
 8009006:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8009008:	f8df 8080 	ldr.w	r8, [pc, #128]	; 800908c <prvAddNewTaskToReadyList+0x10c>
 800900c:	4e14      	ldr	r6, [pc, #80]	; (8009060 <prvAddNewTaskToReadyList+0xe0>)
 800900e:	e7ca      	b.n	8008fa6 <prvAddNewTaskToReadyList+0x26>
 8009010:	f8df 8078 	ldr.w	r8, [pc, #120]	; 800908c <prvAddNewTaskToReadyList+0x10c>
 8009014:	4646      	mov	r6, r8
 8009016:	f108 078c 	add.w	r7, r8, #140	; 0x8c
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800901a:	4630      	mov	r0, r6
 800901c:	3614      	adds	r6, #20
 800901e:	f7ff fa23 	bl	8008468 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009022:	42b7      	cmp	r7, r6
 8009024:	d1f9      	bne.n	800901a <prvAddNewTaskToReadyList+0x9a>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009026:	4f12      	ldr	r7, [pc, #72]	; (8009070 <prvAddNewTaskToReadyList+0xf0>)
	vListInitialise( &xDelayedTaskList2 );
 8009028:	4e12      	ldr	r6, [pc, #72]	; (8009074 <prvAddNewTaskToReadyList+0xf4>)
	vListInitialise( &xDelayedTaskList1 );
 800902a:	4638      	mov	r0, r7
 800902c:	f7ff fa1c 	bl	8008468 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009030:	4630      	mov	r0, r6
 8009032:	f7ff fa19 	bl	8008468 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009036:	4810      	ldr	r0, [pc, #64]	; (8009078 <prvAddNewTaskToReadyList+0xf8>)
 8009038:	f7ff fa16 	bl	8008468 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800903c:	480f      	ldr	r0, [pc, #60]	; (800907c <prvAddNewTaskToReadyList+0xfc>)
 800903e:	f7ff fa13 	bl	8008468 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009042:	480f      	ldr	r0, [pc, #60]	; (8009080 <prvAddNewTaskToReadyList+0x100>)
 8009044:	f7ff fa10 	bl	8008468 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009048:	4a0e      	ldr	r2, [pc, #56]	; (8009084 <prvAddNewTaskToReadyList+0x104>)
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800904a:	4b0f      	ldr	r3, [pc, #60]	; (8009088 <prvAddNewTaskToReadyList+0x108>)
	pxDelayedTaskList = &xDelayedTaskList1;
 800904c:	6017      	str	r7, [r2, #0]
 800904e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009050:	601e      	str	r6, [r3, #0]
 8009052:	4e03      	ldr	r6, [pc, #12]	; (8009060 <prvAddNewTaskToReadyList+0xe0>)
 8009054:	e7a7      	b.n	8008fa6 <prvAddNewTaskToReadyList+0x26>
 8009056:	bf00      	nop
 8009058:	20000354 	.word	0x20000354
 800905c:	200002bc 	.word	0x200002bc
 8009060:	200003b0 	.word	0x200003b0
 8009064:	20000368 	.word	0x20000368
 8009068:	20000364 	.word	0x20000364
 800906c:	e000ed04 	.word	0xe000ed04
 8009070:	2000036c 	.word	0x2000036c
 8009074:	20000380 	.word	0x20000380
 8009078:	2000039c 	.word	0x2000039c
 800907c:	200003c8 	.word	0x200003c8
 8009080:	200003b4 	.word	0x200003b4
 8009084:	200002c0 	.word	0x200002c0
 8009088:	200002c4 	.word	0x200002c4
 800908c:	200002c8 	.word	0x200002c8

08009090 <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8009090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009094:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009096:	780e      	ldrb	r6, [r1, #0]
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8009098:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800909c:	6b25      	ldr	r5, [r4, #48]	; 0x30
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800909e:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80090a2:	3a01      	subs	r2, #1
		if( pcName[ x ] == 0x00 )
 80090a4:	780e      	ldrb	r6, [r1, #0]
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80090a6:	eb05 0582 	add.w	r5, r5, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80090aa:	f025 0707 	bic.w	r7, r5, #7
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80090ae:	4681      	mov	r9, r0
 80090b0:	e9dd 5808 	ldrd	r5, r8, [sp, #32]
 80090b4:	469a      	mov	sl, r3
		if( pcName[ x ] == 0x00 )
 80090b6:	2e00      	cmp	r6, #0
 80090b8:	d04d      	beq.n	8009156 <prvInitialiseNewTask.isra.2+0xc6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80090ba:	784b      	ldrb	r3, [r1, #1]
 80090bc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
		if( pcName[ x ] == 0x00 )
 80090c0:	784b      	ldrb	r3, [r1, #1]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d047      	beq.n	8009156 <prvInitialiseNewTask.isra.2+0xc6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80090c6:	788b      	ldrb	r3, [r1, #2]
 80090c8:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
		if( pcName[ x ] == 0x00 )
 80090cc:	788b      	ldrb	r3, [r1, #2]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d041      	beq.n	8009156 <prvInitialiseNewTask.isra.2+0xc6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80090d2:	78cb      	ldrb	r3, [r1, #3]
 80090d4:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
		if( pcName[ x ] == 0x00 )
 80090d8:	78cb      	ldrb	r3, [r1, #3]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d03b      	beq.n	8009156 <prvInitialiseNewTask.isra.2+0xc6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80090de:	790b      	ldrb	r3, [r1, #4]
 80090e0:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		if( pcName[ x ] == 0x00 )
 80090e4:	790b      	ldrb	r3, [r1, #4]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d035      	beq.n	8009156 <prvInitialiseNewTask.isra.2+0xc6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80090ea:	794b      	ldrb	r3, [r1, #5]
 80090ec:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
		if( pcName[ x ] == 0x00 )
 80090f0:	794b      	ldrb	r3, [r1, #5]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d02f      	beq.n	8009156 <prvInitialiseNewTask.isra.2+0xc6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80090f6:	798b      	ldrb	r3, [r1, #6]
 80090f8:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
		if( pcName[ x ] == 0x00 )
 80090fc:	798b      	ldrb	r3, [r1, #6]
 80090fe:	b353      	cbz	r3, 8009156 <prvInitialiseNewTask.isra.2+0xc6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009100:	79cb      	ldrb	r3, [r1, #7]
 8009102:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
		if( pcName[ x ] == 0x00 )
 8009106:	79cb      	ldrb	r3, [r1, #7]
 8009108:	b32b      	cbz	r3, 8009156 <prvInitialiseNewTask.isra.2+0xc6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800910a:	7a0b      	ldrb	r3, [r1, #8]
 800910c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		if( pcName[ x ] == 0x00 )
 8009110:	7a0b      	ldrb	r3, [r1, #8]
 8009112:	b303      	cbz	r3, 8009156 <prvInitialiseNewTask.isra.2+0xc6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009114:	7a4b      	ldrb	r3, [r1, #9]
 8009116:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
		if( pcName[ x ] == 0x00 )
 800911a:	7a4b      	ldrb	r3, [r1, #9]
 800911c:	b1db      	cbz	r3, 8009156 <prvInitialiseNewTask.isra.2+0xc6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800911e:	7a8b      	ldrb	r3, [r1, #10]
 8009120:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
		if( pcName[ x ] == 0x00 )
 8009124:	7a8b      	ldrb	r3, [r1, #10]
 8009126:	b1b3      	cbz	r3, 8009156 <prvInitialiseNewTask.isra.2+0xc6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009128:	7acb      	ldrb	r3, [r1, #11]
 800912a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
		if( pcName[ x ] == 0x00 )
 800912e:	7acb      	ldrb	r3, [r1, #11]
 8009130:	b18b      	cbz	r3, 8009156 <prvInitialiseNewTask.isra.2+0xc6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009132:	7b0b      	ldrb	r3, [r1, #12]
 8009134:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
		if( pcName[ x ] == 0x00 )
 8009138:	7b0b      	ldrb	r3, [r1, #12]
 800913a:	b163      	cbz	r3, 8009156 <prvInitialiseNewTask.isra.2+0xc6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800913c:	7b4b      	ldrb	r3, [r1, #13]
 800913e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
		if( pcName[ x ] == 0x00 )
 8009142:	7b4b      	ldrb	r3, [r1, #13]
 8009144:	b13b      	cbz	r3, 8009156 <prvInitialiseNewTask.isra.2+0xc6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009146:	7b8b      	ldrb	r3, [r1, #14]
 8009148:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
		if( pcName[ x ] == 0x00 )
 800914c:	7b8b      	ldrb	r3, [r1, #14]
 800914e:	b113      	cbz	r3, 8009156 <prvInitialiseNewTask.isra.2+0xc6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009150:	7bcb      	ldrb	r3, [r1, #15]
 8009152:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009156:	2d06      	cmp	r5, #6
 8009158:	bf28      	it	cs
 800915a:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800915c:	2600      	movs	r6, #0
	pxNewTCB->uxPriority = uxPriority;
 800915e:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8009160:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009162:	1d20      	adds	r0, r4, #4
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009164:	f884 6043 	strb.w	r6, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 8009168:	64a6      	str	r6, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800916a:	f7ff f989 	bl	8008480 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800916e:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009172:	f104 0018 	add.w	r0, r4, #24
 8009176:	f7ff f983 	bl	8008480 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800917a:	64e6      	str	r6, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800917c:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800917e:	6124      	str	r4, [r4, #16]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009180:	f884 6050 	strb.w	r6, [r4, #80]	; 0x50
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009184:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009186:	4652      	mov	r2, sl
 8009188:	4649      	mov	r1, r9
 800918a:	4638      	mov	r0, r7
 800918c:	f000 fdc8 	bl	8009d20 <pxPortInitialiseStack>
 8009190:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8009192:	f1b8 0f00 	cmp.w	r8, #0
 8009196:	d001      	beq.n	800919c <prvInitialiseNewTask.isra.2+0x10c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009198:	f8c8 4000 	str.w	r4, [r8]
}
 800919c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080091a0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80091a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80091a2:	4b1b      	ldr	r3, [pc, #108]	; (8009210 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80091a4:	4e1b      	ldr	r6, [pc, #108]	; (8009214 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 80091a6:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80091a8:	6833      	ldr	r3, [r6, #0]
{
 80091aa:	4605      	mov	r5, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80091ac:	1d18      	adds	r0, r3, #4
{
 80091ae:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80091b0:	f7ff f992 	bl	80084d8 <uxListRemove>
 80091b4:	b940      	cbnz	r0, 80091c8 <prvAddCurrentTaskToDelayedList+0x28>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80091b6:	2201      	movs	r2, #1
 80091b8:	6833      	ldr	r3, [r6, #0]
 80091ba:	4917      	ldr	r1, [pc, #92]	; (8009218 <prvAddCurrentTaskToDelayedList+0x78>)
 80091bc:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80091be:	680b      	ldr	r3, [r1, #0]
 80091c0:	4082      	lsls	r2, r0
 80091c2:	ea23 0302 	bic.w	r3, r3, r2
 80091c6:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80091c8:	1c6b      	adds	r3, r5, #1
 80091ca:	d017      	beq.n	80091fc <prvAddCurrentTaskToDelayedList+0x5c>
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80091cc:	6833      	ldr	r3, [r6, #0]
 80091ce:	1964      	adds	r4, r4, r5
 80091d0:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 80091d2:	d20b      	bcs.n	80091ec <prvAddCurrentTaskToDelayedList+0x4c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80091d4:	4b11      	ldr	r3, [pc, #68]	; (800921c <prvAddCurrentTaskToDelayedList+0x7c>)
 80091d6:	6818      	ldr	r0, [r3, #0]
 80091d8:	6831      	ldr	r1, [r6, #0]
 80091da:	3104      	adds	r1, #4
 80091dc:	f7ff f962 	bl	80084a4 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 80091e0:	4b0f      	ldr	r3, [pc, #60]	; (8009220 <prvAddCurrentTaskToDelayedList+0x80>)
 80091e2:	681a      	ldr	r2, [r3, #0]
 80091e4:	42a2      	cmp	r2, r4
				{
					xNextTaskUnblockTime = xTimeToWake;
 80091e6:	bf88      	it	hi
 80091e8:	601c      	strhi	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80091ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80091ec:	4b0d      	ldr	r3, [pc, #52]	; (8009224 <prvAddCurrentTaskToDelayedList+0x84>)
 80091ee:	6818      	ldr	r0, [r3, #0]
 80091f0:	6831      	ldr	r1, [r6, #0]
}
 80091f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80091f6:	3104      	adds	r1, #4
 80091f8:	f7ff b954 	b.w	80084a4 <vListInsert>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80091fc:	2f00      	cmp	r7, #0
 80091fe:	d0e5      	beq.n	80091cc <prvAddCurrentTaskToDelayedList+0x2c>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009200:	6831      	ldr	r1, [r6, #0]
 8009202:	4809      	ldr	r0, [pc, #36]	; (8009228 <prvAddCurrentTaskToDelayedList+0x88>)
 8009204:	3104      	adds	r1, #4
}
 8009206:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800920a:	f7ff b93d 	b.w	8008488 <vListInsertEnd>
 800920e:	bf00      	nop
 8009210:	200003dc 	.word	0x200003dc
 8009214:	200002bc 	.word	0x200002bc
 8009218:	20000368 	.word	0x20000368
 800921c:	200002c0 	.word	0x200002c0
 8009220:	20000394 	.word	0x20000394
 8009224:	200002c4 	.word	0x200002c4
 8009228:	200003b4 	.word	0x200003b4

0800922c <prvIdleTask>:
{
 800922c:	b580      	push	{r7, lr}
				taskYIELD();
 800922e:	f04f 5780 	mov.w	r7, #268435456	; 0x10000000
 8009232:	f8df a08c 	ldr.w	sl, [pc, #140]	; 80092c0 <prvIdleTask+0x94>
 8009236:	4e20      	ldr	r6, [pc, #128]	; (80092b8 <prvIdleTask+0x8c>)
 8009238:	4d20      	ldr	r5, [pc, #128]	; (80092bc <prvIdleTask+0x90>)
 800923a:	f8df 9088 	ldr.w	r9, [pc, #136]	; 80092c4 <prvIdleTask+0x98>
 800923e:	f8df 8088 	ldr.w	r8, [pc, #136]	; 80092c8 <prvIdleTask+0x9c>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009242:	682b      	ldr	r3, [r5, #0]
 8009244:	b343      	cbz	r3, 8009298 <prvIdleTask+0x6c>
			taskENTER_CRITICAL();
 8009246:	f000 fd95 	bl	8009d74 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800924a:	f8da 300c 	ldr.w	r3, [sl, #12]
 800924e:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009250:	1d20      	adds	r0, r4, #4
 8009252:	f7ff f941 	bl	80084d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009256:	6833      	ldr	r3, [r6, #0]
 8009258:	3b01      	subs	r3, #1
 800925a:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 800925c:	682b      	ldr	r3, [r5, #0]
 800925e:	3b01      	subs	r3, #1
 8009260:	602b      	str	r3, [r5, #0]
			taskEXIT_CRITICAL();
 8009262:	f000 fda9 	bl	8009db8 <vPortExitCritical>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009266:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800926a:	b163      	cbz	r3, 8009286 <prvIdleTask+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800926c:	2b01      	cmp	r3, #1
 800926e:	d01e      	beq.n	80092ae <prvIdleTask+0x82>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009270:	2b02      	cmp	r3, #2
 8009272:	d0e6      	beq.n	8009242 <prvIdleTask+0x16>
 8009274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009278:	f383 8811 	msr	BASEPRI, r3
 800927c:	f3bf 8f6f 	isb	sy
 8009280:	f3bf 8f4f 	dsb	sy
 8009284:	e7fe      	b.n	8009284 <prvIdleTask+0x58>
				vPortFree( pxTCB->pxStack );
 8009286:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8009288:	f000 ff46 	bl	800a118 <vPortFree>
				vPortFree( pxTCB );
 800928c:	4620      	mov	r0, r4
 800928e:	f000 ff43 	bl	800a118 <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009292:	682b      	ldr	r3, [r5, #0]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d1d6      	bne.n	8009246 <prvIdleTask+0x1a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009298:	f8d9 3000 	ldr.w	r3, [r9]
 800929c:	2b01      	cmp	r3, #1
 800929e:	d9d0      	bls.n	8009242 <prvIdleTask+0x16>
				taskYIELD();
 80092a0:	f8c8 7000 	str.w	r7, [r8]
 80092a4:	f3bf 8f4f 	dsb	sy
 80092a8:	f3bf 8f6f 	isb	sy
 80092ac:	e7c9      	b.n	8009242 <prvIdleTask+0x16>
				vPortFree( pxTCB );
 80092ae:	4620      	mov	r0, r4
 80092b0:	f000 ff32 	bl	800a118 <vPortFree>
 80092b4:	e7c5      	b.n	8009242 <prvIdleTask+0x16>
 80092b6:	bf00      	nop
 80092b8:	20000354 	.word	0x20000354
 80092bc:	20000358 	.word	0x20000358
 80092c0:	200003c8 	.word	0x200003c8
 80092c4:	200002c8 	.word	0x200002c8
 80092c8:	e000ed04 	.word	0xe000ed04

080092cc <xTaskCreateStatic>:
	{
 80092cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092ce:	b087      	sub	sp, #28
 80092d0:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	; 0x30
 80092d4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
		configASSERT( puxStackBuffer != NULL );
 80092d6:	b1bd      	cbz	r5, 8009308 <xTaskCreateStatic+0x3c>
		configASSERT( pxTaskBuffer != NULL );
 80092d8:	b16c      	cbz	r4, 80092f6 <xTaskCreateStatic+0x2a>
			volatile size_t xSize = sizeof( StaticTask_t );
 80092da:	2754      	movs	r7, #84	; 0x54
 80092dc:	9704      	str	r7, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80092de:	9f04      	ldr	r7, [sp, #16]
 80092e0:	2f54      	cmp	r7, #84	; 0x54
 80092e2:	d01a      	beq.n	800931a <xTaskCreateStatic+0x4e>
 80092e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092e8:	f383 8811 	msr	BASEPRI, r3
 80092ec:	f3bf 8f6f 	isb	sy
 80092f0:	f3bf 8f4f 	dsb	sy
 80092f4:	e7fe      	b.n	80092f4 <xTaskCreateStatic+0x28>
 80092f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092fa:	f383 8811 	msr	BASEPRI, r3
 80092fe:	f3bf 8f6f 	isb	sy
 8009302:	f3bf 8f4f 	dsb	sy
 8009306:	e7fe      	b.n	8009306 <xTaskCreateStatic+0x3a>
 8009308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800930c:	f383 8811 	msr	BASEPRI, r3
 8009310:	f3bf 8f6f 	isb	sy
 8009314:	f3bf 8f4f 	dsb	sy
 8009318:	e7fe      	b.n	8009318 <xTaskCreateStatic+0x4c>
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800931a:	2702      	movs	r7, #2
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800931c:	6325      	str	r5, [r4, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800931e:	ad05      	add	r5, sp, #20
 8009320:	9402      	str	r4, [sp, #8]
 8009322:	9600      	str	r6, [sp, #0]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009324:	f884 7051 	strb.w	r7, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009328:	9501      	str	r5, [sp, #4]
 800932a:	f7ff feb1 	bl	8009090 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 800932e:	4620      	mov	r0, r4
 8009330:	f7ff fe26 	bl	8008f80 <prvAddNewTaskToReadyList>
	}
 8009334:	9805      	ldr	r0, [sp, #20]
 8009336:	b007      	add	sp, #28
 8009338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800933a:	bf00      	nop

0800933c <xTaskCreate>:
	{
 800933c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009340:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 8009344:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009346:	4650      	mov	r0, sl
	{
 8009348:	460d      	mov	r5, r1
 800934a:	4699      	mov	r9, r3
 800934c:	9f09      	ldr	r7, [sp, #36]	; 0x24
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800934e:	f000 fe4f 	bl	8009ff0 <pvPortMalloc>
			if( pxStack != NULL )
 8009352:	2800      	cmp	r0, #0
 8009354:	f000 8096 	beq.w	8009484 <xTaskCreate+0x148>
 8009358:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800935a:	2054      	movs	r0, #84	; 0x54
 800935c:	f000 fe48 	bl	8009ff0 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8009360:	4604      	mov	r4, r0
 8009362:	2800      	cmp	r0, #0
 8009364:	f000 8087 	beq.w	8009476 <xTaskCreate+0x13a>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009368:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 800936a:	6306      	str	r6, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800936c:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009370:	782b      	ldrb	r3, [r5, #0]
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8009372:	f1aa 0a04 	sub.w	sl, sl, #4
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009376:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
 800937a:	782b      	ldrb	r3, [r5, #0]
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800937c:	4456      	add	r6, sl
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800937e:	f026 0607 	bic.w	r6, r6, #7
		if( pcName[ x ] == 0x00 )
 8009382:	2b00      	cmp	r3, #0
 8009384:	d04d      	beq.n	8009422 <xTaskCreate+0xe6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009386:	786b      	ldrb	r3, [r5, #1]
 8009388:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
		if( pcName[ x ] == 0x00 )
 800938c:	786b      	ldrb	r3, [r5, #1]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d047      	beq.n	8009422 <xTaskCreate+0xe6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009392:	78ab      	ldrb	r3, [r5, #2]
 8009394:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
		if( pcName[ x ] == 0x00 )
 8009398:	78ab      	ldrb	r3, [r5, #2]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d041      	beq.n	8009422 <xTaskCreate+0xe6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800939e:	78eb      	ldrb	r3, [r5, #3]
 80093a0:	f880 3037 	strb.w	r3, [r0, #55]	; 0x37
		if( pcName[ x ] == 0x00 )
 80093a4:	78eb      	ldrb	r3, [r5, #3]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d03b      	beq.n	8009422 <xTaskCreate+0xe6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80093aa:	792b      	ldrb	r3, [r5, #4]
 80093ac:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
		if( pcName[ x ] == 0x00 )
 80093b0:	792b      	ldrb	r3, [r5, #4]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d035      	beq.n	8009422 <xTaskCreate+0xe6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80093b6:	796b      	ldrb	r3, [r5, #5]
 80093b8:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
		if( pcName[ x ] == 0x00 )
 80093bc:	796b      	ldrb	r3, [r5, #5]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d02f      	beq.n	8009422 <xTaskCreate+0xe6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80093c2:	79ab      	ldrb	r3, [r5, #6]
 80093c4:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
		if( pcName[ x ] == 0x00 )
 80093c8:	79ab      	ldrb	r3, [r5, #6]
 80093ca:	b353      	cbz	r3, 8009422 <xTaskCreate+0xe6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80093cc:	79eb      	ldrb	r3, [r5, #7]
 80093ce:	f880 303b 	strb.w	r3, [r0, #59]	; 0x3b
		if( pcName[ x ] == 0x00 )
 80093d2:	79eb      	ldrb	r3, [r5, #7]
 80093d4:	b32b      	cbz	r3, 8009422 <xTaskCreate+0xe6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80093d6:	7a2b      	ldrb	r3, [r5, #8]
 80093d8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
		if( pcName[ x ] == 0x00 )
 80093dc:	7a2b      	ldrb	r3, [r5, #8]
 80093de:	b303      	cbz	r3, 8009422 <xTaskCreate+0xe6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80093e0:	7a6b      	ldrb	r3, [r5, #9]
 80093e2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
		if( pcName[ x ] == 0x00 )
 80093e6:	7a6b      	ldrb	r3, [r5, #9]
 80093e8:	b1db      	cbz	r3, 8009422 <xTaskCreate+0xe6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80093ea:	7aab      	ldrb	r3, [r5, #10]
 80093ec:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
		if( pcName[ x ] == 0x00 )
 80093f0:	7aab      	ldrb	r3, [r5, #10]
 80093f2:	b1b3      	cbz	r3, 8009422 <xTaskCreate+0xe6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80093f4:	7aeb      	ldrb	r3, [r5, #11]
 80093f6:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
		if( pcName[ x ] == 0x00 )
 80093fa:	7aeb      	ldrb	r3, [r5, #11]
 80093fc:	b18b      	cbz	r3, 8009422 <xTaskCreate+0xe6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80093fe:	7b2b      	ldrb	r3, [r5, #12]
 8009400:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
		if( pcName[ x ] == 0x00 )
 8009404:	7b2b      	ldrb	r3, [r5, #12]
 8009406:	b163      	cbz	r3, 8009422 <xTaskCreate+0xe6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009408:	7b6b      	ldrb	r3, [r5, #13]
 800940a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
		if( pcName[ x ] == 0x00 )
 800940e:	7b6b      	ldrb	r3, [r5, #13]
 8009410:	b13b      	cbz	r3, 8009422 <xTaskCreate+0xe6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009412:	7bab      	ldrb	r3, [r5, #14]
 8009414:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
		if( pcName[ x ] == 0x00 )
 8009418:	7bab      	ldrb	r3, [r5, #14]
 800941a:	b113      	cbz	r3, 8009422 <xTaskCreate+0xe6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800941c:	7beb      	ldrb	r3, [r5, #15]
 800941e:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
 8009422:	9d08      	ldr	r5, [sp, #32]
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009424:	f04f 0a00 	mov.w	sl, #0
 8009428:	2d06      	cmp	r5, #6
 800942a:	bf28      	it	cs
 800942c:	2506      	movcs	r5, #6
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800942e:	1d20      	adds	r0, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 8009430:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8009432:	6465      	str	r5, [r4, #68]	; 0x44
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009434:	f884 a043 	strb.w	sl, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 8009438:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800943c:	f7ff f820 	bl	8008480 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009440:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009444:	f104 0018 	add.w	r0, r4, #24
 8009448:	f7ff f81a 	bl	8008480 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800944c:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009450:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009452:	6124      	str	r4, [r4, #16]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009454:	f884 a050 	strb.w	sl, [r4, #80]	; 0x50
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009458:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800945a:	464a      	mov	r2, r9
 800945c:	4641      	mov	r1, r8
 800945e:	4630      	mov	r0, r6
 8009460:	f000 fc5e 	bl	8009d20 <pxPortInitialiseStack>
 8009464:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8009466:	b107      	cbz	r7, 800946a <xTaskCreate+0x12e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009468:	603c      	str	r4, [r7, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
 800946a:	4620      	mov	r0, r4
 800946c:	f7ff fd88 	bl	8008f80 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009470:	2001      	movs	r0, #1
	}
 8009472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					vPortFree( pxStack );
 8009476:	4630      	mov	r0, r6
 8009478:	f000 fe4e 	bl	800a118 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800947c:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8009480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009484:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8009488:	e7f3      	b.n	8009472 <xTaskCreate+0x136>
 800948a:	bf00      	nop

0800948c <vTaskStartScheduler>:
{
 800948c:	b530      	push	{r4, r5, lr}
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800948e:	2400      	movs	r4, #0
{
 8009490:	b08b      	sub	sp, #44	; 0x2c
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009492:	aa07      	add	r2, sp, #28
 8009494:	a906      	add	r1, sp, #24
 8009496:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009498:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800949c:	f7f7 f81a 	bl	80004d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80094a0:	e9dd 5305 	ldrd	r5, r3, [sp, #20]
		configASSERT( puxStackBuffer != NULL );
 80094a4:	b1c3      	cbz	r3, 80094d8 <vTaskStartScheduler+0x4c>
		configASSERT( pxTaskBuffer != NULL );
 80094a6:	b175      	cbz	r5, 80094c6 <vTaskStartScheduler+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 80094a8:	2254      	movs	r2, #84	; 0x54
 80094aa:	9208      	str	r2, [sp, #32]
			configASSERT( xSize == sizeof( TCB_t ) );
 80094ac:	9908      	ldr	r1, [sp, #32]
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80094ae:	9a07      	ldr	r2, [sp, #28]
			configASSERT( xSize == sizeof( TCB_t ) );
 80094b0:	2954      	cmp	r1, #84	; 0x54
 80094b2:	d01a      	beq.n	80094ea <vTaskStartScheduler+0x5e>
 80094b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094b8:	f383 8811 	msr	BASEPRI, r3
 80094bc:	f3bf 8f6f 	isb	sy
 80094c0:	f3bf 8f4f 	dsb	sy
 80094c4:	e7fe      	b.n	80094c4 <vTaskStartScheduler+0x38>
 80094c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ca:	f383 8811 	msr	BASEPRI, r3
 80094ce:	f3bf 8f6f 	isb	sy
 80094d2:	f3bf 8f4f 	dsb	sy
 80094d6:	e7fe      	b.n	80094d6 <vTaskStartScheduler+0x4a>
 80094d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094dc:	f383 8811 	msr	BASEPRI, r3
 80094e0:	f3bf 8f6f 	isb	sy
 80094e4:	f3bf 8f4f 	dsb	sy
 80094e8:	e7fe      	b.n	80094e8 <vTaskStartScheduler+0x5c>
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80094ea:	2002      	movs	r0, #2
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80094ec:	a909      	add	r1, sp, #36	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80094ee:	632b      	str	r3, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80094f0:	f885 0051 	strb.w	r0, [r5, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80094f4:	4623      	mov	r3, r4
 80094f6:	e9cd 4100 	strd	r4, r1, [sp]
 80094fa:	480f      	ldr	r0, [pc, #60]	; (8009538 <vTaskStartScheduler+0xac>)
 80094fc:	490f      	ldr	r1, [pc, #60]	; (800953c <vTaskStartScheduler+0xb0>)
 80094fe:	9502      	str	r5, [sp, #8]
 8009500:	f7ff fdc6 	bl	8009090 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009504:	4628      	mov	r0, r5
 8009506:	f7ff fd3b 	bl	8008f80 <prvAddNewTaskToReadyList>
		return xReturn;
 800950a:	9b09      	ldr	r3, [sp, #36]	; 0x24
		if( xIdleTaskHandle != NULL )
 800950c:	b193      	cbz	r3, 8009534 <vTaskStartScheduler+0xa8>
 800950e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009512:	f383 8811 	msr	BASEPRI, r3
 8009516:	f3bf 8f6f 	isb	sy
 800951a:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800951e:	f04f 35ff 	mov.w	r5, #4294967295
		xSchedulerRunning = pdTRUE;
 8009522:	2101      	movs	r1, #1
		xNextTaskUnblockTime = portMAX_DELAY;
 8009524:	4806      	ldr	r0, [pc, #24]	; (8009540 <vTaskStartScheduler+0xb4>)
		xSchedulerRunning = pdTRUE;
 8009526:	4a07      	ldr	r2, [pc, #28]	; (8009544 <vTaskStartScheduler+0xb8>)
		xTickCount = ( TickType_t ) 0U;
 8009528:	4b07      	ldr	r3, [pc, #28]	; (8009548 <vTaskStartScheduler+0xbc>)
		xNextTaskUnblockTime = portMAX_DELAY;
 800952a:	6005      	str	r5, [r0, #0]
		xSchedulerRunning = pdTRUE;
 800952c:	6011      	str	r1, [r2, #0]
		xTickCount = ( TickType_t ) 0U;
 800952e:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8009530:	f000 fcac 	bl	8009e8c <xPortStartScheduler>
}
 8009534:	b00b      	add	sp, #44	; 0x2c
 8009536:	bd30      	pop	{r4, r5, pc}
 8009538:	0800922d 	.word	0x0800922d
 800953c:	0800a778 	.word	0x0800a778
 8009540:	20000394 	.word	0x20000394
 8009544:	200003b0 	.word	0x200003b0
 8009548:	200003dc 	.word	0x200003dc

0800954c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800954c:	4a02      	ldr	r2, [pc, #8]	; (8009558 <vTaskSuspendAll+0xc>)
 800954e:	6813      	ldr	r3, [r2, #0]
 8009550:	3301      	adds	r3, #1
 8009552:	6013      	str	r3, [r2, #0]
}
 8009554:	4770      	bx	lr
 8009556:	bf00      	nop
 8009558:	20000360 	.word	0x20000360

0800955c <xTaskIncrementTick>:
{
 800955c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009560:	4b49      	ldr	r3, [pc, #292]	; (8009688 <xTaskIncrementTick+0x12c>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	b9cb      	cbnz	r3, 800959a <xTaskIncrementTick+0x3e>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009566:	4b49      	ldr	r3, [pc, #292]	; (800968c <xTaskIncrementTick+0x130>)
 8009568:	681e      	ldr	r6, [r3, #0]
 800956a:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 800956c:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800956e:	b30e      	cbz	r6, 80095b4 <xTaskIncrementTick+0x58>
 8009570:	f8df b138 	ldr.w	fp, [pc, #312]	; 80096ac <xTaskIncrementTick+0x150>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009574:	f8db 2000 	ldr.w	r2, [fp]
BaseType_t xSwitchRequired = pdFALSE;
 8009578:	2500      	movs	r5, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 800957a:	42b2      	cmp	r2, r6
 800957c:	d928      	bls.n	80095d0 <xTaskIncrementTick+0x74>
 800957e:	4f44      	ldr	r7, [pc, #272]	; (8009690 <xTaskIncrementTick+0x134>)
 8009580:	f8df 812c 	ldr.w	r8, [pc, #300]	; 80096b0 <xTaskIncrementTick+0x154>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009584:	f8d8 3000 	ldr.w	r3, [r8]
 8009588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800958a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800958e:	009b      	lsls	r3, r3, #2
 8009590:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 8009592:	2b02      	cmp	r3, #2
 8009594:	bf28      	it	cs
 8009596:	2501      	movcs	r5, #1
 8009598:	e004      	b.n	80095a4 <xTaskIncrementTick+0x48>
BaseType_t xSwitchRequired = pdFALSE;
 800959a:	2500      	movs	r5, #0
		++uxPendedTicks;
 800959c:	4a3d      	ldr	r2, [pc, #244]	; (8009694 <xTaskIncrementTick+0x138>)
 800959e:	6813      	ldr	r3, [r2, #0]
 80095a0:	3301      	adds	r3, #1
 80095a2:	6013      	str	r3, [r2, #0]
		if( xYieldPending != pdFALSE )
 80095a4:	4b3c      	ldr	r3, [pc, #240]	; (8009698 <xTaskIncrementTick+0x13c>)
 80095a6:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 80095a8:	2b00      	cmp	r3, #0
}
 80095aa:	bf0c      	ite	eq
 80095ac:	4628      	moveq	r0, r5
 80095ae:	2001      	movne	r0, #1
 80095b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 80095b4:	4c39      	ldr	r4, [pc, #228]	; (800969c <xTaskIncrementTick+0x140>)
 80095b6:	6823      	ldr	r3, [r4, #0]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d047      	beq.n	800964e <xTaskIncrementTick+0xf2>
 80095be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095c2:	f383 8811 	msr	BASEPRI, r3
 80095c6:	f3bf 8f6f 	isb	sy
 80095ca:	f3bf 8f4f 	dsb	sy
 80095ce:	e7fe      	b.n	80095ce <xTaskIncrementTick+0x72>
 80095d0:	4c32      	ldr	r4, [pc, #200]	; (800969c <xTaskIncrementTick+0x140>)
 80095d2:	4f2f      	ldr	r7, [pc, #188]	; (8009690 <xTaskIncrementTick+0x134>)
 80095d4:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 80096b0 <xTaskIncrementTick+0x154>
 80095d8:	e02d      	b.n	8009636 <xTaskIncrementTick+0xda>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80095da:	6822      	ldr	r2, [r4, #0]
 80095dc:	68d2      	ldr	r2, [r2, #12]
 80095de:	f8d2 900c 	ldr.w	r9, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80095e2:	f8d9 1004 	ldr.w	r1, [r9, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80095e6:	f109 0a04 	add.w	sl, r9, #4
					if( xConstTickCount < xItemValue )
 80095ea:	428e      	cmp	r6, r1
 80095ec:	d32c      	bcc.n	8009648 <xTaskIncrementTick+0xec>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80095ee:	4650      	mov	r0, sl
 80095f0:	f7fe ff72 	bl	80084d8 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80095f4:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80095f8:	f109 0018 	add.w	r0, r9, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80095fc:	b109      	cbz	r1, 8009602 <xTaskIncrementTick+0xa6>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80095fe:	f7fe ff6b 	bl	80084d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009602:	2101      	movs	r1, #1
 8009604:	4a26      	ldr	r2, [pc, #152]	; (80096a0 <xTaskIncrementTick+0x144>)
 8009606:	f8d9 002c 	ldr.w	r0, [r9, #44]	; 0x2c
 800960a:	6813      	ldr	r3, [r2, #0]
 800960c:	fa01 fc00 	lsl.w	ip, r1, r0
 8009610:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009614:	4651      	mov	r1, sl
 8009616:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 800961a:	ea4c 0c03 	orr.w	ip, ip, r3
 800961e:	f8c2 c000 	str.w	ip, [r2]
 8009622:	f7fe ff31 	bl	8008488 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009626:	f8d8 0000 	ldr.w	r0, [r8]
 800962a:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
 800962e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8009630:	4291      	cmp	r1, r2
 8009632:	bf28      	it	cs
 8009634:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009636:	6822      	ldr	r2, [r4, #0]
 8009638:	6812      	ldr	r2, [r2, #0]
 800963a:	2a00      	cmp	r2, #0
 800963c:	d1cd      	bne.n	80095da <xTaskIncrementTick+0x7e>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800963e:	f04f 32ff 	mov.w	r2, #4294967295
 8009642:	f8cb 2000 	str.w	r2, [fp]
					break;
 8009646:	e79d      	b.n	8009584 <xTaskIncrementTick+0x28>
						xNextTaskUnblockTime = xItemValue;
 8009648:	f8cb 1000 	str.w	r1, [fp]
						break;
 800964c:	e79a      	b.n	8009584 <xTaskIncrementTick+0x28>
			taskSWITCH_DELAYED_LISTS();
 800964e:	4b15      	ldr	r3, [pc, #84]	; (80096a4 <xTaskIncrementTick+0x148>)
 8009650:	6821      	ldr	r1, [r4, #0]
 8009652:	6818      	ldr	r0, [r3, #0]
 8009654:	4a14      	ldr	r2, [pc, #80]	; (80096a8 <xTaskIncrementTick+0x14c>)
 8009656:	6020      	str	r0, [r4, #0]
 8009658:	6019      	str	r1, [r3, #0]
 800965a:	6813      	ldr	r3, [r2, #0]
 800965c:	3301      	adds	r3, #1
 800965e:	6013      	str	r3, [r2, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009660:	6823      	ldr	r3, [r4, #0]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	b933      	cbnz	r3, 8009674 <xTaskIncrementTick+0x118>
		xNextTaskUnblockTime = portMAX_DELAY;
 8009666:	f04f 32ff 	mov.w	r2, #4294967295
 800966a:	f8df b040 	ldr.w	fp, [pc, #64]	; 80096ac <xTaskIncrementTick+0x150>
 800966e:	f8cb 2000 	str.w	r2, [fp]
 8009672:	e77f      	b.n	8009574 <xTaskIncrementTick+0x18>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009674:	6822      	ldr	r2, [r4, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009676:	f8df b034 	ldr.w	fp, [pc, #52]	; 80096ac <xTaskIncrementTick+0x150>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800967a:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800967c:	68d2      	ldr	r2, [r2, #12]
 800967e:	6852      	ldr	r2, [r2, #4]
 8009680:	f8cb 2000 	str.w	r2, [fp]
 8009684:	e776      	b.n	8009574 <xTaskIncrementTick+0x18>
 8009686:	bf00      	nop
 8009688:	20000360 	.word	0x20000360
 800968c:	200003dc 	.word	0x200003dc
 8009690:	200002c8 	.word	0x200002c8
 8009694:	2000035c 	.word	0x2000035c
 8009698:	200003e0 	.word	0x200003e0
 800969c:	200002c0 	.word	0x200002c0
 80096a0:	20000368 	.word	0x20000368
 80096a4:	200002c4 	.word	0x200002c4
 80096a8:	20000398 	.word	0x20000398
 80096ac:	20000394 	.word	0x20000394
 80096b0:	200002bc 	.word	0x200002bc

080096b4 <xTaskResumeAll>:
{
 80096b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	configASSERT( uxSchedulerSuspended );
 80096b8:	4c38      	ldr	r4, [pc, #224]	; (800979c <xTaskResumeAll+0xe8>)
 80096ba:	6823      	ldr	r3, [r4, #0]
 80096bc:	b943      	cbnz	r3, 80096d0 <xTaskResumeAll+0x1c>
 80096be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096c2:	f383 8811 	msr	BASEPRI, r3
 80096c6:	f3bf 8f6f 	isb	sy
 80096ca:	f3bf 8f4f 	dsb	sy
 80096ce:	e7fe      	b.n	80096ce <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 80096d0:	f000 fb50 	bl	8009d74 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80096d4:	6823      	ldr	r3, [r4, #0]
 80096d6:	3b01      	subs	r3, #1
 80096d8:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80096da:	6824      	ldr	r4, [r4, #0]
 80096dc:	bb7c      	cbnz	r4, 800973e <xTaskResumeAll+0x8a>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80096de:	4b30      	ldr	r3, [pc, #192]	; (80097a0 <xTaskResumeAll+0xec>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	b363      	cbz	r3, 800973e <xTaskResumeAll+0x8a>
 80096e4:	4d2f      	ldr	r5, [pc, #188]	; (80097a4 <xTaskResumeAll+0xf0>)
 80096e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80097bc <xTaskResumeAll+0x108>
					prvAddTaskToReadyList( pxTCB );
 80096ea:	4e2f      	ldr	r6, [pc, #188]	; (80097a8 <xTaskResumeAll+0xf4>)
 80096ec:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 80097c0 <xTaskResumeAll+0x10c>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80096f0:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 80097c4 <xTaskResumeAll+0x110>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80096f4:	f8da 3000 	ldr.w	r3, [sl]
 80096f8:	b33b      	cbz	r3, 800974a <xTaskResumeAll+0x96>
					prvAddTaskToReadyList( pxTCB );
 80096fa:	2701      	movs	r7, #1
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80096fc:	f8da 300c 	ldr.w	r3, [sl, #12]
 8009700:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009702:	f104 0804 	add.w	r8, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009706:	f104 0018 	add.w	r0, r4, #24
 800970a:	f7fe fee5 	bl	80084d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800970e:	4640      	mov	r0, r8
 8009710:	f7fe fee2 	bl	80084d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009714:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8009716:	6832      	ldr	r2, [r6, #0]
 8009718:	fa07 f300 	lsl.w	r3, r7, r0
 800971c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009720:	4313      	orrs	r3, r2
 8009722:	4641      	mov	r1, r8
 8009724:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8009728:	6033      	str	r3, [r6, #0]
 800972a:	f7fe fead 	bl	8008488 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800972e:	f8db 3000 	ldr.w	r3, [fp]
 8009732:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009736:	429a      	cmp	r2, r3
 8009738:	d3dc      	bcc.n	80096f4 <xTaskResumeAll+0x40>
						xYieldPending = pdTRUE;
 800973a:	602f      	str	r7, [r5, #0]
 800973c:	e7da      	b.n	80096f4 <xTaskResumeAll+0x40>
BaseType_t xAlreadyYielded = pdFALSE;
 800973e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8009740:	f000 fb3a 	bl	8009db8 <vPortExitCritical>
}
 8009744:	4620      	mov	r0, r4
 8009746:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( pxTCB != NULL )
 800974a:	b13c      	cbz	r4, 800975c <xTaskResumeAll+0xa8>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800974c:	4b17      	ldr	r3, [pc, #92]	; (80097ac <xTaskResumeAll+0xf8>)
 800974e:	681a      	ldr	r2, [r3, #0]
 8009750:	6812      	ldr	r2, [r2, #0]
 8009752:	b9da      	cbnz	r2, 800978c <xTaskResumeAll+0xd8>
		xNextTaskUnblockTime = portMAX_DELAY;
 8009754:	f04f 32ff 	mov.w	r2, #4294967295
 8009758:	4b15      	ldr	r3, [pc, #84]	; (80097b0 <xTaskResumeAll+0xfc>)
 800975a:	601a      	str	r2, [r3, #0]
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800975c:	4e15      	ldr	r6, [pc, #84]	; (80097b4 <xTaskResumeAll+0x100>)
 800975e:	6834      	ldr	r4, [r6, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009760:	b13c      	cbz	r4, 8009772 <xTaskResumeAll+0xbe>
								xYieldPending = pdTRUE;
 8009762:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8009764:	f7ff fefa 	bl	800955c <xTaskIncrementTick>
 8009768:	b100      	cbz	r0, 800976c <xTaskResumeAll+0xb8>
								xYieldPending = pdTRUE;
 800976a:	602f      	str	r7, [r5, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800976c:	3c01      	subs	r4, #1
 800976e:	d1f9      	bne.n	8009764 <xTaskResumeAll+0xb0>
						uxPendedTicks = 0;
 8009770:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 8009772:	682b      	ldr	r3, [r5, #0]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d0e2      	beq.n	800973e <xTaskResumeAll+0x8a>
					taskYIELD_IF_USING_PREEMPTION();
 8009778:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800977c:	4b0e      	ldr	r3, [pc, #56]	; (80097b8 <xTaskResumeAll+0x104>)
 800977e:	601a      	str	r2, [r3, #0]
 8009780:	f3bf 8f4f 	dsb	sy
 8009784:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8009788:	2401      	movs	r4, #1
 800978a:	e7d9      	b.n	8009740 <xTaskResumeAll+0x8c>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800978c:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800978e:	4b08      	ldr	r3, [pc, #32]	; (80097b0 <xTaskResumeAll+0xfc>)
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009790:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009792:	68d2      	ldr	r2, [r2, #12]
 8009794:	6852      	ldr	r2, [r2, #4]
 8009796:	601a      	str	r2, [r3, #0]
 8009798:	e7e0      	b.n	800975c <xTaskResumeAll+0xa8>
 800979a:	bf00      	nop
 800979c:	20000360 	.word	0x20000360
 80097a0:	20000354 	.word	0x20000354
 80097a4:	200003e0 	.word	0x200003e0
 80097a8:	20000368 	.word	0x20000368
 80097ac:	200002c0 	.word	0x200002c0
 80097b0:	20000394 	.word	0x20000394
 80097b4:	2000035c 	.word	0x2000035c
 80097b8:	e000ed04 	.word	0xe000ed04
 80097bc:	2000039c 	.word	0x2000039c
 80097c0:	200002c8 	.word	0x200002c8
 80097c4:	200002bc 	.word	0x200002bc

080097c8 <vTaskDelay>:
	{
 80097c8:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80097ca:	b198      	cbz	r0, 80097f4 <vTaskDelay+0x2c>
			configASSERT( uxSchedulerSuspended == 0 );
 80097cc:	4b0e      	ldr	r3, [pc, #56]	; (8009808 <vTaskDelay+0x40>)
 80097ce:	6819      	ldr	r1, [r3, #0]
 80097d0:	b141      	cbz	r1, 80097e4 <vTaskDelay+0x1c>
 80097d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097d6:	f383 8811 	msr	BASEPRI, r3
 80097da:	f3bf 8f6f 	isb	sy
 80097de:	f3bf 8f4f 	dsb	sy
 80097e2:	e7fe      	b.n	80097e2 <vTaskDelay+0x1a>
	++uxSchedulerSuspended;
 80097e4:	681a      	ldr	r2, [r3, #0]
 80097e6:	3201      	adds	r2, #1
 80097e8:	601a      	str	r2, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80097ea:	f7ff fcd9 	bl	80091a0 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80097ee:	f7ff ff61 	bl	80096b4 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80097f2:	b938      	cbnz	r0, 8009804 <vTaskDelay+0x3c>
			portYIELD_WITHIN_API();
 80097f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097f8:	4b04      	ldr	r3, [pc, #16]	; (800980c <vTaskDelay+0x44>)
 80097fa:	601a      	str	r2, [r3, #0]
 80097fc:	f3bf 8f4f 	dsb	sy
 8009800:	f3bf 8f6f 	isb	sy
	}
 8009804:	bd08      	pop	{r3, pc}
 8009806:	bf00      	nop
 8009808:	20000360 	.word	0x20000360
 800980c:	e000ed04 	.word	0xe000ed04

08009810 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009810:	4b19      	ldr	r3, [pc, #100]	; (8009878 <vTaskSwitchContext+0x68>)
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	b9e3      	cbnz	r3, 8009850 <vTaskSwitchContext+0x40>
		xYieldPending = pdFALSE;
 8009816:	4919      	ldr	r1, [pc, #100]	; (800987c <vTaskSwitchContext+0x6c>)
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8009818:	4a19      	ldr	r2, [pc, #100]	; (8009880 <vTaskSwitchContext+0x70>)
{
 800981a:	b410      	push	{r4}
		xYieldPending = pdFALSE;
 800981c:	600b      	str	r3, [r1, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800981e:	6813      	ldr	r3, [r2, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009820:	fab3 f383 	clz	r3, r3
 8009824:	b2db      	uxtb	r3, r3
 8009826:	f1c3 031f 	rsb	r3, r3, #31
 800982a:	4816      	ldr	r0, [pc, #88]	; (8009884 <vTaskSwitchContext+0x74>)
 800982c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8009830:	0092      	lsls	r2, r2, #2
 8009832:	5881      	ldr	r1, [r0, r2]
 8009834:	1884      	adds	r4, r0, r2
 8009836:	b179      	cbz	r1, 8009858 <vTaskSwitchContext+0x48>
 8009838:	6861      	ldr	r1, [r4, #4]
 800983a:	3208      	adds	r2, #8
 800983c:	6849      	ldr	r1, [r1, #4]
 800983e:	4402      	add	r2, r0
 8009840:	4291      	cmp	r1, r2
 8009842:	6061      	str	r1, [r4, #4]
 8009844:	d011      	beq.n	800986a <vTaskSwitchContext+0x5a>
 8009846:	68ca      	ldr	r2, [r1, #12]
 8009848:	4b0f      	ldr	r3, [pc, #60]	; (8009888 <vTaskSwitchContext+0x78>)
}
 800984a:	bc10      	pop	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800984c:	601a      	str	r2, [r3, #0]
}
 800984e:	4770      	bx	lr
		xYieldPending = pdTRUE;
 8009850:	2201      	movs	r2, #1
 8009852:	4b0a      	ldr	r3, [pc, #40]	; (800987c <vTaskSwitchContext+0x6c>)
 8009854:	601a      	str	r2, [r3, #0]
 8009856:	4770      	bx	lr
	__asm volatile
 8009858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800985c:	f383 8811 	msr	BASEPRI, r3
 8009860:	f3bf 8f6f 	isb	sy
 8009864:	f3bf 8f4f 	dsb	sy
 8009868:	e7fe      	b.n	8009868 <vTaskSwitchContext+0x58>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800986a:	2214      	movs	r2, #20
 800986c:	fb02 0303 	mla	r3, r2, r3, r0
 8009870:	6849      	ldr	r1, [r1, #4]
 8009872:	6059      	str	r1, [r3, #4]
 8009874:	e7e7      	b.n	8009846 <vTaskSwitchContext+0x36>
 8009876:	bf00      	nop
 8009878:	20000360 	.word	0x20000360
 800987c:	200003e0 	.word	0x200003e0
 8009880:	20000368 	.word	0x20000368
 8009884:	200002c8 	.word	0x200002c8
 8009888:	200002bc 	.word	0x200002bc

0800988c <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 800988c:	b940      	cbnz	r0, 80098a0 <vTaskPlaceOnEventList+0x14>
 800988e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009892:	f383 8811 	msr	BASEPRI, r3
 8009896:	f3bf 8f6f 	isb	sy
 800989a:	f3bf 8f4f 	dsb	sy
 800989e:	e7fe      	b.n	800989e <vTaskPlaceOnEventList+0x12>
{
 80098a0:	b570      	push	{r4, r5, r6, lr}
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80098a2:	4d1b      	ldr	r5, [pc, #108]	; (8009910 <vTaskPlaceOnEventList+0x84>)
 80098a4:	460c      	mov	r4, r1
 80098a6:	6829      	ldr	r1, [r5, #0]
 80098a8:	3118      	adds	r1, #24
 80098aa:	f7fe fdfb 	bl	80084a4 <vListInsert>
const TickType_t xConstTickCount = xTickCount;
 80098ae:	4b19      	ldr	r3, [pc, #100]	; (8009914 <vTaskPlaceOnEventList+0x88>)
 80098b0:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80098b2:	6828      	ldr	r0, [r5, #0]
 80098b4:	3004      	adds	r0, #4
 80098b6:	f7fe fe0f 	bl	80084d8 <uxListRemove>
 80098ba:	b940      	cbnz	r0, 80098ce <vTaskPlaceOnEventList+0x42>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80098bc:	2201      	movs	r2, #1
 80098be:	682b      	ldr	r3, [r5, #0]
 80098c0:	4915      	ldr	r1, [pc, #84]	; (8009918 <vTaskPlaceOnEventList+0x8c>)
 80098c2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80098c4:	680b      	ldr	r3, [r1, #0]
 80098c6:	4082      	lsls	r2, r0
 80098c8:	ea23 0302 	bic.w	r3, r3, r2
 80098cc:	600b      	str	r3, [r1, #0]
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80098ce:	1c63      	adds	r3, r4, #1
 80098d0:	d00f      	beq.n	80098f2 <vTaskPlaceOnEventList+0x66>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80098d2:	682b      	ldr	r3, [r5, #0]
 80098d4:	19a4      	adds	r4, r4, r6
 80098d6:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80098d8:	d212      	bcs.n	8009900 <vTaskPlaceOnEventList+0x74>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80098da:	4b10      	ldr	r3, [pc, #64]	; (800991c <vTaskPlaceOnEventList+0x90>)
 80098dc:	6818      	ldr	r0, [r3, #0]
 80098de:	6829      	ldr	r1, [r5, #0]
 80098e0:	3104      	adds	r1, #4
 80098e2:	f7fe fddf 	bl	80084a4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80098e6:	4b0e      	ldr	r3, [pc, #56]	; (8009920 <vTaskPlaceOnEventList+0x94>)
 80098e8:	681a      	ldr	r2, [r3, #0]
 80098ea:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 80098ec:	bf38      	it	cc
 80098ee:	601c      	strcc	r4, [r3, #0]
}
 80098f0:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80098f2:	6829      	ldr	r1, [r5, #0]
 80098f4:	480b      	ldr	r0, [pc, #44]	; (8009924 <vTaskPlaceOnEventList+0x98>)
 80098f6:	3104      	adds	r1, #4
}
 80098f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80098fc:	f7fe bdc4 	b.w	8008488 <vListInsertEnd>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009900:	4b09      	ldr	r3, [pc, #36]	; (8009928 <vTaskPlaceOnEventList+0x9c>)
 8009902:	6818      	ldr	r0, [r3, #0]
 8009904:	6829      	ldr	r1, [r5, #0]
}
 8009906:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800990a:	3104      	adds	r1, #4
 800990c:	f7fe bdca 	b.w	80084a4 <vListInsert>
 8009910:	200002bc 	.word	0x200002bc
 8009914:	200003dc 	.word	0x200003dc
 8009918:	20000368 	.word	0x20000368
 800991c:	200002c0 	.word	0x200002c0
 8009920:	20000394 	.word	0x20000394
 8009924:	200003b4 	.word	0x200003b4
 8009928:	200002c4 	.word	0x200002c4

0800992c <xTaskRemoveFromEventList>:
{
 800992c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800992e:	68c3      	ldr	r3, [r0, #12]
 8009930:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8009932:	b354      	cbz	r4, 800998a <xTaskRemoveFromEventList+0x5e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009934:	f104 0518 	add.w	r5, r4, #24
 8009938:	4628      	mov	r0, r5
 800993a:	f7fe fdcd 	bl	80084d8 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800993e:	4b18      	ldr	r3, [pc, #96]	; (80099a0 <xTaskRemoveFromEventList+0x74>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	b9eb      	cbnz	r3, 8009980 <xTaskRemoveFromEventList+0x54>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009944:	1d26      	adds	r6, r4, #4
 8009946:	4630      	mov	r0, r6
 8009948:	f7fe fdc6 	bl	80084d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800994c:	2301      	movs	r3, #1
 800994e:	4d15      	ldr	r5, [pc, #84]	; (80099a4 <xTaskRemoveFromEventList+0x78>)
 8009950:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009952:	682f      	ldr	r7, [r5, #0]
 8009954:	4814      	ldr	r0, [pc, #80]	; (80099a8 <xTaskRemoveFromEventList+0x7c>)
 8009956:	4093      	lsls	r3, r2
 8009958:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800995c:	433b      	orrs	r3, r7
 800995e:	4631      	mov	r1, r6
 8009960:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8009964:	602b      	str	r3, [r5, #0]
 8009966:	f7fe fd8f 	bl	8008488 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800996a:	4b10      	ldr	r3, [pc, #64]	; (80099ac <xTaskRemoveFromEventList+0x80>)
 800996c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009972:	429a      	cmp	r2, r3
 8009974:	d912      	bls.n	800999c <xTaskRemoveFromEventList+0x70>
		xYieldPending = pdTRUE;
 8009976:	2301      	movs	r3, #1
 8009978:	4a0d      	ldr	r2, [pc, #52]	; (80099b0 <xTaskRemoveFromEventList+0x84>)
		xReturn = pdTRUE;
 800997a:	4618      	mov	r0, r3
		xYieldPending = pdTRUE;
 800997c:	6013      	str	r3, [r2, #0]
}
 800997e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009980:	4629      	mov	r1, r5
 8009982:	480c      	ldr	r0, [pc, #48]	; (80099b4 <xTaskRemoveFromEventList+0x88>)
 8009984:	f7fe fd80 	bl	8008488 <vListInsertEnd>
 8009988:	e7ef      	b.n	800996a <xTaskRemoveFromEventList+0x3e>
 800998a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800998e:	f383 8811 	msr	BASEPRI, r3
 8009992:	f3bf 8f6f 	isb	sy
 8009996:	f3bf 8f4f 	dsb	sy
 800999a:	e7fe      	b.n	800999a <xTaskRemoveFromEventList+0x6e>
		xReturn = pdFALSE;
 800999c:	2000      	movs	r0, #0
}
 800999e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099a0:	20000360 	.word	0x20000360
 80099a4:	20000368 	.word	0x20000368
 80099a8:	200002c8 	.word	0x200002c8
 80099ac:	200002bc 	.word	0x200002bc
 80099b0:	200003e0 	.word	0x200003e0
 80099b4:	2000039c 	.word	0x2000039c

080099b8 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80099b8:	4a03      	ldr	r2, [pc, #12]	; (80099c8 <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 80099ba:	4b04      	ldr	r3, [pc, #16]	; (80099cc <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80099bc:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	e9c0 2300 	strd	r2, r3, [r0]
}
 80099c4:	4770      	bx	lr
 80099c6:	bf00      	nop
 80099c8:	20000398 	.word	0x20000398
 80099cc:	200003dc 	.word	0x200003dc

080099d0 <xTaskCheckForTimeOut>:
{
 80099d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 80099d2:	b340      	cbz	r0, 8009a26 <xTaskCheckForTimeOut+0x56>
	configASSERT( pxTicksToWait );
 80099d4:	b1f1      	cbz	r1, 8009a14 <xTaskCheckForTimeOut+0x44>
 80099d6:	460d      	mov	r5, r1
 80099d8:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80099da:	f000 f9cb 	bl	8009d74 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80099de:	f8df c078 	ldr.w	ip, [pc, #120]	; 8009a58 <xTaskCheckForTimeOut+0x88>
			if( *pxTicksToWait == portMAX_DELAY )
 80099e2:	682b      	ldr	r3, [r5, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80099e4:	6867      	ldr	r7, [r4, #4]
		const TickType_t xConstTickCount = xTickCount;
 80099e6:	f8dc 6000 	ldr.w	r6, [ip]
			if( *pxTicksToWait == portMAX_DELAY )
 80099ea:	1c59      	adds	r1, r3, #1
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80099ec:	eba6 0207 	sub.w	r2, r6, r7
			if( *pxTicksToWait == portMAX_DELAY )
 80099f0:	d022      	beq.n	8009a38 <xTaskCheckForTimeOut+0x68>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80099f2:	4818      	ldr	r0, [pc, #96]	; (8009a54 <xTaskCheckForTimeOut+0x84>)
 80099f4:	6821      	ldr	r1, [r4, #0]
 80099f6:	f8d0 e000 	ldr.w	lr, [r0]
 80099fa:	4571      	cmp	r1, lr
 80099fc:	d001      	beq.n	8009a02 <xTaskCheckForTimeOut+0x32>
 80099fe:	42b7      	cmp	r7, r6
 8009a00:	d925      	bls.n	8009a4e <xTaskCheckForTimeOut+0x7e>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009a02:	4293      	cmp	r3, r2
 8009a04:	d81a      	bhi.n	8009a3c <xTaskCheckForTimeOut+0x6c>
			*pxTicksToWait = 0;
 8009a06:	2300      	movs	r3, #0
			xReturn = pdTRUE;
 8009a08:	2601      	movs	r6, #1
			*pxTicksToWait = 0;
 8009a0a:	602b      	str	r3, [r5, #0]
	taskEXIT_CRITICAL();
 8009a0c:	f000 f9d4 	bl	8009db8 <vPortExitCritical>
}
 8009a10:	4630      	mov	r0, r6
 8009a12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a18:	f383 8811 	msr	BASEPRI, r3
 8009a1c:	f3bf 8f6f 	isb	sy
 8009a20:	f3bf 8f4f 	dsb	sy
 8009a24:	e7fe      	b.n	8009a24 <xTaskCheckForTimeOut+0x54>
 8009a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a2a:	f383 8811 	msr	BASEPRI, r3
 8009a2e:	f3bf 8f6f 	isb	sy
 8009a32:	f3bf 8f4f 	dsb	sy
 8009a36:	e7fe      	b.n	8009a36 <xTaskCheckForTimeOut+0x66>
				xReturn = pdFALSE;
 8009a38:	2600      	movs	r6, #0
 8009a3a:	e7e7      	b.n	8009a0c <xTaskCheckForTimeOut+0x3c>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009a3c:	6800      	ldr	r0, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009a3e:	f8dc 1000 	ldr.w	r1, [ip]
			*pxTicksToWait -= xElapsedTime;
 8009a42:	1a9b      	subs	r3, r3, r2
 8009a44:	602b      	str	r3, [r5, #0]
			xReturn = pdFALSE;
 8009a46:	2600      	movs	r6, #0
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009a48:	e9c4 0100 	strd	r0, r1, [r4]
 8009a4c:	e7de      	b.n	8009a0c <xTaskCheckForTimeOut+0x3c>
			xReturn = pdTRUE;
 8009a4e:	2601      	movs	r6, #1
 8009a50:	e7dc      	b.n	8009a0c <xTaskCheckForTimeOut+0x3c>
 8009a52:	bf00      	nop
 8009a54:	20000398 	.word	0x20000398
 8009a58:	200003dc 	.word	0x200003dc

08009a5c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8009a5c:	2201      	movs	r2, #1
 8009a5e:	4b01      	ldr	r3, [pc, #4]	; (8009a64 <vTaskMissedYield+0x8>)
 8009a60:	601a      	str	r2, [r3, #0]
}
 8009a62:	4770      	bx	lr
 8009a64:	200003e0 	.word	0x200003e0

08009a68 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8009a68:	4b05      	ldr	r3, [pc, #20]	; (8009a80 <xTaskGetSchedulerState+0x18>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	b133      	cbz	r3, 8009a7c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a6e:	4b05      	ldr	r3, [pc, #20]	; (8009a84 <xTaskGetSchedulerState+0x1c>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8009a74:	bf0c      	ite	eq
 8009a76:	2002      	moveq	r0, #2
 8009a78:	2000      	movne	r0, #0
 8009a7a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009a7c:	2001      	movs	r0, #1
	}
 8009a7e:	4770      	bx	lr
 8009a80:	200003b0 	.word	0x200003b0
 8009a84:	20000360 	.word	0x20000360

08009a88 <xTaskPriorityInherit>:
	{
 8009a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 8009a8c:	4607      	mov	r7, r0
 8009a8e:	b1c8      	cbz	r0, 8009ac4 <xTaskPriorityInherit+0x3c>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009a90:	4d25      	ldr	r5, [pc, #148]	; (8009b28 <xTaskPriorityInherit+0xa0>)
 8009a92:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8009a94:	6829      	ldr	r1, [r5, #0]
 8009a96:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8009a98:	428a      	cmp	r2, r1
 8009a9a:	d215      	bcs.n	8009ac8 <xTaskPriorityInherit+0x40>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009a9c:	6981      	ldr	r1, [r0, #24]
 8009a9e:	2900      	cmp	r1, #0
 8009aa0:	db04      	blt.n	8009aac <xTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009aa2:	6829      	ldr	r1, [r5, #0]
 8009aa4:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8009aa6:	f1c1 0107 	rsb	r1, r1, #7
 8009aaa:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009aac:	4e1f      	ldr	r6, [pc, #124]	; (8009b2c <xTaskPriorityInherit+0xa4>)
 8009aae:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8009ab2:	6979      	ldr	r1, [r7, #20]
 8009ab4:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8009ab8:	4291      	cmp	r1, r2
 8009aba:	d00e      	beq.n	8009ada <xTaskPriorityInherit+0x52>
				xReturn = pdTRUE;
 8009abc:	2001      	movs	r0, #1
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009abe:	682a      	ldr	r2, [r5, #0]
 8009ac0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009ac2:	62fa      	str	r2, [r7, #44]	; 0x2c
	}
 8009ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009ac8:	682a      	ldr	r2, [r5, #0]
 8009aca:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8009acc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009ace:	4298      	cmp	r0, r3
 8009ad0:	bf2c      	ite	cs
 8009ad2:	2000      	movcs	r0, #0
 8009ad4:	2001      	movcc	r0, #1
	}
 8009ad6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009ada:	f107 0804 	add.w	r8, r7, #4
 8009ade:	4640      	mov	r0, r8
 8009ae0:	f7fe fcfa 	bl	80084d8 <uxListRemove>
 8009ae4:	b968      	cbnz	r0, 8009b02 <xTaskPriorityInherit+0x7a>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8009ae6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009ae8:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8009aec:	009b      	lsls	r3, r3, #2
 8009aee:	58f3      	ldr	r3, [r6, r3]
 8009af0:	b93b      	cbnz	r3, 8009b02 <xTaskPriorityInherit+0x7a>
 8009af2:	2301      	movs	r3, #1
 8009af4:	4a0e      	ldr	r2, [pc, #56]	; (8009b30 <xTaskPriorityInherit+0xa8>)
 8009af6:	408b      	lsls	r3, r1
 8009af8:	6811      	ldr	r1, [r2, #0]
 8009afa:	ea21 0103 	bic.w	r1, r1, r3
 8009afe:	6011      	str	r1, [r2, #0]
 8009b00:	e000      	b.n	8009b04 <xTaskPriorityInherit+0x7c>
 8009b02:	4a0b      	ldr	r2, [pc, #44]	; (8009b30 <xTaskPriorityInherit+0xa8>)
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009b04:	2401      	movs	r4, #1
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009b06:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009b08:	6815      	ldr	r5, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009b0a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009b0c:	4641      	mov	r1, r8
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009b0e:	62f8      	str	r0, [r7, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009b10:	fa04 f300 	lsl.w	r3, r4, r0
 8009b14:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009b18:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 8009b1c:	432b      	orrs	r3, r5
 8009b1e:	6013      	str	r3, [r2, #0]
 8009b20:	f7fe fcb2 	bl	8008488 <vListInsertEnd>
				xReturn = pdTRUE;
 8009b24:	4620      	mov	r0, r4
 8009b26:	e7cd      	b.n	8009ac4 <xTaskPriorityInherit+0x3c>
 8009b28:	200002bc 	.word	0x200002bc
 8009b2c:	200002c8 	.word	0x200002c8
 8009b30:	20000368 	.word	0x20000368

08009b34 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8009b34:	b168      	cbz	r0, 8009b52 <xTaskPriorityDisinherit+0x1e>
	{
 8009b36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			configASSERT( pxTCB == pxCurrentTCB );
 8009b38:	4b29      	ldr	r3, [pc, #164]	; (8009be0 <xTaskPriorityDisinherit+0xac>)
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	4283      	cmp	r3, r0
 8009b3e:	d00a      	beq.n	8009b56 <xTaskPriorityDisinherit+0x22>
 8009b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b44:	f383 8811 	msr	BASEPRI, r3
 8009b48:	f3bf 8f6f 	isb	sy
 8009b4c:	f3bf 8f4f 	dsb	sy
 8009b50:	e7fe      	b.n	8009b50 <xTaskPriorityDisinherit+0x1c>
	BaseType_t xReturn = pdFALSE;
 8009b52:	2000      	movs	r0, #0
	}
 8009b54:	4770      	bx	lr
			configASSERT( pxTCB->uxMutexesHeld );
 8009b56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b58:	b943      	cbnz	r3, 8009b6c <xTaskPriorityDisinherit+0x38>
 8009b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b5e:	f383 8811 	msr	BASEPRI, r3
 8009b62:	f3bf 8f6f 	isb	sy
 8009b66:	f3bf 8f4f 	dsb	sy
 8009b6a:	e7fe      	b.n	8009b6a <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009b6c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8009b6e:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 8009b70:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009b72:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8009b74:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009b76:	d000      	beq.n	8009b7a <xTaskPriorityDisinherit+0x46>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009b78:	b10b      	cbz	r3, 8009b7e <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 8009b7a:	2000      	movs	r0, #0
	}
 8009b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b7e:	1d07      	adds	r7, r0, #4
 8009b80:	4604      	mov	r4, r0
 8009b82:	4638      	mov	r0, r7
 8009b84:	f7fe fca8 	bl	80084d8 <uxListRemove>
 8009b88:	b1b8      	cbz	r0, 8009bba <xTaskPriorityDisinherit+0x86>
 8009b8a:	4816      	ldr	r0, [pc, #88]	; (8009be4 <xTaskPriorityDisinherit+0xb0>)
 8009b8c:	4b16      	ldr	r3, [pc, #88]	; (8009be8 <xTaskPriorityDisinherit+0xb4>)
					prvAddTaskToReadyList( pxTCB );
 8009b8e:	2501      	movs	r5, #1
 8009b90:	f04f 0c14 	mov.w	ip, #20
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009b94:	6c62      	ldr	r2, [r4, #68]	; 0x44
					prvAddTaskToReadyList( pxTCB );
 8009b96:	f8d3 e000 	ldr.w	lr, [r3]
 8009b9a:	fa05 f602 	lsl.w	r6, r5, r2
 8009b9e:	4639      	mov	r1, r7
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ba0:	f1c2 0707 	rsb	r7, r2, #7
					prvAddTaskToReadyList( pxTCB );
 8009ba4:	ea46 060e 	orr.w	r6, r6, lr
 8009ba8:	fb0c 0002 	mla	r0, ip, r2, r0
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009bac:	62e2      	str	r2, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009bae:	61a7      	str	r7, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8009bb0:	601e      	str	r6, [r3, #0]
 8009bb2:	f7fe fc69 	bl	8008488 <vListInsertEnd>
					xReturn = pdTRUE;
 8009bb6:	4628      	mov	r0, r5
	}
 8009bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009bba:	2314      	movs	r3, #20
 8009bbc:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8009bbe:	4809      	ldr	r0, [pc, #36]	; (8009be4 <xTaskPriorityDisinherit+0xb0>)
 8009bc0:	fb03 f305 	mul.w	r3, r3, r5
 8009bc4:	58c3      	ldr	r3, [r0, r3]
 8009bc6:	b10b      	cbz	r3, 8009bcc <xTaskPriorityDisinherit+0x98>
 8009bc8:	4b07      	ldr	r3, [pc, #28]	; (8009be8 <xTaskPriorityDisinherit+0xb4>)
 8009bca:	e7e0      	b.n	8009b8e <xTaskPriorityDisinherit+0x5a>
 8009bcc:	2201      	movs	r2, #1
 8009bce:	4b06      	ldr	r3, [pc, #24]	; (8009be8 <xTaskPriorityDisinherit+0xb4>)
 8009bd0:	fa02 f505 	lsl.w	r5, r2, r5
 8009bd4:	681a      	ldr	r2, [r3, #0]
 8009bd6:	ea22 0205 	bic.w	r2, r2, r5
 8009bda:	601a      	str	r2, [r3, #0]
 8009bdc:	e7d7      	b.n	8009b8e <xTaskPriorityDisinherit+0x5a>
 8009bde:	bf00      	nop
 8009be0:	200002bc 	.word	0x200002bc
 8009be4:	200002c8 	.word	0x200002c8
 8009be8:	20000368 	.word	0x20000368

08009bec <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 8009bec:	b1a8      	cbz	r0, 8009c1a <vTaskPriorityDisinheritAfterTimeout+0x2e>
	{
 8009bee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			configASSERT( pxTCB->uxMutexesHeld );
 8009bf0:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8009bf2:	b944      	cbnz	r4, 8009c06 <vTaskPriorityDisinheritAfterTimeout+0x1a>
 8009bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bf8:	f383 8811 	msr	BASEPRI, r3
 8009bfc:	f3bf 8f6f 	isb	sy
 8009c00:	f3bf 8f4f 	dsb	sy
 8009c04:	e7fe      	b.n	8009c04 <vTaskPriorityDisinheritAfterTimeout+0x18>
 8009c06:	6c43      	ldr	r3, [r0, #68]	; 0x44
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009c08:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8009c0a:	428b      	cmp	r3, r1
 8009c0c:	bf38      	it	cc
 8009c0e:	460b      	movcc	r3, r1
 8009c10:	429a      	cmp	r2, r3
 8009c12:	d001      	beq.n	8009c18 <vTaskPriorityDisinheritAfterTimeout+0x2c>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009c14:	2c01      	cmp	r4, #1
 8009c16:	d001      	beq.n	8009c1c <vTaskPriorityDisinheritAfterTimeout+0x30>
	}
 8009c18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c1a:	4770      	bx	lr
					configASSERT( pxTCB != pxCurrentTCB );
 8009c1c:	491f      	ldr	r1, [pc, #124]	; (8009c9c <vTaskPriorityDisinheritAfterTimeout+0xb0>)
 8009c1e:	6809      	ldr	r1, [r1, #0]
 8009c20:	4281      	cmp	r1, r0
 8009c22:	d022      	beq.n	8009c6a <vTaskPriorityDisinheritAfterTimeout+0x7e>
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009c24:	2514      	movs	r5, #20
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009c26:	6981      	ldr	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009c28:	4e1d      	ldr	r6, [pc, #116]	; (8009ca0 <vTaskPriorityDisinheritAfterTimeout+0xb4>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009c2a:	2900      	cmp	r1, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009c2c:	fb05 6202 	mla	r2, r5, r2, r6
					pxTCB->uxPriority = uxPriorityToUse;
 8009c30:	62c3      	str	r3, [r0, #44]	; 0x2c
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c32:	bfa4      	itt	ge
 8009c34:	f1c3 0307 	rsbge	r3, r3, #7
 8009c38:	6183      	strge	r3, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009c3a:	6943      	ldr	r3, [r0, #20]
 8009c3c:	4293      	cmp	r3, r2
 8009c3e:	d1eb      	bne.n	8009c18 <vTaskPriorityDisinheritAfterTimeout+0x2c>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009c40:	1d07      	adds	r7, r0, #4
 8009c42:	4604      	mov	r4, r0
 8009c44:	4638      	mov	r0, r7
 8009c46:	f7fe fc47 	bl	80084d8 <uxListRemove>
 8009c4a:	b1b8      	cbz	r0, 8009c7c <vTaskPriorityDisinheritAfterTimeout+0x90>
 8009c4c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8009c4e:	4b15      	ldr	r3, [pc, #84]	; (8009ca4 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
						prvAddTaskToReadyList( pxTCB );
 8009c50:	2201      	movs	r2, #1
 8009c52:	2414      	movs	r4, #20
 8009c54:	681d      	ldr	r5, [r3, #0]
 8009c56:	4082      	lsls	r2, r0
 8009c58:	432a      	orrs	r2, r5
 8009c5a:	4639      	mov	r1, r7
 8009c5c:	fb04 6000 	mla	r0, r4, r0, r6
 8009c60:	601a      	str	r2, [r3, #0]
	}
 8009c62:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
						prvAddTaskToReadyList( pxTCB );
 8009c66:	f7fe bc0f 	b.w	8008488 <vListInsertEnd>
 8009c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c6e:	f383 8811 	msr	BASEPRI, r3
 8009c72:	f3bf 8f6f 	isb	sy
 8009c76:	f3bf 8f4f 	dsb	sy
 8009c7a:	e7fe      	b.n	8009c7a <vTaskPriorityDisinheritAfterTimeout+0x8e>
 8009c7c:	2201      	movs	r2, #1
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009c7e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8009c80:	fb05 f500 	mul.w	r5, r5, r0
 8009c84:	5973      	ldr	r3, [r6, r5]
 8009c86:	fa02 f100 	lsl.w	r1, r2, r0
 8009c8a:	b10b      	cbz	r3, 8009c90 <vTaskPriorityDisinheritAfterTimeout+0xa4>
 8009c8c:	4b05      	ldr	r3, [pc, #20]	; (8009ca4 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
 8009c8e:	e7df      	b.n	8009c50 <vTaskPriorityDisinheritAfterTimeout+0x64>
 8009c90:	4b04      	ldr	r3, [pc, #16]	; (8009ca4 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
 8009c92:	681a      	ldr	r2, [r3, #0]
 8009c94:	ea22 0201 	bic.w	r2, r2, r1
 8009c98:	601a      	str	r2, [r3, #0]
 8009c9a:	e7d9      	b.n	8009c50 <vTaskPriorityDisinheritAfterTimeout+0x64>
 8009c9c:	200002bc 	.word	0x200002bc
 8009ca0:	200002c8 	.word	0x200002c8
 8009ca4:	20000368 	.word	0x20000368

08009ca8 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8009ca8:	4b04      	ldr	r3, [pc, #16]	; (8009cbc <pvTaskIncrementMutexHeldCount+0x14>)
 8009caa:	681a      	ldr	r2, [r3, #0]
 8009cac:	b11a      	cbz	r2, 8009cb6 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8009cae:	6819      	ldr	r1, [r3, #0]
 8009cb0:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 8009cb2:	3201      	adds	r2, #1
 8009cb4:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 8009cb6:	6818      	ldr	r0, [r3, #0]
	}
 8009cb8:	4770      	bx	lr
 8009cba:	bf00      	nop
 8009cbc:	200002bc 	.word	0x200002bc

08009cc0 <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
volatile uint32_t ulDummy = 0UL;
 8009cc0:	2200      	movs	r2, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009cc2:	4b0e      	ldr	r3, [pc, #56]	; (8009cfc <prvTaskExitError+0x3c>)
{
 8009cc4:	b082      	sub	sp, #8
	configASSERT( uxCriticalNesting == ~0UL );
 8009cc6:	681b      	ldr	r3, [r3, #0]
volatile uint32_t ulDummy = 0UL;
 8009cc8:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8009cca:	3301      	adds	r3, #1
 8009ccc:	d008      	beq.n	8009ce0 <prvTaskExitError+0x20>
 8009cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cd2:	f383 8811 	msr	BASEPRI, r3
 8009cd6:	f3bf 8f6f 	isb	sy
 8009cda:	f3bf 8f4f 	dsb	sy
 8009cde:	e7fe      	b.n	8009cde <prvTaskExitError+0x1e>
 8009ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce4:	f383 8811 	msr	BASEPRI, r3
 8009ce8:	f3bf 8f6f 	isb	sy
 8009cec:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009cf0:	9b01      	ldr	r3, [sp, #4]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d0fc      	beq.n	8009cf0 <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009cf6:	b002      	add	sp, #8
 8009cf8:	4770      	bx	lr
 8009cfa:	bf00      	nop
 8009cfc:	20000010 	.word	0x20000010

08009d00 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8009d00:	4806      	ldr	r0, [pc, #24]	; (8009d1c <prvPortStartFirstTask+0x1c>)
 8009d02:	6800      	ldr	r0, [r0, #0]
 8009d04:	6800      	ldr	r0, [r0, #0]
 8009d06:	f380 8808 	msr	MSP, r0
 8009d0a:	b662      	cpsie	i
 8009d0c:	b661      	cpsie	f
 8009d0e:	f3bf 8f4f 	dsb	sy
 8009d12:	f3bf 8f6f 	isb	sy
 8009d16:	df00      	svc	0
 8009d18:	bf00      	nop
 8009d1a:	0000      	.short	0x0000
 8009d1c:	e000ed08 	.word	0xe000ed08

08009d20 <pxPortInitialiseStack>:
{
 8009d20:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009d22:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009d26:	4b06      	ldr	r3, [pc, #24]	; (8009d40 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009d28:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009d2c:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009d30:	e940 1402 	strd	r1, r4, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009d34:	f840 3c0c 	str.w	r3, [r0, #-12]
}
 8009d38:	bc10      	pop	{r4}
 8009d3a:	3840      	subs	r0, #64	; 0x40
 8009d3c:	4770      	bx	lr
 8009d3e:	bf00      	nop
 8009d40:	08009cc1 	.word	0x08009cc1
	...

08009d50 <SVC_Handler>:
	__asm volatile (
 8009d50:	4b07      	ldr	r3, [pc, #28]	; (8009d70 <pxCurrentTCBConst2>)
 8009d52:	6819      	ldr	r1, [r3, #0]
 8009d54:	6808      	ldr	r0, [r1, #0]
 8009d56:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009d5a:	f380 8809 	msr	PSP, r0
 8009d5e:	f3bf 8f6f 	isb	sy
 8009d62:	f04f 0000 	mov.w	r0, #0
 8009d66:	f380 8811 	msr	BASEPRI, r0
 8009d6a:	f04e 0e0d 	orr.w	lr, lr, #13
 8009d6e:	4770      	bx	lr

08009d70 <pxCurrentTCBConst2>:
 8009d70:	200002bc 	.word	0x200002bc

08009d74 <vPortEnterCritical>:
 8009d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d78:	f383 8811 	msr	BASEPRI, r3
 8009d7c:	f3bf 8f6f 	isb	sy
 8009d80:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009d84:	4a0a      	ldr	r2, [pc, #40]	; (8009db0 <vPortEnterCritical+0x3c>)
 8009d86:	6813      	ldr	r3, [r2, #0]
 8009d88:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009d8a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8009d8c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8009d8e:	d000      	beq.n	8009d92 <vPortEnterCritical+0x1e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 8009d90:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009d92:	4b08      	ldr	r3, [pc, #32]	; (8009db4 <vPortEnterCritical+0x40>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009d9a:	d0f9      	beq.n	8009d90 <vPortEnterCritical+0x1c>
 8009d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009da0:	f383 8811 	msr	BASEPRI, r3
 8009da4:	f3bf 8f6f 	isb	sy
 8009da8:	f3bf 8f4f 	dsb	sy
 8009dac:	e7fe      	b.n	8009dac <vPortEnterCritical+0x38>
 8009dae:	bf00      	nop
 8009db0:	20000010 	.word	0x20000010
 8009db4:	e000ed04 	.word	0xe000ed04

08009db8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8009db8:	4a08      	ldr	r2, [pc, #32]	; (8009ddc <vPortExitCritical+0x24>)
 8009dba:	6813      	ldr	r3, [r2, #0]
 8009dbc:	b943      	cbnz	r3, 8009dd0 <vPortExitCritical+0x18>
 8009dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dc2:	f383 8811 	msr	BASEPRI, r3
 8009dc6:	f3bf 8f6f 	isb	sy
 8009dca:	f3bf 8f4f 	dsb	sy
 8009dce:	e7fe      	b.n	8009dce <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8009dd0:	3b01      	subs	r3, #1
 8009dd2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009dd4:	b90b      	cbnz	r3, 8009dda <vPortExitCritical+0x22>
	__asm volatile
 8009dd6:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8009dda:	4770      	bx	lr
 8009ddc:	20000010 	.word	0x20000010

08009de0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009de0:	f3ef 8009 	mrs	r0, PSP
 8009de4:	f3bf 8f6f 	isb	sy
 8009de8:	4b0d      	ldr	r3, [pc, #52]	; (8009e20 <pxCurrentTCBConst>)
 8009dea:	681a      	ldr	r2, [r3, #0]
 8009dec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009df0:	6010      	str	r0, [r2, #0]
 8009df2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009df6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009dfa:	f380 8811 	msr	BASEPRI, r0
 8009dfe:	f7ff fd07 	bl	8009810 <vTaskSwitchContext>
 8009e02:	f04f 0000 	mov.w	r0, #0
 8009e06:	f380 8811 	msr	BASEPRI, r0
 8009e0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009e0e:	6819      	ldr	r1, [r3, #0]
 8009e10:	6808      	ldr	r0, [r1, #0]
 8009e12:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009e16:	f380 8809 	msr	PSP, r0
 8009e1a:	f3bf 8f6f 	isb	sy
 8009e1e:	4770      	bx	lr

08009e20 <pxCurrentTCBConst>:
 8009e20:	200002bc 	.word	0x200002bc

08009e24 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009e24:	b508      	push	{r3, lr}
	__asm volatile
 8009e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e2a:	f383 8811 	msr	BASEPRI, r3
 8009e2e:	f3bf 8f6f 	isb	sy
 8009e32:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009e36:	f7ff fb91 	bl	800955c <xTaskIncrementTick>
 8009e3a:	b118      	cbz	r0, 8009e44 <SysTick_Handler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009e3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e40:	4b02      	ldr	r3, [pc, #8]	; (8009e4c <SysTick_Handler+0x28>)
 8009e42:	601a      	str	r2, [r3, #0]
	__asm volatile
 8009e44:	2300      	movs	r3, #0
 8009e46:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8009e4a:	bd08      	pop	{r3, pc}
 8009e4c:	e000ed04 	.word	0xe000ed04

08009e50 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009e50:	2300      	movs	r3, #0
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009e52:	2107      	movs	r1, #7
{
 8009e54:	b410      	push	{r4}
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009e56:	4a08      	ldr	r2, [pc, #32]	; (8009e78 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009e58:	4c08      	ldr	r4, [pc, #32]	; (8009e7c <vPortSetupTimerInterrupt+0x2c>)
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009e5a:	4809      	ldr	r0, [pc, #36]	; (8009e80 <vPortSetupTimerInterrupt+0x30>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009e5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009e5e:	6023      	str	r3, [r4, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009e60:	6803      	ldr	r3, [r0, #0]
 8009e62:	4c08      	ldr	r4, [pc, #32]	; (8009e84 <vPortSetupTimerInterrupt+0x34>)
 8009e64:	4808      	ldr	r0, [pc, #32]	; (8009e88 <vPortSetupTimerInterrupt+0x38>)
 8009e66:	fba4 4303 	umull	r4, r3, r4, r3
 8009e6a:	099b      	lsrs	r3, r3, #6
 8009e6c:	3b01      	subs	r3, #1
 8009e6e:	6003      	str	r3, [r0, #0]
}
 8009e70:	bc10      	pop	{r4}
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009e72:	6011      	str	r1, [r2, #0]
}
 8009e74:	4770      	bx	lr
 8009e76:	bf00      	nop
 8009e78:	e000e010 	.word	0xe000e010
 8009e7c:	e000e018 	.word	0xe000e018
 8009e80:	20000000 	.word	0x20000000
 8009e84:	10624dd3 	.word	0x10624dd3
 8009e88:	e000e014 	.word	0xe000e014

08009e8c <xPortStartScheduler>:
{
 8009e8c:	b530      	push	{r4, r5, lr}
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009e8e:	25ff      	movs	r5, #255	; 0xff
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009e90:	2407      	movs	r4, #7
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009e92:	4b27      	ldr	r3, [pc, #156]	; (8009f30 <xPortStartScheduler+0xa4>)
{
 8009e94:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009e96:	781a      	ldrb	r2, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009e98:	4926      	ldr	r1, [pc, #152]	; (8009f34 <xPortStartScheduler+0xa8>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009e9a:	b2d2      	uxtb	r2, r2
 8009e9c:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009e9e:	701d      	strb	r5, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009ea0:	781b      	ldrb	r3, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009ea2:	4825      	ldr	r0, [pc, #148]	; (8009f38 <xPortStartScheduler+0xac>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009ea4:	b2db      	uxtb	r3, r3
 8009ea6:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009eaa:	f89d 3003 	ldrb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009eae:	f89d 2003 	ldrb.w	r2, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009eb2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009eb6:	700b      	strb	r3, [r1, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009eb8:	0611      	lsls	r1, r2, #24
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009eba:	6004      	str	r4, [r0, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009ebc:	d510      	bpl.n	8009ee0 <xPortStartScheduler+0x54>
 8009ebe:	2306      	movs	r3, #6
 8009ec0:	e000      	b.n	8009ec4 <xPortStartScheduler+0x38>
 8009ec2:	460b      	mov	r3, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009ec4:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8009ec8:	1e59      	subs	r1, r3, #1
 8009eca:	0052      	lsls	r2, r2, #1
 8009ecc:	b2d2      	uxtb	r2, r2
 8009ece:	f88d 2003 	strb.w	r2, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009ed2:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8009ed6:	0612      	lsls	r2, r2, #24
 8009ed8:	d4f3      	bmi.n	8009ec2 <xPortStartScheduler+0x36>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009eda:	2b03      	cmp	r3, #3
 8009edc:	6003      	str	r3, [r0, #0]
 8009ede:	d008      	beq.n	8009ef2 <xPortStartScheduler+0x66>
	__asm volatile
 8009ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ee4:	f383 8811 	msr	BASEPRI, r3
 8009ee8:	f3bf 8f6f 	isb	sy
 8009eec:	f3bf 8f4f 	dsb	sy
 8009ef0:	e7fe      	b.n	8009ef0 <xPortStartScheduler+0x64>
	uxCriticalNesting = 0;
 8009ef2:	2400      	movs	r4, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009ef4:	9901      	ldr	r1, [sp, #4]
 8009ef6:	4d0e      	ldr	r5, [pc, #56]	; (8009f30 <xPortStartScheduler+0xa4>)
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009ef8:	021b      	lsls	r3, r3, #8
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009efa:	4a10      	ldr	r2, [pc, #64]	; (8009f3c <xPortStartScheduler+0xb0>)
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009efc:	b2c9      	uxtb	r1, r1
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009efe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009f02:	6003      	str	r3, [r0, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009f04:	7029      	strb	r1, [r5, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009f06:	6813      	ldr	r3, [r2, #0]
 8009f08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009f0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009f0e:	6813      	ldr	r3, [r2, #0]
 8009f10:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009f14:	6013      	str	r3, [r2, #0]
	vPortSetupTimerInterrupt();
 8009f16:	f7ff ff9b 	bl	8009e50 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8009f1a:	4b09      	ldr	r3, [pc, #36]	; (8009f40 <xPortStartScheduler+0xb4>)
 8009f1c:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 8009f1e:	f7ff feef 	bl	8009d00 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8009f22:	f7ff fc75 	bl	8009810 <vTaskSwitchContext>
	prvTaskExitError();
 8009f26:	f7ff fecb 	bl	8009cc0 <prvTaskExitError>
}
 8009f2a:	4620      	mov	r0, r4
 8009f2c:	b003      	add	sp, #12
 8009f2e:	bd30      	pop	{r4, r5, pc}
 8009f30:	e000e400 	.word	0xe000e400
 8009f34:	200003e4 	.word	0x200003e4
 8009f38:	200003e8 	.word	0x200003e8
 8009f3c:	e000ed20 	.word	0xe000ed20
 8009f40:	20000010 	.word	0x20000010

08009f44 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009f44:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009f48:	2b0f      	cmp	r3, #15
 8009f4a:	d90e      	bls.n	8009f6a <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009f4c:	4910      	ldr	r1, [pc, #64]	; (8009f90 <vPortValidateInterruptPriority+0x4c>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009f4e:	4a11      	ldr	r2, [pc, #68]	; (8009f94 <vPortValidateInterruptPriority+0x50>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009f50:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009f52:	7812      	ldrb	r2, [r2, #0]
 8009f54:	429a      	cmp	r2, r3
 8009f56:	d908      	bls.n	8009f6a <vPortValidateInterruptPriority+0x26>
 8009f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f5c:	f383 8811 	msr	BASEPRI, r3
 8009f60:	f3bf 8f6f 	isb	sy
 8009f64:	f3bf 8f4f 	dsb	sy
 8009f68:	e7fe      	b.n	8009f68 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009f6a:	4b0b      	ldr	r3, [pc, #44]	; (8009f98 <vPortValidateInterruptPriority+0x54>)
 8009f6c:	4a0b      	ldr	r2, [pc, #44]	; (8009f9c <vPortValidateInterruptPriority+0x58>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	6812      	ldr	r2, [r2, #0]
 8009f72:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009f76:	4293      	cmp	r3, r2
 8009f78:	d908      	bls.n	8009f8c <vPortValidateInterruptPriority+0x48>
 8009f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f7e:	f383 8811 	msr	BASEPRI, r3
 8009f82:	f3bf 8f6f 	isb	sy
 8009f86:	f3bf 8f4f 	dsb	sy
 8009f8a:	e7fe      	b.n	8009f8a <vPortValidateInterruptPriority+0x46>
	}
 8009f8c:	4770      	bx	lr
 8009f8e:	bf00      	nop
 8009f90:	e000e3f0 	.word	0xe000e3f0
 8009f94:	200003e4 	.word	0x200003e4
 8009f98:	e000ed0c 	.word	0xe000ed0c
 8009f9c:	200003e8 	.word	0x200003e8

08009fa0 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009fa0:	b430      	push	{r4, r5}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009fa2:	4b11      	ldr	r3, [pc, #68]	; (8009fe8 <prvInsertBlockIntoFreeList+0x48>)
 8009fa4:	681a      	ldr	r2, [r3, #0]
 8009fa6:	4282      	cmp	r2, r0
 8009fa8:	d201      	bcs.n	8009fae <prvInsertBlockIntoFreeList+0xe>
 8009faa:	4613      	mov	r3, r2
 8009fac:	e7fa      	b.n	8009fa4 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009fae:	685c      	ldr	r4, [r3, #4]
 8009fb0:	1919      	adds	r1, r3, r4
 8009fb2:	4288      	cmp	r0, r1
 8009fb4:	d103      	bne.n	8009fbe <prvInsertBlockIntoFreeList+0x1e>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009fb6:	6841      	ldr	r1, [r0, #4]
 8009fb8:	4618      	mov	r0, r3
 8009fba:	4421      	add	r1, r4
 8009fbc:	6059      	str	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009fbe:	6844      	ldr	r4, [r0, #4]
 8009fc0:	1901      	adds	r1, r0, r4
 8009fc2:	428a      	cmp	r2, r1
 8009fc4:	d109      	bne.n	8009fda <prvInsertBlockIntoFreeList+0x3a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009fc6:	4909      	ldr	r1, [pc, #36]	; (8009fec <prvInsertBlockIntoFreeList+0x4c>)
 8009fc8:	6809      	ldr	r1, [r1, #0]
 8009fca:	428a      	cmp	r2, r1
 8009fcc:	d005      	beq.n	8009fda <prvInsertBlockIntoFreeList+0x3a>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009fce:	e9d2 5100 	ldrd	r5, r1, [r2]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009fd2:	4421      	add	r1, r4
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009fd4:	e9c0 5100 	strd	r5, r1, [r0]
 8009fd8:	e000      	b.n	8009fdc <prvInsertBlockIntoFreeList+0x3c>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009fda:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009fdc:	4298      	cmp	r0, r3
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009fde:	bf18      	it	ne
 8009fe0:	6018      	strne	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009fe2:	bc30      	pop	{r4, r5}
 8009fe4:	4770      	bx	lr
 8009fe6:	bf00      	nop
 8009fe8:	20003ffc 	.word	0x20003ffc
 8009fec:	200003ec 	.word	0x200003ec

08009ff0 <pvPortMalloc>:
{
 8009ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxEnd == NULL )
 8009ff4:	4f41      	ldr	r7, [pc, #260]	; (800a0fc <pvPortMalloc+0x10c>)
{
 8009ff6:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8009ff8:	f7ff faa8 	bl	800954c <vTaskSuspendAll>
		if( pxEnd == NULL )
 8009ffc:	683a      	ldr	r2, [r7, #0]
 8009ffe:	2a00      	cmp	r2, #0
 800a000:	d05a      	beq.n	800a0b8 <pvPortMalloc+0xc8>
 800a002:	4b3f      	ldr	r3, [pc, #252]	; (800a100 <pvPortMalloc+0x110>)
 800a004:	681e      	ldr	r6, [r3, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a006:	4234      	tst	r4, r6
 800a008:	d150      	bne.n	800a0ac <pvPortMalloc+0xbc>
			if( xWantedSize > 0 )
 800a00a:	2c00      	cmp	r4, #0
 800a00c:	d04e      	beq.n	800a0ac <pvPortMalloc+0xbc>
				xWantedSize += xHeapStructSize;
 800a00e:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a012:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a014:	bf1c      	itt	ne
 800a016:	f023 0307 	bicne.w	r3, r3, #7
 800a01a:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d045      	beq.n	800a0ac <pvPortMalloc+0xbc>
 800a020:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 800a114 <pvPortMalloc+0x124>
 800a024:	f8d8 5000 	ldr.w	r5, [r8]
 800a028:	429d      	cmp	r5, r3
 800a02a:	d33f      	bcc.n	800a0ac <pvPortMalloc+0xbc>
				pxBlock = xStart.pxNextFreeBlock;
 800a02c:	4835      	ldr	r0, [pc, #212]	; (800a104 <pvPortMalloc+0x114>)
 800a02e:	6804      	ldr	r4, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a030:	e006      	b.n	800a040 <pvPortMalloc+0x50>
 800a032:	f8d4 c000 	ldr.w	ip, [r4]
 800a036:	f1bc 0f00 	cmp.w	ip, #0
 800a03a:	d004      	beq.n	800a046 <pvPortMalloc+0x56>
 800a03c:	4620      	mov	r0, r4
 800a03e:	4664      	mov	r4, ip
 800a040:	6861      	ldr	r1, [r4, #4]
 800a042:	4299      	cmp	r1, r3
 800a044:	d3f5      	bcc.n	800a032 <pvPortMalloc+0x42>
				if( pxBlock != pxEnd )
 800a046:	4294      	cmp	r4, r2
 800a048:	d030      	beq.n	800a0ac <pvPortMalloc+0xbc>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a04a:	1aca      	subs	r2, r1, r3
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a04c:	6827      	ldr	r7, [r4, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a04e:	2a10      	cmp	r2, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a050:	6007      	str	r7, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a052:	d910      	bls.n	800a076 <pvPortMalloc+0x86>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a054:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a056:	0741      	lsls	r1, r0, #29
 800a058:	d008      	beq.n	800a06c <pvPortMalloc+0x7c>
 800a05a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a05e:	f383 8811 	msr	BASEPRI, r3
 800a062:	f3bf 8f6f 	isb	sy
 800a066:	f3bf 8f4f 	dsb	sy
 800a06a:	e7fe      	b.n	800a06a <pvPortMalloc+0x7a>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a06c:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a06e:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a070:	f7ff ff96 	bl	8009fa0 <prvInsertBlockIntoFreeList>
 800a074:	6861      	ldr	r1, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a076:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a078:	4a23      	ldr	r2, [pc, #140]	; (800a108 <pvPortMalloc+0x118>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a07a:	1a6d      	subs	r5, r5, r1
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a07c:	6810      	ldr	r0, [r2, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a07e:	4331      	orrs	r1, r6
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a080:	4285      	cmp	r5, r0
					pxBlock->pxNextFreeBlock = NULL;
 800a082:	e9c4 3100 	strd	r3, r1, [r4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a086:	f104 0408 	add.w	r4, r4, #8
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a08a:	bf38      	it	cc
 800a08c:	6015      	strcc	r5, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a08e:	f8c8 5000 	str.w	r5, [r8]
	( void ) xTaskResumeAll();
 800a092:	f7ff fb0f 	bl	80096b4 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a096:	0763      	lsls	r3, r4, #29
 800a098:	d00b      	beq.n	800a0b2 <pvPortMalloc+0xc2>
 800a09a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a09e:	f383 8811 	msr	BASEPRI, r3
 800a0a2:	f3bf 8f6f 	isb	sy
 800a0a6:	f3bf 8f4f 	dsb	sy
 800a0aa:	e7fe      	b.n	800a0aa <pvPortMalloc+0xba>
	( void ) xTaskResumeAll();
 800a0ac:	f7ff fb02 	bl	80096b4 <xTaskResumeAll>
 800a0b0:	2400      	movs	r4, #0
}
 800a0b2:	4620      	mov	r0, r4
 800a0b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uxAddress = ( size_t ) ucHeap;
 800a0b8:	4b14      	ldr	r3, [pc, #80]	; (800a10c <pvPortMalloc+0x11c>)
	xStart.xBlockSize = ( size_t ) 0;
 800a0ba:	2000      	movs	r0, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a0bc:	075d      	lsls	r5, r3, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a0be:	bf1c      	itt	ne
 800a0c0:	3307      	addne	r3, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a0c2:	f023 0307 	bicne.w	r3, r3, #7
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a0c6:	4619      	mov	r1, r3
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a0c8:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
	uxAddress -= xHeapStructSize;
 800a0cc:	4a10      	ldr	r2, [pc, #64]	; (800a110 <pvPortMalloc+0x120>)
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a0ce:	f8df c034 	ldr.w	ip, [pc, #52]	; 800a104 <pvPortMalloc+0x114>
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a0d2:	f022 0207 	bic.w	r2, r2, #7
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a0d6:	1ad3      	subs	r3, r2, r3
	xStart.xBlockSize = ( size_t ) 0;
 800a0d8:	f8cc 0004 	str.w	r0, [ip, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a0dc:	f8cc 1000 	str.w	r1, [ip]
	pxEnd = ( void * ) uxAddress;
 800a0e0:	603a      	str	r2, [r7, #0]
	pxEnd->pxNextFreeBlock = NULL;
 800a0e2:	e9c2 0000 	strd	r0, r0, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a0e6:	4f08      	ldr	r7, [pc, #32]	; (800a108 <pvPortMalloc+0x118>)
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a0e8:	e9c1 2300 	strd	r2, r3, [r1]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a0ec:	4809      	ldr	r0, [pc, #36]	; (800a114 <pvPortMalloc+0x124>)
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a0ee:	4904      	ldr	r1, [pc, #16]	; (800a100 <pvPortMalloc+0x110>)
 800a0f0:	462e      	mov	r6, r5
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a0f2:	603b      	str	r3, [r7, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a0f4:	6003      	str	r3, [r0, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a0f6:	600d      	str	r5, [r1, #0]
 800a0f8:	e785      	b.n	800a006 <pvPortMalloc+0x16>
 800a0fa:	bf00      	nop
 800a0fc:	200003ec 	.word	0x200003ec
 800a100:	20003ff0 	.word	0x20003ff0
 800a104:	20003ffc 	.word	0x20003ffc
 800a108:	20003ff8 	.word	0x20003ff8
 800a10c:	200003f0 	.word	0x200003f0
 800a110:	20003fe8 	.word	0x20003fe8
 800a114:	20003ff4 	.word	0x20003ff4

0800a118 <vPortFree>:
	if( pv != NULL )
 800a118:	b1d0      	cbz	r0, 800a150 <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a11a:	4a19      	ldr	r2, [pc, #100]	; (800a180 <vPortFree+0x68>)
 800a11c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800a120:	6812      	ldr	r2, [r2, #0]
 800a122:	4213      	tst	r3, r2
 800a124:	d108      	bne.n	800a138 <vPortFree+0x20>
 800a126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a12a:	f383 8811 	msr	BASEPRI, r3
 800a12e:	f3bf 8f6f 	isb	sy
 800a132:	f3bf 8f4f 	dsb	sy
 800a136:	e7fe      	b.n	800a136 <vPortFree+0x1e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a138:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800a13c:	b149      	cbz	r1, 800a152 <vPortFree+0x3a>
 800a13e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a142:	f383 8811 	msr	BASEPRI, r3
 800a146:	f3bf 8f6f 	isb	sy
 800a14a:	f3bf 8f4f 	dsb	sy
 800a14e:	e7fe      	b.n	800a14e <vPortFree+0x36>
 800a150:	4770      	bx	lr
{
 800a152:	b510      	push	{r4, lr}
 800a154:	4604      	mov	r4, r0
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a156:	ea23 0302 	bic.w	r3, r3, r2
 800a15a:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800a15e:	f7ff f9f5 	bl	800954c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a162:	4a08      	ldr	r2, [pc, #32]	; (800a184 <vPortFree+0x6c>)
 800a164:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800a168:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a16a:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a16e:	440b      	add	r3, r1
 800a170:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a172:	f7ff ff15 	bl	8009fa0 <prvInsertBlockIntoFreeList>
}
 800a176:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 800a17a:	f7ff ba9b 	b.w	80096b4 <xTaskResumeAll>
 800a17e:	bf00      	nop
 800a180:	20003ff0 	.word	0x20003ff0
 800a184:	20003ff4 	.word	0x20003ff4

0800a188 <__libc_init_array>:
 800a188:	b570      	push	{r4, r5, r6, lr}
 800a18a:	2500      	movs	r5, #0
 800a18c:	4e0c      	ldr	r6, [pc, #48]	; (800a1c0 <__libc_init_array+0x38>)
 800a18e:	4c0d      	ldr	r4, [pc, #52]	; (800a1c4 <__libc_init_array+0x3c>)
 800a190:	1ba4      	subs	r4, r4, r6
 800a192:	10a4      	asrs	r4, r4, #2
 800a194:	42a5      	cmp	r5, r4
 800a196:	d109      	bne.n	800a1ac <__libc_init_array+0x24>
 800a198:	f000 f82e 	bl	800a1f8 <_init>
 800a19c:	2500      	movs	r5, #0
 800a19e:	4e0a      	ldr	r6, [pc, #40]	; (800a1c8 <__libc_init_array+0x40>)
 800a1a0:	4c0a      	ldr	r4, [pc, #40]	; (800a1cc <__libc_init_array+0x44>)
 800a1a2:	1ba4      	subs	r4, r4, r6
 800a1a4:	10a4      	asrs	r4, r4, #2
 800a1a6:	42a5      	cmp	r5, r4
 800a1a8:	d105      	bne.n	800a1b6 <__libc_init_array+0x2e>
 800a1aa:	bd70      	pop	{r4, r5, r6, pc}
 800a1ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a1b0:	4798      	blx	r3
 800a1b2:	3501      	adds	r5, #1
 800a1b4:	e7ee      	b.n	800a194 <__libc_init_array+0xc>
 800a1b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a1ba:	4798      	blx	r3
 800a1bc:	3501      	adds	r5, #1
 800a1be:	e7f2      	b.n	800a1a6 <__libc_init_array+0x1e>
 800a1c0:	0800a788 	.word	0x0800a788
 800a1c4:	0800a788 	.word	0x0800a788
 800a1c8:	0800a788 	.word	0x0800a788
 800a1cc:	0800a78c 	.word	0x0800a78c

0800a1d0 <memcpy>:
 800a1d0:	b510      	push	{r4, lr}
 800a1d2:	1e43      	subs	r3, r0, #1
 800a1d4:	440a      	add	r2, r1
 800a1d6:	4291      	cmp	r1, r2
 800a1d8:	d100      	bne.n	800a1dc <memcpy+0xc>
 800a1da:	bd10      	pop	{r4, pc}
 800a1dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a1e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a1e4:	e7f7      	b.n	800a1d6 <memcpy+0x6>

0800a1e6 <memset>:
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	4402      	add	r2, r0
 800a1ea:	4293      	cmp	r3, r2
 800a1ec:	d100      	bne.n	800a1f0 <memset+0xa>
 800a1ee:	4770      	bx	lr
 800a1f0:	f803 1b01 	strb.w	r1, [r3], #1
 800a1f4:	e7f9      	b.n	800a1ea <memset+0x4>
	...

0800a1f8 <_init>:
 800a1f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1fa:	bf00      	nop
 800a1fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1fe:	bc08      	pop	{r3}
 800a200:	469e      	mov	lr, r3
 800a202:	4770      	bx	lr

0800a204 <_fini>:
 800a204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a206:	bf00      	nop
 800a208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a20a:	bc08      	pop	{r3}
 800a20c:	469e      	mov	lr, r3
 800a20e:	4770      	bx	lr
