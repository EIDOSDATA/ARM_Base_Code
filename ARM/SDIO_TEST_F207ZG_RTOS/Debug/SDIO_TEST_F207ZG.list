
SDIO_TEST_F207ZG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aaa0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0002196c  0800ac30  0800ac30  0001ac30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802c59c  0802c59c  000400b8  2**0
                  CONTENTS
  4 .ARM          00000008  0802c59c  0802c59c  0003c59c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802c5a4  0802c5a4  000400b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802c5a4  0802c5a4  0003c5a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802c5a8  0802c5a8  0003c5a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  0802c5ac  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004af8  200000b8  0802c664  000400b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004bb0  0802c664  00044bb0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000400b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001df70  00000000  00000000  000400e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004259  00000000  00000000  0005e051  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001930  00000000  00000000  000622b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001728  00000000  00000000  00063be0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024150  00000000  00000000  00065308  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00016fb1  00000000  00000000  00089458  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d1f08  00000000  00000000  000a0409  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00172311  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000069e4  00000000  00000000  0017238c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000b8 	.word	0x200000b8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ac18 	.word	0x0800ac18

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000bc 	.word	0x200000bc
 80001cc:	0800ac18 	.word	0x0800ac18

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	468c      	mov	ip, r1
 8000206:	4604      	mov	r4, r0
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0c03 	orr.w	ip, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	fbbc f7fe 	udiv	r7, ip, lr
 8000236:	fa1f f885 	uxth.w	r8, r5
 800023a:	fb0e c317 	mls	r3, lr, r7, ip
 800023e:	fb07 f908 	mul.w	r9, r7, r8
 8000242:	0c21      	lsrs	r1, r4, #16
 8000244:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000248:	4599      	cmp	r9, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 31ff 	add.w	r1, r7, #4294967295
 8000252:	f080 811c 	bcs.w	800048e <__udivmoddi4+0x28e>
 8000256:	4599      	cmp	r9, r3
 8000258:	f240 8119 	bls.w	800048e <__udivmoddi4+0x28e>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	eba3 0309 	sub.w	r3, r3, r9
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	fb00 f108 	mul.w	r1, r0, r8
 8000270:	b2a4      	uxth	r4, r4
 8000272:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000276:	42a1      	cmp	r1, r4
 8000278:	d909      	bls.n	800028e <__udivmoddi4+0x8e>
 800027a:	192c      	adds	r4, r5, r4
 800027c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000280:	f080 8107 	bcs.w	8000492 <__udivmoddi4+0x292>
 8000284:	42a1      	cmp	r1, r4
 8000286:	f240 8104 	bls.w	8000492 <__udivmoddi4+0x292>
 800028a:	3802      	subs	r0, #2
 800028c:	442c      	add	r4, r5
 800028e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000292:	2700      	movs	r7, #0
 8000294:	1a64      	subs	r4, r4, r1
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	2300      	movs	r3, #0
 800029a:	40d4      	lsrs	r4, r2
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80ec 	beq.w	8000488 <__udivmoddi4+0x288>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d148      	bne.n	8000358 <__udivmoddi4+0x158>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fb 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	469c      	mov	ip, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4c00 	strd	r4, ip, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	2701      	movs	r7, #1
 80002f4:	1b49      	subs	r1, r1, r5
 80002f6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80002fa:	fa1f f985 	uxth.w	r9, r5
 80002fe:	fbb1 fef8 	udiv	lr, r1, r8
 8000302:	fb08 111e 	mls	r1, r8, lr, r1
 8000306:	fb09 f00e 	mul.w	r0, r9, lr
 800030a:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800030e:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000312:	4298      	cmp	r0, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x126>
 8000316:	18eb      	adds	r3, r5, r3
 8000318:	f10e 31ff 	add.w	r1, lr, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x124>
 800031e:	4298      	cmp	r0, r3
 8000320:	f200 80cd 	bhi.w	80004be <__udivmoddi4+0x2be>
 8000324:	468e      	mov	lr, r1
 8000326:	1a1b      	subs	r3, r3, r0
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	fb09 f900 	mul.w	r9, r9, r0
 8000334:	b2a4      	uxth	r4, r4
 8000336:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800033a:	45a1      	cmp	r9, r4
 800033c:	d907      	bls.n	800034e <__udivmoddi4+0x14e>
 800033e:	192c      	adds	r4, r5, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x14c>
 8000346:	45a1      	cmp	r9, r4
 8000348:	f200 80b6 	bhi.w	80004b8 <__udivmoddi4+0x2b8>
 800034c:	4618      	mov	r0, r3
 800034e:	eba4 0409 	sub.w	r4, r4, r9
 8000352:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000356:	e79e      	b.n	8000296 <__udivmoddi4+0x96>
 8000358:	f1c7 0520 	rsb	r5, r7, #32
 800035c:	40bb      	lsls	r3, r7
 800035e:	fa22 fc05 	lsr.w	ip, r2, r5
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa21 f405 	lsr.w	r4, r1, r5
 800036a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800036e:	fbb4 f9fe 	udiv	r9, r4, lr
 8000372:	fa1f f88c 	uxth.w	r8, ip
 8000376:	fb0e 4419 	mls	r4, lr, r9, r4
 800037a:	fa20 f305 	lsr.w	r3, r0, r5
 800037e:	40b9      	lsls	r1, r7
 8000380:	fb09 fa08 	mul.w	sl, r9, r8
 8000384:	4319      	orrs	r1, r3
 8000386:	0c0b      	lsrs	r3, r1, #16
 8000388:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800038c:	45a2      	cmp	sl, r4
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f307 	lsl.w	r3, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2b4>
 80003a4:	45a2      	cmp	sl, r4
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2b4>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4464      	add	r4, ip
 80003b0:	eba4 040a 	sub.w	r4, r4, sl
 80003b4:	fbb4 f0fe 	udiv	r0, r4, lr
 80003b8:	fb0e 4410 	mls	r4, lr, r0, r4
 80003bc:	fb00 fa08 	mul.w	sl, r0, r8
 80003c0:	b289      	uxth	r1, r1
 80003c2:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 80003c6:	45a2      	cmp	sl, r4
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x1dc>
 80003ca:	eb1c 0404 	adds.w	r4, ip, r4
 80003ce:	f100 31ff 	add.w	r1, r0, #4294967295
 80003d2:	d26b      	bcs.n	80004ac <__udivmoddi4+0x2ac>
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d969      	bls.n	80004ac <__udivmoddi4+0x2ac>
 80003d8:	3802      	subs	r0, #2
 80003da:	4464      	add	r4, ip
 80003dc:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e0:	fba0 8902 	umull	r8, r9, r0, r2
 80003e4:	eba4 040a 	sub.w	r4, r4, sl
 80003e8:	454c      	cmp	r4, r9
 80003ea:	4641      	mov	r1, r8
 80003ec:	46ce      	mov	lr, r9
 80003ee:	d354      	bcc.n	800049a <__udivmoddi4+0x29a>
 80003f0:	d051      	beq.n	8000496 <__udivmoddi4+0x296>
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d069      	beq.n	80004ca <__udivmoddi4+0x2ca>
 80003f6:	1a5a      	subs	r2, r3, r1
 80003f8:	eb64 040e 	sbc.w	r4, r4, lr
 80003fc:	fa04 f505 	lsl.w	r5, r4, r5
 8000400:	fa22 f307 	lsr.w	r3, r2, r7
 8000404:	40fc      	lsrs	r4, r7
 8000406:	431d      	orrs	r5, r3
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	4095      	lsls	r5, r2
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	fa21 f003 	lsr.w	r0, r1, r3
 800041a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800041e:	fbb0 f7f8 	udiv	r7, r0, r8
 8000422:	fa1f f985 	uxth.w	r9, r5
 8000426:	fb08 0017 	mls	r0, r8, r7, r0
 800042a:	fa24 f303 	lsr.w	r3, r4, r3
 800042e:	4091      	lsls	r1, r2
 8000430:	fb07 fc09 	mul.w	ip, r7, r9
 8000434:	430b      	orrs	r3, r1
 8000436:	0c19      	lsrs	r1, r3, #16
 8000438:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800043c:	458c      	cmp	ip, r1
 800043e:	fa04 f402 	lsl.w	r4, r4, r2
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x254>
 8000444:	1869      	adds	r1, r5, r1
 8000446:	f107 30ff 	add.w	r0, r7, #4294967295
 800044a:	d231      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 800044c:	458c      	cmp	ip, r1
 800044e:	d92f      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000450:	3f02      	subs	r7, #2
 8000452:	4429      	add	r1, r5
 8000454:	eba1 010c 	sub.w	r1, r1, ip
 8000458:	fbb1 f0f8 	udiv	r0, r1, r8
 800045c:	fb08 1c10 	mls	ip, r8, r0, r1
 8000460:	fb00 fe09 	mul.w	lr, r0, r9
 8000464:	b299      	uxth	r1, r3
 8000466:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800046a:	458e      	cmp	lr, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 33ff 	add.w	r3, r0, #4294967295
 8000474:	d218      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000476:	458e      	cmp	lr, r1
 8000478:	d916      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	eba1 010e 	sub.w	r1, r1, lr
 8000482:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000486:	e73a      	b.n	80002fe <__udivmoddi4+0xfe>
 8000488:	4637      	mov	r7, r6
 800048a:	4630      	mov	r0, r6
 800048c:	e708      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048e:	460f      	mov	r7, r1
 8000490:	e6e6      	b.n	8000260 <__udivmoddi4+0x60>
 8000492:	4618      	mov	r0, r3
 8000494:	e6fb      	b.n	800028e <__udivmoddi4+0x8e>
 8000496:	4543      	cmp	r3, r8
 8000498:	d2ab      	bcs.n	80003f2 <__udivmoddi4+0x1f2>
 800049a:	ebb8 0102 	subs.w	r1, r8, r2
 800049e:	eb69 020c 	sbc.w	r2, r9, ip
 80004a2:	3801      	subs	r0, #1
 80004a4:	4696      	mov	lr, r2
 80004a6:	e7a4      	b.n	80003f2 <__udivmoddi4+0x1f2>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e7e8      	b.n	800047e <__udivmoddi4+0x27e>
 80004ac:	4608      	mov	r0, r1
 80004ae:	e795      	b.n	80003dc <__udivmoddi4+0x1dc>
 80004b0:	4607      	mov	r7, r0
 80004b2:	e7cf      	b.n	8000454 <__udivmoddi4+0x254>
 80004b4:	4681      	mov	r9, r0
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b8:	3802      	subs	r0, #2
 80004ba:	442c      	add	r4, r5
 80004bc:	e747      	b.n	800034e <__udivmoddi4+0x14e>
 80004be:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c2:	442b      	add	r3, r5
 80004c4:	e72f      	b.n	8000326 <__udivmoddi4+0x126>
 80004c6:	4638      	mov	r0, r7
 80004c8:	e707      	b.n	80002da <__udivmoddi4+0xda>
 80004ca:	4637      	mov	r7, r6
 80004cc:	e6e8      	b.n	80002a0 <__udivmoddi4+0xa0>
 80004ce:	bf00      	nop

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d4:	b480      	push	{r7}
 80004d6:	b085      	sub	sp, #20
 80004d8:	af00      	add	r7, sp, #0
 80004da:	60f8      	str	r0, [r7, #12]
 80004dc:	60b9      	str	r1, [r7, #8]
 80004de:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	4a06      	ldr	r2, [pc, #24]	; (80004fc <vApplicationGetIdleTaskMemory+0x28>)
 80004e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004e6:	68bb      	ldr	r3, [r7, #8]
 80004e8:	4a05      	ldr	r2, [pc, #20]	; (8000500 <vApplicationGetIdleTaskMemory+0x2c>)
 80004ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	2280      	movs	r2, #128	; 0x80
 80004f0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004f2:	bf00      	nop
 80004f4:	3714      	adds	r7, #20
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bc80      	pop	{r7}
 80004fa:	4770      	bx	lr
 80004fc:	200000d4 	.word	0x200000d4
 8000500:	20000128 	.word	0x20000128

08000504 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800050c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000510:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000514:	f003 0301 	and.w	r3, r3, #1
 8000518:	2b00      	cmp	r3, #0
 800051a:	d013      	beq.n	8000544 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800051c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000520:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000524:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000528:	2b00      	cmp	r3, #0
 800052a:	d00b      	beq.n	8000544 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800052c:	e000      	b.n	8000530 <ITM_SendChar+0x2c>
    {
      __NOP();
 800052e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000530:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	2b00      	cmp	r3, #0
 8000538:	d0f9      	beq.n	800052e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800053a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800053e:	687a      	ldr	r2, [r7, #4]
 8000540:	b2d2      	uxtb	r2, r2
 8000542:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000544:	687b      	ldr	r3, [r7, #4]
}
 8000546:	4618      	mov	r0, r3
 8000548:	370c      	adds	r7, #12
 800054a:	46bd      	mov	sp, r7
 800054c:	bc80      	pop	{r7}
 800054e:	4770      	bx	lr

08000550 <HAL_GPIO_EXTI_Callback>:
	{
		return SHIELD_NOT_DETECTED;
	}
}
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
 8000556:	4603      	mov	r3, r0
 8000558:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin)
 800055a:	88fb      	ldrh	r3, [r7, #6]
 800055c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000560:	d022      	beq.n	80005a8 <HAL_GPIO_EXTI_Callback+0x58>
 8000562:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000566:	dc04      	bgt.n	8000572 <HAL_GPIO_EXTI_Callback+0x22>
 8000568:	2b40      	cmp	r3, #64	; 0x40
 800056a:	d009      	beq.n	8000580 <HAL_GPIO_EXTI_Callback+0x30>
 800056c:	2b80      	cmp	r3, #128	; 0x80
 800056e:	d011      	beq.n	8000594 <HAL_GPIO_EXTI_Callback+0x44>
		break;
	case GPIO_PIN_14:
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
		break;
	}
}
 8000570:	e02a      	b.n	80005c8 <HAL_GPIO_EXTI_Callback+0x78>
	switch (GPIO_Pin)
 8000572:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000576:	d01c      	beq.n	80005b2 <HAL_GPIO_EXTI_Callback+0x62>
 8000578:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800057c:	d01e      	beq.n	80005bc <HAL_GPIO_EXTI_Callback+0x6c>
}
 800057e:	e023      	b.n	80005c8 <HAL_GPIO_EXTI_Callback+0x78>
		ITM_SendChar('6');
 8000580:	2036      	movs	r0, #54	; 0x36
 8000582:	f7ff ffbf 	bl	8000504 <ITM_SendChar>
		ITM_SendChar('\r');
 8000586:	200d      	movs	r0, #13
 8000588:	f7ff ffbc 	bl	8000504 <ITM_SendChar>
		ITM_SendChar('\n');
 800058c:	200a      	movs	r0, #10
 800058e:	f7ff ffb9 	bl	8000504 <ITM_SendChar>
		break;
 8000592:	e019      	b.n	80005c8 <HAL_GPIO_EXTI_Callback+0x78>
		ITM_SendChar('7');
 8000594:	2037      	movs	r0, #55	; 0x37
 8000596:	f7ff ffb5 	bl	8000504 <ITM_SendChar>
		ITM_SendChar('\r');
 800059a:	200d      	movs	r0, #13
 800059c:	f7ff ffb2 	bl	8000504 <ITM_SendChar>
		ITM_SendChar('\n');
 80005a0:	200a      	movs	r0, #10
 80005a2:	f7ff ffaf 	bl	8000504 <ITM_SendChar>
		break;
 80005a6:	e00f      	b.n	80005c8 <HAL_GPIO_EXTI_Callback+0x78>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80005a8:	2180      	movs	r1, #128	; 0x80
 80005aa:	4809      	ldr	r0, [pc, #36]	; (80005d0 <HAL_GPIO_EXTI_Callback+0x80>)
 80005ac:	f001 fc4f 	bl	8001e4e <HAL_GPIO_TogglePin>
		break;
 80005b0:	e00a      	b.n	80005c8 <HAL_GPIO_EXTI_Callback+0x78>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80005b2:	2101      	movs	r1, #1
 80005b4:	4806      	ldr	r0, [pc, #24]	; (80005d0 <HAL_GPIO_EXTI_Callback+0x80>)
 80005b6:	f001 fc4a 	bl	8001e4e <HAL_GPIO_TogglePin>
		break;
 80005ba:	e005      	b.n	80005c8 <HAL_GPIO_EXTI_Callback+0x78>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80005bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005c0:	4803      	ldr	r0, [pc, #12]	; (80005d0 <HAL_GPIO_EXTI_Callback+0x80>)
 80005c2:	f001 fc44 	bl	8001e4e <HAL_GPIO_TogglePin>
		break;
 80005c6:	bf00      	nop
}
 80005c8:	bf00      	nop
 80005ca:	3708      	adds	r7, #8
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	40020400 	.word	0x40020400

080005d4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80005d4:	b5b0      	push	{r4, r5, r7, lr}
 80005d6:	b08e      	sub	sp, #56	; 0x38
 80005d8:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005da:	f000 fd93 	bl	8001104 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005de:	f000 f839 	bl	8000654 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005e2:	f000 f8f1 	bl	80007c8 <MX_GPIO_Init>
	MX_DMA_Init();
 80005e6:	f000 f8c7 	bl	8000778 <MX_DMA_Init>
	MX_USART3_UART_Init();
 80005ea:	f000 f89b 	bl	8000724 <MX_USART3_UART_Init>
	MX_SDIO_SD_Init();
 80005ee:	f000 f879 	bl	80006e4 <MX_SDIO_SD_Init>
	MX_FATFS_Init();
 80005f2:	f004 fd0d 	bl	8005010 <MX_FATFS_Init>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of LED_Task */
	osThreadDef(LED_Task, LED_Task_Function, osPriorityNormal, 0, 128);
 80005f6:	4b13      	ldr	r3, [pc, #76]	; (8000644 <main+0x70>)
 80005f8:	f107 041c 	add.w	r4, r7, #28
 80005fc:	461d      	mov	r5, r3
 80005fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000600:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000602:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000606:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	LED_TaskHandle = osThreadCreate(osThread(LED_Task), NULL);
 800060a:	f107 031c 	add.w	r3, r7, #28
 800060e:	2100      	movs	r1, #0
 8000610:	4618      	mov	r0, r3
 8000612:	f007 fec3 	bl	800839c <osThreadCreate>
 8000616:	4602      	mov	r2, r0
 8000618:	4b0b      	ldr	r3, [pc, #44]	; (8000648 <main+0x74>)
 800061a:	601a      	str	r2, [r3, #0]

	/* definition and creation of uSD_Task */
	osThreadDef(uSD_Task, uSD_Task_Function, osPriorityIdle, 0, 128);
 800061c:	4b0b      	ldr	r3, [pc, #44]	; (800064c <main+0x78>)
 800061e:	463c      	mov	r4, r7
 8000620:	461d      	mov	r5, r3
 8000622:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000624:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000626:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800062a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	uSD_TaskHandle = osThreadCreate(osThread(uSD_Task), NULL);
 800062e:	463b      	mov	r3, r7
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f007 feb2 	bl	800839c <osThreadCreate>
 8000638:	4602      	mov	r2, r0
 800063a:	4b05      	ldr	r3, [pc, #20]	; (8000650 <main+0x7c>)
 800063c:	601a      	str	r2, [r3, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 800063e:	f007 fea6 	bl	800838e <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000642:	e7fe      	b.n	8000642 <main+0x6e>
 8000644:	0800ac3c 	.word	0x0800ac3c
 8000648:	20004168 	.word	0x20004168
 800064c:	0800ac64 	.word	0x0800ac64
 8000650:	200046b8 	.word	0x200046b8

08000654 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b092      	sub	sp, #72	; 0x48
 8000658:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 800065a:	f107 0318 	add.w	r3, r7, #24
 800065e:	2230      	movs	r2, #48	; 0x30
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f00a fa17 	bl	800aa96 <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8000668:	1d3b      	adds	r3, r7, #4
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	605a      	str	r2, [r3, #4]
 8000670:	609a      	str	r2, [r3, #8]
 8000672:	60da      	str	r2, [r3, #12]
 8000674:	611a      	str	r2, [r3, #16]
	{ 0 };

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000676:	2302      	movs	r3, #2
 8000678:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800067a:	2301      	movs	r3, #1
 800067c:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800067e:	2310      	movs	r3, #16
 8000680:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000682:	2302      	movs	r3, #2
 8000684:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000686:	2300      	movs	r3, #0
 8000688:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLM = 13;
 800068a:	230d      	movs	r3, #13
 800068c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLN = 195;
 800068e:	23c3      	movs	r3, #195	; 0xc3
 8000690:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000692:	2302      	movs	r3, #2
 8000694:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLQ = 5;
 8000696:	2305      	movs	r3, #5
 8000698:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069a:	f107 0318 	add.w	r3, r7, #24
 800069e:	4618      	mov	r0, r3
 80006a0:	f001 fc06 	bl	8001eb0 <HAL_RCC_OscConfig>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0x5a>
	{
		Error_Handler();
 80006aa:	f000 fa7b 	bl	8000ba4 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80006ae:	230f      	movs	r3, #15
 80006b0:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b2:	2302      	movs	r3, #2
 80006b4:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b6:	2300      	movs	r3, #0
 80006b8:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006ba:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006be:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c4:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	2103      	movs	r1, #3
 80006ca:	4618      	mov	r0, r3
 80006cc:	f001 fe40 	bl	8002350 <HAL_RCC_ClockConfig>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0x86>
	{
		Error_Handler();
 80006d6:	f000 fa65 	bl	8000ba4 <Error_Handler>
	}
}
 80006da:	bf00      	nop
 80006dc:	3748      	adds	r7, #72	; 0x48
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
	...

080006e4 <MX_SDIO_SD_Init>:
 * @brief SDIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDIO_SD_Init(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
	/* USER CODE END SDIO_Init 0 */

	/* USER CODE BEGIN SDIO_Init 1 */

	/* USER CODE END SDIO_Init 1 */
	hsd.Instance = SDIO;
 80006e8:	4b0c      	ldr	r3, [pc, #48]	; (800071c <MX_SDIO_SD_Init+0x38>)
 80006ea:	4a0d      	ldr	r2, [pc, #52]	; (8000720 <MX_SDIO_SD_Init+0x3c>)
 80006ec:	601a      	str	r2, [r3, #0]
	hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80006ee:	4b0b      	ldr	r3, [pc, #44]	; (800071c <MX_SDIO_SD_Init+0x38>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	605a      	str	r2, [r3, #4]
	hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80006f4:	4b09      	ldr	r3, [pc, #36]	; (800071c <MX_SDIO_SD_Init+0x38>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	609a      	str	r2, [r3, #8]
	hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80006fa:	4b08      	ldr	r3, [pc, #32]	; (800071c <MX_SDIO_SD_Init+0x38>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	60da      	str	r2, [r3, #12]
	hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000700:	4b06      	ldr	r3, [pc, #24]	; (800071c <MX_SDIO_SD_Init+0x38>)
 8000702:	2200      	movs	r2, #0
 8000704:	611a      	str	r2, [r3, #16]
	hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000706:	4b05      	ldr	r3, [pc, #20]	; (800071c <MX_SDIO_SD_Init+0x38>)
 8000708:	2200      	movs	r2, #0
 800070a:	615a      	str	r2, [r3, #20]
	hsd.Init.ClockDiv = 10;
 800070c:	4b03      	ldr	r3, [pc, #12]	; (800071c <MX_SDIO_SD_Init+0x38>)
 800070e:	220a      	movs	r2, #10
 8000710:	619a      	str	r2, [r3, #24]
	/* USER CODE BEGIN SDIO_Init 2 */

	/* USER CODE END SDIO_Init 2 */

}
 8000712:	bf00      	nop
 8000714:	46bd      	mov	sp, r7
 8000716:	bc80      	pop	{r7}
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	20004404 	.word	0x20004404
 8000720:	40012c00 	.word	0x40012c00

08000724 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8000728:	4b11      	ldr	r3, [pc, #68]	; (8000770 <MX_USART3_UART_Init+0x4c>)
 800072a:	4a12      	ldr	r2, [pc, #72]	; (8000774 <MX_USART3_UART_Init+0x50>)
 800072c:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 800072e:	4b10      	ldr	r3, [pc, #64]	; (8000770 <MX_USART3_UART_Init+0x4c>)
 8000730:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000734:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000736:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <MX_USART3_UART_Init+0x4c>)
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 800073c:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <MX_USART3_UART_Init+0x4c>)
 800073e:	2200      	movs	r2, #0
 8000740:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000742:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <MX_USART3_UART_Init+0x4c>)
 8000744:	2200      	movs	r2, #0
 8000746:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000748:	4b09      	ldr	r3, [pc, #36]	; (8000770 <MX_USART3_UART_Init+0x4c>)
 800074a:	220c      	movs	r2, #12
 800074c:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800074e:	4b08      	ldr	r3, [pc, #32]	; (8000770 <MX_USART3_UART_Init+0x4c>)
 8000750:	2200      	movs	r2, #0
 8000752:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <MX_USART3_UART_Init+0x4c>)
 8000756:	2200      	movs	r2, #0
 8000758:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 800075a:	4805      	ldr	r0, [pc, #20]	; (8000770 <MX_USART3_UART_Init+0x4c>)
 800075c:	f003 fdc4 	bl	80042e8 <HAL_UART_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_USART3_UART_Init+0x46>
	{
		Error_Handler();
 8000766:	f000 fa1d 	bl	8000ba4 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	20004114 	.word	0x20004114
 8000774:	40004800 	.word	0x40004800

08000778 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	607b      	str	r3, [r7, #4]
 8000782:	4b10      	ldr	r3, [pc, #64]	; (80007c4 <MX_DMA_Init+0x4c>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a0f      	ldr	r2, [pc, #60]	; (80007c4 <MX_DMA_Init+0x4c>)
 8000788:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b0d      	ldr	r3, [pc, #52]	; (80007c4 <MX_DMA_Init+0x4c>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 6, 0);
 800079a:	2200      	movs	r2, #0
 800079c:	2106      	movs	r1, #6
 800079e:	203b      	movs	r0, #59	; 0x3b
 80007a0:	f000 fdc5 	bl	800132e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80007a4:	203b      	movs	r0, #59	; 0x3b
 80007a6:	f000 fdde 	bl	8001366 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 6, 0);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2106      	movs	r1, #6
 80007ae:	2045      	movs	r0, #69	; 0x45
 80007b0:	f000 fdbd 	bl	800132e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80007b4:	2045      	movs	r0, #69	; 0x45
 80007b6:	f000 fdd6 	bl	8001366 <HAL_NVIC_EnableIRQ>

}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40023800 	.word	0x40023800

080007c8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08c      	sub	sp, #48	; 0x30
 80007cc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct =
 80007ce:	f107 031c 	add.w	r3, r7, #28
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]
 80007dc:	611a      	str	r2, [r3, #16]
	{ 0 };

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	61bb      	str	r3, [r7, #24]
 80007e2:	4b97      	ldr	r3, [pc, #604]	; (8000a40 <MX_GPIO_Init+0x278>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a96      	ldr	r2, [pc, #600]	; (8000a40 <MX_GPIO_Init+0x278>)
 80007e8:	f043 0304 	orr.w	r3, r3, #4
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b94      	ldr	r3, [pc, #592]	; (8000a40 <MX_GPIO_Init+0x278>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0304 	and.w	r3, r3, #4
 80007f6:	61bb      	str	r3, [r7, #24]
 80007f8:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	617b      	str	r3, [r7, #20]
 80007fe:	4b90      	ldr	r3, [pc, #576]	; (8000a40 <MX_GPIO_Init+0x278>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a8f      	ldr	r2, [pc, #572]	; (8000a40 <MX_GPIO_Init+0x278>)
 8000804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b8d      	ldr	r3, [pc, #564]	; (8000a40 <MX_GPIO_Init+0x278>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000812:	617b      	str	r3, [r7, #20]
 8000814:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	613b      	str	r3, [r7, #16]
 800081a:	4b89      	ldr	r3, [pc, #548]	; (8000a40 <MX_GPIO_Init+0x278>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a88      	ldr	r2, [pc, #544]	; (8000a40 <MX_GPIO_Init+0x278>)
 8000820:	f043 0301 	orr.w	r3, r3, #1
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b86      	ldr	r3, [pc, #536]	; (8000a40 <MX_GPIO_Init+0x278>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0301 	and.w	r3, r3, #1
 800082e:	613b      	str	r3, [r7, #16]
 8000830:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	60fb      	str	r3, [r7, #12]
 8000836:	4b82      	ldr	r3, [pc, #520]	; (8000a40 <MX_GPIO_Init+0x278>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a81      	ldr	r2, [pc, #516]	; (8000a40 <MX_GPIO_Init+0x278>)
 800083c:	f043 0302 	orr.w	r3, r3, #2
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b7f      	ldr	r3, [pc, #508]	; (8000a40 <MX_GPIO_Init+0x278>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0302 	and.w	r3, r3, #2
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	60bb      	str	r3, [r7, #8]
 8000852:	4b7b      	ldr	r3, [pc, #492]	; (8000a40 <MX_GPIO_Init+0x278>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a7a      	ldr	r2, [pc, #488]	; (8000a40 <MX_GPIO_Init+0x278>)
 8000858:	f043 0310 	orr.w	r3, r3, #16
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b78      	ldr	r3, [pc, #480]	; (8000a40 <MX_GPIO_Init+0x278>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0310 	and.w	r3, r3, #16
 8000866:	60bb      	str	r3, [r7, #8]
 8000868:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	4b74      	ldr	r3, [pc, #464]	; (8000a40 <MX_GPIO_Init+0x278>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a73      	ldr	r2, [pc, #460]	; (8000a40 <MX_GPIO_Init+0x278>)
 8000874:	f043 0308 	orr.w	r3, r3, #8
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b71      	ldr	r3, [pc, #452]	; (8000a40 <MX_GPIO_Init+0x278>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f003 0308 	and.w	r3, r3, #8
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	603b      	str	r3, [r7, #0]
 800088a:	4b6d      	ldr	r3, [pc, #436]	; (8000a40 <MX_GPIO_Init+0x278>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a6c      	ldr	r2, [pc, #432]	; (8000a40 <MX_GPIO_Init+0x278>)
 8000890:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b6a      	ldr	r3, [pc, #424]	; (8000a40 <MX_GPIO_Init+0x278>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800089e:	603b      	str	r3, [r7, #0]
 80008a0:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 80008a2:	2200      	movs	r2, #0
 80008a4:	f244 0181 	movw	r1, #16513	; 0x4081
 80008a8:	4866      	ldr	r0, [pc, #408]	; (8000a44 <MX_GPIO_Init+0x27c>)
 80008aa:	f001 fab8 	bl	8001e1e <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin,
 80008ae:	2200      	movs	r2, #0
 80008b0:	2140      	movs	r1, #64	; 0x40
 80008b2:	4865      	ldr	r0, [pc, #404]	; (8000a48 <MX_GPIO_Init+0x280>)
 80008b4:	f001 fab3 	bl	8001e1e <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : USER_Btn_Pin PC6 PC7 */
	GPIO_InitStruct.Pin = USER_Btn_Pin | GPIO_PIN_6 | GPIO_PIN_7;
 80008b8:	f44f 5303 	mov.w	r3, #8384	; 0x20c0
 80008bc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008be:	4b63      	ldr	r3, [pc, #396]	; (8000a4c <MX_GPIO_Init+0x284>)
 80008c0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008c6:	f107 031c 	add.w	r3, r7, #28
 80008ca:	4619      	mov	r1, r3
 80008cc:	4860      	ldr	r0, [pc, #384]	; (8000a50 <MX_GPIO_Init+0x288>)
 80008ce:	f001 f8f1 	bl	8001ab4 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
	GPIO_InitStruct.Pin = RMII_MDC_Pin | RMII_RXD0_Pin | RMII_RXD1_Pin;
 80008d2:	2332      	movs	r3, #50	; 0x32
 80008d4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d6:	2302      	movs	r3, #2
 80008d8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008de:	2303      	movs	r3, #3
 80008e0:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008e2:	230b      	movs	r3, #11
 80008e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008e6:	f107 031c 	add.w	r3, r7, #28
 80008ea:	4619      	mov	r1, r3
 80008ec:	4858      	ldr	r0, [pc, #352]	; (8000a50 <MX_GPIO_Init+0x288>)
 80008ee:	f001 f8e1 	bl	8001ab4 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin */
	GPIO_InitStruct.Pin = RMII_REF_CLK_Pin | RMII_MDIO_Pin;
 80008f2:	2306      	movs	r3, #6
 80008f4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f6:	2302      	movs	r3, #2
 80008f8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008fe:	2303      	movs	r3, #3
 8000900:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000902:	230b      	movs	r3, #11
 8000904:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000906:	f107 031c 	add.w	r3, r7, #28
 800090a:	4619      	mov	r1, r3
 800090c:	4851      	ldr	r0, [pc, #324]	; (8000a54 <MX_GPIO_Init+0x28c>)
 800090e:	f001 f8d1 	bl	8001ab4 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | LD2_Pin;
 8000912:	f244 0381 	movw	r3, #16513	; 0x4081
 8000916:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000918:	2301      	movs	r3, #1
 800091a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000920:	2300      	movs	r3, #0
 8000922:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000924:	f107 031c 	add.w	r3, r7, #28
 8000928:	4619      	mov	r1, r3
 800092a:	4846      	ldr	r0, [pc, #280]	; (8000a44 <MX_GPIO_Init+0x27c>)
 800092c:	f001 f8c2 	bl	8001ab4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PE10 PE11 PE14 */
	GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_14;
 8000930:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 8000934:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000936:	4b45      	ldr	r3, [pc, #276]	; (8000a4c <MX_GPIO_Init+0x284>)
 8000938:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800093e:	f107 031c 	add.w	r3, r7, #28
 8000942:	4619      	mov	r1, r3
 8000944:	4844      	ldr	r0, [pc, #272]	; (8000a58 <MX_GPIO_Init+0x290>)
 8000946:	f001 f8b5 	bl	8001ab4 <HAL_GPIO_Init>

	/*Configure GPIO pin : RMII_TXD1_Pin */
	GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800094a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800094e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000950:	2302      	movs	r3, #2
 8000952:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000958:	2303      	movs	r3, #3
 800095a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800095c:	230b      	movs	r3, #11
 800095e:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000960:	f107 031c 	add.w	r3, r7, #28
 8000964:	4619      	mov	r1, r3
 8000966:	4837      	ldr	r0, [pc, #220]	; (8000a44 <MX_GPIO_Init+0x27c>)
 8000968:	f001 f8a4 	bl	8001ab4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PG2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 800096c:	2304      	movs	r3, #4
 800096e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000970:	2300      	movs	r3, #0
 8000972:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000974:	2301      	movs	r3, #1
 8000976:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000978:	f107 031c 	add.w	r3, r7, #28
 800097c:	4619      	mov	r1, r3
 800097e:	4832      	ldr	r0, [pc, #200]	; (8000a48 <MX_GPIO_Init+0x280>)
 8000980:	f001 f898 	bl	8001ab4 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000984:	2340      	movs	r3, #64	; 0x40
 8000986:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000988:	2301      	movs	r3, #1
 800098a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000990:	2300      	movs	r3, #0
 8000992:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000994:	f107 031c 	add.w	r3, r7, #28
 8000998:	4619      	mov	r1, r3
 800099a:	482b      	ldr	r0, [pc, #172]	; (8000a48 <MX_GPIO_Init+0x280>)
 800099c:	f001 f88a 	bl	8001ab4 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009a0:	2380      	movs	r3, #128	; 0x80
 80009a2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a4:	2300      	movs	r3, #0
 80009a6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009ac:	f107 031c 	add.w	r3, r7, #28
 80009b0:	4619      	mov	r1, r3
 80009b2:	4825      	ldr	r0, [pc, #148]	; (8000a48 <MX_GPIO_Init+0x280>)
 80009b4:	f001 f87e 	bl	8001ab4 <HAL_GPIO_Init>

	/*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
	GPIO_InitStruct.Pin = USB_SOF_Pin | USB_ID_Pin | USB_DM_Pin | USB_DP_Pin;
 80009b8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80009bc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009be:	2302      	movs	r3, #2
 80009c0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c6:	2303      	movs	r3, #3
 80009c8:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009ca:	230a      	movs	r3, #10
 80009cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ce:	f107 031c 	add.w	r3, r7, #28
 80009d2:	4619      	mov	r1, r3
 80009d4:	481f      	ldr	r0, [pc, #124]	; (8000a54 <MX_GPIO_Init+0x28c>)
 80009d6:	f001 f86d 	bl	8001ab4 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_VBUS_Pin */
	GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80009da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009de:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e0:	2300      	movs	r3, #0
 80009e2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80009e8:	f107 031c 	add.w	r3, r7, #28
 80009ec:	4619      	mov	r1, r3
 80009ee:	4819      	ldr	r0, [pc, #100]	; (8000a54 <MX_GPIO_Init+0x28c>)
 80009f0:	f001 f860 	bl	8001ab4 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
	GPIO_InitStruct.Pin = RMII_TX_EN_Pin | RMII_TXD0_Pin;
 80009f4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80009f8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fa:	2302      	movs	r3, #2
 80009fc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a02:	2303      	movs	r3, #3
 8000a04:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a06:	230b      	movs	r3, #11
 8000a08:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a0a:	f107 031c 	add.w	r3, r7, #28
 8000a0e:	4619      	mov	r1, r3
 8000a10:	480d      	ldr	r0, [pc, #52]	; (8000a48 <MX_GPIO_Init+0x280>)
 8000a12:	f001 f84f 	bl	8001ab4 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000a16:	2200      	movs	r2, #0
 8000a18:	2105      	movs	r1, #5
 8000a1a:	2017      	movs	r0, #23
 8000a1c:	f000 fc87 	bl	800132e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000a20:	2017      	movs	r0, #23
 8000a22:	f000 fca0 	bl	8001366 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000a26:	2200      	movs	r2, #0
 8000a28:	2105      	movs	r1, #5
 8000a2a:	2028      	movs	r0, #40	; 0x28
 8000a2c:	f000 fc7f 	bl	800132e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a30:	2028      	movs	r0, #40	; 0x28
 8000a32:	f000 fc98 	bl	8001366 <HAL_NVIC_EnableIRQ>

}
 8000a36:	bf00      	nop
 8000a38:	3730      	adds	r7, #48	; 0x30
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40023800 	.word	0x40023800
 8000a44:	40020400 	.word	0x40020400
 8000a48:	40021800 	.word	0x40021800
 8000a4c:	10110000 	.word	0x10110000
 8000a50:	40020800 	.word	0x40020800
 8000a54:	40020000 	.word	0x40020000
 8000a58:	40021000 	.word	0x40021000

08000a5c <LED_Task_Function>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_LED_Task_Function */
void LED_Task_Function(void const *argument)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;)
	{
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000a64:	2201      	movs	r2, #1
 8000a66:	2101      	movs	r1, #1
 8000a68:	4818      	ldr	r0, [pc, #96]	; (8000acc <LED_Task_Function+0x70>)
 8000a6a:	f001 f9d8 	bl	8001e1e <HAL_GPIO_WritePin>
		osDelay(100);
 8000a6e:	2064      	movs	r0, #100	; 0x64
 8000a70:	f007 fce0 	bl	8008434 <osDelay>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000a74:	2201      	movs	r2, #1
 8000a76:	2180      	movs	r1, #128	; 0x80
 8000a78:	4814      	ldr	r0, [pc, #80]	; (8000acc <LED_Task_Function+0x70>)
 8000a7a:	f001 f9d0 	bl	8001e1e <HAL_GPIO_WritePin>
		osDelay(100);
 8000a7e:	2064      	movs	r0, #100	; 0x64
 8000a80:	f007 fcd8 	bl	8008434 <osDelay>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000a84:	2201      	movs	r2, #1
 8000a86:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a8a:	4810      	ldr	r0, [pc, #64]	; (8000acc <LED_Task_Function+0x70>)
 8000a8c:	f001 f9c7 	bl	8001e1e <HAL_GPIO_WritePin>
		osDelay(100);
 8000a90:	2064      	movs	r0, #100	; 0x64
 8000a92:	f007 fccf 	bl	8008434 <osDelay>
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2101      	movs	r1, #1
 8000a9a:	480c      	ldr	r0, [pc, #48]	; (8000acc <LED_Task_Function+0x70>)
 8000a9c:	f001 f9bf 	bl	8001e1e <HAL_GPIO_WritePin>
		osDelay(100);
 8000aa0:	2064      	movs	r0, #100	; 0x64
 8000aa2:	f007 fcc7 	bl	8008434 <osDelay>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2180      	movs	r1, #128	; 0x80
 8000aaa:	4808      	ldr	r0, [pc, #32]	; (8000acc <LED_Task_Function+0x70>)
 8000aac:	f001 f9b7 	bl	8001e1e <HAL_GPIO_WritePin>
		osDelay(100);
 8000ab0:	2064      	movs	r0, #100	; 0x64
 8000ab2:	f007 fcbf 	bl	8008434 <osDelay>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000abc:	4803      	ldr	r0, [pc, #12]	; (8000acc <LED_Task_Function+0x70>)
 8000abe:	f001 f9ae 	bl	8001e1e <HAL_GPIO_WritePin>
		osDelay(100);
 8000ac2:	2064      	movs	r0, #100	; 0x64
 8000ac4:	f007 fcb6 	bl	8008434 <osDelay>
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000ac8:	e7cc      	b.n	8000a64 <LED_Task_Function+0x8>
 8000aca:	bf00      	nop
 8000acc:	40020400 	.word	0x40020400

08000ad0 <uSD_Task_Function>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_uSD_Task_Function */
void uSD_Task_Function(void const *argument)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN uSD_Task_Function */
	/* Infinite loop */
	for (;;)
	{
		HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_6);
 8000ad8:	2140      	movs	r1, #64	; 0x40
 8000ada:	481f      	ldr	r0, [pc, #124]	; (8000b58 <uSD_Task_Function+0x88>)
 8000adc:	f001 f9b7 	bl	8001e4e <HAL_GPIO_TogglePin>
		if (fileOnce == 0)
 8000ae0:	4b1e      	ldr	r3, [pc, #120]	; (8000b5c <uSD_Task_Function+0x8c>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d131      	bne.n	8000b4c <uSD_Task_Function+0x7c>
		{
			//	xSemaphoreTake(myMutex01Handle,100);
			res = f_mount(&SDFatFs, SDPath, 1);
 8000ae8:	2201      	movs	r2, #1
 8000aea:	491d      	ldr	r1, [pc, #116]	; (8000b60 <uSD_Task_Function+0x90>)
 8000aec:	481d      	ldr	r0, [pc, #116]	; (8000b64 <uSD_Task_Function+0x94>)
 8000aee:	f006 fcdf 	bl	80074b0 <f_mount>
 8000af2:	4603      	mov	r3, r0
 8000af4:	461a      	mov	r2, r3
 8000af6:	4b1c      	ldr	r3, [pc, #112]	; (8000b68 <uSD_Task_Function+0x98>)
 8000af8:	701a      	strb	r2, [r3, #0]
			if (res == FR_OK)
 8000afa:	4b1b      	ldr	r3, [pc, #108]	; (8000b68 <uSD_Task_Function+0x98>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d11b      	bne.n	8000b3a <uSD_Task_Function+0x6a>
			{
				//HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_12);
				if (f_open(&MyFile, (char*) fName, FA_WRITE | FA_CREATE_ALWAYS)
 8000b02:	220a      	movs	r2, #10
 8000b04:	4919      	ldr	r1, [pc, #100]	; (8000b6c <uSD_Task_Function+0x9c>)
 8000b06:	481a      	ldr	r0, [pc, #104]	; (8000b70 <uSD_Task_Function+0xa0>)
 8000b08:	f006 fd3a 	bl	8007580 <f_open>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d119      	bne.n	8000b46 <uSD_Task_Function+0x76>
						== FR_OK)
				{
					res = f_write(&MyFile, alaram, sizeof(alaram), &bytesCnt);
 8000b12:	4b18      	ldr	r3, [pc, #96]	; (8000b74 <uSD_Task_Function+0xa4>)
 8000b14:	2232      	movs	r2, #50	; 0x32
 8000b16:	4918      	ldr	r1, [pc, #96]	; (8000b78 <uSD_Task_Function+0xa8>)
 8000b18:	4815      	ldr	r0, [pc, #84]	; (8000b70 <uSD_Task_Function+0xa0>)
 8000b1a:	f006 ff27 	bl	800796c <f_write>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	461a      	mov	r2, r3
 8000b22:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <uSD_Task_Function+0x98>)
 8000b24:	701a      	strb	r2, [r3, #0]
					f_close(&MyFile);
 8000b26:	4812      	ldr	r0, [pc, #72]	; (8000b70 <uSD_Task_Function+0xa0>)
 8000b28:	f007 f9aa 	bl	8007e80 <f_close>
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b32:	4812      	ldr	r0, [pc, #72]	; (8000b7c <uSD_Task_Function+0xac>)
 8000b34:	f001 f973 	bl	8001e1e <HAL_GPIO_WritePin>
 8000b38:	e005      	b.n	8000b46 <uSD_Task_Function+0x76>
				 f_close(&file);
				 }*/
			}
			else
			{
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b40:	480e      	ldr	r0, [pc, #56]	; (8000b7c <uSD_Task_Function+0xac>)
 8000b42:	f001 f96c 	bl	8001e1e <HAL_GPIO_WritePin>
			}
			fileOnce = 1;
 8000b46:	4b05      	ldr	r3, [pc, #20]	; (8000b5c <uSD_Task_Function+0x8c>)
 8000b48:	2201      	movs	r2, #1
 8000b4a:	701a      	strb	r2, [r3, #0]
			//xSemaphoreGive(myMutex01Handle);
		}
		osDelay(500);
 8000b4c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b50:	f007 fc70 	bl	8008434 <osDelay>
		HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_6);
 8000b54:	e7c0      	b.n	8000ad8 <uSD_Task_Function+0x8>
 8000b56:	bf00      	nop
 8000b58:	40021800 	.word	0x40021800
 8000b5c:	20000328 	.word	0x20000328
 8000b60:	2000416c 	.word	0x2000416c
 8000b64:	20004170 	.word	0x20004170
 8000b68:	200046b4 	.word	0x200046b4
 8000b6c:	20000000 	.word	0x20000000
 8000b70:	20004488 	.word	0x20004488
 8000b74:	2000032c 	.word	0x2000032c
 8000b78:	20000010 	.word	0x20000010
 8000b7c:	40020c00 	.word	0x40020c00

08000b80 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM9)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a04      	ldr	r2, [pc, #16]	; (8000ba0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d101      	bne.n	8000b96 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		HAL_IncTick();
 8000b92:	f000 fad9 	bl	8001148 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000b96:	bf00      	nop
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40014000 	.word	0x40014000

08000ba4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bc80      	pop	{r7}
 8000bae:	4770      	bx	lr

08000bb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	607b      	str	r3, [r7, #4]
 8000bba:	4b12      	ldr	r3, [pc, #72]	; (8000c04 <HAL_MspInit+0x54>)
 8000bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bbe:	4a11      	ldr	r2, [pc, #68]	; (8000c04 <HAL_MspInit+0x54>)
 8000bc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bc4:	6453      	str	r3, [r2, #68]	; 0x44
 8000bc6:	4b0f      	ldr	r3, [pc, #60]	; (8000c04 <HAL_MspInit+0x54>)
 8000bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bce:	607b      	str	r3, [r7, #4]
 8000bd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	603b      	str	r3, [r7, #0]
 8000bd6:	4b0b      	ldr	r3, [pc, #44]	; (8000c04 <HAL_MspInit+0x54>)
 8000bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bda:	4a0a      	ldr	r2, [pc, #40]	; (8000c04 <HAL_MspInit+0x54>)
 8000bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000be0:	6413      	str	r3, [r2, #64]	; 0x40
 8000be2:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <HAL_MspInit+0x54>)
 8000be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bea:	603b      	str	r3, [r7, #0]
 8000bec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	210f      	movs	r1, #15
 8000bf2:	f06f 0001 	mvn.w	r0, #1
 8000bf6:	f000 fb9a 	bl	800132e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40023800 	.word	0x40023800

08000c08 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b08a      	sub	sp, #40	; 0x28
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]
 8000c1e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a68      	ldr	r2, [pc, #416]	; (8000dc8 <HAL_SD_MspInit+0x1c0>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	f040 80c9 	bne.w	8000dbe <HAL_SD_MspInit+0x1b6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	613b      	str	r3, [r7, #16]
 8000c30:	4b66      	ldr	r3, [pc, #408]	; (8000dcc <HAL_SD_MspInit+0x1c4>)
 8000c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c34:	4a65      	ldr	r2, [pc, #404]	; (8000dcc <HAL_SD_MspInit+0x1c4>)
 8000c36:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c3a:	6453      	str	r3, [r2, #68]	; 0x44
 8000c3c:	4b63      	ldr	r3, [pc, #396]	; (8000dcc <HAL_SD_MspInit+0x1c4>)
 8000c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c44:	613b      	str	r3, [r7, #16]
 8000c46:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c48:	2300      	movs	r3, #0
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	4b5f      	ldr	r3, [pc, #380]	; (8000dcc <HAL_SD_MspInit+0x1c4>)
 8000c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c50:	4a5e      	ldr	r2, [pc, #376]	; (8000dcc <HAL_SD_MspInit+0x1c4>)
 8000c52:	f043 0304 	orr.w	r3, r3, #4
 8000c56:	6313      	str	r3, [r2, #48]	; 0x30
 8000c58:	4b5c      	ldr	r3, [pc, #368]	; (8000dcc <HAL_SD_MspInit+0x1c4>)
 8000c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5c:	f003 0304 	and.w	r3, r3, #4
 8000c60:	60fb      	str	r3, [r7, #12]
 8000c62:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c64:	2300      	movs	r3, #0
 8000c66:	60bb      	str	r3, [r7, #8]
 8000c68:	4b58      	ldr	r3, [pc, #352]	; (8000dcc <HAL_SD_MspInit+0x1c4>)
 8000c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6c:	4a57      	ldr	r2, [pc, #348]	; (8000dcc <HAL_SD_MspInit+0x1c4>)
 8000c6e:	f043 0308 	orr.w	r3, r3, #8
 8000c72:	6313      	str	r3, [r2, #48]	; 0x30
 8000c74:	4b55      	ldr	r3, [pc, #340]	; (8000dcc <HAL_SD_MspInit+0x1c4>)
 8000c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c78:	f003 0308 	and.w	r3, r3, #8
 8000c7c:	60bb      	str	r3, [r7, #8]
 8000c7e:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000c80:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000c84:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c86:	2302      	movs	r3, #2
 8000c88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8e:	2303      	movs	r3, #3
 8000c90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000c92:	230c      	movs	r3, #12
 8000c94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c96:	f107 0314 	add.w	r3, r7, #20
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	484c      	ldr	r0, [pc, #304]	; (8000dd0 <HAL_SD_MspInit+0x1c8>)
 8000c9e:	f000 ff09 	bl	8001ab4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ca2:	2304      	movs	r3, #4
 8000ca4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cae:	2303      	movs	r3, #3
 8000cb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000cb2:	230c      	movs	r3, #12
 8000cb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cb6:	f107 0314 	add.w	r3, r7, #20
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4845      	ldr	r0, [pc, #276]	; (8000dd4 <HAL_SD_MspInit+0x1cc>)
 8000cbe:	f000 fef9 	bl	8001ab4 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8000cc2:	4b45      	ldr	r3, [pc, #276]	; (8000dd8 <HAL_SD_MspInit+0x1d0>)
 8000cc4:	4a45      	ldr	r2, [pc, #276]	; (8000ddc <HAL_SD_MspInit+0x1d4>)
 8000cc6:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8000cc8:	4b43      	ldr	r3, [pc, #268]	; (8000dd8 <HAL_SD_MspInit+0x1d0>)
 8000cca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cce:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000cd0:	4b41      	ldr	r3, [pc, #260]	; (8000dd8 <HAL_SD_MspInit+0x1d0>)
 8000cd2:	2240      	movs	r2, #64	; 0x40
 8000cd4:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cd6:	4b40      	ldr	r3, [pc, #256]	; (8000dd8 <HAL_SD_MspInit+0x1d0>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000cdc:	4b3e      	ldr	r3, [pc, #248]	; (8000dd8 <HAL_SD_MspInit+0x1d0>)
 8000cde:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ce2:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000ce4:	4b3c      	ldr	r3, [pc, #240]	; (8000dd8 <HAL_SD_MspInit+0x1d0>)
 8000ce6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000cea:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000cec:	4b3a      	ldr	r3, [pc, #232]	; (8000dd8 <HAL_SD_MspInit+0x1d0>)
 8000cee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cf2:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8000cf4:	4b38      	ldr	r3, [pc, #224]	; (8000dd8 <HAL_SD_MspInit+0x1d0>)
 8000cf6:	2220      	movs	r2, #32
 8000cf8:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000cfa:	4b37      	ldr	r3, [pc, #220]	; (8000dd8 <HAL_SD_MspInit+0x1d0>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000d00:	4b35      	ldr	r3, [pc, #212]	; (8000dd8 <HAL_SD_MspInit+0x1d0>)
 8000d02:	2204      	movs	r2, #4
 8000d04:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000d06:	4b34      	ldr	r3, [pc, #208]	; (8000dd8 <HAL_SD_MspInit+0x1d0>)
 8000d08:	2203      	movs	r2, #3
 8000d0a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8000d0c:	4b32      	ldr	r3, [pc, #200]	; (8000dd8 <HAL_SD_MspInit+0x1d0>)
 8000d0e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000d12:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000d14:	4b30      	ldr	r3, [pc, #192]	; (8000dd8 <HAL_SD_MspInit+0x1d0>)
 8000d16:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000d1a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8000d1c:	482e      	ldr	r0, [pc, #184]	; (8000dd8 <HAL_SD_MspInit+0x1d0>)
 8000d1e:	f000 fb31 	bl	8001384 <HAL_DMA_Init>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 8000d28:	f7ff ff3c 	bl	8000ba4 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	4a2a      	ldr	r2, [pc, #168]	; (8000dd8 <HAL_SD_MspInit+0x1d0>)
 8000d30:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d32:	4a29      	ldr	r2, [pc, #164]	; (8000dd8 <HAL_SD_MspInit+0x1d0>)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8000d38:	4b29      	ldr	r3, [pc, #164]	; (8000de0 <HAL_SD_MspInit+0x1d8>)
 8000d3a:	4a2a      	ldr	r2, [pc, #168]	; (8000de4 <HAL_SD_MspInit+0x1dc>)
 8000d3c:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8000d3e:	4b28      	ldr	r3, [pc, #160]	; (8000de0 <HAL_SD_MspInit+0x1d8>)
 8000d40:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d44:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d46:	4b26      	ldr	r3, [pc, #152]	; (8000de0 <HAL_SD_MspInit+0x1d8>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d4c:	4b24      	ldr	r3, [pc, #144]	; (8000de0 <HAL_SD_MspInit+0x1d8>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d52:	4b23      	ldr	r3, [pc, #140]	; (8000de0 <HAL_SD_MspInit+0x1d8>)
 8000d54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d58:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000d5a:	4b21      	ldr	r3, [pc, #132]	; (8000de0 <HAL_SD_MspInit+0x1d8>)
 8000d5c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d60:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d62:	4b1f      	ldr	r3, [pc, #124]	; (8000de0 <HAL_SD_MspInit+0x1d8>)
 8000d64:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d68:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8000d6a:	4b1d      	ldr	r3, [pc, #116]	; (8000de0 <HAL_SD_MspInit+0x1d8>)
 8000d6c:	2220      	movs	r2, #32
 8000d6e:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d70:	4b1b      	ldr	r3, [pc, #108]	; (8000de0 <HAL_SD_MspInit+0x1d8>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000d76:	4b1a      	ldr	r3, [pc, #104]	; (8000de0 <HAL_SD_MspInit+0x1d8>)
 8000d78:	2204      	movs	r2, #4
 8000d7a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000d7c:	4b18      	ldr	r3, [pc, #96]	; (8000de0 <HAL_SD_MspInit+0x1d8>)
 8000d7e:	2203      	movs	r2, #3
 8000d80:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8000d82:	4b17      	ldr	r3, [pc, #92]	; (8000de0 <HAL_SD_MspInit+0x1d8>)
 8000d84:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000d88:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000d8a:	4b15      	ldr	r3, [pc, #84]	; (8000de0 <HAL_SD_MspInit+0x1d8>)
 8000d8c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000d90:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8000d92:	4813      	ldr	r0, [pc, #76]	; (8000de0 <HAL_SD_MspInit+0x1d8>)
 8000d94:	f000 faf6 	bl	8001384 <HAL_DMA_Init>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 8000d9e:	f7ff ff01 	bl	8000ba4 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4a0e      	ldr	r2, [pc, #56]	; (8000de0 <HAL_SD_MspInit+0x1d8>)
 8000da6:	641a      	str	r2, [r3, #64]	; 0x40
 8000da8:	4a0d      	ldr	r2, [pc, #52]	; (8000de0 <HAL_SD_MspInit+0x1d8>)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 8000dae:	2200      	movs	r2, #0
 8000db0:	2105      	movs	r1, #5
 8000db2:	2031      	movs	r0, #49	; 0x31
 8000db4:	f000 fabb 	bl	800132e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8000db8:	2031      	movs	r0, #49	; 0x31
 8000dba:	f000 fad4 	bl	8001366 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000dbe:	bf00      	nop
 8000dc0:	3728      	adds	r7, #40	; 0x28
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40012c00 	.word	0x40012c00
 8000dcc:	40023800 	.word	0x40023800
 8000dd0:	40020800 	.word	0x40020800
 8000dd4:	40020c00 	.word	0x40020c00
 8000dd8:	200043a4 	.word	0x200043a4
 8000ddc:	400264a0 	.word	0x400264a0
 8000de0:	200040b4 	.word	0x200040b4
 8000de4:	40026458 	.word	0x40026458

08000de8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b08a      	sub	sp, #40	; 0x28
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df0:	f107 0314 	add.w	r3, r7, #20
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a19      	ldr	r2, [pc, #100]	; (8000e6c <HAL_UART_MspInit+0x84>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d12c      	bne.n	8000e64 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	613b      	str	r3, [r7, #16]
 8000e0e:	4b18      	ldr	r3, [pc, #96]	; (8000e70 <HAL_UART_MspInit+0x88>)
 8000e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e12:	4a17      	ldr	r2, [pc, #92]	; (8000e70 <HAL_UART_MspInit+0x88>)
 8000e14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e18:	6413      	str	r3, [r2, #64]	; 0x40
 8000e1a:	4b15      	ldr	r3, [pc, #84]	; (8000e70 <HAL_UART_MspInit+0x88>)
 8000e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e22:	613b      	str	r3, [r7, #16]
 8000e24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	4b11      	ldr	r3, [pc, #68]	; (8000e70 <HAL_UART_MspInit+0x88>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	4a10      	ldr	r2, [pc, #64]	; (8000e70 <HAL_UART_MspInit+0x88>)
 8000e30:	f043 0308 	orr.w	r3, r3, #8
 8000e34:	6313      	str	r3, [r2, #48]	; 0x30
 8000e36:	4b0e      	ldr	r3, [pc, #56]	; (8000e70 <HAL_UART_MspInit+0x88>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	f003 0308 	and.w	r3, r3, #8
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000e42:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e50:	2303      	movs	r3, #3
 8000e52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e54:	2307      	movs	r3, #7
 8000e56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e58:	f107 0314 	add.w	r3, r7, #20
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4805      	ldr	r0, [pc, #20]	; (8000e74 <HAL_UART_MspInit+0x8c>)
 8000e60:	f000 fe28 	bl	8001ab4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e64:	bf00      	nop
 8000e66:	3728      	adds	r7, #40	; 0x28
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	40004800 	.word	0x40004800
 8000e70:	40023800 	.word	0x40023800
 8000e74:	40020c00 	.word	0x40020c00

08000e78 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08c      	sub	sp, #48	; 0x30
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e80:	2300      	movs	r3, #0
 8000e82:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000e84:	2300      	movs	r3, #0
 8000e86:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM9 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority ,0);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	6879      	ldr	r1, [r7, #4]
 8000e8c:	2018      	movs	r0, #24
 8000e8e:	f000 fa4e 	bl	800132e <HAL_NVIC_SetPriority>

  /* Enable the TIM9 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000e92:	2018      	movs	r0, #24
 8000e94:	f000 fa67 	bl	8001366 <HAL_NVIC_EnableIRQ>
  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 8000e98:	2300      	movs	r3, #0
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	4b1f      	ldr	r3, [pc, #124]	; (8000f1c <HAL_InitTick+0xa4>)
 8000e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea0:	4a1e      	ldr	r2, [pc, #120]	; (8000f1c <HAL_InitTick+0xa4>)
 8000ea2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ea6:	6453      	str	r3, [r2, #68]	; 0x44
 8000ea8:	4b1c      	ldr	r3, [pc, #112]	; (8000f1c <HAL_InitTick+0xa4>)
 8000eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eb0:	60fb      	str	r3, [r7, #12]
 8000eb2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000eb4:	f107 0210 	add.w	r2, r7, #16
 8000eb8:	f107 0314 	add.w	r3, r7, #20
 8000ebc:	4611      	mov	r1, r2
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f001 fc58 	bl	8002774 <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000ec4:	f001 fc34 	bl	8002730 <HAL_RCC_GetPCLK2Freq>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ed0:	4a13      	ldr	r2, [pc, #76]	; (8000f20 <HAL_InitTick+0xa8>)
 8000ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ed6:	0c9b      	lsrs	r3, r3, #18
 8000ed8:	3b01      	subs	r3, #1
 8000eda:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8000edc:	4b11      	ldr	r3, [pc, #68]	; (8000f24 <HAL_InitTick+0xac>)
 8000ede:	4a12      	ldr	r2, [pc, #72]	; (8000f28 <HAL_InitTick+0xb0>)
 8000ee0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 8000ee2:	4b10      	ldr	r3, [pc, #64]	; (8000f24 <HAL_InitTick+0xac>)
 8000ee4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ee8:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 8000eea:	4a0e      	ldr	r2, [pc, #56]	; (8000f24 <HAL_InitTick+0xac>)
 8000eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eee:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 8000ef0:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <HAL_InitTick+0xac>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef6:	4b0b      	ldr	r3, [pc, #44]	; (8000f24 <HAL_InitTick+0xac>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim9) == HAL_OK)
 8000efc:	4809      	ldr	r0, [pc, #36]	; (8000f24 <HAL_InitTick+0xac>)
 8000efe:	f002 ff51 	bl	8003da4 <HAL_TIM_Base_Init>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d104      	bne.n	8000f12 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim9);
 8000f08:	4806      	ldr	r0, [pc, #24]	; (8000f24 <HAL_InitTick+0xac>)
 8000f0a:	f002 ffa3 	bl	8003e54 <HAL_TIM_Base_Start_IT>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	e000      	b.n	8000f14 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3730      	adds	r7, #48	; 0x30
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	40023800 	.word	0x40023800
 8000f20:	431bde83 	.word	0x431bde83
 8000f24:	200046bc 	.word	0x200046bc
 8000f28:	40014000 	.word	0x40014000

08000f2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bc80      	pop	{r7}
 8000f36:	4770      	bx	lr

08000f38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f3c:	e7fe      	b.n	8000f3c <HardFault_Handler+0x4>

08000f3e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f42:	e7fe      	b.n	8000f42 <MemManage_Handler+0x4>

08000f44 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f48:	e7fe      	b.n	8000f48 <BusFault_Handler+0x4>

08000f4a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f4e:	e7fe      	b.n	8000f4e <UsageFault_Handler+0x4>

08000f50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bc80      	pop	{r7}
 8000f5a:	4770      	bx	lr

08000f5c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000f60:	2040      	movs	r0, #64	; 0x40
 8000f62:	f000 ff8d 	bl	8001e80 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000f66:	2080      	movs	r0, #128	; 0x80
 8000f68:	f000 ff8a 	bl	8001e80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000f6c:	bf00      	nop
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8000f74:	4802      	ldr	r0, [pc, #8]	; (8000f80 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8000f76:	f002 ffdb 	bl	8003f30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	200046bc 	.word	0x200046bc

08000f84 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000f88:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000f8c:	f000 ff78 	bl	8001e80 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8000f90:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000f94:	f000 ff74 	bl	8001e80 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000f98:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f9c:	f000 ff70 	bl	8001e80 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8000fa0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000fa4:	f000 ff6c 	bl	8001e80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000fa8:	bf00      	nop
 8000faa:	bd80      	pop	{r7, pc}

08000fac <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8000fb0:	4802      	ldr	r0, [pc, #8]	; (8000fbc <SDIO_IRQHandler+0x10>)
 8000fb2:	f001 fe73 	bl	8002c9c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20004404 	.word	0x20004404

08000fc0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 Stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8000fc4:	4802      	ldr	r0, [pc, #8]	; (8000fd0 <DMA2_Stream3_IRQHandler+0x10>)
 8000fc6:	f000 fb05 	bl	80015d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	200040b4 	.word	0x200040b4

08000fd4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 Stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8000fd8:	4802      	ldr	r0, [pc, #8]	; (8000fe4 <DMA2_Stream6_IRQHandler+0x10>)
 8000fda:	f000 fafb 	bl	80015d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	200043a4 	.word	0x200043a4

08000fe8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ff0:	4a14      	ldr	r2, [pc, #80]	; (8001044 <_sbrk+0x5c>)
 8000ff2:	4b15      	ldr	r3, [pc, #84]	; (8001048 <_sbrk+0x60>)
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ffc:	4b13      	ldr	r3, [pc, #76]	; (800104c <_sbrk+0x64>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d102      	bne.n	800100a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001004:	4b11      	ldr	r3, [pc, #68]	; (800104c <_sbrk+0x64>)
 8001006:	4a12      	ldr	r2, [pc, #72]	; (8001050 <_sbrk+0x68>)
 8001008:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800100a:	4b10      	ldr	r3, [pc, #64]	; (800104c <_sbrk+0x64>)
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4413      	add	r3, r2
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	429a      	cmp	r2, r3
 8001016:	d207      	bcs.n	8001028 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001018:	f009 fcf8 	bl	800aa0c <__errno>
 800101c:	4602      	mov	r2, r0
 800101e:	230c      	movs	r3, #12
 8001020:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001022:	f04f 33ff 	mov.w	r3, #4294967295
 8001026:	e009      	b.n	800103c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001028:	4b08      	ldr	r3, [pc, #32]	; (800104c <_sbrk+0x64>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800102e:	4b07      	ldr	r3, [pc, #28]	; (800104c <_sbrk+0x64>)
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4413      	add	r3, r2
 8001036:	4a05      	ldr	r2, [pc, #20]	; (800104c <_sbrk+0x64>)
 8001038:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800103a:	68fb      	ldr	r3, [r7, #12]
}
 800103c:	4618      	mov	r0, r3
 800103e:	3718      	adds	r7, #24
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	20020000 	.word	0x20020000
 8001048:	00000400 	.word	0x00000400
 800104c:	20000330 	.word	0x20000330
 8001050:	20004bb0 	.word	0x20004bb0

08001054 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001058:	4b12      	ldr	r3, [pc, #72]	; (80010a4 <SystemInit+0x50>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a11      	ldr	r2, [pc, #68]	; (80010a4 <SystemInit+0x50>)
 800105e:	f043 0301 	orr.w	r3, r3, #1
 8001062:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001064:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <SystemInit+0x50>)
 8001066:	2200      	movs	r2, #0
 8001068:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800106a:	4b0e      	ldr	r3, [pc, #56]	; (80010a4 <SystemInit+0x50>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a0d      	ldr	r2, [pc, #52]	; (80010a4 <SystemInit+0x50>)
 8001070:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001074:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001078:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800107a:	4b0a      	ldr	r3, [pc, #40]	; (80010a4 <SystemInit+0x50>)
 800107c:	4a0a      	ldr	r2, [pc, #40]	; (80010a8 <SystemInit+0x54>)
 800107e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001080:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <SystemInit+0x50>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a07      	ldr	r2, [pc, #28]	; (80010a4 <SystemInit+0x50>)
 8001086:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800108a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800108c:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <SystemInit+0x50>)
 800108e:	2200      	movs	r2, #0
 8001090:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001092:	4b06      	ldr	r3, [pc, #24]	; (80010ac <SystemInit+0x58>)
 8001094:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001098:	609a      	str	r2, [r3, #8]
#endif
}
 800109a:	bf00      	nop
 800109c:	46bd      	mov	sp, r7
 800109e:	bc80      	pop	{r7}
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	40023800 	.word	0x40023800
 80010a8:	24003010 	.word	0x24003010
 80010ac:	e000ed00 	.word	0xe000ed00

080010b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80010b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010e8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80010b4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80010b6:	e003      	b.n	80010c0 <LoopCopyDataInit>

080010b8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80010b8:	4b0c      	ldr	r3, [pc, #48]	; (80010ec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80010ba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80010bc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80010be:	3104      	adds	r1, #4

080010c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 80010c0:	480b      	ldr	r0, [pc, #44]	; (80010f0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80010c2:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80010c4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80010c6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80010c8:	d3f6      	bcc.n	80010b8 <CopyDataInit>
  ldr  r2, =_sbss
 80010ca:	4a0b      	ldr	r2, [pc, #44]	; (80010f8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80010cc:	e002      	b.n	80010d4 <LoopFillZerobss>

080010ce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80010ce:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80010d0:	f842 3b04 	str.w	r3, [r2], #4

080010d4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr  r3, = _ebss
 80010d4:	4b09      	ldr	r3, [pc, #36]	; (80010fc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80010d6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80010d8:	d3f9      	bcc.n	80010ce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80010da:	f7ff ffbb 	bl	8001054 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010de:	f009 fc9b 	bl	800aa18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010e2:	f7ff fa77 	bl	80005d4 <main>
  bx  lr
 80010e6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80010e8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80010ec:	0802c5ac 	.word	0x0802c5ac
  ldr  r0, =_sdata
 80010f0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80010f4:	200000b8 	.word	0x200000b8
  ldr  r2, =_sbss
 80010f8:	200000b8 	.word	0x200000b8
  ldr  r3, = _ebss
 80010fc:	20004bb0 	.word	0x20004bb0

08001100 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001100:	e7fe      	b.n	8001100 <ADC_IRQHandler>
	...

08001104 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001108:	4b0e      	ldr	r3, [pc, #56]	; (8001144 <HAL_Init+0x40>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a0d      	ldr	r2, [pc, #52]	; (8001144 <HAL_Init+0x40>)
 800110e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001112:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8001114:	4b0b      	ldr	r3, [pc, #44]	; (8001144 <HAL_Init+0x40>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a0a      	ldr	r2, [pc, #40]	; (8001144 <HAL_Init+0x40>)
 800111a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800111e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001120:	4b08      	ldr	r3, [pc, #32]	; (8001144 <HAL_Init+0x40>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a07      	ldr	r2, [pc, #28]	; (8001144 <HAL_Init+0x40>)
 8001126:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800112a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800112c:	2003      	movs	r0, #3
 800112e:	f000 f8f3 	bl	8001318 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001132:	2000      	movs	r0, #0
 8001134:	f7ff fea0 	bl	8000e78 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001138:	f7ff fd3a 	bl	8000bb0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40023c00 	.word	0x40023c00

08001148 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800114c:	4b05      	ldr	r3, [pc, #20]	; (8001164 <HAL_IncTick+0x1c>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	461a      	mov	r2, r3
 8001152:	4b05      	ldr	r3, [pc, #20]	; (8001168 <HAL_IncTick+0x20>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4413      	add	r3, r2
 8001158:	4a03      	ldr	r2, [pc, #12]	; (8001168 <HAL_IncTick+0x20>)
 800115a:	6013      	str	r3, [r2, #0]
}
 800115c:	bf00      	nop
 800115e:	46bd      	mov	sp, r7
 8001160:	bc80      	pop	{r7}
 8001162:	4770      	bx	lr
 8001164:	2000004c 	.word	0x2000004c
 8001168:	20004704 	.word	0x20004704

0800116c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  return uwTick;
 8001170:	4b02      	ldr	r3, [pc, #8]	; (800117c <HAL_GetTick+0x10>)
 8001172:	681b      	ldr	r3, [r3, #0]
}
 8001174:	4618      	mov	r0, r3
 8001176:	46bd      	mov	sp, r7
 8001178:	bc80      	pop	{r7}
 800117a:	4770      	bx	lr
 800117c:	20004704 	.word	0x20004704

08001180 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001188:	f7ff fff0 	bl	800116c <HAL_GetTick>
 800118c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001198:	d005      	beq.n	80011a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800119a:	4b09      	ldr	r3, [pc, #36]	; (80011c0 <HAL_Delay+0x40>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	461a      	mov	r2, r3
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	4413      	add	r3, r2
 80011a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011a6:	bf00      	nop
 80011a8:	f7ff ffe0 	bl	800116c <HAL_GetTick>
 80011ac:	4602      	mov	r2, r0
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	68fa      	ldr	r2, [r7, #12]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d8f7      	bhi.n	80011a8 <HAL_Delay+0x28>
  {
  }
}
 80011b8:	bf00      	nop
 80011ba:	3710      	adds	r7, #16
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	2000004c 	.word	0x2000004c

080011c4 <__NVIC_SetPriorityGrouping>:
{
 80011c4:	b480      	push	{r7}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f003 0307 	and.w	r3, r3, #7
 80011d2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011d4:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <__NVIC_SetPriorityGrouping+0x44>)
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011da:	68ba      	ldr	r2, [r7, #8]
 80011dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011e0:	4013      	ands	r3, r2
 80011e2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011f6:	4a04      	ldr	r2, [pc, #16]	; (8001208 <__NVIC_SetPriorityGrouping+0x44>)
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	60d3      	str	r3, [r2, #12]
}
 80011fc:	bf00      	nop
 80011fe:	3714      	adds	r7, #20
 8001200:	46bd      	mov	sp, r7
 8001202:	bc80      	pop	{r7}
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	e000ed00 	.word	0xe000ed00

0800120c <__NVIC_GetPriorityGrouping>:
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001210:	4b04      	ldr	r3, [pc, #16]	; (8001224 <__NVIC_GetPriorityGrouping+0x18>)
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	0a1b      	lsrs	r3, r3, #8
 8001216:	f003 0307 	and.w	r3, r3, #7
}
 800121a:	4618      	mov	r0, r3
 800121c:	46bd      	mov	sp, r7
 800121e:	bc80      	pop	{r7}
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	e000ed00 	.word	0xe000ed00

08001228 <__NVIC_EnableIRQ>:
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001236:	2b00      	cmp	r3, #0
 8001238:	db0b      	blt.n	8001252 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	f003 021f 	and.w	r2, r3, #31
 8001240:	4906      	ldr	r1, [pc, #24]	; (800125c <__NVIC_EnableIRQ+0x34>)
 8001242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001246:	095b      	lsrs	r3, r3, #5
 8001248:	2001      	movs	r0, #1
 800124a:	fa00 f202 	lsl.w	r2, r0, r2
 800124e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001252:	bf00      	nop
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	bc80      	pop	{r7}
 800125a:	4770      	bx	lr
 800125c:	e000e100 	.word	0xe000e100

08001260 <__NVIC_SetPriority>:
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	6039      	str	r1, [r7, #0]
 800126a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800126c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001270:	2b00      	cmp	r3, #0
 8001272:	db0a      	blt.n	800128a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	b2da      	uxtb	r2, r3
 8001278:	490c      	ldr	r1, [pc, #48]	; (80012ac <__NVIC_SetPriority+0x4c>)
 800127a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127e:	0112      	lsls	r2, r2, #4
 8001280:	b2d2      	uxtb	r2, r2
 8001282:	440b      	add	r3, r1
 8001284:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001288:	e00a      	b.n	80012a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	b2da      	uxtb	r2, r3
 800128e:	4908      	ldr	r1, [pc, #32]	; (80012b0 <__NVIC_SetPriority+0x50>)
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	f003 030f 	and.w	r3, r3, #15
 8001296:	3b04      	subs	r3, #4
 8001298:	0112      	lsls	r2, r2, #4
 800129a:	b2d2      	uxtb	r2, r2
 800129c:	440b      	add	r3, r1
 800129e:	761a      	strb	r2, [r3, #24]
}
 80012a0:	bf00      	nop
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bc80      	pop	{r7}
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	e000e100 	.word	0xe000e100
 80012b0:	e000ed00 	.word	0xe000ed00

080012b4 <NVIC_EncodePriority>:
{
 80012b4:	b480      	push	{r7}
 80012b6:	b089      	sub	sp, #36	; 0x24
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	60b9      	str	r1, [r7, #8]
 80012be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	f003 0307 	and.w	r3, r3, #7
 80012c6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	f1c3 0307 	rsb	r3, r3, #7
 80012ce:	2b04      	cmp	r3, #4
 80012d0:	bf28      	it	cs
 80012d2:	2304      	movcs	r3, #4
 80012d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	3304      	adds	r3, #4
 80012da:	2b06      	cmp	r3, #6
 80012dc:	d902      	bls.n	80012e4 <NVIC_EncodePriority+0x30>
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	3b03      	subs	r3, #3
 80012e2:	e000      	b.n	80012e6 <NVIC_EncodePriority+0x32>
 80012e4:	2300      	movs	r3, #0
 80012e6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e8:	f04f 32ff 	mov.w	r2, #4294967295
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	43da      	mvns	r2, r3
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	401a      	ands	r2, r3
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	fa01 f303 	lsl.w	r3, r1, r3
 8001306:	43d9      	mvns	r1, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800130c:	4313      	orrs	r3, r2
}
 800130e:	4618      	mov	r0, r3
 8001310:	3724      	adds	r7, #36	; 0x24
 8001312:	46bd      	mov	sp, r7
 8001314:	bc80      	pop	{r7}
 8001316:	4770      	bx	lr

08001318 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f7ff ff4f 	bl	80011c4 <__NVIC_SetPriorityGrouping>
}
 8001326:	bf00      	nop
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800132e:	b580      	push	{r7, lr}
 8001330:	b086      	sub	sp, #24
 8001332:	af00      	add	r7, sp, #0
 8001334:	4603      	mov	r3, r0
 8001336:	60b9      	str	r1, [r7, #8]
 8001338:	607a      	str	r2, [r7, #4]
 800133a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800133c:	2300      	movs	r3, #0
 800133e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001340:	f7ff ff64 	bl	800120c <__NVIC_GetPriorityGrouping>
 8001344:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	68b9      	ldr	r1, [r7, #8]
 800134a:	6978      	ldr	r0, [r7, #20]
 800134c:	f7ff ffb2 	bl	80012b4 <NVIC_EncodePriority>
 8001350:	4602      	mov	r2, r0
 8001352:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001356:	4611      	mov	r1, r2
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff ff81 	bl	8001260 <__NVIC_SetPriority>
}
 800135e:	bf00      	nop
 8001360:	3718      	adds	r7, #24
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	b082      	sub	sp, #8
 800136a:	af00      	add	r7, sp, #0
 800136c:	4603      	mov	r3, r0
 800136e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001370:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff ff57 	bl	8001228 <__NVIC_EnableIRQ>
}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
	...

08001384 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b086      	sub	sp, #24
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800138c:	2300      	movs	r3, #0
 800138e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001390:	f7ff feec 	bl	800116c <HAL_GetTick>
 8001394:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d101      	bne.n	80013a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	e099      	b.n	80014d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2200      	movs	r2, #0
 80013a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2202      	movs	r2, #2
 80013ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f022 0201 	bic.w	r2, r2, #1
 80013be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013c0:	e00f      	b.n	80013e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013c2:	f7ff fed3 	bl	800116c <HAL_GetTick>
 80013c6:	4602      	mov	r2, r0
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	2b05      	cmp	r3, #5
 80013ce:	d908      	bls.n	80013e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2220      	movs	r2, #32
 80013d4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2203      	movs	r2, #3
 80013da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e078      	b.n	80014d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0301 	and.w	r3, r3, #1
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d1e8      	bne.n	80013c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80013f8:	697a      	ldr	r2, [r7, #20]
 80013fa:	4b38      	ldr	r3, [pc, #224]	; (80014dc <HAL_DMA_Init+0x158>)
 80013fc:	4013      	ands	r3, r2
 80013fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	685a      	ldr	r2, [r3, #4]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800140e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	691b      	ldr	r3, [r3, #16]
 8001414:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800141a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	699b      	ldr	r3, [r3, #24]
 8001420:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001426:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6a1b      	ldr	r3, [r3, #32]
 800142c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800142e:	697a      	ldr	r2, [r7, #20]
 8001430:	4313      	orrs	r3, r2
 8001432:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001438:	2b04      	cmp	r3, #4
 800143a:	d107      	bne.n	800144c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001444:	4313      	orrs	r3, r2
 8001446:	697a      	ldr	r2, [r7, #20]
 8001448:	4313      	orrs	r3, r2
 800144a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	697a      	ldr	r2, [r7, #20]
 8001452:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	695b      	ldr	r3, [r3, #20]
 800145a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	f023 0307 	bic.w	r3, r3, #7
 8001462:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001468:	697a      	ldr	r2, [r7, #20]
 800146a:	4313      	orrs	r3, r2
 800146c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001472:	2b04      	cmp	r3, #4
 8001474:	d117      	bne.n	80014a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800147a:	697a      	ldr	r2, [r7, #20]
 800147c:	4313      	orrs	r3, r2
 800147e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001484:	2b00      	cmp	r3, #0
 8001486:	d00e      	beq.n	80014a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f000 fa99 	bl	80019c0 <DMA_CheckFifoParam>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d008      	beq.n	80014a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2240      	movs	r2, #64	; 0x40
 8001498:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2201      	movs	r2, #1
 800149e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80014a2:	2301      	movs	r3, #1
 80014a4:	e016      	b.n	80014d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	697a      	ldr	r2, [r7, #20]
 80014ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f000 fa52 	bl	8001958 <DMA_CalcBaseAndBitshift>
 80014b4:	4603      	mov	r3, r0
 80014b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014bc:	223f      	movs	r2, #63	; 0x3f
 80014be:	409a      	lsls	r2, r3
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2200      	movs	r2, #0
 80014c8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2201      	movs	r2, #1
 80014ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80014d2:	2300      	movs	r3, #0
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3718      	adds	r7, #24
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	f010803f 	.word	0xf010803f

080014e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	607a      	str	r2, [r7, #4]
 80014ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80014ee:	2300      	movs	r3, #0
 80014f0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014f6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d101      	bne.n	8001506 <HAL_DMA_Start_IT+0x26>
 8001502:	2302      	movs	r3, #2
 8001504:	e040      	b.n	8001588 <HAL_DMA_Start_IT+0xa8>
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	2201      	movs	r2, #1
 800150a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001514:	b2db      	uxtb	r3, r3
 8001516:	2b01      	cmp	r3, #1
 8001518:	d12f      	bne.n	800157a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	2202      	movs	r2, #2
 800151e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	2200      	movs	r2, #0
 8001526:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	68b9      	ldr	r1, [r7, #8]
 800152e:	68f8      	ldr	r0, [r7, #12]
 8001530:	f000 f9e5 	bl	80018fe <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001538:	223f      	movs	r2, #63	; 0x3f
 800153a:	409a      	lsls	r2, r3
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f042 0216 	orr.w	r2, r2, #22
 800154e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001554:	2b00      	cmp	r3, #0
 8001556:	d007      	beq.n	8001568 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f042 0208 	orr.w	r2, r2, #8
 8001566:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f042 0201 	orr.w	r2, r2, #1
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	e005      	b.n	8001586 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	2200      	movs	r2, #0
 800157e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001582:	2302      	movs	r3, #2
 8001584:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001586:	7dfb      	ldrb	r3, [r7, #23]
}
 8001588:	4618      	mov	r0, r3
 800158a:	3718      	adds	r7, #24
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}

08001590 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d004      	beq.n	80015ae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2280      	movs	r2, #128	; 0x80
 80015a8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e00c      	b.n	80015c8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2205      	movs	r2, #5
 80015b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f022 0201 	bic.w	r2, r2, #1
 80015c4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80015c6:	2300      	movs	r3, #0
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bc80      	pop	{r7}
 80015d0:	4770      	bx	lr
	...

080015d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80015dc:	2300      	movs	r3, #0
 80015de:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80015e0:	4b92      	ldr	r3, [pc, #584]	; (800182c <HAL_DMA_IRQHandler+0x258>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a92      	ldr	r2, [pc, #584]	; (8001830 <HAL_DMA_IRQHandler+0x25c>)
 80015e6:	fba2 2303 	umull	r2, r3, r2, r3
 80015ea:	0a9b      	lsrs	r3, r3, #10
 80015ec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015fe:	2208      	movs	r2, #8
 8001600:	409a      	lsls	r2, r3
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	4013      	ands	r3, r2
 8001606:	2b00      	cmp	r3, #0
 8001608:	d01a      	beq.n	8001640 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 0304 	and.w	r3, r3, #4
 8001614:	2b00      	cmp	r3, #0
 8001616:	d013      	beq.n	8001640 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f022 0204 	bic.w	r2, r2, #4
 8001626:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800162c:	2208      	movs	r2, #8
 800162e:	409a      	lsls	r2, r3
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001638:	f043 0201 	orr.w	r2, r3, #1
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001644:	2201      	movs	r2, #1
 8001646:	409a      	lsls	r2, r3
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	4013      	ands	r3, r2
 800164c:	2b00      	cmp	r3, #0
 800164e:	d012      	beq.n	8001676 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	695b      	ldr	r3, [r3, #20]
 8001656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800165a:	2b00      	cmp	r3, #0
 800165c:	d00b      	beq.n	8001676 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001662:	2201      	movs	r2, #1
 8001664:	409a      	lsls	r2, r3
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800166e:	f043 0202 	orr.w	r2, r3, #2
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800167a:	2204      	movs	r2, #4
 800167c:	409a      	lsls	r2, r3
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	4013      	ands	r3, r2
 8001682:	2b00      	cmp	r3, #0
 8001684:	d012      	beq.n	80016ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0302 	and.w	r3, r3, #2
 8001690:	2b00      	cmp	r3, #0
 8001692:	d00b      	beq.n	80016ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001698:	2204      	movs	r2, #4
 800169a:	409a      	lsls	r2, r3
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016a4:	f043 0204 	orr.w	r2, r3, #4
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016b0:	2210      	movs	r2, #16
 80016b2:	409a      	lsls	r2, r3
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	4013      	ands	r3, r2
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d043      	beq.n	8001744 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0308 	and.w	r3, r3, #8
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d03c      	beq.n	8001744 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ce:	2210      	movs	r2, #16
 80016d0:	409a      	lsls	r2, r3
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d018      	beq.n	8001716 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d108      	bne.n	8001704 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d024      	beq.n	8001744 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	4798      	blx	r3
 8001702:	e01f      	b.n	8001744 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001708:	2b00      	cmp	r3, #0
 800170a:	d01b      	beq.n	8001744 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	4798      	blx	r3
 8001714:	e016      	b.n	8001744 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001720:	2b00      	cmp	r3, #0
 8001722:	d107      	bne.n	8001734 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f022 0208 	bic.w	r2, r2, #8
 8001732:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001738:	2b00      	cmp	r3, #0
 800173a:	d003      	beq.n	8001744 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001748:	2220      	movs	r2, #32
 800174a:	409a      	lsls	r2, r3
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	4013      	ands	r3, r2
 8001750:	2b00      	cmp	r3, #0
 8001752:	f000 808e 	beq.w	8001872 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0310 	and.w	r3, r3, #16
 8001760:	2b00      	cmp	r3, #0
 8001762:	f000 8086 	beq.w	8001872 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800176a:	2220      	movs	r2, #32
 800176c:	409a      	lsls	r2, r3
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001778:	b2db      	uxtb	r3, r3
 800177a:	2b05      	cmp	r3, #5
 800177c:	d136      	bne.n	80017ec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f022 0216 	bic.w	r2, r2, #22
 800178c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	695a      	ldr	r2, [r3, #20]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800179c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d103      	bne.n	80017ae <HAL_DMA_IRQHandler+0x1da>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d007      	beq.n	80017be <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f022 0208 	bic.w	r2, r2, #8
 80017bc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017c2:	223f      	movs	r2, #63	; 0x3f
 80017c4:	409a      	lsls	r2, r3
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2200      	movs	r2, #0
 80017ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2201      	movs	r2, #1
 80017d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d07d      	beq.n	80018de <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	4798      	blx	r3
        }
        return;
 80017ea:	e078      	b.n	80018de <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d01c      	beq.n	8001834 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d108      	bne.n	800181a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180c:	2b00      	cmp	r3, #0
 800180e:	d030      	beq.n	8001872 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	4798      	blx	r3
 8001818:	e02b      	b.n	8001872 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800181e:	2b00      	cmp	r3, #0
 8001820:	d027      	beq.n	8001872 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	4798      	blx	r3
 800182a:	e022      	b.n	8001872 <HAL_DMA_IRQHandler+0x29e>
 800182c:	20000044 	.word	0x20000044
 8001830:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800183e:	2b00      	cmp	r3, #0
 8001840:	d10f      	bne.n	8001862 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f022 0210 	bic.w	r2, r2, #16
 8001850:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2201      	movs	r2, #1
 800185e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001866:	2b00      	cmp	r3, #0
 8001868:	d003      	beq.n	8001872 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001876:	2b00      	cmp	r3, #0
 8001878:	d032      	beq.n	80018e0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	2b00      	cmp	r3, #0
 8001884:	d022      	beq.n	80018cc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2205      	movs	r2, #5
 800188a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f022 0201 	bic.w	r2, r2, #1
 800189c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	3301      	adds	r3, #1
 80018a2:	60bb      	str	r3, [r7, #8]
 80018a4:	697a      	ldr	r2, [r7, #20]
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d307      	bcc.n	80018ba <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0301 	and.w	r3, r3, #1
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d1f2      	bne.n	800189e <HAL_DMA_IRQHandler+0x2ca>
 80018b8:	e000      	b.n	80018bc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80018ba:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2201      	movs	r2, #1
 80018c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d005      	beq.n	80018e0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	4798      	blx	r3
 80018dc:	e000      	b.n	80018e0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80018de:	bf00      	nop
    }
  }
}
 80018e0:	3718      	adds	r7, #24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop

080018e8 <HAL_DMA_GetError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bc80      	pop	{r7}
 80018fc:	4770      	bx	lr

080018fe <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018fe:	b480      	push	{r7}
 8001900:	b085      	sub	sp, #20
 8001902:	af00      	add	r7, sp, #0
 8001904:	60f8      	str	r0, [r7, #12]
 8001906:	60b9      	str	r1, [r7, #8]
 8001908:	607a      	str	r2, [r7, #4]
 800190a:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800191a:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	683a      	ldr	r2, [r7, #0]
 8001922:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	2b40      	cmp	r3, #64	; 0x40
 800192a:	d108      	bne.n	800193e <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	68ba      	ldr	r2, [r7, #8]
 800193a:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800193c:	e007      	b.n	800194e <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	68ba      	ldr	r2, [r7, #8]
 8001944:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	60da      	str	r2, [r3, #12]
}
 800194e:	bf00      	nop
 8001950:	3714      	adds	r7, #20
 8001952:	46bd      	mov	sp, r7
 8001954:	bc80      	pop	{r7}
 8001956:	4770      	bx	lr

08001958 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	b2db      	uxtb	r3, r3
 8001966:	3b10      	subs	r3, #16
 8001968:	4a13      	ldr	r2, [pc, #76]	; (80019b8 <DMA_CalcBaseAndBitshift+0x60>)
 800196a:	fba2 2303 	umull	r2, r3, r2, r3
 800196e:	091b      	lsrs	r3, r3, #4
 8001970:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001972:	4a12      	ldr	r2, [pc, #72]	; (80019bc <DMA_CalcBaseAndBitshift+0x64>)
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	4413      	add	r3, r2
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	461a      	mov	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2b03      	cmp	r3, #3
 8001984:	d909      	bls.n	800199a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800198e:	f023 0303 	bic.w	r3, r3, #3
 8001992:	1d1a      	adds	r2, r3, #4
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	659a      	str	r2, [r3, #88]	; 0x58
 8001998:	e007      	b.n	80019aa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80019a2:	f023 0303 	bic.w	r3, r3, #3
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3714      	adds	r7, #20
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bc80      	pop	{r7}
 80019b6:	4770      	bx	lr
 80019b8:	aaaaaaab 	.word	0xaaaaaaab
 80019bc:	0800ace8 	.word	0x0800ace8

080019c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019c8:	2300      	movs	r3, #0
 80019ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	699b      	ldr	r3, [r3, #24]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d11f      	bne.n	8001a1a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	2b03      	cmp	r3, #3
 80019de:	d855      	bhi.n	8001a8c <DMA_CheckFifoParam+0xcc>
 80019e0:	a201      	add	r2, pc, #4	; (adr r2, 80019e8 <DMA_CheckFifoParam+0x28>)
 80019e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019e6:	bf00      	nop
 80019e8:	080019f9 	.word	0x080019f9
 80019ec:	08001a0b 	.word	0x08001a0b
 80019f0:	080019f9 	.word	0x080019f9
 80019f4:	08001a8d 	.word	0x08001a8d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d045      	beq.n	8001a90 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a08:	e042      	b.n	8001a90 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a0e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a12:	d13f      	bne.n	8001a94 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a18:	e03c      	b.n	8001a94 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	699b      	ldr	r3, [r3, #24]
 8001a1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a22:	d121      	bne.n	8001a68 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	2b03      	cmp	r3, #3
 8001a28:	d836      	bhi.n	8001a98 <DMA_CheckFifoParam+0xd8>
 8001a2a:	a201      	add	r2, pc, #4	; (adr r2, 8001a30 <DMA_CheckFifoParam+0x70>)
 8001a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a30:	08001a41 	.word	0x08001a41
 8001a34:	08001a47 	.word	0x08001a47
 8001a38:	08001a41 	.word	0x08001a41
 8001a3c:	08001a59 	.word	0x08001a59
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	73fb      	strb	r3, [r7, #15]
      break;
 8001a44:	e02f      	b.n	8001aa6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d024      	beq.n	8001a9c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a56:	e021      	b.n	8001a9c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a5c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a60:	d11e      	bne.n	8001aa0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001a66:	e01b      	b.n	8001aa0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d902      	bls.n	8001a74 <DMA_CheckFifoParam+0xb4>
 8001a6e:	2b03      	cmp	r3, #3
 8001a70:	d003      	beq.n	8001a7a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001a72:	e018      	b.n	8001aa6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	73fb      	strb	r3, [r7, #15]
      break;
 8001a78:	e015      	b.n	8001aa6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d00e      	beq.n	8001aa4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	73fb      	strb	r3, [r7, #15]
      break;
 8001a8a:	e00b      	b.n	8001aa4 <DMA_CheckFifoParam+0xe4>
      break;
 8001a8c:	bf00      	nop
 8001a8e:	e00a      	b.n	8001aa6 <DMA_CheckFifoParam+0xe6>
      break;
 8001a90:	bf00      	nop
 8001a92:	e008      	b.n	8001aa6 <DMA_CheckFifoParam+0xe6>
      break;
 8001a94:	bf00      	nop
 8001a96:	e006      	b.n	8001aa6 <DMA_CheckFifoParam+0xe6>
      break;
 8001a98:	bf00      	nop
 8001a9a:	e004      	b.n	8001aa6 <DMA_CheckFifoParam+0xe6>
      break;
 8001a9c:	bf00      	nop
 8001a9e:	e002      	b.n	8001aa6 <DMA_CheckFifoParam+0xe6>
      break;   
 8001aa0:	bf00      	nop
 8001aa2:	e000      	b.n	8001aa6 <DMA_CheckFifoParam+0xe6>
      break;
 8001aa4:	bf00      	nop
    }
  } 
  
  return status; 
 8001aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3714      	adds	r7, #20
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bc80      	pop	{r7}
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop

08001ab4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b087      	sub	sp, #28
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ac2:	e16f      	b.n	8001da4 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	2101      	movs	r1, #1
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	f000 8161 	beq.w	8001d9e <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d00b      	beq.n	8001afc <HAL_GPIO_Init+0x48>
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d007      	beq.n	8001afc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001af0:	2b11      	cmp	r3, #17
 8001af2:	d003      	beq.n	8001afc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	2b12      	cmp	r3, #18
 8001afa:	d130      	bne.n	8001b5e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	2203      	movs	r2, #3
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	4013      	ands	r3, r2
 8001b12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	68da      	ldr	r2, [r3, #12]
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	693a      	ldr	r2, [r7, #16]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	693a      	ldr	r2, [r7, #16]
 8001b2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b32:	2201      	movs	r2, #1
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	43db      	mvns	r3, r3
 8001b3c:	693a      	ldr	r2, [r7, #16]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	091b      	lsrs	r3, r3, #4
 8001b48:	f003 0201 	and.w	r2, r3, #1
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	2203      	movs	r2, #3
 8001b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6e:	43db      	mvns	r3, r3
 8001b70:	693a      	ldr	r2, [r7, #16]
 8001b72:	4013      	ands	r3, r2
 8001b74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	689a      	ldr	r2, [r3, #8]
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	60da      	str	r2, [r3, #12]

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d003      	beq.n	8001b9e <HAL_GPIO_Init+0xea>
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	2b12      	cmp	r3, #18
 8001b9c:	d123      	bne.n	8001be6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	08da      	lsrs	r2, r3, #3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	3208      	adds	r2, #8
 8001ba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001baa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	f003 0307 	and.w	r3, r3, #7
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	220f      	movs	r2, #15
 8001bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bba:	43db      	mvns	r3, r3
 8001bbc:	693a      	ldr	r2, [r7, #16]
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	691a      	ldr	r2, [r3, #16]
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	f003 0307 	and.w	r3, r3, #7
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	08da      	lsrs	r2, r3, #3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	3208      	adds	r2, #8
 8001be0:	6939      	ldr	r1, [r7, #16]
 8001be2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	2203      	movs	r2, #3
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	43db      	mvns	r3, r3
 8001bf8:	693a      	ldr	r2, [r7, #16]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f003 0203 	and.w	r2, r3, #3
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	f000 80bb 	beq.w	8001d9e <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c28:	2300      	movs	r3, #0
 8001c2a:	60bb      	str	r3, [r7, #8]
 8001c2c:	4b64      	ldr	r3, [pc, #400]	; (8001dc0 <HAL_GPIO_Init+0x30c>)
 8001c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c30:	4a63      	ldr	r2, [pc, #396]	; (8001dc0 <HAL_GPIO_Init+0x30c>)
 8001c32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c36:	6453      	str	r3, [r2, #68]	; 0x44
 8001c38:	4b61      	ldr	r3, [pc, #388]	; (8001dc0 <HAL_GPIO_Init+0x30c>)
 8001c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c40:	60bb      	str	r3, [r7, #8]
 8001c42:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c44:	4a5f      	ldr	r2, [pc, #380]	; (8001dc4 <HAL_GPIO_Init+0x310>)
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	089b      	lsrs	r3, r3, #2
 8001c4a:	3302      	adds	r3, #2
 8001c4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c50:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	f003 0303 	and.w	r3, r3, #3
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	220f      	movs	r2, #15
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	43db      	mvns	r3, r3
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	4013      	ands	r3, r2
 8001c66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	4a57      	ldr	r2, [pc, #348]	; (8001dc8 <HAL_GPIO_Init+0x314>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d031      	beq.n	8001cd4 <HAL_GPIO_Init+0x220>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	4a56      	ldr	r2, [pc, #344]	; (8001dcc <HAL_GPIO_Init+0x318>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d02b      	beq.n	8001cd0 <HAL_GPIO_Init+0x21c>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	4a55      	ldr	r2, [pc, #340]	; (8001dd0 <HAL_GPIO_Init+0x31c>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d025      	beq.n	8001ccc <HAL_GPIO_Init+0x218>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	4a54      	ldr	r2, [pc, #336]	; (8001dd4 <HAL_GPIO_Init+0x320>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d01f      	beq.n	8001cc8 <HAL_GPIO_Init+0x214>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	4a53      	ldr	r2, [pc, #332]	; (8001dd8 <HAL_GPIO_Init+0x324>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d019      	beq.n	8001cc4 <HAL_GPIO_Init+0x210>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	4a52      	ldr	r2, [pc, #328]	; (8001ddc <HAL_GPIO_Init+0x328>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d013      	beq.n	8001cc0 <HAL_GPIO_Init+0x20c>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	4a51      	ldr	r2, [pc, #324]	; (8001de0 <HAL_GPIO_Init+0x32c>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d00d      	beq.n	8001cbc <HAL_GPIO_Init+0x208>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4a50      	ldr	r2, [pc, #320]	; (8001de4 <HAL_GPIO_Init+0x330>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d007      	beq.n	8001cb8 <HAL_GPIO_Init+0x204>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	4a4f      	ldr	r2, [pc, #316]	; (8001de8 <HAL_GPIO_Init+0x334>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d101      	bne.n	8001cb4 <HAL_GPIO_Init+0x200>
 8001cb0:	2308      	movs	r3, #8
 8001cb2:	e010      	b.n	8001cd6 <HAL_GPIO_Init+0x222>
 8001cb4:	2309      	movs	r3, #9
 8001cb6:	e00e      	b.n	8001cd6 <HAL_GPIO_Init+0x222>
 8001cb8:	2307      	movs	r3, #7
 8001cba:	e00c      	b.n	8001cd6 <HAL_GPIO_Init+0x222>
 8001cbc:	2306      	movs	r3, #6
 8001cbe:	e00a      	b.n	8001cd6 <HAL_GPIO_Init+0x222>
 8001cc0:	2305      	movs	r3, #5
 8001cc2:	e008      	b.n	8001cd6 <HAL_GPIO_Init+0x222>
 8001cc4:	2304      	movs	r3, #4
 8001cc6:	e006      	b.n	8001cd6 <HAL_GPIO_Init+0x222>
 8001cc8:	2303      	movs	r3, #3
 8001cca:	e004      	b.n	8001cd6 <HAL_GPIO_Init+0x222>
 8001ccc:	2302      	movs	r3, #2
 8001cce:	e002      	b.n	8001cd6 <HAL_GPIO_Init+0x222>
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e000      	b.n	8001cd6 <HAL_GPIO_Init+0x222>
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	697a      	ldr	r2, [r7, #20]
 8001cd8:	f002 0203 	and.w	r2, r2, #3
 8001cdc:	0092      	lsls	r2, r2, #2
 8001cde:	4093      	lsls	r3, r2
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ce8:	4936      	ldr	r1, [pc, #216]	; (8001dc4 <HAL_GPIO_Init+0x310>)
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	089b      	lsrs	r3, r3, #2
 8001cee:	3302      	adds	r3, #2
 8001cf0:	693a      	ldr	r2, [r7, #16]
 8001cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cf6:	4b3d      	ldr	r3, [pc, #244]	; (8001dec <HAL_GPIO_Init+0x338>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	43db      	mvns	r3, r3
 8001d00:	693a      	ldr	r2, [r7, #16]
 8001d02:	4013      	ands	r3, r2
 8001d04:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d003      	beq.n	8001d1a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001d12:	693a      	ldr	r2, [r7, #16]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d1a:	4a34      	ldr	r2, [pc, #208]	; (8001dec <HAL_GPIO_Init+0x338>)
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d20:	4b32      	ldr	r3, [pc, #200]	; (8001dec <HAL_GPIO_Init+0x338>)
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d003      	beq.n	8001d44 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001d3c:	693a      	ldr	r2, [r7, #16]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001d44:	4a29      	ldr	r2, [pc, #164]	; (8001dec <HAL_GPIO_Init+0x338>)
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d4a:	4b28      	ldr	r3, [pc, #160]	; (8001dec <HAL_GPIO_Init+0x338>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	43db      	mvns	r3, r3
 8001d54:	693a      	ldr	r2, [r7, #16]
 8001d56:	4013      	ands	r3, r2
 8001d58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d003      	beq.n	8001d6e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001d6e:	4a1f      	ldr	r2, [pc, #124]	; (8001dec <HAL_GPIO_Init+0x338>)
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d74:	4b1d      	ldr	r3, [pc, #116]	; (8001dec <HAL_GPIO_Init+0x338>)
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	4013      	ands	r3, r2
 8001d82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d003      	beq.n	8001d98 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8001d90:	693a      	ldr	r2, [r7, #16]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001d98:	4a14      	ldr	r2, [pc, #80]	; (8001dec <HAL_GPIO_Init+0x338>)
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	3301      	adds	r3, #1
 8001da2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	fa22 f303 	lsr.w	r3, r2, r3
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	f47f ae88 	bne.w	8001ac4 <HAL_GPIO_Init+0x10>
  }
}
 8001db4:	bf00      	nop
 8001db6:	371c      	adds	r7, #28
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bc80      	pop	{r7}
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	40023800 	.word	0x40023800
 8001dc4:	40013800 	.word	0x40013800
 8001dc8:	40020000 	.word	0x40020000
 8001dcc:	40020400 	.word	0x40020400
 8001dd0:	40020800 	.word	0x40020800
 8001dd4:	40020c00 	.word	0x40020c00
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	40021400 	.word	0x40021400
 8001de0:	40021800 	.word	0x40021800
 8001de4:	40021c00 	.word	0x40021c00
 8001de8:	40022000 	.word	0x40022000
 8001dec:	40013c00 	.word	0x40013c00

08001df0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	460b      	mov	r3, r1
 8001dfa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	691a      	ldr	r2, [r3, #16]
 8001e00:	887b      	ldrh	r3, [r7, #2]
 8001e02:	4013      	ands	r3, r2
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d002      	beq.n	8001e0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	73fb      	strb	r3, [r7, #15]
 8001e0c:	e001      	b.n	8001e12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3714      	adds	r7, #20
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bc80      	pop	{r7}
 8001e1c:	4770      	bx	lr

08001e1e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	b083      	sub	sp, #12
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
 8001e26:	460b      	mov	r3, r1
 8001e28:	807b      	strh	r3, [r7, #2]
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e2e:	787b      	ldrb	r3, [r7, #1]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d003      	beq.n	8001e3c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e34:	887a      	ldrh	r2, [r7, #2]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e3a:	e003      	b.n	8001e44 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e3c:	887b      	ldrh	r3, [r7, #2]
 8001e3e:	041a      	lsls	r2, r3, #16
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	619a      	str	r2, [r3, #24]
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bc80      	pop	{r7}
 8001e4c:	4770      	bx	lr

08001e4e <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..I) to select the GPIO peripheral. 
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	b085      	sub	sp, #20
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
 8001e56:	460b      	mov	r3, r1
 8001e58:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	695b      	ldr	r3, [r3, #20]
 8001e5e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e60:	887a      	ldrh	r2, [r7, #2]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	4013      	ands	r3, r2
 8001e66:	041a      	lsls	r2, r3, #16
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	43d9      	mvns	r1, r3
 8001e6c:	887b      	ldrh	r3, [r7, #2]
 8001e6e:	400b      	ands	r3, r1
 8001e70:	431a      	orrs	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	619a      	str	r2, [r3, #24]
}
 8001e76:	bf00      	nop
 8001e78:	3714      	adds	r7, #20
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bc80      	pop	{r7}
 8001e7e:	4770      	bx	lr

08001e80 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001e8a:	4b08      	ldr	r3, [pc, #32]	; (8001eac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e8c:	695a      	ldr	r2, [r3, #20]
 8001e8e:	88fb      	ldrh	r3, [r7, #6]
 8001e90:	4013      	ands	r3, r2
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d006      	beq.n	8001ea4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e96:	4a05      	ldr	r2, [pc, #20]	; (8001eac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e98:	88fb      	ldrh	r3, [r7, #6]
 8001e9a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e9c:	88fb      	ldrh	r3, [r7, #6]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7fe fb56 	bl	8000550 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ea4:	bf00      	nop
 8001ea6:	3708      	adds	r7, #8
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	40013c00 	.word	0x40013c00

08001eb0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b08a      	sub	sp, #40	; 0x28
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d101      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e237      	b.n	8002332 <HAL_RCC_OscConfig+0x482>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d050      	beq.n	8001f70 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ece:	4ba3      	ldr	r3, [pc, #652]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f003 030c 	and.w	r3, r3, #12
 8001ed6:	2b04      	cmp	r3, #4
 8001ed8:	d00c      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eda:	4ba0      	ldr	r3, [pc, #640]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ee2:	2b08      	cmp	r3, #8
 8001ee4:	d112      	bne.n	8001f0c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ee6:	4b9d      	ldr	r3, [pc, #628]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ef2:	d10b      	bne.n	8001f0c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ef4:	4b99      	ldr	r3, [pc, #612]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d036      	beq.n	8001f6e <HAL_RCC_OscConfig+0xbe>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d132      	bne.n	8001f6e <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e212      	b.n	8002332 <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685a      	ldr	r2, [r3, #4]
 8001f10:	4b93      	ldr	r3, [pc, #588]	; (8002160 <HAL_RCC_OscConfig+0x2b0>)
 8001f12:	b2d2      	uxtb	r2, r2
 8001f14:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d013      	beq.n	8001f46 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f1e:	f7ff f925 	bl	800116c <HAL_GetTick>
 8001f22:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f24:	e008      	b.n	8001f38 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f26:	f7ff f921 	bl	800116c <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	6a3b      	ldr	r3, [r7, #32]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	2b64      	cmp	r3, #100	; 0x64
 8001f32:	d901      	bls.n	8001f38 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e1fc      	b.n	8002332 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f38:	4b88      	ldr	r3, [pc, #544]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d0f0      	beq.n	8001f26 <HAL_RCC_OscConfig+0x76>
 8001f44:	e014      	b.n	8001f70 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f46:	f7ff f911 	bl	800116c <HAL_GetTick>
 8001f4a:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f4c:	e008      	b.n	8001f60 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f4e:	f7ff f90d 	bl	800116c <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	6a3b      	ldr	r3, [r7, #32]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	2b64      	cmp	r3, #100	; 0x64
 8001f5a:	d901      	bls.n	8001f60 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e1e8      	b.n	8002332 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f60:	4b7e      	ldr	r3, [pc, #504]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d1f0      	bne.n	8001f4e <HAL_RCC_OscConfig+0x9e>
 8001f6c:	e000      	b.n	8001f70 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f6e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0302 	and.w	r3, r3, #2
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d077      	beq.n	800206c <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f7c:	4b77      	ldr	r3, [pc, #476]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f003 030c 	and.w	r3, r3, #12
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d00b      	beq.n	8001fa0 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f88:	4b74      	ldr	r3, [pc, #464]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f90:	2b08      	cmp	r3, #8
 8001f92:	d126      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f94:	4b71      	ldr	r3, [pc, #452]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d120      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fa0:	4b6e      	ldr	r3, [pc, #440]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0302 	and.w	r3, r3, #2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d005      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x108>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d001      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e1bc      	b.n	8002332 <HAL_RCC_OscConfig+0x482>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fb8:	4b68      	ldr	r3, [pc, #416]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	691b      	ldr	r3, [r3, #16]
 8001fc4:	21f8      	movs	r1, #248	; 0xf8
 8001fc6:	61b9      	str	r1, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc8:	69b9      	ldr	r1, [r7, #24]
 8001fca:	fa91 f1a1 	rbit	r1, r1
 8001fce:	6179      	str	r1, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001fd0:	6979      	ldr	r1, [r7, #20]
 8001fd2:	fab1 f181 	clz	r1, r1
 8001fd6:	b2c9      	uxtb	r1, r1
 8001fd8:	408b      	lsls	r3, r1
 8001fda:	4960      	ldr	r1, [pc, #384]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fe0:	e044      	b.n	800206c <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d02a      	beq.n	8002040 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fea:	4b5e      	ldr	r3, [pc, #376]	; (8002164 <HAL_RCC_OscConfig+0x2b4>)
 8001fec:	2201      	movs	r2, #1
 8001fee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff0:	f7ff f8bc 	bl	800116c <HAL_GetTick>
 8001ff4:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ff6:	e008      	b.n	800200a <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ff8:	f7ff f8b8 	bl	800116c <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	6a3b      	ldr	r3, [r7, #32]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b02      	cmp	r3, #2
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e193      	b.n	8002332 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800200a:	4b54      	ldr	r3, [pc, #336]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d0f0      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002016:	4b51      	ldr	r3, [pc, #324]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	691b      	ldr	r3, [r3, #16]
 8002022:	21f8      	movs	r1, #248	; 0xf8
 8002024:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002026:	6939      	ldr	r1, [r7, #16]
 8002028:	fa91 f1a1 	rbit	r1, r1
 800202c:	60f9      	str	r1, [r7, #12]
  return result;
 800202e:	68f9      	ldr	r1, [r7, #12]
 8002030:	fab1 f181 	clz	r1, r1
 8002034:	b2c9      	uxtb	r1, r1
 8002036:	408b      	lsls	r3, r1
 8002038:	4948      	ldr	r1, [pc, #288]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 800203a:	4313      	orrs	r3, r2
 800203c:	600b      	str	r3, [r1, #0]
 800203e:	e015      	b.n	800206c <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002040:	4b48      	ldr	r3, [pc, #288]	; (8002164 <HAL_RCC_OscConfig+0x2b4>)
 8002042:	2200      	movs	r2, #0
 8002044:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002046:	f7ff f891 	bl	800116c <HAL_GetTick>
 800204a:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800204c:	e008      	b.n	8002060 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800204e:	f7ff f88d 	bl	800116c <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	6a3b      	ldr	r3, [r7, #32]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b02      	cmp	r3, #2
 800205a:	d901      	bls.n	8002060 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e168      	b.n	8002332 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002060:	4b3e      	ldr	r3, [pc, #248]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	2b00      	cmp	r3, #0
 800206a:	d1f0      	bne.n	800204e <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0308 	and.w	r3, r3, #8
 8002074:	2b00      	cmp	r3, #0
 8002076:	d030      	beq.n	80020da <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	695b      	ldr	r3, [r3, #20]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d016      	beq.n	80020ae <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002080:	4b39      	ldr	r3, [pc, #228]	; (8002168 <HAL_RCC_OscConfig+0x2b8>)
 8002082:	2201      	movs	r2, #1
 8002084:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002086:	f7ff f871 	bl	800116c <HAL_GetTick>
 800208a:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800208c:	e008      	b.n	80020a0 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800208e:	f7ff f86d 	bl	800116c <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	6a3b      	ldr	r3, [r7, #32]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	2b02      	cmp	r3, #2
 800209a:	d901      	bls.n	80020a0 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e148      	b.n	8002332 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020a0:	4b2e      	ldr	r3, [pc, #184]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 80020a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020a4:	f003 0302 	and.w	r3, r3, #2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d0f0      	beq.n	800208e <HAL_RCC_OscConfig+0x1de>
 80020ac:	e015      	b.n	80020da <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020ae:	4b2e      	ldr	r3, [pc, #184]	; (8002168 <HAL_RCC_OscConfig+0x2b8>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020b4:	f7ff f85a 	bl	800116c <HAL_GetTick>
 80020b8:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020ba:	e008      	b.n	80020ce <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020bc:	f7ff f856 	bl	800116c <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	6a3b      	ldr	r3, [r7, #32]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e131      	b.n	8002332 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020ce:	4b23      	ldr	r3, [pc, #140]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 80020d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d1f0      	bne.n	80020bc <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0304 	and.w	r3, r3, #4
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	f000 8088 	beq.w	80021f8 <HAL_RCC_OscConfig+0x348>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020e8:	2300      	movs	r3, #0
 80020ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020ee:	4b1b      	ldr	r3, [pc, #108]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d110      	bne.n	800211c <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020fa:	2300      	movs	r3, #0
 80020fc:	60bb      	str	r3, [r7, #8]
 80020fe:	4b17      	ldr	r3, [pc, #92]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 8002100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002102:	4a16      	ldr	r2, [pc, #88]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 8002104:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002108:	6413      	str	r3, [r2, #64]	; 0x40
 800210a:	4b14      	ldr	r3, [pc, #80]	; (800215c <HAL_RCC_OscConfig+0x2ac>)
 800210c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002112:	60bb      	str	r3, [r7, #8]
 8002114:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002116:	2301      	movs	r3, #1
 8002118:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800211c:	4b13      	ldr	r3, [pc, #76]	; (800216c <HAL_RCC_OscConfig+0x2bc>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a12      	ldr	r2, [pc, #72]	; (800216c <HAL_RCC_OscConfig+0x2bc>)
 8002122:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002126:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002128:	4b10      	ldr	r3, [pc, #64]	; (800216c <HAL_RCC_OscConfig+0x2bc>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002130:	2b00      	cmp	r3, #0
 8002132:	d123      	bne.n	800217c <HAL_RCC_OscConfig+0x2cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002134:	4b0d      	ldr	r3, [pc, #52]	; (800216c <HAL_RCC_OscConfig+0x2bc>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a0c      	ldr	r2, [pc, #48]	; (800216c <HAL_RCC_OscConfig+0x2bc>)
 800213a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800213e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002140:	f7ff f814 	bl	800116c <HAL_GetTick>
 8002144:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002146:	e013      	b.n	8002170 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002148:	f7ff f810 	bl	800116c <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	6a3b      	ldr	r3, [r7, #32]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b02      	cmp	r3, #2
 8002154:	d90c      	bls.n	8002170 <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e0eb      	b.n	8002332 <HAL_RCC_OscConfig+0x482>
 800215a:	bf00      	nop
 800215c:	40023800 	.word	0x40023800
 8002160:	40023802 	.word	0x40023802
 8002164:	42470000 	.word	0x42470000
 8002168:	42470e80 	.word	0x42470e80
 800216c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002170:	4b72      	ldr	r3, [pc, #456]	; (800233c <HAL_RCC_OscConfig+0x48c>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002178:	2b00      	cmp	r3, #0
 800217a:	d0e5      	beq.n	8002148 <HAL_RCC_OscConfig+0x298>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	689a      	ldr	r2, [r3, #8]
 8002180:	4b6f      	ldr	r3, [pc, #444]	; (8002340 <HAL_RCC_OscConfig+0x490>)
 8002182:	b2d2      	uxtb	r2, r2
 8002184:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d015      	beq.n	80021ba <HAL_RCC_OscConfig+0x30a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800218e:	f7fe ffed 	bl	800116c <HAL_GetTick>
 8002192:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002194:	e00a      	b.n	80021ac <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002196:	f7fe ffe9 	bl	800116c <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	6a3b      	ldr	r3, [r7, #32]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d901      	bls.n	80021ac <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80021a8:	2303      	movs	r3, #3
 80021aa:	e0c2      	b.n	8002332 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ac:	4b65      	ldr	r3, [pc, #404]	; (8002344 <HAL_RCC_OscConfig+0x494>)
 80021ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b0:	f003 0302 	and.w	r3, r3, #2
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d0ee      	beq.n	8002196 <HAL_RCC_OscConfig+0x2e6>
 80021b8:	e014      	b.n	80021e4 <HAL_RCC_OscConfig+0x334>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ba:	f7fe ffd7 	bl	800116c <HAL_GetTick>
 80021be:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021c0:	e00a      	b.n	80021d8 <HAL_RCC_OscConfig+0x328>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021c2:	f7fe ffd3 	bl	800116c <HAL_GetTick>
 80021c6:	4602      	mov	r2, r0
 80021c8:	6a3b      	ldr	r3, [r7, #32]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d901      	bls.n	80021d8 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 80021d4:	2303      	movs	r3, #3
 80021d6:	e0ac      	b.n	8002332 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021d8:	4b5a      	ldr	r3, [pc, #360]	; (8002344 <HAL_RCC_OscConfig+0x494>)
 80021da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021dc:	f003 0302 	and.w	r3, r3, #2
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d1ee      	bne.n	80021c2 <HAL_RCC_OscConfig+0x312>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d105      	bne.n	80021f8 <HAL_RCC_OscConfig+0x348>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021ec:	4b55      	ldr	r3, [pc, #340]	; (8002344 <HAL_RCC_OscConfig+0x494>)
 80021ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f0:	4a54      	ldr	r2, [pc, #336]	; (8002344 <HAL_RCC_OscConfig+0x494>)
 80021f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021f6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	f000 8097 	beq.w	8002330 <HAL_RCC_OscConfig+0x480>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002202:	4b50      	ldr	r3, [pc, #320]	; (8002344 <HAL_RCC_OscConfig+0x494>)
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f003 030c 	and.w	r3, r3, #12
 800220a:	2b08      	cmp	r3, #8
 800220c:	d061      	beq.n	80022d2 <HAL_RCC_OscConfig+0x422>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	2b02      	cmp	r3, #2
 8002214:	d146      	bne.n	80022a4 <HAL_RCC_OscConfig+0x3f4>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002216:	4b4c      	ldr	r3, [pc, #304]	; (8002348 <HAL_RCC_OscConfig+0x498>)
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800221c:	f7fe ffa6 	bl	800116c <HAL_GetTick>
 8002220:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002222:	e008      	b.n	8002236 <HAL_RCC_OscConfig+0x386>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002224:	f7fe ffa2 	bl	800116c <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	6a3b      	ldr	r3, [r7, #32]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b64      	cmp	r3, #100	; 0x64
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0x386>
          {
            return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e07d      	b.n	8002332 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002236:	4b43      	ldr	r3, [pc, #268]	; (8002344 <HAL_RCC_OscConfig+0x494>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d1f0      	bne.n	8002224 <HAL_RCC_OscConfig+0x374>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002242:	4b40      	ldr	r3, [pc, #256]	; (8002344 <HAL_RCC_OscConfig+0x494>)
 8002244:	685a      	ldr	r2, [r3, #4]
 8002246:	4b41      	ldr	r3, [pc, #260]	; (800234c <HAL_RCC_OscConfig+0x49c>)
 8002248:	4013      	ands	r3, r2
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	69d1      	ldr	r1, [r2, #28]
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	6a12      	ldr	r2, [r2, #32]
 8002252:	4311      	orrs	r1, r2
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002258:	0192      	lsls	r2, r2, #6
 800225a:	4311      	orrs	r1, r2
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002260:	0612      	lsls	r2, r2, #24
 8002262:	4311      	orrs	r1, r2
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002268:	0852      	lsrs	r2, r2, #1
 800226a:	3a01      	subs	r2, #1
 800226c:	0412      	lsls	r2, r2, #16
 800226e:	430a      	orrs	r2, r1
 8002270:	4934      	ldr	r1, [pc, #208]	; (8002344 <HAL_RCC_OscConfig+0x494>)
 8002272:	4313      	orrs	r3, r2
 8002274:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002276:	4b34      	ldr	r3, [pc, #208]	; (8002348 <HAL_RCC_OscConfig+0x498>)
 8002278:	2201      	movs	r2, #1
 800227a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227c:	f7fe ff76 	bl	800116c <HAL_GetTick>
 8002280:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002282:	e008      	b.n	8002296 <HAL_RCC_OscConfig+0x3e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002284:	f7fe ff72 	bl	800116c <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	6a3b      	ldr	r3, [r7, #32]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b64      	cmp	r3, #100	; 0x64
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0x3e6>
          {
            return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e04d      	b.n	8002332 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002296:	4b2b      	ldr	r3, [pc, #172]	; (8002344 <HAL_RCC_OscConfig+0x494>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d0f0      	beq.n	8002284 <HAL_RCC_OscConfig+0x3d4>
 80022a2:	e045      	b.n	8002330 <HAL_RCC_OscConfig+0x480>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022a4:	4b28      	ldr	r3, [pc, #160]	; (8002348 <HAL_RCC_OscConfig+0x498>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022aa:	f7fe ff5f 	bl	800116c <HAL_GetTick>
 80022ae:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022b0:	e008      	b.n	80022c4 <HAL_RCC_OscConfig+0x414>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022b2:	f7fe ff5b 	bl	800116c <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	6a3b      	ldr	r3, [r7, #32]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	2b64      	cmp	r3, #100	; 0x64
 80022be:	d901      	bls.n	80022c4 <HAL_RCC_OscConfig+0x414>
          {
            return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e036      	b.n	8002332 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022c4:	4b1f      	ldr	r3, [pc, #124]	; (8002344 <HAL_RCC_OscConfig+0x494>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d1f0      	bne.n	80022b2 <HAL_RCC_OscConfig+0x402>
 80022d0:	e02e      	b.n	8002330 <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d101      	bne.n	80022de <HAL_RCC_OscConfig+0x42e>
      {
        return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e029      	b.n	8002332 <HAL_RCC_OscConfig+0x482>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 80022de:	4b19      	ldr	r3, [pc, #100]	; (8002344 <HAL_RCC_OscConfig+0x494>)
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	69db      	ldr	r3, [r3, #28]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d11c      	bne.n	800232c <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d115      	bne.n	800232c <HAL_RCC_OscConfig+0x47c>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	099b      	lsrs	r3, r3, #6
 8002304:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800230c:	429a      	cmp	r2, r3
 800230e:	d10d      	bne.n	800232c <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800231a:	429a      	cmp	r2, r3
 800231c:	d106      	bne.n	800232c <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002328:	429a      	cmp	r2, r3
 800232a:	d001      	beq.n	8002330 <HAL_RCC_OscConfig+0x480>
        {
          return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e000      	b.n	8002332 <HAL_RCC_OscConfig+0x482>
        }
      }
    }
  }
  return HAL_OK;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3728      	adds	r7, #40	; 0x28
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	40007000 	.word	0x40007000
 8002340:	40023870 	.word	0x40023870
 8002344:	40023800 	.word	0x40023800
 8002348:	42470060 	.word	0x42470060
 800234c:	f0bc8000 	.word	0xf0bc8000

08002350 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b086      	sub	sp, #24
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d101      	bne.n	8002364 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e0d2      	b.n	800250a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002364:	4b6b      	ldr	r3, [pc, #428]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 030f 	and.w	r3, r3, #15
 800236c:	683a      	ldr	r2, [r7, #0]
 800236e:	429a      	cmp	r2, r3
 8002370:	d90c      	bls.n	800238c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002372:	4b68      	ldr	r3, [pc, #416]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 8002374:	683a      	ldr	r2, [r7, #0]
 8002376:	b2d2      	uxtb	r2, r2
 8002378:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800237a:	4b66      	ldr	r3, [pc, #408]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 030f 	and.w	r3, r3, #15
 8002382:	683a      	ldr	r2, [r7, #0]
 8002384:	429a      	cmp	r2, r3
 8002386:	d001      	beq.n	800238c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e0be      	b.n	800250a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0302 	and.w	r3, r3, #2
 8002394:	2b00      	cmp	r3, #0
 8002396:	d020      	beq.n	80023da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0304 	and.w	r3, r3, #4
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d005      	beq.n	80023b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023a4:	4b5c      	ldr	r3, [pc, #368]	; (8002518 <HAL_RCC_ClockConfig+0x1c8>)
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	4a5b      	ldr	r2, [pc, #364]	; (8002518 <HAL_RCC_ClockConfig+0x1c8>)
 80023aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0308 	and.w	r3, r3, #8
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d005      	beq.n	80023c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 80023bc:	4b56      	ldr	r3, [pc, #344]	; (8002518 <HAL_RCC_ClockConfig+0x1c8>)
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	4a55      	ldr	r2, [pc, #340]	; (8002518 <HAL_RCC_ClockConfig+0x1c8>)
 80023c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023c6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023c8:	4b53      	ldr	r3, [pc, #332]	; (8002518 <HAL_RCC_ClockConfig+0x1c8>)
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	4950      	ldr	r1, [pc, #320]	; (8002518 <HAL_RCC_ClockConfig+0x1c8>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d040      	beq.n	8002468 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d107      	bne.n	80023fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ee:	4b4a      	ldr	r3, [pc, #296]	; (8002518 <HAL_RCC_ClockConfig+0x1c8>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d115      	bne.n	8002426 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e085      	b.n	800250a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	2b02      	cmp	r3, #2
 8002404:	d107      	bne.n	8002416 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002406:	4b44      	ldr	r3, [pc, #272]	; (8002518 <HAL_RCC_ClockConfig+0x1c8>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d109      	bne.n	8002426 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e079      	b.n	800250a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002416:	4b40      	ldr	r3, [pc, #256]	; (8002518 <HAL_RCC_ClockConfig+0x1c8>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0302 	and.w	r3, r3, #2
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e071      	b.n	800250a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002426:	4b3c      	ldr	r3, [pc, #240]	; (8002518 <HAL_RCC_ClockConfig+0x1c8>)
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f023 0203 	bic.w	r2, r3, #3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	4939      	ldr	r1, [pc, #228]	; (8002518 <HAL_RCC_ClockConfig+0x1c8>)
 8002434:	4313      	orrs	r3, r2
 8002436:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002438:	f7fe fe98 	bl	800116c <HAL_GetTick>
 800243c:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800243e:	e00a      	b.n	8002456 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002440:	f7fe fe94 	bl	800116c <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	f241 3288 	movw	r2, #5000	; 0x1388
 800244e:	4293      	cmp	r3, r2
 8002450:	d901      	bls.n	8002456 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e059      	b.n	800250a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002456:	4b30      	ldr	r3, [pc, #192]	; (8002518 <HAL_RCC_ClockConfig+0x1c8>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f003 020c 	and.w	r2, r3, #12
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	429a      	cmp	r2, r3
 8002466:	d1eb      	bne.n	8002440 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002468:	4b2a      	ldr	r3, [pc, #168]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 030f 	and.w	r3, r3, #15
 8002470:	683a      	ldr	r2, [r7, #0]
 8002472:	429a      	cmp	r2, r3
 8002474:	d20c      	bcs.n	8002490 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002476:	4b27      	ldr	r3, [pc, #156]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 8002478:	683a      	ldr	r2, [r7, #0]
 800247a:	b2d2      	uxtb	r2, r2
 800247c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800247e:	4b25      	ldr	r3, [pc, #148]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 030f 	and.w	r3, r3, #15
 8002486:	683a      	ldr	r2, [r7, #0]
 8002488:	429a      	cmp	r2, r3
 800248a:	d001      	beq.n	8002490 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e03c      	b.n	800250a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0304 	and.w	r3, r3, #4
 8002498:	2b00      	cmp	r3, #0
 800249a:	d008      	beq.n	80024ae <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800249c:	4b1e      	ldr	r3, [pc, #120]	; (8002518 <HAL_RCC_ClockConfig+0x1c8>)
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	491b      	ldr	r1, [pc, #108]	; (8002518 <HAL_RCC_ClockConfig+0x1c8>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0308 	and.w	r3, r3, #8
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d009      	beq.n	80024ce <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024ba:	4b17      	ldr	r3, [pc, #92]	; (8002518 <HAL_RCC_ClockConfig+0x1c8>)
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	691b      	ldr	r3, [r3, #16]
 80024c6:	00db      	lsls	r3, r3, #3
 80024c8:	4913      	ldr	r1, [pc, #76]	; (8002518 <HAL_RCC_ClockConfig+0x1c8>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80024ce:	f000 f82b 	bl	8002528 <HAL_RCC_GetSysClockFreq>
 80024d2:	4601      	mov	r1, r0
 80024d4:	4b10      	ldr	r3, [pc, #64]	; (8002518 <HAL_RCC_ClockConfig+0x1c8>)
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024dc:	22f0      	movs	r2, #240	; 0xf0
 80024de:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e0:	693a      	ldr	r2, [r7, #16]
 80024e2:	fa92 f2a2 	rbit	r2, r2
 80024e6:	60fa      	str	r2, [r7, #12]
  return result;
 80024e8:	68fa      	ldr	r2, [r7, #12]
 80024ea:	fab2 f282 	clz	r2, r2
 80024ee:	b2d2      	uxtb	r2, r2
 80024f0:	40d3      	lsrs	r3, r2
 80024f2:	4a0a      	ldr	r2, [pc, #40]	; (800251c <HAL_RCC_ClockConfig+0x1cc>)
 80024f4:	5cd3      	ldrb	r3, [r2, r3]
 80024f6:	fa21 f303 	lsr.w	r3, r1, r3
 80024fa:	4a09      	ldr	r2, [pc, #36]	; (8002520 <HAL_RCC_ClockConfig+0x1d0>)
 80024fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80024fe:	4b09      	ldr	r3, [pc, #36]	; (8002524 <HAL_RCC_ClockConfig+0x1d4>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4618      	mov	r0, r3
 8002504:	f7fe fcb8 	bl	8000e78 <HAL_InitTick>

  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3718      	adds	r7, #24
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	40023c00 	.word	0x40023c00
 8002518:	40023800 	.word	0x40023800
 800251c:	0800acd0 	.word	0x0800acd0
 8002520:	20000044 	.word	0x20000044
 8002524:	20000048 	.word	0x20000048

08002528 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002528:	b5f0      	push	{r4, r5, r6, r7, lr}
 800252a:	b085      	sub	sp, #20
 800252c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800252e:	2300      	movs	r3, #0
 8002530:	607b      	str	r3, [r7, #4]
 8002532:	2300      	movs	r3, #0
 8002534:	60fb      	str	r3, [r7, #12]
 8002536:	2300      	movs	r3, #0
 8002538:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800253a:	2300      	movs	r3, #0
 800253c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800253e:	4b63      	ldr	r3, [pc, #396]	; (80026cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f003 030c 	and.w	r3, r3, #12
 8002546:	2b04      	cmp	r3, #4
 8002548:	d007      	beq.n	800255a <HAL_RCC_GetSysClockFreq+0x32>
 800254a:	2b08      	cmp	r3, #8
 800254c:	d008      	beq.n	8002560 <HAL_RCC_GetSysClockFreq+0x38>
 800254e:	2b00      	cmp	r3, #0
 8002550:	f040 80b4 	bne.w	80026bc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002554:	4b5e      	ldr	r3, [pc, #376]	; (80026d0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002556:	60bb      	str	r3, [r7, #8]
       break;
 8002558:	e0b3      	b.n	80026c2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800255a:	4b5e      	ldr	r3, [pc, #376]	; (80026d4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800255c:	60bb      	str	r3, [r7, #8]
      break;
 800255e:	e0b0      	b.n	80026c2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002560:	4b5a      	ldr	r3, [pc, #360]	; (80026cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002568:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800256a:	4b58      	ldr	r3, [pc, #352]	; (80026cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d04a      	beq.n	800260c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002576:	4b55      	ldr	r3, [pc, #340]	; (80026cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	099b      	lsrs	r3, r3, #6
 800257c:	f04f 0400 	mov.w	r4, #0
 8002580:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002584:	f04f 0200 	mov.w	r2, #0
 8002588:	ea03 0501 	and.w	r5, r3, r1
 800258c:	ea04 0602 	and.w	r6, r4, r2
 8002590:	4629      	mov	r1, r5
 8002592:	4632      	mov	r2, r6
 8002594:	f04f 0300 	mov.w	r3, #0
 8002598:	f04f 0400 	mov.w	r4, #0
 800259c:	0154      	lsls	r4, r2, #5
 800259e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80025a2:	014b      	lsls	r3, r1, #5
 80025a4:	4619      	mov	r1, r3
 80025a6:	4622      	mov	r2, r4
 80025a8:	1b49      	subs	r1, r1, r5
 80025aa:	eb62 0206 	sbc.w	r2, r2, r6
 80025ae:	f04f 0300 	mov.w	r3, #0
 80025b2:	f04f 0400 	mov.w	r4, #0
 80025b6:	0194      	lsls	r4, r2, #6
 80025b8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80025bc:	018b      	lsls	r3, r1, #6
 80025be:	1a5b      	subs	r3, r3, r1
 80025c0:	eb64 0402 	sbc.w	r4, r4, r2
 80025c4:	f04f 0100 	mov.w	r1, #0
 80025c8:	f04f 0200 	mov.w	r2, #0
 80025cc:	00e2      	lsls	r2, r4, #3
 80025ce:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80025d2:	00d9      	lsls	r1, r3, #3
 80025d4:	460b      	mov	r3, r1
 80025d6:	4614      	mov	r4, r2
 80025d8:	195b      	adds	r3, r3, r5
 80025da:	eb44 0406 	adc.w	r4, r4, r6
 80025de:	f04f 0100 	mov.w	r1, #0
 80025e2:	f04f 0200 	mov.w	r2, #0
 80025e6:	0262      	lsls	r2, r4, #9
 80025e8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80025ec:	0259      	lsls	r1, r3, #9
 80025ee:	460b      	mov	r3, r1
 80025f0:	4614      	mov	r4, r2
 80025f2:	4618      	mov	r0, r3
 80025f4:	4621      	mov	r1, r4
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f04f 0400 	mov.w	r4, #0
 80025fc:	461a      	mov	r2, r3
 80025fe:	4623      	mov	r3, r4
 8002600:	f7fd fde6 	bl	80001d0 <__aeabi_uldivmod>
 8002604:	4603      	mov	r3, r0
 8002606:	460c      	mov	r4, r1
 8002608:	60fb      	str	r3, [r7, #12]
 800260a:	e049      	b.n	80026a0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800260c:	4b2f      	ldr	r3, [pc, #188]	; (80026cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	099b      	lsrs	r3, r3, #6
 8002612:	f04f 0400 	mov.w	r4, #0
 8002616:	f240 11ff 	movw	r1, #511	; 0x1ff
 800261a:	f04f 0200 	mov.w	r2, #0
 800261e:	ea03 0501 	and.w	r5, r3, r1
 8002622:	ea04 0602 	and.w	r6, r4, r2
 8002626:	4629      	mov	r1, r5
 8002628:	4632      	mov	r2, r6
 800262a:	f04f 0300 	mov.w	r3, #0
 800262e:	f04f 0400 	mov.w	r4, #0
 8002632:	0154      	lsls	r4, r2, #5
 8002634:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002638:	014b      	lsls	r3, r1, #5
 800263a:	4619      	mov	r1, r3
 800263c:	4622      	mov	r2, r4
 800263e:	1b49      	subs	r1, r1, r5
 8002640:	eb62 0206 	sbc.w	r2, r2, r6
 8002644:	f04f 0300 	mov.w	r3, #0
 8002648:	f04f 0400 	mov.w	r4, #0
 800264c:	0194      	lsls	r4, r2, #6
 800264e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002652:	018b      	lsls	r3, r1, #6
 8002654:	1a5b      	subs	r3, r3, r1
 8002656:	eb64 0402 	sbc.w	r4, r4, r2
 800265a:	f04f 0100 	mov.w	r1, #0
 800265e:	f04f 0200 	mov.w	r2, #0
 8002662:	00e2      	lsls	r2, r4, #3
 8002664:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002668:	00d9      	lsls	r1, r3, #3
 800266a:	460b      	mov	r3, r1
 800266c:	4614      	mov	r4, r2
 800266e:	195b      	adds	r3, r3, r5
 8002670:	eb44 0406 	adc.w	r4, r4, r6
 8002674:	f04f 0100 	mov.w	r1, #0
 8002678:	f04f 0200 	mov.w	r2, #0
 800267c:	02a2      	lsls	r2, r4, #10
 800267e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002682:	0299      	lsls	r1, r3, #10
 8002684:	460b      	mov	r3, r1
 8002686:	4614      	mov	r4, r2
 8002688:	4618      	mov	r0, r3
 800268a:	4621      	mov	r1, r4
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f04f 0400 	mov.w	r4, #0
 8002692:	461a      	mov	r2, r3
 8002694:	4623      	mov	r3, r4
 8002696:	f7fd fd9b 	bl	80001d0 <__aeabi_uldivmod>
 800269a:	4603      	mov	r3, r0
 800269c:	460c      	mov	r4, r1
 800269e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80026a0:	4b0a      	ldr	r3, [pc, #40]	; (80026cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	0c1b      	lsrs	r3, r3, #16
 80026a6:	f003 0303 	and.w	r3, r3, #3
 80026aa:	3301      	adds	r3, #1
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80026b0:	68fa      	ldr	r2, [r7, #12]
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026b8:	60bb      	str	r3, [r7, #8]
      break;
 80026ba:	e002      	b.n	80026c2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026bc:	4b04      	ldr	r3, [pc, #16]	; (80026d0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80026be:	60bb      	str	r3, [r7, #8]
      break;
 80026c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026c2:	68bb      	ldr	r3, [r7, #8]
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3714      	adds	r7, #20
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026cc:	40023800 	.word	0x40023800
 80026d0:	00f42400 	.word	0x00f42400
 80026d4:	007a1200 	.word	0x007a1200

080026d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026dc:	4b02      	ldr	r3, [pc, #8]	; (80026e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80026de:	681b      	ldr	r3, [r3, #0]
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bc80      	pop	{r7}
 80026e6:	4770      	bx	lr
 80026e8:	20000044 	.word	0x20000044

080026ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 80026f2:	f7ff fff1 	bl	80026d8 <HAL_RCC_GetHCLKFreq>
 80026f6:	4601      	mov	r1, r0
 80026f8:	4b0b      	ldr	r3, [pc, #44]	; (8002728 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8002700:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8002704:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	fa92 f2a2 	rbit	r2, r2
 800270c:	603a      	str	r2, [r7, #0]
  return result;
 800270e:	683a      	ldr	r2, [r7, #0]
 8002710:	fab2 f282 	clz	r2, r2
 8002714:	b2d2      	uxtb	r2, r2
 8002716:	40d3      	lsrs	r3, r2
 8002718:	4a04      	ldr	r2, [pc, #16]	; (800272c <HAL_RCC_GetPCLK1Freq+0x40>)
 800271a:	5cd3      	ldrb	r3, [r2, r3]
 800271c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002720:	4618      	mov	r0, r3
 8002722:	3708      	adds	r7, #8
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	40023800 	.word	0x40023800
 800272c:	0800ace0 	.word	0x0800ace0

08002730 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8002736:	f7ff ffcf 	bl	80026d8 <HAL_RCC_GetHCLKFreq>
 800273a:	4601      	mov	r1, r0
 800273c:	4b0b      	ldr	r3, [pc, #44]	; (800276c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002744:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8002748:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	fa92 f2a2 	rbit	r2, r2
 8002750:	603a      	str	r2, [r7, #0]
  return result;
 8002752:	683a      	ldr	r2, [r7, #0]
 8002754:	fab2 f282 	clz	r2, r2
 8002758:	b2d2      	uxtb	r2, r2
 800275a:	40d3      	lsrs	r3, r2
 800275c:	4a04      	ldr	r2, [pc, #16]	; (8002770 <HAL_RCC_GetPCLK2Freq+0x40>)
 800275e:	5cd3      	ldrb	r3, [r2, r3]
 8002760:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002764:	4618      	mov	r0, r3
 8002766:	3708      	adds	r7, #8
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	40023800 	.word	0x40023800
 8002770:	0800ace0 	.word	0x0800ace0

08002774 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	220f      	movs	r2, #15
 8002782:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002784:	4b11      	ldr	r3, [pc, #68]	; (80027cc <HAL_RCC_GetClockConfig+0x58>)
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f003 0203 	and.w	r2, r3, #3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002790:	4b0e      	ldr	r3, [pc, #56]	; (80027cc <HAL_RCC_GetClockConfig+0x58>)
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800279c:	4b0b      	ldr	r3, [pc, #44]	; (80027cc <HAL_RCC_GetClockConfig+0x58>)
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80027a8:	4b08      	ldr	r3, [pc, #32]	; (80027cc <HAL_RCC_GetClockConfig+0x58>)
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	08db      	lsrs	r3, r3, #3
 80027ae:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80027b6:	4b06      	ldr	r3, [pc, #24]	; (80027d0 <HAL_RCC_GetClockConfig+0x5c>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 020f 	and.w	r2, r3, #15
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	601a      	str	r2, [r3, #0]
}
 80027c2:	bf00      	nop
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bc80      	pop	{r7}
 80027ca:	4770      	bx	lr
 80027cc:	40023800 	.word	0x40023800
 80027d0:	40023c00 	.word	0x40023c00

080027d4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d101      	bne.n	80027e6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e022      	b.n	800282c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d105      	bne.n	80027fe <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f7fe fa05 	bl	8000c08 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2203      	movs	r2, #3
 8002802:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f000 f814 	bl	8002834 <HAL_SD_InitCard>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e00a      	b.n	800282c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2201      	movs	r2, #1
 8002826:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800282a:	2300      	movs	r3, #0
}
 800282c:	4618      	mov	r0, r3
 800282e:	3708      	adds	r7, #8
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002834:	b5b0      	push	{r4, r5, r7, lr}
 8002836:	b08e      	sub	sp, #56	; 0x38
 8002838:	af04      	add	r7, sp, #16
 800283a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800283c:	2300      	movs	r3, #0
 800283e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8002840:	2300      	movs	r3, #0
 8002842:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002844:	2300      	movs	r3, #0
 8002846:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8002848:	2300      	movs	r3, #0
 800284a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800284c:	2300      	movs	r3, #0
 800284e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8002850:	2376      	movs	r3, #118	; 0x76
 8002852:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681d      	ldr	r5, [r3, #0]
 8002858:	466c      	mov	r4, sp
 800285a:	f107 0314 	add.w	r3, r7, #20
 800285e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002862:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002866:	f107 0308 	add.w	r3, r7, #8
 800286a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800286c:	4628      	mov	r0, r5
 800286e:	f001 fe73 	bl	8004558 <SDIO_Init>
 8002872:	4603      	mov	r3, r0
 8002874:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8002878:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800287c:	2b00      	cmp	r3, #0
 800287e:	d001      	beq.n	8002884 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e031      	b.n	80028e8 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8002884:	4b1a      	ldr	r3, [pc, #104]	; (80028f0 <HAL_SD_InitCard+0xbc>)
 8002886:	2200      	movs	r2, #0
 8002888:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4618      	mov	r0, r3
 8002890:	f001 fea8 	bl	80045e4 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8002894:	4b16      	ldr	r3, [pc, #88]	; (80028f0 <HAL_SD_InitCard+0xbc>)
 8002896:	2201      	movs	r2, #1
 8002898:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f000 ffc6 	bl	800382c <SD_PowerON>
 80028a0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80028a2:	6a3b      	ldr	r3, [r7, #32]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d00b      	beq.n	80028c0 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028b4:	6a3b      	ldr	r3, [r7, #32]
 80028b6:	431a      	orrs	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e013      	b.n	80028e8 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f000 fee5 	bl	8003690 <SD_InitCard>
 80028c6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80028c8:	6a3b      	ldr	r3, [r7, #32]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d00b      	beq.n	80028e6 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2201      	movs	r2, #1
 80028d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028da:	6a3b      	ldr	r3, [r7, #32]
 80028dc:	431a      	orrs	r2, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e000      	b.n	80028e8 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 80028e6:	2300      	movs	r3, #0
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3728      	adds	r7, #40	; 0x28
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bdb0      	pop	{r4, r5, r7, pc}
 80028f0:	422580a0 	.word	0x422580a0

080028f4 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b08c      	sub	sp, #48	; 0x30
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	607a      	str	r2, [r7, #4]
 8002900:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d107      	bne.n	800291c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002910:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e0c7      	b.n	8002aac <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002922:	b2db      	uxtb	r3, r3
 8002924:	2b01      	cmp	r3, #1
 8002926:	f040 80c0 	bne.w	8002aaa <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2200      	movs	r2, #0
 800292e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002930:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	441a      	add	r2, r3
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800293a:	429a      	cmp	r2, r3
 800293c:	d907      	bls.n	800294e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002942:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e0ae      	b.n	8002aac <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2203      	movs	r2, #3
 8002952:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2200      	movs	r2, #0
 800295c:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800296c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002972:	4a50      	ldr	r2, [pc, #320]	; (8002ab4 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8002974:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297a:	4a4f      	ldr	r2, [pc, #316]	; (8002ab8 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800297c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002982:	2200      	movs	r2, #0
 8002984:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	3380      	adds	r3, #128	; 0x80
 8002990:	4619      	mov	r1, r3
 8002992:	68ba      	ldr	r2, [r7, #8]
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	025b      	lsls	r3, r3, #9
 8002998:	089b      	lsrs	r3, r3, #2
 800299a:	f7fe fda1 	bl	80014e0 <HAL_DMA_Start_IT>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d017      	beq.n	80029d4 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80029b2:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a40      	ldr	r2, [pc, #256]	; (8002abc <HAL_SD_ReadBlocks_DMA+0x1c8>)
 80029ba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e06b      	b.n	8002aac <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80029d4:	4b3a      	ldr	r3, [pc, #232]	; (8002ac0 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 80029d6:	2201      	movs	r2, #1
 80029d8:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d002      	beq.n	80029e8 <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 80029e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029e4:	025b      	lsls	r3, r3, #9
 80029e6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80029f0:	4618      	mov	r0, r3
 80029f2:	f001 fe85 	bl	8004700 <SDMMC_CmdBlockLength>
 80029f6:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 80029f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d00f      	beq.n	8002a1e <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a2e      	ldr	r2, [pc, #184]	; (8002abc <HAL_SD_ReadBlocks_DMA+0x1c8>)
 8002a04:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a0c:	431a      	orrs	r2, r3
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2201      	movs	r2, #1
 8002a16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e046      	b.n	8002aac <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a22:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	025b      	lsls	r3, r3, #9
 8002a28:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002a2a:	2390      	movs	r3, #144	; 0x90
 8002a2c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002a2e:	2302      	movs	r3, #2
 8002a30:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002a32:	2300      	movs	r3, #0
 8002a34:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8002a36:	2301      	movs	r3, #1
 8002a38:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f107 0210 	add.w	r2, r7, #16
 8002a42:	4611      	mov	r1, r2
 8002a44:	4618      	mov	r0, r3
 8002a46:	f001 fe30 	bl	80046aa <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d90a      	bls.n	8002a66 <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2282      	movs	r2, #130	; 0x82
 8002a54:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f001 fe93 	bl	8004788 <SDMMC_CmdReadMultiBlock>
 8002a62:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002a64:	e009      	b.n	8002a7a <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2281      	movs	r2, #129	; 0x81
 8002a6a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a72:	4618      	mov	r0, r3
 8002a74:	f001 fe66 	bl	8004744 <SDMMC_CmdReadSingleBlock>
 8002a78:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8002a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d012      	beq.n	8002aa6 <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a0d      	ldr	r2, [pc, #52]	; (8002abc <HAL_SD_ReadBlocks_DMA+0x1c8>)
 8002a86:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a8e:	431a      	orrs	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e002      	b.n	8002aac <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	e000      	b.n	8002aac <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 8002aaa:	2302      	movs	r3, #2
  }
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3730      	adds	r7, #48	; 0x30
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	080034a1 	.word	0x080034a1
 8002ab8:	08003511 	.word	0x08003511
 8002abc:	004005ff 	.word	0x004005ff
 8002ac0:	4225858c 	.word	0x4225858c

08002ac4 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b08c      	sub	sp, #48	; 0x30
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	607a      	str	r2, [r7, #4]
 8002ad0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d107      	bne.n	8002aec <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e0ca      	b.n	8002c82 <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	f040 80c3 	bne.w	8002c80 <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2200      	movs	r2, #0
 8002afe:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002b00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	441a      	add	r2, r3
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d907      	bls.n	8002b1e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b12:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e0b1      	b.n	8002c82 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2203      	movs	r2, #3
 8002b22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f042 021a 	orr.w	r2, r2, #26
 8002b3c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b42:	4a52      	ldr	r2, [pc, #328]	; (8002c8c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8002b44:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b4a:	4a51      	ldr	r2, [pc, #324]	; (8002c90 <HAL_SD_WriteBlocks_DMA+0x1cc>)
 8002b4c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b52:	2200      	movs	r2, #0
 8002b54:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d002      	beq.n	8002b64 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8002b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b60:	025b      	lsls	r3, r3, #9
 8002b62:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f001 fdc7 	bl	8004700 <SDMMC_CmdBlockLength>
 8002b72:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00f      	beq.n	8002b9a <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a45      	ldr	r2, [pc, #276]	; (8002c94 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8002b80:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b88:	431a      	orrs	r2, r3
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2201      	movs	r2, #1
 8002b92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e073      	b.n	8002c82 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d90a      	bls.n	8002bb6 <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	22a0      	movs	r2, #160	; 0xa0
 8002ba4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002bac:	4618      	mov	r0, r3
 8002bae:	f001 fe2f 	bl	8004810 <SDMMC_CmdWriteMultiBlock>
 8002bb2:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002bb4:	e009      	b.n	8002bca <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2290      	movs	r2, #144	; 0x90
 8002bba:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f001 fe02 	bl	80047cc <SDMMC_CmdWriteSingleBlock>
 8002bc8:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d012      	beq.n	8002bf6 <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a2f      	ldr	r2, [pc, #188]	; (8002c94 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8002bd6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bde:	431a      	orrs	r2, r3
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e045      	b.n	8002c82 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8002bf6:	4b28      	ldr	r3, [pc, #160]	; (8002c98 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002c00:	68b9      	ldr	r1, [r7, #8]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	3380      	adds	r3, #128	; 0x80
 8002c08:	461a      	mov	r2, r3
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	025b      	lsls	r3, r3, #9
 8002c0e:	089b      	lsrs	r3, r3, #2
 8002c10:	f7fe fc66 	bl	80014e0 <HAL_DMA_Start_IT>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d01a      	beq.n	8002c50 <HAL_SD_WriteBlocks_DMA+0x18c>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f022 021a 	bic.w	r2, r2, #26
 8002c28:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a19      	ldr	r2, [pc, #100]	; (8002c94 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8002c30:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c36:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2201      	movs	r2, #1
 8002c42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e018      	b.n	8002c82 <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002c50:	f04f 33ff 	mov.w	r3, #4294967295
 8002c54:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	025b      	lsls	r3, r3, #9
 8002c5a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002c5c:	2390      	movs	r3, #144	; 0x90
 8002c5e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8002c60:	2300      	movs	r3, #0
 8002c62:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002c64:	2300      	movs	r3, #0
 8002c66:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f107 0210 	add.w	r2, r7, #16
 8002c74:	4611      	mov	r1, r2
 8002c76:	4618      	mov	r0, r3
 8002c78:	f001 fd17 	bl	80046aa <SDIO_ConfigData>

      return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	e000      	b.n	8002c82 <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 8002c80:	2302      	movs	r3, #2
  }
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3730      	adds	r7, #48	; 0x30
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	08003479 	.word	0x08003479
 8002c90:	08003511 	.word	0x08003511
 8002c94:	004005ff 	.word	0x004005ff
 8002c98:	4225858c 	.word	0x4225858c

08002c9c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca8:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d008      	beq.n	8002cca <HAL_SD_IRQHandler+0x2e>
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f003 0308 	and.w	r3, r3, #8
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d003      	beq.n	8002cca <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f000 ffc8 	bl	8003c58 <SD_Read_IT>
 8002cc8:	e157      	b.n	8002f7a <HAL_SD_IRQHandler+0x2de>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	f000 808f 	beq.w	8002df8 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ce2:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	6812      	ldr	r2, [r2, #0]
 8002cee:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8002cf2:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8002cf6:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f022 0201 	bic.w	r2, r2, #1
 8002d06:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f003 0308 	and.w	r3, r3, #8
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d039      	beq.n	8002d86 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f003 0302 	and.w	r3, r3, #2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d104      	bne.n	8002d26 <HAL_SD_IRQHandler+0x8a>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f003 0320 	and.w	r3, r3, #32
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d011      	beq.n	8002d4a <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f001 fd92 	bl	8004854 <SDMMC_CmdStopTransfer>
 8002d30:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d008      	beq.n	8002d4a <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	431a      	orrs	r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f000 f921 	bl	8002f8c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f240 523a 	movw	r2, #1338	; 0x53a
 8002d52:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	f003 0301 	and.w	r3, r3, #1
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d104      	bne.n	8002d76 <HAL_SD_IRQHandler+0xda>
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d003      	beq.n	8002d7e <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f002 f9f0 	bl	800515c <HAL_SD_RxCpltCallback>
 8002d7c:	e0fd      	b.n	8002f7a <HAL_SD_IRQHandler+0x2de>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f002 f9e2 	bl	8005148 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002d84:	e0f9      	b.n	8002f7a <HAL_SD_IRQHandler+0x2de>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	f000 80f4 	beq.w	8002f7a <HAL_SD_IRQHandler+0x2de>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f003 0320 	and.w	r3, r3, #32
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d011      	beq.n	8002dc0 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4618      	mov	r0, r3
 8002da2:	f001 fd57 	bl	8004854 <SDMMC_CmdStopTransfer>
 8002da6:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d008      	beq.n	8002dc0 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	431a      	orrs	r2, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 f8e6 	bl	8002f8c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	f040 80d7 	bne.w	8002f7a <HAL_SD_IRQHandler+0x2de>
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	f040 80d1 	bne.w	8002f7a <HAL_SD_IRQHandler+0x2de>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f022 0208 	bic.w	r2, r2, #8
 8002de6:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f002 f9a9 	bl	8005148 <HAL_SD_TxCpltCallback>
}
 8002df6:	e0c0      	b.n	8002f7a <HAL_SD_IRQHandler+0x2de>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d008      	beq.n	8002e18 <HAL_SD_IRQHandler+0x17c>
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f003 0308 	and.w	r3, r3, #8
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d003      	beq.n	8002e18 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f000 ff72 	bl	8003cfa <SD_Write_IT>
 8002e16:	e0b0      	b.n	8002f7a <HAL_SD_IRQHandler+0x2de>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e1e:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	f000 80a9 	beq.w	8002f7a <HAL_SD_IRQHandler+0x2de>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d005      	beq.n	8002e42 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e3a:	f043 0202 	orr.w	r2, r3, #2
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e48:	f003 0308 	and.w	r3, r3, #8
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d005      	beq.n	8002e5c <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e54:	f043 0208 	orr.w	r2, r3, #8
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e62:	f003 0320 	and.w	r3, r3, #32
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d005      	beq.n	8002e76 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e6e:	f043 0220 	orr.w	r2, r3, #32
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e7c:	f003 0310 	and.w	r3, r3, #16
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d005      	beq.n	8002e90 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e88:	f043 0210 	orr.w	r2, r3, #16
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f240 723a 	movw	r2, #1850	; 0x73a
 8002e98:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	6812      	ldr	r2, [r2, #0]
 8002ea4:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8002ea8:	f023 0302 	bic.w	r3, r3, #2
 8002eac:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f001 fcce 	bl	8004854 <SDMMC_CmdStopTransfer>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ebe:	431a      	orrs	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f003 0308 	and.w	r3, r3, #8
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d00a      	beq.n	8002ee4 <HAL_SD_IRQHandler+0x248>
      hsd->State = HAL_SD_STATE_READY;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f000 f855 	bl	8002f8c <HAL_SD_ErrorCallback>
}
 8002ee2:	e04a      	b.n	8002f7a <HAL_SD_IRQHandler+0x2de>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d045      	beq.n	8002f7a <HAL_SD_IRQHandler+0x2de>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	f003 0310 	and.w	r3, r3, #16
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d104      	bne.n	8002f02 <HAL_SD_IRQHandler+0x266>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f003 0320 	and.w	r3, r3, #32
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d011      	beq.n	8002f26 <HAL_SD_IRQHandler+0x28a>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f06:	4a1f      	ldr	r2, [pc, #124]	; (8002f84 <HAL_SD_IRQHandler+0x2e8>)
 8002f08:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7fe fb3e 	bl	8001590 <HAL_DMA_Abort_IT>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d02f      	beq.n	8002f7a <HAL_SD_IRQHandler+0x2de>
          SD_DMATxAbort(hsd->hdmatx);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f000 fb48 	bl	80035b4 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8002f24:	e029      	b.n	8002f7a <HAL_SD_IRQHandler+0x2de>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f003 0301 	and.w	r3, r3, #1
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d104      	bne.n	8002f3a <HAL_SD_IRQHandler+0x29e>
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d011      	beq.n	8002f5e <HAL_SD_IRQHandler+0x2c2>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3e:	4a12      	ldr	r2, [pc, #72]	; (8002f88 <HAL_SD_IRQHandler+0x2ec>)
 8002f40:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7fe fb22 	bl	8001590 <HAL_DMA_Abort_IT>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d013      	beq.n	8002f7a <HAL_SD_IRQHandler+0x2de>
          SD_DMARxAbort(hsd->hdmarx);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f56:	4618      	mov	r0, r3
 8002f58:	f000 fb63 	bl	8003622 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8002f5c:	e00d      	b.n	8002f7a <HAL_SD_IRQHandler+0x2de>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f002 f8de 	bl	8005134 <HAL_SD_AbortCallback>
}
 8002f78:	e7ff      	b.n	8002f7a <HAL_SD_IRQHandler+0x2de>
 8002f7a:	bf00      	nop
 8002f7c:	3710      	adds	r7, #16
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	080035b5 	.word	0x080035b5
 8002f88:	08003623 	.word	0x08003623

08002f8c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8002f94:	bf00      	nop
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bc80      	pop	{r7}
 8002f9c:	4770      	bx	lr
	...

08002fa0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fae:	0f9b      	lsrs	r3, r3, #30
 8002fb0:	b2da      	uxtb	r2, r3
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fba:	0e9b      	lsrs	r3, r3, #26
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	f003 030f 	and.w	r3, r3, #15
 8002fc2:	b2da      	uxtb	r2, r3
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fcc:	0e1b      	lsrs	r3, r3, #24
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	f003 0303 	and.w	r3, r3, #3
 8002fd4:	b2da      	uxtb	r2, r3
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fde:	0c1b      	lsrs	r3, r3, #16
 8002fe0:	b2da      	uxtb	r2, r3
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fea:	0a1b      	lsrs	r3, r3, #8
 8002fec:	b2da      	uxtb	r2, r3
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ff6:	b2da      	uxtb	r2, r3
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003000:	0d1b      	lsrs	r3, r3, #20
 8003002:	b29a      	uxth	r2, r3
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800300c:	0c1b      	lsrs	r3, r3, #16
 800300e:	b2db      	uxtb	r3, r3
 8003010:	f003 030f 	and.w	r3, r3, #15
 8003014:	b2da      	uxtb	r2, r3
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800301e:	0bdb      	lsrs	r3, r3, #15
 8003020:	b2db      	uxtb	r3, r3
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	b2da      	uxtb	r2, r3
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003030:	0b9b      	lsrs	r3, r3, #14
 8003032:	b2db      	uxtb	r3, r3
 8003034:	f003 0301 	and.w	r3, r3, #1
 8003038:	b2da      	uxtb	r2, r3
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003042:	0b5b      	lsrs	r3, r3, #13
 8003044:	b2db      	uxtb	r3, r3
 8003046:	f003 0301 	and.w	r3, r3, #1
 800304a:	b2da      	uxtb	r2, r3
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003054:	0b1b      	lsrs	r3, r3, #12
 8003056:	b2db      	uxtb	r3, r3
 8003058:	f003 0301 	and.w	r3, r3, #1
 800305c:	b2da      	uxtb	r2, r3
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	2200      	movs	r2, #0
 8003066:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800306c:	2b00      	cmp	r3, #0
 800306e:	d163      	bne.n	8003138 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003074:	009a      	lsls	r2, r3, #2
 8003076:	f640 73fc 	movw	r3, #4092	; 0xffc
 800307a:	4013      	ands	r3, r2
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003080:	0f92      	lsrs	r2, r2, #30
 8003082:	431a      	orrs	r2, r3
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800308c:	0edb      	lsrs	r3, r3, #27
 800308e:	b2db      	uxtb	r3, r3
 8003090:	f003 0307 	and.w	r3, r3, #7
 8003094:	b2da      	uxtb	r2, r3
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800309e:	0e1b      	lsrs	r3, r3, #24
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	f003 0307 	and.w	r3, r3, #7
 80030a6:	b2da      	uxtb	r2, r3
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030b0:	0d5b      	lsrs	r3, r3, #21
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	f003 0307 	and.w	r3, r3, #7
 80030b8:	b2da      	uxtb	r2, r3
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030c2:	0c9b      	lsrs	r3, r3, #18
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	f003 0307 	and.w	r3, r3, #7
 80030ca:	b2da      	uxtb	r2, r3
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030d4:	0bdb      	lsrs	r3, r3, #15
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	f003 0307 	and.w	r3, r3, #7
 80030dc:	b2da      	uxtb	r2, r3
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	1c5a      	adds	r2, r3, #1
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	7e1b      	ldrb	r3, [r3, #24]
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	f003 0307 	and.w	r3, r3, #7
 80030f6:	3302      	adds	r3, #2
 80030f8:	2201      	movs	r2, #1
 80030fa:	fa02 f303 	lsl.w	r3, r2, r3
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003102:	fb02 f203 	mul.w	r2, r2, r3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	7a1b      	ldrb	r3, [r3, #8]
 800310e:	b2db      	uxtb	r3, r3
 8003110:	f003 030f 	and.w	r3, r3, #15
 8003114:	2201      	movs	r2, #1
 8003116:	409a      	lsls	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003124:	0a52      	lsrs	r2, r2, #9
 8003126:	fb02 f203 	mul.w	r2, r2, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003134:	661a      	str	r2, [r3, #96]	; 0x60
 8003136:	e031      	b.n	800319c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800313c:	2b01      	cmp	r3, #1
 800313e:	d11d      	bne.n	800317c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003144:	041b      	lsls	r3, r3, #16
 8003146:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800314e:	0c1b      	lsrs	r3, r3, #16
 8003150:	431a      	orrs	r2, r3
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	691b      	ldr	r3, [r3, #16]
 800315a:	3301      	adds	r3, #1
 800315c:	029a      	lsls	r2, r3, #10
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003170:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	661a      	str	r2, [r3, #96]	; 0x60
 800317a:	e00f      	b.n	800319c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a58      	ldr	r2, [pc, #352]	; (80032e4 <HAL_SD_GetCardCSD+0x344>)
 8003182:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003188:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e09d      	b.n	80032d8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031a0:	0b9b      	lsrs	r3, r3, #14
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	f003 0301 	and.w	r3, r3, #1
 80031a8:	b2da      	uxtb	r2, r3
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031b2:	09db      	lsrs	r3, r3, #7
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031ba:	b2da      	uxtb	r2, r3
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031ca:	b2da      	uxtb	r2, r3
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d4:	0fdb      	lsrs	r3, r3, #31
 80031d6:	b2da      	uxtb	r2, r3
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e0:	0f5b      	lsrs	r3, r3, #29
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	f003 0303 	and.w	r3, r3, #3
 80031e8:	b2da      	uxtb	r2, r3
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f2:	0e9b      	lsrs	r3, r3, #26
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	f003 0307 	and.w	r3, r3, #7
 80031fa:	b2da      	uxtb	r2, r3
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003204:	0d9b      	lsrs	r3, r3, #22
 8003206:	b2db      	uxtb	r3, r3
 8003208:	f003 030f 	and.w	r3, r3, #15
 800320c:	b2da      	uxtb	r2, r3
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003216:	0d5b      	lsrs	r3, r3, #21
 8003218:	b2db      	uxtb	r3, r3
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	b2da      	uxtb	r2, r3
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003232:	0c1b      	lsrs	r3, r3, #16
 8003234:	b2db      	uxtb	r3, r3
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	b2da      	uxtb	r2, r3
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003246:	0bdb      	lsrs	r3, r3, #15
 8003248:	b2db      	uxtb	r3, r3
 800324a:	f003 0301 	and.w	r3, r3, #1
 800324e:	b2da      	uxtb	r2, r3
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800325a:	0b9b      	lsrs	r3, r3, #14
 800325c:	b2db      	uxtb	r3, r3
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	b2da      	uxtb	r2, r3
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800326e:	0b5b      	lsrs	r3, r3, #13
 8003270:	b2db      	uxtb	r3, r3
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	b2da      	uxtb	r2, r3
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003282:	0b1b      	lsrs	r3, r3, #12
 8003284:	b2db      	uxtb	r3, r3
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	b2da      	uxtb	r2, r3
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003296:	0a9b      	lsrs	r3, r3, #10
 8003298:	b2db      	uxtb	r3, r3
 800329a:	f003 0303 	and.w	r3, r3, #3
 800329e:	b2da      	uxtb	r2, r3
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032aa:	0a1b      	lsrs	r3, r3, #8
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	f003 0303 	and.w	r3, r3, #3
 80032b2:	b2da      	uxtb	r2, r3
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032be:	085b      	lsrs	r3, r3, #1
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032c6:	b2da      	uxtb	r2, r3
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	2201      	movs	r2, #1
 80032d2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80032d6:	2300      	movs	r3, #0
}
 80032d8:	4618      	mov	r0, r3
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	bc80      	pop	{r7}
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	004005ff 	.word	0x004005ff

080032e8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8003332:	2300      	movs	r3, #0
}
 8003334:	4618      	mov	r0, r3
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	bc80      	pop	{r7}
 800333c:	4770      	bx	lr
	...

08003340 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8003340:	b5b0      	push	{r4, r5, r7, lr}
 8003342:	b08e      	sub	sp, #56	; 0x38
 8003344:	af04      	add	r7, sp, #16
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2203      	movs	r2, #3
 800334e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003356:	2b03      	cmp	r3, #3
 8003358:	d02e      	beq.n	80033b8 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003360:	d106      	bne.n	8003370 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003366:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	639a      	str	r2, [r3, #56]	; 0x38
 800336e:	e029      	b.n	80033c4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003376:	d10a      	bne.n	800338e <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f000 fb0d 	bl	8003998 <SD_WideBus_Enable>
 800337e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003386:	431a      	orrs	r2, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	639a      	str	r2, [r3, #56]	; 0x38
 800338c:	e01a      	b.n	80033c4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d10a      	bne.n	80033aa <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f000 fb4a 	bl	8003a2e <SD_WideBus_Disable>
 800339a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a2:	431a      	orrs	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	639a      	str	r2, [r3, #56]	; 0x38
 80033a8:	e00c      	b.n	80033c4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ae:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	639a      	str	r2, [r3, #56]	; 0x38
 80033b6:	e005      	b.n	80033c4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033bc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d009      	beq.n	80033e0 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a18      	ldr	r2, [pc, #96]	; (8003434 <HAL_SD_ConfigWideBusOperation+0xf4>)
 80033d2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e024      	b.n	800342a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	695b      	ldr	r3, [r3, #20]
 80033fa:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681d      	ldr	r5, [r3, #0]
 8003406:	466c      	mov	r4, sp
 8003408:	f107 0318 	add.w	r3, r7, #24
 800340c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003410:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003414:	f107 030c 	add.w	r3, r7, #12
 8003418:	cb0e      	ldmia	r3, {r1, r2, r3}
 800341a:	4628      	mov	r0, r5
 800341c:	f001 f89c 	bl	8004558 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003428:	2300      	movs	r3, #0
}
 800342a:	4618      	mov	r0, r3
 800342c:	3728      	adds	r7, #40	; 0x28
 800342e:	46bd      	mov	sp, r7
 8003430:	bdb0      	pop	{r4, r5, r7, pc}
 8003432:	bf00      	nop
 8003434:	004005ff 	.word	0x004005ff

08003438 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b086      	sub	sp, #24
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003440:	2300      	movs	r3, #0
 8003442:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003444:	f107 030c 	add.w	r3, r7, #12
 8003448:	4619      	mov	r1, r3
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 fa7c 	bl	8003948 <SD_SendStatus>
 8003450:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d005      	beq.n	8003464 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	431a      	orrs	r2, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	0a5b      	lsrs	r3, r3, #9
 8003468:	f003 030f 	and.w	r3, r3, #15
 800346c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800346e:	693b      	ldr	r3, [r7, #16]
}
 8003470:	4618      	mov	r0, r3
 8003472:	3718      	adds	r7, #24
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003478:	b480      	push	{r7}
 800347a:	b085      	sub	sp, #20
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003484:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003494:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003496:	bf00      	nop
 8003498:	3714      	adds	r7, #20
 800349a:	46bd      	mov	sp, r7
 800349c:	bc80      	pop	{r7}
 800349e:	4770      	bx	lr

080034a0 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ac:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b2:	2b82      	cmp	r3, #130	; 0x82
 80034b4:	d111      	bne.n	80034da <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f001 f9ca 	bl	8004854 <SDMMC_CmdStopTransfer>
 80034c0:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d008      	beq.n	80034da <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	431a      	orrs	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80034d4:	68f8      	ldr	r0, [r7, #12]
 80034d6:	f7ff fd59 	bl	8002f8c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f022 0208 	bic.w	r2, r2, #8
 80034e8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f240 523a 	movw	r2, #1338	; 0x53a
 80034f2:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2200      	movs	r2, #0
 8003500:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8003502:	68f8      	ldr	r0, [r7, #12]
 8003504:	f001 fe2a 	bl	800515c <HAL_SD_RxCpltCallback>
#endif
}
 8003508:	bf00      	nop
 800350a:	3710      	adds	r7, #16
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b086      	sub	sp, #24
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800351c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f7fe f9e2 	bl	80018e8 <HAL_DMA_GetError>
 8003524:	4603      	mov	r3, r0
 8003526:	2b02      	cmp	r3, #2
 8003528:	d03e      	beq.n	80035a8 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003530:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003538:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	2b01      	cmp	r3, #1
 800353e:	d002      	beq.n	8003546 <SD_DMAError+0x36>
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2b01      	cmp	r3, #1
 8003544:	d12d      	bne.n	80035a2 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a19      	ldr	r2, [pc, #100]	; (80035b0 <SD_DMAError+0xa0>)
 800354c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800355c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003562:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800356a:	6978      	ldr	r0, [r7, #20]
 800356c:	f7ff ff64 	bl	8003438 <HAL_SD_GetCardState>
 8003570:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	2b06      	cmp	r3, #6
 8003576:	d002      	beq.n	800357e <SD_DMAError+0x6e>
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	2b05      	cmp	r3, #5
 800357c:	d10a      	bne.n	8003594 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4618      	mov	r0, r3
 8003584:	f001 f966 	bl	8004854 <SDMMC_CmdStopTransfer>
 8003588:	4602      	mov	r2, r0
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800358e:	431a      	orrs	r2, r3
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	2200      	movs	r2, #0
 80035a0:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80035a2:	6978      	ldr	r0, [r7, #20]
 80035a4:	f7ff fcf2 	bl	8002f8c <HAL_SD_ErrorCallback>
#endif
  }
}
 80035a8:	bf00      	nop
 80035aa:	3718      	adds	r7, #24
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	004005ff 	.word	0x004005ff

080035b4 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c0:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f240 523a 	movw	r2, #1338	; 0x53a
 80035ca:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80035cc:	68f8      	ldr	r0, [r7, #12]
 80035ce:	f7ff ff33 	bl	8003438 <HAL_SD_GetCardState>
 80035d2:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2200      	movs	r2, #0
 80035e0:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	2b06      	cmp	r3, #6
 80035e6:	d002      	beq.n	80035ee <SD_DMATxAbort+0x3a>
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	2b05      	cmp	r3, #5
 80035ec:	d10a      	bne.n	8003604 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4618      	mov	r0, r3
 80035f4:	f001 f92e 	bl	8004854 <SDMMC_CmdStopTransfer>
 80035f8:	4602      	mov	r2, r0
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035fe:	431a      	orrs	r2, r3
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003608:	2b00      	cmp	r3, #0
 800360a:	d103      	bne.n	8003614 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800360c:	68f8      	ldr	r0, [r7, #12]
 800360e:	f001 fd91 	bl	8005134 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003612:	e002      	b.n	800361a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003614:	68f8      	ldr	r0, [r7, #12]
 8003616:	f7ff fcb9 	bl	8002f8c <HAL_SD_ErrorCallback>
}
 800361a:	bf00      	nop
 800361c:	3710      	adds	r7, #16
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}

08003622 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8003622:	b580      	push	{r7, lr}
 8003624:	b084      	sub	sp, #16
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800362e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f240 523a 	movw	r2, #1338	; 0x53a
 8003638:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800363a:	68f8      	ldr	r0, [r7, #12]
 800363c:	f7ff fefc 	bl	8003438 <HAL_SD_GetCardState>
 8003640:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2201      	movs	r2, #1
 8003646:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2200      	movs	r2, #0
 800364e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	2b06      	cmp	r3, #6
 8003654:	d002      	beq.n	800365c <SD_DMARxAbort+0x3a>
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	2b05      	cmp	r3, #5
 800365a:	d10a      	bne.n	8003672 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4618      	mov	r0, r3
 8003662:	f001 f8f7 	bl	8004854 <SDMMC_CmdStopTransfer>
 8003666:	4602      	mov	r2, r0
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800366c:	431a      	orrs	r2, r3
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003676:	2b00      	cmp	r3, #0
 8003678:	d103      	bne.n	8003682 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800367a:	68f8      	ldr	r0, [r7, #12]
 800367c:	f001 fd5a 	bl	8005134 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003680:	e002      	b.n	8003688 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003682:	68f8      	ldr	r0, [r7, #12]
 8003684:	f7ff fc82 	bl	8002f8c <HAL_SD_ErrorCallback>
}
 8003688:	bf00      	nop
 800368a:	3710      	adds	r7, #16
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003690:	b5b0      	push	{r4, r5, r7, lr}
 8003692:	b094      	sub	sp, #80	; 0x50
 8003694:	af04      	add	r7, sp, #16
 8003696:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003698:	2301      	movs	r3, #1
 800369a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4618      	mov	r0, r3
 80036a2:	f000 ffae 	bl	8004602 <SDIO_GetPowerState>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d102      	bne.n	80036b2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80036ac:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80036b0:	e0b7      	b.n	8003822 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b6:	2b03      	cmp	r3, #3
 80036b8:	d02f      	beq.n	800371a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4618      	mov	r0, r3
 80036c0:	f001 f9d2 	bl	8004a68 <SDMMC_CmdSendCID>
 80036c4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80036c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d001      	beq.n	80036d0 <SD_InitCard+0x40>
    {
      return errorstate;
 80036cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036ce:	e0a8      	b.n	8003822 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2100      	movs	r1, #0
 80036d6:	4618      	mov	r0, r3
 80036d8:	f000 ffd5 	bl	8004686 <SDIO_GetResponse>
 80036dc:	4602      	mov	r2, r0
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2104      	movs	r1, #4
 80036e8:	4618      	mov	r0, r3
 80036ea:	f000 ffcc 	bl	8004686 <SDIO_GetResponse>
 80036ee:	4602      	mov	r2, r0
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2108      	movs	r1, #8
 80036fa:	4618      	mov	r0, r3
 80036fc:	f000 ffc3 	bl	8004686 <SDIO_GetResponse>
 8003700:	4602      	mov	r2, r0
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	210c      	movs	r1, #12
 800370c:	4618      	mov	r0, r3
 800370e:	f000 ffba 	bl	8004686 <SDIO_GetResponse>
 8003712:	4602      	mov	r2, r0
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800371e:	2b03      	cmp	r3, #3
 8003720:	d00d      	beq.n	800373e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f107 020e 	add.w	r2, r7, #14
 800372a:	4611      	mov	r1, r2
 800372c:	4618      	mov	r0, r3
 800372e:	f001 f9d8 	bl	8004ae2 <SDMMC_CmdSetRelAdd>
 8003732:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003734:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003736:	2b00      	cmp	r3, #0
 8003738:	d001      	beq.n	800373e <SD_InitCard+0xae>
    {
      return errorstate;
 800373a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800373c:	e071      	b.n	8003822 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003742:	2b03      	cmp	r3, #3
 8003744:	d036      	beq.n	80037b4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8003746:	89fb      	ldrh	r3, [r7, #14]
 8003748:	461a      	mov	r2, r3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003756:	041b      	lsls	r3, r3, #16
 8003758:	4619      	mov	r1, r3
 800375a:	4610      	mov	r0, r2
 800375c:	f001 f9a2 	bl	8004aa4 <SDMMC_CmdSendCSD>
 8003760:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003764:	2b00      	cmp	r3, #0
 8003766:	d001      	beq.n	800376c <SD_InitCard+0xdc>
    {
      return errorstate;
 8003768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800376a:	e05a      	b.n	8003822 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2100      	movs	r1, #0
 8003772:	4618      	mov	r0, r3
 8003774:	f000 ff87 	bl	8004686 <SDIO_GetResponse>
 8003778:	4602      	mov	r2, r0
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2104      	movs	r1, #4
 8003784:	4618      	mov	r0, r3
 8003786:	f000 ff7e 	bl	8004686 <SDIO_GetResponse>
 800378a:	4602      	mov	r2, r0
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2108      	movs	r1, #8
 8003796:	4618      	mov	r0, r3
 8003798:	f000 ff75 	bl	8004686 <SDIO_GetResponse>
 800379c:	4602      	mov	r2, r0
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	210c      	movs	r1, #12
 80037a8:	4618      	mov	r0, r3
 80037aa:	f000 ff6c 	bl	8004686 <SDIO_GetResponse>
 80037ae:	4602      	mov	r2, r0
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2104      	movs	r1, #4
 80037ba:	4618      	mov	r0, r3
 80037bc:	f000 ff63 	bl	8004686 <SDIO_GetResponse>
 80037c0:	4603      	mov	r3, r0
 80037c2:	0d1a      	lsrs	r2, r3, #20
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80037c8:	f107 0310 	add.w	r3, r7, #16
 80037cc:	4619      	mov	r1, r3
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f7ff fbe6 	bl	8002fa0 <HAL_SD_GetCardCSD>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d002      	beq.n	80037e0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80037da:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80037de:	e020      	b.n	8003822 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6819      	ldr	r1, [r3, #0]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037e8:	041b      	lsls	r3, r3, #16
 80037ea:	f04f 0400 	mov.w	r4, #0
 80037ee:	461a      	mov	r2, r3
 80037f0:	4623      	mov	r3, r4
 80037f2:	4608      	mov	r0, r1
 80037f4:	f001 f850 	bl	8004898 <SDMMC_CmdSelDesel>
 80037f8:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80037fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d001      	beq.n	8003804 <SD_InitCard+0x174>
  {
    return errorstate;
 8003800:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003802:	e00e      	b.n	8003822 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681d      	ldr	r5, [r3, #0]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	466c      	mov	r4, sp
 800380c:	f103 0210 	add.w	r2, r3, #16
 8003810:	ca07      	ldmia	r2, {r0, r1, r2}
 8003812:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003816:	3304      	adds	r3, #4
 8003818:	cb0e      	ldmia	r3, {r1, r2, r3}
 800381a:	4628      	mov	r0, r5
 800381c:	f000 fe9c 	bl	8004558 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3740      	adds	r7, #64	; 0x40
 8003826:	46bd      	mov	sp, r7
 8003828:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800382c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b086      	sub	sp, #24
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003834:	2300      	movs	r3, #0
 8003836:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003838:	2300      	movs	r3, #0
 800383a:	617b      	str	r3, [r7, #20]
 800383c:	2300      	movs	r3, #0
 800383e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4618      	mov	r0, r3
 8003846:	f001 f84a 	bl	80048de <SDMMC_CmdGoIdleState>
 800384a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d001      	beq.n	8003856 <SD_PowerON+0x2a>
  {
    return errorstate;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	e072      	b.n	800393c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4618      	mov	r0, r3
 800385c:	f001 f85d 	bl	800491a <SDMMC_CmdOperCond>
 8003860:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d00d      	beq.n	8003884 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4618      	mov	r0, r3
 8003874:	f001 f833 	bl	80048de <SDMMC_CmdGoIdleState>
 8003878:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d004      	beq.n	800388a <SD_PowerON+0x5e>
    {
      return errorstate;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	e05b      	b.n	800393c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800388e:	2b01      	cmp	r3, #1
 8003890:	d137      	bne.n	8003902 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2100      	movs	r1, #0
 8003898:	4618      	mov	r0, r3
 800389a:	f001 f85d 	bl	8004958 <SDMMC_CmdAppCommand>
 800389e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d02d      	beq.n	8003902 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80038a6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80038aa:	e047      	b.n	800393c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2100      	movs	r1, #0
 80038b2:	4618      	mov	r0, r3
 80038b4:	f001 f850 	bl	8004958 <SDMMC_CmdAppCommand>
 80038b8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d001      	beq.n	80038c4 <SD_PowerON+0x98>
    {
      return errorstate;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	e03b      	b.n	800393c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	491e      	ldr	r1, [pc, #120]	; (8003944 <SD_PowerON+0x118>)
 80038ca:	4618      	mov	r0, r3
 80038cc:	f001 f866 	bl	800499c <SDMMC_CmdAppOperCommand>
 80038d0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d002      	beq.n	80038de <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80038d8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80038dc:	e02e      	b.n	800393c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	2100      	movs	r1, #0
 80038e4:	4618      	mov	r0, r3
 80038e6:	f000 fece 	bl	8004686 <SDIO_GetResponse>
 80038ea:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	0fdb      	lsrs	r3, r3, #31
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d101      	bne.n	80038f8 <SD_PowerON+0xcc>
 80038f4:	2301      	movs	r3, #1
 80038f6:	e000      	b.n	80038fa <SD_PowerON+0xce>
 80038f8:	2300      	movs	r3, #0
 80038fa:	613b      	str	r3, [r7, #16]

    count++;
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	3301      	adds	r3, #1
 8003900:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003908:	4293      	cmp	r3, r2
 800390a:	d802      	bhi.n	8003912 <SD_PowerON+0xe6>
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d0cc      	beq.n	80038ac <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003918:	4293      	cmp	r3, r2
 800391a:	d902      	bls.n	8003922 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800391c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003920:	e00c      	b.n	800393c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d003      	beq.n	8003934 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	645a      	str	r2, [r3, #68]	; 0x44
 8003932:	e002      	b.n	800393a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800393a:	2300      	movs	r3, #0
}
 800393c:	4618      	mov	r0, r3
 800393e:	3718      	adds	r7, #24
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}
 8003944:	c1100000 	.word	0xc1100000

08003948 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d102      	bne.n	800395e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8003958:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800395c:	e018      	b.n	8003990 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003966:	041b      	lsls	r3, r3, #16
 8003968:	4619      	mov	r1, r3
 800396a:	4610      	mov	r0, r2
 800396c:	f001 f8da 	bl	8004b24 <SDMMC_CmdSendStatus>
 8003970:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d001      	beq.n	800397c <SD_SendStatus+0x34>
  {
    return errorstate;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	e009      	b.n	8003990 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2100      	movs	r1, #0
 8003982:	4618      	mov	r0, r3
 8003984:	f000 fe7f 	bl	8004686 <SDIO_GetResponse>
 8003988:	4602      	mov	r2, r0
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800398e:	2300      	movs	r3, #0
}
 8003990:	4618      	mov	r0, r3
 8003992:	3710      	adds	r7, #16
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b086      	sub	sp, #24
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80039a0:	2300      	movs	r3, #0
 80039a2:	60fb      	str	r3, [r7, #12]
 80039a4:	2300      	movs	r3, #0
 80039a6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2100      	movs	r1, #0
 80039ae:	4618      	mov	r0, r3
 80039b0:	f000 fe69 	bl	8004686 <SDIO_GetResponse>
 80039b4:	4603      	mov	r3, r0
 80039b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039be:	d102      	bne.n	80039c6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80039c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80039c4:	e02f      	b.n	8003a26 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80039c6:	f107 030c 	add.w	r3, r7, #12
 80039ca:	4619      	mov	r1, r3
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f000 f879 	bl	8003ac4 <SD_FindSCR>
 80039d2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d001      	beq.n	80039de <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	e023      	b.n	8003a26 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d01c      	beq.n	8003a22 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039f0:	041b      	lsls	r3, r3, #16
 80039f2:	4619      	mov	r1, r3
 80039f4:	4610      	mov	r0, r2
 80039f6:	f000 ffaf 	bl	8004958 <SDMMC_CmdAppCommand>
 80039fa:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d001      	beq.n	8003a06 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	e00f      	b.n	8003a26 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2102      	movs	r1, #2
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f000 ffe8 	bl	80049e2 <SDMMC_CmdBusWidth>
 8003a12:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d001      	beq.n	8003a1e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	e003      	b.n	8003a26 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	e001      	b.n	8003a26 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003a22:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3718      	adds	r7, #24
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}

08003a2e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8003a2e:	b580      	push	{r7, lr}
 8003a30:	b086      	sub	sp, #24
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003a36:	2300      	movs	r3, #0
 8003a38:	60fb      	str	r3, [r7, #12]
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2100      	movs	r1, #0
 8003a44:	4618      	mov	r0, r3
 8003a46:	f000 fe1e 	bl	8004686 <SDIO_GetResponse>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a50:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a54:	d102      	bne.n	8003a5c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003a56:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003a5a:	e02f      	b.n	8003abc <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003a5c:	f107 030c 	add.w	r3, r7, #12
 8003a60:	4619      	mov	r1, r3
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 f82e 	bl	8003ac4 <SD_FindSCR>
 8003a68:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d001      	beq.n	8003a74 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	e023      	b.n	8003abc <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d01c      	beq.n	8003ab8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a86:	041b      	lsls	r3, r3, #16
 8003a88:	4619      	mov	r1, r3
 8003a8a:	4610      	mov	r0, r2
 8003a8c:	f000 ff64 	bl	8004958 <SDMMC_CmdAppCommand>
 8003a90:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d001      	beq.n	8003a9c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	e00f      	b.n	8003abc <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2100      	movs	r1, #0
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f000 ff9d 	bl	80049e2 <SDMMC_CmdBusWidth>
 8003aa8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d001      	beq.n	8003ab4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	e003      	b.n	8003abc <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	e001      	b.n	8003abc <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003ab8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3718      	adds	r7, #24
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8003ac4:	b590      	push	{r4, r7, lr}
 8003ac6:	b08f      	sub	sp, #60	; 0x3c
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003ace:	f7fd fb4d 	bl	800116c <HAL_GetTick>
 8003ad2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8003ad8:	2300      	movs	r3, #0
 8003ada:	60bb      	str	r3, [r7, #8]
 8003adc:	2300      	movs	r3, #0
 8003ade:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2108      	movs	r1, #8
 8003aea:	4618      	mov	r0, r3
 8003aec:	f000 fe08 	bl	8004700 <SDMMC_CmdBlockLength>
 8003af0:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d001      	beq.n	8003afc <SD_FindSCR+0x38>
  {
    return errorstate;
 8003af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003afa:	e0a9      	b.n	8003c50 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b04:	041b      	lsls	r3, r3, #16
 8003b06:	4619      	mov	r1, r3
 8003b08:	4610      	mov	r0, r2
 8003b0a:	f000 ff25 	bl	8004958 <SDMMC_CmdAppCommand>
 8003b0e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d001      	beq.n	8003b1a <SD_FindSCR+0x56>
  {
    return errorstate;
 8003b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b18:	e09a      	b.n	8003c50 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b1e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8003b20:	2308      	movs	r3, #8
 8003b22:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8003b24:	2330      	movs	r3, #48	; 0x30
 8003b26:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003b28:	2302      	movs	r3, #2
 8003b2a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8003b30:	2301      	movs	r3, #1
 8003b32:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f107 0210 	add.w	r2, r7, #16
 8003b3c:	4611      	mov	r1, r2
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f000 fdb3 	bl	80046aa <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f000 ff6c 	bl	8004a26 <SDMMC_CmdSendSCR>
 8003b4e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d022      	beq.n	8003b9c <SD_FindSCR+0xd8>
  {
    return errorstate;
 8003b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b58:	e07a      	b.n	8003c50 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d00e      	beq.n	8003b86 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6819      	ldr	r1, [r3, #0]
 8003b6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	f107 0208 	add.w	r2, r7, #8
 8003b74:	18d4      	adds	r4, r2, r3
 8003b76:	4608      	mov	r0, r1
 8003b78:	f000 fd18 	bl	80045ac <SDIO_ReadFIFO>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	6023      	str	r3, [r4, #0]
      index++;
 8003b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b82:	3301      	adds	r3, #1
 8003b84:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8003b86:	f7fd faf1 	bl	800116c <HAL_GetTick>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b94:	d102      	bne.n	8003b9c <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8003b96:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003b9a:	e059      	b.n	8003c50 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ba2:	f240 432a 	movw	r3, #1066	; 0x42a
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d0d6      	beq.n	8003b5a <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bb2:	f003 0308 	and.w	r3, r3, #8
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d005      	beq.n	8003bc6 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2208      	movs	r2, #8
 8003bc0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8003bc2:	2308      	movs	r3, #8
 8003bc4:	e044      	b.n	8003c50 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bcc:	f003 0302 	and.w	r3, r3, #2
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d005      	beq.n	8003be0 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2202      	movs	r2, #2
 8003bda:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8003bdc:	2302      	movs	r3, #2
 8003bde:	e037      	b.n	8003c50 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003be6:	f003 0320 	and.w	r3, r3, #32
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d005      	beq.n	8003bfa <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	2220      	movs	r2, #32
 8003bf4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8003bf6:	2320      	movs	r3, #32
 8003bf8:	e02a      	b.n	8003c50 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f240 523a 	movw	r2, #1338	; 0x53a
 8003c02:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	061a      	lsls	r2, r3, #24
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	021b      	lsls	r3, r3, #8
 8003c0c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003c10:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	0a1b      	lsrs	r3, r3, #8
 8003c16:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003c1a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	0e1b      	lsrs	r3, r3, #24
 8003c20:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c24:	601a      	str	r2, [r3, #0]
    scr++;
 8003c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c28:	3304      	adds	r3, #4
 8003c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	061a      	lsls	r2, r3, #24
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	021b      	lsls	r3, r3, #8
 8003c34:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003c38:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	0a1b      	lsrs	r3, r3, #8
 8003c3e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003c42:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	0e1b      	lsrs	r3, r3, #24
 8003c48:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c4c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8003c4e:	2300      	movs	r3, #0
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	373c      	adds	r7, #60	; 0x3c
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd90      	pop	{r4, r7, pc}

08003c58 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b086      	sub	sp, #24
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c64:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c6a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d03f      	beq.n	8003cf2 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8003c72:	2300      	movs	r3, #0
 8003c74:	617b      	str	r3, [r7, #20]
 8003c76:	e033      	b.n	8003ce0 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f000 fc95 	bl	80045ac <SDIO_ReadFIFO>
 8003c82:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	b2da      	uxtb	r2, r3
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	3301      	adds	r3, #1
 8003c90:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	3b01      	subs	r3, #1
 8003c96:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	0a1b      	lsrs	r3, r3, #8
 8003c9c:	b2da      	uxtb	r2, r3
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	3b01      	subs	r3, #1
 8003cac:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	0c1b      	lsrs	r3, r3, #16
 8003cb2:	b2da      	uxtb	r2, r3
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	3301      	adds	r3, #1
 8003cbc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	3b01      	subs	r3, #1
 8003cc2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	0e1b      	lsrs	r3, r3, #24
 8003cc8:	b2da      	uxtb	r2, r3
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	3301      	adds	r3, #1
 8003cde:	617b      	str	r3, [r7, #20]
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	2b07      	cmp	r3, #7
 8003ce4:	d9c8      	bls.n	8003c78 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	68fa      	ldr	r2, [r7, #12]
 8003cea:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	693a      	ldr	r2, [r7, #16]
 8003cf0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8003cf2:	bf00      	nop
 8003cf4:	3718      	adds	r7, #24
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}

08003cfa <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8003cfa:	b580      	push	{r7, lr}
 8003cfc:	b086      	sub	sp, #24
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a1b      	ldr	r3, [r3, #32]
 8003d06:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d043      	beq.n	8003d9c <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8003d14:	2300      	movs	r3, #0
 8003d16:	617b      	str	r3, [r7, #20]
 8003d18:	e037      	b.n	8003d8a <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	3301      	adds	r3, #1
 8003d24:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	3b01      	subs	r3, #1
 8003d2a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	021a      	lsls	r2, r3, #8
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	3b01      	subs	r3, #1
 8003d42:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	041a      	lsls	r2, r3, #16
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	3301      	adds	r3, #1
 8003d54:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	3b01      	subs	r3, #1
 8003d5a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	061a      	lsls	r2, r3, #24
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	3301      	adds	r3, #1
 8003d6c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	3b01      	subs	r3, #1
 8003d72:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f107 0208 	add.w	r2, r7, #8
 8003d7c:	4611      	mov	r1, r2
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f000 fc20 	bl	80045c4 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	3301      	adds	r3, #1
 8003d88:	617b      	str	r3, [r7, #20]
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	2b07      	cmp	r3, #7
 8003d8e:	d9c4      	bls.n	8003d1a <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	68fa      	ldr	r2, [r7, #12]
 8003d94:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	693a      	ldr	r2, [r7, #16]
 8003d9a:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8003d9c:	bf00      	nop
 8003d9e:	3718      	adds	r7, #24
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d101      	bne.n	8003db6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e041      	b.n	8003e3a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d106      	bne.n	8003dd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 f839 	bl	8003e42 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2202      	movs	r2, #2
 8003dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	3304      	adds	r3, #4
 8003de0:	4619      	mov	r1, r3
 8003de2:	4610      	mov	r0, r2
 8003de4:	f000 f9d0 	bl	8004188 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e38:	2300      	movs	r3, #0
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3708      	adds	r7, #8
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}

08003e42 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003e42:	b480      	push	{r7}
 8003e44:	b083      	sub	sp, #12
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003e4a:	bf00      	nop
 8003e4c:	370c      	adds	r7, #12
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bc80      	pop	{r7}
 8003e52:	4770      	bx	lr

08003e54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b085      	sub	sp, #20
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d001      	beq.n	8003e6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e04e      	b.n	8003f0a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2202      	movs	r2, #2
 8003e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68da      	ldr	r2, [r3, #12]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f042 0201 	orr.w	r2, r2, #1
 8003e82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a22      	ldr	r2, [pc, #136]	; (8003f14 <HAL_TIM_Base_Start_IT+0xc0>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d022      	beq.n	8003ed4 <HAL_TIM_Base_Start_IT+0x80>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e96:	d01d      	beq.n	8003ed4 <HAL_TIM_Base_Start_IT+0x80>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a1e      	ldr	r2, [pc, #120]	; (8003f18 <HAL_TIM_Base_Start_IT+0xc4>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d018      	beq.n	8003ed4 <HAL_TIM_Base_Start_IT+0x80>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a1d      	ldr	r2, [pc, #116]	; (8003f1c <HAL_TIM_Base_Start_IT+0xc8>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d013      	beq.n	8003ed4 <HAL_TIM_Base_Start_IT+0x80>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a1b      	ldr	r2, [pc, #108]	; (8003f20 <HAL_TIM_Base_Start_IT+0xcc>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d00e      	beq.n	8003ed4 <HAL_TIM_Base_Start_IT+0x80>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a1a      	ldr	r2, [pc, #104]	; (8003f24 <HAL_TIM_Base_Start_IT+0xd0>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d009      	beq.n	8003ed4 <HAL_TIM_Base_Start_IT+0x80>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a18      	ldr	r2, [pc, #96]	; (8003f28 <HAL_TIM_Base_Start_IT+0xd4>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d004      	beq.n	8003ed4 <HAL_TIM_Base_Start_IT+0x80>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a17      	ldr	r2, [pc, #92]	; (8003f2c <HAL_TIM_Base_Start_IT+0xd8>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d111      	bne.n	8003ef8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f003 0307 	and.w	r3, r3, #7
 8003ede:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2b06      	cmp	r3, #6
 8003ee4:	d010      	beq.n	8003f08 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f042 0201 	orr.w	r2, r2, #1
 8003ef4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ef6:	e007      	b.n	8003f08 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f042 0201 	orr.w	r2, r2, #1
 8003f06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3714      	adds	r7, #20
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bc80      	pop	{r7}
 8003f12:	4770      	bx	lr
 8003f14:	40010000 	.word	0x40010000
 8003f18:	40000400 	.word	0x40000400
 8003f1c:	40000800 	.word	0x40000800
 8003f20:	40000c00 	.word	0x40000c00
 8003f24:	40010400 	.word	0x40010400
 8003f28:	40014000 	.word	0x40014000
 8003f2c:	40001800 	.word	0x40001800

08003f30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	f003 0302 	and.w	r3, r3, #2
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d122      	bne.n	8003f8c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	f003 0302 	and.w	r3, r3, #2
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d11b      	bne.n	8003f8c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f06f 0202 	mvn.w	r2, #2
 8003f5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2201      	movs	r2, #1
 8003f62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	f003 0303 	and.w	r3, r3, #3
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d003      	beq.n	8003f7a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 f8ed 	bl	8004152 <HAL_TIM_IC_CaptureCallback>
 8003f78:	e005      	b.n	8003f86 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 f8e0 	bl	8004140 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f000 f8ef 	bl	8004164 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	f003 0304 	and.w	r3, r3, #4
 8003f96:	2b04      	cmp	r3, #4
 8003f98:	d122      	bne.n	8003fe0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	f003 0304 	and.w	r3, r3, #4
 8003fa4:	2b04      	cmp	r3, #4
 8003fa6:	d11b      	bne.n	8003fe0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f06f 0204 	mvn.w	r2, #4
 8003fb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2202      	movs	r2, #2
 8003fb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	699b      	ldr	r3, [r3, #24]
 8003fbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d003      	beq.n	8003fce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 f8c3 	bl	8004152 <HAL_TIM_IC_CaptureCallback>
 8003fcc:	e005      	b.n	8003fda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 f8b6 	bl	8004140 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f000 f8c5 	bl	8004164 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	f003 0308 	and.w	r3, r3, #8
 8003fea:	2b08      	cmp	r3, #8
 8003fec:	d122      	bne.n	8004034 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	f003 0308 	and.w	r3, r3, #8
 8003ff8:	2b08      	cmp	r3, #8
 8003ffa:	d11b      	bne.n	8004034 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f06f 0208 	mvn.w	r2, #8
 8004004:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2204      	movs	r2, #4
 800400a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	69db      	ldr	r3, [r3, #28]
 8004012:	f003 0303 	and.w	r3, r3, #3
 8004016:	2b00      	cmp	r3, #0
 8004018:	d003      	beq.n	8004022 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 f899 	bl	8004152 <HAL_TIM_IC_CaptureCallback>
 8004020:	e005      	b.n	800402e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 f88c 	bl	8004140 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f000 f89b 	bl	8004164 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	f003 0310 	and.w	r3, r3, #16
 800403e:	2b10      	cmp	r3, #16
 8004040:	d122      	bne.n	8004088 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	f003 0310 	and.w	r3, r3, #16
 800404c:	2b10      	cmp	r3, #16
 800404e:	d11b      	bne.n	8004088 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f06f 0210 	mvn.w	r2, #16
 8004058:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2208      	movs	r2, #8
 800405e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	69db      	ldr	r3, [r3, #28]
 8004066:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800406a:	2b00      	cmp	r3, #0
 800406c:	d003      	beq.n	8004076 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 f86f 	bl	8004152 <HAL_TIM_IC_CaptureCallback>
 8004074:	e005      	b.n	8004082 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f000 f862 	bl	8004140 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f000 f871 	bl	8004164 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	f003 0301 	and.w	r3, r3, #1
 8004092:	2b01      	cmp	r3, #1
 8004094:	d10e      	bne.n	80040b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	f003 0301 	and.w	r3, r3, #1
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d107      	bne.n	80040b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f06f 0201 	mvn.w	r2, #1
 80040ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f7fc fd66 	bl	8000b80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040be:	2b80      	cmp	r3, #128	; 0x80
 80040c0:	d10e      	bne.n	80040e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040cc:	2b80      	cmp	r3, #128	; 0x80
 80040ce:	d107      	bne.n	80040e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80040d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f000 f8fb 	bl	80042d6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ea:	2b40      	cmp	r3, #64	; 0x40
 80040ec:	d10e      	bne.n	800410c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040f8:	2b40      	cmp	r3, #64	; 0x40
 80040fa:	d107      	bne.n	800410c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004104:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 f835 	bl	8004176 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	f003 0320 	and.w	r3, r3, #32
 8004116:	2b20      	cmp	r3, #32
 8004118:	d10e      	bne.n	8004138 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	f003 0320 	and.w	r3, r3, #32
 8004124:	2b20      	cmp	r3, #32
 8004126:	d107      	bne.n	8004138 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f06f 0220 	mvn.w	r2, #32
 8004130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f000 f8c6 	bl	80042c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004138:	bf00      	nop
 800413a:	3708      	adds	r7, #8
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004148:	bf00      	nop
 800414a:	370c      	adds	r7, #12
 800414c:	46bd      	mov	sp, r7
 800414e:	bc80      	pop	{r7}
 8004150:	4770      	bx	lr

08004152 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004152:	b480      	push	{r7}
 8004154:	b083      	sub	sp, #12
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800415a:	bf00      	nop
 800415c:	370c      	adds	r7, #12
 800415e:	46bd      	mov	sp, r7
 8004160:	bc80      	pop	{r7}
 8004162:	4770      	bx	lr

08004164 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800416c:	bf00      	nop
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	bc80      	pop	{r7}
 8004174:	4770      	bx	lr

08004176 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004176:	b480      	push	{r7}
 8004178:	b083      	sub	sp, #12
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800417e:	bf00      	nop
 8004180:	370c      	adds	r7, #12
 8004182:	46bd      	mov	sp, r7
 8004184:	bc80      	pop	{r7}
 8004186:	4770      	bx	lr

08004188 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004188:	b480      	push	{r7}
 800418a:	b085      	sub	sp, #20
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a3f      	ldr	r2, [pc, #252]	; (8004298 <TIM_Base_SetConfig+0x110>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d013      	beq.n	80041c8 <TIM_Base_SetConfig+0x40>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041a6:	d00f      	beq.n	80041c8 <TIM_Base_SetConfig+0x40>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a3c      	ldr	r2, [pc, #240]	; (800429c <TIM_Base_SetConfig+0x114>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d00b      	beq.n	80041c8 <TIM_Base_SetConfig+0x40>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4a3b      	ldr	r2, [pc, #236]	; (80042a0 <TIM_Base_SetConfig+0x118>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d007      	beq.n	80041c8 <TIM_Base_SetConfig+0x40>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4a3a      	ldr	r2, [pc, #232]	; (80042a4 <TIM_Base_SetConfig+0x11c>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d003      	beq.n	80041c8 <TIM_Base_SetConfig+0x40>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	4a39      	ldr	r2, [pc, #228]	; (80042a8 <TIM_Base_SetConfig+0x120>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d108      	bne.n	80041da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	68fa      	ldr	r2, [r7, #12]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a2e      	ldr	r2, [pc, #184]	; (8004298 <TIM_Base_SetConfig+0x110>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d02b      	beq.n	800423a <TIM_Base_SetConfig+0xb2>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041e8:	d027      	beq.n	800423a <TIM_Base_SetConfig+0xb2>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a2b      	ldr	r2, [pc, #172]	; (800429c <TIM_Base_SetConfig+0x114>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d023      	beq.n	800423a <TIM_Base_SetConfig+0xb2>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a2a      	ldr	r2, [pc, #168]	; (80042a0 <TIM_Base_SetConfig+0x118>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d01f      	beq.n	800423a <TIM_Base_SetConfig+0xb2>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a29      	ldr	r2, [pc, #164]	; (80042a4 <TIM_Base_SetConfig+0x11c>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d01b      	beq.n	800423a <TIM_Base_SetConfig+0xb2>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a28      	ldr	r2, [pc, #160]	; (80042a8 <TIM_Base_SetConfig+0x120>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d017      	beq.n	800423a <TIM_Base_SetConfig+0xb2>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a27      	ldr	r2, [pc, #156]	; (80042ac <TIM_Base_SetConfig+0x124>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d013      	beq.n	800423a <TIM_Base_SetConfig+0xb2>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a26      	ldr	r2, [pc, #152]	; (80042b0 <TIM_Base_SetConfig+0x128>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d00f      	beq.n	800423a <TIM_Base_SetConfig+0xb2>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a25      	ldr	r2, [pc, #148]	; (80042b4 <TIM_Base_SetConfig+0x12c>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d00b      	beq.n	800423a <TIM_Base_SetConfig+0xb2>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a24      	ldr	r2, [pc, #144]	; (80042b8 <TIM_Base_SetConfig+0x130>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d007      	beq.n	800423a <TIM_Base_SetConfig+0xb2>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a23      	ldr	r2, [pc, #140]	; (80042bc <TIM_Base_SetConfig+0x134>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d003      	beq.n	800423a <TIM_Base_SetConfig+0xb2>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a22      	ldr	r2, [pc, #136]	; (80042c0 <TIM_Base_SetConfig+0x138>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d108      	bne.n	800424c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004240:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	4313      	orrs	r3, r2
 800424a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	695b      	ldr	r3, [r3, #20]
 8004256:	4313      	orrs	r3, r2
 8004258:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	68fa      	ldr	r2, [r7, #12]
 800425e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	689a      	ldr	r2, [r3, #8]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4a09      	ldr	r2, [pc, #36]	; (8004298 <TIM_Base_SetConfig+0x110>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d003      	beq.n	8004280 <TIM_Base_SetConfig+0xf8>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	4a0b      	ldr	r2, [pc, #44]	; (80042a8 <TIM_Base_SetConfig+0x120>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d103      	bne.n	8004288 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	691a      	ldr	r2, [r3, #16]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	615a      	str	r2, [r3, #20]
}
 800428e:	bf00      	nop
 8004290:	3714      	adds	r7, #20
 8004292:	46bd      	mov	sp, r7
 8004294:	bc80      	pop	{r7}
 8004296:	4770      	bx	lr
 8004298:	40010000 	.word	0x40010000
 800429c:	40000400 	.word	0x40000400
 80042a0:	40000800 	.word	0x40000800
 80042a4:	40000c00 	.word	0x40000c00
 80042a8:	40010400 	.word	0x40010400
 80042ac:	40014000 	.word	0x40014000
 80042b0:	40014400 	.word	0x40014400
 80042b4:	40014800 	.word	0x40014800
 80042b8:	40001800 	.word	0x40001800
 80042bc:	40001c00 	.word	0x40001c00
 80042c0:	40002000 	.word	0x40002000

080042c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042cc:	bf00      	nop
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bc80      	pop	{r7}
 80042d4:	4770      	bx	lr

080042d6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80042d6:	b480      	push	{r7}
 80042d8:	b083      	sub	sp, #12
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80042de:	bf00      	nop
 80042e0:	370c      	adds	r7, #12
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bc80      	pop	{r7}
 80042e6:	4770      	bx	lr

080042e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d101      	bne.n	80042fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e03f      	b.n	800437a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004300:	b2db      	uxtb	r3, r3
 8004302:	2b00      	cmp	r3, #0
 8004304:	d106      	bne.n	8004314 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f7fc fd6a 	bl	8000de8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2224      	movs	r2, #36	; 0x24
 8004318:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	68da      	ldr	r2, [r3, #12]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800432a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f000 f829 	bl	8004384 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	691a      	ldr	r2, [r3, #16]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004340:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	695a      	ldr	r2, [r3, #20]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004350:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	68da      	ldr	r2, [r3, #12]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004360:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2220      	movs	r2, #32
 800436c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2220      	movs	r2, #32
 8004374:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004378:	2300      	movs	r3, #0
}
 800437a:	4618      	mov	r0, r3
 800437c:	3708      	adds	r7, #8
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
	...

08004384 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	68da      	ldr	r2, [r3, #12]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	430a      	orrs	r2, r1
 80043a0:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	689a      	ldr	r2, [r3, #8]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	431a      	orrs	r2, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	695b      	ldr	r3, [r3, #20]
 80043b0:	431a      	orrs	r2, r3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	69db      	ldr	r3, [r3, #28]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80043c4:	f023 030c 	bic.w	r3, r3, #12
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	6812      	ldr	r2, [r2, #0]
 80043cc:	68b9      	ldr	r1, [r7, #8]
 80043ce:	430b      	orrs	r3, r1
 80043d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	695b      	ldr	r3, [r3, #20]
 80043d8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	699a      	ldr	r2, [r3, #24]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	430a      	orrs	r2, r1
 80043e6:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1) || (huart->Instance == USART6))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a57      	ldr	r2, [pc, #348]	; (800454c <UART_SetConfig+0x1c8>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d004      	beq.n	80043fc <UART_SetConfig+0x78>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a56      	ldr	r2, [pc, #344]	; (8004550 <UART_SetConfig+0x1cc>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d103      	bne.n	8004404 <UART_SetConfig+0x80>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80043fc:	f7fe f998 	bl	8002730 <HAL_RCC_GetPCLK2Freq>
 8004400:	60f8      	str	r0, [r7, #12]
 8004402:	e002      	b.n	800440a <UART_SetConfig+0x86>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004404:	f7fe f972 	bl	80026ec <HAL_RCC_GetPCLK1Freq>
 8004408:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	69db      	ldr	r3, [r3, #28]
 800440e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004412:	d14c      	bne.n	80044ae <UART_SetConfig+0x12a>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004414:	68fa      	ldr	r2, [r7, #12]
 8004416:	4613      	mov	r3, r2
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	4413      	add	r3, r2
 800441c:	009a      	lsls	r2, r3, #2
 800441e:	441a      	add	r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	005b      	lsls	r3, r3, #1
 8004426:	fbb2 f3f3 	udiv	r3, r2, r3
 800442a:	4a4a      	ldr	r2, [pc, #296]	; (8004554 <UART_SetConfig+0x1d0>)
 800442c:	fba2 2303 	umull	r2, r3, r2, r3
 8004430:	095b      	lsrs	r3, r3, #5
 8004432:	0119      	lsls	r1, r3, #4
 8004434:	68fa      	ldr	r2, [r7, #12]
 8004436:	4613      	mov	r3, r2
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	4413      	add	r3, r2
 800443c:	009a      	lsls	r2, r3, #2
 800443e:	441a      	add	r2, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	005b      	lsls	r3, r3, #1
 8004446:	fbb2 f2f3 	udiv	r2, r2, r3
 800444a:	4b42      	ldr	r3, [pc, #264]	; (8004554 <UART_SetConfig+0x1d0>)
 800444c:	fba3 0302 	umull	r0, r3, r3, r2
 8004450:	095b      	lsrs	r3, r3, #5
 8004452:	2064      	movs	r0, #100	; 0x64
 8004454:	fb00 f303 	mul.w	r3, r0, r3
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	00db      	lsls	r3, r3, #3
 800445c:	3332      	adds	r3, #50	; 0x32
 800445e:	4a3d      	ldr	r2, [pc, #244]	; (8004554 <UART_SetConfig+0x1d0>)
 8004460:	fba2 2303 	umull	r2, r3, r2, r3
 8004464:	095b      	lsrs	r3, r3, #5
 8004466:	005b      	lsls	r3, r3, #1
 8004468:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800446c:	4419      	add	r1, r3
 800446e:	68fa      	ldr	r2, [r7, #12]
 8004470:	4613      	mov	r3, r2
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	4413      	add	r3, r2
 8004476:	009a      	lsls	r2, r3, #2
 8004478:	441a      	add	r2, r3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	005b      	lsls	r3, r3, #1
 8004480:	fbb2 f2f3 	udiv	r2, r2, r3
 8004484:	4b33      	ldr	r3, [pc, #204]	; (8004554 <UART_SetConfig+0x1d0>)
 8004486:	fba3 0302 	umull	r0, r3, r3, r2
 800448a:	095b      	lsrs	r3, r3, #5
 800448c:	2064      	movs	r0, #100	; 0x64
 800448e:	fb00 f303 	mul.w	r3, r0, r3
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	00db      	lsls	r3, r3, #3
 8004496:	3332      	adds	r3, #50	; 0x32
 8004498:	4a2e      	ldr	r2, [pc, #184]	; (8004554 <UART_SetConfig+0x1d0>)
 800449a:	fba2 2303 	umull	r2, r3, r2, r3
 800449e:	095b      	lsrs	r3, r3, #5
 80044a0:	f003 0207 	and.w	r2, r3, #7
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	440a      	add	r2, r1
 80044aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80044ac:	e04a      	b.n	8004544 <UART_SetConfig+0x1c0>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044ae:	68fa      	ldr	r2, [r7, #12]
 80044b0:	4613      	mov	r3, r2
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	4413      	add	r3, r2
 80044b6:	009a      	lsls	r2, r3, #2
 80044b8:	441a      	add	r2, r3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044c4:	4a23      	ldr	r2, [pc, #140]	; (8004554 <UART_SetConfig+0x1d0>)
 80044c6:	fba2 2303 	umull	r2, r3, r2, r3
 80044ca:	095b      	lsrs	r3, r3, #5
 80044cc:	0119      	lsls	r1, r3, #4
 80044ce:	68fa      	ldr	r2, [r7, #12]
 80044d0:	4613      	mov	r3, r2
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	4413      	add	r3, r2
 80044d6:	009a      	lsls	r2, r3, #2
 80044d8:	441a      	add	r2, r3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80044e4:	4b1b      	ldr	r3, [pc, #108]	; (8004554 <UART_SetConfig+0x1d0>)
 80044e6:	fba3 0302 	umull	r0, r3, r3, r2
 80044ea:	095b      	lsrs	r3, r3, #5
 80044ec:	2064      	movs	r0, #100	; 0x64
 80044ee:	fb00 f303 	mul.w	r3, r0, r3
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	011b      	lsls	r3, r3, #4
 80044f6:	3332      	adds	r3, #50	; 0x32
 80044f8:	4a16      	ldr	r2, [pc, #88]	; (8004554 <UART_SetConfig+0x1d0>)
 80044fa:	fba2 2303 	umull	r2, r3, r2, r3
 80044fe:	095b      	lsrs	r3, r3, #5
 8004500:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004504:	4419      	add	r1, r3
 8004506:	68fa      	ldr	r2, [r7, #12]
 8004508:	4613      	mov	r3, r2
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	4413      	add	r3, r2
 800450e:	009a      	lsls	r2, r3, #2
 8004510:	441a      	add	r2, r3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	fbb2 f2f3 	udiv	r2, r2, r3
 800451c:	4b0d      	ldr	r3, [pc, #52]	; (8004554 <UART_SetConfig+0x1d0>)
 800451e:	fba3 0302 	umull	r0, r3, r3, r2
 8004522:	095b      	lsrs	r3, r3, #5
 8004524:	2064      	movs	r0, #100	; 0x64
 8004526:	fb00 f303 	mul.w	r3, r0, r3
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	011b      	lsls	r3, r3, #4
 800452e:	3332      	adds	r3, #50	; 0x32
 8004530:	4a08      	ldr	r2, [pc, #32]	; (8004554 <UART_SetConfig+0x1d0>)
 8004532:	fba2 2303 	umull	r2, r3, r2, r3
 8004536:	095b      	lsrs	r3, r3, #5
 8004538:	f003 020f 	and.w	r2, r3, #15
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	440a      	add	r2, r1
 8004542:	609a      	str	r2, [r3, #8]
}
 8004544:	bf00      	nop
 8004546:	3710      	adds	r7, #16
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}
 800454c:	40011000 	.word	0x40011000
 8004550:	40011400 	.word	0x40011400
 8004554:	51eb851f 	.word	0x51eb851f

08004558 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8004558:	b084      	sub	sp, #16
 800455a:	b480      	push	{r7}
 800455c:	b085      	sub	sp, #20
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
 8004562:	f107 001c 	add.w	r0, r7, #28
 8004566:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800456a:	2300      	movs	r3, #0
 800456c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800456e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8004570:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8004572:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8004574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8004576:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004578:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800457a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800457c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800457e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8004582:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	4313      	orrs	r3, r2
 8004588:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8004592:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004596:	68fa      	ldr	r2, [r7, #12]
 8004598:	431a      	orrs	r2, r3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800459e:	2300      	movs	r3, #0
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3714      	adds	r7, #20
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bc80      	pop	{r7}
 80045a8:	b004      	add	sp, #16
 80045aa:	4770      	bx	lr

080045ac <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	370c      	adds	r7, #12
 80045be:	46bd      	mov	sp, r7
 80045c0:	bc80      	pop	{r7}
 80045c2:	4770      	bx	lr

080045c4 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80045d8:	2300      	movs	r3, #0
}
 80045da:	4618      	mov	r0, r3
 80045dc:	370c      	adds	r7, #12
 80045de:	46bd      	mov	sp, r7
 80045e0:	bc80      	pop	{r7}
 80045e2:	4770      	bx	lr

080045e4 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2203      	movs	r2, #3
 80045f0:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80045f2:	2002      	movs	r0, #2
 80045f4:	f7fc fdc4 	bl	8001180 <HAL_Delay>
  
  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3708      	adds	r7, #8
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}

08004602 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8004602:	b480      	push	{r7}
 8004604:	b083      	sub	sp, #12
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0303 	and.w	r3, r3, #3
}
 8004612:	4618      	mov	r0, r3
 8004614:	370c      	adds	r7, #12
 8004616:	46bd      	mov	sp, r7
 8004618:	bc80      	pop	{r7}
 800461a:	4770      	bx	lr

0800461c <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800461c:	b480      	push	{r7}
 800461e:	b085      	sub	sp, #20
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004626:	2300      	movs	r3, #0
 8004628:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800463a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8004640:	431a      	orrs	r2, r3
                       Command->CPSM);
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004646:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	4313      	orrs	r3, r2
 800464c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004656:	f023 030f 	bic.w	r3, r3, #15
 800465a:	68fa      	ldr	r2, [r7, #12]
 800465c:	431a      	orrs	r2, r3
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8004662:	2300      	movs	r3, #0
}
 8004664:	4618      	mov	r0, r3
 8004666:	3714      	adds	r7, #20
 8004668:	46bd      	mov	sp, r7
 800466a:	bc80      	pop	{r7}
 800466c:	4770      	bx	lr

0800466e <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800466e:	b480      	push	{r7}
 8004670:	b083      	sub	sp, #12
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	b2db      	uxtb	r3, r3
}
 800467c:	4618      	mov	r0, r3
 800467e:	370c      	adds	r7, #12
 8004680:	46bd      	mov	sp, r7
 8004682:	bc80      	pop	{r7}
 8004684:	4770      	bx	lr

08004686 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8004686:	b480      	push	{r7}
 8004688:	b085      	sub	sp, #20
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
 800468e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	3314      	adds	r3, #20
 8004694:	461a      	mov	r2, r3
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	4413      	add	r3, r2
 800469a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
}  
 80046a0:	4618      	mov	r0, r3
 80046a2:	3714      	adds	r7, #20
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bc80      	pop	{r7}
 80046a8:	4770      	bx	lr

080046aa <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80046aa:	b480      	push	{r7}
 80046ac:	b085      	sub	sp, #20
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
 80046b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80046b4:	2300      	movs	r3, #0
 80046b6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	685a      	ldr	r2, [r3, #4]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80046d0:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80046d6:	431a      	orrs	r2, r3
                       Data->DPSM);
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80046dc:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80046de:	68fa      	ldr	r2, [r7, #12]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e8:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	431a      	orrs	r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80046f4:	2300      	movs	r3, #0

}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3714      	adds	r7, #20
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bc80      	pop	{r7}
 80046fe:	4770      	bx	lr

08004700 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b088      	sub	sp, #32
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800470e:	2310      	movs	r3, #16
 8004710:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004712:	2340      	movs	r3, #64	; 0x40
 8004714:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004716:	2300      	movs	r3, #0
 8004718:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800471a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800471e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004720:	f107 0308 	add.w	r3, r7, #8
 8004724:	4619      	mov	r1, r3
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f7ff ff78 	bl	800461c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800472c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004730:	2110      	movs	r1, #16
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 fa40 	bl	8004bb8 <SDMMC_GetCmdResp1>
 8004738:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800473a:	69fb      	ldr	r3, [r7, #28]
}
 800473c:	4618      	mov	r0, r3
 800473e:	3720      	adds	r7, #32
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}

08004744 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b088      	sub	sp, #32
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8004752:	2311      	movs	r3, #17
 8004754:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004756:	2340      	movs	r3, #64	; 0x40
 8004758:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800475a:	2300      	movs	r3, #0
 800475c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800475e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004762:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004764:	f107 0308 	add.w	r3, r7, #8
 8004768:	4619      	mov	r1, r3
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f7ff ff56 	bl	800461c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004770:	f241 3288 	movw	r2, #5000	; 0x1388
 8004774:	2111      	movs	r1, #17
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f000 fa1e 	bl	8004bb8 <SDMMC_GetCmdResp1>
 800477c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800477e:	69fb      	ldr	r3, [r7, #28]
}
 8004780:	4618      	mov	r0, r3
 8004782:	3720      	adds	r7, #32
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}

08004788 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b088      	sub	sp, #32
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8004796:	2312      	movs	r3, #18
 8004798:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800479a:	2340      	movs	r3, #64	; 0x40
 800479c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800479e:	2300      	movs	r3, #0
 80047a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80047a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047a6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80047a8:	f107 0308 	add.w	r3, r7, #8
 80047ac:	4619      	mov	r1, r3
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f7ff ff34 	bl	800461c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80047b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80047b8:	2112      	movs	r1, #18
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 f9fc 	bl	8004bb8 <SDMMC_GetCmdResp1>
 80047c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80047c2:	69fb      	ldr	r3, [r7, #28]
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3720      	adds	r7, #32
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}

080047cc <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b088      	sub	sp, #32
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80047da:	2318      	movs	r3, #24
 80047dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80047de:	2340      	movs	r3, #64	; 0x40
 80047e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80047e2:	2300      	movs	r3, #0
 80047e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80047e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047ea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80047ec:	f107 0308 	add.w	r3, r7, #8
 80047f0:	4619      	mov	r1, r3
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f7ff ff12 	bl	800461c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80047f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80047fc:	2118      	movs	r1, #24
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 f9da 	bl	8004bb8 <SDMMC_GetCmdResp1>
 8004804:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004806:	69fb      	ldr	r3, [r7, #28]
}
 8004808:	4618      	mov	r0, r3
 800480a:	3720      	adds	r7, #32
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b088      	sub	sp, #32
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800481e:	2319      	movs	r3, #25
 8004820:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004822:	2340      	movs	r3, #64	; 0x40
 8004824:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004826:	2300      	movs	r3, #0
 8004828:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800482a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800482e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004830:	f107 0308 	add.w	r3, r7, #8
 8004834:	4619      	mov	r1, r3
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f7ff fef0 	bl	800461c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800483c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004840:	2119      	movs	r1, #25
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 f9b8 	bl	8004bb8 <SDMMC_GetCmdResp1>
 8004848:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800484a:	69fb      	ldr	r3, [r7, #28]
}
 800484c:	4618      	mov	r0, r3
 800484e:	3720      	adds	r7, #32
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b088      	sub	sp, #32
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800485c:	2300      	movs	r3, #0
 800485e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8004860:	230c      	movs	r3, #12
 8004862:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004864:	2340      	movs	r3, #64	; 0x40
 8004866:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004868:	2300      	movs	r3, #0
 800486a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800486c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004870:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004872:	f107 0308 	add.w	r3, r7, #8
 8004876:	4619      	mov	r1, r3
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f7ff fecf 	bl	800461c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800487e:	4a05      	ldr	r2, [pc, #20]	; (8004894 <SDMMC_CmdStopTransfer+0x40>)
 8004880:	210c      	movs	r1, #12
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 f998 	bl	8004bb8 <SDMMC_GetCmdResp1>
 8004888:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800488a:	69fb      	ldr	r3, [r7, #28]
}
 800488c:	4618      	mov	r0, r3
 800488e:	3720      	adds	r7, #32
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}
 8004894:	05f5e100 	.word	0x05f5e100

08004898 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b08a      	sub	sp, #40	; 0x28
 800489c:	af00      	add	r7, sp, #0
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80048a8:	2307      	movs	r3, #7
 80048aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80048ac:	2340      	movs	r3, #64	; 0x40
 80048ae:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80048b0:	2300      	movs	r3, #0
 80048b2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80048b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048b8:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80048ba:	f107 0310 	add.w	r3, r7, #16
 80048be:	4619      	mov	r1, r3
 80048c0:	68f8      	ldr	r0, [r7, #12]
 80048c2:	f7ff feab 	bl	800461c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80048c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80048ca:	2107      	movs	r1, #7
 80048cc:	68f8      	ldr	r0, [r7, #12]
 80048ce:	f000 f973 	bl	8004bb8 <SDMMC_GetCmdResp1>
 80048d2:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80048d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3728      	adds	r7, #40	; 0x28
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}

080048de <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80048de:	b580      	push	{r7, lr}
 80048e0:	b088      	sub	sp, #32
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80048e6:	2300      	movs	r3, #0
 80048e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80048ea:	2300      	movs	r3, #0
 80048ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80048ee:	2300      	movs	r3, #0
 80048f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80048f2:	2300      	movs	r3, #0
 80048f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80048f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048fa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80048fc:	f107 0308 	add.w	r3, r7, #8
 8004900:	4619      	mov	r1, r3
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f7ff fe8a 	bl	800461c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f000 f92d 	bl	8004b68 <SDMMC_GetCmdError>
 800490e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004910:	69fb      	ldr	r3, [r7, #28]
}
 8004912:	4618      	mov	r0, r3
 8004914:	3720      	adds	r7, #32
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}

0800491a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800491a:	b580      	push	{r7, lr}
 800491c:	b088      	sub	sp, #32
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8004922:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8004926:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004928:	2308      	movs	r3, #8
 800492a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800492c:	2340      	movs	r3, #64	; 0x40
 800492e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004930:	2300      	movs	r3, #0
 8004932:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004934:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004938:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800493a:	f107 0308 	add.w	r3, r7, #8
 800493e:	4619      	mov	r1, r3
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f7ff fe6b 	bl	800461c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 fb16 	bl	8004f78 <SDMMC_GetCmdResp7>
 800494c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800494e:	69fb      	ldr	r3, [r7, #28]
}
 8004950:	4618      	mov	r0, r3
 8004952:	3720      	adds	r7, #32
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}

08004958 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b088      	sub	sp, #32
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8004966:	2337      	movs	r3, #55	; 0x37
 8004968:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800496a:	2340      	movs	r3, #64	; 0x40
 800496c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800496e:	2300      	movs	r3, #0
 8004970:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004972:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004976:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004978:	f107 0308 	add.w	r3, r7, #8
 800497c:	4619      	mov	r1, r3
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f7ff fe4c 	bl	800461c <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8004984:	f241 3288 	movw	r2, #5000	; 0x1388
 8004988:	2137      	movs	r1, #55	; 0x37
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 f914 	bl	8004bb8 <SDMMC_GetCmdResp1>
 8004990:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004992:	69fb      	ldr	r3, [r7, #28]
}
 8004994:	4618      	mov	r0, r3
 8004996:	3720      	adds	r7, #32
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}

0800499c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b088      	sub	sp, #32
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80049ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80049b2:	2329      	movs	r3, #41	; 0x29
 80049b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80049b6:	2340      	movs	r3, #64	; 0x40
 80049b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80049ba:	2300      	movs	r3, #0
 80049bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80049be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049c2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80049c4:	f107 0308 	add.w	r3, r7, #8
 80049c8:	4619      	mov	r1, r3
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f7ff fe26 	bl	800461c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f000 fa23 	bl	8004e1c <SDMMC_GetCmdResp3>
 80049d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80049d8:	69fb      	ldr	r3, [r7, #28]
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3720      	adds	r7, #32
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}

080049e2 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80049e2:	b580      	push	{r7, lr}
 80049e4:	b088      	sub	sp, #32
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
 80049ea:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80049f0:	2306      	movs	r3, #6
 80049f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80049f4:	2340      	movs	r3, #64	; 0x40
 80049f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80049f8:	2300      	movs	r3, #0
 80049fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80049fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a00:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004a02:	f107 0308 	add.w	r3, r7, #8
 8004a06:	4619      	mov	r1, r3
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f7ff fe07 	bl	800461c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8004a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a12:	2106      	movs	r1, #6
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f000 f8cf 	bl	8004bb8 <SDMMC_GetCmdResp1>
 8004a1a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004a1c:	69fb      	ldr	r3, [r7, #28]
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3720      	adds	r7, #32
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}

08004a26 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8004a26:	b580      	push	{r7, lr}
 8004a28:	b088      	sub	sp, #32
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8004a32:	2333      	movs	r3, #51	; 0x33
 8004a34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004a36:	2340      	movs	r3, #64	; 0x40
 8004a38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004a3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a42:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004a44:	f107 0308 	add.w	r3, r7, #8
 8004a48:	4619      	mov	r1, r3
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f7ff fde6 	bl	800461c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8004a50:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a54:	2133      	movs	r1, #51	; 0x33
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 f8ae 	bl	8004bb8 <SDMMC_GetCmdResp1>
 8004a5c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004a5e:	69fb      	ldr	r3, [r7, #28]
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3720      	adds	r7, #32
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b088      	sub	sp, #32
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8004a70:	2300      	movs	r3, #0
 8004a72:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8004a74:	2302      	movs	r3, #2
 8004a76:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004a78:	23c0      	movs	r3, #192	; 0xc0
 8004a7a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004a80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a84:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004a86:	f107 0308 	add.w	r3, r7, #8
 8004a8a:	4619      	mov	r1, r3
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f7ff fdc5 	bl	800461c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f000 f97c 	bl	8004d90 <SDMMC_GetCmdResp2>
 8004a98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004a9a:	69fb      	ldr	r3, [r7, #28]
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3720      	adds	r7, #32
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b088      	sub	sp, #32
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8004ab2:	2309      	movs	r3, #9
 8004ab4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004ab6:	23c0      	movs	r3, #192	; 0xc0
 8004ab8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004aba:	2300      	movs	r3, #0
 8004abc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004abe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ac2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004ac4:	f107 0308 	add.w	r3, r7, #8
 8004ac8:	4619      	mov	r1, r3
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f7ff fda6 	bl	800461c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f000 f95d 	bl	8004d90 <SDMMC_GetCmdResp2>
 8004ad6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004ad8:	69fb      	ldr	r3, [r7, #28]
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3720      	adds	r7, #32
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}

08004ae2 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8004ae2:	b580      	push	{r7, lr}
 8004ae4:	b088      	sub	sp, #32
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
 8004aea:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8004aec:	2300      	movs	r3, #0
 8004aee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004af0:	2303      	movs	r3, #3
 8004af2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004af4:	2340      	movs	r3, #64	; 0x40
 8004af6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004af8:	2300      	movs	r3, #0
 8004afa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004afc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b00:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004b02:	f107 0308 	add.w	r3, r7, #8
 8004b06:	4619      	mov	r1, r3
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f7ff fd87 	bl	800461c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004b0e:	683a      	ldr	r2, [r7, #0]
 8004b10:	2103      	movs	r1, #3
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f000 f9bc 	bl	8004e90 <SDMMC_GetCmdResp6>
 8004b18:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004b1a:	69fb      	ldr	r3, [r7, #28]
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3720      	adds	r7, #32
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b088      	sub	sp, #32
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8004b32:	230d      	movs	r3, #13
 8004b34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004b36:	2340      	movs	r3, #64	; 0x40
 8004b38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004b3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b42:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004b44:	f107 0308 	add.w	r3, r7, #8
 8004b48:	4619      	mov	r1, r3
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f7ff fd66 	bl	800461c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8004b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b54:	210d      	movs	r1, #13
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f000 f82e 	bl	8004bb8 <SDMMC_GetCmdResp1>
 8004b5c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004b5e:	69fb      	ldr	r3, [r7, #28]
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3720      	adds	r7, #32
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8004b68:	b490      	push	{r4, r7}
 8004b6a:	b082      	sub	sp, #8
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004b70:	4b0f      	ldr	r3, [pc, #60]	; (8004bb0 <SDMMC_GetCmdError+0x48>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a0f      	ldr	r2, [pc, #60]	; (8004bb4 <SDMMC_GetCmdError+0x4c>)
 8004b76:	fba2 2303 	umull	r2, r3, r2, r3
 8004b7a:	0a5b      	lsrs	r3, r3, #9
 8004b7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b80:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004b84:	4623      	mov	r3, r4
 8004b86:	1e5c      	subs	r4, r3, #1
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d102      	bne.n	8004b92 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004b8c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004b90:	e009      	b.n	8004ba6 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d0f2      	beq.n	8004b84 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	22c5      	movs	r2, #197	; 0xc5
 8004ba2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3708      	adds	r7, #8
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bc90      	pop	{r4, r7}
 8004bae:	4770      	bx	lr
 8004bb0:	20000044 	.word	0x20000044
 8004bb4:	10624dd3 	.word	0x10624dd3

08004bb8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8004bb8:	b590      	push	{r4, r7, lr}
 8004bba:	b087      	sub	sp, #28
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	60f8      	str	r0, [r7, #12]
 8004bc0:	460b      	mov	r3, r1
 8004bc2:	607a      	str	r2, [r7, #4]
 8004bc4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004bc6:	4b6f      	ldr	r3, [pc, #444]	; (8004d84 <SDMMC_GetCmdResp1+0x1cc>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a6f      	ldr	r2, [pc, #444]	; (8004d88 <SDMMC_GetCmdResp1+0x1d0>)
 8004bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd0:	0a5b      	lsrs	r3, r3, #9
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004bd8:	4623      	mov	r3, r4
 8004bda:	1e5c      	subs	r4, r3, #1
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d102      	bne.n	8004be6 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004be0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004be4:	e0c9      	b.n	8004d7a <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bea:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d0f0      	beq.n	8004bd8 <SDMMC_GetCmdResp1+0x20>
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d1eb      	bne.n	8004bd8 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c04:	f003 0304 	and.w	r3, r3, #4
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d004      	beq.n	8004c16 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2204      	movs	r2, #4
 8004c10:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004c12:	2304      	movs	r3, #4
 8004c14:	e0b1      	b.n	8004d7a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c1a:	f003 0301 	and.w	r3, r3, #1
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d004      	beq.n	8004c2c <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2201      	movs	r2, #1
 8004c26:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e0a6      	b.n	8004d7a <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	22c5      	movs	r2, #197	; 0xc5
 8004c30:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004c32:	68f8      	ldr	r0, [r7, #12]
 8004c34:	f7ff fd1b 	bl	800466e <SDIO_GetCommandResponse>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	7afb      	ldrb	r3, [r7, #11]
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d001      	beq.n	8004c46 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e099      	b.n	8004d7a <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004c46:	2100      	movs	r1, #0
 8004c48:	68f8      	ldr	r0, [r7, #12]
 8004c4a:	f7ff fd1c 	bl	8004686 <SDIO_GetResponse>
 8004c4e:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004c50:	693a      	ldr	r2, [r7, #16]
 8004c52:	4b4e      	ldr	r3, [pc, #312]	; (8004d8c <SDMMC_GetCmdResp1+0x1d4>)
 8004c54:	4013      	ands	r3, r2
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d101      	bne.n	8004c5e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	e08d      	b.n	8004d7a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	da02      	bge.n	8004c6a <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004c64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c68:	e087      	b.n	8004d7a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d001      	beq.n	8004c78 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004c74:	2340      	movs	r3, #64	; 0x40
 8004c76:	e080      	b.n	8004d7a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d001      	beq.n	8004c86 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004c82:	2380      	movs	r3, #128	; 0x80
 8004c84:	e079      	b.n	8004d7a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d002      	beq.n	8004c96 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004c90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c94:	e071      	b.n	8004d7a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d002      	beq.n	8004ca6 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004ca0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ca4:	e069      	b.n	8004d7a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d002      	beq.n	8004cb6 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004cb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004cb4:	e061      	b.n	8004d7a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d002      	beq.n	8004cc6 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004cc0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004cc4:	e059      	b.n	8004d7a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d002      	beq.n	8004cd6 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004cd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004cd4:	e051      	b.n	8004d7a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d002      	beq.n	8004ce6 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004ce0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004ce4:	e049      	b.n	8004d7a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d002      	beq.n	8004cf6 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8004cf0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004cf4:	e041      	b.n	8004d7a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d002      	beq.n	8004d06 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8004d00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d04:	e039      	b.n	8004d7a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d002      	beq.n	8004d16 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8004d10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d14:	e031      	b.n	8004d7a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d002      	beq.n	8004d26 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8004d20:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004d24:	e029      	b.n	8004d7a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d002      	beq.n	8004d36 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8004d30:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004d34:	e021      	b.n	8004d7a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d002      	beq.n	8004d46 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8004d40:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004d44:	e019      	b.n	8004d7a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d002      	beq.n	8004d56 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004d50:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004d54:	e011      	b.n	8004d7a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d002      	beq.n	8004d66 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8004d60:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004d64:	e009      	b.n	8004d7a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	f003 0308 	and.w	r3, r3, #8
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d002      	beq.n	8004d76 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8004d70:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004d74:	e001      	b.n	8004d7a <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004d76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	371c      	adds	r7, #28
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd90      	pop	{r4, r7, pc}
 8004d82:	bf00      	nop
 8004d84:	20000044 	.word	0x20000044
 8004d88:	10624dd3 	.word	0x10624dd3
 8004d8c:	fdffe008 	.word	0xfdffe008

08004d90 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8004d90:	b490      	push	{r4, r7}
 8004d92:	b084      	sub	sp, #16
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004d98:	4b1e      	ldr	r3, [pc, #120]	; (8004e14 <SDMMC_GetCmdResp2+0x84>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a1e      	ldr	r2, [pc, #120]	; (8004e18 <SDMMC_GetCmdResp2+0x88>)
 8004d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004da2:	0a5b      	lsrs	r3, r3, #9
 8004da4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004da8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004dac:	4623      	mov	r3, r4
 8004dae:	1e5c      	subs	r4, r3, #1
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d102      	bne.n	8004dba <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004db4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004db8:	e026      	b.n	8004e08 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dbe:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d0f0      	beq.n	8004dac <SDMMC_GetCmdResp2+0x1c>
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d1eb      	bne.n	8004dac <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dd8:	f003 0304 	and.w	r3, r3, #4
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d004      	beq.n	8004dea <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2204      	movs	r2, #4
 8004de4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004de6:	2304      	movs	r3, #4
 8004de8:	e00e      	b.n	8004e08 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dee:	f003 0301 	and.w	r3, r3, #1
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d004      	beq.n	8004e00 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2201      	movs	r2, #1
 8004dfa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e003      	b.n	8004e08 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	22c5      	movs	r2, #197	; 0xc5
 8004e04:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8004e06:	2300      	movs	r3, #0
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3710      	adds	r7, #16
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bc90      	pop	{r4, r7}
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	20000044 	.word	0x20000044
 8004e18:	10624dd3 	.word	0x10624dd3

08004e1c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8004e1c:	b490      	push	{r4, r7}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004e24:	4b18      	ldr	r3, [pc, #96]	; (8004e88 <SDMMC_GetCmdResp3+0x6c>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a18      	ldr	r2, [pc, #96]	; (8004e8c <SDMMC_GetCmdResp3+0x70>)
 8004e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e2e:	0a5b      	lsrs	r3, r3, #9
 8004e30:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e34:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004e38:	4623      	mov	r3, r4
 8004e3a:	1e5c      	subs	r4, r3, #1
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d102      	bne.n	8004e46 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004e40:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004e44:	e01b      	b.n	8004e7e <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e4a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d0f0      	beq.n	8004e38 <SDMMC_GetCmdResp3+0x1c>
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d1eb      	bne.n	8004e38 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e64:	f003 0304 	and.w	r3, r3, #4
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d004      	beq.n	8004e76 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2204      	movs	r2, #4
 8004e70:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004e72:	2304      	movs	r3, #4
 8004e74:	e003      	b.n	8004e7e <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	22c5      	movs	r2, #197	; 0xc5
 8004e7a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3710      	adds	r7, #16
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bc90      	pop	{r4, r7}
 8004e86:	4770      	bx	lr
 8004e88:	20000044 	.word	0x20000044
 8004e8c:	10624dd3 	.word	0x10624dd3

08004e90 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8004e90:	b590      	push	{r4, r7, lr}
 8004e92:	b087      	sub	sp, #28
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	460b      	mov	r3, r1
 8004e9a:	607a      	str	r2, [r7, #4]
 8004e9c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004e9e:	4b34      	ldr	r3, [pc, #208]	; (8004f70 <SDMMC_GetCmdResp6+0xe0>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a34      	ldr	r2, [pc, #208]	; (8004f74 <SDMMC_GetCmdResp6+0xe4>)
 8004ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ea8:	0a5b      	lsrs	r3, r3, #9
 8004eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eae:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004eb2:	4623      	mov	r3, r4
 8004eb4:	1e5c      	subs	r4, r3, #1
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d102      	bne.n	8004ec0 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004eba:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004ebe:	e052      	b.n	8004f66 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ec4:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d0f0      	beq.n	8004eb2 <SDMMC_GetCmdResp6+0x22>
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d1eb      	bne.n	8004eb2 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ede:	f003 0304 	and.w	r3, r3, #4
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d004      	beq.n	8004ef0 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2204      	movs	r2, #4
 8004eea:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004eec:	2304      	movs	r3, #4
 8004eee:	e03a      	b.n	8004f66 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ef4:	f003 0301 	and.w	r3, r3, #1
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d004      	beq.n	8004f06 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2201      	movs	r2, #1
 8004f00:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e02f      	b.n	8004f66 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004f06:	68f8      	ldr	r0, [r7, #12]
 8004f08:	f7ff fbb1 	bl	800466e <SDIO_GetCommandResponse>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	461a      	mov	r2, r3
 8004f10:	7afb      	ldrb	r3, [r7, #11]
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d001      	beq.n	8004f1a <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e025      	b.n	8004f66 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	22c5      	movs	r2, #197	; 0xc5
 8004f1e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004f20:	2100      	movs	r1, #0
 8004f22:	68f8      	ldr	r0, [r7, #12]
 8004f24:	f7ff fbaf 	bl	8004686 <SDIO_GetResponse>
 8004f28:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d106      	bne.n	8004f42 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	0c1b      	lsrs	r3, r3, #16
 8004f38:	b29a      	uxth	r2, r3
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	e011      	b.n	8004f66 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d002      	beq.n	8004f52 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004f4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004f50:	e009      	b.n	8004f66 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d002      	beq.n	8004f62 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004f5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f60:	e001      	b.n	8004f66 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004f62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	371c      	adds	r7, #28
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd90      	pop	{r4, r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	20000044 	.word	0x20000044
 8004f74:	10624dd3 	.word	0x10624dd3

08004f78 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8004f78:	b490      	push	{r4, r7}
 8004f7a:	b084      	sub	sp, #16
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004f80:	4b21      	ldr	r3, [pc, #132]	; (8005008 <SDMMC_GetCmdResp7+0x90>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a21      	ldr	r2, [pc, #132]	; (800500c <SDMMC_GetCmdResp7+0x94>)
 8004f86:	fba2 2303 	umull	r2, r3, r2, r3
 8004f8a:	0a5b      	lsrs	r3, r3, #9
 8004f8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f90:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004f94:	4623      	mov	r3, r4
 8004f96:	1e5c      	subs	r4, r3, #1
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d102      	bne.n	8004fa2 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004f9c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004fa0:	e02c      	b.n	8004ffc <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fa6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d0f0      	beq.n	8004f94 <SDMMC_GetCmdResp7+0x1c>
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d1eb      	bne.n	8004f94 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fc0:	f003 0304 	and.w	r3, r3, #4
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d004      	beq.n	8004fd2 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2204      	movs	r2, #4
 8004fcc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004fce:	2304      	movs	r3, #4
 8004fd0:	e014      	b.n	8004ffc <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fd6:	f003 0301 	and.w	r3, r3, #1
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d004      	beq.n	8004fe8 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e009      	b.n	8004ffc <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d002      	beq.n	8004ffa <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2240      	movs	r2, #64	; 0x40
 8004ff8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004ffa:	2300      	movs	r3, #0
  
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3710      	adds	r7, #16
 8005000:	46bd      	mov	sp, r7
 8005002:	bc90      	pop	{r4, r7}
 8005004:	4770      	bx	lr
 8005006:	bf00      	nop
 8005008:	20000044 	.word	0x20000044
 800500c:	10624dd3 	.word	0x10624dd3

08005010 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005014:	4904      	ldr	r1, [pc, #16]	; (8005028 <MX_FATFS_Init+0x18>)
 8005016:	4805      	ldr	r0, [pc, #20]	; (800502c <MX_FATFS_Init+0x1c>)
 8005018:	f002 ffac 	bl	8007f74 <FATFS_LinkDriver>
 800501c:	4603      	mov	r3, r0
 800501e:	461a      	mov	r2, r3
 8005020:	4b03      	ldr	r3, [pc, #12]	; (8005030 <MX_FATFS_Init+0x20>)
 8005022:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005024:	bf00      	nop
 8005026:	bd80      	pop	{r7, pc}
 8005028:	2000416c 	.word	0x2000416c
 800502c:	0800ad00 	.word	0x0800ad00
 8005030:	20004708 	.word	0x20004708

08005034 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005034:	b480      	push	{r7}
 8005036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005038:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800503a:	4618      	mov	r0, r3
 800503c:	46bd      	mov	sp, r7
 800503e:	bc80      	pop	{r7}
 8005040:	4770      	bx	lr
	...

08005044 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b082      	sub	sp, #8
 8005048:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800504a:	2300      	movs	r3, #0
 800504c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800504e:	f000 f8a1 	bl	8005194 <BSP_SD_IsDetected>
 8005052:	4603      	mov	r3, r0
 8005054:	2b01      	cmp	r3, #1
 8005056:	d001      	beq.n	800505c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	e012      	b.n	8005082 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800505c:	480b      	ldr	r0, [pc, #44]	; (800508c <BSP_SD_Init+0x48>)
 800505e:	f7fd fbb9 	bl	80027d4 <HAL_SD_Init>
 8005062:	4603      	mov	r3, r0
 8005064:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8005066:	79fb      	ldrb	r3, [r7, #7]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d109      	bne.n	8005080 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800506c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005070:	4806      	ldr	r0, [pc, #24]	; (800508c <BSP_SD_Init+0x48>)
 8005072:	f7fe f965 	bl	8003340 <HAL_SD_ConfigWideBusOperation>
 8005076:	4603      	mov	r3, r0
 8005078:	2b00      	cmp	r3, #0
 800507a:	d001      	beq.n	8005080 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8005080:	79fb      	ldrb	r3, [r7, #7]
}
 8005082:	4618      	mov	r0, r3
 8005084:	3708      	adds	r7, #8
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
 800508a:	bf00      	nop
 800508c:	20004404 	.word	0x20004404

08005090 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b086      	sub	sp, #24
 8005094:	af00      	add	r7, sp, #0
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	60b9      	str	r1, [r7, #8]
 800509a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800509c:	2300      	movs	r3, #0
 800509e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	68ba      	ldr	r2, [r7, #8]
 80050a4:	68f9      	ldr	r1, [r7, #12]
 80050a6:	4806      	ldr	r0, [pc, #24]	; (80050c0 <BSP_SD_ReadBlocks_DMA+0x30>)
 80050a8:	f7fd fc24 	bl	80028f4 <HAL_SD_ReadBlocks_DMA>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d001      	beq.n	80050b6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80050b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3718      	adds	r7, #24
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}
 80050c0:	20004404 	.word	0x20004404

080050c4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b086      	sub	sp, #24
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	60b9      	str	r1, [r7, #8]
 80050ce:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80050d0:	2300      	movs	r3, #0
 80050d2:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	68ba      	ldr	r2, [r7, #8]
 80050d8:	68f9      	ldr	r1, [r7, #12]
 80050da:	4806      	ldr	r0, [pc, #24]	; (80050f4 <BSP_SD_WriteBlocks_DMA+0x30>)
 80050dc:	f7fd fcf2 	bl	8002ac4 <HAL_SD_WriteBlocks_DMA>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d001      	beq.n	80050ea <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80050ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3718      	adds	r7, #24
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	20004404 	.word	0x20004404

080050f8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80050fc:	4805      	ldr	r0, [pc, #20]	; (8005114 <BSP_SD_GetCardState+0x1c>)
 80050fe:	f7fe f99b 	bl	8003438 <HAL_SD_GetCardState>
 8005102:	4603      	mov	r3, r0
 8005104:	2b04      	cmp	r3, #4
 8005106:	bf14      	ite	ne
 8005108:	2301      	movne	r3, #1
 800510a:	2300      	moveq	r3, #0
 800510c:	b2db      	uxtb	r3, r3
}
 800510e:	4618      	mov	r0, r3
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop
 8005114:	20004404 	.word	0x20004404

08005118 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b082      	sub	sp, #8
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8005120:	6879      	ldr	r1, [r7, #4]
 8005122:	4803      	ldr	r0, [pc, #12]	; (8005130 <BSP_SD_GetCardInfo+0x18>)
 8005124:	f7fe f8e0 	bl	80032e8 <HAL_SD_GetCardInfo>
}
 8005128:	bf00      	nop
 800512a:	3708      	adds	r7, #8
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}
 8005130:	20004404 	.word	0x20004404

08005134 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800513c:	f000 f818 	bl	8005170 <BSP_SD_AbortCallback>
}
 8005140:	bf00      	nop
 8005142:	3708      	adds	r7, #8
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b082      	sub	sp, #8
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8005150:	f000 f814 	bl	800517c <BSP_SD_WriteCpltCallback>
}
 8005154:	bf00      	nop
 8005156:	3708      	adds	r7, #8
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}

0800515c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b082      	sub	sp, #8
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8005164:	f000 f810 	bl	8005188 <BSP_SD_ReadCpltCallback>
}
 8005168:	bf00      	nop
 800516a:	3708      	adds	r7, #8
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}

08005170 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8005170:	b480      	push	{r7}
 8005172:	af00      	add	r7, sp, #0

}
 8005174:	bf00      	nop
 8005176:	46bd      	mov	sp, r7
 8005178:	bc80      	pop	{r7}
 800517a:	4770      	bx	lr

0800517c <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 800517c:	b480      	push	{r7}
 800517e:	af00      	add	r7, sp, #0

}
 8005180:	bf00      	nop
 8005182:	46bd      	mov	sp, r7
 8005184:	bc80      	pop	{r7}
 8005186:	4770      	bx	lr

08005188 <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 8005188:	b480      	push	{r7}
 800518a:	af00      	add	r7, sp, #0

}
 800518c:	bf00      	nop
 800518e:	46bd      	mov	sp, r7
 8005190:	bc80      	pop	{r7}
 8005192:	4770      	bx	lr

08005194 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b082      	sub	sp, #8
 8005198:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800519a:	2301      	movs	r3, #1
 800519c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800519e:	f000 f80b 	bl	80051b8 <BSP_PlatformIsDetected>
 80051a2:	4603      	mov	r3, r0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d101      	bne.n	80051ac <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80051a8:	2300      	movs	r3, #0
 80051aa:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80051ac:	79fb      	ldrb	r3, [r7, #7]
 80051ae:	b2db      	uxtb	r3, r3
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3708      	adds	r7, #8
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80051be:	2301      	movs	r3, #1
 80051c0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80051c2:	2104      	movs	r1, #4
 80051c4:	4806      	ldr	r0, [pc, #24]	; (80051e0 <BSP_PlatformIsDetected+0x28>)
 80051c6:	f7fc fe13 	bl	8001df0 <HAL_GPIO_ReadPin>
 80051ca:	4603      	mov	r3, r0
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d001      	beq.n	80051d4 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 80051d0:	2300      	movs	r3, #0
 80051d2:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80051d4:	79fb      	ldrb	r3, [r7, #7]
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3708      	adds	r7, #8
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	bf00      	nop
 80051e0:	40021800 	.word	0x40021800

080051e4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	4603      	mov	r3, r0
 80051ec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80051ee:	79fb      	ldrb	r3, [r7, #7]
 80051f0:	4a08      	ldr	r2, [pc, #32]	; (8005214 <disk_status+0x30>)
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	4413      	add	r3, r2
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	79fa      	ldrb	r2, [r7, #7]
 80051fc:	4905      	ldr	r1, [pc, #20]	; (8005214 <disk_status+0x30>)
 80051fe:	440a      	add	r2, r1
 8005200:	7a12      	ldrb	r2, [r2, #8]
 8005202:	4610      	mov	r0, r2
 8005204:	4798      	blx	r3
 8005206:	4603      	mov	r3, r0
 8005208:	73fb      	strb	r3, [r7, #15]
  return stat;
 800520a:	7bfb      	ldrb	r3, [r7, #15]
}
 800520c:	4618      	mov	r0, r3
 800520e:	3710      	adds	r7, #16
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}
 8005214:	20000354 	.word	0x20000354

08005218 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af00      	add	r7, sp, #0
 800521e:	4603      	mov	r3, r0
 8005220:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005222:	2300      	movs	r3, #0
 8005224:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8005226:	79fb      	ldrb	r3, [r7, #7]
 8005228:	4a0d      	ldr	r2, [pc, #52]	; (8005260 <disk_initialize+0x48>)
 800522a:	5cd3      	ldrb	r3, [r2, r3]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d111      	bne.n	8005254 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8005230:	79fb      	ldrb	r3, [r7, #7]
 8005232:	4a0b      	ldr	r2, [pc, #44]	; (8005260 <disk_initialize+0x48>)
 8005234:	2101      	movs	r1, #1
 8005236:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005238:	79fb      	ldrb	r3, [r7, #7]
 800523a:	4a09      	ldr	r2, [pc, #36]	; (8005260 <disk_initialize+0x48>)
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	4413      	add	r3, r2
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	79fa      	ldrb	r2, [r7, #7]
 8005246:	4906      	ldr	r1, [pc, #24]	; (8005260 <disk_initialize+0x48>)
 8005248:	440a      	add	r2, r1
 800524a:	7a12      	ldrb	r2, [r2, #8]
 800524c:	4610      	mov	r0, r2
 800524e:	4798      	blx	r3
 8005250:	4603      	mov	r3, r0
 8005252:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005254:	7bfb      	ldrb	r3, [r7, #15]
}
 8005256:	4618      	mov	r0, r3
 8005258:	3710      	adds	r7, #16
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
 800525e:	bf00      	nop
 8005260:	20000354 	.word	0x20000354

08005264 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005264:	b590      	push	{r4, r7, lr}
 8005266:	b087      	sub	sp, #28
 8005268:	af00      	add	r7, sp, #0
 800526a:	60b9      	str	r1, [r7, #8]
 800526c:	607a      	str	r2, [r7, #4]
 800526e:	603b      	str	r3, [r7, #0]
 8005270:	4603      	mov	r3, r0
 8005272:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005274:	7bfb      	ldrb	r3, [r7, #15]
 8005276:	4a0a      	ldr	r2, [pc, #40]	; (80052a0 <disk_read+0x3c>)
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	4413      	add	r3, r2
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	689c      	ldr	r4, [r3, #8]
 8005280:	7bfb      	ldrb	r3, [r7, #15]
 8005282:	4a07      	ldr	r2, [pc, #28]	; (80052a0 <disk_read+0x3c>)
 8005284:	4413      	add	r3, r2
 8005286:	7a18      	ldrb	r0, [r3, #8]
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	68b9      	ldr	r1, [r7, #8]
 800528e:	47a0      	blx	r4
 8005290:	4603      	mov	r3, r0
 8005292:	75fb      	strb	r3, [r7, #23]
  return res;
 8005294:	7dfb      	ldrb	r3, [r7, #23]
}
 8005296:	4618      	mov	r0, r3
 8005298:	371c      	adds	r7, #28
 800529a:	46bd      	mov	sp, r7
 800529c:	bd90      	pop	{r4, r7, pc}
 800529e:	bf00      	nop
 80052a0:	20000354 	.word	0x20000354

080052a4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80052a4:	b590      	push	{r4, r7, lr}
 80052a6:	b087      	sub	sp, #28
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	60b9      	str	r1, [r7, #8]
 80052ac:	607a      	str	r2, [r7, #4]
 80052ae:	603b      	str	r3, [r7, #0]
 80052b0:	4603      	mov	r3, r0
 80052b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80052b4:	7bfb      	ldrb	r3, [r7, #15]
 80052b6:	4a0a      	ldr	r2, [pc, #40]	; (80052e0 <disk_write+0x3c>)
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	4413      	add	r3, r2
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	68dc      	ldr	r4, [r3, #12]
 80052c0:	7bfb      	ldrb	r3, [r7, #15]
 80052c2:	4a07      	ldr	r2, [pc, #28]	; (80052e0 <disk_write+0x3c>)
 80052c4:	4413      	add	r3, r2
 80052c6:	7a18      	ldrb	r0, [r3, #8]
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	68b9      	ldr	r1, [r7, #8]
 80052ce:	47a0      	blx	r4
 80052d0:	4603      	mov	r3, r0
 80052d2:	75fb      	strb	r3, [r7, #23]
  return res;
 80052d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	371c      	adds	r7, #28
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd90      	pop	{r4, r7, pc}
 80052de:	bf00      	nop
 80052e0:	20000354 	.word	0x20000354

080052e4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b084      	sub	sp, #16
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	4603      	mov	r3, r0
 80052ec:	603a      	str	r2, [r7, #0]
 80052ee:	71fb      	strb	r3, [r7, #7]
 80052f0:	460b      	mov	r3, r1
 80052f2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80052f4:	79fb      	ldrb	r3, [r7, #7]
 80052f6:	4a09      	ldr	r2, [pc, #36]	; (800531c <disk_ioctl+0x38>)
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	4413      	add	r3, r2
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	691b      	ldr	r3, [r3, #16]
 8005300:	79fa      	ldrb	r2, [r7, #7]
 8005302:	4906      	ldr	r1, [pc, #24]	; (800531c <disk_ioctl+0x38>)
 8005304:	440a      	add	r2, r1
 8005306:	7a10      	ldrb	r0, [r2, #8]
 8005308:	79b9      	ldrb	r1, [r7, #6]
 800530a:	683a      	ldr	r2, [r7, #0]
 800530c:	4798      	blx	r3
 800530e:	4603      	mov	r3, r0
 8005310:	73fb      	strb	r3, [r7, #15]
  return res;
 8005312:	7bfb      	ldrb	r3, [r7, #15]
}
 8005314:	4618      	mov	r0, r3
 8005316:	3710      	adds	r7, #16
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}
 800531c:	20000354 	.word	0x20000354

08005320 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005320:	b480      	push	{r7}
 8005322:	b087      	sub	sp, #28
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	613b      	str	r3, [r7, #16]

#if _WORD_ACCESS == 1
	while (cnt >= sizeof (int)) {
 8005334:	e00c      	b.n	8005350 <mem_cpy+0x30>
		*(int*)d = *(int*)s;
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	601a      	str	r2, [r3, #0]
		d += sizeof (int); s += sizeof (int);
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	3304      	adds	r3, #4
 8005342:	617b      	str	r3, [r7, #20]
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	3304      	adds	r3, #4
 8005348:	613b      	str	r3, [r7, #16]
		cnt -= sizeof (int);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	3b04      	subs	r3, #4
 800534e:	607b      	str	r3, [r7, #4]
	while (cnt >= sizeof (int)) {
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2b03      	cmp	r3, #3
 8005354:	d8ef      	bhi.n	8005336 <mem_cpy+0x16>
	}
#endif
	while (cnt--)
 8005356:	e007      	b.n	8005368 <mem_cpy+0x48>
		*d++ = *s++;
 8005358:	693a      	ldr	r2, [r7, #16]
 800535a:	1c53      	adds	r3, r2, #1
 800535c:	613b      	str	r3, [r7, #16]
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	1c59      	adds	r1, r3, #1
 8005362:	6179      	str	r1, [r7, #20]
 8005364:	7812      	ldrb	r2, [r2, #0]
 8005366:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	1e5a      	subs	r2, r3, #1
 800536c:	607a      	str	r2, [r7, #4]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d1f2      	bne.n	8005358 <mem_cpy+0x38>
}
 8005372:	bf00      	nop
 8005374:	371c      	adds	r7, #28
 8005376:	46bd      	mov	sp, r7
 8005378:	bc80      	pop	{r7}
 800537a:	4770      	bx	lr

0800537c <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 800537c:	b480      	push	{r7}
 800537e:	b087      	sub	sp, #28
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	617b      	str	r3, [r7, #20]

	while (cnt--)
 800538c:	e005      	b.n	800539a <mem_set+0x1e>
		*d++ = (BYTE)val;
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	1c5a      	adds	r2, r3, #1
 8005392:	617a      	str	r2, [r7, #20]
 8005394:	68ba      	ldr	r2, [r7, #8]
 8005396:	b2d2      	uxtb	r2, r2
 8005398:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	1e5a      	subs	r2, r3, #1
 800539e:	607a      	str	r2, [r7, #4]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d1f4      	bne.n	800538e <mem_set+0x12>
}
 80053a4:	bf00      	nop
 80053a6:	371c      	adds	r7, #28
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bc80      	pop	{r7}
 80053ac:	4770      	bx	lr

080053ae <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 80053ae:	b480      	push	{r7}
 80053b0:	b089      	sub	sp, #36	; 0x24
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	60f8      	str	r0, [r7, #12]
 80053b6:	60b9      	str	r1, [r7, #8]
 80053b8:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	61fb      	str	r3, [r7, #28]
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80053c2:	2300      	movs	r3, #0
 80053c4:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 80053c6:	bf00      	nop
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	1e5a      	subs	r2, r3, #1
 80053cc:	607a      	str	r2, [r7, #4]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d00d      	beq.n	80053ee <mem_cmp+0x40>
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	1c5a      	adds	r2, r3, #1
 80053d6:	61fa      	str	r2, [r7, #28]
 80053d8:	781b      	ldrb	r3, [r3, #0]
 80053da:	4619      	mov	r1, r3
 80053dc:	69bb      	ldr	r3, [r7, #24]
 80053de:	1c5a      	adds	r2, r3, #1
 80053e0:	61ba      	str	r2, [r7, #24]
 80053e2:	781b      	ldrb	r3, [r3, #0]
 80053e4:	1acb      	subs	r3, r1, r3
 80053e6:	617b      	str	r3, [r7, #20]
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d0ec      	beq.n	80053c8 <mem_cmp+0x1a>
	return r;
 80053ee:	697b      	ldr	r3, [r7, #20]
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3724      	adds	r7, #36	; 0x24
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bc80      	pop	{r7}
 80053f8:	4770      	bx	lr

080053fa <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 80053fa:	b480      	push	{r7}
 80053fc:	b083      	sub	sp, #12
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
 8005402:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005404:	e002      	b.n	800540c <chk_chr+0x12>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	3301      	adds	r3, #1
 800540a:	607b      	str	r3, [r7, #4]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d005      	beq.n	8005420 <chk_chr+0x26>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	461a      	mov	r2, r3
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	4293      	cmp	r3, r2
 800541e:	d1f2      	bne.n	8005406 <chk_chr+0xc>
	return *str;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	781b      	ldrb	r3, [r3, #0]
}
 8005424:	4618      	mov	r0, r3
 8005426:	370c      	adds	r7, #12
 8005428:	46bd      	mov	sp, r7
 800542a:	bc80      	pop	{r7}
 800542c:	4770      	bx	lr

0800542e <lock_fs>:
#if _FS_REENTRANT
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800542e:	b580      	push	{r7, lr}
 8005430:	b082      	sub	sp, #8
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]
	return ff_req_grant(fs->sobj);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800543c:	4618      	mov	r0, r3
 800543e:	f002 ff47 	bl	80082d0 <ff_req_grant>
 8005442:	4603      	mov	r3, r0
}
 8005444:	4618      	mov	r0, r3
 8005446:	3708      	adds	r7, #8
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}

0800544c <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b082      	sub	sp, #8
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	460b      	mov	r3, r1
 8005456:	70fb      	strb	r3, [r7, #3]
	if (fs &&
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d011      	beq.n	8005482 <unlock_fs+0x36>
 800545e:	78fb      	ldrb	r3, [r7, #3]
 8005460:	2b0c      	cmp	r3, #12
 8005462:	d00e      	beq.n	8005482 <unlock_fs+0x36>
		res != FR_NOT_ENABLED &&
 8005464:	78fb      	ldrb	r3, [r7, #3]
 8005466:	2b0b      	cmp	r3, #11
 8005468:	d00b      	beq.n	8005482 <unlock_fs+0x36>
		res != FR_INVALID_DRIVE &&
 800546a:	78fb      	ldrb	r3, [r7, #3]
 800546c:	2b09      	cmp	r3, #9
 800546e:	d008      	beq.n	8005482 <unlock_fs+0x36>
		res != FR_INVALID_OBJECT &&
 8005470:	78fb      	ldrb	r3, [r7, #3]
 8005472:	2b0f      	cmp	r3, #15
 8005474:	d005      	beq.n	8005482 <unlock_fs+0x36>
		res != FR_TIMEOUT) {
		ff_rel_grant(fs->sobj);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800547c:	4618      	mov	r0, r3
 800547e:	f002 ff3c 	bl	80082fa <ff_rel_grant>
	}
}
 8005482:	bf00      	nop
 8005484:	3708      	adds	r7, #8
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
	...

0800548c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800548c:	b480      	push	{r7}
 800548e:	b085      	sub	sp, #20
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005496:	2300      	movs	r3, #0
 8005498:	60bb      	str	r3, [r7, #8]
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	60fb      	str	r3, [r7, #12]
 800549e:	e038      	b.n	8005512 <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 80054a0:	492f      	ldr	r1, [pc, #188]	; (8005560 <chk_lock+0xd4>)
 80054a2:	68fa      	ldr	r2, [r7, #12]
 80054a4:	4613      	mov	r3, r2
 80054a6:	005b      	lsls	r3, r3, #1
 80054a8:	4413      	add	r3, r2
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	440b      	add	r3, r1
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d029      	beq.n	8005508 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80054b4:	492a      	ldr	r1, [pc, #168]	; (8005560 <chk_lock+0xd4>)
 80054b6:	68fa      	ldr	r2, [r7, #12]
 80054b8:	4613      	mov	r3, r2
 80054ba:	005b      	lsls	r3, r3, #1
 80054bc:	4413      	add	r3, r2
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	440b      	add	r3, r1
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d11e      	bne.n	800550c <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 80054ce:	4924      	ldr	r1, [pc, #144]	; (8005560 <chk_lock+0xd4>)
 80054d0:	68fa      	ldr	r2, [r7, #12]
 80054d2:	4613      	mov	r3, r2
 80054d4:	005b      	lsls	r3, r3, #1
 80054d6:	4413      	add	r3, r2
 80054d8:	009b      	lsls	r3, r3, #2
 80054da:	440b      	add	r3, r1
 80054dc:	3304      	adds	r3, #4
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d110      	bne.n	800550c <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 80054ea:	491d      	ldr	r1, [pc, #116]	; (8005560 <chk_lock+0xd4>)
 80054ec:	68fa      	ldr	r2, [r7, #12]
 80054ee:	4613      	mov	r3, r2
 80054f0:	005b      	lsls	r3, r3, #1
 80054f2:	4413      	add	r3, r2
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	440b      	add	r3, r1
 80054f8:	3308      	adds	r3, #8
 80054fa:	881a      	ldrh	r2, [r3, #0]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
				Files[i].clu == dp->sclust &&
 8005502:	429a      	cmp	r2, r3
 8005504:	d102      	bne.n	800550c <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8005506:	e007      	b.n	8005518 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 8005508:	2301      	movs	r3, #1
 800550a:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	3301      	adds	r3, #1
 8005510:	60fb      	str	r3, [r7, #12]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2b01      	cmp	r3, #1
 8005516:	d9c3      	bls.n	80054a0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2b02      	cmp	r3, #2
 800551c:	d109      	bne.n	8005532 <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d102      	bne.n	800552a <chk_lock+0x9e>
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	2b02      	cmp	r3, #2
 8005528:	d101      	bne.n	800552e <chk_lock+0xa2>
 800552a:	2300      	movs	r3, #0
 800552c:	e013      	b.n	8005556 <chk_lock+0xca>
 800552e:	2312      	movs	r3, #18
 8005530:	e011      	b.n	8005556 <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d10b      	bne.n	8005550 <chk_lock+0xc4>
 8005538:	4909      	ldr	r1, [pc, #36]	; (8005560 <chk_lock+0xd4>)
 800553a:	68fa      	ldr	r2, [r7, #12]
 800553c:	4613      	mov	r3, r2
 800553e:	005b      	lsls	r3, r3, #1
 8005540:	4413      	add	r3, r2
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	440b      	add	r3, r1
 8005546:	330a      	adds	r3, #10
 8005548:	881b      	ldrh	r3, [r3, #0]
 800554a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800554e:	d101      	bne.n	8005554 <chk_lock+0xc8>
 8005550:	2310      	movs	r3, #16
 8005552:	e000      	b.n	8005556 <chk_lock+0xca>
 8005554:	2300      	movs	r3, #0
}
 8005556:	4618      	mov	r0, r3
 8005558:	3714      	adds	r7, #20
 800555a:	46bd      	mov	sp, r7
 800555c:	bc80      	pop	{r7}
 800555e:	4770      	bx	lr
 8005560:	2000033c 	.word	0x2000033c

08005564 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800556a:	2300      	movs	r3, #0
 800556c:	607b      	str	r3, [r7, #4]
 800556e:	e002      	b.n	8005576 <enq_lock+0x12>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	3301      	adds	r3, #1
 8005574:	607b      	str	r3, [r7, #4]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2b01      	cmp	r3, #1
 800557a:	d809      	bhi.n	8005590 <enq_lock+0x2c>
 800557c:	490a      	ldr	r1, [pc, #40]	; (80055a8 <enq_lock+0x44>)
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	4613      	mov	r3, r2
 8005582:	005b      	lsls	r3, r3, #1
 8005584:	4413      	add	r3, r2
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	440b      	add	r3, r1
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d1ef      	bne.n	8005570 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2b02      	cmp	r3, #2
 8005594:	bf14      	ite	ne
 8005596:	2301      	movne	r3, #1
 8005598:	2300      	moveq	r3, #0
 800559a:	b2db      	uxtb	r3, r3
}
 800559c:	4618      	mov	r0, r3
 800559e:	370c      	adds	r7, #12
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bc80      	pop	{r7}
 80055a4:	4770      	bx	lr
 80055a6:	bf00      	nop
 80055a8:	2000033c 	.word	0x2000033c

080055ac <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b085      	sub	sp, #20
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80055b6:	2300      	movs	r3, #0
 80055b8:	60fb      	str	r3, [r7, #12]
 80055ba:	e02b      	b.n	8005614 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 80055bc:	4955      	ldr	r1, [pc, #340]	; (8005714 <inc_lock+0x168>)
 80055be:	68fa      	ldr	r2, [r7, #12]
 80055c0:	4613      	mov	r3, r2
 80055c2:	005b      	lsls	r3, r3, #1
 80055c4:	4413      	add	r3, r2
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	440b      	add	r3, r1
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d11b      	bne.n	800560e <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 80055d6:	494f      	ldr	r1, [pc, #316]	; (8005714 <inc_lock+0x168>)
 80055d8:	68fa      	ldr	r2, [r7, #12]
 80055da:	4613      	mov	r3, r2
 80055dc:	005b      	lsls	r3, r3, #1
 80055de:	4413      	add	r3, r2
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	440b      	add	r3, r1
 80055e4:	3304      	adds	r3, #4
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d10d      	bne.n	800560e <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 80055f2:	4948      	ldr	r1, [pc, #288]	; (8005714 <inc_lock+0x168>)
 80055f4:	68fa      	ldr	r2, [r7, #12]
 80055f6:	4613      	mov	r3, r2
 80055f8:	005b      	lsls	r3, r3, #1
 80055fa:	4413      	add	r3, r2
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	440b      	add	r3, r1
 8005600:	3308      	adds	r3, #8
 8005602:	881a      	ldrh	r2, [r3, #0]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 800560a:	429a      	cmp	r2, r3
 800560c:	d006      	beq.n	800561c <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	3301      	adds	r3, #1
 8005612:	60fb      	str	r3, [r7, #12]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2b01      	cmp	r3, #1
 8005618:	d9d0      	bls.n	80055bc <inc_lock+0x10>
 800561a:	e000      	b.n	800561e <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 800561c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2b02      	cmp	r3, #2
 8005622:	d145      	bne.n	80056b0 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005624:	2300      	movs	r3, #0
 8005626:	60fb      	str	r3, [r7, #12]
 8005628:	e002      	b.n	8005630 <inc_lock+0x84>
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	3301      	adds	r3, #1
 800562e:	60fb      	str	r3, [r7, #12]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2b01      	cmp	r3, #1
 8005634:	d809      	bhi.n	800564a <inc_lock+0x9e>
 8005636:	4937      	ldr	r1, [pc, #220]	; (8005714 <inc_lock+0x168>)
 8005638:	68fa      	ldr	r2, [r7, #12]
 800563a:	4613      	mov	r3, r2
 800563c:	005b      	lsls	r3, r3, #1
 800563e:	4413      	add	r3, r2
 8005640:	009b      	lsls	r3, r3, #2
 8005642:	440b      	add	r3, r1
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d1ef      	bne.n	800562a <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2b02      	cmp	r3, #2
 800564e:	d101      	bne.n	8005654 <inc_lock+0xa8>
 8005650:	2300      	movs	r3, #0
 8005652:	e05a      	b.n	800570a <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 800565a:	482e      	ldr	r0, [pc, #184]	; (8005714 <inc_lock+0x168>)
 800565c:	68fa      	ldr	r2, [r7, #12]
 800565e:	4613      	mov	r3, r2
 8005660:	005b      	lsls	r3, r3, #1
 8005662:	4413      	add	r3, r2
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	4403      	add	r3, r0
 8005668:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 8005670:	4828      	ldr	r0, [pc, #160]	; (8005714 <inc_lock+0x168>)
 8005672:	68fa      	ldr	r2, [r7, #12]
 8005674:	4613      	mov	r3, r2
 8005676:	005b      	lsls	r3, r3, #1
 8005678:	4413      	add	r3, r2
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	4403      	add	r3, r0
 800567e:	3304      	adds	r3, #4
 8005680:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 8005688:	4922      	ldr	r1, [pc, #136]	; (8005714 <inc_lock+0x168>)
 800568a:	68fa      	ldr	r2, [r7, #12]
 800568c:	4613      	mov	r3, r2
 800568e:	005b      	lsls	r3, r3, #1
 8005690:	4413      	add	r3, r2
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	440b      	add	r3, r1
 8005696:	3308      	adds	r3, #8
 8005698:	4602      	mov	r2, r0
 800569a:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 800569c:	491d      	ldr	r1, [pc, #116]	; (8005714 <inc_lock+0x168>)
 800569e:	68fa      	ldr	r2, [r7, #12]
 80056a0:	4613      	mov	r3, r2
 80056a2:	005b      	lsls	r3, r3, #1
 80056a4:	4413      	add	r3, r2
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	440b      	add	r3, r1
 80056aa:	330a      	adds	r3, #10
 80056ac:	2200      	movs	r2, #0
 80056ae:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d00c      	beq.n	80056d0 <inc_lock+0x124>
 80056b6:	4917      	ldr	r1, [pc, #92]	; (8005714 <inc_lock+0x168>)
 80056b8:	68fa      	ldr	r2, [r7, #12]
 80056ba:	4613      	mov	r3, r2
 80056bc:	005b      	lsls	r3, r3, #1
 80056be:	4413      	add	r3, r2
 80056c0:	009b      	lsls	r3, r3, #2
 80056c2:	440b      	add	r3, r1
 80056c4:	330a      	adds	r3, #10
 80056c6:	881b      	ldrh	r3, [r3, #0]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d001      	beq.n	80056d0 <inc_lock+0x124>
 80056cc:	2300      	movs	r3, #0
 80056ce:	e01c      	b.n	800570a <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d10b      	bne.n	80056ee <inc_lock+0x142>
 80056d6:	490f      	ldr	r1, [pc, #60]	; (8005714 <inc_lock+0x168>)
 80056d8:	68fa      	ldr	r2, [r7, #12]
 80056da:	4613      	mov	r3, r2
 80056dc:	005b      	lsls	r3, r3, #1
 80056de:	4413      	add	r3, r2
 80056e0:	009b      	lsls	r3, r3, #2
 80056e2:	440b      	add	r3, r1
 80056e4:	330a      	adds	r3, #10
 80056e6:	881b      	ldrh	r3, [r3, #0]
 80056e8:	3301      	adds	r3, #1
 80056ea:	b299      	uxth	r1, r3
 80056ec:	e001      	b.n	80056f2 <inc_lock+0x146>
 80056ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80056f2:	4808      	ldr	r0, [pc, #32]	; (8005714 <inc_lock+0x168>)
 80056f4:	68fa      	ldr	r2, [r7, #12]
 80056f6:	4613      	mov	r3, r2
 80056f8:	005b      	lsls	r3, r3, #1
 80056fa:	4413      	add	r3, r2
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	4403      	add	r3, r0
 8005700:	330a      	adds	r3, #10
 8005702:	460a      	mov	r2, r1
 8005704:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	3301      	adds	r3, #1
}
 800570a:	4618      	mov	r0, r3
 800570c:	3714      	adds	r7, #20
 800570e:	46bd      	mov	sp, r7
 8005710:	bc80      	pop	{r7}
 8005712:	4770      	bx	lr
 8005714:	2000033c 	.word	0x2000033c

08005718 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005718:	b480      	push	{r7}
 800571a:	b085      	sub	sp, #20
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	3b01      	subs	r3, #1
 8005724:	607b      	str	r3, [r7, #4]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2b01      	cmp	r3, #1
 800572a:	d82e      	bhi.n	800578a <dec_lock+0x72>
		n = Files[i].ctr;
 800572c:	491b      	ldr	r1, [pc, #108]	; (800579c <dec_lock+0x84>)
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	4613      	mov	r3, r2
 8005732:	005b      	lsls	r3, r3, #1
 8005734:	4413      	add	r3, r2
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	440b      	add	r3, r1
 800573a:	330a      	adds	r3, #10
 800573c:	881b      	ldrh	r3, [r3, #0]
 800573e:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005740:	89fb      	ldrh	r3, [r7, #14]
 8005742:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005746:	d101      	bne.n	800574c <dec_lock+0x34>
 8005748:	2300      	movs	r3, #0
 800574a:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 800574c:	89fb      	ldrh	r3, [r7, #14]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d002      	beq.n	8005758 <dec_lock+0x40>
 8005752:	89fb      	ldrh	r3, [r7, #14]
 8005754:	3b01      	subs	r3, #1
 8005756:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005758:	4910      	ldr	r1, [pc, #64]	; (800579c <dec_lock+0x84>)
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	4613      	mov	r3, r2
 800575e:	005b      	lsls	r3, r3, #1
 8005760:	4413      	add	r3, r2
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	440b      	add	r3, r1
 8005766:	330a      	adds	r3, #10
 8005768:	89fa      	ldrh	r2, [r7, #14]
 800576a:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800576c:	89fb      	ldrh	r3, [r7, #14]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d108      	bne.n	8005784 <dec_lock+0x6c>
 8005772:	490a      	ldr	r1, [pc, #40]	; (800579c <dec_lock+0x84>)
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	4613      	mov	r3, r2
 8005778:	005b      	lsls	r3, r3, #1
 800577a:	4413      	add	r3, r2
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	440b      	add	r3, r1
 8005780:	2200      	movs	r2, #0
 8005782:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005784:	2300      	movs	r3, #0
 8005786:	737b      	strb	r3, [r7, #13]
 8005788:	e001      	b.n	800578e <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800578a:	2302      	movs	r3, #2
 800578c:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800578e:	7b7b      	ldrb	r3, [r7, #13]
}
 8005790:	4618      	mov	r0, r3
 8005792:	3714      	adds	r7, #20
 8005794:	46bd      	mov	sp, r7
 8005796:	bc80      	pop	{r7}
 8005798:	4770      	bx	lr
 800579a:	bf00      	nop
 800579c:	2000033c 	.word	0x2000033c

080057a0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b085      	sub	sp, #20
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80057a8:	2300      	movs	r3, #0
 80057aa:	60fb      	str	r3, [r7, #12]
 80057ac:	e016      	b.n	80057dc <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80057ae:	490f      	ldr	r1, [pc, #60]	; (80057ec <clear_lock+0x4c>)
 80057b0:	68fa      	ldr	r2, [r7, #12]
 80057b2:	4613      	mov	r3, r2
 80057b4:	005b      	lsls	r3, r3, #1
 80057b6:	4413      	add	r3, r2
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	440b      	add	r3, r1
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d108      	bne.n	80057d6 <clear_lock+0x36>
 80057c4:	4909      	ldr	r1, [pc, #36]	; (80057ec <clear_lock+0x4c>)
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	4613      	mov	r3, r2
 80057ca:	005b      	lsls	r3, r3, #1
 80057cc:	4413      	add	r3, r2
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	440b      	add	r3, r1
 80057d2:	2200      	movs	r2, #0
 80057d4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	3301      	adds	r3, #1
 80057da:	60fb      	str	r3, [r7, #12]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d9e5      	bls.n	80057ae <clear_lock+0xe>
	}
}
 80057e2:	bf00      	nop
 80057e4:	3714      	adds	r7, #20
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bc80      	pop	{r7}
 80057ea:	4770      	bx	lr
 80057ec:	2000033c 	.word	0x2000033c

080057f0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b086      	sub	sp, #24
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80057f8:	2300      	movs	r3, #0
 80057fa:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8005802:	2b00      	cmp	r3, #0
 8005804:	d038      	beq.n	8005878 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 800580c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8005814:	6879      	ldr	r1, [r7, #4]
 8005816:	2301      	movs	r3, #1
 8005818:	697a      	ldr	r2, [r7, #20]
 800581a:	f7ff fd43 	bl	80052a4 <disk_write>
 800581e:	4603      	mov	r3, r0
 8005820:	2b00      	cmp	r3, #0
 8005822:	d002      	beq.n	800582a <sync_window+0x3a>
			res = FR_DISK_ERR;
 8005824:	2301      	movs	r3, #1
 8005826:	73fb      	strb	r3, [r7, #15]
 8005828:	e026      	b.n	8005878 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8005838:	697a      	ldr	r2, [r7, #20]
 800583a:	1ad2      	subs	r2, r2, r3
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8005842:	429a      	cmp	r2, r3
 8005844:	d218      	bcs.n	8005878 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800584c:	613b      	str	r3, [r7, #16]
 800584e:	e010      	b.n	8005872 <sync_window+0x82>
					wsect += fs->fsize;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8005856:	697a      	ldr	r2, [r7, #20]
 8005858:	4413      	add	r3, r2
 800585a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8005862:	6879      	ldr	r1, [r7, #4]
 8005864:	2301      	movs	r3, #1
 8005866:	697a      	ldr	r2, [r7, #20]
 8005868:	f7ff fd1c 	bl	80052a4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	3b01      	subs	r3, #1
 8005870:	613b      	str	r3, [r7, #16]
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	2b01      	cmp	r3, #1
 8005876:	d8eb      	bhi.n	8005850 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 8005878:	7bfb      	ldrb	r3, [r7, #15]
}
 800587a:	4618      	mov	r0, r3
 800587c:	3718      	adds	r7, #24
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}

08005882 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8005882:	b580      	push	{r7, lr}
 8005884:	b084      	sub	sp, #16
 8005886:	af00      	add	r7, sp, #0
 8005888:	6078      	str	r0, [r7, #4]
 800588a:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800588c:	2300      	movs	r3, #0
 800588e:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 8005896:	683a      	ldr	r2, [r7, #0]
 8005898:	429a      	cmp	r2, r3
 800589a:	d01b      	beq.n	80058d4 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f7ff ffa7 	bl	80057f0 <sync_window>
 80058a2:	4603      	mov	r3, r0
 80058a4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80058a6:	7bfb      	ldrb	r3, [r7, #15]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d113      	bne.n	80058d4 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80058b2:	6879      	ldr	r1, [r7, #4]
 80058b4:	2301      	movs	r3, #1
 80058b6:	683a      	ldr	r2, [r7, #0]
 80058b8:	f7ff fcd4 	bl	8005264 <disk_read>
 80058bc:	4603      	mov	r3, r0
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d004      	beq.n	80058cc <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80058c2:	f04f 33ff 	mov.w	r3, #4294967295
 80058c6:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	683a      	ldr	r2, [r7, #0]
 80058d0:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
		}
	}
	return res;
 80058d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3710      	adds	r7, #16
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
	...

080058e0 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b084      	sub	sp, #16
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f7ff ff81 	bl	80057f0 <sync_window>
 80058ee:	4603      	mov	r3, r0
 80058f0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80058f2:	7bfb      	ldrb	r3, [r7, #15]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d14e      	bne.n	8005996 <sync_fs+0xb6>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80058fe:	2b03      	cmp	r3, #3
 8005900:	d13c      	bne.n	800597c <sync_fs+0x9c>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8005908:	2b01      	cmp	r3, #1
 800590a:	d137      	bne.n	800597c <sync_fs+0x9c>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005912:	2100      	movs	r1, #0
 8005914:	4618      	mov	r0, r3
 8005916:	f7ff fd31 	bl	800537c <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005920:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8005924:	801a      	strh	r2, [r3, #0]
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4a1d      	ldr	r2, [pc, #116]	; (80059a0 <sync_fs+0xc0>)
 800592a:	601a      	str	r2, [r3, #0]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005932:	4a1c      	ldr	r2, [pc, #112]	; (80059a4 <sync_fs+0xc4>)
 8005934:	601a      	str	r2, [r3, #0]
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800593c:	687a      	ldr	r2, [r7, #4]
 800593e:	f8d2 2214 	ldr.w	r2, [r2, #532]	; 0x214
 8005942:	601a      	str	r2, [r3, #0]
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	f8d2 2210 	ldr.w	r2, [r2, #528]	; 0x210
 8005950:	601a      	str	r2, [r3, #0]
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8005958:	1c5a      	adds	r2, r3, #1
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8005966:	6879      	ldr	r1, [r7, #4]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f8d3 2230 	ldr.w	r2, [r3, #560]	; 0x230
 800596e:	2301      	movs	r3, #1
 8005970:	f7ff fc98 	bl	80052a4 <disk_write>
			fs->fsi_flag = 0;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005982:	2200      	movs	r2, #0
 8005984:	2100      	movs	r1, #0
 8005986:	4618      	mov	r0, r3
 8005988:	f7ff fcac 	bl	80052e4 <disk_ioctl>
 800598c:	4603      	mov	r3, r0
 800598e:	2b00      	cmp	r3, #0
 8005990:	d001      	beq.n	8005996 <sync_fs+0xb6>
			res = FR_DISK_ERR;
 8005992:	2301      	movs	r3, #1
 8005994:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005996:	7bfb      	ldrb	r3, [r7, #15]
}
 8005998:	4618      	mov	r0, r3
 800599a:	3710      	adds	r7, #16
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}
 80059a0:	41615252 	.word	0x41615252
 80059a4:	61417272 	.word	0x61417272

080059a8 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	3b02      	subs	r3, #2
 80059b6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80059be:	3b02      	subs	r3, #2
 80059c0:	683a      	ldr	r2, [r7, #0]
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d301      	bcc.n	80059ca <clust2sect+0x22>
 80059c6:	2300      	movs	r3, #0
 80059c8:	e00a      	b.n	80059e0 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80059d0:	461a      	mov	r2, r3
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	fb03 f202 	mul.w	r2, r3, r2
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 80059de:	4413      	add	r3, r2
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	370c      	adds	r7, #12
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bc80      	pop	{r7}
 80059e8:	4770      	bx	lr

080059ea <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 80059ea:	b580      	push	{r7, lr}
 80059ec:	b086      	sub	sp, #24
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
 80059f2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d905      	bls.n	8005a06 <get_fat+0x1c>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005a00:	683a      	ldr	r2, [r7, #0]
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d302      	bcc.n	8005a0c <get_fat+0x22>
		val = 1;	/* Internal error */
 8005a06:	2301      	movs	r3, #1
 8005a08:	617b      	str	r3, [r7, #20]
 8005a0a:	e087      	b.n	8005b1c <get_fat+0x132>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8005a10:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005a18:	2b02      	cmp	r3, #2
 8005a1a:	d043      	beq.n	8005aa4 <get_fat+0xba>
 8005a1c:	2b03      	cmp	r3, #3
 8005a1e:	d059      	beq.n	8005ad4 <get_fat+0xea>
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d171      	bne.n	8005b08 <get_fat+0x11e>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	60fb      	str	r3, [r7, #12]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	085b      	lsrs	r3, r3, #1
 8005a2c:	68fa      	ldr	r2, [r7, #12]
 8005a2e:	4413      	add	r3, r2
 8005a30:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	0a5b      	lsrs	r3, r3, #9
 8005a3c:	4413      	add	r3, r2
 8005a3e:	4619      	mov	r1, r3
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f7ff ff1e 	bl	8005882 <move_window>
 8005a46:	4603      	mov	r3, r0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d160      	bne.n	8005b0e <get_fat+0x124>
			wc = fs->win.d8[bc++ % SS(fs)];
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	1c5a      	adds	r2, r3, #1
 8005a50:	60fa      	str	r2, [r7, #12]
 8005a52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	5cd3      	ldrb	r3, [r2, r3]
 8005a5a:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	0a5b      	lsrs	r3, r3, #9
 8005a66:	4413      	add	r3, r2
 8005a68:	4619      	mov	r1, r3
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f7ff ff09 	bl	8005882 <move_window>
 8005a70:	4603      	mov	r3, r0
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d14d      	bne.n	8005b12 <get_fat+0x128>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	5cd3      	ldrb	r3, [r2, r3]
 8005a80:	021b      	lsls	r3, r3, #8
 8005a82:	461a      	mov	r2, r3
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	f003 0301 	and.w	r3, r3, #1
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d002      	beq.n	8005a9a <get_fat+0xb0>
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	091b      	lsrs	r3, r3, #4
 8005a98:	e002      	b.n	8005aa0 <get_fat+0xb6>
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005aa0:	617b      	str	r3, [r7, #20]
			break;
 8005aa2:	e03b      	b.n	8005b1c <get_fat+0x132>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	0a1b      	lsrs	r3, r3, #8
 8005aae:	4413      	add	r3, r2
 8005ab0:	4619      	mov	r1, r3
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f7ff fee5 	bl	8005882 <move_window>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d12b      	bne.n	8005b16 <get_fat+0x12c>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	005b      	lsls	r3, r3, #1
 8005ac2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	4413      	add	r3, r2
 8005aca:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	881b      	ldrh	r3, [r3, #0]
 8005ad0:	617b      	str	r3, [r7, #20]
			break;
 8005ad2:	e023      	b.n	8005b1c <get_fat+0x132>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	09db      	lsrs	r3, r3, #7
 8005ade:	4413      	add	r3, r2
 8005ae0:	4619      	mov	r1, r3
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f7ff fecd 	bl	8005882 <move_window>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d115      	bne.n	8005b1a <get_fat+0x130>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	009b      	lsls	r3, r3, #2
 8005af2:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	4413      	add	r3, r2
 8005afa:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005b04:	617b      	str	r3, [r7, #20]
			break;
 8005b06:	e009      	b.n	8005b1c <get_fat+0x132>

		default:
			val = 1;	/* Internal error */
 8005b08:	2301      	movs	r3, #1
 8005b0a:	617b      	str	r3, [r7, #20]
 8005b0c:	e006      	b.n	8005b1c <get_fat+0x132>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005b0e:	bf00      	nop
 8005b10:	e004      	b.n	8005b1c <get_fat+0x132>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005b12:	bf00      	nop
 8005b14:	e002      	b.n	8005b1c <get_fat+0x132>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005b16:	bf00      	nop
 8005b18:	e000      	b.n	8005b1c <get_fat+0x132>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005b1a:	bf00      	nop
		}
	}

	return val;
 8005b1c:	697b      	ldr	r3, [r7, #20]
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3718      	adds	r7, #24
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}

08005b26 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8005b26:	b580      	push	{r7, lr}
 8005b28:	b088      	sub	sp, #32
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	60f8      	str	r0, [r7, #12]
 8005b2e:	60b9      	str	r1, [r7, #8]
 8005b30:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d905      	bls.n	8005b44 <put_fat+0x1e>
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005b3e:	68ba      	ldr	r2, [r7, #8]
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d302      	bcc.n	8005b4a <put_fat+0x24>
		res = FR_INT_ERR;
 8005b44:	2302      	movs	r3, #2
 8005b46:	77fb      	strb	r3, [r7, #31]
 8005b48:	e0c6      	b.n	8005cd8 <put_fat+0x1b2>

	} else {
		switch (fs->fs_type) {
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005b50:	2b02      	cmp	r3, #2
 8005b52:	d073      	beq.n	8005c3c <put_fat+0x116>
 8005b54:	2b03      	cmp	r3, #3
 8005b56:	f000 8090 	beq.w	8005c7a <put_fat+0x154>
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	f040 80b2 	bne.w	8005cc4 <put_fat+0x19e>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	617b      	str	r3, [r7, #20]
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	085b      	lsrs	r3, r3, #1
 8005b68:	697a      	ldr	r2, [r7, #20]
 8005b6a:	4413      	add	r3, r2
 8005b6c:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	0a5b      	lsrs	r3, r3, #9
 8005b78:	4413      	add	r3, r2
 8005b7a:	4619      	mov	r1, r3
 8005b7c:	68f8      	ldr	r0, [r7, #12]
 8005b7e:	f7ff fe80 	bl	8005882 <move_window>
 8005b82:	4603      	mov	r3, r0
 8005b84:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005b86:	7ffb      	ldrb	r3, [r7, #31]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	f040 809e 	bne.w	8005cca <put_fat+0x1a4>
			p = &fs->win.d8[bc++ % SS(fs)];
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	1c5a      	adds	r2, r3, #1
 8005b92:	617a      	str	r2, [r7, #20]
 8005b94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	4413      	add	r3, r2
 8005b9c:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	f003 0301 	and.w	r3, r3, #1
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d00d      	beq.n	8005bc4 <put_fat+0x9e>
 8005ba8:	69bb      	ldr	r3, [r7, #24]
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	b25b      	sxtb	r3, r3
 8005bae:	f003 030f 	and.w	r3, r3, #15
 8005bb2:	b25a      	sxtb	r2, r3
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	011b      	lsls	r3, r3, #4
 8005bba:	b25b      	sxtb	r3, r3
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	b25b      	sxtb	r3, r3
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	e001      	b.n	8005bc8 <put_fat+0xa2>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	69ba      	ldr	r2, [r7, #24]
 8005bca:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	0a5b      	lsrs	r3, r3, #9
 8005bde:	4413      	add	r3, r2
 8005be0:	4619      	mov	r1, r3
 8005be2:	68f8      	ldr	r0, [r7, #12]
 8005be4:	f7ff fe4d 	bl	8005882 <move_window>
 8005be8:	4603      	mov	r3, r0
 8005bea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005bec:	7ffb      	ldrb	r3, [r7, #31]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d16d      	bne.n	8005cce <put_fat+0x1a8>
			p = &fs->win.d8[bc % SS(fs)];
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bf8:	68fa      	ldr	r2, [r7, #12]
 8005bfa:	4413      	add	r3, r2
 8005bfc:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	f003 0301 	and.w	r3, r3, #1
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d003      	beq.n	8005c10 <put_fat+0xea>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	091b      	lsrs	r3, r3, #4
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	e00e      	b.n	8005c2e <put_fat+0x108>
 8005c10:	69bb      	ldr	r3, [r7, #24]
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	b25b      	sxtb	r3, r3
 8005c16:	f023 030f 	bic.w	r3, r3, #15
 8005c1a:	b25a      	sxtb	r2, r3
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	0a1b      	lsrs	r3, r3, #8
 8005c20:	b25b      	sxtb	r3, r3
 8005c22:	f003 030f 	and.w	r3, r3, #15
 8005c26:	b25b      	sxtb	r3, r3
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	b25b      	sxtb	r3, r3
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	69ba      	ldr	r2, [r7, #24]
 8005c30:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2201      	movs	r2, #1
 8005c36:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8005c3a:	e04d      	b.n	8005cd8 <put_fat+0x1b2>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	0a1b      	lsrs	r3, r3, #8
 8005c46:	4413      	add	r3, r2
 8005c48:	4619      	mov	r1, r3
 8005c4a:	68f8      	ldr	r0, [r7, #12]
 8005c4c:	f7ff fe19 	bl	8005882 <move_window>
 8005c50:	4603      	mov	r3, r0
 8005c52:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005c54:	7ffb      	ldrb	r3, [r7, #31]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d13b      	bne.n	8005cd2 <put_fat+0x1ac>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	005b      	lsls	r3, r3, #1
 8005c5e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005c62:	68fa      	ldr	r2, [r7, #12]
 8005c64:	4413      	add	r3, r2
 8005c66:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	b29a      	uxth	r2, r3
 8005c6c:	69bb      	ldr	r3, [r7, #24]
 8005c6e:	801a      	strh	r2, [r3, #0]
			fs->wflag = 1;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2201      	movs	r2, #1
 8005c74:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8005c78:	e02e      	b.n	8005cd8 <put_fat+0x1b2>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	09db      	lsrs	r3, r3, #7
 8005c84:	4413      	add	r3, r2
 8005c86:	4619      	mov	r1, r3
 8005c88:	68f8      	ldr	r0, [r7, #12]
 8005c8a:	f7ff fdfa 	bl	8005882 <move_window>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005c92:	7ffb      	ldrb	r3, [r7, #31]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d11e      	bne.n	8005cd6 <put_fat+0x1b0>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005ca0:	68fa      	ldr	r2, [r7, #12]
 8005ca2:	4413      	add	r3, r2
 8005ca4:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8005ca6:	69bb      	ldr	r3, [r7, #24]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8005cb4:	69bb      	ldr	r3, [r7, #24]
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	601a      	str	r2, [r3, #0]
			fs->wflag = 1;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8005cc2:	e009      	b.n	8005cd8 <put_fat+0x1b2>

		default :
			res = FR_INT_ERR;
 8005cc4:	2302      	movs	r3, #2
 8005cc6:	77fb      	strb	r3, [r7, #31]
 8005cc8:	e006      	b.n	8005cd8 <put_fat+0x1b2>
			if (res != FR_OK) break;
 8005cca:	bf00      	nop
 8005ccc:	e004      	b.n	8005cd8 <put_fat+0x1b2>
			if (res != FR_OK) break;
 8005cce:	bf00      	nop
 8005cd0:	e002      	b.n	8005cd8 <put_fat+0x1b2>
			if (res != FR_OK) break;
 8005cd2:	bf00      	nop
 8005cd4:	e000      	b.n	8005cd8 <put_fat+0x1b2>
			if (res != FR_OK) break;
 8005cd6:	bf00      	nop
		}
	}

	return res;
 8005cd8:	7ffb      	ldrb	r3, [r7, #31]
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3720      	adds	r7, #32
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}

08005ce2 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8005ce2:	b580      	push	{r7, lr}
 8005ce4:	b084      	sub	sp, #16
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	6078      	str	r0, [r7, #4]
 8005cea:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	d905      	bls.n	8005cfe <remove_chain+0x1c>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005cf8:	683a      	ldr	r2, [r7, #0]
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d302      	bcc.n	8005d04 <remove_chain+0x22>
		res = FR_INT_ERR;
 8005cfe:	2302      	movs	r3, #2
 8005d00:	73fb      	strb	r3, [r7, #15]
 8005d02:	e043      	b.n	8005d8c <remove_chain+0xaa>

	} else {
		res = FR_OK;
 8005d04:	2300      	movs	r3, #0
 8005d06:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8005d08:	e036      	b.n	8005d78 <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8005d0a:	6839      	ldr	r1, [r7, #0]
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f7ff fe6c 	bl	80059ea <get_fat>
 8005d12:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d035      	beq.n	8005d86 <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d102      	bne.n	8005d26 <remove_chain+0x44>
 8005d20:	2302      	movs	r3, #2
 8005d22:	73fb      	strb	r3, [r7, #15]
 8005d24:	e032      	b.n	8005d8c <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d2c:	d102      	bne.n	8005d34 <remove_chain+0x52>
 8005d2e:	2301      	movs	r3, #1
 8005d30:	73fb      	strb	r3, [r7, #15]
 8005d32:	e02b      	b.n	8005d8c <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8005d34:	2200      	movs	r2, #0
 8005d36:	6839      	ldr	r1, [r7, #0]
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f7ff fef4 	bl	8005b26 <put_fat>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8005d42:	7bfb      	ldrb	r3, [r7, #15]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d120      	bne.n	8005d8a <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d52:	d00f      	beq.n	8005d74 <remove_chain+0x92>
				fs->free_clust++;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005d5a:	1c5a      	adds	r2, r3, #1
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				fs->fsi_flag |= 1;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8005d68:	f043 0301 	orr.w	r3, r3, #1
 8005d6c:	b2da      	uxtb	r2, r3
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005d7e:	683a      	ldr	r2, [r7, #0]
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d3c2      	bcc.n	8005d0a <remove_chain+0x28>
 8005d84:	e002      	b.n	8005d8c <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 8005d86:	bf00      	nop
 8005d88:	e000      	b.n	8005d8c <remove_chain+0xaa>
			if (res != FR_OK) break;
 8005d8a:	bf00      	nop
		}
	}

	return res;
 8005d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3710      	adds	r7, #16
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}

08005d96 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8005d96:	b580      	push	{r7, lr}
 8005d98:	b086      	sub	sp, #24
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	6078      	str	r0, [r7, #4]
 8005d9e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d10f      	bne.n	8005dc6 <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005dac:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d005      	beq.n	8005dc0 <create_chain+0x2a>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005dba:	693a      	ldr	r2, [r7, #16]
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d31c      	bcc.n	8005dfa <create_chain+0x64>
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	613b      	str	r3, [r7, #16]
 8005dc4:	e019      	b.n	8005dfa <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8005dc6:	6839      	ldr	r1, [r7, #0]
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f7ff fe0e 	bl	80059ea <get_fat>
 8005dce:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d801      	bhi.n	8005dda <create_chain+0x44>
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e076      	b.n	8005ec8 <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005de0:	d101      	bne.n	8005de6 <create_chain+0x50>
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	e070      	b.n	8005ec8 <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005dec:	68ba      	ldr	r2, [r7, #8]
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d201      	bcs.n	8005df6 <create_chain+0x60>
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	e068      	b.n	8005ec8 <create_chain+0x132>
		scl = clst;
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	3301      	adds	r3, #1
 8005e02:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005e0a:	697a      	ldr	r2, [r7, #20]
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d307      	bcc.n	8005e20 <create_chain+0x8a>
			ncl = 2;
 8005e10:	2302      	movs	r3, #2
 8005e12:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8005e14:	697a      	ldr	r2, [r7, #20]
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d901      	bls.n	8005e20 <create_chain+0x8a>
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	e053      	b.n	8005ec8 <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8005e20:	6979      	ldr	r1, [r7, #20]
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f7ff fde1 	bl	80059ea <get_fat>
 8005e28:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d00e      	beq.n	8005e4e <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e36:	d002      	beq.n	8005e3e <create_chain+0xa8>
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d101      	bne.n	8005e42 <create_chain+0xac>
			return cs;
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	e042      	b.n	8005ec8 <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 8005e42:	697a      	ldr	r2, [r7, #20]
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	429a      	cmp	r2, r3
 8005e48:	d1d9      	bne.n	8005dfe <create_chain+0x68>
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	e03c      	b.n	8005ec8 <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 8005e4e:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8005e50:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8005e54:	6979      	ldr	r1, [r7, #20]
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f7ff fe65 	bl	8005b26 <put_fat>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8005e60:	7bfb      	ldrb	r3, [r7, #15]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d109      	bne.n	8005e7a <create_chain+0xe4>
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d006      	beq.n	8005e7a <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8005e6c:	697a      	ldr	r2, [r7, #20]
 8005e6e:	6839      	ldr	r1, [r7, #0]
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f7ff fe58 	bl	8005b26 <put_fat>
 8005e76:	4603      	mov	r3, r0
 8005e78:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8005e7a:	7bfb      	ldrb	r3, [r7, #15]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d11a      	bne.n	8005eb6 <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	697a      	ldr	r2, [r7, #20]
 8005e84:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
		if (fs->free_clust != 0xFFFFFFFF) {
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e92:	d018      	beq.n	8005ec6 <create_chain+0x130>
			fs->free_clust--;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005e9a:	1e5a      	subs	r2, r3, #1
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			fs->fsi_flag |= 1;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8005ea8:	f043 0301 	orr.w	r3, r3, #1
 8005eac:	b2da      	uxtb	r2, r3
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 8005eb4:	e007      	b.n	8005ec6 <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8005eb6:	7bfb      	ldrb	r3, [r7, #15]
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d102      	bne.n	8005ec2 <create_chain+0x12c>
 8005ebc:	f04f 33ff 	mov.w	r3, #4294967295
 8005ec0:	e000      	b.n	8005ec4 <create_chain+0x12e>
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8005ec6:	697b      	ldr	r3, [r7, #20]
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3718      	adds	r7, #24
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}

08005ed0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b087      	sub	sp, #28
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8005ee0:	3304      	adds	r3, #4
 8005ee2:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	0a5b      	lsrs	r3, r3, #9
 8005ee8:	687a      	ldr	r2, [r7, #4]
 8005eea:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8005eee:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8005ef2:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ef6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	1d1a      	adds	r2, r3, #4
 8005efc:	613a      	str	r2, [r7, #16]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d101      	bne.n	8005f0c <clmt_clust+0x3c>
 8005f08:	2300      	movs	r3, #0
 8005f0a:	e010      	b.n	8005f2e <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 8005f0c:	697a      	ldr	r2, [r7, #20]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d307      	bcc.n	8005f24 <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 8005f14:	697a      	ldr	r2, [r7, #20]
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	1ad3      	subs	r3, r2, r3
 8005f1a:	617b      	str	r3, [r7, #20]
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	3304      	adds	r3, #4
 8005f20:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005f22:	e7e9      	b.n	8005ef8 <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 8005f24:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	4413      	add	r3, r2
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	371c      	adds	r7, #28
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bc80      	pop	{r7}
 8005f36:	4770      	bx	lr

08005f38 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b086      	sub	sp, #24
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	b29a      	uxth	r2, r3
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8005f52:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d007      	beq.n	8005f6a <dir_sdi+0x32>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005f60:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005f64:	697a      	ldr	r2, [r7, #20]
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d301      	bcc.n	8005f6e <dir_sdi+0x36>
		return FR_INT_ERR;
 8005f6a:	2302      	movs	r3, #2
 8005f6c:	e074      	b.n	8006058 <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d10c      	bne.n	8005f8e <dir_sdi+0x56>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005f7a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005f7e:	2b03      	cmp	r3, #3
 8005f80:	d105      	bne.n	8005f8e <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005f88:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8005f8c:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d111      	bne.n	8005fb8 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005f9a:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d301      	bcc.n	8005faa <dir_sdi+0x72>
			return FR_INT_ERR;
 8005fa6:	2302      	movs	r3, #2
 8005fa8:	e056      	b.n	8006058 <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005fb0:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8005fb4:	613b      	str	r3, [r7, #16]
 8005fb6:	e032      	b.n	800601e <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005fbe:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8005fc2:	011b      	lsls	r3, r3, #4
 8005fc4:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8005fc6:	e01e      	b.n	8006006 <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005fce:	6979      	ldr	r1, [r7, #20]
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f7ff fd0a 	bl	80059ea <get_fat>
 8005fd6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fde:	d101      	bne.n	8005fe4 <dir_sdi+0xac>
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e039      	b.n	8006058 <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	d907      	bls.n	8005ffa <dir_sdi+0xc2>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005ff0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005ff4:	697a      	ldr	r2, [r7, #20]
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d301      	bcc.n	8005ffe <dir_sdi+0xc6>
				return FR_INT_ERR;
 8005ffa:	2302      	movs	r3, #2
 8005ffc:	e02c      	b.n	8006058 <dir_sdi+0x120>
			idx -= ic;
 8005ffe:	683a      	ldr	r2, [r7, #0]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	1ad3      	subs	r3, r2, r3
 8006004:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8006006:	683a      	ldr	r2, [r7, #0]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	429a      	cmp	r2, r3
 800600c:	d2dc      	bcs.n	8005fc8 <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006014:	6979      	ldr	r1, [r7, #20]
 8006016:	4618      	mov	r0, r3
 8006018:	f7ff fcc6 	bl	80059a8 <clust2sect>
 800601c:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	697a      	ldr	r2, [r7, #20]
 8006022:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d101      	bne.n	8006030 <dir_sdi+0xf8>
 800602c:	2302      	movs	r3, #2
 800602e:	e013      	b.n	8006058 <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	091a      	lsrs	r2, r3, #4
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	441a      	add	r2, r3
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006044:	461a      	mov	r2, r3
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	f003 030f 	and.w	r3, r3, #15
 800604c:	015b      	lsls	r3, r3, #5
 800604e:	441a      	add	r2, r3
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8006056:	2300      	movs	r3, #0
}
 8006058:	4618      	mov	r0, r3
 800605a:	3718      	adds	r7, #24
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}

08006060 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006060:	b590      	push	{r4, r7, lr}
 8006062:	b087      	sub	sp, #28
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 8006070:	3301      	adds	r3, #1
 8006072:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	b29b      	uxth	r3, r3
 8006078:	2b00      	cmp	r3, #0
 800607a:	d004      	beq.n	8006086 <dir_next+0x26>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006082:	2b00      	cmp	r3, #0
 8006084:	d101      	bne.n	800608a <dir_next+0x2a>
		return FR_NO_FILE;
 8006086:	2304      	movs	r3, #4
 8006088:	e0dd      	b.n	8006246 <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f003 030f 	and.w	r3, r3, #15
 8006090:	2b00      	cmp	r3, #0
 8006092:	f040 80c6 	bne.w	8006222 <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800609c:	1c5a      	adds	r2, r3, #1
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d10b      	bne.n	80060c6 <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80060b4:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80060b8:	461a      	mov	r2, r3
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	4293      	cmp	r3, r2
 80060be:	f0c0 80b0 	bcc.w	8006222 <dir_next+0x1c2>
				return FR_NO_FILE;
 80060c2:	2304      	movs	r3, #4
 80060c4:	e0bf      	b.n	8006246 <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	091b      	lsrs	r3, r3, #4
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 80060d0:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80060d4:	3a01      	subs	r2, #1
 80060d6:	4013      	ands	r3, r2
 80060d8:	2b00      	cmp	r3, #0
 80060da:	f040 80a2 	bne.w	8006222 <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80060ea:	4619      	mov	r1, r3
 80060ec:	4610      	mov	r0, r2
 80060ee:	f7ff fc7c 	bl	80059ea <get_fat>
 80060f2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d801      	bhi.n	80060fe <dir_next+0x9e>
 80060fa:	2302      	movs	r3, #2
 80060fc:	e0a3      	b.n	8006246 <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006104:	d101      	bne.n	800610a <dir_next+0xaa>
 8006106:	2301      	movs	r3, #1
 8006108:	e09d      	b.n	8006246 <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006110:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006114:	697a      	ldr	r2, [r7, #20]
 8006116:	429a      	cmp	r2, r3
 8006118:	d374      	bcc.n	8006204 <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d101      	bne.n	8006124 <dir_next+0xc4>
 8006120:	2304      	movs	r3, #4
 8006122:	e090      	b.n	8006246 <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8006130:	4619      	mov	r1, r3
 8006132:	4610      	mov	r0, r2
 8006134:	f7ff fe2f 	bl	8005d96 <create_chain>
 8006138:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d101      	bne.n	8006144 <dir_next+0xe4>
 8006140:	2307      	movs	r3, #7
 8006142:	e080      	b.n	8006246 <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	2b01      	cmp	r3, #1
 8006148:	d101      	bne.n	800614e <dir_next+0xee>
 800614a:	2302      	movs	r3, #2
 800614c:	e07b      	b.n	8006246 <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006154:	d101      	bne.n	800615a <dir_next+0xfa>
 8006156:	2301      	movs	r3, #1
 8006158:	e075      	b.n	8006246 <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006160:	4618      	mov	r0, r3
 8006162:	f7ff fb45 	bl	80057f0 <sync_window>
 8006166:	4603      	mov	r3, r0
 8006168:	2b00      	cmp	r3, #0
 800616a:	d001      	beq.n	8006170 <dir_next+0x110>
 800616c:	2301      	movs	r3, #1
 800616e:	e06a      	b.n	8006246 <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006176:	f44f 7200 	mov.w	r2, #512	; 0x200
 800617a:	2100      	movs	r1, #0
 800617c:	4618      	mov	r0, r3
 800617e:	f7ff f8fd 	bl	800537c <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 800618e:	6979      	ldr	r1, [r7, #20]
 8006190:	4610      	mov	r0, r2
 8006192:	f7ff fc09 	bl	80059a8 <clust2sect>
 8006196:	4603      	mov	r3, r0
 8006198:	f8c4 3230 	str.w	r3, [r4, #560]	; 0x230
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800619c:	2300      	movs	r3, #0
 800619e:	613b      	str	r3, [r7, #16]
 80061a0:	e01b      	b.n	80061da <dir_next+0x17a>
						dp->fs->wflag = 1;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80061a8:	2201      	movs	r2, #1
 80061aa:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80061b4:	4618      	mov	r0, r3
 80061b6:	f7ff fb1b 	bl	80057f0 <sync_window>
 80061ba:	4603      	mov	r3, r0
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d001      	beq.n	80061c4 <dir_next+0x164>
 80061c0:	2301      	movs	r3, #1
 80061c2:	e040      	b.n	8006246 <dir_next+0x1e6>
						dp->fs->winsect++;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80061ca:	f8d3 2230 	ldr.w	r2, [r3, #560]	; 0x230
 80061ce:	3201      	adds	r2, #1
 80061d0:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	3301      	adds	r3, #1
 80061d8:	613b      	str	r3, [r7, #16]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80061e0:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80061e4:	461a      	mov	r2, r3
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d3da      	bcc.n	80061a2 <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80061f2:	f8d3 1230 	ldr.w	r1, [r3, #560]	; 0x230
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80061fc:	693a      	ldr	r2, [r7, #16]
 80061fe:	1a8a      	subs	r2, r1, r2
 8006200:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	697a      	ldr	r2, [r7, #20]
 8006208:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006212:	6979      	ldr	r1, [r7, #20]
 8006214:	4618      	mov	r0, r3
 8006216:	f7ff fbc7 	bl	80059a8 <clust2sect>
 800621a:	4602      	mov	r2, r0
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	b29a      	uxth	r2, r3
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006232:	461a      	mov	r2, r3
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f003 030f 	and.w	r3, r3, #15
 800623a:	015b      	lsls	r3, r3, #5
 800623c:	441a      	add	r2, r3
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8006244:	2300      	movs	r3, #0
}
 8006246:	4618      	mov	r0, r3
 8006248:	371c      	adds	r7, #28
 800624a:	46bd      	mov	sp, r7
 800624c:	bd90      	pop	{r4, r7, pc}

0800624e <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800624e:	b580      	push	{r7, lr}
 8006250:	b084      	sub	sp, #16
 8006252:	af00      	add	r7, sp, #0
 8006254:	6078      	str	r0, [r7, #4]
 8006256:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8006258:	2100      	movs	r1, #0
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f7ff fe6c 	bl	8005f38 <dir_sdi>
 8006260:	4603      	mov	r3, r0
 8006262:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006264:	7bfb      	ldrb	r3, [r7, #15]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d131      	bne.n	80062ce <dir_alloc+0x80>
		n = 0;
 800626a:	2300      	movs	r3, #0
 800626c:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800627a:	4619      	mov	r1, r3
 800627c:	4610      	mov	r0, r2
 800627e:	f7ff fb00 	bl	8005882 <move_window>
 8006282:	4603      	mov	r3, r0
 8006284:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8006286:	7bfb      	ldrb	r3, [r7, #15]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d11f      	bne.n	80062cc <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	2be5      	cmp	r3, #229	; 0xe5
 8006296:	d005      	beq.n	80062a4 <dir_alloc+0x56>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d107      	bne.n	80062b4 <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	3301      	adds	r3, #1
 80062a8:	60bb      	str	r3, [r7, #8]
 80062aa:	68ba      	ldr	r2, [r7, #8]
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d102      	bne.n	80062b8 <dir_alloc+0x6a>
 80062b2:	e00c      	b.n	80062ce <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80062b4:	2300      	movs	r3, #0
 80062b6:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 80062b8:	2101      	movs	r1, #1
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f7ff fed0 	bl	8006060 <dir_next>
 80062c0:	4603      	mov	r3, r0
 80062c2:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 80062c4:	7bfb      	ldrb	r3, [r7, #15]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d0d1      	beq.n	800626e <dir_alloc+0x20>
 80062ca:	e000      	b.n	80062ce <dir_alloc+0x80>
			if (res != FR_OK) break;
 80062cc:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80062ce:	7bfb      	ldrb	r3, [r7, #15]
 80062d0:	2b04      	cmp	r3, #4
 80062d2:	d101      	bne.n	80062d8 <dir_alloc+0x8a>
 80062d4:	2307      	movs	r3, #7
 80062d6:	73fb      	strb	r3, [r7, #15]
	return res;
 80062d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3710      	adds	r7, #16
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}

080062e2 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 80062e2:	b480      	push	{r7}
 80062e4:	b085      	sub	sp, #20
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	6078      	str	r0, [r7, #4]
 80062ea:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	331a      	adds	r3, #26
 80062f0:	881b      	ldrh	r3, [r3, #0]
 80062f2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80062fa:	2b03      	cmp	r3, #3
 80062fc:	d106      	bne.n	800630c <ld_clust+0x2a>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	3314      	adds	r3, #20
 8006302:	881b      	ldrh	r3, [r3, #0]
 8006304:	041b      	lsls	r3, r3, #16
 8006306:	68fa      	ldr	r2, [r7, #12]
 8006308:	4313      	orrs	r3, r2
 800630a:	60fb      	str	r3, [r7, #12]

	return cl;
 800630c:	68fb      	ldr	r3, [r7, #12]
}
 800630e:	4618      	mov	r0, r3
 8006310:	3714      	adds	r7, #20
 8006312:	46bd      	mov	sp, r7
 8006314:	bc80      	pop	{r7}
 8006316:	4770      	bx	lr

08006318 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8006318:	b480      	push	{r7}
 800631a:	b083      	sub	sp, #12
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	331a      	adds	r3, #26
 8006326:	683a      	ldr	r2, [r7, #0]
 8006328:	b292      	uxth	r2, r2
 800632a:	801a      	strh	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	0c1a      	lsrs	r2, r3, #16
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	3314      	adds	r3, #20
 8006334:	b292      	uxth	r2, r2
 8006336:	801a      	strh	r2, [r3, #0]
}
 8006338:	bf00      	nop
 800633a:	370c      	adds	r7, #12
 800633c:	46bd      	mov	sp, r7
 800633e:	bc80      	pop	{r7}
 8006340:	4770      	bx	lr
	...

08006344 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b086      	sub	sp, #24
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006356:	1e5a      	subs	r2, r3, #1
 8006358:	4613      	mov	r3, r2
 800635a:	005b      	lsls	r3, r3, #1
 800635c:	4413      	add	r3, r2
 800635e:	009b      	lsls	r3, r3, #2
 8006360:	4413      	add	r3, r2
 8006362:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 8006364:	2300      	movs	r3, #0
 8006366:	613b      	str	r3, [r7, #16]
 8006368:	2301      	movs	r3, #1
 800636a:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 800636c:	4a24      	ldr	r2, [pc, #144]	; (8006400 <cmp_lfn+0xbc>)
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	4413      	add	r3, r2
 8006372:	781b      	ldrb	r3, [r3, #0]
 8006374:	461a      	mov	r2, r3
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	4413      	add	r3, r2
 800637a:	881b      	ldrh	r3, [r3, #0]
 800637c:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 800637e:	89fb      	ldrh	r3, [r7, #14]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d019      	beq.n	80063b8 <cmp_lfn+0x74>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8006384:	89bb      	ldrh	r3, [r7, #12]
 8006386:	4618      	mov	r0, r3
 8006388:	f001 ff48 	bl	800821c <ff_wtoupper>
 800638c:	4603      	mov	r3, r0
 800638e:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	2bfe      	cmp	r3, #254	; 0xfe
 8006394:	d80e      	bhi.n	80063b4 <cmp_lfn+0x70>
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	1c5a      	adds	r2, r3, #1
 800639a:	617a      	str	r2, [r7, #20]
 800639c:	005b      	lsls	r3, r3, #1
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	4413      	add	r3, r2
 80063a2:	881b      	ldrh	r3, [r3, #0]
 80063a4:	4618      	mov	r0, r3
 80063a6:	f001 ff39 	bl	800821c <ff_wtoupper>
 80063aa:	4603      	mov	r3, r0
 80063ac:	461a      	mov	r2, r3
 80063ae:	89fb      	ldrh	r3, [r7, #14]
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d008      	beq.n	80063c6 <cmp_lfn+0x82>
				return 0;				/* Not matched */
 80063b4:	2300      	movs	r3, #0
 80063b6:	e01f      	b.n	80063f8 <cmp_lfn+0xb4>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 80063b8:	89bb      	ldrh	r3, [r7, #12]
 80063ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80063be:	4293      	cmp	r3, r2
 80063c0:	d001      	beq.n	80063c6 <cmp_lfn+0x82>
 80063c2:	2300      	movs	r3, #0
 80063c4:	e018      	b.n	80063f8 <cmp_lfn+0xb4>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	3301      	adds	r3, #1
 80063ca:	613b      	str	r3, [r7, #16]
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	2b0c      	cmp	r3, #12
 80063d0:	d9cc      	bls.n	800636c <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d00b      	beq.n	80063f6 <cmp_lfn+0xb2>
 80063de:	89fb      	ldrh	r3, [r7, #14]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d008      	beq.n	80063f6 <cmp_lfn+0xb2>
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	005b      	lsls	r3, r3, #1
 80063e8:	687a      	ldr	r2, [r7, #4]
 80063ea:	4413      	add	r3, r2
 80063ec:	881b      	ldrh	r3, [r3, #0]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d001      	beq.n	80063f6 <cmp_lfn+0xb2>
		return 0;
 80063f2:	2300      	movs	r3, #0
 80063f4:	e000      	b.n	80063f8 <cmp_lfn+0xb4>

	return 1;						/* The part of LFN matched */
 80063f6:	2301      	movs	r3, #1
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3718      	adds	r7, #24
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}
 8006400:	0800acf0 	.word	0x0800acf0

08006404 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 8006404:	b480      	push	{r7}
 8006406:	b089      	sub	sp, #36	; 0x24
 8006408:	af00      	add	r7, sp, #0
 800640a:	60f8      	str	r0, [r7, #12]
 800640c:	60b9      	str	r1, [r7, #8]
 800640e:	4611      	mov	r1, r2
 8006410:	461a      	mov	r2, r3
 8006412:	460b      	mov	r3, r1
 8006414:	71fb      	strb	r3, [r7, #7]
 8006416:	4613      	mov	r3, r2
 8006418:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	330d      	adds	r3, #13
 800641e:	79ba      	ldrb	r2, [r7, #6]
 8006420:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	330b      	adds	r3, #11
 8006426:	220f      	movs	r2, #15
 8006428:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	330c      	adds	r3, #12
 800642e:	2200      	movs	r2, #0
 8006430:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	331a      	adds	r3, #26
 8006436:	2200      	movs	r2, #0
 8006438:	801a      	strh	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 800643a:	79fb      	ldrb	r3, [r7, #7]
 800643c:	1e5a      	subs	r2, r3, #1
 800643e:	4613      	mov	r3, r2
 8006440:	005b      	lsls	r3, r3, #1
 8006442:	4413      	add	r3, r2
 8006444:	009b      	lsls	r3, r3, #2
 8006446:	4413      	add	r3, r2
 8006448:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800644a:	2300      	movs	r3, #0
 800644c:	82fb      	strh	r3, [r7, #22]
 800644e:	2300      	movs	r3, #0
 8006450:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8006452:	8afb      	ldrh	r3, [r7, #22]
 8006454:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006458:	4293      	cmp	r3, r2
 800645a:	d007      	beq.n	800646c <fit_lfn+0x68>
 800645c:	69fb      	ldr	r3, [r7, #28]
 800645e:	1c5a      	adds	r2, r3, #1
 8006460:	61fa      	str	r2, [r7, #28]
 8006462:	005b      	lsls	r3, r3, #1
 8006464:	68fa      	ldr	r2, [r7, #12]
 8006466:	4413      	add	r3, r2
 8006468:	881b      	ldrh	r3, [r3, #0]
 800646a:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 800646c:	4a16      	ldr	r2, [pc, #88]	; (80064c8 <fit_lfn+0xc4>)
 800646e:	69bb      	ldr	r3, [r7, #24]
 8006470:	4413      	add	r3, r2
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	461a      	mov	r2, r3
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	4413      	add	r3, r2
 800647a:	8afa      	ldrh	r2, [r7, #22]
 800647c:	801a      	strh	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 800647e:	8afb      	ldrh	r3, [r7, #22]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d102      	bne.n	800648a <fit_lfn+0x86>
 8006484:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006488:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	3301      	adds	r3, #1
 800648e:	61bb      	str	r3, [r7, #24]
 8006490:	69bb      	ldr	r3, [r7, #24]
 8006492:	2b0c      	cmp	r3, #12
 8006494:	d9dd      	bls.n	8006452 <fit_lfn+0x4e>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 8006496:	8afb      	ldrh	r3, [r7, #22]
 8006498:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800649c:	4293      	cmp	r3, r2
 800649e:	d006      	beq.n	80064ae <fit_lfn+0xaa>
 80064a0:	69fb      	ldr	r3, [r7, #28]
 80064a2:	005b      	lsls	r3, r3, #1
 80064a4:	68fa      	ldr	r2, [r7, #12]
 80064a6:	4413      	add	r3, r2
 80064a8:	881b      	ldrh	r3, [r3, #0]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d103      	bne.n	80064b6 <fit_lfn+0xb2>
 80064ae:	79fb      	ldrb	r3, [r7, #7]
 80064b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064b4:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	79fa      	ldrb	r2, [r7, #7]
 80064ba:	701a      	strb	r2, [r3, #0]
}
 80064bc:	bf00      	nop
 80064be:	3724      	adds	r7, #36	; 0x24
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bc80      	pop	{r7}
 80064c4:	4770      	bx	lr
 80064c6:	bf00      	nop
 80064c8:	0800acf0 	.word	0x0800acf0

080064cc <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b08c      	sub	sp, #48	; 0x30
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	60f8      	str	r0, [r7, #12]
 80064d4:	60b9      	str	r1, [r7, #8]
 80064d6:	607a      	str	r2, [r7, #4]
 80064d8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80064da:	220b      	movs	r2, #11
 80064dc:	68b9      	ldr	r1, [r7, #8]
 80064de:	68f8      	ldr	r0, [r7, #12]
 80064e0:	f7fe ff1e 	bl	8005320 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	2b05      	cmp	r3, #5
 80064e8:	d92b      	bls.n	8006542 <gen_numname+0x76>
		sr = seq;
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80064ee:	e022      	b.n	8006536 <gen_numname+0x6a>
			wc = *lfn++;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	1c9a      	adds	r2, r3, #2
 80064f4:	607a      	str	r2, [r7, #4]
 80064f6:	881b      	ldrh	r3, [r3, #0]
 80064f8:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80064fa:	2300      	movs	r3, #0
 80064fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80064fe:	e017      	b.n	8006530 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8006500:	69fb      	ldr	r3, [r7, #28]
 8006502:	005a      	lsls	r2, r3, #1
 8006504:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006506:	f003 0301 	and.w	r3, r3, #1
 800650a:	4413      	add	r3, r2
 800650c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800650e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006510:	085b      	lsrs	r3, r3, #1
 8006512:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800651a:	2b00      	cmp	r3, #0
 800651c:	d005      	beq.n	800652a <gen_numname+0x5e>
 800651e:	69fb      	ldr	r3, [r7, #28]
 8006520:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8006524:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8006528:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800652a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800652c:	3301      	adds	r3, #1
 800652e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006532:	2b0f      	cmp	r3, #15
 8006534:	d9e4      	bls.n	8006500 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	881b      	ldrh	r3, [r3, #0]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d1d8      	bne.n	80064f0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800653e:	69fb      	ldr	r3, [r7, #28]
 8006540:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8006542:	2307      	movs	r3, #7
 8006544:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	b2db      	uxtb	r3, r3
 800654a:	f003 030f 	and.w	r3, r3, #15
 800654e:	b2db      	uxtb	r3, r3
 8006550:	3330      	adds	r3, #48	; 0x30
 8006552:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8006556:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800655a:	2b39      	cmp	r3, #57	; 0x39
 800655c:	d904      	bls.n	8006568 <gen_numname+0x9c>
 800655e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006562:	3307      	adds	r3, #7
 8006564:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8006568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800656a:	1e5a      	subs	r2, r3, #1
 800656c:	62ba      	str	r2, [r7, #40]	; 0x28
 800656e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006572:	4413      	add	r3, r2
 8006574:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006578:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	091b      	lsrs	r3, r3, #4
 8006580:	603b      	str	r3, [r7, #0]
	} while (seq);
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d1de      	bne.n	8006546 <gen_numname+0x7a>
	ns[i] = '~';
 8006588:	f107 0214 	add.w	r2, r7, #20
 800658c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800658e:	4413      	add	r3, r2
 8006590:	227e      	movs	r2, #126	; 0x7e
 8006592:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8006594:	2300      	movs	r3, #0
 8006596:	627b      	str	r3, [r7, #36]	; 0x24
 8006598:	e016      	b.n	80065c8 <gen_numname+0xfc>
		if (IsDBCS1(dst[j])) {
 800659a:	68fa      	ldr	r2, [r7, #12]
 800659c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659e:	4413      	add	r3, r2
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	2b80      	cmp	r3, #128	; 0x80
 80065a4:	d90d      	bls.n	80065c2 <gen_numname+0xf6>
 80065a6:	68fa      	ldr	r2, [r7, #12]
 80065a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065aa:	4413      	add	r3, r2
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	2bff      	cmp	r3, #255	; 0xff
 80065b0:	d007      	beq.n	80065c2 <gen_numname+0xf6>
			if (j == i - 1) break;
 80065b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b4:	3b01      	subs	r3, #1
 80065b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d010      	beq.n	80065de <gen_numname+0x112>
			j++;
 80065bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065be:	3301      	adds	r3, #1
 80065c0:	627b      	str	r3, [r7, #36]	; 0x24
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80065c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c4:	3301      	adds	r3, #1
 80065c6:	627b      	str	r3, [r7, #36]	; 0x24
 80065c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065cc:	429a      	cmp	r2, r3
 80065ce:	d207      	bcs.n	80065e0 <gen_numname+0x114>
 80065d0:	68fa      	ldr	r2, [r7, #12]
 80065d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d4:	4413      	add	r3, r2
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	2b20      	cmp	r3, #32
 80065da:	d1de      	bne.n	800659a <gen_numname+0xce>
 80065dc:	e000      	b.n	80065e0 <gen_numname+0x114>
			if (j == i - 1) break;
 80065de:	bf00      	nop
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80065e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e2:	2b07      	cmp	r3, #7
 80065e4:	d808      	bhi.n	80065f8 <gen_numname+0x12c>
 80065e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e8:	1c5a      	adds	r2, r3, #1
 80065ea:	62ba      	str	r2, [r7, #40]	; 0x28
 80065ec:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80065f0:	4413      	add	r3, r2
 80065f2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80065f6:	e000      	b.n	80065fa <gen_numname+0x12e>
 80065f8:	2120      	movs	r1, #32
 80065fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fc:	1c5a      	adds	r2, r3, #1
 80065fe:	627a      	str	r2, [r7, #36]	; 0x24
 8006600:	68fa      	ldr	r2, [r7, #12]
 8006602:	4413      	add	r3, r2
 8006604:	460a      	mov	r2, r1
 8006606:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8006608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660a:	2b07      	cmp	r3, #7
 800660c:	d9e8      	bls.n	80065e0 <gen_numname+0x114>
}
 800660e:	bf00      	nop
 8006610:	3730      	adds	r7, #48	; 0x30
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}

08006616 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8006616:	b480      	push	{r7}
 8006618:	b085      	sub	sp, #20
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800661e:	2300      	movs	r3, #0
 8006620:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8006622:	230b      	movs	r3, #11
 8006624:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 8006626:	7bfb      	ldrb	r3, [r7, #15]
 8006628:	b2da      	uxtb	r2, r3
 800662a:	0852      	lsrs	r2, r2, #1
 800662c:	01db      	lsls	r3, r3, #7
 800662e:	4313      	orrs	r3, r2
 8006630:	b2da      	uxtb	r2, r3
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	1c59      	adds	r1, r3, #1
 8006636:	6079      	str	r1, [r7, #4]
 8006638:	781b      	ldrb	r3, [r3, #0]
 800663a:	4413      	add	r3, r2
 800663c:	73fb      	strb	r3, [r7, #15]
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	3b01      	subs	r3, #1
 8006642:	60bb      	str	r3, [r7, #8]
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d1ed      	bne.n	8006626 <sum_sfn+0x10>
	return sum;
 800664a:	7bfb      	ldrb	r3, [r7, #15]
}
 800664c:	4618      	mov	r0, r3
 800664e:	3714      	adds	r7, #20
 8006650:	46bd      	mov	sp, r7
 8006652:	bc80      	pop	{r7}
 8006654:	4770      	bx	lr

08006656 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8006656:	b580      	push	{r7, lr}
 8006658:	b086      	sub	sp, #24
 800665a:	af00      	add	r7, sp, #0
 800665c:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800665e:	2100      	movs	r1, #0
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f7ff fc69 	bl	8005f38 <dir_sdi>
 8006666:	4603      	mov	r3, r0
 8006668:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800666a:	7dfb      	ldrb	r3, [r7, #23]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d001      	beq.n	8006674 <dir_find+0x1e>
 8006670:	7dfb      	ldrb	r3, [r7, #23]
 8006672:	e0ac      	b.n	80067ce <dir_find+0x178>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8006674:	23ff      	movs	r3, #255	; 0xff
 8006676:	753b      	strb	r3, [r7, #20]
 8006678:	7d3b      	ldrb	r3, [r7, #20]
 800667a:	757b      	strb	r3, [r7, #21]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006682:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006692:	4619      	mov	r1, r3
 8006694:	4610      	mov	r0, r2
 8006696:	f7ff f8f4 	bl	8005882 <move_window>
 800669a:	4603      	mov	r3, r0
 800669c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800669e:	7dfb      	ldrb	r3, [r7, #23]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	f040 808e 	bne.w	80067c2 <dir_find+0x16c>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80066ac:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	781b      	ldrb	r3, [r3, #0]
 80066b2:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80066b4:	7dbb      	ldrb	r3, [r7, #22]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d102      	bne.n	80066c0 <dir_find+0x6a>
 80066ba:	2304      	movs	r3, #4
 80066bc:	75fb      	strb	r3, [r7, #23]
 80066be:	e085      	b.n	80067cc <dir_find+0x176>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	330b      	adds	r3, #11
 80066c4:	781b      	ldrb	r3, [r3, #0]
 80066c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80066ca:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80066cc:	7dbb      	ldrb	r3, [r7, #22]
 80066ce:	2be5      	cmp	r3, #229	; 0xe5
 80066d0:	d007      	beq.n	80066e2 <dir_find+0x8c>
 80066d2:	7bfb      	ldrb	r3, [r7, #15]
 80066d4:	f003 0308 	and.w	r3, r3, #8
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d00a      	beq.n	80066f2 <dir_find+0x9c>
 80066dc:	7bfb      	ldrb	r3, [r7, #15]
 80066de:	2b0f      	cmp	r3, #15
 80066e0:	d007      	beq.n	80066f2 <dir_find+0x9c>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 80066e2:	23ff      	movs	r3, #255	; 0xff
 80066e4:	757b      	strb	r3, [r7, #21]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80066ec:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224
 80066f0:	e05c      	b.n	80067ac <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80066f2:	7bfb      	ldrb	r3, [r7, #15]
 80066f4:	2b0f      	cmp	r3, #15
 80066f6:	d133      	bne.n	8006760 <dir_find+0x10a>
				if (dp->lfn) {
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d054      	beq.n	80067ac <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8006702:	7dbb      	ldrb	r3, [r7, #22]
 8006704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006708:	2b00      	cmp	r3, #0
 800670a:	d00e      	beq.n	800672a <dir_find+0xd4>
						sum = dir[LDIR_Chksum];
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	7b5b      	ldrb	r3, [r3, #13]
 8006710:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 8006712:	7dbb      	ldrb	r3, [r7, #22]
 8006714:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006718:	75bb      	strb	r3, [r7, #22]
 800671a:	7dbb      	ldrb	r3, [r7, #22]
 800671c:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 800672a:	7dba      	ldrb	r2, [r7, #22]
 800672c:	7d7b      	ldrb	r3, [r7, #21]
 800672e:	429a      	cmp	r2, r3
 8006730:	d113      	bne.n	800675a <dir_find+0x104>
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	330d      	adds	r3, #13
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	7d3a      	ldrb	r2, [r7, #20]
 800673a:	429a      	cmp	r2, r3
 800673c:	d10d      	bne.n	800675a <dir_find+0x104>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8006744:	6939      	ldr	r1, [r7, #16]
 8006746:	4618      	mov	r0, r3
 8006748:	f7ff fdfc 	bl	8006344 <cmp_lfn>
 800674c:	4603      	mov	r3, r0
 800674e:	2b00      	cmp	r3, #0
 8006750:	d003      	beq.n	800675a <dir_find+0x104>
 8006752:	7d7b      	ldrb	r3, [r7, #21]
 8006754:	3b01      	subs	r3, #1
 8006756:	b2db      	uxtb	r3, r3
 8006758:	e000      	b.n	800675c <dir_find+0x106>
 800675a:	23ff      	movs	r3, #255	; 0xff
 800675c:	757b      	strb	r3, [r7, #21]
 800675e:	e025      	b.n	80067ac <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8006760:	7d7b      	ldrb	r3, [r7, #21]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d107      	bne.n	8006776 <dir_find+0x120>
 8006766:	6938      	ldr	r0, [r7, #16]
 8006768:	f7ff ff55 	bl	8006616 <sum_sfn>
 800676c:	4603      	mov	r3, r0
 800676e:	461a      	mov	r2, r3
 8006770:	7d3b      	ldrb	r3, [r7, #20]
 8006772:	4293      	cmp	r3, r2
 8006774:	d027      	beq.n	80067c6 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800677c:	330b      	adds	r3, #11
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	f003 0301 	and.w	r3, r3, #1
 8006784:	2b00      	cmp	r3, #0
 8006786:	d10a      	bne.n	800679e <dir_find+0x148>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800678e:	220b      	movs	r2, #11
 8006790:	4619      	mov	r1, r3
 8006792:	6938      	ldr	r0, [r7, #16]
 8006794:	f7fe fe0b 	bl	80053ae <mem_cmp>
 8006798:	4603      	mov	r3, r0
 800679a:	2b00      	cmp	r3, #0
 800679c:	d015      	beq.n	80067ca <dir_find+0x174>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800679e:	23ff      	movs	r3, #255	; 0xff
 80067a0:	757b      	strb	r3, [r7, #21]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80067a8:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 80067ac:	2100      	movs	r1, #0
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f7ff fc56 	bl	8006060 <dir_next>
 80067b4:	4603      	mov	r3, r0
 80067b6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80067b8:	7dfb      	ldrb	r3, [r7, #23]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	f43f af63 	beq.w	8006686 <dir_find+0x30>
 80067c0:	e004      	b.n	80067cc <dir_find+0x176>
		if (res != FR_OK) break;
 80067c2:	bf00      	nop
 80067c4:	e002      	b.n	80067cc <dir_find+0x176>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 80067c6:	bf00      	nop
 80067c8:	e000      	b.n	80067cc <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 80067ca:	bf00      	nop

	return res;
 80067cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3718      	adds	r7, #24
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
	...

080067d8 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b08c      	sub	sp, #48	; 0x30
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80067e6:	623b      	str	r3, [r7, #32]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80067ee:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 80067f0:	f107 030c 	add.w	r3, r7, #12
 80067f4:	220c      	movs	r2, #12
 80067f6:	6a39      	ldr	r1, [r7, #32]
 80067f8:	4618      	mov	r0, r3
 80067fa:	f7fe fd91 	bl	8005320 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80067fe:	7dfb      	ldrb	r3, [r7, #23]
 8006800:	f003 0301 	and.w	r3, r3, #1
 8006804:	2b00      	cmp	r3, #0
 8006806:	d037      	beq.n	8006878 <dir_register+0xa0>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 8006808:	6a3b      	ldr	r3, [r7, #32]
 800680a:	330b      	adds	r3, #11
 800680c:	2200      	movs	r2, #0
 800680e:	701a      	strb	r2, [r3, #0]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
		for (n = 1; n < 100; n++) {
 8006818:	2301      	movs	r3, #1
 800681a:	62bb      	str	r3, [r7, #40]	; 0x28
 800681c:	e013      	b.n	8006846 <dir_register+0x6e>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 800681e:	f107 010c 	add.w	r1, r7, #12
 8006822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006824:	69fa      	ldr	r2, [r7, #28]
 8006826:	6a38      	ldr	r0, [r7, #32]
 8006828:	f7ff fe50 	bl	80064cc <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f7ff ff12 	bl	8006656 <dir_find>
 8006832:	4603      	mov	r3, r0
 8006834:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8006838:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800683c:	2b00      	cmp	r3, #0
 800683e:	d106      	bne.n	800684e <dir_register+0x76>
		for (n = 1; n < 100; n++) {
 8006840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006842:	3301      	adds	r3, #1
 8006844:	62bb      	str	r3, [r7, #40]	; 0x28
 8006846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006848:	2b63      	cmp	r3, #99	; 0x63
 800684a:	d9e8      	bls.n	800681e <dir_register+0x46>
 800684c:	e000      	b.n	8006850 <dir_register+0x78>
			if (res != FR_OK) break;
 800684e:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8006850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006852:	2b64      	cmp	r3, #100	; 0x64
 8006854:	d101      	bne.n	800685a <dir_register+0x82>
 8006856:	2307      	movs	r3, #7
 8006858:	e0c5      	b.n	80069e6 <dir_register+0x20e>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800685a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800685e:	2b04      	cmp	r3, #4
 8006860:	d002      	beq.n	8006868 <dir_register+0x90>
 8006862:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006866:	e0be      	b.n	80069e6 <dir_register+0x20e>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 8006868:	6a3b      	ldr	r3, [r7, #32]
 800686a:	330b      	adds	r3, #11
 800686c:	7dfa      	ldrb	r2, [r7, #23]
 800686e:	701a      	strb	r2, [r3, #0]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	69fa      	ldr	r2, [r7, #28]
 8006874:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 8006878:	7dfb      	ldrb	r3, [r7, #23]
 800687a:	f003 0302 	and.w	r3, r3, #2
 800687e:	2b00      	cmp	r3, #0
 8006880:	d014      	beq.n	80068ac <dir_register+0xd4>
		for (n = 0; lfn[n]; n++) ;
 8006882:	2300      	movs	r3, #0
 8006884:	62bb      	str	r3, [r7, #40]	; 0x28
 8006886:	e002      	b.n	800688e <dir_register+0xb6>
 8006888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800688a:	3301      	adds	r3, #1
 800688c:	62bb      	str	r3, [r7, #40]	; 0x28
 800688e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006890:	005b      	lsls	r3, r3, #1
 8006892:	69fa      	ldr	r2, [r7, #28]
 8006894:	4413      	add	r3, r2
 8006896:	881b      	ldrh	r3, [r3, #0]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d1f5      	bne.n	8006888 <dir_register+0xb0>
		nent = (n + 25) / 13;
 800689c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800689e:	3319      	adds	r3, #25
 80068a0:	4a53      	ldr	r2, [pc, #332]	; (80069f0 <dir_register+0x218>)
 80068a2:	fba2 2303 	umull	r2, r3, r2, r3
 80068a6:	089b      	lsrs	r3, r3, #2
 80068a8:	627b      	str	r3, [r7, #36]	; 0x24
 80068aa:	e001      	b.n	80068b0 <dir_register+0xd8>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 80068ac:	2301      	movs	r3, #1
 80068ae:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80068b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f7ff fccb 	bl	800624e <dir_alloc>
 80068b8:	4603      	mov	r3, r0
 80068ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80068be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d153      	bne.n	800696e <dir_register+0x196>
 80068c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c8:	3b01      	subs	r3, #1
 80068ca:	627b      	str	r3, [r7, #36]	; 0x24
 80068cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d04d      	beq.n	800696e <dir_register+0x196>
		res = dir_sdi(dp, dp->index - nent);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 80068d8:	461a      	mov	r2, r3
 80068da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068dc:	1ad3      	subs	r3, r2, r3
 80068de:	4619      	mov	r1, r3
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f7ff fb29 	bl	8005f38 <dir_sdi>
 80068e6:	4603      	mov	r3, r0
 80068e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80068ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d13c      	bne.n	800696e <dir_register+0x196>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80068fa:	4618      	mov	r0, r3
 80068fc:	f7ff fe8b 	bl	8006616 <sum_sfn>
 8006900:	4603      	mov	r3, r0
 8006902:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006910:	4619      	mov	r1, r3
 8006912:	4610      	mov	r0, r2
 8006914:	f7fe ffb5 	bl	8005882 <move_window>
 8006918:	4603      	mov	r3, r0
 800691a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800691e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006922:	2b00      	cmp	r3, #0
 8006924:	d122      	bne.n	800696c <dir_register+0x194>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f8d3 1214 	ldr.w	r1, [r3, #532]	; 0x214
 8006932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006934:	b2da      	uxtb	r2, r3
 8006936:	7efb      	ldrb	r3, [r7, #27]
 8006938:	f7ff fd64 	bl	8006404 <fit_lfn>
				dp->fs->wflag = 1;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006942:	2201      	movs	r2, #1
 8006944:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = dir_next(dp, 0);	/* Next entry */
 8006948:	2100      	movs	r1, #0
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f7ff fb88 	bl	8006060 <dir_next>
 8006950:	4603      	mov	r3, r0
 8006952:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8006956:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800695a:	2b00      	cmp	r3, #0
 800695c:	d107      	bne.n	800696e <dir_register+0x196>
 800695e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006960:	3b01      	subs	r3, #1
 8006962:	627b      	str	r3, [r7, #36]	; 0x24
 8006964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006966:	2b00      	cmp	r3, #0
 8006968:	d1cc      	bne.n	8006904 <dir_register+0x12c>
 800696a:	e000      	b.n	800696e <dir_register+0x196>
				if (res != FR_OK) break;
 800696c:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800696e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006972:	2b00      	cmp	r3, #0
 8006974:	d135      	bne.n	80069e2 <dir_register+0x20a>
		res = move_window(dp->fs, dp->sect);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006982:	4619      	mov	r1, r3
 8006984:	4610      	mov	r0, r2
 8006986:	f7fe ff7c 	bl	8005882 <move_window>
 800698a:	4603      	mov	r3, r0
 800698c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006990:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006994:	2b00      	cmp	r3, #0
 8006996:	d124      	bne.n	80069e2 <dir_register+0x20a>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800699e:	2220      	movs	r2, #32
 80069a0:	2100      	movs	r1, #0
 80069a2:	4618      	mov	r0, r3
 80069a4:	f7fe fcea 	bl	800537c <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80069b4:	220b      	movs	r2, #11
 80069b6:	4619      	mov	r1, r3
 80069b8:	f7fe fcb2 	bl	8005320 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80069c2:	330b      	adds	r3, #11
 80069c4:	781a      	ldrb	r2, [r3, #0]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80069cc:	330c      	adds	r3, #12
 80069ce:	f002 0218 	and.w	r2, r2, #24
 80069d2:	b2d2      	uxtb	r2, r2
 80069d4:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80069dc:	2201      	movs	r2, #1
 80069de:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 80069e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3730      	adds	r7, #48	; 0x30
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}
 80069ee:	bf00      	nop
 80069f0:	4ec4ec4f 	.word	0x4ec4ec4f

080069f4 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b08a      	sub	sp, #40	; 0x28
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	613b      	str	r3, [r7, #16]
 8006a04:	e002      	b.n	8006a0c <create_name+0x18>
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	3301      	adds	r3, #1
 8006a0a:	613b      	str	r3, [r7, #16]
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	2b2f      	cmp	r3, #47	; 0x2f
 8006a12:	d0f8      	beq.n	8006a06 <create_name+0x12>
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	781b      	ldrb	r3, [r3, #0]
 8006a18:	2b5c      	cmp	r3, #92	; 0x5c
 8006a1a:	d0f4      	beq.n	8006a06 <create_name+0x12>
	lfn = dp->lfn;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8006a22:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 8006a24:	2300      	movs	r3, #0
 8006a26:	617b      	str	r3, [r7, #20]
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8006a2c:	69bb      	ldr	r3, [r7, #24]
 8006a2e:	1c5a      	adds	r2, r3, #1
 8006a30:	61ba      	str	r2, [r7, #24]
 8006a32:	693a      	ldr	r2, [r7, #16]
 8006a34:	4413      	add	r3, r2
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8006a3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a3c:	2b1f      	cmp	r3, #31
 8006a3e:	d961      	bls.n	8006b04 <create_name+0x110>
 8006a40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a42:	2b2f      	cmp	r3, #47	; 0x2f
 8006a44:	d05e      	beq.n	8006b04 <create_name+0x110>
 8006a46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a48:	2b5c      	cmp	r3, #92	; 0x5c
 8006a4a:	d05b      	beq.n	8006b04 <create_name+0x110>
		if (di >= _MAX_LFN)				/* Reject too long name */
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	2bfe      	cmp	r3, #254	; 0xfe
 8006a50:	d901      	bls.n	8006a56 <create_name+0x62>
			return FR_INVALID_NAME;
 8006a52:	2306      	movs	r3, #6
 8006a54:	e1cc      	b.n	8006df0 <create_name+0x3fc>
#if !_LFN_UNICODE
		w &= 0xFF;
 8006a56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
 8006a5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a5e:	b2db      	uxtb	r3, r3
 8006a60:	2b80      	cmp	r3, #128	; 0x80
 8006a62:	d92d      	bls.n	8006ac0 <create_name+0xcc>
 8006a64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a66:	b2db      	uxtb	r3, r3
 8006a68:	2bff      	cmp	r3, #255	; 0xff
 8006a6a:	d029      	beq.n	8006ac0 <create_name+0xcc>
#if _DF1S
			b = (BYTE)p[si++];			/* Get 2nd byte */
 8006a6c:	69bb      	ldr	r3, [r7, #24]
 8006a6e:	1c5a      	adds	r2, r3, #1
 8006a70:	61ba      	str	r2, [r7, #24]
 8006a72:	693a      	ldr	r2, [r7, #16]
 8006a74:	4413      	add	r3, r2
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			w = (w << 8) + b;			/* Create a DBC */
 8006a7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a7e:	021b      	lsls	r3, r3, #8
 8006a80:	b29a      	uxth	r2, r3
 8006a82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	4413      	add	r3, r2
 8006a8a:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (!IsDBCS2(b))
 8006a8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a90:	2b40      	cmp	r3, #64	; 0x40
 8006a92:	d903      	bls.n	8006a9c <create_name+0xa8>
 8006a94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a98:	2b5a      	cmp	r3, #90	; 0x5a
 8006a9a:	d911      	bls.n	8006ac0 <create_name+0xcc>
 8006a9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006aa0:	2b60      	cmp	r3, #96	; 0x60
 8006aa2:	d903      	bls.n	8006aac <create_name+0xb8>
 8006aa4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006aa8:	2b7a      	cmp	r3, #122	; 0x7a
 8006aaa:	d909      	bls.n	8006ac0 <create_name+0xcc>
 8006aac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ab0:	2b80      	cmp	r3, #128	; 0x80
 8006ab2:	d903      	bls.n	8006abc <create_name+0xc8>
 8006ab4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ab8:	2bff      	cmp	r3, #255	; 0xff
 8006aba:	d101      	bne.n	8006ac0 <create_name+0xcc>
				return FR_INVALID_NAME;	/* Reject invalid sequence */
 8006abc:	2306      	movs	r3, #6
 8006abe:	e197      	b.n	8006df0 <create_name+0x3fc>
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8006ac0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ac2:	2101      	movs	r1, #1
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f001 fb4b 	bl	8008160 <ff_convert>
 8006aca:	4603      	mov	r3, r0
 8006acc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8006ace:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d101      	bne.n	8006ad8 <create_name+0xe4>
 8006ad4:	2306      	movs	r3, #6
 8006ad6:	e18b      	b.n	8006df0 <create_name+0x3fc>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 8006ad8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ada:	2b7f      	cmp	r3, #127	; 0x7f
 8006adc:	d809      	bhi.n	8006af2 <create_name+0xfe>
 8006ade:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ae0:	4619      	mov	r1, r3
 8006ae2:	489b      	ldr	r0, [pc, #620]	; (8006d50 <create_name+0x35c>)
 8006ae4:	f7fe fc89 	bl	80053fa <chk_chr>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d001      	beq.n	8006af2 <create_name+0xfe>
			return FR_INVALID_NAME;
 8006aee:	2306      	movs	r3, #6
 8006af0:	e17e      	b.n	8006df0 <create_name+0x3fc>
		lfn[di++] = w;					/* Store the Unicode character */
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	1c5a      	adds	r2, r3, #1
 8006af6:	617a      	str	r2, [r7, #20]
 8006af8:	005b      	lsls	r3, r3, #1
 8006afa:	68fa      	ldr	r2, [r7, #12]
 8006afc:	4413      	add	r3, r2
 8006afe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006b00:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8006b02:	e793      	b.n	8006a2c <create_name+0x38>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8006b04:	693a      	ldr	r2, [r7, #16]
 8006b06:	69bb      	ldr	r3, [r7, #24]
 8006b08:	441a      	add	r2, r3
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8006b0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b10:	2b1f      	cmp	r3, #31
 8006b12:	d801      	bhi.n	8006b18 <create_name+0x124>
 8006b14:	2304      	movs	r3, #4
 8006b16:	e000      	b.n	8006b1a <create_name+0x126>
 8006b18:	2300      	movs	r3, #0
 8006b1a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 8006b1e:	e011      	b.n	8006b44 <create_name+0x150>
		w = lfn[di - 1];
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006b26:	3b01      	subs	r3, #1
 8006b28:	005b      	lsls	r3, r3, #1
 8006b2a:	68fa      	ldr	r2, [r7, #12]
 8006b2c:	4413      	add	r3, r2
 8006b2e:	881b      	ldrh	r3, [r3, #0]
 8006b30:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8006b32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b34:	2b20      	cmp	r3, #32
 8006b36:	d002      	beq.n	8006b3e <create_name+0x14a>
 8006b38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b3a:	2b2e      	cmp	r3, #46	; 0x2e
 8006b3c:	d106      	bne.n	8006b4c <create_name+0x158>
		di--;
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	3b01      	subs	r3, #1
 8006b42:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d1ea      	bne.n	8006b20 <create_name+0x12c>
 8006b4a:	e000      	b.n	8006b4e <create_name+0x15a>
		if (w != ' ' && w != '.') break;
 8006b4c:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d101      	bne.n	8006b58 <create_name+0x164>
 8006b54:	2306      	movs	r3, #6
 8006b56:	e14b      	b.n	8006df0 <create_name+0x3fc>

	lfn[di] = 0;						/* LFN is created */
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	005b      	lsls	r3, r3, #1
 8006b5c:	68fa      	ldr	r2, [r7, #12]
 8006b5e:	4413      	add	r3, r2
 8006b60:	2200      	movs	r2, #0
 8006b62:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006b6a:	220b      	movs	r2, #11
 8006b6c:	2120      	movs	r1, #32
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f7fe fc04 	bl	800537c <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8006b74:	2300      	movs	r3, #0
 8006b76:	61bb      	str	r3, [r7, #24]
 8006b78:	e002      	b.n	8006b80 <create_name+0x18c>
 8006b7a:	69bb      	ldr	r3, [r7, #24]
 8006b7c:	3301      	adds	r3, #1
 8006b7e:	61bb      	str	r3, [r7, #24]
 8006b80:	69bb      	ldr	r3, [r7, #24]
 8006b82:	005b      	lsls	r3, r3, #1
 8006b84:	68fa      	ldr	r2, [r7, #12]
 8006b86:	4413      	add	r3, r2
 8006b88:	881b      	ldrh	r3, [r3, #0]
 8006b8a:	2b20      	cmp	r3, #32
 8006b8c:	d0f5      	beq.n	8006b7a <create_name+0x186>
 8006b8e:	69bb      	ldr	r3, [r7, #24]
 8006b90:	005b      	lsls	r3, r3, #1
 8006b92:	68fa      	ldr	r2, [r7, #12]
 8006b94:	4413      	add	r3, r2
 8006b96:	881b      	ldrh	r3, [r3, #0]
 8006b98:	2b2e      	cmp	r3, #46	; 0x2e
 8006b9a:	d0ee      	beq.n	8006b7a <create_name+0x186>
	if (si) cf |= NS_LOSS | NS_LFN;
 8006b9c:	69bb      	ldr	r3, [r7, #24]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d009      	beq.n	8006bb6 <create_name+0x1c2>
 8006ba2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006ba6:	f043 0303 	orr.w	r3, r3, #3
 8006baa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8006bae:	e002      	b.n	8006bb6 <create_name+0x1c2>
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	3b01      	subs	r3, #1
 8006bb4:	617b      	str	r3, [r7, #20]
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d009      	beq.n	8006bd0 <create_name+0x1dc>
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006bc2:	3b01      	subs	r3, #1
 8006bc4:	005b      	lsls	r3, r3, #1
 8006bc6:	68fa      	ldr	r2, [r7, #12]
 8006bc8:	4413      	add	r3, r2
 8006bca:	881b      	ldrh	r3, [r3, #0]
 8006bcc:	2b2e      	cmp	r3, #46	; 0x2e
 8006bce:	d1ef      	bne.n	8006bb0 <create_name+0x1bc>

	b = i = 0; ni = 8;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	623b      	str	r3, [r7, #32]
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006bda:	2308      	movs	r3, #8
 8006bdc:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8006bde:	69bb      	ldr	r3, [r7, #24]
 8006be0:	1c5a      	adds	r2, r3, #1
 8006be2:	61ba      	str	r2, [r7, #24]
 8006be4:	005b      	lsls	r3, r3, #1
 8006be6:	68fa      	ldr	r2, [r7, #12]
 8006be8:	4413      	add	r3, r2
 8006bea:	881b      	ldrh	r3, [r3, #0]
 8006bec:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8006bee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	f000 80aa 	beq.w	8006d4a <create_name+0x356>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8006bf6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006bf8:	2b20      	cmp	r3, #32
 8006bfa:	d006      	beq.n	8006c0a <create_name+0x216>
 8006bfc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006bfe:	2b2e      	cmp	r3, #46	; 0x2e
 8006c00:	d10a      	bne.n	8006c18 <create_name+0x224>
 8006c02:	69ba      	ldr	r2, [r7, #24]
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	429a      	cmp	r2, r3
 8006c08:	d006      	beq.n	8006c18 <create_name+0x224>
			cf |= NS_LOSS | NS_LFN; continue;
 8006c0a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006c0e:	f043 0303 	orr.w	r3, r3, #3
 8006c12:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006c16:	e097      	b.n	8006d48 <create_name+0x354>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8006c18:	6a3a      	ldr	r2, [r7, #32]
 8006c1a:	69fb      	ldr	r3, [r7, #28]
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d203      	bcs.n	8006c28 <create_name+0x234>
 8006c20:	69ba      	ldr	r2, [r7, #24]
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d123      	bne.n	8006c70 <create_name+0x27c>
			if (ni == 11) {				/* Long extension */
 8006c28:	69fb      	ldr	r3, [r7, #28]
 8006c2a:	2b0b      	cmp	r3, #11
 8006c2c:	d106      	bne.n	8006c3c <create_name+0x248>
				cf |= NS_LOSS | NS_LFN; break;
 8006c2e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006c32:	f043 0303 	orr.w	r3, r3, #3
 8006c36:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006c3a:	e08e      	b.n	8006d5a <create_name+0x366>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8006c3c:	69ba      	ldr	r2, [r7, #24]
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d005      	beq.n	8006c50 <create_name+0x25c>
 8006c44:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006c48:	f043 0303 	orr.w	r3, r3, #3
 8006c4c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (si > di) break;			/* No extension */
 8006c50:	69ba      	ldr	r2, [r7, #24]
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	429a      	cmp	r2, r3
 8006c56:	d87f      	bhi.n	8006d58 <create_name+0x364>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	61bb      	str	r3, [r7, #24]
 8006c5c:	2308      	movs	r3, #8
 8006c5e:	623b      	str	r3, [r7, #32]
 8006c60:	230b      	movs	r3, #11
 8006c62:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8006c64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006c6e:	e06b      	b.n	8006d48 <create_name+0x354>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8006c70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c72:	2b7f      	cmp	r3, #127	; 0x7f
 8006c74:	d910      	bls.n	8006c98 <create_name+0x2a4>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
 8006c76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f001 facf 	bl	800821c <ff_wtoupper>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	2100      	movs	r1, #0
 8006c82:	4618      	mov	r0, r3
 8006c84:	f001 fa6c 	bl	8008160 <ff_convert>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	84bb      	strh	r3, [r7, #36]	; 0x24
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8006c8c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006c90:	f043 0302 	orr.w	r3, r3, #2
 8006c94:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		}

		if (_DF1S && w >= 0x100) {		/* DBC (always false at SBCS cfg) */
 8006c98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c9a:	2bff      	cmp	r3, #255	; 0xff
 8006c9c:	d91a      	bls.n	8006cd4 <create_name+0x2e0>
			if (i >= ni - 1) {
 8006c9e:	69fb      	ldr	r3, [r7, #28]
 8006ca0:	3b01      	subs	r3, #1
 8006ca2:	6a3a      	ldr	r2, [r7, #32]
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d308      	bcc.n	8006cba <create_name+0x2c6>
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
 8006ca8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006cac:	f043 0303 	orr.w	r3, r3, #3
 8006cb0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006cb4:	69fb      	ldr	r3, [r7, #28]
 8006cb6:	623b      	str	r3, [r7, #32]
 8006cb8:	e046      	b.n	8006d48 <create_name+0x354>
			}
			dp->fn[i++] = (BYTE)(w >> 8);
 8006cba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006cbc:	0a1b      	lsrs	r3, r3, #8
 8006cbe:	b298      	uxth	r0, r3
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8006cc6:	6a3b      	ldr	r3, [r7, #32]
 8006cc8:	1c59      	adds	r1, r3, #1
 8006cca:	6239      	str	r1, [r7, #32]
 8006ccc:	4413      	add	r3, r2
 8006cce:	b2c2      	uxtb	r2, r0
 8006cd0:	701a      	strb	r2, [r3, #0]
 8006cd2:	e02f      	b.n	8006d34 <create_name+0x340>
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8006cd4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d007      	beq.n	8006cea <create_name+0x2f6>
 8006cda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006cdc:	4619      	mov	r1, r3
 8006cde:	481d      	ldr	r0, [pc, #116]	; (8006d54 <create_name+0x360>)
 8006ce0:	f7fe fb8b 	bl	80053fa <chk_chr>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d008      	beq.n	8006cfc <create_name+0x308>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8006cea:	235f      	movs	r3, #95	; 0x5f
 8006cec:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006cee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006cf2:	f043 0303 	orr.w	r3, r3, #3
 8006cf6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006cfa:	e01b      	b.n	8006d34 <create_name+0x340>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8006cfc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006cfe:	2b40      	cmp	r3, #64	; 0x40
 8006d00:	d909      	bls.n	8006d16 <create_name+0x322>
 8006d02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d04:	2b5a      	cmp	r3, #90	; 0x5a
 8006d06:	d806      	bhi.n	8006d16 <create_name+0x322>
					b |= 2;
 8006d08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d0c:	f043 0302 	orr.w	r3, r3, #2
 8006d10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006d14:	e00e      	b.n	8006d34 <create_name+0x340>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8006d16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d18:	2b60      	cmp	r3, #96	; 0x60
 8006d1a:	d90b      	bls.n	8006d34 <create_name+0x340>
 8006d1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d1e:	2b7a      	cmp	r3, #122	; 0x7a
 8006d20:	d808      	bhi.n	8006d34 <create_name+0x340>
						b |= 1; w -= 0x20;
 8006d22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d26:	f043 0301 	orr.w	r3, r3, #1
 8006d2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006d2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d30:	3b20      	subs	r3, #32
 8006d32:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8006d3a:	6a3b      	ldr	r3, [r7, #32]
 8006d3c:	1c59      	adds	r1, r3, #1
 8006d3e:	6239      	str	r1, [r7, #32]
 8006d40:	4413      	add	r3, r2
 8006d42:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006d44:	b2d2      	uxtb	r2, r2
 8006d46:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 8006d48:	e749      	b.n	8006bde <create_name+0x1ea>
		if (!w) break;					/* Break on end of the LFN */
 8006d4a:	bf00      	nop
 8006d4c:	e005      	b.n	8006d5a <create_name+0x366>
 8006d4e:	bf00      	nop
 8006d50:	0800ac80 	.word	0x0800ac80
 8006d54:	0800ac8c 	.word	0x0800ac8c
			if (si > di) break;			/* No extension */
 8006d58:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006d60:	781b      	ldrb	r3, [r3, #0]
 8006d62:	2be5      	cmp	r3, #229	; 0xe5
 8006d64:	d104      	bne.n	8006d70 <create_name+0x37c>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006d6c:	2205      	movs	r2, #5
 8006d6e:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8006d70:	69fb      	ldr	r3, [r7, #28]
 8006d72:	2b08      	cmp	r3, #8
 8006d74:	d104      	bne.n	8006d80 <create_name+0x38c>
 8006d76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d7a:	009b      	lsls	r3, r3, #2
 8006d7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 8006d80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d84:	f003 030c 	and.w	r3, r3, #12
 8006d88:	2b0c      	cmp	r3, #12
 8006d8a:	d005      	beq.n	8006d98 <create_name+0x3a4>
 8006d8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d90:	f003 0303 	and.w	r3, r3, #3
 8006d94:	2b03      	cmp	r3, #3
 8006d96:	d105      	bne.n	8006da4 <create_name+0x3b0>
		cf |= NS_LFN;
 8006d98:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006d9c:	f043 0302 	orr.w	r3, r3, #2
 8006da0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8006da4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006da8:	f003 0302 	and.w	r3, r3, #2
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d117      	bne.n	8006de0 <create_name+0x3ec>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8006db0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006db4:	f003 0303 	and.w	r3, r3, #3
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d105      	bne.n	8006dc8 <create_name+0x3d4>
 8006dbc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006dc0:	f043 0310 	orr.w	r3, r3, #16
 8006dc4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8006dc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006dcc:	f003 030c 	and.w	r3, r3, #12
 8006dd0:	2b04      	cmp	r3, #4
 8006dd2:	d105      	bne.n	8006de0 <create_name+0x3ec>
 8006dd4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006dd8:	f043 0308 	orr.w	r3, r3, #8
 8006ddc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006de6:	330b      	adds	r3, #11
 8006de8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006dec:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006dee:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3728      	adds	r7, #40	; 0x28
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}

08006df8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b084      	sub	sp, #16
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	781b      	ldrb	r3, [r3, #0]
 8006e06:	2b2f      	cmp	r3, #47	; 0x2f
 8006e08:	d003      	beq.n	8006e12 <follow_path+0x1a>
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	781b      	ldrb	r3, [r3, #0]
 8006e0e:	2b5c      	cmp	r3, #92	; 0x5c
 8006e10:	d102      	bne.n	8006e18 <follow_path+0x20>
		path++;
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	3301      	adds	r3, #1
 8006e16:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	2b1f      	cmp	r3, #31
 8006e26:	d80a      	bhi.n	8006e3e <follow_path+0x46>
		res = dir_sdi(dp, 0);
 8006e28:	2100      	movs	r1, #0
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f7ff f884 	bl	8005f38 <dir_sdi>
 8006e30:	4603      	mov	r3, r0
 8006e32:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2200      	movs	r2, #0
 8006e38:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8006e3c:	e045      	b.n	8006eca <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006e3e:	463b      	mov	r3, r7
 8006e40:	4619      	mov	r1, r3
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f7ff fdd6 	bl	80069f4 <create_name>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8006e4c:	7bfb      	ldrb	r3, [r7, #15]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d136      	bne.n	8006ec0 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f7ff fbff 	bl	8006656 <dir_find>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006e62:	7adb      	ldrb	r3, [r3, #11]
 8006e64:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8006e66:	7bfb      	ldrb	r3, [r7, #15]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d00a      	beq.n	8006e82 <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006e6c:	7bfb      	ldrb	r3, [r7, #15]
 8006e6e:	2b04      	cmp	r3, #4
 8006e70:	d128      	bne.n	8006ec4 <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006e72:	7bbb      	ldrb	r3, [r7, #14]
 8006e74:	f003 0304 	and.w	r3, r3, #4
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d123      	bne.n	8006ec4 <follow_path+0xcc>
 8006e7c:	2305      	movs	r3, #5
 8006e7e:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8006e80:	e020      	b.n	8006ec4 <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006e82:	7bbb      	ldrb	r3, [r7, #14]
 8006e84:	f003 0304 	and.w	r3, r3, #4
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d11d      	bne.n	8006ec8 <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006e92:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	330b      	adds	r3, #11
 8006e98:	781b      	ldrb	r3, [r3, #0]
 8006e9a:	f003 0310 	and.w	r3, r3, #16
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d102      	bne.n	8006ea8 <follow_path+0xb0>
				res = FR_NO_PATH; break;
 8006ea2:	2305      	movs	r3, #5
 8006ea4:	73fb      	strb	r3, [r7, #15]
 8006ea6:	e010      	b.n	8006eca <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006eae:	68b9      	ldr	r1, [r7, #8]
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f7ff fa16 	bl	80062e2 <ld_clust>
 8006eb6:	4602      	mov	r2, r0
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006ebe:	e7be      	b.n	8006e3e <follow_path+0x46>
			if (res != FR_OK) break;
 8006ec0:	bf00      	nop
 8006ec2:	e002      	b.n	8006eca <follow_path+0xd2>
				break;
 8006ec4:	bf00      	nop
 8006ec6:	e000      	b.n	8006eca <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006ec8:	bf00      	nop
		}
	}

	return res;
 8006eca:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3710      	adds	r7, #16
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}

08006ed4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b087      	sub	sp, #28
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006edc:	f04f 33ff 	mov.w	r3, #4294967295
 8006ee0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d031      	beq.n	8006f4e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	617b      	str	r3, [r7, #20]
 8006ef0:	e002      	b.n	8006ef8 <get_ldnumber+0x24>
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	3301      	adds	r3, #1
 8006ef6:	617b      	str	r3, [r7, #20]
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	781b      	ldrb	r3, [r3, #0]
 8006efc:	2b1f      	cmp	r3, #31
 8006efe:	d903      	bls.n	8006f08 <get_ldnumber+0x34>
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	781b      	ldrb	r3, [r3, #0]
 8006f04:	2b3a      	cmp	r3, #58	; 0x3a
 8006f06:	d1f4      	bne.n	8006ef2 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	781b      	ldrb	r3, [r3, #0]
 8006f0c:	2b3a      	cmp	r3, #58	; 0x3a
 8006f0e:	d11c      	bne.n	8006f4a <get_ldnumber+0x76>
			tp = *path;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	1c5a      	adds	r2, r3, #1
 8006f1a:	60fa      	str	r2, [r7, #12]
 8006f1c:	781b      	ldrb	r3, [r3, #0]
 8006f1e:	3b30      	subs	r3, #48	; 0x30
 8006f20:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	2b09      	cmp	r3, #9
 8006f26:	d80e      	bhi.n	8006f46 <get_ldnumber+0x72>
 8006f28:	68fa      	ldr	r2, [r7, #12]
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d10a      	bne.n	8006f46 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d107      	bne.n	8006f46 <get_ldnumber+0x72>
					vol = (int)i;
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	3301      	adds	r3, #1
 8006f3e:	617b      	str	r3, [r7, #20]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	697a      	ldr	r2, [r7, #20]
 8006f44:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	e002      	b.n	8006f50 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006f4e:	693b      	ldr	r3, [r7, #16]
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	371c      	adds	r7, #28
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bc80      	pop	{r7}
 8006f58:	4770      	bx	lr
	...

08006f5c <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b082      	sub	sp, #8
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f04f 32ff 	mov.w	r2, #4294967295
 8006f74:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8006f78:	6839      	ldr	r1, [r7, #0]
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f7fe fc81 	bl	8005882 <move_window>
 8006f80:	4603      	mov	r3, r0
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d001      	beq.n	8006f8a <check_fs+0x2e>
		return 3;
 8006f86:	2303      	movs	r3, #3
 8006f88:	e01e      	b.n	8006fc8 <check_fs+0x6c>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006f90:	881b      	ldrh	r3, [r3, #0]
 8006f92:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d001      	beq.n	8006f9e <check_fs+0x42>
		return 2;
 8006f9a:	2302      	movs	r3, #2
 8006f9c:	e014      	b.n	8006fc8 <check_fs+0x6c>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	3336      	adds	r3, #54	; 0x36
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006fa8:	4a09      	ldr	r2, [pc, #36]	; (8006fd0 <check_fs+0x74>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d101      	bne.n	8006fb2 <check_fs+0x56>
		return 0;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	e00a      	b.n	8006fc8 <check_fs+0x6c>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	3352      	adds	r3, #82	; 0x52
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006fbc:	4a04      	ldr	r2, [pc, #16]	; (8006fd0 <check_fs+0x74>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d101      	bne.n	8006fc6 <check_fs+0x6a>
		return 0;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	e000      	b.n	8006fc8 <check_fs+0x6c>

	return 1;
 8006fc6:	2301      	movs	r3, #1
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3708      	adds	r7, #8
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}
 8006fd0:	00544146 	.word	0x00544146

08006fd4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b096      	sub	sp, #88	; 0x58
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	60f8      	str	r0, [r7, #12]
 8006fdc:	60b9      	str	r1, [r7, #8]
 8006fde:	4613      	mov	r3, r2
 8006fe0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006fe8:	68b8      	ldr	r0, [r7, #8]
 8006fea:	f7ff ff73 	bl	8006ed4 <get_ldnumber>
 8006fee:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006ff0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	da01      	bge.n	8006ffa <find_volume+0x26>
 8006ff6:	230b      	movs	r3, #11
 8006ff8:	e211      	b.n	800741e <find_volume+0x44a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006ffa:	4aa2      	ldr	r2, [pc, #648]	; (8007284 <find_volume+0x2b0>)
 8006ffc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007002:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007006:	2b00      	cmp	r3, #0
 8007008:	d101      	bne.n	800700e <find_volume+0x3a>
 800700a:	230c      	movs	r3, #12
 800700c:	e207      	b.n	800741e <find_volume+0x44a>

	ENTER_FF(fs);						/* Lock the volume */
 800700e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007010:	f7fe fa0d 	bl	800542e <lock_fs>
 8007014:	4603      	mov	r3, r0
 8007016:	2b00      	cmp	r3, #0
 8007018:	d101      	bne.n	800701e <find_volume+0x4a>
 800701a:	230f      	movs	r3, #15
 800701c:	e1ff      	b.n	800741e <find_volume+0x44a>
	*rfs = fs;							/* Return pointer to the file system object */
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007022:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8007024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007026:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800702a:	2b00      	cmp	r3, #0
 800702c:	d01b      	beq.n	8007066 <find_volume+0x92>
		stat = disk_status(fs->drv);
 800702e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007030:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007034:	4618      	mov	r0, r3
 8007036:	f7fe f8d5 	bl	80051e4 <disk_status>
 800703a:	4603      	mov	r3, r0
 800703c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007040:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007044:	f003 0301 	and.w	r3, r3, #1
 8007048:	2b00      	cmp	r3, #0
 800704a:	d10c      	bne.n	8007066 <find_volume+0x92>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800704c:	79fb      	ldrb	r3, [r7, #7]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d007      	beq.n	8007062 <find_volume+0x8e>
 8007052:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007056:	f003 0304 	and.w	r3, r3, #4
 800705a:	2b00      	cmp	r3, #0
 800705c:	d001      	beq.n	8007062 <find_volume+0x8e>
				return FR_WRITE_PROTECTED;
 800705e:	230a      	movs	r3, #10
 8007060:	e1dd      	b.n	800741e <find_volume+0x44a>
			return FR_OK;				/* The file system object is valid */
 8007062:	2300      	movs	r3, #0
 8007064:	e1db      	b.n	800741e <find_volume+0x44a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007068:	2200      	movs	r2, #0
 800706a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800706e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007070:	b2da      	uxtb	r2, r3
 8007072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007074:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800707a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800707e:	4618      	mov	r0, r3
 8007080:	f7fe f8ca 	bl	8005218 <disk_initialize>
 8007084:	4603      	mov	r3, r0
 8007086:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800708a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800708e:	f003 0301 	and.w	r3, r3, #1
 8007092:	2b00      	cmp	r3, #0
 8007094:	d001      	beq.n	800709a <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007096:	2303      	movs	r3, #3
 8007098:	e1c1      	b.n	800741e <find_volume+0x44a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800709a:	79fb      	ldrb	r3, [r7, #7]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d007      	beq.n	80070b0 <find_volume+0xdc>
 80070a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80070a4:	f003 0304 	and.w	r3, r3, #4
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d001      	beq.n	80070b0 <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 80070ac:	230a      	movs	r3, #10
 80070ae:	e1b6      	b.n	800741e <find_volume+0x44a>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 80070b0:	2300      	movs	r3, #0
 80070b2:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 80070b4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80070b6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80070b8:	f7ff ff50 	bl	8006f5c <check_fs>
 80070bc:	4603      	mov	r3, r0
 80070be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 80070c2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	d146      	bne.n	8007158 <find_volume+0x184>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80070ca:	2300      	movs	r3, #0
 80070cc:	643b      	str	r3, [r7, #64]	; 0x40
 80070ce:	e01a      	b.n	8007106 <find_volume+0x132>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 80070d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80070d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070d4:	011b      	lsls	r3, r3, #4
 80070d6:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80070da:	4413      	add	r3, r2
 80070dc:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 80070de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e0:	3304      	adds	r3, #4
 80070e2:	781b      	ldrb	r3, [r3, #0]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d003      	beq.n	80070f0 <find_volume+0x11c>
 80070e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ea:	3308      	adds	r3, #8
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	e000      	b.n	80070f2 <find_volume+0x11e>
 80070f0:	2200      	movs	r2, #0
 80070f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070f4:	009b      	lsls	r3, r3, #2
 80070f6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80070fa:	440b      	add	r3, r1
 80070fc:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8007100:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007102:	3301      	adds	r3, #1
 8007104:	643b      	str	r3, [r7, #64]	; 0x40
 8007106:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007108:	2b03      	cmp	r3, #3
 800710a:	d9e1      	bls.n	80070d0 <find_volume+0xfc>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800710c:	2300      	movs	r3, #0
 800710e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007110:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007112:	2b00      	cmp	r3, #0
 8007114:	d002      	beq.n	800711c <find_volume+0x148>
 8007116:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007118:	3b01      	subs	r3, #1
 800711a:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800711c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800711e:	009b      	lsls	r3, r3, #2
 8007120:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8007124:	4413      	add	r3, r2
 8007126:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800712a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800712c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800712e:	2b00      	cmp	r3, #0
 8007130:	d005      	beq.n	800713e <find_volume+0x16a>
 8007132:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007134:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007136:	f7ff ff11 	bl	8006f5c <check_fs>
 800713a:	4603      	mov	r3, r0
 800713c:	e000      	b.n	8007140 <find_volume+0x16c>
 800713e:	2302      	movs	r3, #2
 8007140:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8007144:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007148:	2b00      	cmp	r3, #0
 800714a:	d005      	beq.n	8007158 <find_volume+0x184>
 800714c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800714e:	3301      	adds	r3, #1
 8007150:	643b      	str	r3, [r7, #64]	; 0x40
 8007152:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007154:	2b03      	cmp	r3, #3
 8007156:	d9e1      	bls.n	800711c <find_volume+0x148>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007158:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800715c:	2b03      	cmp	r3, #3
 800715e:	d101      	bne.n	8007164 <find_volume+0x190>
 8007160:	2301      	movs	r3, #1
 8007162:	e15c      	b.n	800741e <find_volume+0x44a>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8007164:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007168:	2b00      	cmp	r3, #0
 800716a:	d001      	beq.n	8007170 <find_volume+0x19c>
 800716c:	230d      	movs	r3, #13
 800716e:	e156      	b.n	800741e <find_volume+0x44a>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007172:	330b      	adds	r3, #11
 8007174:	881b      	ldrh	r3, [r3, #0]
 8007176:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800717a:	d001      	beq.n	8007180 <find_volume+0x1ac>
		return FR_NO_FILESYSTEM;
 800717c:	230d      	movs	r3, #13
 800717e:	e14e      	b.n	800741e <find_volume+0x44a>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8007180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007182:	3316      	adds	r3, #22
 8007184:	881b      	ldrh	r3, [r3, #0]
 8007186:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8007188:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800718a:	2b00      	cmp	r3, #0
 800718c:	d103      	bne.n	8007196 <find_volume+0x1c2>
 800718e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007190:	3324      	adds	r3, #36	; 0x24
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8007196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007198:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800719a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800719e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a0:	7c1a      	ldrb	r2, [r3, #16]
 80071a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a4:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 80071a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071aa:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 80071ae:	2b01      	cmp	r3, #1
 80071b0:	d006      	beq.n	80071c0 <find_volume+0x1ec>
 80071b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071b4:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 80071b8:	2b02      	cmp	r3, #2
 80071ba:	d001      	beq.n	80071c0 <find_volume+0x1ec>
		return FR_NO_FILESYSTEM;
 80071bc:	230d      	movs	r3, #13
 80071be:	e12e      	b.n	800741e <find_volume+0x44a>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 80071c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071c2:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 80071c6:	461a      	mov	r2, r3
 80071c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071ca:	fb02 f303 	mul.w	r3, r2, r3
 80071ce:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 80071d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071d2:	7b5a      	ldrb	r2, [r3, #13]
 80071d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071d6:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 80071da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071dc:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d00a      	beq.n	80071fa <find_volume+0x226>
 80071e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071e6:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80071ea:	461a      	mov	r2, r3
 80071ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ee:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80071f2:	3b01      	subs	r3, #1
 80071f4:	4013      	ands	r3, r2
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d001      	beq.n	80071fe <find_volume+0x22a>
		return FR_NO_FILESYSTEM;
 80071fa:	230d      	movs	r3, #13
 80071fc:	e10f      	b.n	800741e <find_volume+0x44a>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 80071fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007200:	3311      	adds	r3, #17
 8007202:	881a      	ldrh	r2, [r3, #0]
 8007204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007206:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800720a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800720c:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8007210:	f003 030f 	and.w	r3, r3, #15
 8007214:	b29b      	uxth	r3, r3
 8007216:	2b00      	cmp	r3, #0
 8007218:	d001      	beq.n	800721e <find_volume+0x24a>
		return FR_NO_FILESYSTEM;
 800721a:	230d      	movs	r3, #13
 800721c:	e0ff      	b.n	800741e <find_volume+0x44a>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800721e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007220:	3313      	adds	r3, #19
 8007222:	881b      	ldrh	r3, [r3, #0]
 8007224:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8007226:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007228:	2b00      	cmp	r3, #0
 800722a:	d103      	bne.n	8007234 <find_volume+0x260>
 800722c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800722e:	3320      	adds	r3, #32
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8007234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007236:	330e      	adds	r3, #14
 8007238:	881b      	ldrh	r3, [r3, #0]
 800723a:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800723c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800723e:	2b00      	cmp	r3, #0
 8007240:	d101      	bne.n	8007246 <find_volume+0x272>
 8007242:	230d      	movs	r3, #13
 8007244:	e0eb      	b.n	800741e <find_volume+0x44a>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8007246:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007248:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800724a:	4413      	add	r3, r2
 800724c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800724e:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 8007252:	0912      	lsrs	r2, r2, #4
 8007254:	b292      	uxth	r2, r2
 8007256:	4413      	add	r3, r2
 8007258:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800725a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800725c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800725e:	429a      	cmp	r2, r3
 8007260:	d201      	bcs.n	8007266 <find_volume+0x292>
 8007262:	230d      	movs	r3, #13
 8007264:	e0db      	b.n	800741e <find_volume+0x44a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8007266:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800726a:	1ad3      	subs	r3, r2, r3
 800726c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800726e:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8007272:	fbb3 f3f2 	udiv	r3, r3, r2
 8007276:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8007278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800727a:	2b00      	cmp	r3, #0
 800727c:	d104      	bne.n	8007288 <find_volume+0x2b4>
 800727e:	230d      	movs	r3, #13
 8007280:	e0cd      	b.n	800741e <find_volume+0x44a>
 8007282:	bf00      	nop
 8007284:	20000334 	.word	0x20000334
	fmt = FS_FAT12;
 8007288:	2301      	movs	r3, #1
 800728a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800728e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007290:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007294:	4293      	cmp	r3, r2
 8007296:	d902      	bls.n	800729e <find_volume+0x2ca>
 8007298:	2302      	movs	r3, #2
 800729a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800729e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d902      	bls.n	80072ae <find_volume+0x2da>
 80072a8:	2303      	movs	r3, #3
 80072aa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 80072ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b0:	1c9a      	adds	r2, r3, #2
 80072b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072b4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
	fs->volbase = bsect;								/* Volume start sector */
 80072b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80072bc:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 80072c0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80072c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072c4:	441a      	add	r2, r3
 80072c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072c8:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
	fs->database = bsect + sysect;						/* Data start sector */
 80072cc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80072ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d0:	441a      	add	r2, r3
 80072d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072d4:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (fmt == FS_FAT32) {
 80072d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80072dc:	2b03      	cmp	r3, #3
 80072de:	d112      	bne.n	8007306 <find_volume+0x332>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 80072e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072e2:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d001      	beq.n	80072ee <find_volume+0x31a>
 80072ea:	230d      	movs	r3, #13
 80072ec:	e097      	b.n	800741e <find_volume+0x44a>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 80072ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072f0:	332c      	adds	r3, #44	; 0x2c
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072f6:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 80072fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072fc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007300:	009b      	lsls	r3, r3, #2
 8007302:	647b      	str	r3, [r7, #68]	; 0x44
 8007304:	e025      	b.n	8007352 <find_volume+0x37e>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8007306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007308:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800730c:	2b00      	cmp	r3, #0
 800730e:	d101      	bne.n	8007314 <find_volume+0x340>
 8007310:	230d      	movs	r3, #13
 8007312:	e084      	b.n	800741e <find_volume+0x44a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8007314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007316:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 800731a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800731c:	441a      	add	r2, r3
 800731e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007320:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007324:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007328:	2b02      	cmp	r3, #2
 800732a:	d104      	bne.n	8007336 <find_volume+0x362>
 800732c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800732e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007332:	005b      	lsls	r3, r3, #1
 8007334:	e00c      	b.n	8007350 <find_volume+0x37c>
 8007336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007338:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800733c:	4613      	mov	r3, r2
 800733e:	005b      	lsls	r3, r3, #1
 8007340:	4413      	add	r3, r2
 8007342:	085a      	lsrs	r2, r3, #1
 8007344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007346:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800734a:	f003 0301 	and.w	r3, r3, #1
 800734e:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8007350:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8007352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007354:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8007358:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800735a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800735e:	0a5b      	lsrs	r3, r3, #9
 8007360:	429a      	cmp	r2, r3
 8007362:	d201      	bcs.n	8007368 <find_volume+0x394>
		return FR_NO_FILESYSTEM;
 8007364:	230d      	movs	r3, #13
 8007366:	e05a      	b.n	800741e <find_volume+0x44a>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8007368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800736a:	f04f 32ff 	mov.w	r2, #4294967295
 800736e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8007372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007374:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800737a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800737e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007380:	2280      	movs	r2, #128	; 0x80
 8007382:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8007386:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800738a:	2b03      	cmp	r3, #3
 800738c:	d133      	bne.n	80073f6 <find_volume+0x422>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800738e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007390:	3330      	adds	r3, #48	; 0x30
 8007392:	881b      	ldrh	r3, [r3, #0]
 8007394:	2b01      	cmp	r3, #1
 8007396:	d12e      	bne.n	80073f6 <find_volume+0x422>
		&& move_window(fs, bsect + 1) == FR_OK)
 8007398:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800739a:	3301      	adds	r3, #1
 800739c:	4619      	mov	r1, r3
 800739e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80073a0:	f7fe fa6f 	bl	8005882 <move_window>
 80073a4:	4603      	mov	r3, r0
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d125      	bne.n	80073f6 <find_volume+0x422>
	{
		fs->fsi_flag = 0;
 80073aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ac:	2200      	movs	r2, #0
 80073ae:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80073b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073b4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80073b8:	881b      	ldrh	r3, [r3, #0]
 80073ba:	f64a 2255 	movw	r2, #43605	; 0xaa55
 80073be:	4293      	cmp	r3, r2
 80073c0:	d119      	bne.n	80073f6 <find_volume+0x422>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 80073c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a18      	ldr	r2, [pc, #96]	; (8007428 <find_volume+0x454>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d114      	bne.n	80073f6 <find_volume+0x422>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 80073cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ce:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a15      	ldr	r2, [pc, #84]	; (800742c <find_volume+0x458>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d10d      	bne.n	80073f6 <find_volume+0x422>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 80073da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073dc:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80073e0:	681a      	ldr	r2, [r3, #0]
 80073e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 80073e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ea:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80073ee:	681a      	ldr	r2, [r3, #0]
 80073f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 80073f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f8:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80073fc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 8007400:	4b0b      	ldr	r3, [pc, #44]	; (8007430 <find_volume+0x45c>)
 8007402:	881b      	ldrh	r3, [r3, #0]
 8007404:	3301      	adds	r3, #1
 8007406:	b29a      	uxth	r2, r3
 8007408:	4b09      	ldr	r3, [pc, #36]	; (8007430 <find_volume+0x45c>)
 800740a:	801a      	strh	r2, [r3, #0]
 800740c:	4b08      	ldr	r3, [pc, #32]	; (8007430 <find_volume+0x45c>)
 800740e:	881a      	ldrh	r2, [r3, #0]
 8007410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007412:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8007416:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007418:	f7fe f9c2 	bl	80057a0 <clear_lock>
#endif

	return FR_OK;
 800741c:	2300      	movs	r3, #0
}
 800741e:	4618      	mov	r0, r3
 8007420:	3758      	adds	r7, #88	; 0x58
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}
 8007426:	bf00      	nop
 8007428:	41615252 	.word	0x41615252
 800742c:	61417272 	.word	0x61417272
 8007430:	20000338 	.word	0x20000338

08007434 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b084      	sub	sp, #16
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d022      	beq.n	800748c <validate+0x58>
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800744c:	2b00      	cmp	r3, #0
 800744e:	d01d      	beq.n	800748c <validate+0x58>
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007456:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800745a:	2b00      	cmp	r3, #0
 800745c:	d016      	beq.n	800748c <validate+0x58>
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007464:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 800746e:	429a      	cmp	r2, r3
 8007470:	d10c      	bne.n	800748c <validate+0x58>
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007478:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800747c:	4618      	mov	r0, r3
 800747e:	f7fd feb1 	bl	80051e4 <disk_status>
 8007482:	4603      	mov	r3, r0
 8007484:	f003 0301 	and.w	r3, r3, #1
 8007488:	2b00      	cmp	r3, #0
 800748a:	d001      	beq.n	8007490 <validate+0x5c>
		return FR_INVALID_OBJECT;
 800748c:	2309      	movs	r3, #9
 800748e:	e00b      	b.n	80074a8 <validate+0x74>

	ENTER_FF(fil->fs);		/* Lock file system */
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007496:	4618      	mov	r0, r3
 8007498:	f7fd ffc9 	bl	800542e <lock_fs>
 800749c:	4603      	mov	r3, r0
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d101      	bne.n	80074a6 <validate+0x72>
 80074a2:	230f      	movs	r3, #15
 80074a4:	e000      	b.n	80074a8 <validate+0x74>

	return FR_OK;
 80074a6:	2300      	movs	r3, #0
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3710      	adds	r7, #16
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}

080074b0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b088      	sub	sp, #32
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	60f8      	str	r0, [r7, #12]
 80074b8:	60b9      	str	r1, [r7, #8]
 80074ba:	4613      	mov	r3, r2
 80074bc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 80074c2:	f107 0310 	add.w	r3, r7, #16
 80074c6:	4618      	mov	r0, r3
 80074c8:	f7ff fd04 	bl	8006ed4 <get_ldnumber>
 80074cc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80074ce:	69fb      	ldr	r3, [r7, #28]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	da01      	bge.n	80074d8 <f_mount+0x28>
 80074d4:	230b      	movs	r3, #11
 80074d6:	e04c      	b.n	8007572 <f_mount+0xc2>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80074d8:	4a28      	ldr	r2, [pc, #160]	; (800757c <f_mount+0xcc>)
 80074da:	69fb      	ldr	r3, [r7, #28]
 80074dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074e0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80074e2:	69bb      	ldr	r3, [r7, #24]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d011      	beq.n	800750c <f_mount+0x5c>
#if _FS_LOCK
		clear_lock(cfs);
 80074e8:	69b8      	ldr	r0, [r7, #24]
 80074ea:	f7fe f959 	bl	80057a0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 80074ee:	69bb      	ldr	r3, [r7, #24]
 80074f0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80074f4:	4618      	mov	r0, r3
 80074f6:	f000 fedf 	bl	80082b8 <ff_del_syncobj>
 80074fa:	4603      	mov	r3, r0
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d101      	bne.n	8007504 <f_mount+0x54>
 8007500:	2302      	movs	r3, #2
 8007502:	e036      	b.n	8007572 <f_mount+0xc2>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007504:	69bb      	ldr	r3, [r7, #24]
 8007506:	2200      	movs	r2, #0
 8007508:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d011      	beq.n	8007536 <f_mount+0x86>
		fs->fs_type = 0;				/* Clear new fs object */
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2200      	movs	r2, #0
 8007516:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800751a:	69fb      	ldr	r3, [r7, #28]
 800751c:	b2da      	uxtb	r2, r3
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8007524:	4619      	mov	r1, r3
 8007526:	4610      	mov	r0, r2
 8007528:	f000 fea6 	bl	8008278 <ff_cre_syncobj>
 800752c:	4603      	mov	r3, r0
 800752e:	2b00      	cmp	r3, #0
 8007530:	d101      	bne.n	8007536 <f_mount+0x86>
 8007532:	2302      	movs	r3, #2
 8007534:	e01d      	b.n	8007572 <f_mount+0xc2>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007536:	68fa      	ldr	r2, [r7, #12]
 8007538:	4910      	ldr	r1, [pc, #64]	; (800757c <f_mount+0xcc>)
 800753a:	69fb      	ldr	r3, [r7, #28]
 800753c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d002      	beq.n	800754c <f_mount+0x9c>
 8007546:	79fb      	ldrb	r3, [r7, #7]
 8007548:	2b01      	cmp	r3, #1
 800754a:	d001      	beq.n	8007550 <f_mount+0xa0>
 800754c:	2300      	movs	r3, #0
 800754e:	e010      	b.n	8007572 <f_mount+0xc2>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8007550:	f107 0108 	add.w	r1, r7, #8
 8007554:	f107 030c 	add.w	r3, r7, #12
 8007558:	2200      	movs	r2, #0
 800755a:	4618      	mov	r0, r3
 800755c:	f7ff fd3a 	bl	8006fd4 <find_volume>
 8007560:	4603      	mov	r3, r0
 8007562:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	7dfa      	ldrb	r2, [r7, #23]
 8007568:	4611      	mov	r1, r2
 800756a:	4618      	mov	r0, r3
 800756c:	f7fd ff6e 	bl	800544c <unlock_fs>
 8007570:	7dfb      	ldrb	r3, [r7, #23]
}
 8007572:	4618      	mov	r0, r3
 8007574:	3720      	adds	r7, #32
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}
 800757a:	bf00      	nop
 800757c:	20000334 	.word	0x20000334

08007580 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 8007586:	af00      	add	r7, sp, #0
 8007588:	f107 030c 	add.w	r3, r7, #12
 800758c:	6018      	str	r0, [r3, #0]
 800758e:	f107 0308 	add.w	r3, r7, #8
 8007592:	6019      	str	r1, [r3, #0]
 8007594:	1dfb      	adds	r3, r7, #7
 8007596:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8007598:	f107 030c 	add.w	r3, r7, #12
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d101      	bne.n	80075a6 <f_open+0x26>
 80075a2:	2309      	movs	r3, #9
 80075a4:	e1dd      	b.n	8007962 <f_open+0x3e2>
	fp->fs = 0;			/* Clear file object */
 80075a6:	f107 030c 	add.w	r3, r7, #12
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	2200      	movs	r2, #0
 80075ae:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 80075b2:	1dfb      	adds	r3, r7, #7
 80075b4:	1dfa      	adds	r2, r7, #7
 80075b6:	7812      	ldrb	r2, [r2, #0]
 80075b8:	f002 021f 	and.w	r2, r2, #31
 80075bc:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 80075be:	1dfb      	adds	r3, r7, #7
 80075c0:	781b      	ldrb	r3, [r3, #0]
 80075c2:	f023 0301 	bic.w	r3, r3, #1
 80075c6:	b2da      	uxtb	r2, r3
 80075c8:	f107 0108 	add.w	r1, r7, #8
 80075cc:	f107 031c 	add.w	r3, r7, #28
 80075d0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80075d4:	4618      	mov	r0, r3
 80075d6:	f7ff fcfd 	bl	8006fd4 <find_volume>
 80075da:	4603      	mov	r3, r0
 80075dc:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 80075e0:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	f040 81b0 	bne.w	800794a <f_open+0x3ca>
		INIT_BUF(dj);
 80075ea:	f44f 7000 	mov.w	r0, #512	; 0x200
 80075ee:	f000 fe8f 	bl	8008310 <ff_memalloc>
 80075f2:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 80075f6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d109      	bne.n	8007612 <f_open+0x92>
 80075fe:	f107 031c 	add.w	r3, r7, #28
 8007602:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007606:	2111      	movs	r1, #17
 8007608:	4618      	mov	r0, r3
 800760a:	f7fd ff1f 	bl	800544c <unlock_fs>
 800760e:	2311      	movs	r3, #17
 8007610:	e1a7      	b.n	8007962 <f_open+0x3e2>
 8007612:	f107 031c 	add.w	r3, r7, #28
 8007616:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 800761a:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
 800761e:	f107 031c 	add.w	r3, r7, #28
 8007622:	f107 0210 	add.w	r2, r7, #16
 8007626:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 800762a:	f107 0308 	add.w	r3, r7, #8
 800762e:	681a      	ldr	r2, [r3, #0]
 8007630:	f107 031c 	add.w	r3, r7, #28
 8007634:	4611      	mov	r1, r2
 8007636:	4618      	mov	r0, r3
 8007638:	f7ff fbde 	bl	8006df8 <follow_path>
 800763c:	4603      	mov	r3, r0
 800763e:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
		dir = dj.dir;
 8007642:	f107 031c 	add.w	r3, r7, #28
 8007646:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800764a:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800764e:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 8007652:	2b00      	cmp	r3, #0
 8007654:	d11a      	bne.n	800768c <f_open+0x10c>
			if (!dir)	/* Default directory itself */
 8007656:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800765a:	2b00      	cmp	r3, #0
 800765c:	d103      	bne.n	8007666 <f_open+0xe6>
				res = FR_INVALID_NAME;
 800765e:	2306      	movs	r3, #6
 8007660:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
 8007664:	e012      	b.n	800768c <f_open+0x10c>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007666:	1dfb      	adds	r3, r7, #7
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	f023 0301 	bic.w	r3, r3, #1
 800766e:	2b00      	cmp	r3, #0
 8007670:	bf14      	ite	ne
 8007672:	2301      	movne	r3, #1
 8007674:	2300      	moveq	r3, #0
 8007676:	b2db      	uxtb	r3, r3
 8007678:	461a      	mov	r2, r3
 800767a:	f107 031c 	add.w	r3, r7, #28
 800767e:	4611      	mov	r1, r2
 8007680:	4618      	mov	r0, r3
 8007682:	f7fd ff03 	bl	800548c <chk_lock>
 8007686:	4603      	mov	r3, r0
 8007688:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800768c:	1dfb      	adds	r3, r7, #7
 800768e:	781b      	ldrb	r3, [r3, #0]
 8007690:	f003 031c 	and.w	r3, r3, #28
 8007694:	2b00      	cmp	r3, #0
 8007696:	f000 80a1 	beq.w	80077dc <f_open+0x25c>
			if (res != FR_OK) {					/* No file, create new */
 800769a:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d01f      	beq.n	80076e2 <f_open+0x162>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 80076a2:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 80076a6:	2b04      	cmp	r3, #4
 80076a8:	d10e      	bne.n	80076c8 <f_open+0x148>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80076aa:	f7fd ff5b 	bl	8005564 <enq_lock>
 80076ae:	4603      	mov	r3, r0
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d006      	beq.n	80076c2 <f_open+0x142>
 80076b4:	f107 031c 	add.w	r3, r7, #28
 80076b8:	4618      	mov	r0, r3
 80076ba:	f7ff f88d 	bl	80067d8 <dir_register>
 80076be:	4603      	mov	r3, r0
 80076c0:	e000      	b.n	80076c4 <f_open+0x144>
 80076c2:	2312      	movs	r3, #18
 80076c4:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80076c8:	1dfb      	adds	r3, r7, #7
 80076ca:	1dfa      	adds	r2, r7, #7
 80076cc:	7812      	ldrb	r2, [r2, #0]
 80076ce:	f042 0208 	orr.w	r2, r2, #8
 80076d2:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 80076d4:	f107 031c 	add.w	r3, r7, #28
 80076d8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80076dc:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 80076e0:	e014      	b.n	800770c <f_open+0x18c>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80076e2:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80076e6:	330b      	adds	r3, #11
 80076e8:	781b      	ldrb	r3, [r3, #0]
 80076ea:	f003 0311 	and.w	r3, r3, #17
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d003      	beq.n	80076fa <f_open+0x17a>
					res = FR_DENIED;
 80076f2:	2307      	movs	r3, #7
 80076f4:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
 80076f8:	e008      	b.n	800770c <f_open+0x18c>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 80076fa:	1dfb      	adds	r3, r7, #7
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	f003 0304 	and.w	r3, r3, #4
 8007702:	2b00      	cmp	r3, #0
 8007704:	d002      	beq.n	800770c <f_open+0x18c>
						res = FR_EXIST;
 8007706:	2308      	movs	r3, #8
 8007708:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800770c:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 8007710:	2b00      	cmp	r3, #0
 8007712:	f040 8084 	bne.w	800781e <f_open+0x29e>
 8007716:	1dfb      	adds	r3, r7, #7
 8007718:	781b      	ldrb	r3, [r3, #0]
 800771a:	f003 0308 	and.w	r3, r3, #8
 800771e:	2b00      	cmp	r3, #0
 8007720:	d07d      	beq.n	800781e <f_open+0x29e>
				dw = GET_FATTIME();				/* Created time */
 8007722:	f7fd fc87 	bl	8005034 <get_fattime>
 8007726:	f8c7 0248 	str.w	r0, [r7, #584]	; 0x248
				ST_DWORD(dir + DIR_CrtTime, dw);
 800772a:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800772e:	330e      	adds	r3, #14
 8007730:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8007734:	601a      	str	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8007736:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800773a:	330b      	adds	r3, #11
 800773c:	2200      	movs	r2, #0
 800773e:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8007740:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8007744:	331c      	adds	r3, #28
 8007746:	2200      	movs	r2, #0
 8007748:	601a      	str	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800774a:	f107 031c 	add.w	r3, r7, #28
 800774e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007752:	f8d7 1250 	ldr.w	r1, [r7, #592]	; 0x250
 8007756:	4618      	mov	r0, r3
 8007758:	f7fe fdc3 	bl	80062e2 <ld_clust>
 800775c:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
				st_clust(dir, 0);				/* cluster = 0 */
 8007760:	2100      	movs	r1, #0
 8007762:	f8d7 0250 	ldr.w	r0, [r7, #592]	; 0x250
 8007766:	f7fe fdd7 	bl	8006318 <st_clust>
				dj.fs->wflag = 1;
 800776a:	f107 031c 	add.w	r3, r7, #28
 800776e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007772:	2201      	movs	r2, #1
 8007774:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 8007778:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800777c:	2b00      	cmp	r3, #0
 800777e:	d04e      	beq.n	800781e <f_open+0x29e>
					dw = dj.fs->winsect;
 8007780:	f107 031c 	add.w	r3, r7, #28
 8007784:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007788:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 800778c:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
					res = remove_chain(dj.fs, cl);
 8007790:	f107 031c 	add.w	r3, r7, #28
 8007794:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007798:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 800779c:	4618      	mov	r0, r3
 800779e:	f7fe faa0 	bl	8005ce2 <remove_chain>
 80077a2:	4603      	mov	r3, r0
 80077a4:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
					if (res == FR_OK) {
 80077a8:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d136      	bne.n	800781e <f_open+0x29e>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 80077b0:	f107 031c 	add.w	r3, r7, #28
 80077b4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80077b8:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 80077bc:	3a01      	subs	r2, #1
 80077be:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
						res = move_window(dj.fs, dw);
 80077c2:	f107 031c 	add.w	r3, r7, #28
 80077c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80077ca:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 80077ce:	4618      	mov	r0, r3
 80077d0:	f7fe f857 	bl	8005882 <move_window>
 80077d4:	4603      	mov	r3, r0
 80077d6:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
 80077da:	e020      	b.n	800781e <f_open+0x29e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 80077dc:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d11c      	bne.n	800781e <f_open+0x29e>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 80077e4:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80077e8:	330b      	adds	r3, #11
 80077ea:	781b      	ldrb	r3, [r3, #0]
 80077ec:	f003 0310 	and.w	r3, r3, #16
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d003      	beq.n	80077fc <f_open+0x27c>
					res = FR_NO_FILE;
 80077f4:	2304      	movs	r3, #4
 80077f6:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
 80077fa:	e010      	b.n	800781e <f_open+0x29e>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 80077fc:	1dfb      	adds	r3, r7, #7
 80077fe:	781b      	ldrb	r3, [r3, #0]
 8007800:	f003 0302 	and.w	r3, r3, #2
 8007804:	2b00      	cmp	r3, #0
 8007806:	d00a      	beq.n	800781e <f_open+0x29e>
 8007808:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800780c:	330b      	adds	r3, #11
 800780e:	781b      	ldrb	r3, [r3, #0]
 8007810:	f003 0301 	and.w	r3, r3, #1
 8007814:	2b00      	cmp	r3, #0
 8007816:	d002      	beq.n	800781e <f_open+0x29e>
						res = FR_DENIED;
 8007818:	2307      	movs	r3, #7
 800781a:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
				}
			}
		}
		if (res == FR_OK) {
 800781e:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 8007822:	2b00      	cmp	r3, #0
 8007824:	d13d      	bne.n	80078a2 <f_open+0x322>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007826:	1dfb      	adds	r3, r7, #7
 8007828:	781b      	ldrb	r3, [r3, #0]
 800782a:	f003 0308 	and.w	r3, r3, #8
 800782e:	2b00      	cmp	r3, #0
 8007830:	d005      	beq.n	800783e <f_open+0x2be>
				mode |= FA__WRITTEN;
 8007832:	1dfb      	adds	r3, r7, #7
 8007834:	1dfa      	adds	r2, r7, #7
 8007836:	7812      	ldrb	r2, [r2, #0]
 8007838:	f042 0220 	orr.w	r2, r2, #32
 800783c:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800783e:	f107 031c 	add.w	r3, r7, #28
 8007842:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007846:	f8d3 2230 	ldr.w	r2, [r3, #560]	; 0x230
 800784a:	f107 030c 	add.w	r3, r7, #12
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			fp->dir_ptr = dir;
 8007854:	f107 030c 	add.w	r3, r7, #12
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 800785e:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007862:	1dfb      	adds	r3, r7, #7
 8007864:	781b      	ldrb	r3, [r3, #0]
 8007866:	f023 0301 	bic.w	r3, r3, #1
 800786a:	2b00      	cmp	r3, #0
 800786c:	bf14      	ite	ne
 800786e:	2301      	movne	r3, #1
 8007870:	2300      	moveq	r3, #0
 8007872:	b2db      	uxtb	r3, r3
 8007874:	461a      	mov	r2, r3
 8007876:	f107 031c 	add.w	r3, r7, #28
 800787a:	4611      	mov	r1, r2
 800787c:	4618      	mov	r0, r3
 800787e:	f7fd fe95 	bl	80055ac <inc_lock>
 8007882:	4602      	mov	r2, r0
 8007884:	f107 030c 	add.w	r3, r7, #12
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 800788e:	f107 030c 	add.w	r3, r7, #12
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8007898:	2b00      	cmp	r3, #0
 800789a:	d102      	bne.n	80078a2 <f_open+0x322>
 800789c:	2302      	movs	r3, #2
 800789e:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
				if (dir[DIR_Attr] & AM_DIR)	/* It is a directory */
					res = FR_NO_FILE;
			}
		}
#endif
		FREE_BUF();
 80078a2:	f8d7 024c 	ldr.w	r0, [r7, #588]	; 0x24c
 80078a6:	f000 fd3f 	bl	8008328 <ff_memfree>

		if (res == FR_OK) {
 80078aa:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d14b      	bne.n	800794a <f_open+0x3ca>
			fp->flag = mode;					/* File access mode */
 80078b2:	f107 030c 	add.w	r3, r7, #12
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	1dfa      	adds	r2, r7, #7
 80078ba:	7812      	ldrb	r2, [r2, #0]
 80078bc:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 80078c0:	f107 030c 	add.w	r3, r7, #12
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	2200      	movs	r2, #0
 80078c8:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 80078cc:	f107 031c 	add.w	r3, r7, #28
 80078d0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80078d4:	f8d7 1250 	ldr.w	r1, [r7, #592]	; 0x250
 80078d8:	4618      	mov	r0, r3
 80078da:	f7fe fd02 	bl	80062e2 <ld_clust>
 80078de:	4602      	mov	r2, r0
 80078e0:	f107 030c 	add.w	r3, r7, #12
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 80078ea:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80078ee:	331c      	adds	r3, #28
 80078f0:	681a      	ldr	r2, [r3, #0]
 80078f2:	f107 030c 	add.w	r3, r7, #12
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->fptr = 0;						/* File pointer */
 80078fc:	f107 030c 	add.w	r3, r7, #12
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	2200      	movs	r2, #0
 8007904:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			fp->dsect = 0;
 8007908:	f107 030c 	add.w	r3, r7, #12
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	2200      	movs	r2, #0
 8007910:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8007914:	f107 030c 	add.w	r3, r7, #12
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	2200      	movs	r2, #0
 800791c:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8007920:	f107 031c 	add.w	r3, r7, #28
 8007924:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007928:	f107 030c 	add.w	r3, r7, #12
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			fp->id = fp->fs->id;
 8007932:	f107 030c 	add.w	r3, r7, #12
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800793c:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8007940:	f107 030c 	add.w	r3, r7, #12
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 800794a:	f107 031c 	add.w	r3, r7, #28
 800794e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007952:	f897 2257 	ldrb.w	r2, [r7, #599]	; 0x257
 8007956:	4611      	mov	r1, r2
 8007958:	4618      	mov	r0, r3
 800795a:	f7fd fd77 	bl	800544c <unlock_fs>
 800795e:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
}
 8007962:	4618      	mov	r0, r3
 8007964:	f507 7716 	add.w	r7, r7, #600	; 0x258
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}

0800796c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b08a      	sub	sp, #40	; 0x28
 8007970:	af00      	add	r7, sp, #0
 8007972:	60f8      	str	r0, [r7, #12]
 8007974:	60b9      	str	r1, [r7, #8]
 8007976:	607a      	str	r2, [r7, #4]
 8007978:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	2200      	movs	r2, #0
 8007982:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8007984:	68f8      	ldr	r0, [r7, #12]
 8007986:	f7ff fd55 	bl	8007434 <validate>
 800798a:	4603      	mov	r3, r0
 800798c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800798e:	7dfb      	ldrb	r3, [r7, #23]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d009      	beq.n	80079a8 <f_write+0x3c>
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800799a:	7dfa      	ldrb	r2, [r7, #23]
 800799c:	4611      	mov	r1, r2
 800799e:	4618      	mov	r0, r3
 80079a0:	f7fd fd54 	bl	800544c <unlock_fs>
 80079a4:	7dfb      	ldrb	r3, [r7, #23]
 80079a6:	e1d4      	b.n	8007d52 <f_write+0x3e6>
	if (fp->err)							/* Check error */
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d00d      	beq.n	80079ce <f_write+0x62>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 80079be:	4619      	mov	r1, r3
 80079c0:	4610      	mov	r0, r2
 80079c2:	f7fd fd43 	bl	800544c <unlock_fs>
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 80079cc:	e1c1      	b.n	8007d52 <f_write+0x3e6>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80079d4:	f003 0302 	and.w	r3, r3, #2
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d108      	bne.n	80079ee <f_write+0x82>
		LEAVE_FF(fp->fs, FR_DENIED);
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80079e2:	2107      	movs	r1, #7
 80079e4:	4618      	mov	r0, r3
 80079e6:	f7fd fd31 	bl	800544c <unlock_fs>
 80079ea:	2307      	movs	r3, #7
 80079ec:	e1b1      	b.n	8007d52 <f_write+0x3e6>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	441a      	add	r2, r3
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80079fe:	429a      	cmp	r2, r3
 8007a00:	f080 8182 	bcs.w	8007d08 <f_write+0x39c>
 8007a04:	2300      	movs	r3, #0
 8007a06:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8007a08:	e17e      	b.n	8007d08 <f_write+0x39c>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007a10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	f040 813e 	bne.w	8007c96 <f_write+0x32a>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007a20:	0a5b      	lsrs	r3, r3, #9
 8007a22:	b2da      	uxtb	r2, r3
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007a2a:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8007a2e:	3b01      	subs	r3, #1
 8007a30:	b2db      	uxtb	r3, r3
 8007a32:	4013      	ands	r3, r2
 8007a34:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 8007a36:	7dbb      	ldrb	r3, [r7, #22]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d15f      	bne.n	8007afc <f_write+0x190>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d10f      	bne.n	8007a66 <f_write+0xfa>
					clst = fp->sclust;		/* Follow from the origin */
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007a4c:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8007a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d121      	bne.n	8007a98 <f_write+0x12c>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007a5a:	2100      	movs	r1, #0
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f7fe f99a 	bl	8005d96 <create_chain>
 8007a62:	6278      	str	r0, [r7, #36]	; 0x24
 8007a64:	e018      	b.n	8007a98 <f_write+0x12c>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d008      	beq.n	8007a82 <f_write+0x116>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007a76:	4619      	mov	r1, r3
 8007a78:	68f8      	ldr	r0, [r7, #12]
 8007a7a:	f7fe fa29 	bl	8005ed0 <clmt_clust>
 8007a7e:	6278      	str	r0, [r7, #36]	; 0x24
 8007a80:	e00a      	b.n	8007a98 <f_write+0x12c>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007a8e:	4619      	mov	r1, r3
 8007a90:	4610      	mov	r0, r2
 8007a92:	f7fe f980 	bl	8005d96 <create_chain>
 8007a96:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	f000 8139 	beq.w	8007d12 <f_write+0x3a6>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8007aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa2:	2b01      	cmp	r3, #1
 8007aa4:	d10c      	bne.n	8007ac0 <f_write+0x154>
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2202      	movs	r2, #2
 8007aaa:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007ab4:	2102      	movs	r1, #2
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f7fd fcc8 	bl	800544c <unlock_fs>
 8007abc:	2302      	movs	r3, #2
 8007abe:	e148      	b.n	8007d52 <f_write+0x3e6>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8007ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ac6:	d10c      	bne.n	8007ae2 <f_write+0x176>
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2201      	movs	r2, #1
 8007acc:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007ad6:	2101      	movs	r1, #1
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f7fd fcb7 	bl	800544c <unlock_fs>
 8007ade:	2301      	movs	r3, #1
 8007ae0:	e137      	b.n	8007d52 <f_write+0x3e6>
				fp->clust = clst;			/* Update current cluster */
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ae6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d103      	bne.n	8007afc <f_write+0x190>
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007af8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d024      	beq.n	8007b54 <f_write+0x1e8>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007b10:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8007b14:	68f9      	ldr	r1, [r7, #12]
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	f7fd fbc1 	bl	80052a4 <disk_write>
 8007b22:	4603      	mov	r3, r0
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d00c      	beq.n	8007b42 <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007b36:	2101      	movs	r1, #1
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f7fd fc87 	bl	800544c <unlock_fs>
 8007b3e:	2301      	movs	r3, #1
 8007b40:	e107      	b.n	8007d52 <f_write+0x3e6>
				fp->flag &= ~FA__DIRTY;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007b48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b4c:	b2da      	uxtb	r2, r3
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007b60:	4619      	mov	r1, r3
 8007b62:	4610      	mov	r0, r2
 8007b64:	f7fd ff20 	bl	80059a8 <clust2sect>
 8007b68:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d10c      	bne.n	8007b8a <f_write+0x21e>
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	2202      	movs	r2, #2
 8007b74:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007b7e:	2102      	movs	r1, #2
 8007b80:	4618      	mov	r0, r3
 8007b82:	f7fd fc63 	bl	800544c <unlock_fs>
 8007b86:	2302      	movs	r3, #2
 8007b88:	e0e3      	b.n	8007d52 <f_write+0x3e6>
			sect += csect;
 8007b8a:	7dbb      	ldrb	r3, [r7, #22]
 8007b8c:	693a      	ldr	r2, [r7, #16]
 8007b8e:	4413      	add	r3, r2
 8007b90:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	0a5b      	lsrs	r3, r3, #9
 8007b96:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007b98:	69fb      	ldr	r3, [r7, #28]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d04f      	beq.n	8007c3e <f_write+0x2d2>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8007b9e:	7dba      	ldrb	r2, [r7, #22]
 8007ba0:	69fb      	ldr	r3, [r7, #28]
 8007ba2:	4413      	add	r3, r2
 8007ba4:	68fa      	ldr	r2, [r7, #12]
 8007ba6:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8007baa:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d908      	bls.n	8007bc4 <f_write+0x258>
					cc = fp->fs->csize - csect;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007bb8:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8007bbc:	461a      	mov	r2, r3
 8007bbe:	7dbb      	ldrb	r3, [r7, #22]
 8007bc0:	1ad3      	subs	r3, r2, r3
 8007bc2:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007bca:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8007bce:	69fb      	ldr	r3, [r7, #28]
 8007bd0:	693a      	ldr	r2, [r7, #16]
 8007bd2:	69b9      	ldr	r1, [r7, #24]
 8007bd4:	f7fd fb66 	bl	80052a4 <disk_write>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d00c      	beq.n	8007bf8 <f_write+0x28c>
					ABORT(fp->fs, FR_DISK_ERR);
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2201      	movs	r2, #1
 8007be2:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007bec:	2101      	movs	r1, #1
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f7fd fc2c 	bl	800544c <unlock_fs>
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	e0ac      	b.n	8007d52 <f_write+0x3e6>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	1ad3      	subs	r3, r2, r3
 8007c02:	69fa      	ldr	r2, [r7, #28]
 8007c04:	429a      	cmp	r2, r3
 8007c06:	d916      	bls.n	8007c36 <f_write+0x2ca>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8007c08:	68f8      	ldr	r0, [r7, #12]
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	1ad3      	subs	r3, r2, r3
 8007c14:	025b      	lsls	r3, r3, #9
 8007c16:	69ba      	ldr	r2, [r7, #24]
 8007c18:	4413      	add	r3, r2
 8007c1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c1e:	4619      	mov	r1, r3
 8007c20:	f7fd fb7e 	bl	8005320 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007c2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c2e:	b2da      	uxtb	r2, r3
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8007c36:	69fb      	ldr	r3, [r7, #28]
 8007c38:	025b      	lsls	r3, r3, #9
 8007c3a:	623b      	str	r3, [r7, #32]
				continue;
 8007c3c:	e04e      	b.n	8007cdc <f_write+0x370>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007c44:	693a      	ldr	r2, [r7, #16]
 8007c46:	429a      	cmp	r2, r3
 8007c48:	d021      	beq.n	8007c8e <f_write+0x322>
				if (fp->fptr < fp->fsize &&
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8007c56:	429a      	cmp	r2, r3
 8007c58:	d219      	bcs.n	8007c8e <f_write+0x322>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007c60:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8007c64:	68f9      	ldr	r1, [r7, #12]
 8007c66:	2301      	movs	r3, #1
 8007c68:	693a      	ldr	r2, [r7, #16]
 8007c6a:	f7fd fafb 	bl	8005264 <disk_read>
 8007c6e:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d00c      	beq.n	8007c8e <f_write+0x322>
						ABORT(fp->fs, FR_DISK_ERR);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	2201      	movs	r2, #1
 8007c78:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007c82:	2101      	movs	r1, #1
 8007c84:	4618      	mov	r0, r3
 8007c86:	f7fd fbe1 	bl	800544c <unlock_fs>
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	e061      	b.n	8007d52 <f_write+0x3e6>
			}
#endif
			fp->dsect = sect;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	693a      	ldr	r2, [r7, #16]
 8007c92:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007c9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ca0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8007ca4:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8007ca6:	6a3a      	ldr	r2, [r7, #32]
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	429a      	cmp	r2, r3
 8007cac:	d901      	bls.n	8007cb2 <f_write+0x346>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007cb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cbc:	68fa      	ldr	r2, [r7, #12]
 8007cbe:	4413      	add	r3, r2
 8007cc0:	6a3a      	ldr	r2, [r7, #32]
 8007cc2:	69b9      	ldr	r1, [r7, #24]
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	f7fd fb2b 	bl	8005320 <mem_cpy>
		fp->flag |= FA__DIRTY;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007cd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cd4:	b2da      	uxtb	r2, r3
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8007cdc:	69ba      	ldr	r2, [r7, #24]
 8007cde:	6a3b      	ldr	r3, [r7, #32]
 8007ce0:	4413      	add	r3, r2
 8007ce2:	61bb      	str	r3, [r7, #24]
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007cea:	6a3b      	ldr	r3, [r7, #32]
 8007cec:	441a      	add	r2, r3
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	681a      	ldr	r2, [r3, #0]
 8007cf8:	6a3b      	ldr	r3, [r7, #32]
 8007cfa:	441a      	add	r2, r3
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	601a      	str	r2, [r3, #0]
 8007d00:	687a      	ldr	r2, [r7, #4]
 8007d02:	6a3b      	ldr	r3, [r7, #32]
 8007d04:	1ad3      	subs	r3, r2, r3
 8007d06:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	f47f ae7d 	bne.w	8007a0a <f_write+0x9e>
 8007d10:	e000      	b.n	8007d14 <f_write+0x3a8>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007d12:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8007d20:	429a      	cmp	r2, r3
 8007d22:	d905      	bls.n	8007d30 <f_write+0x3c4>
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007d36:	f043 0320 	orr.w	r3, r3, #32
 8007d3a:	b2da      	uxtb	r2, r3
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206

	LEAVE_FF(fp->fs, FR_OK);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007d48:	2100      	movs	r1, #0
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f7fd fb7e 	bl	800544c <unlock_fs>
 8007d50:	2300      	movs	r3, #0
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	3728      	adds	r7, #40	; 0x28
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}

08007d5a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007d5a:	b580      	push	{r7, lr}
 8007d5c:	b086      	sub	sp, #24
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f7ff fb66 	bl	8007434 <validate>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007d6c:	7dfb      	ldrb	r3, [r7, #23]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d179      	bne.n	8007e66 <f_sync+0x10c>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007d78:	f003 0320 	and.w	r3, r3, #32
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d072      	beq.n	8007e66 <f_sync+0x10c>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d020      	beq.n	8007dd0 <f_sync+0x76>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007d94:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8007d98:	6879      	ldr	r1, [r7, #4]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8007da0:	2301      	movs	r3, #1
 8007da2:	f7fd fa7f 	bl	80052a4 <disk_write>
 8007da6:	4603      	mov	r3, r0
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d008      	beq.n	8007dbe <f_sync+0x64>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007db2:	2101      	movs	r1, #1
 8007db4:	4618      	mov	r0, r3
 8007db6:	f7fd fb49 	bl	800544c <unlock_fs>
 8007dba:	2301      	movs	r3, #1
 8007dbc:	e05c      	b.n	8007e78 <f_sync+0x11e>
				fp->flag &= ~FA__DIRTY;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007dc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007dc8:	b2da      	uxtb	r2, r3
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8007ddc:	4619      	mov	r1, r3
 8007dde:	4610      	mov	r0, r2
 8007de0:	f7fd fd4f 	bl	8005882 <move_window>
 8007de4:	4603      	mov	r3, r0
 8007de6:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8007de8:	7dfb      	ldrb	r3, [r7, #23]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d13b      	bne.n	8007e66 <f_sync+0x10c>
				dir = fp->dir_ptr;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8007df4:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	330b      	adds	r3, #11
 8007dfa:	781a      	ldrb	r2, [r3, #0]
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	330b      	adds	r3, #11
 8007e00:	f042 0220 	orr.w	r2, r2, #32
 8007e04:	b2d2      	uxtb	r2, r2
 8007e06:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	331c      	adds	r3, #28
 8007e0c:	687a      	ldr	r2, [r7, #4]
 8007e0e:	f8d2 220c 	ldr.w	r2, [r2, #524]	; 0x20c
 8007e12:	601a      	str	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007e1a:	4619      	mov	r1, r3
 8007e1c:	6938      	ldr	r0, [r7, #16]
 8007e1e:	f7fe fa7b 	bl	8006318 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8007e22:	f7fd f907 	bl	8005034 <get_fattime>
 8007e26:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8007e28:	693b      	ldr	r3, [r7, #16]
 8007e2a:	3316      	adds	r3, #22
 8007e2c:	68fa      	ldr	r2, [r7, #12]
 8007e2e:	601a      	str	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	3312      	adds	r3, #18
 8007e34:	2200      	movs	r2, #0
 8007e36:	801a      	strh	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007e3e:	f023 0320 	bic.w	r3, r3, #32
 8007e42:	b2da      	uxtb	r2, r3
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				fp->fs->wflag = 1;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007e50:	2201      	movs	r2, #1
 8007e52:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	f7fd fd3f 	bl	80058e0 <sync_fs>
 8007e62:	4603      	mov	r3, r0
 8007e64:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007e6c:	7dfa      	ldrb	r2, [r7, #23]
 8007e6e:	4611      	mov	r1, r2
 8007e70:	4618      	mov	r0, r3
 8007e72:	f7fd faeb 	bl	800544c <unlock_fs>
 8007e76:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3718      	adds	r7, #24
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}

08007e80 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b084      	sub	sp, #16
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f7ff ff66 	bl	8007d5a <f_sync>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007e92:	7bfb      	ldrb	r3, [r7, #15]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d11e      	bne.n	8007ed6 <f_close+0x56>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f7ff facb 	bl	8007434 <validate>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007ea2:	7bfb      	ldrb	r3, [r7, #15]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d116      	bne.n	8007ed6 <f_close+0x56>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007eae:	60bb      	str	r3, [r7, #8]
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f7fd fc2e 	bl	8005718 <dec_lock>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007ec0:	7bfb      	ldrb	r3, [r7, #15]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d103      	bne.n	8007ece <f_close+0x4e>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8007ece:	2100      	movs	r1, #0
 8007ed0:	68b8      	ldr	r0, [r7, #8]
 8007ed2:	f7fd fabb 	bl	800544c <unlock_fs>
#endif
		}
	}
	return res;
 8007ed6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3710      	adds	r7, #16
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}

08007ee0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b087      	sub	sp, #28
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	60f8      	str	r0, [r7, #12]
 8007ee8:	60b9      	str	r1, [r7, #8]
 8007eea:	4613      	mov	r3, r2
 8007eec:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007eee:	2301      	movs	r3, #1
 8007ef0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8007ef6:	4b1e      	ldr	r3, [pc, #120]	; (8007f70 <FATFS_LinkDriverEx+0x90>)
 8007ef8:	7a5b      	ldrb	r3, [r3, #9]
 8007efa:	b2db      	uxtb	r3, r3
 8007efc:	2b01      	cmp	r3, #1
 8007efe:	d831      	bhi.n	8007f64 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007f00:	4b1b      	ldr	r3, [pc, #108]	; (8007f70 <FATFS_LinkDriverEx+0x90>)
 8007f02:	7a5b      	ldrb	r3, [r3, #9]
 8007f04:	b2db      	uxtb	r3, r3
 8007f06:	461a      	mov	r2, r3
 8007f08:	4b19      	ldr	r3, [pc, #100]	; (8007f70 <FATFS_LinkDriverEx+0x90>)
 8007f0a:	2100      	movs	r1, #0
 8007f0c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8007f0e:	4b18      	ldr	r3, [pc, #96]	; (8007f70 <FATFS_LinkDriverEx+0x90>)
 8007f10:	7a5b      	ldrb	r3, [r3, #9]
 8007f12:	b2db      	uxtb	r3, r3
 8007f14:	4a16      	ldr	r2, [pc, #88]	; (8007f70 <FATFS_LinkDriverEx+0x90>)
 8007f16:	009b      	lsls	r3, r3, #2
 8007f18:	4413      	add	r3, r2
 8007f1a:	68fa      	ldr	r2, [r7, #12]
 8007f1c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8007f1e:	4b14      	ldr	r3, [pc, #80]	; (8007f70 <FATFS_LinkDriverEx+0x90>)
 8007f20:	7a5b      	ldrb	r3, [r3, #9]
 8007f22:	b2db      	uxtb	r3, r3
 8007f24:	461a      	mov	r2, r3
 8007f26:	4b12      	ldr	r3, [pc, #72]	; (8007f70 <FATFS_LinkDriverEx+0x90>)
 8007f28:	4413      	add	r3, r2
 8007f2a:	79fa      	ldrb	r2, [r7, #7]
 8007f2c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007f2e:	4b10      	ldr	r3, [pc, #64]	; (8007f70 <FATFS_LinkDriverEx+0x90>)
 8007f30:	7a5b      	ldrb	r3, [r3, #9]
 8007f32:	b2db      	uxtb	r3, r3
 8007f34:	1c5a      	adds	r2, r3, #1
 8007f36:	b2d1      	uxtb	r1, r2
 8007f38:	4a0d      	ldr	r2, [pc, #52]	; (8007f70 <FATFS_LinkDriverEx+0x90>)
 8007f3a:	7251      	strb	r1, [r2, #9]
 8007f3c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007f3e:	7dbb      	ldrb	r3, [r7, #22]
 8007f40:	3330      	adds	r3, #48	; 0x30
 8007f42:	b2da      	uxtb	r2, r3
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	3301      	adds	r3, #1
 8007f4c:	223a      	movs	r2, #58	; 0x3a
 8007f4e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	3302      	adds	r3, #2
 8007f54:	222f      	movs	r2, #47	; 0x2f
 8007f56:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	3303      	adds	r3, #3
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007f60:	2300      	movs	r3, #0
 8007f62:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8007f64:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	371c      	adds	r7, #28
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bc80      	pop	{r7}
 8007f6e:	4770      	bx	lr
 8007f70:	20000354 	.word	0x20000354

08007f74 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b082      	sub	sp, #8
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007f7e:	2200      	movs	r2, #0
 8007f80:	6839      	ldr	r1, [r7, #0]
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f7ff ffac 	bl	8007ee0 <FATFS_LinkDriverEx>
 8007f88:	4603      	mov	r3, r0
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3708      	adds	r7, #8
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}
	...

08007f94 <SD_initialize>:
 * @brief  Initializes a Drive
 * @param  lun : not used
 * @retval DSTATUS: Operation status
 */
DSTATUS SD_initialize(BYTE lun)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b082      	sub	sp, #8
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	71fb      	strb	r3, [r7, #7]
	Stat = STA_NOINIT;
 8007f9e:	4b0b      	ldr	r3, [pc, #44]	; (8007fcc <SD_initialize+0x38>)
 8007fa0:	2201      	movs	r2, #1
 8007fa2:	701a      	strb	r2, [r3, #0]

	/* Configure the uSD device */
	if (BSP_SD_Init() == MSD_OK)
 8007fa4:	f7fd f84e 	bl	8005044 <BSP_SD_Init>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d107      	bne.n	8007fbe <SD_initialize+0x2a>
	{
		Stat &= ~STA_NOINIT;
 8007fae:	4b07      	ldr	r3, [pc, #28]	; (8007fcc <SD_initialize+0x38>)
 8007fb0:	781b      	ldrb	r3, [r3, #0]
 8007fb2:	b2db      	uxtb	r3, r3
 8007fb4:	f023 0301 	bic.w	r3, r3, #1
 8007fb8:	b2da      	uxtb	r2, r3
 8007fba:	4b04      	ldr	r3, [pc, #16]	; (8007fcc <SD_initialize+0x38>)
 8007fbc:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8007fbe:	4b03      	ldr	r3, [pc, #12]	; (8007fcc <SD_initialize+0x38>)
 8007fc0:	781b      	ldrb	r3, [r3, #0]
 8007fc2:	b2db      	uxtb	r3, r3
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3708      	adds	r7, #8
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}
 8007fcc:	2000004d 	.word	0x2000004d

08007fd0 <SD_status>:
 * @brief  Gets Disk Status
 * @param  lun : not used
 * @retval DSTATUS: Operation status
 */
DSTATUS SD_status(BYTE lun)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b082      	sub	sp, #8
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	71fb      	strb	r3, [r7, #7]
	Stat = STA_NOINIT;
 8007fda:	4b0b      	ldr	r3, [pc, #44]	; (8008008 <SD_status+0x38>)
 8007fdc:	2201      	movs	r2, #1
 8007fde:	701a      	strb	r2, [r3, #0]

	if (BSP_SD_GetCardState() == MSD_OK)
 8007fe0:	f7fd f88a 	bl	80050f8 <BSP_SD_GetCardState>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d107      	bne.n	8007ffa <SD_status+0x2a>
	{
		Stat &= ~STA_NOINIT;
 8007fea:	4b07      	ldr	r3, [pc, #28]	; (8008008 <SD_status+0x38>)
 8007fec:	781b      	ldrb	r3, [r3, #0]
 8007fee:	b2db      	uxtb	r3, r3
 8007ff0:	f023 0301 	bic.w	r3, r3, #1
 8007ff4:	b2da      	uxtb	r2, r3
 8007ff6:	4b04      	ldr	r3, [pc, #16]	; (8008008 <SD_status+0x38>)
 8007ff8:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8007ffa:	4b03      	ldr	r3, [pc, #12]	; (8008008 <SD_status+0x38>)
 8007ffc:	781b      	ldrb	r3, [r3, #0]
 8007ffe:	b2db      	uxtb	r3, r3
}
 8008000:	4618      	mov	r0, r3
 8008002:	3708      	adds	r7, #8
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}
 8008008:	2000004d 	.word	0x2000004d

0800800c <SD_read>:
 * @param  sector: Sector address (LBA)
 * @param  count: Number of sectors to read (1..128)
 * @retval DRESULT: Operation result
 */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b086      	sub	sp, #24
 8008010:	af00      	add	r7, sp, #0
 8008012:	60b9      	str	r1, [r7, #8]
 8008014:	607a      	str	r2, [r7, #4]
 8008016:	603b      	str	r3, [r7, #0]
 8008018:	4603      	mov	r3, r0
 800801a:	73fb      	strb	r3, [r7, #15]
	DRESULT res = RES_ERROR;
 800801c:	2301      	movs	r3, #1
 800801e:	75fb      	strb	r3, [r7, #23]
	uint32_t timeout = 100000;
 8008020:	4b0e      	ldr	r3, [pc, #56]	; (800805c <SD_read+0x50>)
 8008022:	613b      	str	r3, [r7, #16]

	if (BSP_SD_ReadBlocks_DMA((uint32_t*) buff, (uint32_t) (sector),
 8008024:	683a      	ldr	r2, [r7, #0]
 8008026:	6879      	ldr	r1, [r7, #4]
 8008028:	68b8      	ldr	r0, [r7, #8]
 800802a:	f7fd f831 	bl	8005090 <BSP_SD_ReadBlocks_DMA>
 800802e:	4603      	mov	r3, r0
 8008030:	2b00      	cmp	r3, #0
 8008032:	d10e      	bne.n	8008052 <SD_read+0x46>
			count) == MSD_OK)
	{
		while (BSP_SD_GetCardState() != MSD_OK)
 8008034:	e006      	b.n	8008044 <SD_read+0x38>
		{
			if (timeout-- == 0)
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	1e5a      	subs	r2, r3, #1
 800803a:	613a      	str	r2, [r7, #16]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d101      	bne.n	8008044 <SD_read+0x38>
			{
				return RES_ERROR;
 8008040:	2301      	movs	r3, #1
 8008042:	e007      	b.n	8008054 <SD_read+0x48>
		while (BSP_SD_GetCardState() != MSD_OK)
 8008044:	f7fd f858 	bl	80050f8 <BSP_SD_GetCardState>
 8008048:	4603      	mov	r3, r0
 800804a:	2b00      	cmp	r3, #0
 800804c:	d1f3      	bne.n	8008036 <SD_read+0x2a>
			}
		}
		res = RES_OK;
 800804e:	2300      	movs	r3, #0
 8008050:	75fb      	strb	r3, [r7, #23]
	}

	return res;
 8008052:	7dfb      	ldrb	r3, [r7, #23]
}
 8008054:	4618      	mov	r0, r3
 8008056:	3718      	adds	r7, #24
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}
 800805c:	000186a0 	.word	0x000186a0

08008060 <SD_write>:
 * @param  count: Number of sectors to write (1..128)
 * @retval DRESULT: Operation result
 */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b086      	sub	sp, #24
 8008064:	af00      	add	r7, sp, #0
 8008066:	60b9      	str	r1, [r7, #8]
 8008068:	607a      	str	r2, [r7, #4]
 800806a:	603b      	str	r3, [r7, #0]
 800806c:	4603      	mov	r3, r0
 800806e:	73fb      	strb	r3, [r7, #15]
	DRESULT res = RES_ERROR;
 8008070:	2301      	movs	r3, #1
 8008072:	75fb      	strb	r3, [r7, #23]
	uint32_t timeout = 100000;
 8008074:	4b0e      	ldr	r3, [pc, #56]	; (80080b0 <SD_write+0x50>)
 8008076:	613b      	str	r3, [r7, #16]

	if (BSP_SD_WriteBlocks_DMA((uint32_t*) buff, (uint32_t) (sector),
 8008078:	683a      	ldr	r2, [r7, #0]
 800807a:	6879      	ldr	r1, [r7, #4]
 800807c:	68b8      	ldr	r0, [r7, #8]
 800807e:	f7fd f821 	bl	80050c4 <BSP_SD_WriteBlocks_DMA>
 8008082:	4603      	mov	r3, r0
 8008084:	2b00      	cmp	r3, #0
 8008086:	d10e      	bne.n	80080a6 <SD_write+0x46>
			count) == MSD_OK)
	{
		while (BSP_SD_GetCardState() != MSD_OK)
 8008088:	e006      	b.n	8008098 <SD_write+0x38>
		{
			if (timeout-- == 0)
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	1e5a      	subs	r2, r3, #1
 800808e:	613a      	str	r2, [r7, #16]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d101      	bne.n	8008098 <SD_write+0x38>
			{
				return RES_ERROR;
 8008094:	2301      	movs	r3, #1
 8008096:	e007      	b.n	80080a8 <SD_write+0x48>
		while (BSP_SD_GetCardState() != MSD_OK)
 8008098:	f7fd f82e 	bl	80050f8 <BSP_SD_GetCardState>
 800809c:	4603      	mov	r3, r0
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d1f3      	bne.n	800808a <SD_write+0x2a>
			}
		}
		res = RES_OK;
 80080a2:	2300      	movs	r3, #0
 80080a4:	75fb      	strb	r3, [r7, #23]
	}

	return res;
 80080a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3718      	adds	r7, #24
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}
 80080b0:	000186a0 	.word	0x000186a0

080080b4 <SD_ioctl>:
 * @param  *buff: Buffer to send/receive control data
 * @retval DRESULT: Operation result
 */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b08c      	sub	sp, #48	; 0x30
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	4603      	mov	r3, r0
 80080bc:	603a      	str	r2, [r7, #0]
 80080be:	71fb      	strb	r3, [r7, #7]
 80080c0:	460b      	mov	r3, r1
 80080c2:	71bb      	strb	r3, [r7, #6]
	DRESULT res = RES_ERROR;
 80080c4:	2301      	movs	r3, #1
 80080c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	BSP_SD_CardInfo CardInfo;

	if (Stat & STA_NOINIT)
 80080ca:	4b24      	ldr	r3, [pc, #144]	; (800815c <SD_ioctl+0xa8>)
 80080cc:	781b      	ldrb	r3, [r3, #0]
 80080ce:	b2db      	uxtb	r3, r3
 80080d0:	f003 0301 	and.w	r3, r3, #1
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d001      	beq.n	80080dc <SD_ioctl+0x28>
		return RES_NOTRDY;
 80080d8:	2303      	movs	r3, #3
 80080da:	e03b      	b.n	8008154 <SD_ioctl+0xa0>

	switch (cmd)
 80080dc:	79bb      	ldrb	r3, [r7, #6]
 80080de:	2b03      	cmp	r3, #3
 80080e0:	d833      	bhi.n	800814a <SD_ioctl+0x96>
 80080e2:	a201      	add	r2, pc, #4	; (adr r2, 80080e8 <SD_ioctl+0x34>)
 80080e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080e8:	080080f9 	.word	0x080080f9
 80080ec:	08008101 	.word	0x08008101
 80080f0:	08008119 	.word	0x08008119
 80080f4:	08008133 	.word	0x08008133
	{
	/* Make sure that no pending write process */
	case CTRL_SYNC:
		res = RES_OK;
 80080f8:	2300      	movs	r3, #0
 80080fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80080fe:	e027      	b.n	8008150 <SD_ioctl+0x9c>

		/* Get number of sectors on the disk (DWORD) */
	case GET_SECTOR_COUNT:
		BSP_SD_GetCardInfo(&CardInfo);
 8008100:	f107 030c 	add.w	r3, r7, #12
 8008104:	4618      	mov	r0, r3
 8008106:	f7fd f807 	bl	8005118 <BSP_SD_GetCardInfo>
		*(DWORD*) buff = CardInfo.LogBlockNbr;
 800810a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	601a      	str	r2, [r3, #0]
		res = RES_OK;
 8008110:	2300      	movs	r3, #0
 8008112:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8008116:	e01b      	b.n	8008150 <SD_ioctl+0x9c>

		/* Get R/W sector size (WORD) */
	case GET_SECTOR_SIZE:
		BSP_SD_GetCardInfo(&CardInfo);
 8008118:	f107 030c 	add.w	r3, r7, #12
 800811c:	4618      	mov	r0, r3
 800811e:	f7fc fffb 	bl	8005118 <BSP_SD_GetCardInfo>
		*(WORD*) buff = CardInfo.LogBlockSize;
 8008122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008124:	b29a      	uxth	r2, r3
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	801a      	strh	r2, [r3, #0]
		res = RES_OK;
 800812a:	2300      	movs	r3, #0
 800812c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8008130:	e00e      	b.n	8008150 <SD_ioctl+0x9c>

		/* Get erase block size in unit of sector (DWORD) */
	case GET_BLOCK_SIZE:
		BSP_SD_GetCardInfo(&CardInfo);
 8008132:	f107 030c 	add.w	r3, r7, #12
 8008136:	4618      	mov	r0, r3
 8008138:	f7fc ffee 	bl	8005118 <BSP_SD_GetCardInfo>
		*(DWORD*) buff = CardInfo.LogBlockSize;
 800813c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	601a      	str	r2, [r3, #0]
		res = RES_OK;
 8008142:	2300      	movs	r3, #0
 8008144:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8008148:	e002      	b.n	8008150 <SD_ioctl+0x9c>

	default:
		res = RES_PARERR;
 800814a:	2304      	movs	r3, #4
 800814c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	}

	return res;
 8008150:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008154:	4618      	mov	r0, r3
 8008156:	3730      	adds	r7, #48	; 0x30
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}
 800815c:	2000004d 	.word	0x2000004d

08008160 <ff_convert>:

WCHAR ff_convert (	/* Converted code, 0 means conversion error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 8008160:	b480      	push	{r7}
 8008162:	b089      	sub	sp, #36	; 0x24
 8008164:	af00      	add	r7, sp, #0
 8008166:	4603      	mov	r3, r0
 8008168:	6039      	str	r1, [r7, #0]
 800816a:	80fb      	strh	r3, [r7, #6]
	const WCHAR *p;
	WCHAR c;
	int i, n, li, hi;


	if (chr < 0x80) {	/* ASCII */
 800816c:	88fb      	ldrh	r3, [r7, #6]
 800816e:	2b7f      	cmp	r3, #127	; 0x7f
 8008170:	d802      	bhi.n	8008178 <ff_convert+0x18>
		c = chr;
 8008172:	88fb      	ldrh	r3, [r7, #6]
 8008174:	837b      	strh	r3, [r7, #26]
 8008176:	e047      	b.n	8008208 <ff_convert+0xa8>
	} else {
		if (dir) {		/* OEMCP to unicode */
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d005      	beq.n	800818a <ff_convert+0x2a>
			p = oem2uni;
 800817e:	4b25      	ldr	r3, [pc, #148]	; (8008214 <ff_convert+0xb4>)
 8008180:	61fb      	str	r3, [r7, #28]
			hi = sizeof oem2uni / 4 - 1;
 8008182:	f244 2398 	movw	r3, #17048	; 0x4298
 8008186:	60bb      	str	r3, [r7, #8]
 8008188:	e004      	b.n	8008194 <ff_convert+0x34>
		} else {		/* Unicode to OEMCP */
			p = uni2oem;
 800818a:	4b23      	ldr	r3, [pc, #140]	; (8008218 <ff_convert+0xb8>)
 800818c:	61fb      	str	r3, [r7, #28]
			hi = sizeof uni2oem / 4 - 1;
 800818e:	f244 2398 	movw	r3, #17048	; 0x4298
 8008192:	60bb      	str	r3, [r7, #8]
		}
		li = 0;
 8008194:	2300      	movs	r3, #0
 8008196:	60fb      	str	r3, [r7, #12]
		for (n = 16; n; n--) {
 8008198:	2310      	movs	r3, #16
 800819a:	613b      	str	r3, [r7, #16]
 800819c:	e023      	b.n	80081e6 <ff_convert+0x86>
			i = li + (hi - li) / 2;
 800819e:	68ba      	ldr	r2, [r7, #8]
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	1ad3      	subs	r3, r2, r3
 80081a4:	0fda      	lsrs	r2, r3, #31
 80081a6:	4413      	add	r3, r2
 80081a8:	105b      	asrs	r3, r3, #1
 80081aa:	461a      	mov	r2, r3
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	4413      	add	r3, r2
 80081b0:	617b      	str	r3, [r7, #20]
			if (chr == p[i * 2]) break;
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	009b      	lsls	r3, r3, #2
 80081b6:	461a      	mov	r2, r3
 80081b8:	69fb      	ldr	r3, [r7, #28]
 80081ba:	4413      	add	r3, r2
 80081bc:	881b      	ldrh	r3, [r3, #0]
 80081be:	88fa      	ldrh	r2, [r7, #6]
 80081c0:	429a      	cmp	r2, r3
 80081c2:	d014      	beq.n	80081ee <ff_convert+0x8e>
			if (chr > p[i * 2])
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	009b      	lsls	r3, r3, #2
 80081c8:	461a      	mov	r2, r3
 80081ca:	69fb      	ldr	r3, [r7, #28]
 80081cc:	4413      	add	r3, r2
 80081ce:	881b      	ldrh	r3, [r3, #0]
 80081d0:	88fa      	ldrh	r2, [r7, #6]
 80081d2:	429a      	cmp	r2, r3
 80081d4:	d902      	bls.n	80081dc <ff_convert+0x7c>
				li = i;
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	60fb      	str	r3, [r7, #12]
 80081da:	e001      	b.n	80081e0 <ff_convert+0x80>
			else
				hi = i;
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	60bb      	str	r3, [r7, #8]
		for (n = 16; n; n--) {
 80081e0:	693b      	ldr	r3, [r7, #16]
 80081e2:	3b01      	subs	r3, #1
 80081e4:	613b      	str	r3, [r7, #16]
 80081e6:	693b      	ldr	r3, [r7, #16]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d1d8      	bne.n	800819e <ff_convert+0x3e>
 80081ec:	e000      	b.n	80081f0 <ff_convert+0x90>
			if (chr == p[i * 2]) break;
 80081ee:	bf00      	nop
		}
		c = n ? p[i * 2 + 1] : 0;
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d006      	beq.n	8008204 <ff_convert+0xa4>
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	009b      	lsls	r3, r3, #2
 80081fa:	3302      	adds	r3, #2
 80081fc:	69fa      	ldr	r2, [r7, #28]
 80081fe:	4413      	add	r3, r2
 8008200:	881b      	ldrh	r3, [r3, #0]
 8008202:	e000      	b.n	8008206 <ff_convert+0xa6>
 8008204:	2300      	movs	r3, #0
 8008206:	837b      	strh	r3, [r7, #26]
	}

	return c;
 8008208:	8b7b      	ldrh	r3, [r7, #26]
}
 800820a:	4618      	mov	r0, r3
 800820c:	3724      	adds	r7, #36	; 0x24
 800820e:	46bd      	mov	sp, r7
 8008210:	bc80      	pop	{r7}
 8008212:	4770      	bx	lr
 8008214:	0801b778 	.word	0x0801b778
 8008218:	0800ad14 	.word	0x0800ad14

0800821c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 800821c:	b480      	push	{r7}
 800821e:	b085      	sub	sp, #20
 8008220:	af00      	add	r7, sp, #0
 8008222:	4603      	mov	r3, r0
 8008224:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 8008226:	2300      	movs	r3, #0
 8008228:	60fb      	str	r3, [r7, #12]
 800822a:	e002      	b.n	8008232 <ff_wtoupper+0x16>
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	3301      	adds	r3, #1
 8008230:	60fb      	str	r3, [r7, #12]
 8008232:	4a0f      	ldr	r2, [pc, #60]	; (8008270 <ff_wtoupper+0x54>)
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d006      	beq.n	800824c <ff_wtoupper+0x30>
 800823e:	4a0c      	ldr	r2, [pc, #48]	; (8008270 <ff_wtoupper+0x54>)
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008246:	88fa      	ldrh	r2, [r7, #6]
 8008248:	429a      	cmp	r2, r3
 800824a:	d1ef      	bne.n	800822c <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 800824c:	4a08      	ldr	r2, [pc, #32]	; (8008270 <ff_wtoupper+0x54>)
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d004      	beq.n	8008262 <ff_wtoupper+0x46>
 8008258:	4a06      	ldr	r2, [pc, #24]	; (8008274 <ff_wtoupper+0x58>)
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008260:	e000      	b.n	8008264 <ff_wtoupper+0x48>
 8008262:	88fb      	ldrh	r3, [r7, #6]
}
 8008264:	4618      	mov	r0, r3
 8008266:	3714      	adds	r7, #20
 8008268:	46bd      	mov	sp, r7
 800826a:	bc80      	pop	{r7}
 800826c:	4770      	bx	lr
 800826e:	bf00      	nop
 8008270:	0802c1dc 	.word	0x0802c1dc
 8008274:	0802c3bc 	.word	0x0802c3bc

08008278 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* TRUE:Function succeeded, FALSE:Could not create due to any error */
	BYTE vol,			/* Corresponding logical drive being processed */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b086      	sub	sp, #24
 800827c:	af00      	add	r7, sp, #0
 800827e:	4603      	mov	r3, r0
 8008280:	6039      	str	r1, [r7, #0]
 8008282:	71fb      	strb	r3, [r7, #7]
  int ret;
  
  osSemaphoreDef(SEM);
 8008284:	2300      	movs	r3, #0
 8008286:	60fb      	str	r3, [r7, #12]
 8008288:	2300      	movs	r3, #0
 800828a:	613b      	str	r3, [r7, #16]
  *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);		
 800828c:	f107 030c 	add.w	r3, r7, #12
 8008290:	2101      	movs	r1, #1
 8008292:	4618      	mov	r0, r3
 8008294:	f000 f8e2 	bl	800845c <osSemaphoreCreate>
 8008298:	4602      	mov	r2, r0
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	601a      	str	r2, [r3, #0]
  ret = (*sobj != NULL);
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	bf14      	ite	ne
 80082a6:	2301      	movne	r3, #1
 80082a8:	2300      	moveq	r3, #0
 80082aa:	b2db      	uxtb	r3, r3
 80082ac:	617b      	str	r3, [r7, #20]
  
  return ret;
 80082ae:	697b      	ldr	r3, [r7, #20]
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3718      	adds	r7, #24
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}

080082b8 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* TRUE:Function succeeded, FALSE:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b082      	sub	sp, #8
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  osSemaphoreDelete (sobj);
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f000 f983 	bl	80085cc <osSemaphoreDelete>
  return 1;
 80082c6:	2301      	movs	r3, #1
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3708      	adds	r7, #8
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}

080082d0 <ff_req_grant>:
*/

int ff_req_grant (	/* TRUE:Got a grant to access the volume, FALSE:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b084      	sub	sp, #16
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
  int ret = 0;
 80082d8:	2300      	movs	r3, #0
 80082da:	60fb      	str	r3, [r7, #12]
  
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 80082dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f000 f8ef 	bl	80084c4 <osSemaphoreWait>
 80082e6:	4603      	mov	r3, r0
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d101      	bne.n	80082f0 <ff_req_grant+0x20>
  {
    ret = 1;
 80082ec:	2301      	movs	r3, #1
 80082ee:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 80082f0:	68fb      	ldr	r3, [r7, #12]
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3710      	adds	r7, #16
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}

080082fa <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 80082fa:	b580      	push	{r7, lr}
 80082fc:	b082      	sub	sp, #8
 80082fe:	af00      	add	r7, sp, #0
 8008300:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(sobj);
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f000 f92c 	bl	8008560 <osSemaphoreRelease>
}
 8008308:	bf00      	nop
 800830a:	3708      	adds	r7, #8
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}

08008310 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b082      	sub	sp, #8
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
	return malloc(msize);	/* Allocate a new memory block with POSIX API */
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f002 fba1 	bl	800aa60 <malloc>
 800831e:	4603      	mov	r3, r0
}
 8008320:	4618      	mov	r0, r3
 8008322:	3708      	adds	r7, #8
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}

08008328 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b082      	sub	sp, #8
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
	free(mblock);	/* Discard the memory block with POSIX API */
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f002 fb9d 	bl	800aa70 <free>
}
 8008336:	bf00      	nop
 8008338:	3708      	adds	r7, #8
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}

0800833e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800833e:	b480      	push	{r7}
 8008340:	b085      	sub	sp, #20
 8008342:	af00      	add	r7, sp, #0
 8008344:	4603      	mov	r3, r0
 8008346:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008348:	2300      	movs	r3, #0
 800834a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800834c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008350:	2b84      	cmp	r3, #132	; 0x84
 8008352:	d005      	beq.n	8008360 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008354:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	4413      	add	r3, r2
 800835c:	3303      	adds	r3, #3
 800835e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008360:	68fb      	ldr	r3, [r7, #12]
}
 8008362:	4618      	mov	r0, r3
 8008364:	3714      	adds	r7, #20
 8008366:	46bd      	mov	sp, r7
 8008368:	bc80      	pop	{r7}
 800836a:	4770      	bx	lr

0800836c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800836c:	b480      	push	{r7}
 800836e:	b083      	sub	sp, #12
 8008370:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008372:	f3ef 8305 	mrs	r3, IPSR
 8008376:	607b      	str	r3, [r7, #4]
  return(result);
 8008378:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800837a:	2b00      	cmp	r3, #0
 800837c:	bf14      	ite	ne
 800837e:	2301      	movne	r3, #1
 8008380:	2300      	moveq	r3, #0
 8008382:	b2db      	uxtb	r3, r3
}
 8008384:	4618      	mov	r0, r3
 8008386:	370c      	adds	r7, #12
 8008388:	46bd      	mov	sp, r7
 800838a:	bc80      	pop	{r7}
 800838c:	4770      	bx	lr

0800838e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800838e:	b580      	push	{r7, lr}
 8008390:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008392:	f001 f947 	bl	8009624 <vTaskStartScheduler>
  
  return osOK;
 8008396:	2300      	movs	r3, #0
}
 8008398:	4618      	mov	r0, r3
 800839a:	bd80      	pop	{r7, pc}

0800839c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800839c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800839e:	b089      	sub	sp, #36	; 0x24
 80083a0:	af04      	add	r7, sp, #16
 80083a2:	6078      	str	r0, [r7, #4]
 80083a4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	695b      	ldr	r3, [r3, #20]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d020      	beq.n	80083f0 <osThreadCreate+0x54>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	699b      	ldr	r3, [r3, #24]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d01c      	beq.n	80083f0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	685c      	ldr	r4, [r3, #4]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681d      	ldr	r5, [r3, #0]
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	691e      	ldr	r6, [r3, #16]
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80083c8:	4618      	mov	r0, r3
 80083ca:	f7ff ffb8 	bl	800833e <makeFreeRtosPriority>
 80083ce:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	695b      	ldr	r3, [r3, #20]
 80083d4:	687a      	ldr	r2, [r7, #4]
 80083d6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80083d8:	9202      	str	r2, [sp, #8]
 80083da:	9301      	str	r3, [sp, #4]
 80083dc:	9100      	str	r1, [sp, #0]
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	4632      	mov	r2, r6
 80083e2:	4629      	mov	r1, r5
 80083e4:	4620      	mov	r0, r4
 80083e6:	f000 ff63 	bl	80092b0 <xTaskCreateStatic>
 80083ea:	4603      	mov	r3, r0
 80083ec:	60fb      	str	r3, [r7, #12]
 80083ee:	e01c      	b.n	800842a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	685c      	ldr	r4, [r3, #4]
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80083fc:	b29e      	uxth	r6, r3
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008404:	4618      	mov	r0, r3
 8008406:	f7ff ff9a 	bl	800833e <makeFreeRtosPriority>
 800840a:	4602      	mov	r2, r0
 800840c:	f107 030c 	add.w	r3, r7, #12
 8008410:	9301      	str	r3, [sp, #4]
 8008412:	9200      	str	r2, [sp, #0]
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	4632      	mov	r2, r6
 8008418:	4629      	mov	r1, r5
 800841a:	4620      	mov	r0, r4
 800841c:	f000 ffa1 	bl	8009362 <xTaskCreate>
 8008420:	4603      	mov	r3, r0
 8008422:	2b01      	cmp	r3, #1
 8008424:	d001      	beq.n	800842a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008426:	2300      	movs	r3, #0
 8008428:	e000      	b.n	800842c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800842a:	68fb      	ldr	r3, [r7, #12]
}
 800842c:	4618      	mov	r0, r3
 800842e:	3714      	adds	r7, #20
 8008430:	46bd      	mov	sp, r7
 8008432:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008434 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b084      	sub	sp, #16
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d001      	beq.n	800844a <osDelay+0x16>
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	e000      	b.n	800844c <osDelay+0x18>
 800844a:	2301      	movs	r3, #1
 800844c:	4618      	mov	r0, r3
 800844e:	f001 f8b5 	bl	80095bc <vTaskDelay>
  
  return osOK;
 8008452:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008454:	4618      	mov	r0, r3
 8008456:	3710      	adds	r7, #16
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}

0800845c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800845c:	b580      	push	{r7, lr}
 800845e:	b086      	sub	sp, #24
 8008460:	af02      	add	r7, sp, #8
 8008462:	6078      	str	r0, [r7, #4]
 8008464:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	685b      	ldr	r3, [r3, #4]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d010      	beq.n	8008490 <osSemaphoreCreate+0x34>
    if (count == 1) {
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	2b01      	cmp	r3, #1
 8008472:	d10b      	bne.n	800848c <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	685a      	ldr	r2, [r3, #4]
 8008478:	2303      	movs	r3, #3
 800847a:	9300      	str	r3, [sp, #0]
 800847c:	4613      	mov	r3, r2
 800847e:	2200      	movs	r2, #0
 8008480:	2100      	movs	r1, #0
 8008482:	2001      	movs	r0, #1
 8008484:	f000 f9cc 	bl	8008820 <xQueueGenericCreateStatic>
 8008488:	4603      	mov	r3, r0
 800848a:	e016      	b.n	80084ba <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800848c:	2300      	movs	r3, #0
 800848e:	e014      	b.n	80084ba <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	2b01      	cmp	r3, #1
 8008494:	d110      	bne.n	80084b8 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 8008496:	2203      	movs	r2, #3
 8008498:	2100      	movs	r1, #0
 800849a:	2001      	movs	r0, #1
 800849c:	f000 fa32 	bl	8008904 <xQueueGenericCreate>
 80084a0:	60f8      	str	r0, [r7, #12]
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d005      	beq.n	80084b4 <osSemaphoreCreate+0x58>
 80084a8:	2300      	movs	r3, #0
 80084aa:	2200      	movs	r2, #0
 80084ac:	2100      	movs	r1, #0
 80084ae:	68f8      	ldr	r0, [r7, #12]
 80084b0:	f000 fa84 	bl	80089bc <xQueueGenericSend>
      return sema;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	e000      	b.n	80084ba <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80084b8:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80084ba:	4618      	mov	r0, r3
 80084bc:	3710      	adds	r7, #16
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd80      	pop	{r7, pc}
	...

080084c4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b084      	sub	sp, #16
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
 80084cc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80084ce:	2300      	movs	r3, #0
 80084d0:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d101      	bne.n	80084dc <osSemaphoreWait+0x18>
    return osErrorParameter;
 80084d8:	2380      	movs	r3, #128	; 0x80
 80084da:	e03a      	b.n	8008552 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80084dc:	2300      	movs	r3, #0
 80084de:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084e6:	d103      	bne.n	80084f0 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80084e8:	f04f 33ff 	mov.w	r3, #4294967295
 80084ec:	60fb      	str	r3, [r7, #12]
 80084ee:	e009      	b.n	8008504 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d006      	beq.n	8008504 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d101      	bne.n	8008504 <osSemaphoreWait+0x40>
      ticks = 1;
 8008500:	2301      	movs	r3, #1
 8008502:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8008504:	f7ff ff32 	bl	800836c <inHandlerMode>
 8008508:	4603      	mov	r3, r0
 800850a:	2b00      	cmp	r3, #0
 800850c:	d017      	beq.n	800853e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800850e:	f107 0308 	add.w	r3, r7, #8
 8008512:	461a      	mov	r2, r3
 8008514:	2100      	movs	r1, #0
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f000 fcdc 	bl	8008ed4 <xQueueReceiveFromISR>
 800851c:	4603      	mov	r3, r0
 800851e:	2b01      	cmp	r3, #1
 8008520:	d001      	beq.n	8008526 <osSemaphoreWait+0x62>
      return osErrorOS;
 8008522:	23ff      	movs	r3, #255	; 0xff
 8008524:	e015      	b.n	8008552 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d011      	beq.n	8008550 <osSemaphoreWait+0x8c>
 800852c:	4b0b      	ldr	r3, [pc, #44]	; (800855c <osSemaphoreWait+0x98>)
 800852e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008532:	601a      	str	r2, [r3, #0]
 8008534:	f3bf 8f4f 	dsb	sy
 8008538:	f3bf 8f6f 	isb	sy
 800853c:	e008      	b.n	8008550 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800853e:	68f9      	ldr	r1, [r7, #12]
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f000 fbbf 	bl	8008cc4 <xQueueSemaphoreTake>
 8008546:	4603      	mov	r3, r0
 8008548:	2b01      	cmp	r3, #1
 800854a:	d001      	beq.n	8008550 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800854c:	23ff      	movs	r3, #255	; 0xff
 800854e:	e000      	b.n	8008552 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8008550:	2300      	movs	r3, #0
}
 8008552:	4618      	mov	r0, r3
 8008554:	3710      	adds	r7, #16
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}
 800855a:	bf00      	nop
 800855c:	e000ed04 	.word	0xe000ed04

08008560 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b084      	sub	sp, #16
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8008568:	2300      	movs	r3, #0
 800856a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800856c:	2300      	movs	r3, #0
 800856e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8008570:	f7ff fefc 	bl	800836c <inHandlerMode>
 8008574:	4603      	mov	r3, r0
 8008576:	2b00      	cmp	r3, #0
 8008578:	d016      	beq.n	80085a8 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800857a:	f107 0308 	add.w	r3, r7, #8
 800857e:	4619      	mov	r1, r3
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f000 fb15 	bl	8008bb0 <xQueueGiveFromISR>
 8008586:	4603      	mov	r3, r0
 8008588:	2b01      	cmp	r3, #1
 800858a:	d001      	beq.n	8008590 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800858c:	23ff      	movs	r3, #255	; 0xff
 800858e:	e017      	b.n	80085c0 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d013      	beq.n	80085be <osSemaphoreRelease+0x5e>
 8008596:	4b0c      	ldr	r3, [pc, #48]	; (80085c8 <osSemaphoreRelease+0x68>)
 8008598:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800859c:	601a      	str	r2, [r3, #0]
 800859e:	f3bf 8f4f 	dsb	sy
 80085a2:	f3bf 8f6f 	isb	sy
 80085a6:	e00a      	b.n	80085be <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80085a8:	2300      	movs	r3, #0
 80085aa:	2200      	movs	r2, #0
 80085ac:	2100      	movs	r1, #0
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f000 fa04 	bl	80089bc <xQueueGenericSend>
 80085b4:	4603      	mov	r3, r0
 80085b6:	2b01      	cmp	r3, #1
 80085b8:	d001      	beq.n	80085be <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80085ba:	23ff      	movs	r3, #255	; 0xff
 80085bc:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80085be:	68fb      	ldr	r3, [r7, #12]
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	3710      	adds	r7, #16
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}
 80085c8:	e000ed04 	.word	0xe000ed04

080085cc <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b082      	sub	sp, #8
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80085d4:	f7ff feca 	bl	800836c <inHandlerMode>
 80085d8:	4603      	mov	r3, r0
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d001      	beq.n	80085e2 <osSemaphoreDelete+0x16>
    return osErrorISR;
 80085de:	2382      	movs	r3, #130	; 0x82
 80085e0:	e003      	b.n	80085ea <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f000 fcf3 	bl	8008fce <vQueueDelete>

  return osOK; 
 80085e8:	2300      	movs	r3, #0
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3708      	adds	r7, #8
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}

080085f2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80085f2:	b480      	push	{r7}
 80085f4:	b083      	sub	sp, #12
 80085f6:	af00      	add	r7, sp, #0
 80085f8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f103 0208 	add.w	r2, r3, #8
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f04f 32ff 	mov.w	r2, #4294967295
 800860a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f103 0208 	add.w	r2, r3, #8
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f103 0208 	add.w	r2, r3, #8
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2200      	movs	r2, #0
 8008624:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008626:	bf00      	nop
 8008628:	370c      	adds	r7, #12
 800862a:	46bd      	mov	sp, r7
 800862c:	bc80      	pop	{r7}
 800862e:	4770      	bx	lr

08008630 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008630:	b480      	push	{r7}
 8008632:	b083      	sub	sp, #12
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2200      	movs	r2, #0
 800863c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800863e:	bf00      	nop
 8008640:	370c      	adds	r7, #12
 8008642:	46bd      	mov	sp, r7
 8008644:	bc80      	pop	{r7}
 8008646:	4770      	bx	lr

08008648 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008648:	b480      	push	{r7}
 800864a:	b085      	sub	sp, #20
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
 8008650:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	68fa      	ldr	r2, [r7, #12]
 800865c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	689a      	ldr	r2, [r3, #8]
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	689b      	ldr	r3, [r3, #8]
 800866a:	683a      	ldr	r2, [r7, #0]
 800866c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	683a      	ldr	r2, [r7, #0]
 8008672:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	687a      	ldr	r2, [r7, #4]
 8008678:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	1c5a      	adds	r2, r3, #1
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	601a      	str	r2, [r3, #0]
}
 8008684:	bf00      	nop
 8008686:	3714      	adds	r7, #20
 8008688:	46bd      	mov	sp, r7
 800868a:	bc80      	pop	{r7}
 800868c:	4770      	bx	lr

0800868e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800868e:	b480      	push	{r7}
 8008690:	b085      	sub	sp, #20
 8008692:	af00      	add	r7, sp, #0
 8008694:	6078      	str	r0, [r7, #4]
 8008696:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086a4:	d103      	bne.n	80086ae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	691b      	ldr	r3, [r3, #16]
 80086aa:	60fb      	str	r3, [r7, #12]
 80086ac:	e00c      	b.n	80086c8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	3308      	adds	r3, #8
 80086b2:	60fb      	str	r3, [r7, #12]
 80086b4:	e002      	b.n	80086bc <vListInsert+0x2e>
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	685b      	ldr	r3, [r3, #4]
 80086ba:	60fb      	str	r3, [r7, #12]
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	685b      	ldr	r3, [r3, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	68ba      	ldr	r2, [r7, #8]
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d2f6      	bcs.n	80086b6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	685a      	ldr	r2, [r3, #4]
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	683a      	ldr	r2, [r7, #0]
 80086d6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	68fa      	ldr	r2, [r7, #12]
 80086dc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	683a      	ldr	r2, [r7, #0]
 80086e2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	687a      	ldr	r2, [r7, #4]
 80086e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	1c5a      	adds	r2, r3, #1
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	601a      	str	r2, [r3, #0]
}
 80086f4:	bf00      	nop
 80086f6:	3714      	adds	r7, #20
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bc80      	pop	{r7}
 80086fc:	4770      	bx	lr

080086fe <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80086fe:	b480      	push	{r7}
 8008700:	b085      	sub	sp, #20
 8008702:	af00      	add	r7, sp, #0
 8008704:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	691b      	ldr	r3, [r3, #16]
 800870a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	685b      	ldr	r3, [r3, #4]
 8008710:	687a      	ldr	r2, [r7, #4]
 8008712:	6892      	ldr	r2, [r2, #8]
 8008714:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	689b      	ldr	r3, [r3, #8]
 800871a:	687a      	ldr	r2, [r7, #4]
 800871c:	6852      	ldr	r2, [r2, #4]
 800871e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	687a      	ldr	r2, [r7, #4]
 8008726:	429a      	cmp	r2, r3
 8008728:	d103      	bne.n	8008732 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	689a      	ldr	r2, [r3, #8]
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2200      	movs	r2, #0
 8008736:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	1e5a      	subs	r2, r3, #1
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
}
 8008746:	4618      	mov	r0, r3
 8008748:	3714      	adds	r7, #20
 800874a:	46bd      	mov	sp, r7
 800874c:	bc80      	pop	{r7}
 800874e:	4770      	bx	lr

08008750 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b084      	sub	sp, #16
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
 8008758:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d109      	bne.n	8008778 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008768:	f383 8811 	msr	BASEPRI, r3
 800876c:	f3bf 8f6f 	isb	sy
 8008770:	f3bf 8f4f 	dsb	sy
 8008774:	60bb      	str	r3, [r7, #8]
 8008776:	e7fe      	b.n	8008776 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8008778:	f001 fe7e 	bl	800a478 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681a      	ldr	r2, [r3, #0]
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008784:	68f9      	ldr	r1, [r7, #12]
 8008786:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008788:	fb01 f303 	mul.w	r3, r1, r3
 800878c:	441a      	add	r2, r3
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	2200      	movs	r2, #0
 8008796:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681a      	ldr	r2, [r3, #0]
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681a      	ldr	r2, [r3, #0]
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087a8:	3b01      	subs	r3, #1
 80087aa:	68f9      	ldr	r1, [r7, #12]
 80087ac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80087ae:	fb01 f303 	mul.w	r3, r1, r3
 80087b2:	441a      	add	r2, r3
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	22ff      	movs	r2, #255	; 0xff
 80087bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	22ff      	movs	r2, #255	; 0xff
 80087c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d114      	bne.n	80087f8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	691b      	ldr	r3, [r3, #16]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d01a      	beq.n	800880c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	3310      	adds	r3, #16
 80087da:	4618      	mov	r0, r3
 80087dc:	f001 f964 	bl	8009aa8 <xTaskRemoveFromEventList>
 80087e0:	4603      	mov	r3, r0
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d012      	beq.n	800880c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80087e6:	4b0d      	ldr	r3, [pc, #52]	; (800881c <xQueueGenericReset+0xcc>)
 80087e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087ec:	601a      	str	r2, [r3, #0]
 80087ee:	f3bf 8f4f 	dsb	sy
 80087f2:	f3bf 8f6f 	isb	sy
 80087f6:	e009      	b.n	800880c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	3310      	adds	r3, #16
 80087fc:	4618      	mov	r0, r3
 80087fe:	f7ff fef8 	bl	80085f2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	3324      	adds	r3, #36	; 0x24
 8008806:	4618      	mov	r0, r3
 8008808:	f7ff fef3 	bl	80085f2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800880c:	f001 fe62 	bl	800a4d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008810:	2301      	movs	r3, #1
}
 8008812:	4618      	mov	r0, r3
 8008814:	3710      	adds	r7, #16
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}
 800881a:	bf00      	nop
 800881c:	e000ed04 	.word	0xe000ed04

08008820 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008820:	b580      	push	{r7, lr}
 8008822:	b08e      	sub	sp, #56	; 0x38
 8008824:	af02      	add	r7, sp, #8
 8008826:	60f8      	str	r0, [r7, #12]
 8008828:	60b9      	str	r1, [r7, #8]
 800882a:	607a      	str	r2, [r7, #4]
 800882c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d109      	bne.n	8008848 <xQueueGenericCreateStatic+0x28>
 8008834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008838:	f383 8811 	msr	BASEPRI, r3
 800883c:	f3bf 8f6f 	isb	sy
 8008840:	f3bf 8f4f 	dsb	sy
 8008844:	62bb      	str	r3, [r7, #40]	; 0x28
 8008846:	e7fe      	b.n	8008846 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d109      	bne.n	8008862 <xQueueGenericCreateStatic+0x42>
 800884e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008852:	f383 8811 	msr	BASEPRI, r3
 8008856:	f3bf 8f6f 	isb	sy
 800885a:	f3bf 8f4f 	dsb	sy
 800885e:	627b      	str	r3, [r7, #36]	; 0x24
 8008860:	e7fe      	b.n	8008860 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d002      	beq.n	800886e <xQueueGenericCreateStatic+0x4e>
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d001      	beq.n	8008872 <xQueueGenericCreateStatic+0x52>
 800886e:	2301      	movs	r3, #1
 8008870:	e000      	b.n	8008874 <xQueueGenericCreateStatic+0x54>
 8008872:	2300      	movs	r3, #0
 8008874:	2b00      	cmp	r3, #0
 8008876:	d109      	bne.n	800888c <xQueueGenericCreateStatic+0x6c>
 8008878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800887c:	f383 8811 	msr	BASEPRI, r3
 8008880:	f3bf 8f6f 	isb	sy
 8008884:	f3bf 8f4f 	dsb	sy
 8008888:	623b      	str	r3, [r7, #32]
 800888a:	e7fe      	b.n	800888a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d102      	bne.n	8008898 <xQueueGenericCreateStatic+0x78>
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d101      	bne.n	800889c <xQueueGenericCreateStatic+0x7c>
 8008898:	2301      	movs	r3, #1
 800889a:	e000      	b.n	800889e <xQueueGenericCreateStatic+0x7e>
 800889c:	2300      	movs	r3, #0
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d109      	bne.n	80088b6 <xQueueGenericCreateStatic+0x96>
 80088a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088a6:	f383 8811 	msr	BASEPRI, r3
 80088aa:	f3bf 8f6f 	isb	sy
 80088ae:	f3bf 8f4f 	dsb	sy
 80088b2:	61fb      	str	r3, [r7, #28]
 80088b4:	e7fe      	b.n	80088b4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80088b6:	2348      	movs	r3, #72	; 0x48
 80088b8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	2b48      	cmp	r3, #72	; 0x48
 80088be:	d009      	beq.n	80088d4 <xQueueGenericCreateStatic+0xb4>
 80088c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088c4:	f383 8811 	msr	BASEPRI, r3
 80088c8:	f3bf 8f6f 	isb	sy
 80088cc:	f3bf 8f4f 	dsb	sy
 80088d0:	61bb      	str	r3, [r7, #24]
 80088d2:	e7fe      	b.n	80088d2 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80088d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d00d      	beq.n	80088fa <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80088de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088e0:	2201      	movs	r2, #1
 80088e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80088e6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80088ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ec:	9300      	str	r3, [sp, #0]
 80088ee:	4613      	mov	r3, r2
 80088f0:	687a      	ldr	r2, [r7, #4]
 80088f2:	68b9      	ldr	r1, [r7, #8]
 80088f4:	68f8      	ldr	r0, [r7, #12]
 80088f6:	f000 f842 	bl	800897e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80088fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80088fc:	4618      	mov	r0, r3
 80088fe:	3730      	adds	r7, #48	; 0x30
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}

08008904 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008904:	b580      	push	{r7, lr}
 8008906:	b08a      	sub	sp, #40	; 0x28
 8008908:	af02      	add	r7, sp, #8
 800890a:	60f8      	str	r0, [r7, #12]
 800890c:	60b9      	str	r1, [r7, #8]
 800890e:	4613      	mov	r3, r2
 8008910:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d109      	bne.n	800892c <xQueueGenericCreate+0x28>
 8008918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800891c:	f383 8811 	msr	BASEPRI, r3
 8008920:	f3bf 8f6f 	isb	sy
 8008924:	f3bf 8f4f 	dsb	sy
 8008928:	613b      	str	r3, [r7, #16]
 800892a:	e7fe      	b.n	800892a <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d102      	bne.n	8008938 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8008932:	2300      	movs	r3, #0
 8008934:	61fb      	str	r3, [r7, #28]
 8008936:	e004      	b.n	8008942 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	68ba      	ldr	r2, [r7, #8]
 800893c:	fb02 f303 	mul.w	r3, r2, r3
 8008940:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8008942:	69fb      	ldr	r3, [r7, #28]
 8008944:	3348      	adds	r3, #72	; 0x48
 8008946:	4618      	mov	r0, r3
 8008948:	f001 fe8c 	bl	800a664 <pvPortMalloc>
 800894c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800894e:	69bb      	ldr	r3, [r7, #24]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d00f      	beq.n	8008974 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8008954:	69bb      	ldr	r3, [r7, #24]
 8008956:	3348      	adds	r3, #72	; 0x48
 8008958:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800895a:	69bb      	ldr	r3, [r7, #24]
 800895c:	2200      	movs	r2, #0
 800895e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008962:	79fa      	ldrb	r2, [r7, #7]
 8008964:	69bb      	ldr	r3, [r7, #24]
 8008966:	9300      	str	r3, [sp, #0]
 8008968:	4613      	mov	r3, r2
 800896a:	697a      	ldr	r2, [r7, #20]
 800896c:	68b9      	ldr	r1, [r7, #8]
 800896e:	68f8      	ldr	r0, [r7, #12]
 8008970:	f000 f805 	bl	800897e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8008974:	69bb      	ldr	r3, [r7, #24]
	}
 8008976:	4618      	mov	r0, r3
 8008978:	3720      	adds	r7, #32
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}

0800897e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800897e:	b580      	push	{r7, lr}
 8008980:	b084      	sub	sp, #16
 8008982:	af00      	add	r7, sp, #0
 8008984:	60f8      	str	r0, [r7, #12]
 8008986:	60b9      	str	r1, [r7, #8]
 8008988:	607a      	str	r2, [r7, #4]
 800898a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d103      	bne.n	800899a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008992:	69bb      	ldr	r3, [r7, #24]
 8008994:	69ba      	ldr	r2, [r7, #24]
 8008996:	601a      	str	r2, [r3, #0]
 8008998:	e002      	b.n	80089a0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800899a:	69bb      	ldr	r3, [r7, #24]
 800899c:	687a      	ldr	r2, [r7, #4]
 800899e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80089a0:	69bb      	ldr	r3, [r7, #24]
 80089a2:	68fa      	ldr	r2, [r7, #12]
 80089a4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80089a6:	69bb      	ldr	r3, [r7, #24]
 80089a8:	68ba      	ldr	r2, [r7, #8]
 80089aa:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80089ac:	2101      	movs	r1, #1
 80089ae:	69b8      	ldr	r0, [r7, #24]
 80089b0:	f7ff fece 	bl	8008750 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80089b4:	bf00      	nop
 80089b6:	3710      	adds	r7, #16
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}

080089bc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b08e      	sub	sp, #56	; 0x38
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	60f8      	str	r0, [r7, #12]
 80089c4:	60b9      	str	r1, [r7, #8]
 80089c6:	607a      	str	r2, [r7, #4]
 80089c8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80089ca:	2300      	movs	r3, #0
 80089cc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80089d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d109      	bne.n	80089ec <xQueueGenericSend+0x30>
 80089d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089dc:	f383 8811 	msr	BASEPRI, r3
 80089e0:	f3bf 8f6f 	isb	sy
 80089e4:	f3bf 8f4f 	dsb	sy
 80089e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80089ea:	e7fe      	b.n	80089ea <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d103      	bne.n	80089fa <xQueueGenericSend+0x3e>
 80089f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d101      	bne.n	80089fe <xQueueGenericSend+0x42>
 80089fa:	2301      	movs	r3, #1
 80089fc:	e000      	b.n	8008a00 <xQueueGenericSend+0x44>
 80089fe:	2300      	movs	r3, #0
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d109      	bne.n	8008a18 <xQueueGenericSend+0x5c>
 8008a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a08:	f383 8811 	msr	BASEPRI, r3
 8008a0c:	f3bf 8f6f 	isb	sy
 8008a10:	f3bf 8f4f 	dsb	sy
 8008a14:	627b      	str	r3, [r7, #36]	; 0x24
 8008a16:	e7fe      	b.n	8008a16 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	2b02      	cmp	r3, #2
 8008a1c:	d103      	bne.n	8008a26 <xQueueGenericSend+0x6a>
 8008a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a22:	2b01      	cmp	r3, #1
 8008a24:	d101      	bne.n	8008a2a <xQueueGenericSend+0x6e>
 8008a26:	2301      	movs	r3, #1
 8008a28:	e000      	b.n	8008a2c <xQueueGenericSend+0x70>
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d109      	bne.n	8008a44 <xQueueGenericSend+0x88>
 8008a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a34:	f383 8811 	msr	BASEPRI, r3
 8008a38:	f3bf 8f6f 	isb	sy
 8008a3c:	f3bf 8f4f 	dsb	sy
 8008a40:	623b      	str	r3, [r7, #32]
 8008a42:	e7fe      	b.n	8008a42 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008a44:	f001 f9ea 	bl	8009e1c <xTaskGetSchedulerState>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d102      	bne.n	8008a54 <xQueueGenericSend+0x98>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d101      	bne.n	8008a58 <xQueueGenericSend+0x9c>
 8008a54:	2301      	movs	r3, #1
 8008a56:	e000      	b.n	8008a5a <xQueueGenericSend+0x9e>
 8008a58:	2300      	movs	r3, #0
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d109      	bne.n	8008a72 <xQueueGenericSend+0xb6>
 8008a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a62:	f383 8811 	msr	BASEPRI, r3
 8008a66:	f3bf 8f6f 	isb	sy
 8008a6a:	f3bf 8f4f 	dsb	sy
 8008a6e:	61fb      	str	r3, [r7, #28]
 8008a70:	e7fe      	b.n	8008a70 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008a72:	f001 fd01 	bl	800a478 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a7e:	429a      	cmp	r2, r3
 8008a80:	d302      	bcc.n	8008a88 <xQueueGenericSend+0xcc>
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	2b02      	cmp	r3, #2
 8008a86:	d129      	bne.n	8008adc <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008a88:	683a      	ldr	r2, [r7, #0]
 8008a8a:	68b9      	ldr	r1, [r7, #8]
 8008a8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a8e:	f000 fad7 	bl	8009040 <prvCopyDataToQueue>
 8008a92:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d010      	beq.n	8008abe <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a9e:	3324      	adds	r3, #36	; 0x24
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f001 f801 	bl	8009aa8 <xTaskRemoveFromEventList>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d013      	beq.n	8008ad4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008aac:	4b3f      	ldr	r3, [pc, #252]	; (8008bac <xQueueGenericSend+0x1f0>)
 8008aae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ab2:	601a      	str	r2, [r3, #0]
 8008ab4:	f3bf 8f4f 	dsb	sy
 8008ab8:	f3bf 8f6f 	isb	sy
 8008abc:	e00a      	b.n	8008ad4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d007      	beq.n	8008ad4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008ac4:	4b39      	ldr	r3, [pc, #228]	; (8008bac <xQueueGenericSend+0x1f0>)
 8008ac6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008aca:	601a      	str	r2, [r3, #0]
 8008acc:	f3bf 8f4f 	dsb	sy
 8008ad0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008ad4:	f001 fcfe 	bl	800a4d4 <vPortExitCritical>
				return pdPASS;
 8008ad8:	2301      	movs	r3, #1
 8008ada:	e063      	b.n	8008ba4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d103      	bne.n	8008aea <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008ae2:	f001 fcf7 	bl	800a4d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	e05c      	b.n	8008ba4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d106      	bne.n	8008afe <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008af0:	f107 0314 	add.w	r3, r7, #20
 8008af4:	4618      	mov	r0, r3
 8008af6:	f001 f839 	bl	8009b6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008afa:	2301      	movs	r3, #1
 8008afc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008afe:	f001 fce9 	bl	800a4d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008b02:	f000 fded 	bl	80096e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008b06:	f001 fcb7 	bl	800a478 <vPortEnterCritical>
 8008b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008b10:	b25b      	sxtb	r3, r3
 8008b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b16:	d103      	bne.n	8008b20 <xQueueGenericSend+0x164>
 8008b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b26:	b25b      	sxtb	r3, r3
 8008b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b2c:	d103      	bne.n	8008b36 <xQueueGenericSend+0x17a>
 8008b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b30:	2200      	movs	r2, #0
 8008b32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008b36:	f001 fccd 	bl	800a4d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008b3a:	1d3a      	adds	r2, r7, #4
 8008b3c:	f107 0314 	add.w	r3, r7, #20
 8008b40:	4611      	mov	r1, r2
 8008b42:	4618      	mov	r0, r3
 8008b44:	f001 f828 	bl	8009b98 <xTaskCheckForTimeOut>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d124      	bne.n	8008b98 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008b4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b50:	f000 fb6e 	bl	8009230 <prvIsQueueFull>
 8008b54:	4603      	mov	r3, r0
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d018      	beq.n	8008b8c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b5c:	3310      	adds	r3, #16
 8008b5e:	687a      	ldr	r2, [r7, #4]
 8008b60:	4611      	mov	r1, r2
 8008b62:	4618      	mov	r0, r3
 8008b64:	f000 ff7c 	bl	8009a60 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008b68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b6a:	f000 faf9 	bl	8009160 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008b6e:	f000 fdc5 	bl	80096fc <xTaskResumeAll>
 8008b72:	4603      	mov	r3, r0
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	f47f af7c 	bne.w	8008a72 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8008b7a:	4b0c      	ldr	r3, [pc, #48]	; (8008bac <xQueueGenericSend+0x1f0>)
 8008b7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b80:	601a      	str	r2, [r3, #0]
 8008b82:	f3bf 8f4f 	dsb	sy
 8008b86:	f3bf 8f6f 	isb	sy
 8008b8a:	e772      	b.n	8008a72 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008b8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b8e:	f000 fae7 	bl	8009160 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008b92:	f000 fdb3 	bl	80096fc <xTaskResumeAll>
 8008b96:	e76c      	b.n	8008a72 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008b98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b9a:	f000 fae1 	bl	8009160 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008b9e:	f000 fdad 	bl	80096fc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008ba2:	2300      	movs	r3, #0
		}
	}
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3738      	adds	r7, #56	; 0x38
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}
 8008bac:	e000ed04 	.word	0xe000ed04

08008bb0 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b08e      	sub	sp, #56	; 0x38
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
 8008bb8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d109      	bne.n	8008bd8 <xQueueGiveFromISR+0x28>
 8008bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bc8:	f383 8811 	msr	BASEPRI, r3
 8008bcc:	f3bf 8f6f 	isb	sy
 8008bd0:	f3bf 8f4f 	dsb	sy
 8008bd4:	623b      	str	r3, [r7, #32]
 8008bd6:	e7fe      	b.n	8008bd6 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d009      	beq.n	8008bf4 <xQueueGiveFromISR+0x44>
 8008be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008be4:	f383 8811 	msr	BASEPRI, r3
 8008be8:	f3bf 8f6f 	isb	sy
 8008bec:	f3bf 8f4f 	dsb	sy
 8008bf0:	61fb      	str	r3, [r7, #28]
 8008bf2:	e7fe      	b.n	8008bf2 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8008bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d103      	bne.n	8008c04 <xQueueGiveFromISR+0x54>
 8008bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d101      	bne.n	8008c08 <xQueueGiveFromISR+0x58>
 8008c04:	2301      	movs	r3, #1
 8008c06:	e000      	b.n	8008c0a <xQueueGiveFromISR+0x5a>
 8008c08:	2300      	movs	r3, #0
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d109      	bne.n	8008c22 <xQueueGiveFromISR+0x72>
 8008c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c12:	f383 8811 	msr	BASEPRI, r3
 8008c16:	f3bf 8f6f 	isb	sy
 8008c1a:	f3bf 8f4f 	dsb	sy
 8008c1e:	61bb      	str	r3, [r7, #24]
 8008c20:	e7fe      	b.n	8008c20 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008c22:	f001 fce3 	bl	800a5ec <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008c26:	f3ef 8211 	mrs	r2, BASEPRI
 8008c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c2e:	f383 8811 	msr	BASEPRI, r3
 8008c32:	f3bf 8f6f 	isb	sy
 8008c36:	f3bf 8f4f 	dsb	sy
 8008c3a:	617a      	str	r2, [r7, #20]
 8008c3c:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008c3e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008c40:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c46:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c4e:	429a      	cmp	r2, r3
 8008c50:	d22b      	bcs.n	8008caa <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c5e:	1c5a      	adds	r2, r3, #1
 8008c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c62:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008c64:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c6c:	d112      	bne.n	8008c94 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d016      	beq.n	8008ca4 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c78:	3324      	adds	r3, #36	; 0x24
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f000 ff14 	bl	8009aa8 <xTaskRemoveFromEventList>
 8008c80:	4603      	mov	r3, r0
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d00e      	beq.n	8008ca4 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d00b      	beq.n	8008ca4 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	2201      	movs	r2, #1
 8008c90:	601a      	str	r2, [r3, #0]
 8008c92:	e007      	b.n	8008ca4 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008c94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c98:	3301      	adds	r3, #1
 8008c9a:	b2db      	uxtb	r3, r3
 8008c9c:	b25a      	sxtb	r2, r3
 8008c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ca0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	637b      	str	r3, [r7, #52]	; 0x34
 8008ca8:	e001      	b.n	8008cae <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008caa:	2300      	movs	r3, #0
 8008cac:	637b      	str	r3, [r7, #52]	; 0x34
 8008cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cb0:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008cb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	3738      	adds	r7, #56	; 0x38
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}
	...

08008cc4 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b08e      	sub	sp, #56	; 0x38
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
 8008ccc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d109      	bne.n	8008cf4 <xQueueSemaphoreTake+0x30>
	__asm volatile
 8008ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ce4:	f383 8811 	msr	BASEPRI, r3
 8008ce8:	f3bf 8f6f 	isb	sy
 8008cec:	f3bf 8f4f 	dsb	sy
 8008cf0:	623b      	str	r3, [r7, #32]
 8008cf2:	e7fe      	b.n	8008cf2 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d009      	beq.n	8008d10 <xQueueSemaphoreTake+0x4c>
 8008cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d00:	f383 8811 	msr	BASEPRI, r3
 8008d04:	f3bf 8f6f 	isb	sy
 8008d08:	f3bf 8f4f 	dsb	sy
 8008d0c:	61fb      	str	r3, [r7, #28]
 8008d0e:	e7fe      	b.n	8008d0e <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008d10:	f001 f884 	bl	8009e1c <xTaskGetSchedulerState>
 8008d14:	4603      	mov	r3, r0
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d102      	bne.n	8008d20 <xQueueSemaphoreTake+0x5c>
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d101      	bne.n	8008d24 <xQueueSemaphoreTake+0x60>
 8008d20:	2301      	movs	r3, #1
 8008d22:	e000      	b.n	8008d26 <xQueueSemaphoreTake+0x62>
 8008d24:	2300      	movs	r3, #0
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d109      	bne.n	8008d3e <xQueueSemaphoreTake+0x7a>
 8008d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d2e:	f383 8811 	msr	BASEPRI, r3
 8008d32:	f3bf 8f6f 	isb	sy
 8008d36:	f3bf 8f4f 	dsb	sy
 8008d3a:	61bb      	str	r3, [r7, #24]
 8008d3c:	e7fe      	b.n	8008d3c <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8008d3e:	f001 fb9b 	bl	800a478 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d46:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d024      	beq.n	8008d98 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d50:	1e5a      	subs	r2, r3, #1
 8008d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d54:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d104      	bne.n	8008d68 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8008d5e:	f001 fa23 	bl	800a1a8 <pvTaskIncrementMutexHeldCount>
 8008d62:	4602      	mov	r2, r0
 8008d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d66:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d6a:	691b      	ldr	r3, [r3, #16]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d00f      	beq.n	8008d90 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d72:	3310      	adds	r3, #16
 8008d74:	4618      	mov	r0, r3
 8008d76:	f000 fe97 	bl	8009aa8 <xTaskRemoveFromEventList>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d007      	beq.n	8008d90 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008d80:	4b53      	ldr	r3, [pc, #332]	; (8008ed0 <xQueueSemaphoreTake+0x20c>)
 8008d82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d86:	601a      	str	r2, [r3, #0]
 8008d88:	f3bf 8f4f 	dsb	sy
 8008d8c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008d90:	f001 fba0 	bl	800a4d4 <vPortExitCritical>
				return pdPASS;
 8008d94:	2301      	movs	r3, #1
 8008d96:	e096      	b.n	8008ec6 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d110      	bne.n	8008dc0 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d009      	beq.n	8008db8 <xQueueSemaphoreTake+0xf4>
 8008da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008da8:	f383 8811 	msr	BASEPRI, r3
 8008dac:	f3bf 8f6f 	isb	sy
 8008db0:	f3bf 8f4f 	dsb	sy
 8008db4:	617b      	str	r3, [r7, #20]
 8008db6:	e7fe      	b.n	8008db6 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008db8:	f001 fb8c 	bl	800a4d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	e082      	b.n	8008ec6 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d106      	bne.n	8008dd4 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008dc6:	f107 030c 	add.w	r3, r7, #12
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f000 fece 	bl	8009b6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008dd4:	f001 fb7e 	bl	800a4d4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008dd8:	f000 fc82 	bl	80096e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008ddc:	f001 fb4c 	bl	800a478 <vPortEnterCritical>
 8008de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008de2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008de6:	b25b      	sxtb	r3, r3
 8008de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dec:	d103      	bne.n	8008df6 <xQueueSemaphoreTake+0x132>
 8008dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008df0:	2200      	movs	r2, #0
 8008df2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008df8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008dfc:	b25b      	sxtb	r3, r3
 8008dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e02:	d103      	bne.n	8008e0c <xQueueSemaphoreTake+0x148>
 8008e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e06:	2200      	movs	r2, #0
 8008e08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008e0c:	f001 fb62 	bl	800a4d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008e10:	463a      	mov	r2, r7
 8008e12:	f107 030c 	add.w	r3, r7, #12
 8008e16:	4611      	mov	r1, r2
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f000 febd 	bl	8009b98 <xTaskCheckForTimeOut>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d132      	bne.n	8008e8a <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e24:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e26:	f000 f9ed 	bl	8009204 <prvIsQueueEmpty>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d026      	beq.n	8008e7e <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d109      	bne.n	8008e4c <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8008e38:	f001 fb1e 	bl	800a478 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8008e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e3e:	685b      	ldr	r3, [r3, #4]
 8008e40:	4618      	mov	r0, r3
 8008e42:	f001 f809 	bl	8009e58 <xTaskPriorityInherit>
 8008e46:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008e48:	f001 fb44 	bl	800a4d4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e4e:	3324      	adds	r3, #36	; 0x24
 8008e50:	683a      	ldr	r2, [r7, #0]
 8008e52:	4611      	mov	r1, r2
 8008e54:	4618      	mov	r0, r3
 8008e56:	f000 fe03 	bl	8009a60 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008e5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e5c:	f000 f980 	bl	8009160 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008e60:	f000 fc4c 	bl	80096fc <xTaskResumeAll>
 8008e64:	4603      	mov	r3, r0
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	f47f af69 	bne.w	8008d3e <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8008e6c:	4b18      	ldr	r3, [pc, #96]	; (8008ed0 <xQueueSemaphoreTake+0x20c>)
 8008e6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e72:	601a      	str	r2, [r3, #0]
 8008e74:	f3bf 8f4f 	dsb	sy
 8008e78:	f3bf 8f6f 	isb	sy
 8008e7c:	e75f      	b.n	8008d3e <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008e7e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e80:	f000 f96e 	bl	8009160 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008e84:	f000 fc3a 	bl	80096fc <xTaskResumeAll>
 8008e88:	e759      	b.n	8008d3e <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008e8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e8c:	f000 f968 	bl	8009160 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008e90:	f000 fc34 	bl	80096fc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e94:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e96:	f000 f9b5 	bl	8009204 <prvIsQueueEmpty>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	f43f af4e 	beq.w	8008d3e <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d00d      	beq.n	8008ec4 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8008ea8:	f001 fae6 	bl	800a478 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008eac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008eae:	f000 f8b0 	bl	8009012 <prvGetDisinheritPriorityAfterTimeout>
 8008eb2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8008eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eb6:	685b      	ldr	r3, [r3, #4]
 8008eb8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f001 f8d6 	bl	800a06c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008ec0:	f001 fb08 	bl	800a4d4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008ec4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	3738      	adds	r7, #56	; 0x38
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}
 8008ece:	bf00      	nop
 8008ed0:	e000ed04 	.word	0xe000ed04

08008ed4 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b08e      	sub	sp, #56	; 0x38
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	60f8      	str	r0, [r7, #12]
 8008edc:	60b9      	str	r1, [r7, #8]
 8008ede:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d109      	bne.n	8008efe <xQueueReceiveFromISR+0x2a>
 8008eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eee:	f383 8811 	msr	BASEPRI, r3
 8008ef2:	f3bf 8f6f 	isb	sy
 8008ef6:	f3bf 8f4f 	dsb	sy
 8008efa:	623b      	str	r3, [r7, #32]
 8008efc:	e7fe      	b.n	8008efc <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d103      	bne.n	8008f0c <xQueueReceiveFromISR+0x38>
 8008f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d101      	bne.n	8008f10 <xQueueReceiveFromISR+0x3c>
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	e000      	b.n	8008f12 <xQueueReceiveFromISR+0x3e>
 8008f10:	2300      	movs	r3, #0
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d109      	bne.n	8008f2a <xQueueReceiveFromISR+0x56>
 8008f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f1a:	f383 8811 	msr	BASEPRI, r3
 8008f1e:	f3bf 8f6f 	isb	sy
 8008f22:	f3bf 8f4f 	dsb	sy
 8008f26:	61fb      	str	r3, [r7, #28]
 8008f28:	e7fe      	b.n	8008f28 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008f2a:	f001 fb5f 	bl	800a5ec <vPortValidateInterruptPriority>
	__asm volatile
 8008f2e:	f3ef 8211 	mrs	r2, BASEPRI
 8008f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f36:	f383 8811 	msr	BASEPRI, r3
 8008f3a:	f3bf 8f6f 	isb	sy
 8008f3e:	f3bf 8f4f 	dsb	sy
 8008f42:	61ba      	str	r2, [r7, #24]
 8008f44:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008f46:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008f48:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f4e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d02f      	beq.n	8008fb6 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008f5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008f60:	68b9      	ldr	r1, [r7, #8]
 8008f62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f64:	f000 f8d6 	bl	8009114 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f6a:	1e5a      	subs	r2, r3, #1
 8008f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f6e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008f70:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f78:	d112      	bne.n	8008fa0 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f7c:	691b      	ldr	r3, [r3, #16]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d016      	beq.n	8008fb0 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f84:	3310      	adds	r3, #16
 8008f86:	4618      	mov	r0, r3
 8008f88:	f000 fd8e 	bl	8009aa8 <xTaskRemoveFromEventList>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d00e      	beq.n	8008fb0 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d00b      	beq.n	8008fb0 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2201      	movs	r2, #1
 8008f9c:	601a      	str	r2, [r3, #0]
 8008f9e:	e007      	b.n	8008fb0 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008fa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008fa4:	3301      	adds	r3, #1
 8008fa6:	b2db      	uxtb	r3, r3
 8008fa8:	b25a      	sxtb	r2, r3
 8008faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	637b      	str	r3, [r7, #52]	; 0x34
 8008fb4:	e001      	b.n	8008fba <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	637b      	str	r3, [r7, #52]	; 0x34
 8008fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fbc:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	3738      	adds	r7, #56	; 0x38
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}

08008fce <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8008fce:	b580      	push	{r7, lr}
 8008fd0:	b084      	sub	sp, #16
 8008fd2:	af00      	add	r7, sp, #0
 8008fd4:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d109      	bne.n	8008ff4 <vQueueDelete+0x26>
	__asm volatile
 8008fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fe4:	f383 8811 	msr	BASEPRI, r3
 8008fe8:	f3bf 8f6f 	isb	sy
 8008fec:	f3bf 8f4f 	dsb	sy
 8008ff0:	60bb      	str	r3, [r7, #8]
 8008ff2:	e7fe      	b.n	8008ff2 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008ff4:	68f8      	ldr	r0, [r7, #12]
 8008ff6:	f000 f933 	bl	8009260 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009000:	2b00      	cmp	r3, #0
 8009002:	d102      	bne.n	800900a <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8009004:	68f8      	ldr	r0, [r7, #12]
 8009006:	f001 fbef 	bl	800a7e8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800900a:	bf00      	nop
 800900c:	3710      	adds	r7, #16
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}

08009012 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009012:	b480      	push	{r7}
 8009014:	b085      	sub	sp, #20
 8009016:	af00      	add	r7, sp, #0
 8009018:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800901e:	2b00      	cmp	r3, #0
 8009020:	d006      	beq.n	8009030 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f1c3 0307 	rsb	r3, r3, #7
 800902c:	60fb      	str	r3, [r7, #12]
 800902e:	e001      	b.n	8009034 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009030:	2300      	movs	r3, #0
 8009032:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009034:	68fb      	ldr	r3, [r7, #12]
	}
 8009036:	4618      	mov	r0, r3
 8009038:	3714      	adds	r7, #20
 800903a:	46bd      	mov	sp, r7
 800903c:	bc80      	pop	{r7}
 800903e:	4770      	bx	lr

08009040 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b086      	sub	sp, #24
 8009044:	af00      	add	r7, sp, #0
 8009046:	60f8      	str	r0, [r7, #12]
 8009048:	60b9      	str	r1, [r7, #8]
 800904a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800904c:	2300      	movs	r3, #0
 800904e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009054:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800905a:	2b00      	cmp	r3, #0
 800905c:	d10d      	bne.n	800907a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d14d      	bne.n	8009102 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	685b      	ldr	r3, [r3, #4]
 800906a:	4618      	mov	r0, r3
 800906c:	f000 ff7a 	bl	8009f64 <xTaskPriorityDisinherit>
 8009070:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	2200      	movs	r2, #0
 8009076:	605a      	str	r2, [r3, #4]
 8009078:	e043      	b.n	8009102 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d119      	bne.n	80090b4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	6898      	ldr	r0, [r3, #8]
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009088:	461a      	mov	r2, r3
 800908a:	68b9      	ldr	r1, [r7, #8]
 800908c:	f001 fcf8 	bl	800aa80 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	689a      	ldr	r2, [r3, #8]
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009098:	441a      	add	r2, r3
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	689a      	ldr	r2, [r3, #8]
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	685b      	ldr	r3, [r3, #4]
 80090a6:	429a      	cmp	r2, r3
 80090a8:	d32b      	bcc.n	8009102 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681a      	ldr	r2, [r3, #0]
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	609a      	str	r2, [r3, #8]
 80090b2:	e026      	b.n	8009102 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	68d8      	ldr	r0, [r3, #12]
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090bc:	461a      	mov	r2, r3
 80090be:	68b9      	ldr	r1, [r7, #8]
 80090c0:	f001 fcde 	bl	800aa80 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	68da      	ldr	r2, [r3, #12]
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090cc:	425b      	negs	r3, r3
 80090ce:	441a      	add	r2, r3
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	68da      	ldr	r2, [r3, #12]
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	429a      	cmp	r2, r3
 80090de:	d207      	bcs.n	80090f0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	685a      	ldr	r2, [r3, #4]
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090e8:	425b      	negs	r3, r3
 80090ea:	441a      	add	r2, r3
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2b02      	cmp	r3, #2
 80090f4:	d105      	bne.n	8009102 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80090f6:	693b      	ldr	r3, [r7, #16]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d002      	beq.n	8009102 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80090fc:	693b      	ldr	r3, [r7, #16]
 80090fe:	3b01      	subs	r3, #1
 8009100:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009102:	693b      	ldr	r3, [r7, #16]
 8009104:	1c5a      	adds	r2, r3, #1
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800910a:	697b      	ldr	r3, [r7, #20]
}
 800910c:	4618      	mov	r0, r3
 800910e:	3718      	adds	r7, #24
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}

08009114 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b082      	sub	sp, #8
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
 800911c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009122:	2b00      	cmp	r3, #0
 8009124:	d018      	beq.n	8009158 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	68da      	ldr	r2, [r3, #12]
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800912e:	441a      	add	r2, r3
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	68da      	ldr	r2, [r3, #12]
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	685b      	ldr	r3, [r3, #4]
 800913c:	429a      	cmp	r2, r3
 800913e:	d303      	bcc.n	8009148 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681a      	ldr	r2, [r3, #0]
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	68d9      	ldr	r1, [r3, #12]
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009150:	461a      	mov	r2, r3
 8009152:	6838      	ldr	r0, [r7, #0]
 8009154:	f001 fc94 	bl	800aa80 <memcpy>
	}
}
 8009158:	bf00      	nop
 800915a:	3708      	adds	r7, #8
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}

08009160 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b084      	sub	sp, #16
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009168:	f001 f986 	bl	800a478 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009172:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009174:	e011      	b.n	800919a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800917a:	2b00      	cmp	r3, #0
 800917c:	d012      	beq.n	80091a4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	3324      	adds	r3, #36	; 0x24
 8009182:	4618      	mov	r0, r3
 8009184:	f000 fc90 	bl	8009aa8 <xTaskRemoveFromEventList>
 8009188:	4603      	mov	r3, r0
 800918a:	2b00      	cmp	r3, #0
 800918c:	d001      	beq.n	8009192 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800918e:	f000 fd63 	bl	8009c58 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009192:	7bfb      	ldrb	r3, [r7, #15]
 8009194:	3b01      	subs	r3, #1
 8009196:	b2db      	uxtb	r3, r3
 8009198:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800919a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	dce9      	bgt.n	8009176 <prvUnlockQueue+0x16>
 80091a2:	e000      	b.n	80091a6 <prvUnlockQueue+0x46>
					break;
 80091a4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	22ff      	movs	r2, #255	; 0xff
 80091aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80091ae:	f001 f991 	bl	800a4d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80091b2:	f001 f961 	bl	800a478 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80091bc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80091be:	e011      	b.n	80091e4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	691b      	ldr	r3, [r3, #16]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d012      	beq.n	80091ee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	3310      	adds	r3, #16
 80091cc:	4618      	mov	r0, r3
 80091ce:	f000 fc6b 	bl	8009aa8 <xTaskRemoveFromEventList>
 80091d2:	4603      	mov	r3, r0
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d001      	beq.n	80091dc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80091d8:	f000 fd3e 	bl	8009c58 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80091dc:	7bbb      	ldrb	r3, [r7, #14]
 80091de:	3b01      	subs	r3, #1
 80091e0:	b2db      	uxtb	r3, r3
 80091e2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80091e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	dce9      	bgt.n	80091c0 <prvUnlockQueue+0x60>
 80091ec:	e000      	b.n	80091f0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80091ee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	22ff      	movs	r2, #255	; 0xff
 80091f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80091f8:	f001 f96c 	bl	800a4d4 <vPortExitCritical>
}
 80091fc:	bf00      	nop
 80091fe:	3710      	adds	r7, #16
 8009200:	46bd      	mov	sp, r7
 8009202:	bd80      	pop	{r7, pc}

08009204 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b084      	sub	sp, #16
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800920c:	f001 f934 	bl	800a478 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009214:	2b00      	cmp	r3, #0
 8009216:	d102      	bne.n	800921e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009218:	2301      	movs	r3, #1
 800921a:	60fb      	str	r3, [r7, #12]
 800921c:	e001      	b.n	8009222 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800921e:	2300      	movs	r3, #0
 8009220:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009222:	f001 f957 	bl	800a4d4 <vPortExitCritical>

	return xReturn;
 8009226:	68fb      	ldr	r3, [r7, #12]
}
 8009228:	4618      	mov	r0, r3
 800922a:	3710      	adds	r7, #16
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}

08009230 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b084      	sub	sp, #16
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009238:	f001 f91e 	bl	800a478 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009244:	429a      	cmp	r2, r3
 8009246:	d102      	bne.n	800924e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009248:	2301      	movs	r3, #1
 800924a:	60fb      	str	r3, [r7, #12]
 800924c:	e001      	b.n	8009252 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800924e:	2300      	movs	r3, #0
 8009250:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009252:	f001 f93f 	bl	800a4d4 <vPortExitCritical>

	return xReturn;
 8009256:	68fb      	ldr	r3, [r7, #12]
}
 8009258:	4618      	mov	r0, r3
 800925a:	3710      	adds	r7, #16
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}

08009260 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009260:	b480      	push	{r7}
 8009262:	b085      	sub	sp, #20
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009268:	2300      	movs	r3, #0
 800926a:	60fb      	str	r3, [r7, #12]
 800926c:	e016      	b.n	800929c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800926e:	4a0f      	ldr	r2, [pc, #60]	; (80092ac <vQueueUnregisterQueue+0x4c>)
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	00db      	lsls	r3, r3, #3
 8009274:	4413      	add	r3, r2
 8009276:	685b      	ldr	r3, [r3, #4]
 8009278:	687a      	ldr	r2, [r7, #4]
 800927a:	429a      	cmp	r2, r3
 800927c:	d10b      	bne.n	8009296 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800927e:	4a0b      	ldr	r2, [pc, #44]	; (80092ac <vQueueUnregisterQueue+0x4c>)
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	2100      	movs	r1, #0
 8009284:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009288:	4a08      	ldr	r2, [pc, #32]	; (80092ac <vQueueUnregisterQueue+0x4c>)
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	00db      	lsls	r3, r3, #3
 800928e:	4413      	add	r3, r2
 8009290:	2200      	movs	r2, #0
 8009292:	605a      	str	r2, [r3, #4]
				break;
 8009294:	e005      	b.n	80092a2 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	3301      	adds	r3, #1
 800929a:	60fb      	str	r3, [r7, #12]
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	2b07      	cmp	r3, #7
 80092a0:	d9e5      	bls.n	800926e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80092a2:	bf00      	nop
 80092a4:	3714      	adds	r7, #20
 80092a6:	46bd      	mov	sp, r7
 80092a8:	bc80      	pop	{r7}
 80092aa:	4770      	bx	lr
 80092ac:	20004b6c 	.word	0x20004b6c

080092b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b08e      	sub	sp, #56	; 0x38
 80092b4:	af04      	add	r7, sp, #16
 80092b6:	60f8      	str	r0, [r7, #12]
 80092b8:	60b9      	str	r1, [r7, #8]
 80092ba:	607a      	str	r2, [r7, #4]
 80092bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80092be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d109      	bne.n	80092d8 <xTaskCreateStatic+0x28>
 80092c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092c8:	f383 8811 	msr	BASEPRI, r3
 80092cc:	f3bf 8f6f 	isb	sy
 80092d0:	f3bf 8f4f 	dsb	sy
 80092d4:	623b      	str	r3, [r7, #32]
 80092d6:	e7fe      	b.n	80092d6 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80092d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d109      	bne.n	80092f2 <xTaskCreateStatic+0x42>
 80092de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092e2:	f383 8811 	msr	BASEPRI, r3
 80092e6:	f3bf 8f6f 	isb	sy
 80092ea:	f3bf 8f4f 	dsb	sy
 80092ee:	61fb      	str	r3, [r7, #28]
 80092f0:	e7fe      	b.n	80092f0 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80092f2:	2354      	movs	r3, #84	; 0x54
 80092f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80092f6:	693b      	ldr	r3, [r7, #16]
 80092f8:	2b54      	cmp	r3, #84	; 0x54
 80092fa:	d009      	beq.n	8009310 <xTaskCreateStatic+0x60>
 80092fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009300:	f383 8811 	msr	BASEPRI, r3
 8009304:	f3bf 8f6f 	isb	sy
 8009308:	f3bf 8f4f 	dsb	sy
 800930c:	61bb      	str	r3, [r7, #24]
 800930e:	e7fe      	b.n	800930e <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009312:	2b00      	cmp	r3, #0
 8009314:	d01e      	beq.n	8009354 <xTaskCreateStatic+0xa4>
 8009316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009318:	2b00      	cmp	r3, #0
 800931a:	d01b      	beq.n	8009354 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800931c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800931e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009322:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009324:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009328:	2202      	movs	r2, #2
 800932a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800932e:	2300      	movs	r3, #0
 8009330:	9303      	str	r3, [sp, #12]
 8009332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009334:	9302      	str	r3, [sp, #8]
 8009336:	f107 0314 	add.w	r3, r7, #20
 800933a:	9301      	str	r3, [sp, #4]
 800933c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800933e:	9300      	str	r3, [sp, #0]
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	687a      	ldr	r2, [r7, #4]
 8009344:	68b9      	ldr	r1, [r7, #8]
 8009346:	68f8      	ldr	r0, [r7, #12]
 8009348:	f000 f850 	bl	80093ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800934c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800934e:	f000 f8cb 	bl	80094e8 <prvAddNewTaskToReadyList>
 8009352:	e001      	b.n	8009358 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8009354:	2300      	movs	r3, #0
 8009356:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009358:	697b      	ldr	r3, [r7, #20]
	}
 800935a:	4618      	mov	r0, r3
 800935c:	3728      	adds	r7, #40	; 0x28
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}

08009362 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009362:	b580      	push	{r7, lr}
 8009364:	b08c      	sub	sp, #48	; 0x30
 8009366:	af04      	add	r7, sp, #16
 8009368:	60f8      	str	r0, [r7, #12]
 800936a:	60b9      	str	r1, [r7, #8]
 800936c:	603b      	str	r3, [r7, #0]
 800936e:	4613      	mov	r3, r2
 8009370:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009372:	88fb      	ldrh	r3, [r7, #6]
 8009374:	009b      	lsls	r3, r3, #2
 8009376:	4618      	mov	r0, r3
 8009378:	f001 f974 	bl	800a664 <pvPortMalloc>
 800937c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800937e:	697b      	ldr	r3, [r7, #20]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d00e      	beq.n	80093a2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8009384:	2054      	movs	r0, #84	; 0x54
 8009386:	f001 f96d 	bl	800a664 <pvPortMalloc>
 800938a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800938c:	69fb      	ldr	r3, [r7, #28]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d003      	beq.n	800939a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009392:	69fb      	ldr	r3, [r7, #28]
 8009394:	697a      	ldr	r2, [r7, #20]
 8009396:	631a      	str	r2, [r3, #48]	; 0x30
 8009398:	e005      	b.n	80093a6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800939a:	6978      	ldr	r0, [r7, #20]
 800939c:	f001 fa24 	bl	800a7e8 <vPortFree>
 80093a0:	e001      	b.n	80093a6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80093a2:	2300      	movs	r3, #0
 80093a4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80093a6:	69fb      	ldr	r3, [r7, #28]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d017      	beq.n	80093dc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80093ac:	69fb      	ldr	r3, [r7, #28]
 80093ae:	2200      	movs	r2, #0
 80093b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80093b4:	88fa      	ldrh	r2, [r7, #6]
 80093b6:	2300      	movs	r3, #0
 80093b8:	9303      	str	r3, [sp, #12]
 80093ba:	69fb      	ldr	r3, [r7, #28]
 80093bc:	9302      	str	r3, [sp, #8]
 80093be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093c0:	9301      	str	r3, [sp, #4]
 80093c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093c4:	9300      	str	r3, [sp, #0]
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	68b9      	ldr	r1, [r7, #8]
 80093ca:	68f8      	ldr	r0, [r7, #12]
 80093cc:	f000 f80e 	bl	80093ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80093d0:	69f8      	ldr	r0, [r7, #28]
 80093d2:	f000 f889 	bl	80094e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80093d6:	2301      	movs	r3, #1
 80093d8:	61bb      	str	r3, [r7, #24]
 80093da:	e002      	b.n	80093e2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80093dc:	f04f 33ff 	mov.w	r3, #4294967295
 80093e0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80093e2:	69bb      	ldr	r3, [r7, #24]
	}
 80093e4:	4618      	mov	r0, r3
 80093e6:	3720      	adds	r7, #32
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}

080093ec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b088      	sub	sp, #32
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	60f8      	str	r0, [r7, #12]
 80093f4:	60b9      	str	r1, [r7, #8]
 80093f6:	607a      	str	r2, [r7, #4]
 80093f8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80093fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009404:	3b01      	subs	r3, #1
 8009406:	009b      	lsls	r3, r3, #2
 8009408:	4413      	add	r3, r2
 800940a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800940c:	69bb      	ldr	r3, [r7, #24]
 800940e:	f023 0307 	bic.w	r3, r3, #7
 8009412:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009414:	69bb      	ldr	r3, [r7, #24]
 8009416:	f003 0307 	and.w	r3, r3, #7
 800941a:	2b00      	cmp	r3, #0
 800941c:	d009      	beq.n	8009432 <prvInitialiseNewTask+0x46>
 800941e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009422:	f383 8811 	msr	BASEPRI, r3
 8009426:	f3bf 8f6f 	isb	sy
 800942a:	f3bf 8f4f 	dsb	sy
 800942e:	617b      	str	r3, [r7, #20]
 8009430:	e7fe      	b.n	8009430 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009432:	2300      	movs	r3, #0
 8009434:	61fb      	str	r3, [r7, #28]
 8009436:	e012      	b.n	800945e <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009438:	68ba      	ldr	r2, [r7, #8]
 800943a:	69fb      	ldr	r3, [r7, #28]
 800943c:	4413      	add	r3, r2
 800943e:	7819      	ldrb	r1, [r3, #0]
 8009440:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009442:	69fb      	ldr	r3, [r7, #28]
 8009444:	4413      	add	r3, r2
 8009446:	3334      	adds	r3, #52	; 0x34
 8009448:	460a      	mov	r2, r1
 800944a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800944c:	68ba      	ldr	r2, [r7, #8]
 800944e:	69fb      	ldr	r3, [r7, #28]
 8009450:	4413      	add	r3, r2
 8009452:	781b      	ldrb	r3, [r3, #0]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d006      	beq.n	8009466 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009458:	69fb      	ldr	r3, [r7, #28]
 800945a:	3301      	adds	r3, #1
 800945c:	61fb      	str	r3, [r7, #28]
 800945e:	69fb      	ldr	r3, [r7, #28]
 8009460:	2b0f      	cmp	r3, #15
 8009462:	d9e9      	bls.n	8009438 <prvInitialiseNewTask+0x4c>
 8009464:	e000      	b.n	8009468 <prvInitialiseNewTask+0x7c>
		{
			break;
 8009466:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800946a:	2200      	movs	r2, #0
 800946c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009472:	2b06      	cmp	r3, #6
 8009474:	d901      	bls.n	800947a <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009476:	2306      	movs	r3, #6
 8009478:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800947a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800947c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800947e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009482:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009484:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8009486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009488:	2200      	movs	r2, #0
 800948a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800948c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800948e:	3304      	adds	r3, #4
 8009490:	4618      	mov	r0, r3
 8009492:	f7ff f8cd 	bl	8008630 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009498:	3318      	adds	r3, #24
 800949a:	4618      	mov	r0, r3
 800949c:	f7ff f8c8 	bl	8008630 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80094a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094a4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094a8:	f1c3 0207 	rsb	r2, r3, #7
 80094ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ae:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80094b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094b4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80094b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094b8:	2200      	movs	r2, #0
 80094ba:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80094bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094be:	2200      	movs	r2, #0
 80094c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80094c4:	683a      	ldr	r2, [r7, #0]
 80094c6:	68f9      	ldr	r1, [r7, #12]
 80094c8:	69b8      	ldr	r0, [r7, #24]
 80094ca:	f000 fee7 	bl	800a29c <pxPortInitialiseStack>
 80094ce:	4602      	mov	r2, r0
 80094d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094d2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80094d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d002      	beq.n	80094e0 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80094da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094de:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80094e0:	bf00      	nop
 80094e2:	3720      	adds	r7, #32
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}

080094e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b082      	sub	sp, #8
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80094f0:	f000 ffc2 	bl	800a478 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80094f4:	4b2a      	ldr	r3, [pc, #168]	; (80095a0 <prvAddNewTaskToReadyList+0xb8>)
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	3301      	adds	r3, #1
 80094fa:	4a29      	ldr	r2, [pc, #164]	; (80095a0 <prvAddNewTaskToReadyList+0xb8>)
 80094fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80094fe:	4b29      	ldr	r3, [pc, #164]	; (80095a4 <prvAddNewTaskToReadyList+0xbc>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d109      	bne.n	800951a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009506:	4a27      	ldr	r2, [pc, #156]	; (80095a4 <prvAddNewTaskToReadyList+0xbc>)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800950c:	4b24      	ldr	r3, [pc, #144]	; (80095a0 <prvAddNewTaskToReadyList+0xb8>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	2b01      	cmp	r3, #1
 8009512:	d110      	bne.n	8009536 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009514:	f000 fbc4 	bl	8009ca0 <prvInitialiseTaskLists>
 8009518:	e00d      	b.n	8009536 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800951a:	4b23      	ldr	r3, [pc, #140]	; (80095a8 <prvAddNewTaskToReadyList+0xc0>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d109      	bne.n	8009536 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009522:	4b20      	ldr	r3, [pc, #128]	; (80095a4 <prvAddNewTaskToReadyList+0xbc>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800952c:	429a      	cmp	r2, r3
 800952e:	d802      	bhi.n	8009536 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009530:	4a1c      	ldr	r2, [pc, #112]	; (80095a4 <prvAddNewTaskToReadyList+0xbc>)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009536:	4b1d      	ldr	r3, [pc, #116]	; (80095ac <prvAddNewTaskToReadyList+0xc4>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	3301      	adds	r3, #1
 800953c:	4a1b      	ldr	r2, [pc, #108]	; (80095ac <prvAddNewTaskToReadyList+0xc4>)
 800953e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009544:	2201      	movs	r2, #1
 8009546:	409a      	lsls	r2, r3
 8009548:	4b19      	ldr	r3, [pc, #100]	; (80095b0 <prvAddNewTaskToReadyList+0xc8>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	4313      	orrs	r3, r2
 800954e:	4a18      	ldr	r2, [pc, #96]	; (80095b0 <prvAddNewTaskToReadyList+0xc8>)
 8009550:	6013      	str	r3, [r2, #0]
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009556:	4613      	mov	r3, r2
 8009558:	009b      	lsls	r3, r3, #2
 800955a:	4413      	add	r3, r2
 800955c:	009b      	lsls	r3, r3, #2
 800955e:	4a15      	ldr	r2, [pc, #84]	; (80095b4 <prvAddNewTaskToReadyList+0xcc>)
 8009560:	441a      	add	r2, r3
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	3304      	adds	r3, #4
 8009566:	4619      	mov	r1, r3
 8009568:	4610      	mov	r0, r2
 800956a:	f7ff f86d 	bl	8008648 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800956e:	f000 ffb1 	bl	800a4d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009572:	4b0d      	ldr	r3, [pc, #52]	; (80095a8 <prvAddNewTaskToReadyList+0xc0>)
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d00e      	beq.n	8009598 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800957a:	4b0a      	ldr	r3, [pc, #40]	; (80095a4 <prvAddNewTaskToReadyList+0xbc>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009584:	429a      	cmp	r2, r3
 8009586:	d207      	bcs.n	8009598 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009588:	4b0b      	ldr	r3, [pc, #44]	; (80095b8 <prvAddNewTaskToReadyList+0xd0>)
 800958a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800958e:	601a      	str	r2, [r3, #0]
 8009590:	f3bf 8f4f 	dsb	sy
 8009594:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009598:	bf00      	nop
 800959a:	3708      	adds	r7, #8
 800959c:	46bd      	mov	sp, r7
 800959e:	bd80      	pop	{r7, pc}
 80095a0:	20000460 	.word	0x20000460
 80095a4:	20000360 	.word	0x20000360
 80095a8:	2000046c 	.word	0x2000046c
 80095ac:	2000047c 	.word	0x2000047c
 80095b0:	20000468 	.word	0x20000468
 80095b4:	20000364 	.word	0x20000364
 80095b8:	e000ed04 	.word	0xe000ed04

080095bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b084      	sub	sp, #16
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80095c4:	2300      	movs	r3, #0
 80095c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d016      	beq.n	80095fc <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80095ce:	4b13      	ldr	r3, [pc, #76]	; (800961c <vTaskDelay+0x60>)
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d009      	beq.n	80095ea <vTaskDelay+0x2e>
 80095d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095da:	f383 8811 	msr	BASEPRI, r3
 80095de:	f3bf 8f6f 	isb	sy
 80095e2:	f3bf 8f4f 	dsb	sy
 80095e6:	60bb      	str	r3, [r7, #8]
 80095e8:	e7fe      	b.n	80095e8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80095ea:	f000 f879 	bl	80096e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80095ee:	2100      	movs	r1, #0
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	f000 fded 	bl	800a1d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80095f6:	f000 f881 	bl	80096fc <xTaskResumeAll>
 80095fa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d107      	bne.n	8009612 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8009602:	4b07      	ldr	r3, [pc, #28]	; (8009620 <vTaskDelay+0x64>)
 8009604:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009608:	601a      	str	r2, [r3, #0]
 800960a:	f3bf 8f4f 	dsb	sy
 800960e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009612:	bf00      	nop
 8009614:	3710      	adds	r7, #16
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}
 800961a:	bf00      	nop
 800961c:	20000488 	.word	0x20000488
 8009620:	e000ed04 	.word	0xe000ed04

08009624 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b08a      	sub	sp, #40	; 0x28
 8009628:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800962a:	2300      	movs	r3, #0
 800962c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800962e:	2300      	movs	r3, #0
 8009630:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009632:	463a      	mov	r2, r7
 8009634:	1d39      	adds	r1, r7, #4
 8009636:	f107 0308 	add.w	r3, r7, #8
 800963a:	4618      	mov	r0, r3
 800963c:	f7f6 ff4a 	bl	80004d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009640:	6839      	ldr	r1, [r7, #0]
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	68ba      	ldr	r2, [r7, #8]
 8009646:	9202      	str	r2, [sp, #8]
 8009648:	9301      	str	r3, [sp, #4]
 800964a:	2300      	movs	r3, #0
 800964c:	9300      	str	r3, [sp, #0]
 800964e:	2300      	movs	r3, #0
 8009650:	460a      	mov	r2, r1
 8009652:	491d      	ldr	r1, [pc, #116]	; (80096c8 <vTaskStartScheduler+0xa4>)
 8009654:	481d      	ldr	r0, [pc, #116]	; (80096cc <vTaskStartScheduler+0xa8>)
 8009656:	f7ff fe2b 	bl	80092b0 <xTaskCreateStatic>
 800965a:	4602      	mov	r2, r0
 800965c:	4b1c      	ldr	r3, [pc, #112]	; (80096d0 <vTaskStartScheduler+0xac>)
 800965e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009660:	4b1b      	ldr	r3, [pc, #108]	; (80096d0 <vTaskStartScheduler+0xac>)
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d002      	beq.n	800966e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009668:	2301      	movs	r3, #1
 800966a:	617b      	str	r3, [r7, #20]
 800966c:	e001      	b.n	8009672 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800966e:	2300      	movs	r3, #0
 8009670:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	2b01      	cmp	r3, #1
 8009676:	d115      	bne.n	80096a4 <vTaskStartScheduler+0x80>
 8009678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800967c:	f383 8811 	msr	BASEPRI, r3
 8009680:	f3bf 8f6f 	isb	sy
 8009684:	f3bf 8f4f 	dsb	sy
 8009688:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800968a:	4b12      	ldr	r3, [pc, #72]	; (80096d4 <vTaskStartScheduler+0xb0>)
 800968c:	f04f 32ff 	mov.w	r2, #4294967295
 8009690:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009692:	4b11      	ldr	r3, [pc, #68]	; (80096d8 <vTaskStartScheduler+0xb4>)
 8009694:	2201      	movs	r2, #1
 8009696:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8009698:	4b10      	ldr	r3, [pc, #64]	; (80096dc <vTaskStartScheduler+0xb8>)
 800969a:	2200      	movs	r2, #0
 800969c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800969e:	f000 fe7b 	bl	800a398 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80096a2:	e00d      	b.n	80096c0 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80096a4:	697b      	ldr	r3, [r7, #20]
 80096a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096aa:	d109      	bne.n	80096c0 <vTaskStartScheduler+0x9c>
 80096ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096b0:	f383 8811 	msr	BASEPRI, r3
 80096b4:	f3bf 8f6f 	isb	sy
 80096b8:	f3bf 8f4f 	dsb	sy
 80096bc:	60fb      	str	r3, [r7, #12]
 80096be:	e7fe      	b.n	80096be <vTaskStartScheduler+0x9a>
}
 80096c0:	bf00      	nop
 80096c2:	3718      	adds	r7, #24
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}
 80096c8:	0800acc8 	.word	0x0800acc8
 80096cc:	08009c71 	.word	0x08009c71
 80096d0:	20000484 	.word	0x20000484
 80096d4:	20000480 	.word	0x20000480
 80096d8:	2000046c 	.word	0x2000046c
 80096dc:	20000464 	.word	0x20000464

080096e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80096e0:	b480      	push	{r7}
 80096e2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80096e4:	4b04      	ldr	r3, [pc, #16]	; (80096f8 <vTaskSuspendAll+0x18>)
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	3301      	adds	r3, #1
 80096ea:	4a03      	ldr	r2, [pc, #12]	; (80096f8 <vTaskSuspendAll+0x18>)
 80096ec:	6013      	str	r3, [r2, #0]
}
 80096ee:	bf00      	nop
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bc80      	pop	{r7}
 80096f4:	4770      	bx	lr
 80096f6:	bf00      	nop
 80096f8:	20000488 	.word	0x20000488

080096fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b084      	sub	sp, #16
 8009700:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009702:	2300      	movs	r3, #0
 8009704:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009706:	2300      	movs	r3, #0
 8009708:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800970a:	4b41      	ldr	r3, [pc, #260]	; (8009810 <xTaskResumeAll+0x114>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d109      	bne.n	8009726 <xTaskResumeAll+0x2a>
 8009712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009716:	f383 8811 	msr	BASEPRI, r3
 800971a:	f3bf 8f6f 	isb	sy
 800971e:	f3bf 8f4f 	dsb	sy
 8009722:	603b      	str	r3, [r7, #0]
 8009724:	e7fe      	b.n	8009724 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009726:	f000 fea7 	bl	800a478 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800972a:	4b39      	ldr	r3, [pc, #228]	; (8009810 <xTaskResumeAll+0x114>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	3b01      	subs	r3, #1
 8009730:	4a37      	ldr	r2, [pc, #220]	; (8009810 <xTaskResumeAll+0x114>)
 8009732:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009734:	4b36      	ldr	r3, [pc, #216]	; (8009810 <xTaskResumeAll+0x114>)
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d161      	bne.n	8009800 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800973c:	4b35      	ldr	r3, [pc, #212]	; (8009814 <xTaskResumeAll+0x118>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d05d      	beq.n	8009800 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009744:	e02e      	b.n	80097a4 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8009746:	4b34      	ldr	r3, [pc, #208]	; (8009818 <xTaskResumeAll+0x11c>)
 8009748:	68db      	ldr	r3, [r3, #12]
 800974a:	68db      	ldr	r3, [r3, #12]
 800974c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	3318      	adds	r3, #24
 8009752:	4618      	mov	r0, r3
 8009754:	f7fe ffd3 	bl	80086fe <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	3304      	adds	r3, #4
 800975c:	4618      	mov	r0, r3
 800975e:	f7fe ffce 	bl	80086fe <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009766:	2201      	movs	r2, #1
 8009768:	409a      	lsls	r2, r3
 800976a:	4b2c      	ldr	r3, [pc, #176]	; (800981c <xTaskResumeAll+0x120>)
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	4313      	orrs	r3, r2
 8009770:	4a2a      	ldr	r2, [pc, #168]	; (800981c <xTaskResumeAll+0x120>)
 8009772:	6013      	str	r3, [r2, #0]
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009778:	4613      	mov	r3, r2
 800977a:	009b      	lsls	r3, r3, #2
 800977c:	4413      	add	r3, r2
 800977e:	009b      	lsls	r3, r3, #2
 8009780:	4a27      	ldr	r2, [pc, #156]	; (8009820 <xTaskResumeAll+0x124>)
 8009782:	441a      	add	r2, r3
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	3304      	adds	r3, #4
 8009788:	4619      	mov	r1, r3
 800978a:	4610      	mov	r0, r2
 800978c:	f7fe ff5c 	bl	8008648 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009794:	4b23      	ldr	r3, [pc, #140]	; (8009824 <xTaskResumeAll+0x128>)
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800979a:	429a      	cmp	r2, r3
 800979c:	d302      	bcc.n	80097a4 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800979e:	4b22      	ldr	r3, [pc, #136]	; (8009828 <xTaskResumeAll+0x12c>)
 80097a0:	2201      	movs	r2, #1
 80097a2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80097a4:	4b1c      	ldr	r3, [pc, #112]	; (8009818 <xTaskResumeAll+0x11c>)
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d1cc      	bne.n	8009746 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d001      	beq.n	80097b6 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80097b2:	f000 fb0f 	bl	8009dd4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80097b6:	4b1d      	ldr	r3, [pc, #116]	; (800982c <xTaskResumeAll+0x130>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d010      	beq.n	80097e4 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80097c2:	f000 f837 	bl	8009834 <xTaskIncrementTick>
 80097c6:	4603      	mov	r3, r0
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d002      	beq.n	80097d2 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80097cc:	4b16      	ldr	r3, [pc, #88]	; (8009828 <xTaskResumeAll+0x12c>)
 80097ce:	2201      	movs	r2, #1
 80097d0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	3b01      	subs	r3, #1
 80097d6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d1f1      	bne.n	80097c2 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80097de:	4b13      	ldr	r3, [pc, #76]	; (800982c <xTaskResumeAll+0x130>)
 80097e0:	2200      	movs	r2, #0
 80097e2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80097e4:	4b10      	ldr	r3, [pc, #64]	; (8009828 <xTaskResumeAll+0x12c>)
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d009      	beq.n	8009800 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80097ec:	2301      	movs	r3, #1
 80097ee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80097f0:	4b0f      	ldr	r3, [pc, #60]	; (8009830 <xTaskResumeAll+0x134>)
 80097f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097f6:	601a      	str	r2, [r3, #0]
 80097f8:	f3bf 8f4f 	dsb	sy
 80097fc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009800:	f000 fe68 	bl	800a4d4 <vPortExitCritical>

	return xAlreadyYielded;
 8009804:	68bb      	ldr	r3, [r7, #8]
}
 8009806:	4618      	mov	r0, r3
 8009808:	3710      	adds	r7, #16
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}
 800980e:	bf00      	nop
 8009810:	20000488 	.word	0x20000488
 8009814:	20000460 	.word	0x20000460
 8009818:	20000420 	.word	0x20000420
 800981c:	20000468 	.word	0x20000468
 8009820:	20000364 	.word	0x20000364
 8009824:	20000360 	.word	0x20000360
 8009828:	20000474 	.word	0x20000474
 800982c:	20000470 	.word	0x20000470
 8009830:	e000ed04 	.word	0xe000ed04

08009834 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b086      	sub	sp, #24
 8009838:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800983a:	2300      	movs	r3, #0
 800983c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800983e:	4b50      	ldr	r3, [pc, #320]	; (8009980 <xTaskIncrementTick+0x14c>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	2b00      	cmp	r3, #0
 8009844:	f040 808c 	bne.w	8009960 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009848:	4b4e      	ldr	r3, [pc, #312]	; (8009984 <xTaskIncrementTick+0x150>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	3301      	adds	r3, #1
 800984e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009850:	4a4c      	ldr	r2, [pc, #304]	; (8009984 <xTaskIncrementTick+0x150>)
 8009852:	693b      	ldr	r3, [r7, #16]
 8009854:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009856:	693b      	ldr	r3, [r7, #16]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d11f      	bne.n	800989c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800985c:	4b4a      	ldr	r3, [pc, #296]	; (8009988 <xTaskIncrementTick+0x154>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d009      	beq.n	800987a <xTaskIncrementTick+0x46>
 8009866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800986a:	f383 8811 	msr	BASEPRI, r3
 800986e:	f3bf 8f6f 	isb	sy
 8009872:	f3bf 8f4f 	dsb	sy
 8009876:	603b      	str	r3, [r7, #0]
 8009878:	e7fe      	b.n	8009878 <xTaskIncrementTick+0x44>
 800987a:	4b43      	ldr	r3, [pc, #268]	; (8009988 <xTaskIncrementTick+0x154>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	60fb      	str	r3, [r7, #12]
 8009880:	4b42      	ldr	r3, [pc, #264]	; (800998c <xTaskIncrementTick+0x158>)
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	4a40      	ldr	r2, [pc, #256]	; (8009988 <xTaskIncrementTick+0x154>)
 8009886:	6013      	str	r3, [r2, #0]
 8009888:	4a40      	ldr	r2, [pc, #256]	; (800998c <xTaskIncrementTick+0x158>)
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	6013      	str	r3, [r2, #0]
 800988e:	4b40      	ldr	r3, [pc, #256]	; (8009990 <xTaskIncrementTick+0x15c>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	3301      	adds	r3, #1
 8009894:	4a3e      	ldr	r2, [pc, #248]	; (8009990 <xTaskIncrementTick+0x15c>)
 8009896:	6013      	str	r3, [r2, #0]
 8009898:	f000 fa9c 	bl	8009dd4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800989c:	4b3d      	ldr	r3, [pc, #244]	; (8009994 <xTaskIncrementTick+0x160>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	693a      	ldr	r2, [r7, #16]
 80098a2:	429a      	cmp	r2, r3
 80098a4:	d34d      	bcc.n	8009942 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80098a6:	4b38      	ldr	r3, [pc, #224]	; (8009988 <xTaskIncrementTick+0x154>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d101      	bne.n	80098b4 <xTaskIncrementTick+0x80>
 80098b0:	2301      	movs	r3, #1
 80098b2:	e000      	b.n	80098b6 <xTaskIncrementTick+0x82>
 80098b4:	2300      	movs	r3, #0
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d004      	beq.n	80098c4 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098ba:	4b36      	ldr	r3, [pc, #216]	; (8009994 <xTaskIncrementTick+0x160>)
 80098bc:	f04f 32ff 	mov.w	r2, #4294967295
 80098c0:	601a      	str	r2, [r3, #0]
					break;
 80098c2:	e03e      	b.n	8009942 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80098c4:	4b30      	ldr	r3, [pc, #192]	; (8009988 <xTaskIncrementTick+0x154>)
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	68db      	ldr	r3, [r3, #12]
 80098ca:	68db      	ldr	r3, [r3, #12]
 80098cc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	685b      	ldr	r3, [r3, #4]
 80098d2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80098d4:	693a      	ldr	r2, [r7, #16]
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	429a      	cmp	r2, r3
 80098da:	d203      	bcs.n	80098e4 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80098dc:	4a2d      	ldr	r2, [pc, #180]	; (8009994 <xTaskIncrementTick+0x160>)
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6013      	str	r3, [r2, #0]
						break;
 80098e2:	e02e      	b.n	8009942 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	3304      	adds	r3, #4
 80098e8:	4618      	mov	r0, r3
 80098ea:	f7fe ff08 	bl	80086fe <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80098ee:	68bb      	ldr	r3, [r7, #8]
 80098f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d004      	beq.n	8009900 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80098f6:	68bb      	ldr	r3, [r7, #8]
 80098f8:	3318      	adds	r3, #24
 80098fa:	4618      	mov	r0, r3
 80098fc:	f7fe feff 	bl	80086fe <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009900:	68bb      	ldr	r3, [r7, #8]
 8009902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009904:	2201      	movs	r2, #1
 8009906:	409a      	lsls	r2, r3
 8009908:	4b23      	ldr	r3, [pc, #140]	; (8009998 <xTaskIncrementTick+0x164>)
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	4313      	orrs	r3, r2
 800990e:	4a22      	ldr	r2, [pc, #136]	; (8009998 <xTaskIncrementTick+0x164>)
 8009910:	6013      	str	r3, [r2, #0]
 8009912:	68bb      	ldr	r3, [r7, #8]
 8009914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009916:	4613      	mov	r3, r2
 8009918:	009b      	lsls	r3, r3, #2
 800991a:	4413      	add	r3, r2
 800991c:	009b      	lsls	r3, r3, #2
 800991e:	4a1f      	ldr	r2, [pc, #124]	; (800999c <xTaskIncrementTick+0x168>)
 8009920:	441a      	add	r2, r3
 8009922:	68bb      	ldr	r3, [r7, #8]
 8009924:	3304      	adds	r3, #4
 8009926:	4619      	mov	r1, r3
 8009928:	4610      	mov	r0, r2
 800992a:	f7fe fe8d 	bl	8008648 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009932:	4b1b      	ldr	r3, [pc, #108]	; (80099a0 <xTaskIncrementTick+0x16c>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009938:	429a      	cmp	r2, r3
 800993a:	d3b4      	bcc.n	80098a6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800993c:	2301      	movs	r3, #1
 800993e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009940:	e7b1      	b.n	80098a6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009942:	4b17      	ldr	r3, [pc, #92]	; (80099a0 <xTaskIncrementTick+0x16c>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009948:	4914      	ldr	r1, [pc, #80]	; (800999c <xTaskIncrementTick+0x168>)
 800994a:	4613      	mov	r3, r2
 800994c:	009b      	lsls	r3, r3, #2
 800994e:	4413      	add	r3, r2
 8009950:	009b      	lsls	r3, r3, #2
 8009952:	440b      	add	r3, r1
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	2b01      	cmp	r3, #1
 8009958:	d907      	bls.n	800996a <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800995a:	2301      	movs	r3, #1
 800995c:	617b      	str	r3, [r7, #20]
 800995e:	e004      	b.n	800996a <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009960:	4b10      	ldr	r3, [pc, #64]	; (80099a4 <xTaskIncrementTick+0x170>)
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	3301      	adds	r3, #1
 8009966:	4a0f      	ldr	r2, [pc, #60]	; (80099a4 <xTaskIncrementTick+0x170>)
 8009968:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800996a:	4b0f      	ldr	r3, [pc, #60]	; (80099a8 <xTaskIncrementTick+0x174>)
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d001      	beq.n	8009976 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8009972:	2301      	movs	r3, #1
 8009974:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009976:	697b      	ldr	r3, [r7, #20]
}
 8009978:	4618      	mov	r0, r3
 800997a:	3718      	adds	r7, #24
 800997c:	46bd      	mov	sp, r7
 800997e:	bd80      	pop	{r7, pc}
 8009980:	20000488 	.word	0x20000488
 8009984:	20000464 	.word	0x20000464
 8009988:	20000418 	.word	0x20000418
 800998c:	2000041c 	.word	0x2000041c
 8009990:	20000478 	.word	0x20000478
 8009994:	20000480 	.word	0x20000480
 8009998:	20000468 	.word	0x20000468
 800999c:	20000364 	.word	0x20000364
 80099a0:	20000360 	.word	0x20000360
 80099a4:	20000470 	.word	0x20000470
 80099a8:	20000474 	.word	0x20000474

080099ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80099ac:	b480      	push	{r7}
 80099ae:	b087      	sub	sp, #28
 80099b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80099b2:	4b26      	ldr	r3, [pc, #152]	; (8009a4c <vTaskSwitchContext+0xa0>)
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d003      	beq.n	80099c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80099ba:	4b25      	ldr	r3, [pc, #148]	; (8009a50 <vTaskSwitchContext+0xa4>)
 80099bc:	2201      	movs	r2, #1
 80099be:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80099c0:	e03e      	b.n	8009a40 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80099c2:	4b23      	ldr	r3, [pc, #140]	; (8009a50 <vTaskSwitchContext+0xa4>)
 80099c4:	2200      	movs	r2, #0
 80099c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80099c8:	4b22      	ldr	r3, [pc, #136]	; (8009a54 <vTaskSwitchContext+0xa8>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	fab3 f383 	clz	r3, r3
 80099d4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80099d6:	7afb      	ldrb	r3, [r7, #11]
 80099d8:	f1c3 031f 	rsb	r3, r3, #31
 80099dc:	617b      	str	r3, [r7, #20]
 80099de:	491e      	ldr	r1, [pc, #120]	; (8009a58 <vTaskSwitchContext+0xac>)
 80099e0:	697a      	ldr	r2, [r7, #20]
 80099e2:	4613      	mov	r3, r2
 80099e4:	009b      	lsls	r3, r3, #2
 80099e6:	4413      	add	r3, r2
 80099e8:	009b      	lsls	r3, r3, #2
 80099ea:	440b      	add	r3, r1
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d109      	bne.n	8009a06 <vTaskSwitchContext+0x5a>
	__asm volatile
 80099f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099f6:	f383 8811 	msr	BASEPRI, r3
 80099fa:	f3bf 8f6f 	isb	sy
 80099fe:	f3bf 8f4f 	dsb	sy
 8009a02:	607b      	str	r3, [r7, #4]
 8009a04:	e7fe      	b.n	8009a04 <vTaskSwitchContext+0x58>
 8009a06:	697a      	ldr	r2, [r7, #20]
 8009a08:	4613      	mov	r3, r2
 8009a0a:	009b      	lsls	r3, r3, #2
 8009a0c:	4413      	add	r3, r2
 8009a0e:	009b      	lsls	r3, r3, #2
 8009a10:	4a11      	ldr	r2, [pc, #68]	; (8009a58 <vTaskSwitchContext+0xac>)
 8009a12:	4413      	add	r3, r2
 8009a14:	613b      	str	r3, [r7, #16]
 8009a16:	693b      	ldr	r3, [r7, #16]
 8009a18:	685b      	ldr	r3, [r3, #4]
 8009a1a:	685a      	ldr	r2, [r3, #4]
 8009a1c:	693b      	ldr	r3, [r7, #16]
 8009a1e:	605a      	str	r2, [r3, #4]
 8009a20:	693b      	ldr	r3, [r7, #16]
 8009a22:	685a      	ldr	r2, [r3, #4]
 8009a24:	693b      	ldr	r3, [r7, #16]
 8009a26:	3308      	adds	r3, #8
 8009a28:	429a      	cmp	r2, r3
 8009a2a:	d104      	bne.n	8009a36 <vTaskSwitchContext+0x8a>
 8009a2c:	693b      	ldr	r3, [r7, #16]
 8009a2e:	685b      	ldr	r3, [r3, #4]
 8009a30:	685a      	ldr	r2, [r3, #4]
 8009a32:	693b      	ldr	r3, [r7, #16]
 8009a34:	605a      	str	r2, [r3, #4]
 8009a36:	693b      	ldr	r3, [r7, #16]
 8009a38:	685b      	ldr	r3, [r3, #4]
 8009a3a:	68db      	ldr	r3, [r3, #12]
 8009a3c:	4a07      	ldr	r2, [pc, #28]	; (8009a5c <vTaskSwitchContext+0xb0>)
 8009a3e:	6013      	str	r3, [r2, #0]
}
 8009a40:	bf00      	nop
 8009a42:	371c      	adds	r7, #28
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bc80      	pop	{r7}
 8009a48:	4770      	bx	lr
 8009a4a:	bf00      	nop
 8009a4c:	20000488 	.word	0x20000488
 8009a50:	20000474 	.word	0x20000474
 8009a54:	20000468 	.word	0x20000468
 8009a58:	20000364 	.word	0x20000364
 8009a5c:	20000360 	.word	0x20000360

08009a60 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b084      	sub	sp, #16
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
 8009a68:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d109      	bne.n	8009a84 <vTaskPlaceOnEventList+0x24>
 8009a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a74:	f383 8811 	msr	BASEPRI, r3
 8009a78:	f3bf 8f6f 	isb	sy
 8009a7c:	f3bf 8f4f 	dsb	sy
 8009a80:	60fb      	str	r3, [r7, #12]
 8009a82:	e7fe      	b.n	8009a82 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009a84:	4b07      	ldr	r3, [pc, #28]	; (8009aa4 <vTaskPlaceOnEventList+0x44>)
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	3318      	adds	r3, #24
 8009a8a:	4619      	mov	r1, r3
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f7fe fdfe 	bl	800868e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009a92:	2101      	movs	r1, #1
 8009a94:	6838      	ldr	r0, [r7, #0]
 8009a96:	f000 fb9b 	bl	800a1d0 <prvAddCurrentTaskToDelayedList>
}
 8009a9a:	bf00      	nop
 8009a9c:	3710      	adds	r7, #16
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}
 8009aa2:	bf00      	nop
 8009aa4:	20000360 	.word	0x20000360

08009aa8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b086      	sub	sp, #24
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	68db      	ldr	r3, [r3, #12]
 8009ab4:	68db      	ldr	r3, [r3, #12]
 8009ab6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009ab8:	693b      	ldr	r3, [r7, #16]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d109      	bne.n	8009ad2 <xTaskRemoveFromEventList+0x2a>
 8009abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ac2:	f383 8811 	msr	BASEPRI, r3
 8009ac6:	f3bf 8f6f 	isb	sy
 8009aca:	f3bf 8f4f 	dsb	sy
 8009ace:	60fb      	str	r3, [r7, #12]
 8009ad0:	e7fe      	b.n	8009ad0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009ad2:	693b      	ldr	r3, [r7, #16]
 8009ad4:	3318      	adds	r3, #24
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	f7fe fe11 	bl	80086fe <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009adc:	4b1d      	ldr	r3, [pc, #116]	; (8009b54 <xTaskRemoveFromEventList+0xac>)
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d11c      	bne.n	8009b1e <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009ae4:	693b      	ldr	r3, [r7, #16]
 8009ae6:	3304      	adds	r3, #4
 8009ae8:	4618      	mov	r0, r3
 8009aea:	f7fe fe08 	bl	80086fe <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009aee:	693b      	ldr	r3, [r7, #16]
 8009af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009af2:	2201      	movs	r2, #1
 8009af4:	409a      	lsls	r2, r3
 8009af6:	4b18      	ldr	r3, [pc, #96]	; (8009b58 <xTaskRemoveFromEventList+0xb0>)
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	4313      	orrs	r3, r2
 8009afc:	4a16      	ldr	r2, [pc, #88]	; (8009b58 <xTaskRemoveFromEventList+0xb0>)
 8009afe:	6013      	str	r3, [r2, #0]
 8009b00:	693b      	ldr	r3, [r7, #16]
 8009b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b04:	4613      	mov	r3, r2
 8009b06:	009b      	lsls	r3, r3, #2
 8009b08:	4413      	add	r3, r2
 8009b0a:	009b      	lsls	r3, r3, #2
 8009b0c:	4a13      	ldr	r2, [pc, #76]	; (8009b5c <xTaskRemoveFromEventList+0xb4>)
 8009b0e:	441a      	add	r2, r3
 8009b10:	693b      	ldr	r3, [r7, #16]
 8009b12:	3304      	adds	r3, #4
 8009b14:	4619      	mov	r1, r3
 8009b16:	4610      	mov	r0, r2
 8009b18:	f7fe fd96 	bl	8008648 <vListInsertEnd>
 8009b1c:	e005      	b.n	8009b2a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009b1e:	693b      	ldr	r3, [r7, #16]
 8009b20:	3318      	adds	r3, #24
 8009b22:	4619      	mov	r1, r3
 8009b24:	480e      	ldr	r0, [pc, #56]	; (8009b60 <xTaskRemoveFromEventList+0xb8>)
 8009b26:	f7fe fd8f 	bl	8008648 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009b2a:	693b      	ldr	r3, [r7, #16]
 8009b2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b2e:	4b0d      	ldr	r3, [pc, #52]	; (8009b64 <xTaskRemoveFromEventList+0xbc>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b34:	429a      	cmp	r2, r3
 8009b36:	d905      	bls.n	8009b44 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009b38:	2301      	movs	r3, #1
 8009b3a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009b3c:	4b0a      	ldr	r3, [pc, #40]	; (8009b68 <xTaskRemoveFromEventList+0xc0>)
 8009b3e:	2201      	movs	r2, #1
 8009b40:	601a      	str	r2, [r3, #0]
 8009b42:	e001      	b.n	8009b48 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8009b44:	2300      	movs	r3, #0
 8009b46:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8009b48:	697b      	ldr	r3, [r7, #20]
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	3718      	adds	r7, #24
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}
 8009b52:	bf00      	nop
 8009b54:	20000488 	.word	0x20000488
 8009b58:	20000468 	.word	0x20000468
 8009b5c:	20000364 	.word	0x20000364
 8009b60:	20000420 	.word	0x20000420
 8009b64:	20000360 	.word	0x20000360
 8009b68:	20000474 	.word	0x20000474

08009b6c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	b083      	sub	sp, #12
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009b74:	4b06      	ldr	r3, [pc, #24]	; (8009b90 <vTaskInternalSetTimeOutState+0x24>)
 8009b76:	681a      	ldr	r2, [r3, #0]
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009b7c:	4b05      	ldr	r3, [pc, #20]	; (8009b94 <vTaskInternalSetTimeOutState+0x28>)
 8009b7e:	681a      	ldr	r2, [r3, #0]
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	605a      	str	r2, [r3, #4]
}
 8009b84:	bf00      	nop
 8009b86:	370c      	adds	r7, #12
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	bc80      	pop	{r7}
 8009b8c:	4770      	bx	lr
 8009b8e:	bf00      	nop
 8009b90:	20000478 	.word	0x20000478
 8009b94:	20000464 	.word	0x20000464

08009b98 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b088      	sub	sp, #32
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
 8009ba0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d109      	bne.n	8009bbc <xTaskCheckForTimeOut+0x24>
 8009ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bac:	f383 8811 	msr	BASEPRI, r3
 8009bb0:	f3bf 8f6f 	isb	sy
 8009bb4:	f3bf 8f4f 	dsb	sy
 8009bb8:	613b      	str	r3, [r7, #16]
 8009bba:	e7fe      	b.n	8009bba <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d109      	bne.n	8009bd6 <xTaskCheckForTimeOut+0x3e>
 8009bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bc6:	f383 8811 	msr	BASEPRI, r3
 8009bca:	f3bf 8f6f 	isb	sy
 8009bce:	f3bf 8f4f 	dsb	sy
 8009bd2:	60fb      	str	r3, [r7, #12]
 8009bd4:	e7fe      	b.n	8009bd4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8009bd6:	f000 fc4f 	bl	800a478 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009bda:	4b1d      	ldr	r3, [pc, #116]	; (8009c50 <xTaskCheckForTimeOut+0xb8>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	685b      	ldr	r3, [r3, #4]
 8009be4:	69ba      	ldr	r2, [r7, #24]
 8009be6:	1ad3      	subs	r3, r2, r3
 8009be8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bf2:	d102      	bne.n	8009bfa <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	61fb      	str	r3, [r7, #28]
 8009bf8:	e023      	b.n	8009c42 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681a      	ldr	r2, [r3, #0]
 8009bfe:	4b15      	ldr	r3, [pc, #84]	; (8009c54 <xTaskCheckForTimeOut+0xbc>)
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	429a      	cmp	r2, r3
 8009c04:	d007      	beq.n	8009c16 <xTaskCheckForTimeOut+0x7e>
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	685b      	ldr	r3, [r3, #4]
 8009c0a:	69ba      	ldr	r2, [r7, #24]
 8009c0c:	429a      	cmp	r2, r3
 8009c0e:	d302      	bcc.n	8009c16 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009c10:	2301      	movs	r3, #1
 8009c12:	61fb      	str	r3, [r7, #28]
 8009c14:	e015      	b.n	8009c42 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	697a      	ldr	r2, [r7, #20]
 8009c1c:	429a      	cmp	r2, r3
 8009c1e:	d20b      	bcs.n	8009c38 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	681a      	ldr	r2, [r3, #0]
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	1ad2      	subs	r2, r2, r3
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	f7ff ff9d 	bl	8009b6c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009c32:	2300      	movs	r3, #0
 8009c34:	61fb      	str	r3, [r7, #28]
 8009c36:	e004      	b.n	8009c42 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009c3e:	2301      	movs	r3, #1
 8009c40:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009c42:	f000 fc47 	bl	800a4d4 <vPortExitCritical>

	return xReturn;
 8009c46:	69fb      	ldr	r3, [r7, #28]
}
 8009c48:	4618      	mov	r0, r3
 8009c4a:	3720      	adds	r7, #32
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	bd80      	pop	{r7, pc}
 8009c50:	20000464 	.word	0x20000464
 8009c54:	20000478 	.word	0x20000478

08009c58 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009c58:	b480      	push	{r7}
 8009c5a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009c5c:	4b03      	ldr	r3, [pc, #12]	; (8009c6c <vTaskMissedYield+0x14>)
 8009c5e:	2201      	movs	r2, #1
 8009c60:	601a      	str	r2, [r3, #0]
}
 8009c62:	bf00      	nop
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bc80      	pop	{r7}
 8009c68:	4770      	bx	lr
 8009c6a:	bf00      	nop
 8009c6c:	20000474 	.word	0x20000474

08009c70 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b082      	sub	sp, #8
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009c78:	f000 f852 	bl	8009d20 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009c7c:	4b06      	ldr	r3, [pc, #24]	; (8009c98 <prvIdleTask+0x28>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	2b01      	cmp	r3, #1
 8009c82:	d9f9      	bls.n	8009c78 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009c84:	4b05      	ldr	r3, [pc, #20]	; (8009c9c <prvIdleTask+0x2c>)
 8009c86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c8a:	601a      	str	r2, [r3, #0]
 8009c8c:	f3bf 8f4f 	dsb	sy
 8009c90:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009c94:	e7f0      	b.n	8009c78 <prvIdleTask+0x8>
 8009c96:	bf00      	nop
 8009c98:	20000364 	.word	0x20000364
 8009c9c:	e000ed04 	.word	0xe000ed04

08009ca0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b082      	sub	sp, #8
 8009ca4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	607b      	str	r3, [r7, #4]
 8009caa:	e00c      	b.n	8009cc6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009cac:	687a      	ldr	r2, [r7, #4]
 8009cae:	4613      	mov	r3, r2
 8009cb0:	009b      	lsls	r3, r3, #2
 8009cb2:	4413      	add	r3, r2
 8009cb4:	009b      	lsls	r3, r3, #2
 8009cb6:	4a12      	ldr	r2, [pc, #72]	; (8009d00 <prvInitialiseTaskLists+0x60>)
 8009cb8:	4413      	add	r3, r2
 8009cba:	4618      	mov	r0, r3
 8009cbc:	f7fe fc99 	bl	80085f2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	3301      	adds	r3, #1
 8009cc4:	607b      	str	r3, [r7, #4]
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	2b06      	cmp	r3, #6
 8009cca:	d9ef      	bls.n	8009cac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009ccc:	480d      	ldr	r0, [pc, #52]	; (8009d04 <prvInitialiseTaskLists+0x64>)
 8009cce:	f7fe fc90 	bl	80085f2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009cd2:	480d      	ldr	r0, [pc, #52]	; (8009d08 <prvInitialiseTaskLists+0x68>)
 8009cd4:	f7fe fc8d 	bl	80085f2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009cd8:	480c      	ldr	r0, [pc, #48]	; (8009d0c <prvInitialiseTaskLists+0x6c>)
 8009cda:	f7fe fc8a 	bl	80085f2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009cde:	480c      	ldr	r0, [pc, #48]	; (8009d10 <prvInitialiseTaskLists+0x70>)
 8009ce0:	f7fe fc87 	bl	80085f2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009ce4:	480b      	ldr	r0, [pc, #44]	; (8009d14 <prvInitialiseTaskLists+0x74>)
 8009ce6:	f7fe fc84 	bl	80085f2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009cea:	4b0b      	ldr	r3, [pc, #44]	; (8009d18 <prvInitialiseTaskLists+0x78>)
 8009cec:	4a05      	ldr	r2, [pc, #20]	; (8009d04 <prvInitialiseTaskLists+0x64>)
 8009cee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009cf0:	4b0a      	ldr	r3, [pc, #40]	; (8009d1c <prvInitialiseTaskLists+0x7c>)
 8009cf2:	4a05      	ldr	r2, [pc, #20]	; (8009d08 <prvInitialiseTaskLists+0x68>)
 8009cf4:	601a      	str	r2, [r3, #0]
}
 8009cf6:	bf00      	nop
 8009cf8:	3708      	adds	r7, #8
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}
 8009cfe:	bf00      	nop
 8009d00:	20000364 	.word	0x20000364
 8009d04:	200003f0 	.word	0x200003f0
 8009d08:	20000404 	.word	0x20000404
 8009d0c:	20000420 	.word	0x20000420
 8009d10:	20000434 	.word	0x20000434
 8009d14:	2000044c 	.word	0x2000044c
 8009d18:	20000418 	.word	0x20000418
 8009d1c:	2000041c 	.word	0x2000041c

08009d20 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b082      	sub	sp, #8
 8009d24:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009d26:	e019      	b.n	8009d5c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009d28:	f000 fba6 	bl	800a478 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8009d2c:	4b0f      	ldr	r3, [pc, #60]	; (8009d6c <prvCheckTasksWaitingTermination+0x4c>)
 8009d2e:	68db      	ldr	r3, [r3, #12]
 8009d30:	68db      	ldr	r3, [r3, #12]
 8009d32:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	3304      	adds	r3, #4
 8009d38:	4618      	mov	r0, r3
 8009d3a:	f7fe fce0 	bl	80086fe <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009d3e:	4b0c      	ldr	r3, [pc, #48]	; (8009d70 <prvCheckTasksWaitingTermination+0x50>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	3b01      	subs	r3, #1
 8009d44:	4a0a      	ldr	r2, [pc, #40]	; (8009d70 <prvCheckTasksWaitingTermination+0x50>)
 8009d46:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009d48:	4b0a      	ldr	r3, [pc, #40]	; (8009d74 <prvCheckTasksWaitingTermination+0x54>)
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	3b01      	subs	r3, #1
 8009d4e:	4a09      	ldr	r2, [pc, #36]	; (8009d74 <prvCheckTasksWaitingTermination+0x54>)
 8009d50:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009d52:	f000 fbbf 	bl	800a4d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	f000 f80e 	bl	8009d78 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009d5c:	4b05      	ldr	r3, [pc, #20]	; (8009d74 <prvCheckTasksWaitingTermination+0x54>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d1e1      	bne.n	8009d28 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009d64:	bf00      	nop
 8009d66:	3708      	adds	r7, #8
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}
 8009d6c:	20000434 	.word	0x20000434
 8009d70:	20000460 	.word	0x20000460
 8009d74:	20000448 	.word	0x20000448

08009d78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b084      	sub	sp, #16
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d108      	bne.n	8009d9c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f000 fd2a 	bl	800a7e8 <vPortFree>
				vPortFree( pxTCB );
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	f000 fd27 	bl	800a7e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009d9a:	e017      	b.n	8009dcc <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009da2:	2b01      	cmp	r3, #1
 8009da4:	d103      	bne.n	8009dae <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	f000 fd1e 	bl	800a7e8 <vPortFree>
	}
 8009dac:	e00e      	b.n	8009dcc <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009db4:	2b02      	cmp	r3, #2
 8009db6:	d009      	beq.n	8009dcc <prvDeleteTCB+0x54>
 8009db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dbc:	f383 8811 	msr	BASEPRI, r3
 8009dc0:	f3bf 8f6f 	isb	sy
 8009dc4:	f3bf 8f4f 	dsb	sy
 8009dc8:	60fb      	str	r3, [r7, #12]
 8009dca:	e7fe      	b.n	8009dca <prvDeleteTCB+0x52>
	}
 8009dcc:	bf00      	nop
 8009dce:	3710      	adds	r7, #16
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd80      	pop	{r7, pc}

08009dd4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	b083      	sub	sp, #12
 8009dd8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009dda:	4b0e      	ldr	r3, [pc, #56]	; (8009e14 <prvResetNextTaskUnblockTime+0x40>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d101      	bne.n	8009de8 <prvResetNextTaskUnblockTime+0x14>
 8009de4:	2301      	movs	r3, #1
 8009de6:	e000      	b.n	8009dea <prvResetNextTaskUnblockTime+0x16>
 8009de8:	2300      	movs	r3, #0
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d004      	beq.n	8009df8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009dee:	4b0a      	ldr	r3, [pc, #40]	; (8009e18 <prvResetNextTaskUnblockTime+0x44>)
 8009df0:	f04f 32ff 	mov.w	r2, #4294967295
 8009df4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009df6:	e008      	b.n	8009e0a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009df8:	4b06      	ldr	r3, [pc, #24]	; (8009e14 <prvResetNextTaskUnblockTime+0x40>)
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	68db      	ldr	r3, [r3, #12]
 8009dfe:	68db      	ldr	r3, [r3, #12]
 8009e00:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	685b      	ldr	r3, [r3, #4]
 8009e06:	4a04      	ldr	r2, [pc, #16]	; (8009e18 <prvResetNextTaskUnblockTime+0x44>)
 8009e08:	6013      	str	r3, [r2, #0]
}
 8009e0a:	bf00      	nop
 8009e0c:	370c      	adds	r7, #12
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bc80      	pop	{r7}
 8009e12:	4770      	bx	lr
 8009e14:	20000418 	.word	0x20000418
 8009e18:	20000480 	.word	0x20000480

08009e1c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009e1c:	b480      	push	{r7}
 8009e1e:	b083      	sub	sp, #12
 8009e20:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009e22:	4b0b      	ldr	r3, [pc, #44]	; (8009e50 <xTaskGetSchedulerState+0x34>)
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d102      	bne.n	8009e30 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	607b      	str	r3, [r7, #4]
 8009e2e:	e008      	b.n	8009e42 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e30:	4b08      	ldr	r3, [pc, #32]	; (8009e54 <xTaskGetSchedulerState+0x38>)
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d102      	bne.n	8009e3e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009e38:	2302      	movs	r3, #2
 8009e3a:	607b      	str	r3, [r7, #4]
 8009e3c:	e001      	b.n	8009e42 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009e3e:	2300      	movs	r3, #0
 8009e40:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009e42:	687b      	ldr	r3, [r7, #4]
	}
 8009e44:	4618      	mov	r0, r3
 8009e46:	370c      	adds	r7, #12
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bc80      	pop	{r7}
 8009e4c:	4770      	bx	lr
 8009e4e:	bf00      	nop
 8009e50:	2000046c 	.word	0x2000046c
 8009e54:	20000488 	.word	0x20000488

08009e58 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b084      	sub	sp, #16
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009e64:	2300      	movs	r3, #0
 8009e66:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d06e      	beq.n	8009f4c <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e72:	4b39      	ldr	r3, [pc, #228]	; (8009f58 <xTaskPriorityInherit+0x100>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e78:	429a      	cmp	r2, r3
 8009e7a:	d25e      	bcs.n	8009f3a <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	699b      	ldr	r3, [r3, #24]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	db06      	blt.n	8009e92 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e84:	4b34      	ldr	r3, [pc, #208]	; (8009f58 <xTaskPriorityInherit+0x100>)
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e8a:	f1c3 0207 	rsb	r2, r3, #7
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	6959      	ldr	r1, [r3, #20]
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e9a:	4613      	mov	r3, r2
 8009e9c:	009b      	lsls	r3, r3, #2
 8009e9e:	4413      	add	r3, r2
 8009ea0:	009b      	lsls	r3, r3, #2
 8009ea2:	4a2e      	ldr	r2, [pc, #184]	; (8009f5c <xTaskPriorityInherit+0x104>)
 8009ea4:	4413      	add	r3, r2
 8009ea6:	4299      	cmp	r1, r3
 8009ea8:	d101      	bne.n	8009eae <xTaskPriorityInherit+0x56>
 8009eaa:	2301      	movs	r3, #1
 8009eac:	e000      	b.n	8009eb0 <xTaskPriorityInherit+0x58>
 8009eae:	2300      	movs	r3, #0
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d03a      	beq.n	8009f2a <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	3304      	adds	r3, #4
 8009eb8:	4618      	mov	r0, r3
 8009eba:	f7fe fc20 	bl	80086fe <uxListRemove>
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d115      	bne.n	8009ef0 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ec8:	4924      	ldr	r1, [pc, #144]	; (8009f5c <xTaskPriorityInherit+0x104>)
 8009eca:	4613      	mov	r3, r2
 8009ecc:	009b      	lsls	r3, r3, #2
 8009ece:	4413      	add	r3, r2
 8009ed0:	009b      	lsls	r3, r3, #2
 8009ed2:	440b      	add	r3, r1
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d10a      	bne.n	8009ef0 <xTaskPriorityInherit+0x98>
 8009eda:	68bb      	ldr	r3, [r7, #8]
 8009edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ede:	2201      	movs	r2, #1
 8009ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8009ee4:	43da      	mvns	r2, r3
 8009ee6:	4b1e      	ldr	r3, [pc, #120]	; (8009f60 <xTaskPriorityInherit+0x108>)
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	4013      	ands	r3, r2
 8009eec:	4a1c      	ldr	r2, [pc, #112]	; (8009f60 <xTaskPriorityInherit+0x108>)
 8009eee:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009ef0:	4b19      	ldr	r3, [pc, #100]	; (8009f58 <xTaskPriorityInherit+0x100>)
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ef6:	68bb      	ldr	r3, [r7, #8]
 8009ef8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009efa:	68bb      	ldr	r3, [r7, #8]
 8009efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009efe:	2201      	movs	r2, #1
 8009f00:	409a      	lsls	r2, r3
 8009f02:	4b17      	ldr	r3, [pc, #92]	; (8009f60 <xTaskPriorityInherit+0x108>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	4313      	orrs	r3, r2
 8009f08:	4a15      	ldr	r2, [pc, #84]	; (8009f60 <xTaskPriorityInherit+0x108>)
 8009f0a:	6013      	str	r3, [r2, #0]
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f10:	4613      	mov	r3, r2
 8009f12:	009b      	lsls	r3, r3, #2
 8009f14:	4413      	add	r3, r2
 8009f16:	009b      	lsls	r3, r3, #2
 8009f18:	4a10      	ldr	r2, [pc, #64]	; (8009f5c <xTaskPriorityInherit+0x104>)
 8009f1a:	441a      	add	r2, r3
 8009f1c:	68bb      	ldr	r3, [r7, #8]
 8009f1e:	3304      	adds	r3, #4
 8009f20:	4619      	mov	r1, r3
 8009f22:	4610      	mov	r0, r2
 8009f24:	f7fe fb90 	bl	8008648 <vListInsertEnd>
 8009f28:	e004      	b.n	8009f34 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009f2a:	4b0b      	ldr	r3, [pc, #44]	; (8009f58 <xTaskPriorityInherit+0x100>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009f34:	2301      	movs	r3, #1
 8009f36:	60fb      	str	r3, [r7, #12]
 8009f38:	e008      	b.n	8009f4c <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009f3a:	68bb      	ldr	r3, [r7, #8]
 8009f3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009f3e:	4b06      	ldr	r3, [pc, #24]	; (8009f58 <xTaskPriorityInherit+0x100>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f44:	429a      	cmp	r2, r3
 8009f46:	d201      	bcs.n	8009f4c <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009f48:	2301      	movs	r3, #1
 8009f4a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
	}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	3710      	adds	r7, #16
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd80      	pop	{r7, pc}
 8009f56:	bf00      	nop
 8009f58:	20000360 	.word	0x20000360
 8009f5c:	20000364 	.word	0x20000364
 8009f60:	20000468 	.word	0x20000468

08009f64 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b086      	sub	sp, #24
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009f70:	2300      	movs	r3, #0
 8009f72:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d06c      	beq.n	800a054 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009f7a:	4b39      	ldr	r3, [pc, #228]	; (800a060 <xTaskPriorityDisinherit+0xfc>)
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	693a      	ldr	r2, [r7, #16]
 8009f80:	429a      	cmp	r2, r3
 8009f82:	d009      	beq.n	8009f98 <xTaskPriorityDisinherit+0x34>
 8009f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f88:	f383 8811 	msr	BASEPRI, r3
 8009f8c:	f3bf 8f6f 	isb	sy
 8009f90:	f3bf 8f4f 	dsb	sy
 8009f94:	60fb      	str	r3, [r7, #12]
 8009f96:	e7fe      	b.n	8009f96 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8009f98:	693b      	ldr	r3, [r7, #16]
 8009f9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d109      	bne.n	8009fb4 <xTaskPriorityDisinherit+0x50>
 8009fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fa4:	f383 8811 	msr	BASEPRI, r3
 8009fa8:	f3bf 8f6f 	isb	sy
 8009fac:	f3bf 8f4f 	dsb	sy
 8009fb0:	60bb      	str	r3, [r7, #8]
 8009fb2:	e7fe      	b.n	8009fb2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8009fb4:	693b      	ldr	r3, [r7, #16]
 8009fb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009fb8:	1e5a      	subs	r2, r3, #1
 8009fba:	693b      	ldr	r3, [r7, #16]
 8009fbc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009fbe:	693b      	ldr	r3, [r7, #16]
 8009fc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fc2:	693b      	ldr	r3, [r7, #16]
 8009fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fc6:	429a      	cmp	r2, r3
 8009fc8:	d044      	beq.n	800a054 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009fca:	693b      	ldr	r3, [r7, #16]
 8009fcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d140      	bne.n	800a054 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009fd2:	693b      	ldr	r3, [r7, #16]
 8009fd4:	3304      	adds	r3, #4
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f7fe fb91 	bl	80086fe <uxListRemove>
 8009fdc:	4603      	mov	r3, r0
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d115      	bne.n	800a00e <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009fe2:	693b      	ldr	r3, [r7, #16]
 8009fe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fe6:	491f      	ldr	r1, [pc, #124]	; (800a064 <xTaskPriorityDisinherit+0x100>)
 8009fe8:	4613      	mov	r3, r2
 8009fea:	009b      	lsls	r3, r3, #2
 8009fec:	4413      	add	r3, r2
 8009fee:	009b      	lsls	r3, r3, #2
 8009ff0:	440b      	add	r3, r1
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d10a      	bne.n	800a00e <xTaskPriorityDisinherit+0xaa>
 8009ff8:	693b      	ldr	r3, [r7, #16]
 8009ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ffc:	2201      	movs	r2, #1
 8009ffe:	fa02 f303 	lsl.w	r3, r2, r3
 800a002:	43da      	mvns	r2, r3
 800a004:	4b18      	ldr	r3, [pc, #96]	; (800a068 <xTaskPriorityDisinherit+0x104>)
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	4013      	ands	r3, r2
 800a00a:	4a17      	ldr	r2, [pc, #92]	; (800a068 <xTaskPriorityDisinherit+0x104>)
 800a00c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a00e:	693b      	ldr	r3, [r7, #16]
 800a010:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a012:	693b      	ldr	r3, [r7, #16]
 800a014:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a016:	693b      	ldr	r3, [r7, #16]
 800a018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a01a:	f1c3 0207 	rsb	r2, r3, #7
 800a01e:	693b      	ldr	r3, [r7, #16]
 800a020:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a022:	693b      	ldr	r3, [r7, #16]
 800a024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a026:	2201      	movs	r2, #1
 800a028:	409a      	lsls	r2, r3
 800a02a:	4b0f      	ldr	r3, [pc, #60]	; (800a068 <xTaskPriorityDisinherit+0x104>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	4313      	orrs	r3, r2
 800a030:	4a0d      	ldr	r2, [pc, #52]	; (800a068 <xTaskPriorityDisinherit+0x104>)
 800a032:	6013      	str	r3, [r2, #0]
 800a034:	693b      	ldr	r3, [r7, #16]
 800a036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a038:	4613      	mov	r3, r2
 800a03a:	009b      	lsls	r3, r3, #2
 800a03c:	4413      	add	r3, r2
 800a03e:	009b      	lsls	r3, r3, #2
 800a040:	4a08      	ldr	r2, [pc, #32]	; (800a064 <xTaskPriorityDisinherit+0x100>)
 800a042:	441a      	add	r2, r3
 800a044:	693b      	ldr	r3, [r7, #16]
 800a046:	3304      	adds	r3, #4
 800a048:	4619      	mov	r1, r3
 800a04a:	4610      	mov	r0, r2
 800a04c:	f7fe fafc 	bl	8008648 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a050:	2301      	movs	r3, #1
 800a052:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a054:	697b      	ldr	r3, [r7, #20]
	}
 800a056:	4618      	mov	r0, r3
 800a058:	3718      	adds	r7, #24
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}
 800a05e:	bf00      	nop
 800a060:	20000360 	.word	0x20000360
 800a064:	20000364 	.word	0x20000364
 800a068:	20000468 	.word	0x20000468

0800a06c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b088      	sub	sp, #32
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
 800a074:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a07a:	2301      	movs	r3, #1
 800a07c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2b00      	cmp	r3, #0
 800a082:	f000 8086 	beq.w	800a192 <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a086:	69bb      	ldr	r3, [r7, #24]
 800a088:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d109      	bne.n	800a0a2 <vTaskPriorityDisinheritAfterTimeout+0x36>
 800a08e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a092:	f383 8811 	msr	BASEPRI, r3
 800a096:	f3bf 8f6f 	isb	sy
 800a09a:	f3bf 8f4f 	dsb	sy
 800a09e:	60fb      	str	r3, [r7, #12]
 800a0a0:	e7fe      	b.n	800a0a0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a0a2:	69bb      	ldr	r3, [r7, #24]
 800a0a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0a6:	683a      	ldr	r2, [r7, #0]
 800a0a8:	429a      	cmp	r2, r3
 800a0aa:	d902      	bls.n	800a0b2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	61fb      	str	r3, [r7, #28]
 800a0b0:	e002      	b.n	800a0b8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a0b2:	69bb      	ldr	r3, [r7, #24]
 800a0b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0b6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a0b8:	69bb      	ldr	r3, [r7, #24]
 800a0ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0bc:	69fa      	ldr	r2, [r7, #28]
 800a0be:	429a      	cmp	r2, r3
 800a0c0:	d067      	beq.n	800a192 <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a0c2:	69bb      	ldr	r3, [r7, #24]
 800a0c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a0c6:	697a      	ldr	r2, [r7, #20]
 800a0c8:	429a      	cmp	r2, r3
 800a0ca:	d162      	bne.n	800a192 <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a0cc:	4b33      	ldr	r3, [pc, #204]	; (800a19c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	69ba      	ldr	r2, [r7, #24]
 800a0d2:	429a      	cmp	r2, r3
 800a0d4:	d109      	bne.n	800a0ea <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800a0d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0da:	f383 8811 	msr	BASEPRI, r3
 800a0de:	f3bf 8f6f 	isb	sy
 800a0e2:	f3bf 8f4f 	dsb	sy
 800a0e6:	60bb      	str	r3, [r7, #8]
 800a0e8:	e7fe      	b.n	800a0e8 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a0ea:	69bb      	ldr	r3, [r7, #24]
 800a0ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0ee:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a0f0:	69bb      	ldr	r3, [r7, #24]
 800a0f2:	69fa      	ldr	r2, [r7, #28]
 800a0f4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a0f6:	69bb      	ldr	r3, [r7, #24]
 800a0f8:	699b      	ldr	r3, [r3, #24]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	db04      	blt.n	800a108 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a0fe:	69fb      	ldr	r3, [r7, #28]
 800a100:	f1c3 0207 	rsb	r2, r3, #7
 800a104:	69bb      	ldr	r3, [r7, #24]
 800a106:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a108:	69bb      	ldr	r3, [r7, #24]
 800a10a:	6959      	ldr	r1, [r3, #20]
 800a10c:	693a      	ldr	r2, [r7, #16]
 800a10e:	4613      	mov	r3, r2
 800a110:	009b      	lsls	r3, r3, #2
 800a112:	4413      	add	r3, r2
 800a114:	009b      	lsls	r3, r3, #2
 800a116:	4a22      	ldr	r2, [pc, #136]	; (800a1a0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800a118:	4413      	add	r3, r2
 800a11a:	4299      	cmp	r1, r3
 800a11c:	d101      	bne.n	800a122 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 800a11e:	2301      	movs	r3, #1
 800a120:	e000      	b.n	800a124 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 800a122:	2300      	movs	r3, #0
 800a124:	2b00      	cmp	r3, #0
 800a126:	d034      	beq.n	800a192 <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a128:	69bb      	ldr	r3, [r7, #24]
 800a12a:	3304      	adds	r3, #4
 800a12c:	4618      	mov	r0, r3
 800a12e:	f7fe fae6 	bl	80086fe <uxListRemove>
 800a132:	4603      	mov	r3, r0
 800a134:	2b00      	cmp	r3, #0
 800a136:	d115      	bne.n	800a164 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a138:	69bb      	ldr	r3, [r7, #24]
 800a13a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a13c:	4918      	ldr	r1, [pc, #96]	; (800a1a0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800a13e:	4613      	mov	r3, r2
 800a140:	009b      	lsls	r3, r3, #2
 800a142:	4413      	add	r3, r2
 800a144:	009b      	lsls	r3, r3, #2
 800a146:	440b      	add	r3, r1
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d10a      	bne.n	800a164 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 800a14e:	69bb      	ldr	r3, [r7, #24]
 800a150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a152:	2201      	movs	r2, #1
 800a154:	fa02 f303 	lsl.w	r3, r2, r3
 800a158:	43da      	mvns	r2, r3
 800a15a:	4b12      	ldr	r3, [pc, #72]	; (800a1a4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	4013      	ands	r3, r2
 800a160:	4a10      	ldr	r2, [pc, #64]	; (800a1a4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800a162:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a164:	69bb      	ldr	r3, [r7, #24]
 800a166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a168:	2201      	movs	r2, #1
 800a16a:	409a      	lsls	r2, r3
 800a16c:	4b0d      	ldr	r3, [pc, #52]	; (800a1a4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	4313      	orrs	r3, r2
 800a172:	4a0c      	ldr	r2, [pc, #48]	; (800a1a4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800a174:	6013      	str	r3, [r2, #0]
 800a176:	69bb      	ldr	r3, [r7, #24]
 800a178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a17a:	4613      	mov	r3, r2
 800a17c:	009b      	lsls	r3, r3, #2
 800a17e:	4413      	add	r3, r2
 800a180:	009b      	lsls	r3, r3, #2
 800a182:	4a07      	ldr	r2, [pc, #28]	; (800a1a0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800a184:	441a      	add	r2, r3
 800a186:	69bb      	ldr	r3, [r7, #24]
 800a188:	3304      	adds	r3, #4
 800a18a:	4619      	mov	r1, r3
 800a18c:	4610      	mov	r0, r2
 800a18e:	f7fe fa5b 	bl	8008648 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a192:	bf00      	nop
 800a194:	3720      	adds	r7, #32
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}
 800a19a:	bf00      	nop
 800a19c:	20000360 	.word	0x20000360
 800a1a0:	20000364 	.word	0x20000364
 800a1a4:	20000468 	.word	0x20000468

0800a1a8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800a1a8:	b480      	push	{r7}
 800a1aa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a1ac:	4b07      	ldr	r3, [pc, #28]	; (800a1cc <pvTaskIncrementMutexHeldCount+0x24>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d004      	beq.n	800a1be <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a1b4:	4b05      	ldr	r3, [pc, #20]	; (800a1cc <pvTaskIncrementMutexHeldCount+0x24>)
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a1ba:	3201      	adds	r2, #1
 800a1bc:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800a1be:	4b03      	ldr	r3, [pc, #12]	; (800a1cc <pvTaskIncrementMutexHeldCount+0x24>)
 800a1c0:	681b      	ldr	r3, [r3, #0]
	}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bc80      	pop	{r7}
 800a1c8:	4770      	bx	lr
 800a1ca:	bf00      	nop
 800a1cc:	20000360 	.word	0x20000360

0800a1d0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b084      	sub	sp, #16
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
 800a1d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a1da:	4b29      	ldr	r3, [pc, #164]	; (800a280 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a1e0:	4b28      	ldr	r3, [pc, #160]	; (800a284 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	3304      	adds	r3, #4
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	f7fe fa89 	bl	80086fe <uxListRemove>
 800a1ec:	4603      	mov	r3, r0
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d10b      	bne.n	800a20a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800a1f2:	4b24      	ldr	r3, [pc, #144]	; (800a284 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1f8:	2201      	movs	r2, #1
 800a1fa:	fa02 f303 	lsl.w	r3, r2, r3
 800a1fe:	43da      	mvns	r2, r3
 800a200:	4b21      	ldr	r3, [pc, #132]	; (800a288 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	4013      	ands	r3, r2
 800a206:	4a20      	ldr	r2, [pc, #128]	; (800a288 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a208:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a210:	d10a      	bne.n	800a228 <prvAddCurrentTaskToDelayedList+0x58>
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d007      	beq.n	800a228 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a218:	4b1a      	ldr	r3, [pc, #104]	; (800a284 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	3304      	adds	r3, #4
 800a21e:	4619      	mov	r1, r3
 800a220:	481a      	ldr	r0, [pc, #104]	; (800a28c <prvAddCurrentTaskToDelayedList+0xbc>)
 800a222:	f7fe fa11 	bl	8008648 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a226:	e026      	b.n	800a276 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a228:	68fa      	ldr	r2, [r7, #12]
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	4413      	add	r3, r2
 800a22e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a230:	4b14      	ldr	r3, [pc, #80]	; (800a284 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	68ba      	ldr	r2, [r7, #8]
 800a236:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a238:	68ba      	ldr	r2, [r7, #8]
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	429a      	cmp	r2, r3
 800a23e:	d209      	bcs.n	800a254 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a240:	4b13      	ldr	r3, [pc, #76]	; (800a290 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a242:	681a      	ldr	r2, [r3, #0]
 800a244:	4b0f      	ldr	r3, [pc, #60]	; (800a284 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	3304      	adds	r3, #4
 800a24a:	4619      	mov	r1, r3
 800a24c:	4610      	mov	r0, r2
 800a24e:	f7fe fa1e 	bl	800868e <vListInsert>
}
 800a252:	e010      	b.n	800a276 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a254:	4b0f      	ldr	r3, [pc, #60]	; (800a294 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a256:	681a      	ldr	r2, [r3, #0]
 800a258:	4b0a      	ldr	r3, [pc, #40]	; (800a284 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	3304      	adds	r3, #4
 800a25e:	4619      	mov	r1, r3
 800a260:	4610      	mov	r0, r2
 800a262:	f7fe fa14 	bl	800868e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a266:	4b0c      	ldr	r3, [pc, #48]	; (800a298 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	68ba      	ldr	r2, [r7, #8]
 800a26c:	429a      	cmp	r2, r3
 800a26e:	d202      	bcs.n	800a276 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a270:	4a09      	ldr	r2, [pc, #36]	; (800a298 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	6013      	str	r3, [r2, #0]
}
 800a276:	bf00      	nop
 800a278:	3710      	adds	r7, #16
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}
 800a27e:	bf00      	nop
 800a280:	20000464 	.word	0x20000464
 800a284:	20000360 	.word	0x20000360
 800a288:	20000468 	.word	0x20000468
 800a28c:	2000044c 	.word	0x2000044c
 800a290:	2000041c 	.word	0x2000041c
 800a294:	20000418 	.word	0x20000418
 800a298:	20000480 	.word	0x20000480

0800a29c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a29c:	b480      	push	{r7}
 800a29e:	b085      	sub	sp, #20
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	60f8      	str	r0, [r7, #12]
 800a2a4:	60b9      	str	r1, [r7, #8]
 800a2a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	3b04      	subs	r3, #4
 800a2ac:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a2b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	3b04      	subs	r3, #4
 800a2ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a2bc:	68bb      	ldr	r3, [r7, #8]
 800a2be:	f023 0201 	bic.w	r2, r3, #1
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	3b04      	subs	r3, #4
 800a2ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a2cc:	4a08      	ldr	r2, [pc, #32]	; (800a2f0 <pxPortInitialiseStack+0x54>)
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	3b14      	subs	r3, #20
 800a2d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a2d8:	687a      	ldr	r2, [r7, #4]
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	3b20      	subs	r3, #32
 800a2e2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a2e4:	68fb      	ldr	r3, [r7, #12]
}
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	3714      	adds	r7, #20
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bc80      	pop	{r7}
 800a2ee:	4770      	bx	lr
 800a2f0:	0800a2f5 	.word	0x0800a2f5

0800a2f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	b085      	sub	sp, #20
 800a2f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a2fe:	4b10      	ldr	r3, [pc, #64]	; (800a340 <prvTaskExitError+0x4c>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a306:	d009      	beq.n	800a31c <prvTaskExitError+0x28>
 800a308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a30c:	f383 8811 	msr	BASEPRI, r3
 800a310:	f3bf 8f6f 	isb	sy
 800a314:	f3bf 8f4f 	dsb	sy
 800a318:	60fb      	str	r3, [r7, #12]
 800a31a:	e7fe      	b.n	800a31a <prvTaskExitError+0x26>
 800a31c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a320:	f383 8811 	msr	BASEPRI, r3
 800a324:	f3bf 8f6f 	isb	sy
 800a328:	f3bf 8f4f 	dsb	sy
 800a32c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a32e:	bf00      	nop
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d0fc      	beq.n	800a330 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a336:	bf00      	nop
 800a338:	3714      	adds	r7, #20
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bc80      	pop	{r7}
 800a33e:	4770      	bx	lr
 800a340:	20000050 	.word	0x20000050
	...

0800a350 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a350:	4b07      	ldr	r3, [pc, #28]	; (800a370 <pxCurrentTCBConst2>)
 800a352:	6819      	ldr	r1, [r3, #0]
 800a354:	6808      	ldr	r0, [r1, #0]
 800a356:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a35a:	f380 8809 	msr	PSP, r0
 800a35e:	f3bf 8f6f 	isb	sy
 800a362:	f04f 0000 	mov.w	r0, #0
 800a366:	f380 8811 	msr	BASEPRI, r0
 800a36a:	f04e 0e0d 	orr.w	lr, lr, #13
 800a36e:	4770      	bx	lr

0800a370 <pxCurrentTCBConst2>:
 800a370:	20000360 	.word	0x20000360
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a374:	bf00      	nop
 800a376:	bf00      	nop

0800a378 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800a378:	4806      	ldr	r0, [pc, #24]	; (800a394 <prvPortStartFirstTask+0x1c>)
 800a37a:	6800      	ldr	r0, [r0, #0]
 800a37c:	6800      	ldr	r0, [r0, #0]
 800a37e:	f380 8808 	msr	MSP, r0
 800a382:	b662      	cpsie	i
 800a384:	b661      	cpsie	f
 800a386:	f3bf 8f4f 	dsb	sy
 800a38a:	f3bf 8f6f 	isb	sy
 800a38e:	df00      	svc	0
 800a390:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a392:	bf00      	nop
 800a394:	e000ed08 	.word	0xe000ed08

0800a398 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b084      	sub	sp, #16
 800a39c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a39e:	4b31      	ldr	r3, [pc, #196]	; (800a464 <xPortStartScheduler+0xcc>)
 800a3a0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	781b      	ldrb	r3, [r3, #0]
 800a3a6:	b2db      	uxtb	r3, r3
 800a3a8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	22ff      	movs	r2, #255	; 0xff
 800a3ae:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	781b      	ldrb	r3, [r3, #0]
 800a3b4:	b2db      	uxtb	r3, r3
 800a3b6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a3b8:	78fb      	ldrb	r3, [r7, #3]
 800a3ba:	b2db      	uxtb	r3, r3
 800a3bc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a3c0:	b2da      	uxtb	r2, r3
 800a3c2:	4b29      	ldr	r3, [pc, #164]	; (800a468 <xPortStartScheduler+0xd0>)
 800a3c4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a3c6:	4b29      	ldr	r3, [pc, #164]	; (800a46c <xPortStartScheduler+0xd4>)
 800a3c8:	2207      	movs	r2, #7
 800a3ca:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a3cc:	e009      	b.n	800a3e2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a3ce:	4b27      	ldr	r3, [pc, #156]	; (800a46c <xPortStartScheduler+0xd4>)
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	3b01      	subs	r3, #1
 800a3d4:	4a25      	ldr	r2, [pc, #148]	; (800a46c <xPortStartScheduler+0xd4>)
 800a3d6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a3d8:	78fb      	ldrb	r3, [r7, #3]
 800a3da:	b2db      	uxtb	r3, r3
 800a3dc:	005b      	lsls	r3, r3, #1
 800a3de:	b2db      	uxtb	r3, r3
 800a3e0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a3e2:	78fb      	ldrb	r3, [r7, #3]
 800a3e4:	b2db      	uxtb	r3, r3
 800a3e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3ea:	2b80      	cmp	r3, #128	; 0x80
 800a3ec:	d0ef      	beq.n	800a3ce <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a3ee:	4b1f      	ldr	r3, [pc, #124]	; (800a46c <xPortStartScheduler+0xd4>)
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	f1c3 0307 	rsb	r3, r3, #7
 800a3f6:	2b04      	cmp	r3, #4
 800a3f8:	d009      	beq.n	800a40e <xPortStartScheduler+0x76>
 800a3fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3fe:	f383 8811 	msr	BASEPRI, r3
 800a402:	f3bf 8f6f 	isb	sy
 800a406:	f3bf 8f4f 	dsb	sy
 800a40a:	60bb      	str	r3, [r7, #8]
 800a40c:	e7fe      	b.n	800a40c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a40e:	4b17      	ldr	r3, [pc, #92]	; (800a46c <xPortStartScheduler+0xd4>)
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	021b      	lsls	r3, r3, #8
 800a414:	4a15      	ldr	r2, [pc, #84]	; (800a46c <xPortStartScheduler+0xd4>)
 800a416:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a418:	4b14      	ldr	r3, [pc, #80]	; (800a46c <xPortStartScheduler+0xd4>)
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a420:	4a12      	ldr	r2, [pc, #72]	; (800a46c <xPortStartScheduler+0xd4>)
 800a422:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	b2da      	uxtb	r2, r3
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a42c:	4b10      	ldr	r3, [pc, #64]	; (800a470 <xPortStartScheduler+0xd8>)
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	4a0f      	ldr	r2, [pc, #60]	; (800a470 <xPortStartScheduler+0xd8>)
 800a432:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a436:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a438:	4b0d      	ldr	r3, [pc, #52]	; (800a470 <xPortStartScheduler+0xd8>)
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	4a0c      	ldr	r2, [pc, #48]	; (800a470 <xPortStartScheduler+0xd8>)
 800a43e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a442:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a444:	f000 f8b0 	bl	800a5a8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a448:	4b0a      	ldr	r3, [pc, #40]	; (800a474 <xPortStartScheduler+0xdc>)
 800a44a:	2200      	movs	r2, #0
 800a44c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a44e:	f7ff ff93 	bl	800a378 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a452:	f7ff faab 	bl	80099ac <vTaskSwitchContext>
	prvTaskExitError();
 800a456:	f7ff ff4d 	bl	800a2f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a45a:	2300      	movs	r3, #0
}
 800a45c:	4618      	mov	r0, r3
 800a45e:	3710      	adds	r7, #16
 800a460:	46bd      	mov	sp, r7
 800a462:	bd80      	pop	{r7, pc}
 800a464:	e000e400 	.word	0xe000e400
 800a468:	2000048c 	.word	0x2000048c
 800a46c:	20000490 	.word	0x20000490
 800a470:	e000ed20 	.word	0xe000ed20
 800a474:	20000050 	.word	0x20000050

0800a478 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a478:	b480      	push	{r7}
 800a47a:	b083      	sub	sp, #12
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a482:	f383 8811 	msr	BASEPRI, r3
 800a486:	f3bf 8f6f 	isb	sy
 800a48a:	f3bf 8f4f 	dsb	sy
 800a48e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a490:	4b0e      	ldr	r3, [pc, #56]	; (800a4cc <vPortEnterCritical+0x54>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	3301      	adds	r3, #1
 800a496:	4a0d      	ldr	r2, [pc, #52]	; (800a4cc <vPortEnterCritical+0x54>)
 800a498:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a49a:	4b0c      	ldr	r3, [pc, #48]	; (800a4cc <vPortEnterCritical+0x54>)
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	2b01      	cmp	r3, #1
 800a4a0:	d10e      	bne.n	800a4c0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a4a2:	4b0b      	ldr	r3, [pc, #44]	; (800a4d0 <vPortEnterCritical+0x58>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	b2db      	uxtb	r3, r3
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d009      	beq.n	800a4c0 <vPortEnterCritical+0x48>
 800a4ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4b0:	f383 8811 	msr	BASEPRI, r3
 800a4b4:	f3bf 8f6f 	isb	sy
 800a4b8:	f3bf 8f4f 	dsb	sy
 800a4bc:	603b      	str	r3, [r7, #0]
 800a4be:	e7fe      	b.n	800a4be <vPortEnterCritical+0x46>
	}
}
 800a4c0:	bf00      	nop
 800a4c2:	370c      	adds	r7, #12
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	bc80      	pop	{r7}
 800a4c8:	4770      	bx	lr
 800a4ca:	bf00      	nop
 800a4cc:	20000050 	.word	0x20000050
 800a4d0:	e000ed04 	.word	0xe000ed04

0800a4d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a4d4:	b480      	push	{r7}
 800a4d6:	b083      	sub	sp, #12
 800a4d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a4da:	4b10      	ldr	r3, [pc, #64]	; (800a51c <vPortExitCritical+0x48>)
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d109      	bne.n	800a4f6 <vPortExitCritical+0x22>
 800a4e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4e6:	f383 8811 	msr	BASEPRI, r3
 800a4ea:	f3bf 8f6f 	isb	sy
 800a4ee:	f3bf 8f4f 	dsb	sy
 800a4f2:	607b      	str	r3, [r7, #4]
 800a4f4:	e7fe      	b.n	800a4f4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800a4f6:	4b09      	ldr	r3, [pc, #36]	; (800a51c <vPortExitCritical+0x48>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	3b01      	subs	r3, #1
 800a4fc:	4a07      	ldr	r2, [pc, #28]	; (800a51c <vPortExitCritical+0x48>)
 800a4fe:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a500:	4b06      	ldr	r3, [pc, #24]	; (800a51c <vPortExitCritical+0x48>)
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d104      	bne.n	800a512 <vPortExitCritical+0x3e>
 800a508:	2300      	movs	r3, #0
 800a50a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800a512:	bf00      	nop
 800a514:	370c      	adds	r7, #12
 800a516:	46bd      	mov	sp, r7
 800a518:	bc80      	pop	{r7}
 800a51a:	4770      	bx	lr
 800a51c:	20000050 	.word	0x20000050

0800a520 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a520:	f3ef 8009 	mrs	r0, PSP
 800a524:	f3bf 8f6f 	isb	sy
 800a528:	4b0d      	ldr	r3, [pc, #52]	; (800a560 <pxCurrentTCBConst>)
 800a52a:	681a      	ldr	r2, [r3, #0]
 800a52c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a530:	6010      	str	r0, [r2, #0]
 800a532:	e92d 4008 	stmdb	sp!, {r3, lr}
 800a536:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a53a:	f380 8811 	msr	BASEPRI, r0
 800a53e:	f7ff fa35 	bl	80099ac <vTaskSwitchContext>
 800a542:	f04f 0000 	mov.w	r0, #0
 800a546:	f380 8811 	msr	BASEPRI, r0
 800a54a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a54e:	6819      	ldr	r1, [r3, #0]
 800a550:	6808      	ldr	r0, [r1, #0]
 800a552:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a556:	f380 8809 	msr	PSP, r0
 800a55a:	f3bf 8f6f 	isb	sy
 800a55e:	4770      	bx	lr

0800a560 <pxCurrentTCBConst>:
 800a560:	20000360 	.word	0x20000360
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a564:	bf00      	nop
 800a566:	bf00      	nop

0800a568 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b082      	sub	sp, #8
 800a56c:	af00      	add	r7, sp, #0
	__asm volatile
 800a56e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a572:	f383 8811 	msr	BASEPRI, r3
 800a576:	f3bf 8f6f 	isb	sy
 800a57a:	f3bf 8f4f 	dsb	sy
 800a57e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a580:	f7ff f958 	bl	8009834 <xTaskIncrementTick>
 800a584:	4603      	mov	r3, r0
 800a586:	2b00      	cmp	r3, #0
 800a588:	d003      	beq.n	800a592 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a58a:	4b06      	ldr	r3, [pc, #24]	; (800a5a4 <SysTick_Handler+0x3c>)
 800a58c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a590:	601a      	str	r2, [r3, #0]
 800a592:	2300      	movs	r3, #0
 800a594:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800a59c:	bf00      	nop
 800a59e:	3708      	adds	r7, #8
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	bd80      	pop	{r7, pc}
 800a5a4:	e000ed04 	.word	0xe000ed04

0800a5a8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a5a8:	b480      	push	{r7}
 800a5aa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a5ac:	4b0a      	ldr	r3, [pc, #40]	; (800a5d8 <vPortSetupTimerInterrupt+0x30>)
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a5b2:	4b0a      	ldr	r3, [pc, #40]	; (800a5dc <vPortSetupTimerInterrupt+0x34>)
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a5b8:	4b09      	ldr	r3, [pc, #36]	; (800a5e0 <vPortSetupTimerInterrupt+0x38>)
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	4a09      	ldr	r2, [pc, #36]	; (800a5e4 <vPortSetupTimerInterrupt+0x3c>)
 800a5be:	fba2 2303 	umull	r2, r3, r2, r3
 800a5c2:	099b      	lsrs	r3, r3, #6
 800a5c4:	4a08      	ldr	r2, [pc, #32]	; (800a5e8 <vPortSetupTimerInterrupt+0x40>)
 800a5c6:	3b01      	subs	r3, #1
 800a5c8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a5ca:	4b03      	ldr	r3, [pc, #12]	; (800a5d8 <vPortSetupTimerInterrupt+0x30>)
 800a5cc:	2207      	movs	r2, #7
 800a5ce:	601a      	str	r2, [r3, #0]
}
 800a5d0:	bf00      	nop
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	bc80      	pop	{r7}
 800a5d6:	4770      	bx	lr
 800a5d8:	e000e010 	.word	0xe000e010
 800a5dc:	e000e018 	.word	0xe000e018
 800a5e0:	20000044 	.word	0x20000044
 800a5e4:	10624dd3 	.word	0x10624dd3
 800a5e8:	e000e014 	.word	0xe000e014

0800a5ec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a5ec:	b480      	push	{r7}
 800a5ee:	b085      	sub	sp, #20
 800a5f0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a5f2:	f3ef 8305 	mrs	r3, IPSR
 800a5f6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	2b0f      	cmp	r3, #15
 800a5fc:	d913      	bls.n	800a626 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a5fe:	4a15      	ldr	r2, [pc, #84]	; (800a654 <vPortValidateInterruptPriority+0x68>)
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	4413      	add	r3, r2
 800a604:	781b      	ldrb	r3, [r3, #0]
 800a606:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a608:	4b13      	ldr	r3, [pc, #76]	; (800a658 <vPortValidateInterruptPriority+0x6c>)
 800a60a:	781b      	ldrb	r3, [r3, #0]
 800a60c:	7afa      	ldrb	r2, [r7, #11]
 800a60e:	429a      	cmp	r2, r3
 800a610:	d209      	bcs.n	800a626 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800a612:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a616:	f383 8811 	msr	BASEPRI, r3
 800a61a:	f3bf 8f6f 	isb	sy
 800a61e:	f3bf 8f4f 	dsb	sy
 800a622:	607b      	str	r3, [r7, #4]
 800a624:	e7fe      	b.n	800a624 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a626:	4b0d      	ldr	r3, [pc, #52]	; (800a65c <vPortValidateInterruptPriority+0x70>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a62e:	4b0c      	ldr	r3, [pc, #48]	; (800a660 <vPortValidateInterruptPriority+0x74>)
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	429a      	cmp	r2, r3
 800a634:	d909      	bls.n	800a64a <vPortValidateInterruptPriority+0x5e>
 800a636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a63a:	f383 8811 	msr	BASEPRI, r3
 800a63e:	f3bf 8f6f 	isb	sy
 800a642:	f3bf 8f4f 	dsb	sy
 800a646:	603b      	str	r3, [r7, #0]
 800a648:	e7fe      	b.n	800a648 <vPortValidateInterruptPriority+0x5c>
	}
 800a64a:	bf00      	nop
 800a64c:	3714      	adds	r7, #20
 800a64e:	46bd      	mov	sp, r7
 800a650:	bc80      	pop	{r7}
 800a652:	4770      	bx	lr
 800a654:	e000e3f0 	.word	0xe000e3f0
 800a658:	2000048c 	.word	0x2000048c
 800a65c:	e000ed0c 	.word	0xe000ed0c
 800a660:	20000490 	.word	0x20000490

0800a664 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b08a      	sub	sp, #40	; 0x28
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a66c:	2300      	movs	r3, #0
 800a66e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a670:	f7ff f836 	bl	80096e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a674:	4b57      	ldr	r3, [pc, #348]	; (800a7d4 <pvPortMalloc+0x170>)
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d101      	bne.n	800a680 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a67c:	f000 f90c 	bl	800a898 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a680:	4b55      	ldr	r3, [pc, #340]	; (800a7d8 <pvPortMalloc+0x174>)
 800a682:	681a      	ldr	r2, [r3, #0]
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	4013      	ands	r3, r2
 800a688:	2b00      	cmp	r3, #0
 800a68a:	f040 808c 	bne.w	800a7a6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d01c      	beq.n	800a6ce <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800a694:	2208      	movs	r2, #8
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	4413      	add	r3, r2
 800a69a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	f003 0307 	and.w	r3, r3, #7
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d013      	beq.n	800a6ce <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	f023 0307 	bic.w	r3, r3, #7
 800a6ac:	3308      	adds	r3, #8
 800a6ae:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	f003 0307 	and.w	r3, r3, #7
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d009      	beq.n	800a6ce <pvPortMalloc+0x6a>
 800a6ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6be:	f383 8811 	msr	BASEPRI, r3
 800a6c2:	f3bf 8f6f 	isb	sy
 800a6c6:	f3bf 8f4f 	dsb	sy
 800a6ca:	617b      	str	r3, [r7, #20]
 800a6cc:	e7fe      	b.n	800a6cc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d068      	beq.n	800a7a6 <pvPortMalloc+0x142>
 800a6d4:	4b41      	ldr	r3, [pc, #260]	; (800a7dc <pvPortMalloc+0x178>)
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	687a      	ldr	r2, [r7, #4]
 800a6da:	429a      	cmp	r2, r3
 800a6dc:	d863      	bhi.n	800a7a6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a6de:	4b40      	ldr	r3, [pc, #256]	; (800a7e0 <pvPortMalloc+0x17c>)
 800a6e0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a6e2:	4b3f      	ldr	r3, [pc, #252]	; (800a7e0 <pvPortMalloc+0x17c>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a6e8:	e004      	b.n	800a6f4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800a6ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ec:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a6ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a6f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6f6:	685b      	ldr	r3, [r3, #4]
 800a6f8:	687a      	ldr	r2, [r7, #4]
 800a6fa:	429a      	cmp	r2, r3
 800a6fc:	d903      	bls.n	800a706 <pvPortMalloc+0xa2>
 800a6fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d1f1      	bne.n	800a6ea <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a706:	4b33      	ldr	r3, [pc, #204]	; (800a7d4 <pvPortMalloc+0x170>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a70c:	429a      	cmp	r2, r3
 800a70e:	d04a      	beq.n	800a7a6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a710:	6a3b      	ldr	r3, [r7, #32]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	2208      	movs	r2, #8
 800a716:	4413      	add	r3, r2
 800a718:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a71a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a71c:	681a      	ldr	r2, [r3, #0]
 800a71e:	6a3b      	ldr	r3, [r7, #32]
 800a720:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a724:	685a      	ldr	r2, [r3, #4]
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	1ad2      	subs	r2, r2, r3
 800a72a:	2308      	movs	r3, #8
 800a72c:	005b      	lsls	r3, r3, #1
 800a72e:	429a      	cmp	r2, r3
 800a730:	d91e      	bls.n	800a770 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a732:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	4413      	add	r3, r2
 800a738:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a73a:	69bb      	ldr	r3, [r7, #24]
 800a73c:	f003 0307 	and.w	r3, r3, #7
 800a740:	2b00      	cmp	r3, #0
 800a742:	d009      	beq.n	800a758 <pvPortMalloc+0xf4>
 800a744:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a748:	f383 8811 	msr	BASEPRI, r3
 800a74c:	f3bf 8f6f 	isb	sy
 800a750:	f3bf 8f4f 	dsb	sy
 800a754:	613b      	str	r3, [r7, #16]
 800a756:	e7fe      	b.n	800a756 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a75a:	685a      	ldr	r2, [r3, #4]
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	1ad2      	subs	r2, r2, r3
 800a760:	69bb      	ldr	r3, [r7, #24]
 800a762:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a766:	687a      	ldr	r2, [r7, #4]
 800a768:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a76a:	69b8      	ldr	r0, [r7, #24]
 800a76c:	f000 f8f6 	bl	800a95c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a770:	4b1a      	ldr	r3, [pc, #104]	; (800a7dc <pvPortMalloc+0x178>)
 800a772:	681a      	ldr	r2, [r3, #0]
 800a774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a776:	685b      	ldr	r3, [r3, #4]
 800a778:	1ad3      	subs	r3, r2, r3
 800a77a:	4a18      	ldr	r2, [pc, #96]	; (800a7dc <pvPortMalloc+0x178>)
 800a77c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a77e:	4b17      	ldr	r3, [pc, #92]	; (800a7dc <pvPortMalloc+0x178>)
 800a780:	681a      	ldr	r2, [r3, #0]
 800a782:	4b18      	ldr	r3, [pc, #96]	; (800a7e4 <pvPortMalloc+0x180>)
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	429a      	cmp	r2, r3
 800a788:	d203      	bcs.n	800a792 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a78a:	4b14      	ldr	r3, [pc, #80]	; (800a7dc <pvPortMalloc+0x178>)
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	4a15      	ldr	r2, [pc, #84]	; (800a7e4 <pvPortMalloc+0x180>)
 800a790:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a794:	685a      	ldr	r2, [r3, #4]
 800a796:	4b10      	ldr	r3, [pc, #64]	; (800a7d8 <pvPortMalloc+0x174>)
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	431a      	orrs	r2, r3
 800a79c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a79e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a7a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a7a6:	f7fe ffa9 	bl	80096fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a7aa:	69fb      	ldr	r3, [r7, #28]
 800a7ac:	f003 0307 	and.w	r3, r3, #7
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d009      	beq.n	800a7c8 <pvPortMalloc+0x164>
 800a7b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7b8:	f383 8811 	msr	BASEPRI, r3
 800a7bc:	f3bf 8f6f 	isb	sy
 800a7c0:	f3bf 8f4f 	dsb	sy
 800a7c4:	60fb      	str	r3, [r7, #12]
 800a7c6:	e7fe      	b.n	800a7c6 <pvPortMalloc+0x162>
	return pvReturn;
 800a7c8:	69fb      	ldr	r3, [r7, #28]
}
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	3728      	adds	r7, #40	; 0x28
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}
 800a7d2:	bf00      	nop
 800a7d4:	2000409c 	.word	0x2000409c
 800a7d8:	200040a8 	.word	0x200040a8
 800a7dc:	200040a0 	.word	0x200040a0
 800a7e0:	20004094 	.word	0x20004094
 800a7e4:	200040a4 	.word	0x200040a4

0800a7e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b086      	sub	sp, #24
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d046      	beq.n	800a888 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a7fa:	2308      	movs	r3, #8
 800a7fc:	425b      	negs	r3, r3
 800a7fe:	697a      	ldr	r2, [r7, #20]
 800a800:	4413      	add	r3, r2
 800a802:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a804:	697b      	ldr	r3, [r7, #20]
 800a806:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a808:	693b      	ldr	r3, [r7, #16]
 800a80a:	685a      	ldr	r2, [r3, #4]
 800a80c:	4b20      	ldr	r3, [pc, #128]	; (800a890 <vPortFree+0xa8>)
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	4013      	ands	r3, r2
 800a812:	2b00      	cmp	r3, #0
 800a814:	d109      	bne.n	800a82a <vPortFree+0x42>
 800a816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a81a:	f383 8811 	msr	BASEPRI, r3
 800a81e:	f3bf 8f6f 	isb	sy
 800a822:	f3bf 8f4f 	dsb	sy
 800a826:	60fb      	str	r3, [r7, #12]
 800a828:	e7fe      	b.n	800a828 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a82a:	693b      	ldr	r3, [r7, #16]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d009      	beq.n	800a846 <vPortFree+0x5e>
 800a832:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a836:	f383 8811 	msr	BASEPRI, r3
 800a83a:	f3bf 8f6f 	isb	sy
 800a83e:	f3bf 8f4f 	dsb	sy
 800a842:	60bb      	str	r3, [r7, #8]
 800a844:	e7fe      	b.n	800a844 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a846:	693b      	ldr	r3, [r7, #16]
 800a848:	685a      	ldr	r2, [r3, #4]
 800a84a:	4b11      	ldr	r3, [pc, #68]	; (800a890 <vPortFree+0xa8>)
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	4013      	ands	r3, r2
 800a850:	2b00      	cmp	r3, #0
 800a852:	d019      	beq.n	800a888 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a854:	693b      	ldr	r3, [r7, #16]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d115      	bne.n	800a888 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a85c:	693b      	ldr	r3, [r7, #16]
 800a85e:	685a      	ldr	r2, [r3, #4]
 800a860:	4b0b      	ldr	r3, [pc, #44]	; (800a890 <vPortFree+0xa8>)
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	43db      	mvns	r3, r3
 800a866:	401a      	ands	r2, r3
 800a868:	693b      	ldr	r3, [r7, #16]
 800a86a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a86c:	f7fe ff38 	bl	80096e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a870:	693b      	ldr	r3, [r7, #16]
 800a872:	685a      	ldr	r2, [r3, #4]
 800a874:	4b07      	ldr	r3, [pc, #28]	; (800a894 <vPortFree+0xac>)
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	4413      	add	r3, r2
 800a87a:	4a06      	ldr	r2, [pc, #24]	; (800a894 <vPortFree+0xac>)
 800a87c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a87e:	6938      	ldr	r0, [r7, #16]
 800a880:	f000 f86c 	bl	800a95c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a884:	f7fe ff3a 	bl	80096fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a888:	bf00      	nop
 800a88a:	3718      	adds	r7, #24
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bd80      	pop	{r7, pc}
 800a890:	200040a8 	.word	0x200040a8
 800a894:	200040a0 	.word	0x200040a0

0800a898 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a898:	b480      	push	{r7}
 800a89a:	b085      	sub	sp, #20
 800a89c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a89e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a8a2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a8a4:	4b27      	ldr	r3, [pc, #156]	; (800a944 <prvHeapInit+0xac>)
 800a8a6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	f003 0307 	and.w	r3, r3, #7
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d00c      	beq.n	800a8cc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	3307      	adds	r3, #7
 800a8b6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	f023 0307 	bic.w	r3, r3, #7
 800a8be:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a8c0:	68ba      	ldr	r2, [r7, #8]
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	1ad3      	subs	r3, r2, r3
 800a8c6:	4a1f      	ldr	r2, [pc, #124]	; (800a944 <prvHeapInit+0xac>)
 800a8c8:	4413      	add	r3, r2
 800a8ca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a8d0:	4a1d      	ldr	r2, [pc, #116]	; (800a948 <prvHeapInit+0xb0>)
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a8d6:	4b1c      	ldr	r3, [pc, #112]	; (800a948 <prvHeapInit+0xb0>)
 800a8d8:	2200      	movs	r2, #0
 800a8da:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	68ba      	ldr	r2, [r7, #8]
 800a8e0:	4413      	add	r3, r2
 800a8e2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a8e4:	2208      	movs	r2, #8
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	1a9b      	subs	r3, r3, r2
 800a8ea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	f023 0307 	bic.w	r3, r3, #7
 800a8f2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	4a15      	ldr	r2, [pc, #84]	; (800a94c <prvHeapInit+0xb4>)
 800a8f8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a8fa:	4b14      	ldr	r3, [pc, #80]	; (800a94c <prvHeapInit+0xb4>)
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	2200      	movs	r2, #0
 800a900:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a902:	4b12      	ldr	r3, [pc, #72]	; (800a94c <prvHeapInit+0xb4>)
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	2200      	movs	r2, #0
 800a908:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	68fa      	ldr	r2, [r7, #12]
 800a912:	1ad2      	subs	r2, r2, r3
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a918:	4b0c      	ldr	r3, [pc, #48]	; (800a94c <prvHeapInit+0xb4>)
 800a91a:	681a      	ldr	r2, [r3, #0]
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	685b      	ldr	r3, [r3, #4]
 800a924:	4a0a      	ldr	r2, [pc, #40]	; (800a950 <prvHeapInit+0xb8>)
 800a926:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	685b      	ldr	r3, [r3, #4]
 800a92c:	4a09      	ldr	r2, [pc, #36]	; (800a954 <prvHeapInit+0xbc>)
 800a92e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a930:	4b09      	ldr	r3, [pc, #36]	; (800a958 <prvHeapInit+0xc0>)
 800a932:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a936:	601a      	str	r2, [r3, #0]
}
 800a938:	bf00      	nop
 800a93a:	3714      	adds	r7, #20
 800a93c:	46bd      	mov	sp, r7
 800a93e:	bc80      	pop	{r7}
 800a940:	4770      	bx	lr
 800a942:	bf00      	nop
 800a944:	20000494 	.word	0x20000494
 800a948:	20004094 	.word	0x20004094
 800a94c:	2000409c 	.word	0x2000409c
 800a950:	200040a4 	.word	0x200040a4
 800a954:	200040a0 	.word	0x200040a0
 800a958:	200040a8 	.word	0x200040a8

0800a95c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a95c:	b480      	push	{r7}
 800a95e:	b085      	sub	sp, #20
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a964:	4b27      	ldr	r3, [pc, #156]	; (800aa04 <prvInsertBlockIntoFreeList+0xa8>)
 800a966:	60fb      	str	r3, [r7, #12]
 800a968:	e002      	b.n	800a970 <prvInsertBlockIntoFreeList+0x14>
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	60fb      	str	r3, [r7, #12]
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	687a      	ldr	r2, [r7, #4]
 800a976:	429a      	cmp	r2, r3
 800a978:	d8f7      	bhi.n	800a96a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	685b      	ldr	r3, [r3, #4]
 800a982:	68ba      	ldr	r2, [r7, #8]
 800a984:	4413      	add	r3, r2
 800a986:	687a      	ldr	r2, [r7, #4]
 800a988:	429a      	cmp	r2, r3
 800a98a:	d108      	bne.n	800a99e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	685a      	ldr	r2, [r3, #4]
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	685b      	ldr	r3, [r3, #4]
 800a994:	441a      	add	r2, r3
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	685b      	ldr	r3, [r3, #4]
 800a9a6:	68ba      	ldr	r2, [r7, #8]
 800a9a8:	441a      	add	r2, r3
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	429a      	cmp	r2, r3
 800a9b0:	d118      	bne.n	800a9e4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	681a      	ldr	r2, [r3, #0]
 800a9b6:	4b14      	ldr	r3, [pc, #80]	; (800aa08 <prvInsertBlockIntoFreeList+0xac>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	429a      	cmp	r2, r3
 800a9bc:	d00d      	beq.n	800a9da <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	685a      	ldr	r2, [r3, #4]
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	685b      	ldr	r3, [r3, #4]
 800a9c8:	441a      	add	r2, r3
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	681a      	ldr	r2, [r3, #0]
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	601a      	str	r2, [r3, #0]
 800a9d8:	e008      	b.n	800a9ec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a9da:	4b0b      	ldr	r3, [pc, #44]	; (800aa08 <prvInsertBlockIntoFreeList+0xac>)
 800a9dc:	681a      	ldr	r2, [r3, #0]
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	601a      	str	r2, [r3, #0]
 800a9e2:	e003      	b.n	800a9ec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	681a      	ldr	r2, [r3, #0]
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a9ec:	68fa      	ldr	r2, [r7, #12]
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	429a      	cmp	r2, r3
 800a9f2:	d002      	beq.n	800a9fa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	687a      	ldr	r2, [r7, #4]
 800a9f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a9fa:	bf00      	nop
 800a9fc:	3714      	adds	r7, #20
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	bc80      	pop	{r7}
 800aa02:	4770      	bx	lr
 800aa04:	20004094 	.word	0x20004094
 800aa08:	2000409c 	.word	0x2000409c

0800aa0c <__errno>:
 800aa0c:	4b01      	ldr	r3, [pc, #4]	; (800aa14 <__errno+0x8>)
 800aa0e:	6818      	ldr	r0, [r3, #0]
 800aa10:	4770      	bx	lr
 800aa12:	bf00      	nop
 800aa14:	20000054 	.word	0x20000054

0800aa18 <__libc_init_array>:
 800aa18:	b570      	push	{r4, r5, r6, lr}
 800aa1a:	2500      	movs	r5, #0
 800aa1c:	4e0c      	ldr	r6, [pc, #48]	; (800aa50 <__libc_init_array+0x38>)
 800aa1e:	4c0d      	ldr	r4, [pc, #52]	; (800aa54 <__libc_init_array+0x3c>)
 800aa20:	1ba4      	subs	r4, r4, r6
 800aa22:	10a4      	asrs	r4, r4, #2
 800aa24:	42a5      	cmp	r5, r4
 800aa26:	d109      	bne.n	800aa3c <__libc_init_array+0x24>
 800aa28:	f000 f8f6 	bl	800ac18 <_init>
 800aa2c:	2500      	movs	r5, #0
 800aa2e:	4e0a      	ldr	r6, [pc, #40]	; (800aa58 <__libc_init_array+0x40>)
 800aa30:	4c0a      	ldr	r4, [pc, #40]	; (800aa5c <__libc_init_array+0x44>)
 800aa32:	1ba4      	subs	r4, r4, r6
 800aa34:	10a4      	asrs	r4, r4, #2
 800aa36:	42a5      	cmp	r5, r4
 800aa38:	d105      	bne.n	800aa46 <__libc_init_array+0x2e>
 800aa3a:	bd70      	pop	{r4, r5, r6, pc}
 800aa3c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800aa40:	4798      	blx	r3
 800aa42:	3501      	adds	r5, #1
 800aa44:	e7ee      	b.n	800aa24 <__libc_init_array+0xc>
 800aa46:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800aa4a:	4798      	blx	r3
 800aa4c:	3501      	adds	r5, #1
 800aa4e:	e7f2      	b.n	800aa36 <__libc_init_array+0x1e>
 800aa50:	0802c5a4 	.word	0x0802c5a4
 800aa54:	0802c5a4 	.word	0x0802c5a4
 800aa58:	0802c5a4 	.word	0x0802c5a4
 800aa5c:	0802c5a8 	.word	0x0802c5a8

0800aa60 <malloc>:
 800aa60:	4b02      	ldr	r3, [pc, #8]	; (800aa6c <malloc+0xc>)
 800aa62:	4601      	mov	r1, r0
 800aa64:	6818      	ldr	r0, [r3, #0]
 800aa66:	f000 b86b 	b.w	800ab40 <_malloc_r>
 800aa6a:	bf00      	nop
 800aa6c:	20000054 	.word	0x20000054

0800aa70 <free>:
 800aa70:	4b02      	ldr	r3, [pc, #8]	; (800aa7c <free+0xc>)
 800aa72:	4601      	mov	r1, r0
 800aa74:	6818      	ldr	r0, [r3, #0]
 800aa76:	f000 b817 	b.w	800aaa8 <_free_r>
 800aa7a:	bf00      	nop
 800aa7c:	20000054 	.word	0x20000054

0800aa80 <memcpy>:
 800aa80:	b510      	push	{r4, lr}
 800aa82:	1e43      	subs	r3, r0, #1
 800aa84:	440a      	add	r2, r1
 800aa86:	4291      	cmp	r1, r2
 800aa88:	d100      	bne.n	800aa8c <memcpy+0xc>
 800aa8a:	bd10      	pop	{r4, pc}
 800aa8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa90:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aa94:	e7f7      	b.n	800aa86 <memcpy+0x6>

0800aa96 <memset>:
 800aa96:	4603      	mov	r3, r0
 800aa98:	4402      	add	r2, r0
 800aa9a:	4293      	cmp	r3, r2
 800aa9c:	d100      	bne.n	800aaa0 <memset+0xa>
 800aa9e:	4770      	bx	lr
 800aaa0:	f803 1b01 	strb.w	r1, [r3], #1
 800aaa4:	e7f9      	b.n	800aa9a <memset+0x4>
	...

0800aaa8 <_free_r>:
 800aaa8:	b538      	push	{r3, r4, r5, lr}
 800aaaa:	4605      	mov	r5, r0
 800aaac:	2900      	cmp	r1, #0
 800aaae:	d043      	beq.n	800ab38 <_free_r+0x90>
 800aab0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aab4:	1f0c      	subs	r4, r1, #4
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	bfb8      	it	lt
 800aaba:	18e4      	addlt	r4, r4, r3
 800aabc:	f000 f8aa 	bl	800ac14 <__malloc_lock>
 800aac0:	4a1e      	ldr	r2, [pc, #120]	; (800ab3c <_free_r+0x94>)
 800aac2:	6813      	ldr	r3, [r2, #0]
 800aac4:	4610      	mov	r0, r2
 800aac6:	b933      	cbnz	r3, 800aad6 <_free_r+0x2e>
 800aac8:	6063      	str	r3, [r4, #4]
 800aaca:	6014      	str	r4, [r2, #0]
 800aacc:	4628      	mov	r0, r5
 800aace:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aad2:	f000 b8a0 	b.w	800ac16 <__malloc_unlock>
 800aad6:	42a3      	cmp	r3, r4
 800aad8:	d90b      	bls.n	800aaf2 <_free_r+0x4a>
 800aada:	6821      	ldr	r1, [r4, #0]
 800aadc:	1862      	adds	r2, r4, r1
 800aade:	4293      	cmp	r3, r2
 800aae0:	bf01      	itttt	eq
 800aae2:	681a      	ldreq	r2, [r3, #0]
 800aae4:	685b      	ldreq	r3, [r3, #4]
 800aae6:	1852      	addeq	r2, r2, r1
 800aae8:	6022      	streq	r2, [r4, #0]
 800aaea:	6063      	str	r3, [r4, #4]
 800aaec:	6004      	str	r4, [r0, #0]
 800aaee:	e7ed      	b.n	800aacc <_free_r+0x24>
 800aaf0:	4613      	mov	r3, r2
 800aaf2:	685a      	ldr	r2, [r3, #4]
 800aaf4:	b10a      	cbz	r2, 800aafa <_free_r+0x52>
 800aaf6:	42a2      	cmp	r2, r4
 800aaf8:	d9fa      	bls.n	800aaf0 <_free_r+0x48>
 800aafa:	6819      	ldr	r1, [r3, #0]
 800aafc:	1858      	adds	r0, r3, r1
 800aafe:	42a0      	cmp	r0, r4
 800ab00:	d10b      	bne.n	800ab1a <_free_r+0x72>
 800ab02:	6820      	ldr	r0, [r4, #0]
 800ab04:	4401      	add	r1, r0
 800ab06:	1858      	adds	r0, r3, r1
 800ab08:	4282      	cmp	r2, r0
 800ab0a:	6019      	str	r1, [r3, #0]
 800ab0c:	d1de      	bne.n	800aacc <_free_r+0x24>
 800ab0e:	6810      	ldr	r0, [r2, #0]
 800ab10:	6852      	ldr	r2, [r2, #4]
 800ab12:	4401      	add	r1, r0
 800ab14:	6019      	str	r1, [r3, #0]
 800ab16:	605a      	str	r2, [r3, #4]
 800ab18:	e7d8      	b.n	800aacc <_free_r+0x24>
 800ab1a:	d902      	bls.n	800ab22 <_free_r+0x7a>
 800ab1c:	230c      	movs	r3, #12
 800ab1e:	602b      	str	r3, [r5, #0]
 800ab20:	e7d4      	b.n	800aacc <_free_r+0x24>
 800ab22:	6820      	ldr	r0, [r4, #0]
 800ab24:	1821      	adds	r1, r4, r0
 800ab26:	428a      	cmp	r2, r1
 800ab28:	bf01      	itttt	eq
 800ab2a:	6811      	ldreq	r1, [r2, #0]
 800ab2c:	6852      	ldreq	r2, [r2, #4]
 800ab2e:	1809      	addeq	r1, r1, r0
 800ab30:	6021      	streq	r1, [r4, #0]
 800ab32:	6062      	str	r2, [r4, #4]
 800ab34:	605c      	str	r4, [r3, #4]
 800ab36:	e7c9      	b.n	800aacc <_free_r+0x24>
 800ab38:	bd38      	pop	{r3, r4, r5, pc}
 800ab3a:	bf00      	nop
 800ab3c:	200040ac 	.word	0x200040ac

0800ab40 <_malloc_r>:
 800ab40:	b570      	push	{r4, r5, r6, lr}
 800ab42:	1ccd      	adds	r5, r1, #3
 800ab44:	f025 0503 	bic.w	r5, r5, #3
 800ab48:	3508      	adds	r5, #8
 800ab4a:	2d0c      	cmp	r5, #12
 800ab4c:	bf38      	it	cc
 800ab4e:	250c      	movcc	r5, #12
 800ab50:	2d00      	cmp	r5, #0
 800ab52:	4606      	mov	r6, r0
 800ab54:	db01      	blt.n	800ab5a <_malloc_r+0x1a>
 800ab56:	42a9      	cmp	r1, r5
 800ab58:	d903      	bls.n	800ab62 <_malloc_r+0x22>
 800ab5a:	230c      	movs	r3, #12
 800ab5c:	6033      	str	r3, [r6, #0]
 800ab5e:	2000      	movs	r0, #0
 800ab60:	bd70      	pop	{r4, r5, r6, pc}
 800ab62:	f000 f857 	bl	800ac14 <__malloc_lock>
 800ab66:	4a21      	ldr	r2, [pc, #132]	; (800abec <_malloc_r+0xac>)
 800ab68:	6814      	ldr	r4, [r2, #0]
 800ab6a:	4621      	mov	r1, r4
 800ab6c:	b991      	cbnz	r1, 800ab94 <_malloc_r+0x54>
 800ab6e:	4c20      	ldr	r4, [pc, #128]	; (800abf0 <_malloc_r+0xb0>)
 800ab70:	6823      	ldr	r3, [r4, #0]
 800ab72:	b91b      	cbnz	r3, 800ab7c <_malloc_r+0x3c>
 800ab74:	4630      	mov	r0, r6
 800ab76:	f000 f83d 	bl	800abf4 <_sbrk_r>
 800ab7a:	6020      	str	r0, [r4, #0]
 800ab7c:	4629      	mov	r1, r5
 800ab7e:	4630      	mov	r0, r6
 800ab80:	f000 f838 	bl	800abf4 <_sbrk_r>
 800ab84:	1c43      	adds	r3, r0, #1
 800ab86:	d124      	bne.n	800abd2 <_malloc_r+0x92>
 800ab88:	230c      	movs	r3, #12
 800ab8a:	4630      	mov	r0, r6
 800ab8c:	6033      	str	r3, [r6, #0]
 800ab8e:	f000 f842 	bl	800ac16 <__malloc_unlock>
 800ab92:	e7e4      	b.n	800ab5e <_malloc_r+0x1e>
 800ab94:	680b      	ldr	r3, [r1, #0]
 800ab96:	1b5b      	subs	r3, r3, r5
 800ab98:	d418      	bmi.n	800abcc <_malloc_r+0x8c>
 800ab9a:	2b0b      	cmp	r3, #11
 800ab9c:	d90f      	bls.n	800abbe <_malloc_r+0x7e>
 800ab9e:	600b      	str	r3, [r1, #0]
 800aba0:	18cc      	adds	r4, r1, r3
 800aba2:	50cd      	str	r5, [r1, r3]
 800aba4:	4630      	mov	r0, r6
 800aba6:	f000 f836 	bl	800ac16 <__malloc_unlock>
 800abaa:	f104 000b 	add.w	r0, r4, #11
 800abae:	1d23      	adds	r3, r4, #4
 800abb0:	f020 0007 	bic.w	r0, r0, #7
 800abb4:	1ac3      	subs	r3, r0, r3
 800abb6:	d0d3      	beq.n	800ab60 <_malloc_r+0x20>
 800abb8:	425a      	negs	r2, r3
 800abba:	50e2      	str	r2, [r4, r3]
 800abbc:	e7d0      	b.n	800ab60 <_malloc_r+0x20>
 800abbe:	684b      	ldr	r3, [r1, #4]
 800abc0:	428c      	cmp	r4, r1
 800abc2:	bf16      	itet	ne
 800abc4:	6063      	strne	r3, [r4, #4]
 800abc6:	6013      	streq	r3, [r2, #0]
 800abc8:	460c      	movne	r4, r1
 800abca:	e7eb      	b.n	800aba4 <_malloc_r+0x64>
 800abcc:	460c      	mov	r4, r1
 800abce:	6849      	ldr	r1, [r1, #4]
 800abd0:	e7cc      	b.n	800ab6c <_malloc_r+0x2c>
 800abd2:	1cc4      	adds	r4, r0, #3
 800abd4:	f024 0403 	bic.w	r4, r4, #3
 800abd8:	42a0      	cmp	r0, r4
 800abda:	d005      	beq.n	800abe8 <_malloc_r+0xa8>
 800abdc:	1a21      	subs	r1, r4, r0
 800abde:	4630      	mov	r0, r6
 800abe0:	f000 f808 	bl	800abf4 <_sbrk_r>
 800abe4:	3001      	adds	r0, #1
 800abe6:	d0cf      	beq.n	800ab88 <_malloc_r+0x48>
 800abe8:	6025      	str	r5, [r4, #0]
 800abea:	e7db      	b.n	800aba4 <_malloc_r+0x64>
 800abec:	200040ac 	.word	0x200040ac
 800abf0:	200040b0 	.word	0x200040b0

0800abf4 <_sbrk_r>:
 800abf4:	b538      	push	{r3, r4, r5, lr}
 800abf6:	2300      	movs	r3, #0
 800abf8:	4c05      	ldr	r4, [pc, #20]	; (800ac10 <_sbrk_r+0x1c>)
 800abfa:	4605      	mov	r5, r0
 800abfc:	4608      	mov	r0, r1
 800abfe:	6023      	str	r3, [r4, #0]
 800ac00:	f7f6 f9f2 	bl	8000fe8 <_sbrk>
 800ac04:	1c43      	adds	r3, r0, #1
 800ac06:	d102      	bne.n	800ac0e <_sbrk_r+0x1a>
 800ac08:	6823      	ldr	r3, [r4, #0]
 800ac0a:	b103      	cbz	r3, 800ac0e <_sbrk_r+0x1a>
 800ac0c:	602b      	str	r3, [r5, #0]
 800ac0e:	bd38      	pop	{r3, r4, r5, pc}
 800ac10:	20004bac 	.word	0x20004bac

0800ac14 <__malloc_lock>:
 800ac14:	4770      	bx	lr

0800ac16 <__malloc_unlock>:
 800ac16:	4770      	bx	lr

0800ac18 <_init>:
 800ac18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac1a:	bf00      	nop
 800ac1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac1e:	bc08      	pop	{r3}
 800ac20:	469e      	mov	lr, r3
 800ac22:	4770      	bx	lr

0800ac24 <_fini>:
 800ac24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac26:	bf00      	nop
 800ac28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac2a:	bc08      	pop	{r3}
 800ac2c:	469e      	mov	lr, r3
 800ac2e:	4770      	bx	lr
