
FatFS_uSD_RTOS_207ZG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007bb4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08007d44  08007d44  00017d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e0c  08007e0c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08007e0c  08007e0c  00017e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e14  08007e14  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e14  08007e14  00017e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e18  08007e18  00017e18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007e1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ac00  20000010  08007e2c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00002000  2000ac10  08007e2c  0002ac10  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d2f4  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003b04  00000000  00000000  0003d32d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001768  00000000  00000000  00040e38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000015b0  00000000  00000000  000425a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000413a  00000000  00000000  00043b50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014411  00000000  00000000  00047c8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d1e64  00000000  00000000  0005c09b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012deff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061b0  00000000  00000000  0012df7c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007d2c 	.word	0x08007d2c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08007d2c 	.word	0x08007d2c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	468c      	mov	ip, r1
 8000206:	4604      	mov	r4, r0
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0c03 	orr.w	ip, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	fbbc f7fe 	udiv	r7, ip, lr
 8000236:	fa1f f885 	uxth.w	r8, r5
 800023a:	fb0e c317 	mls	r3, lr, r7, ip
 800023e:	fb07 f908 	mul.w	r9, r7, r8
 8000242:	0c21      	lsrs	r1, r4, #16
 8000244:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000248:	4599      	cmp	r9, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 31ff 	add.w	r1, r7, #4294967295
 8000252:	f080 811c 	bcs.w	800048e <__udivmoddi4+0x28e>
 8000256:	4599      	cmp	r9, r3
 8000258:	f240 8119 	bls.w	800048e <__udivmoddi4+0x28e>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	eba3 0309 	sub.w	r3, r3, r9
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	fb00 f108 	mul.w	r1, r0, r8
 8000270:	b2a4      	uxth	r4, r4
 8000272:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000276:	42a1      	cmp	r1, r4
 8000278:	d909      	bls.n	800028e <__udivmoddi4+0x8e>
 800027a:	192c      	adds	r4, r5, r4
 800027c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000280:	f080 8107 	bcs.w	8000492 <__udivmoddi4+0x292>
 8000284:	42a1      	cmp	r1, r4
 8000286:	f240 8104 	bls.w	8000492 <__udivmoddi4+0x292>
 800028a:	3802      	subs	r0, #2
 800028c:	442c      	add	r4, r5
 800028e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000292:	2700      	movs	r7, #0
 8000294:	1a64      	subs	r4, r4, r1
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	2300      	movs	r3, #0
 800029a:	40d4      	lsrs	r4, r2
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80ec 	beq.w	8000488 <__udivmoddi4+0x288>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d148      	bne.n	8000358 <__udivmoddi4+0x158>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fb 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	469c      	mov	ip, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4c00 	strd	r4, ip, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	2701      	movs	r7, #1
 80002f4:	1b49      	subs	r1, r1, r5
 80002f6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80002fa:	fa1f f985 	uxth.w	r9, r5
 80002fe:	fbb1 fef8 	udiv	lr, r1, r8
 8000302:	fb08 111e 	mls	r1, r8, lr, r1
 8000306:	fb09 f00e 	mul.w	r0, r9, lr
 800030a:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800030e:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000312:	4298      	cmp	r0, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x126>
 8000316:	18eb      	adds	r3, r5, r3
 8000318:	f10e 31ff 	add.w	r1, lr, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x124>
 800031e:	4298      	cmp	r0, r3
 8000320:	f200 80cd 	bhi.w	80004be <__udivmoddi4+0x2be>
 8000324:	468e      	mov	lr, r1
 8000326:	1a1b      	subs	r3, r3, r0
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	fb09 f900 	mul.w	r9, r9, r0
 8000334:	b2a4      	uxth	r4, r4
 8000336:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800033a:	45a1      	cmp	r9, r4
 800033c:	d907      	bls.n	800034e <__udivmoddi4+0x14e>
 800033e:	192c      	adds	r4, r5, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x14c>
 8000346:	45a1      	cmp	r9, r4
 8000348:	f200 80b6 	bhi.w	80004b8 <__udivmoddi4+0x2b8>
 800034c:	4618      	mov	r0, r3
 800034e:	eba4 0409 	sub.w	r4, r4, r9
 8000352:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000356:	e79e      	b.n	8000296 <__udivmoddi4+0x96>
 8000358:	f1c7 0520 	rsb	r5, r7, #32
 800035c:	40bb      	lsls	r3, r7
 800035e:	fa22 fc05 	lsr.w	ip, r2, r5
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa21 f405 	lsr.w	r4, r1, r5
 800036a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800036e:	fbb4 f9fe 	udiv	r9, r4, lr
 8000372:	fa1f f88c 	uxth.w	r8, ip
 8000376:	fb0e 4419 	mls	r4, lr, r9, r4
 800037a:	fa20 f305 	lsr.w	r3, r0, r5
 800037e:	40b9      	lsls	r1, r7
 8000380:	fb09 fa08 	mul.w	sl, r9, r8
 8000384:	4319      	orrs	r1, r3
 8000386:	0c0b      	lsrs	r3, r1, #16
 8000388:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800038c:	45a2      	cmp	sl, r4
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f307 	lsl.w	r3, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2b4>
 80003a4:	45a2      	cmp	sl, r4
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2b4>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4464      	add	r4, ip
 80003b0:	eba4 040a 	sub.w	r4, r4, sl
 80003b4:	fbb4 f0fe 	udiv	r0, r4, lr
 80003b8:	fb0e 4410 	mls	r4, lr, r0, r4
 80003bc:	fb00 fa08 	mul.w	sl, r0, r8
 80003c0:	b289      	uxth	r1, r1
 80003c2:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 80003c6:	45a2      	cmp	sl, r4
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x1dc>
 80003ca:	eb1c 0404 	adds.w	r4, ip, r4
 80003ce:	f100 31ff 	add.w	r1, r0, #4294967295
 80003d2:	d26b      	bcs.n	80004ac <__udivmoddi4+0x2ac>
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d969      	bls.n	80004ac <__udivmoddi4+0x2ac>
 80003d8:	3802      	subs	r0, #2
 80003da:	4464      	add	r4, ip
 80003dc:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e0:	fba0 8902 	umull	r8, r9, r0, r2
 80003e4:	eba4 040a 	sub.w	r4, r4, sl
 80003e8:	454c      	cmp	r4, r9
 80003ea:	4641      	mov	r1, r8
 80003ec:	46ce      	mov	lr, r9
 80003ee:	d354      	bcc.n	800049a <__udivmoddi4+0x29a>
 80003f0:	d051      	beq.n	8000496 <__udivmoddi4+0x296>
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d069      	beq.n	80004ca <__udivmoddi4+0x2ca>
 80003f6:	1a5a      	subs	r2, r3, r1
 80003f8:	eb64 040e 	sbc.w	r4, r4, lr
 80003fc:	fa04 f505 	lsl.w	r5, r4, r5
 8000400:	fa22 f307 	lsr.w	r3, r2, r7
 8000404:	40fc      	lsrs	r4, r7
 8000406:	431d      	orrs	r5, r3
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	4095      	lsls	r5, r2
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	fa21 f003 	lsr.w	r0, r1, r3
 800041a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800041e:	fbb0 f7f8 	udiv	r7, r0, r8
 8000422:	fa1f f985 	uxth.w	r9, r5
 8000426:	fb08 0017 	mls	r0, r8, r7, r0
 800042a:	fa24 f303 	lsr.w	r3, r4, r3
 800042e:	4091      	lsls	r1, r2
 8000430:	fb07 fc09 	mul.w	ip, r7, r9
 8000434:	430b      	orrs	r3, r1
 8000436:	0c19      	lsrs	r1, r3, #16
 8000438:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800043c:	458c      	cmp	ip, r1
 800043e:	fa04 f402 	lsl.w	r4, r4, r2
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x254>
 8000444:	1869      	adds	r1, r5, r1
 8000446:	f107 30ff 	add.w	r0, r7, #4294967295
 800044a:	d231      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 800044c:	458c      	cmp	ip, r1
 800044e:	d92f      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000450:	3f02      	subs	r7, #2
 8000452:	4429      	add	r1, r5
 8000454:	eba1 010c 	sub.w	r1, r1, ip
 8000458:	fbb1 f0f8 	udiv	r0, r1, r8
 800045c:	fb08 1c10 	mls	ip, r8, r0, r1
 8000460:	fb00 fe09 	mul.w	lr, r0, r9
 8000464:	b299      	uxth	r1, r3
 8000466:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800046a:	458e      	cmp	lr, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 33ff 	add.w	r3, r0, #4294967295
 8000474:	d218      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000476:	458e      	cmp	lr, r1
 8000478:	d916      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	eba1 010e 	sub.w	r1, r1, lr
 8000482:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000486:	e73a      	b.n	80002fe <__udivmoddi4+0xfe>
 8000488:	4637      	mov	r7, r6
 800048a:	4630      	mov	r0, r6
 800048c:	e708      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048e:	460f      	mov	r7, r1
 8000490:	e6e6      	b.n	8000260 <__udivmoddi4+0x60>
 8000492:	4618      	mov	r0, r3
 8000494:	e6fb      	b.n	800028e <__udivmoddi4+0x8e>
 8000496:	4543      	cmp	r3, r8
 8000498:	d2ab      	bcs.n	80003f2 <__udivmoddi4+0x1f2>
 800049a:	ebb8 0102 	subs.w	r1, r8, r2
 800049e:	eb69 020c 	sbc.w	r2, r9, ip
 80004a2:	3801      	subs	r0, #1
 80004a4:	4696      	mov	lr, r2
 80004a6:	e7a4      	b.n	80003f2 <__udivmoddi4+0x1f2>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e7e8      	b.n	800047e <__udivmoddi4+0x27e>
 80004ac:	4608      	mov	r0, r1
 80004ae:	e795      	b.n	80003dc <__udivmoddi4+0x1dc>
 80004b0:	4607      	mov	r7, r0
 80004b2:	e7cf      	b.n	8000454 <__udivmoddi4+0x254>
 80004b4:	4681      	mov	r9, r0
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b8:	3802      	subs	r0, #2
 80004ba:	442c      	add	r4, r5
 80004bc:	e747      	b.n	800034e <__udivmoddi4+0x14e>
 80004be:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c2:	442b      	add	r3, r5
 80004c4:	e72f      	b.n	8000326 <__udivmoddi4+0x126>
 80004c6:	4638      	mov	r0, r7
 80004c8:	e707      	b.n	80002da <__udivmoddi4+0xda>
 80004ca:	4637      	mov	r7, r6
 80004cc:	e6e8      	b.n	80002a0 <__udivmoddi4+0xa0>
 80004ce:	bf00      	nop

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004d8:	f000 fc1e 	bl	8000d18 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004dc:	f000 f836 	bl	800054c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004e0:	f000 f8ee 	bl	80006c0 <MX_GPIO_Init>
	MX_DMA_Init();
 80004e4:	f000 f8c4 	bl	8000670 <MX_DMA_Init>
	MX_USART3_UART_Init();
 80004e8:	f000 f898 	bl	800061c <MX_USART3_UART_Init>
	MX_SDIO_SD_Init();
 80004ec:	f000 f876 	bl	80005dc <MX_SDIO_SD_Init>
	MX_FATFS_Init();
 80004f0:	f004 fc02 	bl	8004cf8 <MX_FATFS_Init>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 80004f4:	f004 fe32 	bl	800515c <osKernelInitialize>
	/* Create the mutex(es) */
	/* creation of myMutex01 */
	myMutex01Handle = osMutexNew(&myMutex01_attributes);
 80004f8:	480c      	ldr	r0, [pc, #48]	; (800052c <main+0x58>)
 80004fa:	f004 ff6d 	bl	80053d8 <osMutexNew>
 80004fe:	4602      	mov	r2, r0
 8000500:	4b0b      	ldr	r3, [pc, #44]	; (8000530 <main+0x5c>)
 8000502:	601a      	str	r2, [r3, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of firstTask */
	firstTaskHandle = osThreadNew(taskT1, NULL, &firstTask_attributes);
 8000504:	4a0b      	ldr	r2, [pc, #44]	; (8000534 <main+0x60>)
 8000506:	2100      	movs	r1, #0
 8000508:	480b      	ldr	r0, [pc, #44]	; (8000538 <main+0x64>)
 800050a:	f004 fe8d 	bl	8005228 <osThreadNew>
 800050e:	4602      	mov	r2, r0
 8000510:	4b0a      	ldr	r3, [pc, #40]	; (800053c <main+0x68>)
 8000512:	601a      	str	r2, [r3, #0]

	/* creation of myTask02 */
	myTask02Handle = osThreadNew(taskT2, NULL, &myTask02_attributes);
 8000514:	4a0a      	ldr	r2, [pc, #40]	; (8000540 <main+0x6c>)
 8000516:	2100      	movs	r1, #0
 8000518:	480a      	ldr	r0, [pc, #40]	; (8000544 <main+0x70>)
 800051a:	f004 fe85 	bl	8005228 <osThreadNew>
 800051e:	4602      	mov	r2, r0
 8000520:	4b09      	ldr	r3, [pc, #36]	; (8000548 <main+0x74>)
 8000522:	601a      	str	r2, [r3, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8000524:	f004 fe4c 	bl	80051c0 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000528:	e7fe      	b.n	8000528 <main+0x54>
 800052a:	bf00      	nop
 800052c:	08007dc8 	.word	0x08007dc8
 8000530:	20008b1c 	.word	0x20008b1c
 8000534:	08007d80 	.word	0x08007d80
 8000538:	08000875 	.word	0x08000875
 800053c:	200069c8 	.word	0x200069c8
 8000540:	08007da4 	.word	0x08007da4
 8000544:	08000885 	.word	0x08000885
 8000548:	200069d0 	.word	0x200069d0

0800054c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b092      	sub	sp, #72	; 0x48
 8000550:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 8000552:	f107 0318 	add.w	r3, r7, #24
 8000556:	2230      	movs	r2, #48	; 0x30
 8000558:	2100      	movs	r1, #0
 800055a:	4618      	mov	r0, r3
 800055c:	f007 fbdd 	bl	8007d1a <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8000560:	1d3b      	adds	r3, r7, #4
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]
 8000566:	605a      	str	r2, [r3, #4]
 8000568:	609a      	str	r2, [r3, #8]
 800056a:	60da      	str	r2, [r3, #12]
 800056c:	611a      	str	r2, [r3, #16]
	{ 0 };

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800056e:	2302      	movs	r3, #2
 8000570:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000572:	2301      	movs	r3, #1
 8000574:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000576:	2310      	movs	r3, #16
 8000578:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800057a:	2302      	movs	r3, #2
 800057c:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800057e:	2300      	movs	r3, #0
 8000580:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLM = 13;
 8000582:	230d      	movs	r3, #13
 8000584:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLN = 195;
 8000586:	23c3      	movs	r3, #195	; 0xc3
 8000588:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800058a:	2302      	movs	r3, #2
 800058c:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLQ = 5;
 800058e:	2305      	movs	r3, #5
 8000590:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000592:	f107 0318 	add.w	r3, r7, #24
 8000596:	4618      	mov	r0, r3
 8000598:	f001 f9d4 	bl	8001944 <HAL_RCC_OscConfig>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <SystemClock_Config+0x5a>
	{
		Error_Handler();
 80005a2:	f000 f989 	bl	80008b8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80005a6:	230f      	movs	r3, #15
 80005a8:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005aa:	2302      	movs	r3, #2
 80005ac:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ae:	2300      	movs	r3, #0
 80005b0:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005b2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005b6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005bc:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005be:	1d3b      	adds	r3, r7, #4
 80005c0:	2103      	movs	r1, #3
 80005c2:	4618      	mov	r0, r3
 80005c4:	f001 fc0e 	bl	8001de4 <HAL_RCC_ClockConfig>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0x86>
	{
		Error_Handler();
 80005ce:	f000 f973 	bl	80008b8 <Error_Handler>
	}
}
 80005d2:	bf00      	nop
 80005d4:	3748      	adds	r7, #72	; 0x48
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
	...

080005dc <MX_SDIO_SD_Init>:
 * @brief SDIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDIO_SD_Init(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
	/* USER CODE END SDIO_Init 0 */

	/* USER CODE BEGIN SDIO_Init 1 */

	/* USER CODE END SDIO_Init 1 */
	hsd.Instance = SDIO;
 80005e0:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <MX_SDIO_SD_Init+0x38>)
 80005e2:	4a0d      	ldr	r2, [pc, #52]	; (8000618 <MX_SDIO_SD_Init+0x3c>)
 80005e4:	601a      	str	r2, [r3, #0]
	hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80005e6:	4b0b      	ldr	r3, [pc, #44]	; (8000614 <MX_SDIO_SD_Init+0x38>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	605a      	str	r2, [r3, #4]
	hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80005ec:	4b09      	ldr	r3, [pc, #36]	; (8000614 <MX_SDIO_SD_Init+0x38>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	609a      	str	r2, [r3, #8]
	hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80005f2:	4b08      	ldr	r3, [pc, #32]	; (8000614 <MX_SDIO_SD_Init+0x38>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	60da      	str	r2, [r3, #12]
	hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80005f8:	4b06      	ldr	r3, [pc, #24]	; (8000614 <MX_SDIO_SD_Init+0x38>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	611a      	str	r2, [r3, #16]
	hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80005fe:	4b05      	ldr	r3, [pc, #20]	; (8000614 <MX_SDIO_SD_Init+0x38>)
 8000600:	2200      	movs	r2, #0
 8000602:	615a      	str	r2, [r3, #20]
	hsd.Init.ClockDiv = 3;
 8000604:	4b03      	ldr	r3, [pc, #12]	; (8000614 <MX_SDIO_SD_Init+0x38>)
 8000606:	2203      	movs	r2, #3
 8000608:	619a      	str	r2, [r3, #24]
	/* USER CODE BEGIN SDIO_Init 2 */

	/* USER CODE END SDIO_Init 2 */

}
 800060a:	bf00      	nop
 800060c:	46bd      	mov	sp, r7
 800060e:	bc80      	pop	{r7}
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	20007a68 	.word	0x20007a68
 8000618:	40012c00 	.word	0x40012c00

0800061c <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8000620:	4b11      	ldr	r3, [pc, #68]	; (8000668 <MX_USART3_UART_Init+0x4c>)
 8000622:	4a12      	ldr	r2, [pc, #72]	; (800066c <MX_USART3_UART_Init+0x50>)
 8000624:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8000626:	4b10      	ldr	r3, [pc, #64]	; (8000668 <MX_USART3_UART_Init+0x4c>)
 8000628:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800062c:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800062e:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <MX_USART3_UART_Init+0x4c>)
 8000630:	2200      	movs	r2, #0
 8000632:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000634:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <MX_USART3_UART_Init+0x4c>)
 8000636:	2200      	movs	r2, #0
 8000638:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 800063a:	4b0b      	ldr	r3, [pc, #44]	; (8000668 <MX_USART3_UART_Init+0x4c>)
 800063c:	2200      	movs	r2, #0
 800063e:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000640:	4b09      	ldr	r3, [pc, #36]	; (8000668 <MX_USART3_UART_Init+0x4c>)
 8000642:	220c      	movs	r2, #12
 8000644:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000646:	4b08      	ldr	r3, [pc, #32]	; (8000668 <MX_USART3_UART_Init+0x4c>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800064c:	4b06      	ldr	r3, [pc, #24]	; (8000668 <MX_USART3_UART_Init+0x4c>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8000652:	4805      	ldr	r0, [pc, #20]	; (8000668 <MX_USART3_UART_Init+0x4c>)
 8000654:	f003 fcbc 	bl	8003fd0 <HAL_UART_Init>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_USART3_UART_Init+0x46>
	{
		Error_Handler();
 800065e:	f000 f92b 	bl	80008b8 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8000662:	bf00      	nop
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	20004988 	.word	0x20004988
 800066c:	40004800 	.word	0x40004800

08000670 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	4b10      	ldr	r3, [pc, #64]	; (80006bc <MX_DMA_Init+0x4c>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	4a0f      	ldr	r2, [pc, #60]	; (80006bc <MX_DMA_Init+0x4c>)
 8000680:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000684:	6313      	str	r3, [r2, #48]	; 0x30
 8000686:	4b0d      	ldr	r3, [pc, #52]	; (80006bc <MX_DMA_Init+0x4c>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8000692:	2200      	movs	r2, #0
 8000694:	2105      	movs	r1, #5
 8000696:	203b      	movs	r0, #59	; 0x3b
 8000698:	f000 fc53 	bl	8000f42 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800069c:	203b      	movs	r0, #59	; 0x3b
 800069e:	f000 fc6c 	bl	8000f7a <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 80006a2:	2200      	movs	r2, #0
 80006a4:	2105      	movs	r1, #5
 80006a6:	2045      	movs	r0, #69	; 0x45
 80006a8:	f000 fc4b 	bl	8000f42 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80006ac:	2045      	movs	r0, #69	; 0x45
 80006ae:	f000 fc64 	bl	8000f7a <HAL_NVIC_EnableIRQ>

}
 80006b2:	bf00      	nop
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40023800 	.word	0x40023800

080006c0 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b08c      	sub	sp, #48	; 0x30
 80006c4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct =
 80006c6:	f107 031c 	add.w	r3, r7, #28
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
 80006d2:	60da      	str	r2, [r3, #12]
 80006d4:	611a      	str	r2, [r3, #16]
	{ 0 };

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	61bb      	str	r3, [r7, #24]
 80006da:	4b60      	ldr	r3, [pc, #384]	; (800085c <MX_GPIO_Init+0x19c>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	4a5f      	ldr	r2, [pc, #380]	; (800085c <MX_GPIO_Init+0x19c>)
 80006e0:	f043 0304 	orr.w	r3, r3, #4
 80006e4:	6313      	str	r3, [r2, #48]	; 0x30
 80006e6:	4b5d      	ldr	r3, [pc, #372]	; (800085c <MX_GPIO_Init+0x19c>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	f003 0304 	and.w	r3, r3, #4
 80006ee:	61bb      	str	r3, [r7, #24]
 80006f0:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	617b      	str	r3, [r7, #20]
 80006f6:	4b59      	ldr	r3, [pc, #356]	; (800085c <MX_GPIO_Init+0x19c>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4a58      	ldr	r2, [pc, #352]	; (800085c <MX_GPIO_Init+0x19c>)
 80006fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
 8000702:	4b56      	ldr	r3, [pc, #344]	; (800085c <MX_GPIO_Init+0x19c>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800070a:	617b      	str	r3, [r7, #20]
 800070c:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	613b      	str	r3, [r7, #16]
 8000712:	4b52      	ldr	r3, [pc, #328]	; (800085c <MX_GPIO_Init+0x19c>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a51      	ldr	r2, [pc, #324]	; (800085c <MX_GPIO_Init+0x19c>)
 8000718:	f043 0302 	orr.w	r3, r3, #2
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b4f      	ldr	r3, [pc, #316]	; (800085c <MX_GPIO_Init+0x19c>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0302 	and.w	r3, r3, #2
 8000726:	613b      	str	r3, [r7, #16]
 8000728:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	60fb      	str	r3, [r7, #12]
 800072e:	4b4b      	ldr	r3, [pc, #300]	; (800085c <MX_GPIO_Init+0x19c>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a4a      	ldr	r2, [pc, #296]	; (800085c <MX_GPIO_Init+0x19c>)
 8000734:	f043 0308 	orr.w	r3, r3, #8
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
 800073a:	4b48      	ldr	r3, [pc, #288]	; (800085c <MX_GPIO_Init+0x19c>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f003 0308 	and.w	r3, r3, #8
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	60bb      	str	r3, [r7, #8]
 800074a:	4b44      	ldr	r3, [pc, #272]	; (800085c <MX_GPIO_Init+0x19c>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a43      	ldr	r2, [pc, #268]	; (800085c <MX_GPIO_Init+0x19c>)
 8000750:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b41      	ldr	r3, [pc, #260]	; (800085c <MX_GPIO_Init+0x19c>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	607b      	str	r3, [r7, #4]
 8000766:	4b3d      	ldr	r3, [pc, #244]	; (800085c <MX_GPIO_Init+0x19c>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a3c      	ldr	r2, [pc, #240]	; (800085c <MX_GPIO_Init+0x19c>)
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b3a      	ldr	r3, [pc, #232]	; (800085c <MX_GPIO_Init+0x19c>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 800077e:	2200      	movs	r2, #0
 8000780:	f244 0181 	movw	r1, #16513	; 0x4081
 8000784:	4836      	ldr	r0, [pc, #216]	; (8000860 <MX_GPIO_Init+0x1a0>)
 8000786:	f001 f8c4 	bl	8001912 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin,
 800078a:	2200      	movs	r2, #0
 800078c:	2140      	movs	r1, #64	; 0x40
 800078e:	4835      	ldr	r0, [pc, #212]	; (8000864 <MX_GPIO_Init+0x1a4>)
 8000790:	f001 f8bf 	bl	8001912 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000794:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000798:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800079a:	4b33      	ldr	r3, [pc, #204]	; (8000868 <MX_GPIO_Init+0x1a8>)
 800079c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2300      	movs	r3, #0
 80007a0:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80007a2:	f107 031c 	add.w	r3, r7, #28
 80007a6:	4619      	mov	r1, r3
 80007a8:	4830      	ldr	r0, [pc, #192]	; (800086c <MX_GPIO_Init+0x1ac>)
 80007aa:	f000 fefd 	bl	80015a8 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | LD2_Pin;
 80007ae:	f244 0381 	movw	r3, #16513	; 0x4081
 80007b2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b4:	2301      	movs	r3, #1
 80007b6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007bc:	2300      	movs	r3, #0
 80007be:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c0:	f107 031c 	add.w	r3, r7, #28
 80007c4:	4619      	mov	r1, r3
 80007c6:	4826      	ldr	r0, [pc, #152]	; (8000860 <MX_GPIO_Init+0x1a0>)
 80007c8:	f000 feee 	bl	80015a8 <HAL_GPIO_Init>

	/*Configure GPIO pin : CD_Pin */
	GPIO_InitStruct.Pin = CD_Pin;
 80007cc:	2304      	movs	r3, #4
 80007ce:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d0:	2300      	movs	r3, #0
 80007d2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007d4:	2301      	movs	r3, #1
 80007d6:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(CD_GPIO_Port, &GPIO_InitStruct);
 80007d8:	f107 031c 	add.w	r3, r7, #28
 80007dc:	4619      	mov	r1, r3
 80007de:	4821      	ldr	r0, [pc, #132]	; (8000864 <MX_GPIO_Init+0x1a4>)
 80007e0:	f000 fee2 	bl	80015a8 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80007e4:	2340      	movs	r3, #64	; 0x40
 80007e6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e8:	2301      	movs	r3, #1
 80007ea:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f0:	2300      	movs	r3, #0
 80007f2:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007f4:	f107 031c 	add.w	r3, r7, #28
 80007f8:	4619      	mov	r1, r3
 80007fa:	481a      	ldr	r0, [pc, #104]	; (8000864 <MX_GPIO_Init+0x1a4>)
 80007fc:	f000 fed4 	bl	80015a8 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000800:	2380      	movs	r3, #128	; 0x80
 8000802:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000804:	2300      	movs	r3, #0
 8000806:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800080c:	f107 031c 	add.w	r3, r7, #28
 8000810:	4619      	mov	r1, r3
 8000812:	4814      	ldr	r0, [pc, #80]	; (8000864 <MX_GPIO_Init+0x1a4>)
 8000814:	f000 fec8 	bl	80015a8 <HAL_GPIO_Init>

	/*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
	GPIO_InitStruct.Pin = USB_SOF_Pin | USB_ID_Pin | USB_DM_Pin | USB_DP_Pin;
 8000818:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800081c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081e:	2302      	movs	r3, #2
 8000820:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000826:	2303      	movs	r3, #3
 8000828:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800082a:	230a      	movs	r3, #10
 800082c:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800082e:	f107 031c 	add.w	r3, r7, #28
 8000832:	4619      	mov	r1, r3
 8000834:	480e      	ldr	r0, [pc, #56]	; (8000870 <MX_GPIO_Init+0x1b0>)
 8000836:	f000 feb7 	bl	80015a8 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_VBUS_Pin */
	GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800083a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800083e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000840:	2300      	movs	r3, #0
 8000842:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000848:	f107 031c 	add.w	r3, r7, #28
 800084c:	4619      	mov	r1, r3
 800084e:	4808      	ldr	r0, [pc, #32]	; (8000870 <MX_GPIO_Init+0x1b0>)
 8000850:	f000 feaa 	bl	80015a8 <HAL_GPIO_Init>

}
 8000854:	bf00      	nop
 8000856:	3730      	adds	r7, #48	; 0x30
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	40023800 	.word	0x40023800
 8000860:	40020400 	.word	0x40020400
 8000864:	40021800 	.word	0x40021800
 8000868:	10110000 	.word	0x10110000
 800086c:	40020800 	.word	0x40020800
 8000870:	40020000 	.word	0x40020000

08000874 <taskT1>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_taskT1 */
void taskT1(void *argument)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;)
	{
		osDelay(1);
 800087c:	2001      	movs	r0, #1
 800087e:	f004 fd7d 	bl	800537c <osDelay>
 8000882:	e7fb      	b.n	800087c <taskT1+0x8>

08000884 <taskT2>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_taskT2 */
void taskT2(void *argument)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN taskT2 */
	/* Infinite loop */
	for (;;)
	{
		osDelay(1);
 800088c:	2001      	movs	r0, #1
 800088e:	f004 fd75 	bl	800537c <osDelay>
 8000892:	e7fb      	b.n	800088c <taskT2+0x8>

08000894 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM9)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a04      	ldr	r2, [pc, #16]	; (80008b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d101      	bne.n	80008aa <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		HAL_IncTick();
 80008a6:	f000 fa59 	bl	8000d5c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40014000 	.word	0x40014000

080008b8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008bc:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80008be:	e7fe      	b.n	80008be <Error_Handler+0x6>

080008c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	607b      	str	r3, [r7, #4]
 80008ca:	4b12      	ldr	r3, [pc, #72]	; (8000914 <HAL_MspInit+0x54>)
 80008cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ce:	4a11      	ldr	r2, [pc, #68]	; (8000914 <HAL_MspInit+0x54>)
 80008d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008d4:	6453      	str	r3, [r2, #68]	; 0x44
 80008d6:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <HAL_MspInit+0x54>)
 80008d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	603b      	str	r3, [r7, #0]
 80008e6:	4b0b      	ldr	r3, [pc, #44]	; (8000914 <HAL_MspInit+0x54>)
 80008e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ea:	4a0a      	ldr	r2, [pc, #40]	; (8000914 <HAL_MspInit+0x54>)
 80008ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f0:	6413      	str	r3, [r2, #64]	; 0x40
 80008f2:	4b08      	ldr	r3, [pc, #32]	; (8000914 <HAL_MspInit+0x54>)
 80008f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008fa:	603b      	str	r3, [r7, #0]
 80008fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008fe:	2200      	movs	r2, #0
 8000900:	210f      	movs	r1, #15
 8000902:	f06f 0001 	mvn.w	r0, #1
 8000906:	f000 fb1c 	bl	8000f42 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800090a:	bf00      	nop
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40023800 	.word	0x40023800

08000918 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b08a      	sub	sp, #40	; 0x28
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000920:	f107 0314 	add.w	r3, r7, #20
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	605a      	str	r2, [r3, #4]
 800092a:	609a      	str	r2, [r3, #8]
 800092c:	60da      	str	r2, [r3, #12]
 800092e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a68      	ldr	r2, [pc, #416]	; (8000ad8 <HAL_SD_MspInit+0x1c0>)
 8000936:	4293      	cmp	r3, r2
 8000938:	f040 80c9 	bne.w	8000ace <HAL_SD_MspInit+0x1b6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800093c:	2300      	movs	r3, #0
 800093e:	613b      	str	r3, [r7, #16]
 8000940:	4b66      	ldr	r3, [pc, #408]	; (8000adc <HAL_SD_MspInit+0x1c4>)
 8000942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000944:	4a65      	ldr	r2, [pc, #404]	; (8000adc <HAL_SD_MspInit+0x1c4>)
 8000946:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800094a:	6453      	str	r3, [r2, #68]	; 0x44
 800094c:	4b63      	ldr	r3, [pc, #396]	; (8000adc <HAL_SD_MspInit+0x1c4>)
 800094e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000950:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000954:	613b      	str	r3, [r7, #16]
 8000956:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000958:	2300      	movs	r3, #0
 800095a:	60fb      	str	r3, [r7, #12]
 800095c:	4b5f      	ldr	r3, [pc, #380]	; (8000adc <HAL_SD_MspInit+0x1c4>)
 800095e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000960:	4a5e      	ldr	r2, [pc, #376]	; (8000adc <HAL_SD_MspInit+0x1c4>)
 8000962:	f043 0304 	orr.w	r3, r3, #4
 8000966:	6313      	str	r3, [r2, #48]	; 0x30
 8000968:	4b5c      	ldr	r3, [pc, #368]	; (8000adc <HAL_SD_MspInit+0x1c4>)
 800096a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096c:	f003 0304 	and.w	r3, r3, #4
 8000970:	60fb      	str	r3, [r7, #12]
 8000972:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000974:	2300      	movs	r3, #0
 8000976:	60bb      	str	r3, [r7, #8]
 8000978:	4b58      	ldr	r3, [pc, #352]	; (8000adc <HAL_SD_MspInit+0x1c4>)
 800097a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097c:	4a57      	ldr	r2, [pc, #348]	; (8000adc <HAL_SD_MspInit+0x1c4>)
 800097e:	f043 0308 	orr.w	r3, r3, #8
 8000982:	6313      	str	r3, [r2, #48]	; 0x30
 8000984:	4b55      	ldr	r3, [pc, #340]	; (8000adc <HAL_SD_MspInit+0x1c4>)
 8000986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000988:	f003 0308 	and.w	r3, r3, #8
 800098c:	60bb      	str	r3, [r7, #8]
 800098e:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000990:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000994:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000996:	2302      	movs	r3, #2
 8000998:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800099e:	2303      	movs	r3, #3
 80009a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80009a2:	230c      	movs	r3, #12
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009a6:	f107 0314 	add.w	r3, r7, #20
 80009aa:	4619      	mov	r1, r3
 80009ac:	484c      	ldr	r0, [pc, #304]	; (8000ae0 <HAL_SD_MspInit+0x1c8>)
 80009ae:	f000 fdfb 	bl	80015a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009b2:	2304      	movs	r3, #4
 80009b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b6:	2302      	movs	r3, #2
 80009b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009be:	2303      	movs	r3, #3
 80009c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80009c2:	230c      	movs	r3, #12
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009c6:	f107 0314 	add.w	r3, r7, #20
 80009ca:	4619      	mov	r1, r3
 80009cc:	4845      	ldr	r0, [pc, #276]	; (8000ae4 <HAL_SD_MspInit+0x1cc>)
 80009ce:	f000 fdeb 	bl	80015a8 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 80009d2:	4b45      	ldr	r3, [pc, #276]	; (8000ae8 <HAL_SD_MspInit+0x1d0>)
 80009d4:	4a45      	ldr	r2, [pc, #276]	; (8000aec <HAL_SD_MspInit+0x1d4>)
 80009d6:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80009d8:	4b43      	ldr	r3, [pc, #268]	; (8000ae8 <HAL_SD_MspInit+0x1d0>)
 80009da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009de:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009e0:	4b41      	ldr	r3, [pc, #260]	; (8000ae8 <HAL_SD_MspInit+0x1d0>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009e6:	4b40      	ldr	r3, [pc, #256]	; (8000ae8 <HAL_SD_MspInit+0x1d0>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80009ec:	4b3e      	ldr	r3, [pc, #248]	; (8000ae8 <HAL_SD_MspInit+0x1d0>)
 80009ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009f2:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80009f4:	4b3c      	ldr	r3, [pc, #240]	; (8000ae8 <HAL_SD_MspInit+0x1d0>)
 80009f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009fa:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80009fc:	4b3a      	ldr	r3, [pc, #232]	; (8000ae8 <HAL_SD_MspInit+0x1d0>)
 80009fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a02:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8000a04:	4b38      	ldr	r3, [pc, #224]	; (8000ae8 <HAL_SD_MspInit+0x1d0>)
 8000a06:	2220      	movs	r2, #32
 8000a08:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a0a:	4b37      	ldr	r3, [pc, #220]	; (8000ae8 <HAL_SD_MspInit+0x1d0>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000a10:	4b35      	ldr	r3, [pc, #212]	; (8000ae8 <HAL_SD_MspInit+0x1d0>)
 8000a12:	2204      	movs	r2, #4
 8000a14:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000a16:	4b34      	ldr	r3, [pc, #208]	; (8000ae8 <HAL_SD_MspInit+0x1d0>)
 8000a18:	2203      	movs	r2, #3
 8000a1a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8000a1c:	4b32      	ldr	r3, [pc, #200]	; (8000ae8 <HAL_SD_MspInit+0x1d0>)
 8000a1e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000a22:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000a24:	4b30      	ldr	r3, [pc, #192]	; (8000ae8 <HAL_SD_MspInit+0x1d0>)
 8000a26:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000a2a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8000a2c:	482e      	ldr	r0, [pc, #184]	; (8000ae8 <HAL_SD_MspInit+0x1d0>)
 8000a2e:	f000 fab3 	bl	8000f98 <HAL_DMA_Init>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 8000a38:	f7ff ff3e 	bl	80008b8 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	4a2a      	ldr	r2, [pc, #168]	; (8000ae8 <HAL_SD_MspInit+0x1d0>)
 8000a40:	641a      	str	r2, [r3, #64]	; 0x40
 8000a42:	4a29      	ldr	r2, [pc, #164]	; (8000ae8 <HAL_SD_MspInit+0x1d0>)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8000a48:	4b29      	ldr	r3, [pc, #164]	; (8000af0 <HAL_SD_MspInit+0x1d8>)
 8000a4a:	4a2a      	ldr	r2, [pc, #168]	; (8000af4 <HAL_SD_MspInit+0x1dc>)
 8000a4c:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8000a4e:	4b28      	ldr	r3, [pc, #160]	; (8000af0 <HAL_SD_MspInit+0x1d8>)
 8000a50:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a54:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a56:	4b26      	ldr	r3, [pc, #152]	; (8000af0 <HAL_SD_MspInit+0x1d8>)
 8000a58:	2240      	movs	r2, #64	; 0x40
 8000a5a:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a5c:	4b24      	ldr	r3, [pc, #144]	; (8000af0 <HAL_SD_MspInit+0x1d8>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a62:	4b23      	ldr	r3, [pc, #140]	; (8000af0 <HAL_SD_MspInit+0x1d8>)
 8000a64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a68:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a6a:	4b21      	ldr	r3, [pc, #132]	; (8000af0 <HAL_SD_MspInit+0x1d8>)
 8000a6c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a70:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a72:	4b1f      	ldr	r3, [pc, #124]	; (8000af0 <HAL_SD_MspInit+0x1d8>)
 8000a74:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a78:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8000a7a:	4b1d      	ldr	r3, [pc, #116]	; (8000af0 <HAL_SD_MspInit+0x1d8>)
 8000a7c:	2220      	movs	r2, #32
 8000a7e:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a80:	4b1b      	ldr	r3, [pc, #108]	; (8000af0 <HAL_SD_MspInit+0x1d8>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000a86:	4b1a      	ldr	r3, [pc, #104]	; (8000af0 <HAL_SD_MspInit+0x1d8>)
 8000a88:	2204      	movs	r2, #4
 8000a8a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000a8c:	4b18      	ldr	r3, [pc, #96]	; (8000af0 <HAL_SD_MspInit+0x1d8>)
 8000a8e:	2203      	movs	r2, #3
 8000a90:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8000a92:	4b17      	ldr	r3, [pc, #92]	; (8000af0 <HAL_SD_MspInit+0x1d8>)
 8000a94:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000a98:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000a9a:	4b15      	ldr	r3, [pc, #84]	; (8000af0 <HAL_SD_MspInit+0x1d8>)
 8000a9c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000aa0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8000aa2:	4813      	ldr	r0, [pc, #76]	; (8000af0 <HAL_SD_MspInit+0x1d8>)
 8000aa4:	f000 fa78 	bl	8000f98 <HAL_DMA_Init>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 8000aae:	f7ff ff03 	bl	80008b8 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4a0e      	ldr	r2, [pc, #56]	; (8000af0 <HAL_SD_MspInit+0x1d8>)
 8000ab6:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ab8:	4a0d      	ldr	r2, [pc, #52]	; (8000af0 <HAL_SD_MspInit+0x1d8>)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	2105      	movs	r1, #5
 8000ac2:	2031      	movs	r0, #49	; 0x31
 8000ac4:	f000 fa3d 	bl	8000f42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8000ac8:	2031      	movs	r0, #49	; 0x31
 8000aca:	f000 fa56 	bl	8000f7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000ace:	bf00      	nop
 8000ad0:	3728      	adds	r7, #40	; 0x28
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40012c00 	.word	0x40012c00
 8000adc:	40023800 	.word	0x40023800
 8000ae0:	40020800 	.word	0x40020800
 8000ae4:	40020c00 	.word	0x40020c00
 8000ae8:	20004928 	.word	0x20004928
 8000aec:	40026458 	.word	0x40026458
 8000af0:	20007a08 	.word	0x20007a08
 8000af4:	400264a0 	.word	0x400264a0

08000af8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08a      	sub	sp, #40	; 0x28
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a19      	ldr	r2, [pc, #100]	; (8000b7c <HAL_UART_MspInit+0x84>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d12c      	bne.n	8000b74 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	613b      	str	r3, [r7, #16]
 8000b1e:	4b18      	ldr	r3, [pc, #96]	; (8000b80 <HAL_UART_MspInit+0x88>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b22:	4a17      	ldr	r2, [pc, #92]	; (8000b80 <HAL_UART_MspInit+0x88>)
 8000b24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b28:	6413      	str	r3, [r2, #64]	; 0x40
 8000b2a:	4b15      	ldr	r3, [pc, #84]	; (8000b80 <HAL_UART_MspInit+0x88>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b32:	613b      	str	r3, [r7, #16]
 8000b34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	60fb      	str	r3, [r7, #12]
 8000b3a:	4b11      	ldr	r3, [pc, #68]	; (8000b80 <HAL_UART_MspInit+0x88>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	4a10      	ldr	r2, [pc, #64]	; (8000b80 <HAL_UART_MspInit+0x88>)
 8000b40:	f043 0308 	orr.w	r3, r3, #8
 8000b44:	6313      	str	r3, [r2, #48]	; 0x30
 8000b46:	4b0e      	ldr	r3, [pc, #56]	; (8000b80 <HAL_UART_MspInit+0x88>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	f003 0308 	and.w	r3, r3, #8
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b52:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b60:	2303      	movs	r3, #3
 8000b62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b64:	2307      	movs	r3, #7
 8000b66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4805      	ldr	r0, [pc, #20]	; (8000b84 <HAL_UART_MspInit+0x8c>)
 8000b70:	f000 fd1a 	bl	80015a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b74:	bf00      	nop
 8000b76:	3728      	adds	r7, #40	; 0x28
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	40004800 	.word	0x40004800
 8000b80:	40023800 	.word	0x40023800
 8000b84:	40020c00 	.word	0x40020c00

08000b88 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b08c      	sub	sp, #48	; 0x30
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b90:	2300      	movs	r3, #0
 8000b92:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b94:	2300      	movs	r3, #0
 8000b96:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM9 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority ,0);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	6879      	ldr	r1, [r7, #4]
 8000b9c:	2018      	movs	r0, #24
 8000b9e:	f000 f9d0 	bl	8000f42 <HAL_NVIC_SetPriority>

  /* Enable the TIM9 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000ba2:	2018      	movs	r0, #24
 8000ba4:	f000 f9e9 	bl	8000f7a <HAL_NVIC_EnableIRQ>
  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 8000ba8:	2300      	movs	r3, #0
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	4b1f      	ldr	r3, [pc, #124]	; (8000c2c <HAL_InitTick+0xa4>)
 8000bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb0:	4a1e      	ldr	r2, [pc, #120]	; (8000c2c <HAL_InitTick+0xa4>)
 8000bb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bb6:	6453      	str	r3, [r2, #68]	; 0x44
 8000bb8:	4b1c      	ldr	r3, [pc, #112]	; (8000c2c <HAL_InitTick+0xa4>)
 8000bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bc4:	f107 0210 	add.w	r2, r7, #16
 8000bc8:	f107 0314 	add.w	r3, r7, #20
 8000bcc:	4611      	mov	r1, r2
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f001 fb1a 	bl	8002208 <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000bd4:	f001 faf6 	bl	80021c4 <HAL_RCC_GetPCLK2Freq>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	005b      	lsls	r3, r3, #1
 8000bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000be0:	4a13      	ldr	r2, [pc, #76]	; (8000c30 <HAL_InitTick+0xa8>)
 8000be2:	fba2 2303 	umull	r2, r3, r2, r3
 8000be6:	0c9b      	lsrs	r3, r3, #18
 8000be8:	3b01      	subs	r3, #1
 8000bea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8000bec:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <HAL_InitTick+0xac>)
 8000bee:	4a12      	ldr	r2, [pc, #72]	; (8000c38 <HAL_InitTick+0xb0>)
 8000bf0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 8000bf2:	4b10      	ldr	r3, [pc, #64]	; (8000c34 <HAL_InitTick+0xac>)
 8000bf4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bf8:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 8000bfa:	4a0e      	ldr	r2, [pc, #56]	; (8000c34 <HAL_InitTick+0xac>)
 8000bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bfe:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 8000c00:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <HAL_InitTick+0xac>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c06:	4b0b      	ldr	r3, [pc, #44]	; (8000c34 <HAL_InitTick+0xac>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim9) == HAL_OK)
 8000c0c:	4809      	ldr	r0, [pc, #36]	; (8000c34 <HAL_InitTick+0xac>)
 8000c0e:	f002 ff3d 	bl	8003a8c <HAL_TIM_Base_Init>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d104      	bne.n	8000c22 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim9);
 8000c18:	4806      	ldr	r0, [pc, #24]	; (8000c34 <HAL_InitTick+0xac>)
 8000c1a:	f002 ff8f 	bl	8003b3c <HAL_TIM_Base_Start_IT>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	e000      	b.n	8000c24 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c22:	2301      	movs	r3, #1
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3730      	adds	r7, #48	; 0x30
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40023800 	.word	0x40023800
 8000c30:	431bde83 	.word	0x431bde83
 8000c34:	20008b20 	.word	0x20008b20
 8000c38:	40014000 	.word	0x40014000

08000c3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c40:	e7fe      	b.n	8000c40 <NMI_Handler+0x4>

08000c42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c42:	b480      	push	{r7}
 8000c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c46:	e7fe      	b.n	8000c46 <HardFault_Handler+0x4>

08000c48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c4c:	e7fe      	b.n	8000c4c <MemManage_Handler+0x4>

08000c4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c52:	e7fe      	b.n	8000c52 <BusFault_Handler+0x4>

08000c54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c58:	e7fe      	b.n	8000c58 <UsageFault_Handler+0x4>

08000c5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bc80      	pop	{r7}
 8000c64:	4770      	bx	lr
	...

08000c68 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8000c6c:	4802      	ldr	r0, [pc, #8]	; (8000c78 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8000c6e:	f002 ffd3 	bl	8003c18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	20008b20 	.word	0x20008b20

08000c7c <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8000c80:	4802      	ldr	r0, [pc, #8]	; (8000c8c <SDIO_IRQHandler+0x10>)
 8000c82:	f001 ff1d 	bl	8002ac0 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	20007a68 	.word	0x20007a68

08000c90 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 Stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8000c94:	4802      	ldr	r0, [pc, #8]	; (8000ca0 <DMA2_Stream3_IRQHandler+0x10>)
 8000c96:	f000 fa4f 	bl	8001138 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	20004928 	.word	0x20004928

08000ca4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 Stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8000ca8:	4802      	ldr	r0, [pc, #8]	; (8000cb4 <DMA2_Stream6_IRQHandler+0x10>)
 8000caa:	f000 fa45 	bl	8001138 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20007a08 	.word	0x20007a08

08000cb8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bc80      	pop	{r7}
 8000cc2:	4770      	bx	lr

08000cc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000cc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cfc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8000cc8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000cca:	e003      	b.n	8000cd4 <LoopCopyDataInit>

08000ccc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ccc:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000cce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000cd0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000cd2:	3104      	adds	r1, #4

08000cd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8000cd4:	480b      	ldr	r0, [pc, #44]	; (8000d04 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000cd6:	4b0c      	ldr	r3, [pc, #48]	; (8000d08 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000cd8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000cda:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000cdc:	d3f6      	bcc.n	8000ccc <CopyDataInit>
  ldr  r2, =_sbss
 8000cde:	4a0b      	ldr	r2, [pc, #44]	; (8000d0c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ce0:	e002      	b.n	8000ce8 <LoopFillZerobss>

08000ce2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8000ce2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ce4:	f842 3b04 	str.w	r3, [r2], #4

08000ce8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr  r3, = _ebss
 8000ce8:	4b09      	ldr	r3, [pc, #36]	; (8000d10 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000cea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000cec:	d3f9      	bcc.n	8000ce2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cee:	f7ff ffe3 	bl	8000cb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cf2:	f006 ffe3 	bl	8007cbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cf6:	f7ff fbed 	bl	80004d4 <main>
  bx  lr
 8000cfa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cfc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000d00:	08007e1c 	.word	0x08007e1c
  ldr  r0, =_sdata
 8000d04:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000d08:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000d0c:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000d10:	2000ac10 	.word	0x2000ac10

08000d14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d14:	e7fe      	b.n	8000d14 <ADC_IRQHandler>
	...

08000d18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d1c:	4b0e      	ldr	r3, [pc, #56]	; (8000d58 <HAL_Init+0x40>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a0d      	ldr	r2, [pc, #52]	; (8000d58 <HAL_Init+0x40>)
 8000d22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d28:	4b0b      	ldr	r3, [pc, #44]	; (8000d58 <HAL_Init+0x40>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a0a      	ldr	r2, [pc, #40]	; (8000d58 <HAL_Init+0x40>)
 8000d2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d34:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <HAL_Init+0x40>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a07      	ldr	r2, [pc, #28]	; (8000d58 <HAL_Init+0x40>)
 8000d3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d40:	2003      	movs	r0, #3
 8000d42:	f000 f8f3 	bl	8000f2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d46:	2000      	movs	r0, #0
 8000d48:	f7ff ff1e 	bl	8000b88 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000d4c:	f7ff fdb8 	bl	80008c0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000d50:	2300      	movs	r3, #0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40023c00 	.word	0x40023c00

08000d5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d60:	4b05      	ldr	r3, [pc, #20]	; (8000d78 <HAL_IncTick+0x1c>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	461a      	mov	r2, r3
 8000d66:	4b05      	ldr	r3, [pc, #20]	; (8000d7c <HAL_IncTick+0x20>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	4a03      	ldr	r2, [pc, #12]	; (8000d7c <HAL_IncTick+0x20>)
 8000d6e:	6013      	str	r3, [r2, #0]
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bc80      	pop	{r7}
 8000d76:	4770      	bx	lr
 8000d78:	20000008 	.word	0x20000008
 8000d7c:	20008b68 	.word	0x20008b68

08000d80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  return uwTick;
 8000d84:	4b02      	ldr	r3, [pc, #8]	; (8000d90 <HAL_GetTick+0x10>)
 8000d86:	681b      	ldr	r3, [r3, #0]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bc80      	pop	{r7}
 8000d8e:	4770      	bx	lr
 8000d90:	20008b68 	.word	0x20008b68

08000d94 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d9c:	f7ff fff0 	bl	8000d80 <HAL_GetTick>
 8000da0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dac:	d005      	beq.n	8000dba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dae:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <HAL_Delay+0x40>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	461a      	mov	r2, r3
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	4413      	add	r3, r2
 8000db8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dba:	bf00      	nop
 8000dbc:	f7ff ffe0 	bl	8000d80 <HAL_GetTick>
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	68bb      	ldr	r3, [r7, #8]
 8000dc4:	1ad3      	subs	r3, r2, r3
 8000dc6:	68fa      	ldr	r2, [r7, #12]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	d8f7      	bhi.n	8000dbc <HAL_Delay+0x28>
  {
  }
}
 8000dcc:	bf00      	nop
 8000dce:	3710      	adds	r7, #16
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	20000008 	.word	0x20000008

08000dd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	f003 0307 	and.w	r3, r3, #7
 8000de6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000de8:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <__NVIC_SetPriorityGrouping+0x44>)
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dee:	68ba      	ldr	r2, [r7, #8]
 8000df0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000df4:	4013      	ands	r3, r2
 8000df6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e0a:	4a04      	ldr	r2, [pc, #16]	; (8000e1c <__NVIC_SetPriorityGrouping+0x44>)
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	60d3      	str	r3, [r2, #12]
}
 8000e10:	bf00      	nop
 8000e12:	3714      	adds	r7, #20
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bc80      	pop	{r7}
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e24:	4b04      	ldr	r3, [pc, #16]	; (8000e38 <__NVIC_GetPriorityGrouping+0x18>)
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	0a1b      	lsrs	r3, r3, #8
 8000e2a:	f003 0307 	and.w	r3, r3, #7
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bc80      	pop	{r7}
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	e000ed00 	.word	0xe000ed00

08000e3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	db0b      	blt.n	8000e66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	f003 021f 	and.w	r2, r3, #31
 8000e54:	4906      	ldr	r1, [pc, #24]	; (8000e70 <__NVIC_EnableIRQ+0x34>)
 8000e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5a:	095b      	lsrs	r3, r3, #5
 8000e5c:	2001      	movs	r0, #1
 8000e5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e66:	bf00      	nop
 8000e68:	370c      	adds	r7, #12
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bc80      	pop	{r7}
 8000e6e:	4770      	bx	lr
 8000e70:	e000e100 	.word	0xe000e100

08000e74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	6039      	str	r1, [r7, #0]
 8000e7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	db0a      	blt.n	8000e9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	b2da      	uxtb	r2, r3
 8000e8c:	490c      	ldr	r1, [pc, #48]	; (8000ec0 <__NVIC_SetPriority+0x4c>)
 8000e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e92:	0112      	lsls	r2, r2, #4
 8000e94:	b2d2      	uxtb	r2, r2
 8000e96:	440b      	add	r3, r1
 8000e98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e9c:	e00a      	b.n	8000eb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	b2da      	uxtb	r2, r3
 8000ea2:	4908      	ldr	r1, [pc, #32]	; (8000ec4 <__NVIC_SetPriority+0x50>)
 8000ea4:	79fb      	ldrb	r3, [r7, #7]
 8000ea6:	f003 030f 	and.w	r3, r3, #15
 8000eaa:	3b04      	subs	r3, #4
 8000eac:	0112      	lsls	r2, r2, #4
 8000eae:	b2d2      	uxtb	r2, r2
 8000eb0:	440b      	add	r3, r1
 8000eb2:	761a      	strb	r2, [r3, #24]
}
 8000eb4:	bf00      	nop
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bc80      	pop	{r7}
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	e000e100 	.word	0xe000e100
 8000ec4:	e000ed00 	.word	0xe000ed00

08000ec8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b089      	sub	sp, #36	; 0x24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	f003 0307 	and.w	r3, r3, #7
 8000eda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	f1c3 0307 	rsb	r3, r3, #7
 8000ee2:	2b04      	cmp	r3, #4
 8000ee4:	bf28      	it	cs
 8000ee6:	2304      	movcs	r3, #4
 8000ee8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	3304      	adds	r3, #4
 8000eee:	2b06      	cmp	r3, #6
 8000ef0:	d902      	bls.n	8000ef8 <NVIC_EncodePriority+0x30>
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	3b03      	subs	r3, #3
 8000ef6:	e000      	b.n	8000efa <NVIC_EncodePriority+0x32>
 8000ef8:	2300      	movs	r3, #0
 8000efa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000efc:	f04f 32ff 	mov.w	r2, #4294967295
 8000f00:	69bb      	ldr	r3, [r7, #24]
 8000f02:	fa02 f303 	lsl.w	r3, r2, r3
 8000f06:	43da      	mvns	r2, r3
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	401a      	ands	r2, r3
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f10:	f04f 31ff 	mov.w	r1, #4294967295
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1a:	43d9      	mvns	r1, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f20:	4313      	orrs	r3, r2
         );
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3724      	adds	r7, #36	; 0x24
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bc80      	pop	{r7}
 8000f2a:	4770      	bx	lr

08000f2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f7ff ff4f 	bl	8000dd8 <__NVIC_SetPriorityGrouping>
}
 8000f3a:	bf00      	nop
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b086      	sub	sp, #24
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	4603      	mov	r3, r0
 8000f4a:	60b9      	str	r1, [r7, #8]
 8000f4c:	607a      	str	r2, [r7, #4]
 8000f4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f50:	2300      	movs	r3, #0
 8000f52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f54:	f7ff ff64 	bl	8000e20 <__NVIC_GetPriorityGrouping>
 8000f58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f5a:	687a      	ldr	r2, [r7, #4]
 8000f5c:	68b9      	ldr	r1, [r7, #8]
 8000f5e:	6978      	ldr	r0, [r7, #20]
 8000f60:	f7ff ffb2 	bl	8000ec8 <NVIC_EncodePriority>
 8000f64:	4602      	mov	r2, r0
 8000f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f6a:	4611      	mov	r1, r2
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff ff81 	bl	8000e74 <__NVIC_SetPriority>
}
 8000f72:	bf00      	nop
 8000f74:	3718      	adds	r7, #24
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b082      	sub	sp, #8
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	4603      	mov	r3, r0
 8000f82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff ff57 	bl	8000e3c <__NVIC_EnableIRQ>
}
 8000f8e:	bf00      	nop
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
	...

08000f98 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000fa4:	f7ff feec 	bl	8000d80 <HAL_GetTick>
 8000fa8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d101      	bne.n	8000fb4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	e099      	b.n	80010e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2202      	movs	r2, #2
 8000fc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f022 0201 	bic.w	r2, r2, #1
 8000fd2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fd4:	e00f      	b.n	8000ff6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000fd6:	f7ff fed3 	bl	8000d80 <HAL_GetTick>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	1ad3      	subs	r3, r2, r3
 8000fe0:	2b05      	cmp	r3, #5
 8000fe2:	d908      	bls.n	8000ff6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2220      	movs	r2, #32
 8000fe8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2203      	movs	r2, #3
 8000fee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	e078      	b.n	80010e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f003 0301 	and.w	r3, r3, #1
 8001000:	2b00      	cmp	r3, #0
 8001002:	d1e8      	bne.n	8000fd6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800100c:	697a      	ldr	r2, [r7, #20]
 800100e:	4b38      	ldr	r3, [pc, #224]	; (80010f0 <HAL_DMA_Init+0x158>)
 8001010:	4013      	ands	r3, r2
 8001012:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	685a      	ldr	r2, [r3, #4]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001022:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	691b      	ldr	r3, [r3, #16]
 8001028:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800102e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	699b      	ldr	r3, [r3, #24]
 8001034:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800103a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6a1b      	ldr	r3, [r3, #32]
 8001040:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001042:	697a      	ldr	r2, [r7, #20]
 8001044:	4313      	orrs	r3, r2
 8001046:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800104c:	2b04      	cmp	r3, #4
 800104e:	d107      	bne.n	8001060 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001058:	4313      	orrs	r3, r2
 800105a:	697a      	ldr	r2, [r7, #20]
 800105c:	4313      	orrs	r3, r2
 800105e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	697a      	ldr	r2, [r7, #20]
 8001066:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	695b      	ldr	r3, [r3, #20]
 800106e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	f023 0307 	bic.w	r3, r3, #7
 8001076:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800107c:	697a      	ldr	r2, [r7, #20]
 800107e:	4313      	orrs	r3, r2
 8001080:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001086:	2b04      	cmp	r3, #4
 8001088:	d117      	bne.n	80010ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800108e:	697a      	ldr	r2, [r7, #20]
 8001090:	4313      	orrs	r3, r2
 8001092:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001098:	2b00      	cmp	r3, #0
 800109a:	d00e      	beq.n	80010ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f000 fa09 	bl	80014b4 <DMA_CheckFifoParam>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d008      	beq.n	80010ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2240      	movs	r2, #64	; 0x40
 80010ac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2201      	movs	r2, #1
 80010b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80010b6:	2301      	movs	r3, #1
 80010b8:	e016      	b.n	80010e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	697a      	ldr	r2, [r7, #20]
 80010c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f000 f9c2 	bl	800144c <DMA_CalcBaseAndBitshift>
 80010c8:	4603      	mov	r3, r0
 80010ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010d0:	223f      	movs	r2, #63	; 0x3f
 80010d2:	409a      	lsls	r2, r3
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2200      	movs	r2, #0
 80010dc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2201      	movs	r2, #1
 80010e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80010e6:	2300      	movs	r3, #0
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3718      	adds	r7, #24
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	f010803f 	.word	0xf010803f

080010f4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001102:	b2db      	uxtb	r3, r3
 8001104:	2b02      	cmp	r3, #2
 8001106:	d004      	beq.n	8001112 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2280      	movs	r2, #128	; 0x80
 800110c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e00c      	b.n	800112c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2205      	movs	r2, #5
 8001116:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f022 0201 	bic.w	r2, r2, #1
 8001128:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800112a:	2300      	movs	r3, #0
}
 800112c:	4618      	mov	r0, r3
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	bc80      	pop	{r7}
 8001134:	4770      	bx	lr
	...

08001138 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001140:	2300      	movs	r3, #0
 8001142:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001144:	4b92      	ldr	r3, [pc, #584]	; (8001390 <HAL_DMA_IRQHandler+0x258>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a92      	ldr	r2, [pc, #584]	; (8001394 <HAL_DMA_IRQHandler+0x25c>)
 800114a:	fba2 2303 	umull	r2, r3, r2, r3
 800114e:	0a9b      	lsrs	r3, r3, #10
 8001150:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001156:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001162:	2208      	movs	r2, #8
 8001164:	409a      	lsls	r2, r3
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	4013      	ands	r3, r2
 800116a:	2b00      	cmp	r3, #0
 800116c:	d01a      	beq.n	80011a4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f003 0304 	and.w	r3, r3, #4
 8001178:	2b00      	cmp	r3, #0
 800117a:	d013      	beq.n	80011a4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f022 0204 	bic.w	r2, r2, #4
 800118a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001190:	2208      	movs	r2, #8
 8001192:	409a      	lsls	r2, r3
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800119c:	f043 0201 	orr.w	r2, r3, #1
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011a8:	2201      	movs	r2, #1
 80011aa:	409a      	lsls	r2, r3
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	4013      	ands	r3, r2
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d012      	beq.n	80011da <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	695b      	ldr	r3, [r3, #20]
 80011ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d00b      	beq.n	80011da <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011c6:	2201      	movs	r2, #1
 80011c8:	409a      	lsls	r2, r3
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011d2:	f043 0202 	orr.w	r2, r3, #2
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011de:	2204      	movs	r2, #4
 80011e0:	409a      	lsls	r2, r3
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	4013      	ands	r3, r2
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d012      	beq.n	8001210 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f003 0302 	and.w	r3, r3, #2
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d00b      	beq.n	8001210 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011fc:	2204      	movs	r2, #4
 80011fe:	409a      	lsls	r2, r3
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001208:	f043 0204 	orr.w	r2, r3, #4
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001214:	2210      	movs	r2, #16
 8001216:	409a      	lsls	r2, r3
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	4013      	ands	r3, r2
 800121c:	2b00      	cmp	r3, #0
 800121e:	d043      	beq.n	80012a8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 0308 	and.w	r3, r3, #8
 800122a:	2b00      	cmp	r3, #0
 800122c:	d03c      	beq.n	80012a8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001232:	2210      	movs	r2, #16
 8001234:	409a      	lsls	r2, r3
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001244:	2b00      	cmp	r3, #0
 8001246:	d018      	beq.n	800127a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d108      	bne.n	8001268 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125a:	2b00      	cmp	r3, #0
 800125c:	d024      	beq.n	80012a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	4798      	blx	r3
 8001266:	e01f      	b.n	80012a8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800126c:	2b00      	cmp	r3, #0
 800126e:	d01b      	beq.n	80012a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	4798      	blx	r3
 8001278:	e016      	b.n	80012a8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001284:	2b00      	cmp	r3, #0
 8001286:	d107      	bne.n	8001298 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f022 0208 	bic.w	r2, r2, #8
 8001296:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129c:	2b00      	cmp	r3, #0
 800129e:	d003      	beq.n	80012a8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a4:	6878      	ldr	r0, [r7, #4]
 80012a6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012ac:	2220      	movs	r2, #32
 80012ae:	409a      	lsls	r2, r3
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	4013      	ands	r3, r2
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	f000 808e 	beq.w	80013d6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 0310 	and.w	r3, r3, #16
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	f000 8086 	beq.w	80013d6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012ce:	2220      	movs	r2, #32
 80012d0:	409a      	lsls	r2, r3
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	2b05      	cmp	r3, #5
 80012e0:	d136      	bne.n	8001350 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f022 0216 	bic.w	r2, r2, #22
 80012f0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	695a      	ldr	r2, [r3, #20]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001300:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001306:	2b00      	cmp	r3, #0
 8001308:	d103      	bne.n	8001312 <HAL_DMA_IRQHandler+0x1da>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800130e:	2b00      	cmp	r3, #0
 8001310:	d007      	beq.n	8001322 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f022 0208 	bic.w	r2, r2, #8
 8001320:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001326:	223f      	movs	r2, #63	; 0x3f
 8001328:	409a      	lsls	r2, r3
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2200      	movs	r2, #0
 8001332:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2201      	movs	r2, #1
 800133a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001342:	2b00      	cmp	r3, #0
 8001344:	d07d      	beq.n	8001442 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	4798      	blx	r3
        }
        return;
 800134e:	e078      	b.n	8001442 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d01c      	beq.n	8001398 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001368:	2b00      	cmp	r3, #0
 800136a:	d108      	bne.n	800137e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001370:	2b00      	cmp	r3, #0
 8001372:	d030      	beq.n	80013d6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	4798      	blx	r3
 800137c:	e02b      	b.n	80013d6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001382:	2b00      	cmp	r3, #0
 8001384:	d027      	beq.n	80013d6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	4798      	blx	r3
 800138e:	e022      	b.n	80013d6 <HAL_DMA_IRQHandler+0x29e>
 8001390:	20000000 	.word	0x20000000
 8001394:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d10f      	bne.n	80013c6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f022 0210 	bic.w	r2, r2, #16
 80013b4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2200      	movs	r2, #0
 80013ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2201      	movs	r2, #1
 80013c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d003      	beq.n	80013d6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d032      	beq.n	8001444 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d022      	beq.n	8001430 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2205      	movs	r2, #5
 80013ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f022 0201 	bic.w	r2, r2, #1
 8001400:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	3301      	adds	r3, #1
 8001406:	60bb      	str	r3, [r7, #8]
 8001408:	697a      	ldr	r2, [r7, #20]
 800140a:	429a      	cmp	r2, r3
 800140c:	d307      	bcc.n	800141e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0301 	and.w	r3, r3, #1
 8001418:	2b00      	cmp	r3, #0
 800141a:	d1f2      	bne.n	8001402 <HAL_DMA_IRQHandler+0x2ca>
 800141c:	e000      	b.n	8001420 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800141e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2200      	movs	r2, #0
 8001424:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2201      	movs	r2, #1
 800142c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001434:	2b00      	cmp	r3, #0
 8001436:	d005      	beq.n	8001444 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	4798      	blx	r3
 8001440:	e000      	b.n	8001444 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001442:	bf00      	nop
    }
  }
}
 8001444:	3718      	adds	r7, #24
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop

0800144c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800144c:	b480      	push	{r7}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	b2db      	uxtb	r3, r3
 800145a:	3b10      	subs	r3, #16
 800145c:	4a13      	ldr	r2, [pc, #76]	; (80014ac <DMA_CalcBaseAndBitshift+0x60>)
 800145e:	fba2 2303 	umull	r2, r3, r2, r3
 8001462:	091b      	lsrs	r3, r3, #4
 8001464:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001466:	4a12      	ldr	r2, [pc, #72]	; (80014b0 <DMA_CalcBaseAndBitshift+0x64>)
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	4413      	add	r3, r2
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	461a      	mov	r2, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	2b03      	cmp	r3, #3
 8001478:	d909      	bls.n	800148e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001482:	f023 0303 	bic.w	r3, r3, #3
 8001486:	1d1a      	adds	r2, r3, #4
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	659a      	str	r2, [r3, #88]	; 0x58
 800148c:	e007      	b.n	800149e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001496:	f023 0303 	bic.w	r3, r3, #3
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3714      	adds	r7, #20
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bc80      	pop	{r7}
 80014aa:	4770      	bx	lr
 80014ac:	aaaaaaab 	.word	0xaaaaaaab
 80014b0:	08007df0 	.word	0x08007df0

080014b4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014bc:	2300      	movs	r3, #0
 80014be:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	699b      	ldr	r3, [r3, #24]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d11f      	bne.n	800150e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	2b03      	cmp	r3, #3
 80014d2:	d855      	bhi.n	8001580 <DMA_CheckFifoParam+0xcc>
 80014d4:	a201      	add	r2, pc, #4	; (adr r2, 80014dc <DMA_CheckFifoParam+0x28>)
 80014d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014da:	bf00      	nop
 80014dc:	080014ed 	.word	0x080014ed
 80014e0:	080014ff 	.word	0x080014ff
 80014e4:	080014ed 	.word	0x080014ed
 80014e8:	08001581 	.word	0x08001581
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d045      	beq.n	8001584 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80014fc:	e042      	b.n	8001584 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001502:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001506:	d13f      	bne.n	8001588 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800150c:	e03c      	b.n	8001588 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	699b      	ldr	r3, [r3, #24]
 8001512:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001516:	d121      	bne.n	800155c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	2b03      	cmp	r3, #3
 800151c:	d836      	bhi.n	800158c <DMA_CheckFifoParam+0xd8>
 800151e:	a201      	add	r2, pc, #4	; (adr r2, 8001524 <DMA_CheckFifoParam+0x70>)
 8001520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001524:	08001535 	.word	0x08001535
 8001528:	0800153b 	.word	0x0800153b
 800152c:	08001535 	.word	0x08001535
 8001530:	0800154d 	.word	0x0800154d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	73fb      	strb	r3, [r7, #15]
      break;
 8001538:	e02f      	b.n	800159a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800153e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d024      	beq.n	8001590 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800154a:	e021      	b.n	8001590 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001550:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001554:	d11e      	bne.n	8001594 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800155a:	e01b      	b.n	8001594 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	2b02      	cmp	r3, #2
 8001560:	d902      	bls.n	8001568 <DMA_CheckFifoParam+0xb4>
 8001562:	2b03      	cmp	r3, #3
 8001564:	d003      	beq.n	800156e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001566:	e018      	b.n	800159a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	73fb      	strb	r3, [r7, #15]
      break;
 800156c:	e015      	b.n	800159a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001572:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d00e      	beq.n	8001598 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	73fb      	strb	r3, [r7, #15]
      break;
 800157e:	e00b      	b.n	8001598 <DMA_CheckFifoParam+0xe4>
      break;
 8001580:	bf00      	nop
 8001582:	e00a      	b.n	800159a <DMA_CheckFifoParam+0xe6>
      break;
 8001584:	bf00      	nop
 8001586:	e008      	b.n	800159a <DMA_CheckFifoParam+0xe6>
      break;
 8001588:	bf00      	nop
 800158a:	e006      	b.n	800159a <DMA_CheckFifoParam+0xe6>
      break;
 800158c:	bf00      	nop
 800158e:	e004      	b.n	800159a <DMA_CheckFifoParam+0xe6>
      break;
 8001590:	bf00      	nop
 8001592:	e002      	b.n	800159a <DMA_CheckFifoParam+0xe6>
      break;   
 8001594:	bf00      	nop
 8001596:	e000      	b.n	800159a <DMA_CheckFifoParam+0xe6>
      break;
 8001598:	bf00      	nop
    }
  } 
  
  return status; 
 800159a:	7bfb      	ldrb	r3, [r7, #15]
}
 800159c:	4618      	mov	r0, r3
 800159e:	3714      	adds	r7, #20
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bc80      	pop	{r7}
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop

080015a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b087      	sub	sp, #28
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015b2:	2300      	movs	r3, #0
 80015b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015b6:	e16f      	b.n	8001898 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	2101      	movs	r1, #1
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	fa01 f303 	lsl.w	r3, r1, r3
 80015c4:	4013      	ands	r3, r2
 80015c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	f000 8161 	beq.w	8001892 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d00b      	beq.n	80015f0 <HAL_GPIO_Init+0x48>
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d007      	beq.n	80015f0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015e4:	2b11      	cmp	r3, #17
 80015e6:	d003      	beq.n	80015f0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	2b12      	cmp	r3, #18
 80015ee:	d130      	bne.n	8001652 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	2203      	movs	r2, #3
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	43db      	mvns	r3, r3
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	4013      	ands	r3, r2
 8001606:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	68da      	ldr	r2, [r3, #12]
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	fa02 f303 	lsl.w	r3, r2, r3
 8001614:	693a      	ldr	r2, [r7, #16]
 8001616:	4313      	orrs	r3, r2
 8001618:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	693a      	ldr	r2, [r7, #16]
 800161e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001626:	2201      	movs	r2, #1
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	fa02 f303 	lsl.w	r3, r2, r3
 800162e:	43db      	mvns	r3, r3
 8001630:	693a      	ldr	r2, [r7, #16]
 8001632:	4013      	ands	r3, r2
 8001634:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	091b      	lsrs	r3, r3, #4
 800163c:	f003 0201 	and.w	r2, r3, #1
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	fa02 f303 	lsl.w	r3, r2, r3
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	4313      	orrs	r3, r2
 800164a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	68db      	ldr	r3, [r3, #12]
 8001656:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	2203      	movs	r2, #3
 800165e:	fa02 f303 	lsl.w	r3, r2, r3
 8001662:	43db      	mvns	r3, r3
 8001664:	693a      	ldr	r2, [r7, #16]
 8001666:	4013      	ands	r3, r2
 8001668:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	689a      	ldr	r2, [r3, #8]
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	fa02 f303 	lsl.w	r3, r2, r3
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	4313      	orrs	r3, r2
 800167a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	60da      	str	r2, [r3, #12]

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	2b02      	cmp	r3, #2
 8001688:	d003      	beq.n	8001692 <HAL_GPIO_Init+0xea>
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	2b12      	cmp	r3, #18
 8001690:	d123      	bne.n	80016da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	08da      	lsrs	r2, r3, #3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	3208      	adds	r2, #8
 800169a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800169e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	f003 0307 	and.w	r3, r3, #7
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	220f      	movs	r2, #15
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	43db      	mvns	r3, r3
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	4013      	ands	r3, r2
 80016b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	691a      	ldr	r2, [r3, #16]
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	f003 0307 	and.w	r3, r3, #7
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	08da      	lsrs	r2, r3, #3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	3208      	adds	r2, #8
 80016d4:	6939      	ldr	r1, [r7, #16]
 80016d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	2203      	movs	r2, #3
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	43db      	mvns	r3, r3
 80016ec:	693a      	ldr	r2, [r7, #16]
 80016ee:	4013      	ands	r3, r2
 80016f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f003 0203 	and.w	r2, r3, #3
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001702:	693a      	ldr	r2, [r7, #16]
 8001704:	4313      	orrs	r3, r2
 8001706:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001716:	2b00      	cmp	r3, #0
 8001718:	f000 80bb 	beq.w	8001892 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800171c:	2300      	movs	r3, #0
 800171e:	60bb      	str	r3, [r7, #8]
 8001720:	4b64      	ldr	r3, [pc, #400]	; (80018b4 <HAL_GPIO_Init+0x30c>)
 8001722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001724:	4a63      	ldr	r2, [pc, #396]	; (80018b4 <HAL_GPIO_Init+0x30c>)
 8001726:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800172a:	6453      	str	r3, [r2, #68]	; 0x44
 800172c:	4b61      	ldr	r3, [pc, #388]	; (80018b4 <HAL_GPIO_Init+0x30c>)
 800172e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001730:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001734:	60bb      	str	r3, [r7, #8]
 8001736:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001738:	4a5f      	ldr	r2, [pc, #380]	; (80018b8 <HAL_GPIO_Init+0x310>)
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	089b      	lsrs	r3, r3, #2
 800173e:	3302      	adds	r3, #2
 8001740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001744:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	f003 0303 	and.w	r3, r3, #3
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	220f      	movs	r2, #15
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	43db      	mvns	r3, r3
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	4013      	ands	r3, r2
 800175a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	4a57      	ldr	r2, [pc, #348]	; (80018bc <HAL_GPIO_Init+0x314>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d031      	beq.n	80017c8 <HAL_GPIO_Init+0x220>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	4a56      	ldr	r2, [pc, #344]	; (80018c0 <HAL_GPIO_Init+0x318>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d02b      	beq.n	80017c4 <HAL_GPIO_Init+0x21c>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	4a55      	ldr	r2, [pc, #340]	; (80018c4 <HAL_GPIO_Init+0x31c>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d025      	beq.n	80017c0 <HAL_GPIO_Init+0x218>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	4a54      	ldr	r2, [pc, #336]	; (80018c8 <HAL_GPIO_Init+0x320>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d01f      	beq.n	80017bc <HAL_GPIO_Init+0x214>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	4a53      	ldr	r2, [pc, #332]	; (80018cc <HAL_GPIO_Init+0x324>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d019      	beq.n	80017b8 <HAL_GPIO_Init+0x210>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	4a52      	ldr	r2, [pc, #328]	; (80018d0 <HAL_GPIO_Init+0x328>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d013      	beq.n	80017b4 <HAL_GPIO_Init+0x20c>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	4a51      	ldr	r2, [pc, #324]	; (80018d4 <HAL_GPIO_Init+0x32c>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d00d      	beq.n	80017b0 <HAL_GPIO_Init+0x208>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	4a50      	ldr	r2, [pc, #320]	; (80018d8 <HAL_GPIO_Init+0x330>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d007      	beq.n	80017ac <HAL_GPIO_Init+0x204>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	4a4f      	ldr	r2, [pc, #316]	; (80018dc <HAL_GPIO_Init+0x334>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d101      	bne.n	80017a8 <HAL_GPIO_Init+0x200>
 80017a4:	2308      	movs	r3, #8
 80017a6:	e010      	b.n	80017ca <HAL_GPIO_Init+0x222>
 80017a8:	2309      	movs	r3, #9
 80017aa:	e00e      	b.n	80017ca <HAL_GPIO_Init+0x222>
 80017ac:	2307      	movs	r3, #7
 80017ae:	e00c      	b.n	80017ca <HAL_GPIO_Init+0x222>
 80017b0:	2306      	movs	r3, #6
 80017b2:	e00a      	b.n	80017ca <HAL_GPIO_Init+0x222>
 80017b4:	2305      	movs	r3, #5
 80017b6:	e008      	b.n	80017ca <HAL_GPIO_Init+0x222>
 80017b8:	2304      	movs	r3, #4
 80017ba:	e006      	b.n	80017ca <HAL_GPIO_Init+0x222>
 80017bc:	2303      	movs	r3, #3
 80017be:	e004      	b.n	80017ca <HAL_GPIO_Init+0x222>
 80017c0:	2302      	movs	r3, #2
 80017c2:	e002      	b.n	80017ca <HAL_GPIO_Init+0x222>
 80017c4:	2301      	movs	r3, #1
 80017c6:	e000      	b.n	80017ca <HAL_GPIO_Init+0x222>
 80017c8:	2300      	movs	r3, #0
 80017ca:	697a      	ldr	r2, [r7, #20]
 80017cc:	f002 0203 	and.w	r2, r2, #3
 80017d0:	0092      	lsls	r2, r2, #2
 80017d2:	4093      	lsls	r3, r2
 80017d4:	461a      	mov	r2, r3
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	4313      	orrs	r3, r2
 80017da:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017dc:	4936      	ldr	r1, [pc, #216]	; (80018b8 <HAL_GPIO_Init+0x310>)
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	089b      	lsrs	r3, r3, #2
 80017e2:	3302      	adds	r3, #2
 80017e4:	693a      	ldr	r2, [r7, #16]
 80017e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017ea:	4b3d      	ldr	r3, [pc, #244]	; (80018e0 <HAL_GPIO_Init+0x338>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	43db      	mvns	r3, r3
 80017f4:	693a      	ldr	r2, [r7, #16]
 80017f6:	4013      	ands	r3, r2
 80017f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d003      	beq.n	800180e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001806:	693a      	ldr	r2, [r7, #16]
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	4313      	orrs	r3, r2
 800180c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800180e:	4a34      	ldr	r2, [pc, #208]	; (80018e0 <HAL_GPIO_Init+0x338>)
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001814:	4b32      	ldr	r3, [pc, #200]	; (80018e0 <HAL_GPIO_Init+0x338>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	43db      	mvns	r3, r3
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	4013      	ands	r3, r2
 8001822:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800182c:	2b00      	cmp	r3, #0
 800182e:	d003      	beq.n	8001838 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001830:	693a      	ldr	r2, [r7, #16]
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	4313      	orrs	r3, r2
 8001836:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001838:	4a29      	ldr	r2, [pc, #164]	; (80018e0 <HAL_GPIO_Init+0x338>)
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800183e:	4b28      	ldr	r3, [pc, #160]	; (80018e0 <HAL_GPIO_Init+0x338>)
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	43db      	mvns	r3, r3
 8001848:	693a      	ldr	r2, [r7, #16]
 800184a:	4013      	ands	r3, r2
 800184c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d003      	beq.n	8001862 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	4313      	orrs	r3, r2
 8001860:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001862:	4a1f      	ldr	r2, [pc, #124]	; (80018e0 <HAL_GPIO_Init+0x338>)
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001868:	4b1d      	ldr	r3, [pc, #116]	; (80018e0 <HAL_GPIO_Init+0x338>)
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	43db      	mvns	r3, r3
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	4013      	ands	r3, r2
 8001876:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d003      	beq.n	800188c <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	4313      	orrs	r3, r2
 800188a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800188c:	4a14      	ldr	r2, [pc, #80]	; (80018e0 <HAL_GPIO_Init+0x338>)
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	3301      	adds	r3, #1
 8001896:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	fa22 f303 	lsr.w	r3, r2, r3
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	f47f ae88 	bne.w	80015b8 <HAL_GPIO_Init+0x10>
  }
}
 80018a8:	bf00      	nop
 80018aa:	371c      	adds	r7, #28
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bc80      	pop	{r7}
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	40023800 	.word	0x40023800
 80018b8:	40013800 	.word	0x40013800
 80018bc:	40020000 	.word	0x40020000
 80018c0:	40020400 	.word	0x40020400
 80018c4:	40020800 	.word	0x40020800
 80018c8:	40020c00 	.word	0x40020c00
 80018cc:	40021000 	.word	0x40021000
 80018d0:	40021400 	.word	0x40021400
 80018d4:	40021800 	.word	0x40021800
 80018d8:	40021c00 	.word	0x40021c00
 80018dc:	40022000 	.word	0x40022000
 80018e0:	40013c00 	.word	0x40013c00

080018e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	460b      	mov	r3, r1
 80018ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	691a      	ldr	r2, [r3, #16]
 80018f4:	887b      	ldrh	r3, [r7, #2]
 80018f6:	4013      	ands	r3, r2
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d002      	beq.n	8001902 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80018fc:	2301      	movs	r3, #1
 80018fe:	73fb      	strb	r3, [r7, #15]
 8001900:	e001      	b.n	8001906 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001902:	2300      	movs	r3, #0
 8001904:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001906:	7bfb      	ldrb	r3, [r7, #15]
}
 8001908:	4618      	mov	r0, r3
 800190a:	3714      	adds	r7, #20
 800190c:	46bd      	mov	sp, r7
 800190e:	bc80      	pop	{r7}
 8001910:	4770      	bx	lr

08001912 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001912:	b480      	push	{r7}
 8001914:	b083      	sub	sp, #12
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
 800191a:	460b      	mov	r3, r1
 800191c:	807b      	strh	r3, [r7, #2]
 800191e:	4613      	mov	r3, r2
 8001920:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001922:	787b      	ldrb	r3, [r7, #1]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d003      	beq.n	8001930 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001928:	887a      	ldrh	r2, [r7, #2]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800192e:	e003      	b.n	8001938 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001930:	887b      	ldrh	r3, [r7, #2]
 8001932:	041a      	lsls	r2, r3, #16
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	619a      	str	r2, [r3, #24]
}
 8001938:	bf00      	nop
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	bc80      	pop	{r7}
 8001940:	4770      	bx	lr
	...

08001944 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b08a      	sub	sp, #40	; 0x28
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d101      	bne.n	8001956 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e237      	b.n	8001dc6 <HAL_RCC_OscConfig+0x482>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	2b00      	cmp	r3, #0
 8001960:	d050      	beq.n	8001a04 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001962:	4ba3      	ldr	r3, [pc, #652]	; (8001bf0 <HAL_RCC_OscConfig+0x2ac>)
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f003 030c 	and.w	r3, r3, #12
 800196a:	2b04      	cmp	r3, #4
 800196c:	d00c      	beq.n	8001988 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800196e:	4ba0      	ldr	r3, [pc, #640]	; (8001bf0 <HAL_RCC_OscConfig+0x2ac>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001976:	2b08      	cmp	r3, #8
 8001978:	d112      	bne.n	80019a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800197a:	4b9d      	ldr	r3, [pc, #628]	; (8001bf0 <HAL_RCC_OscConfig+0x2ac>)
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001982:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001986:	d10b      	bne.n	80019a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001988:	4b99      	ldr	r3, [pc, #612]	; (8001bf0 <HAL_RCC_OscConfig+0x2ac>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d036      	beq.n	8001a02 <HAL_RCC_OscConfig+0xbe>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d132      	bne.n	8001a02 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e212      	b.n	8001dc6 <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685a      	ldr	r2, [r3, #4]
 80019a4:	4b93      	ldr	r3, [pc, #588]	; (8001bf4 <HAL_RCC_OscConfig+0x2b0>)
 80019a6:	b2d2      	uxtb	r2, r2
 80019a8:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d013      	beq.n	80019da <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b2:	f7ff f9e5 	bl	8000d80 <HAL_GetTick>
 80019b6:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019b8:	e008      	b.n	80019cc <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019ba:	f7ff f9e1 	bl	8000d80 <HAL_GetTick>
 80019be:	4602      	mov	r2, r0
 80019c0:	6a3b      	ldr	r3, [r7, #32]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	2b64      	cmp	r3, #100	; 0x64
 80019c6:	d901      	bls.n	80019cc <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e1fc      	b.n	8001dc6 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019cc:	4b88      	ldr	r3, [pc, #544]	; (8001bf0 <HAL_RCC_OscConfig+0x2ac>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d0f0      	beq.n	80019ba <HAL_RCC_OscConfig+0x76>
 80019d8:	e014      	b.n	8001a04 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019da:	f7ff f9d1 	bl	8000d80 <HAL_GetTick>
 80019de:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019e0:	e008      	b.n	80019f4 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019e2:	f7ff f9cd 	bl	8000d80 <HAL_GetTick>
 80019e6:	4602      	mov	r2, r0
 80019e8:	6a3b      	ldr	r3, [r7, #32]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	2b64      	cmp	r3, #100	; 0x64
 80019ee:	d901      	bls.n	80019f4 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e1e8      	b.n	8001dc6 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019f4:	4b7e      	ldr	r3, [pc, #504]	; (8001bf0 <HAL_RCC_OscConfig+0x2ac>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d1f0      	bne.n	80019e2 <HAL_RCC_OscConfig+0x9e>
 8001a00:	e000      	b.n	8001a04 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a02:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0302 	and.w	r3, r3, #2
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d077      	beq.n	8001b00 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a10:	4b77      	ldr	r3, [pc, #476]	; (8001bf0 <HAL_RCC_OscConfig+0x2ac>)
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f003 030c 	and.w	r3, r3, #12
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d00b      	beq.n	8001a34 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a1c:	4b74      	ldr	r3, [pc, #464]	; (8001bf0 <HAL_RCC_OscConfig+0x2ac>)
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a24:	2b08      	cmp	r3, #8
 8001a26:	d126      	bne.n	8001a76 <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a28:	4b71      	ldr	r3, [pc, #452]	; (8001bf0 <HAL_RCC_OscConfig+0x2ac>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d120      	bne.n	8001a76 <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a34:	4b6e      	ldr	r3, [pc, #440]	; (8001bf0 <HAL_RCC_OscConfig+0x2ac>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0302 	and.w	r3, r3, #2
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d005      	beq.n	8001a4c <HAL_RCC_OscConfig+0x108>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d001      	beq.n	8001a4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e1bc      	b.n	8001dc6 <HAL_RCC_OscConfig+0x482>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a4c:	4b68      	ldr	r3, [pc, #416]	; (8001bf0 <HAL_RCC_OscConfig+0x2ac>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	691b      	ldr	r3, [r3, #16]
 8001a58:	21f8      	movs	r1, #248	; 0xf8
 8001a5a:	61b9      	str	r1, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a5c:	69b9      	ldr	r1, [r7, #24]
 8001a5e:	fa91 f1a1 	rbit	r1, r1
 8001a62:	6179      	str	r1, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001a64:	6979      	ldr	r1, [r7, #20]
 8001a66:	fab1 f181 	clz	r1, r1
 8001a6a:	b2c9      	uxtb	r1, r1
 8001a6c:	408b      	lsls	r3, r1
 8001a6e:	4960      	ldr	r1, [pc, #384]	; (8001bf0 <HAL_RCC_OscConfig+0x2ac>)
 8001a70:	4313      	orrs	r3, r2
 8001a72:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a74:	e044      	b.n	8001b00 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d02a      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a7e:	4b5e      	ldr	r3, [pc, #376]	; (8001bf8 <HAL_RCC_OscConfig+0x2b4>)
 8001a80:	2201      	movs	r2, #1
 8001a82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a84:	f7ff f97c 	bl	8000d80 <HAL_GetTick>
 8001a88:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a8a:	e008      	b.n	8001a9e <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a8c:	f7ff f978 	bl	8000d80 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	6a3b      	ldr	r3, [r7, #32]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e193      	b.n	8001dc6 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a9e:	4b54      	ldr	r3, [pc, #336]	; (8001bf0 <HAL_RCC_OscConfig+0x2ac>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d0f0      	beq.n	8001a8c <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aaa:	4b51      	ldr	r3, [pc, #324]	; (8001bf0 <HAL_RCC_OscConfig+0x2ac>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	691b      	ldr	r3, [r3, #16]
 8001ab6:	21f8      	movs	r1, #248	; 0xf8
 8001ab8:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aba:	6939      	ldr	r1, [r7, #16]
 8001abc:	fa91 f1a1 	rbit	r1, r1
 8001ac0:	60f9      	str	r1, [r7, #12]
  return result;
 8001ac2:	68f9      	ldr	r1, [r7, #12]
 8001ac4:	fab1 f181 	clz	r1, r1
 8001ac8:	b2c9      	uxtb	r1, r1
 8001aca:	408b      	lsls	r3, r1
 8001acc:	4948      	ldr	r1, [pc, #288]	; (8001bf0 <HAL_RCC_OscConfig+0x2ac>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	600b      	str	r3, [r1, #0]
 8001ad2:	e015      	b.n	8001b00 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ad4:	4b48      	ldr	r3, [pc, #288]	; (8001bf8 <HAL_RCC_OscConfig+0x2b4>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ada:	f7ff f951 	bl	8000d80 <HAL_GetTick>
 8001ade:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ae0:	e008      	b.n	8001af4 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ae2:	f7ff f94d 	bl	8000d80 <HAL_GetTick>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	6a3b      	ldr	r3, [r7, #32]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d901      	bls.n	8001af4 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e168      	b.n	8001dc6 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001af4:	4b3e      	ldr	r3, [pc, #248]	; (8001bf0 <HAL_RCC_OscConfig+0x2ac>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0302 	and.w	r3, r3, #2
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d1f0      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0308 	and.w	r3, r3, #8
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d030      	beq.n	8001b6e <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	695b      	ldr	r3, [r3, #20]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d016      	beq.n	8001b42 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b14:	4b39      	ldr	r3, [pc, #228]	; (8001bfc <HAL_RCC_OscConfig+0x2b8>)
 8001b16:	2201      	movs	r2, #1
 8001b18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b1a:	f7ff f931 	bl	8000d80 <HAL_GetTick>
 8001b1e:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b20:	e008      	b.n	8001b34 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b22:	f7ff f92d 	bl	8000d80 <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	6a3b      	ldr	r3, [r7, #32]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d901      	bls.n	8001b34 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e148      	b.n	8001dc6 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b34:	4b2e      	ldr	r3, [pc, #184]	; (8001bf0 <HAL_RCC_OscConfig+0x2ac>)
 8001b36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b38:	f003 0302 	and.w	r3, r3, #2
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d0f0      	beq.n	8001b22 <HAL_RCC_OscConfig+0x1de>
 8001b40:	e015      	b.n	8001b6e <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b42:	4b2e      	ldr	r3, [pc, #184]	; (8001bfc <HAL_RCC_OscConfig+0x2b8>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b48:	f7ff f91a 	bl	8000d80 <HAL_GetTick>
 8001b4c:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b4e:	e008      	b.n	8001b62 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b50:	f7ff f916 	bl	8000d80 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	6a3b      	ldr	r3, [r7, #32]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e131      	b.n	8001dc6 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b62:	4b23      	ldr	r3, [pc, #140]	; (8001bf0 <HAL_RCC_OscConfig+0x2ac>)
 8001b64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d1f0      	bne.n	8001b50 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0304 	and.w	r3, r3, #4
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	f000 8088 	beq.w	8001c8c <HAL_RCC_OscConfig+0x348>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b82:	4b1b      	ldr	r3, [pc, #108]	; (8001bf0 <HAL_RCC_OscConfig+0x2ac>)
 8001b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d110      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b8e:	2300      	movs	r3, #0
 8001b90:	60bb      	str	r3, [r7, #8]
 8001b92:	4b17      	ldr	r3, [pc, #92]	; (8001bf0 <HAL_RCC_OscConfig+0x2ac>)
 8001b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b96:	4a16      	ldr	r2, [pc, #88]	; (8001bf0 <HAL_RCC_OscConfig+0x2ac>)
 8001b98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b9e:	4b14      	ldr	r3, [pc, #80]	; (8001bf0 <HAL_RCC_OscConfig+0x2ac>)
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba6:	60bb      	str	r3, [r7, #8]
 8001ba8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001baa:	2301      	movs	r3, #1
 8001bac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001bb0:	4b13      	ldr	r3, [pc, #76]	; (8001c00 <HAL_RCC_OscConfig+0x2bc>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a12      	ldr	r2, [pc, #72]	; (8001c00 <HAL_RCC_OscConfig+0x2bc>)
 8001bb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bba:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bbc:	4b10      	ldr	r3, [pc, #64]	; (8001c00 <HAL_RCC_OscConfig+0x2bc>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d123      	bne.n	8001c10 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bc8:	4b0d      	ldr	r3, [pc, #52]	; (8001c00 <HAL_RCC_OscConfig+0x2bc>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a0c      	ldr	r2, [pc, #48]	; (8001c00 <HAL_RCC_OscConfig+0x2bc>)
 8001bce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bd2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bd4:	f7ff f8d4 	bl	8000d80 <HAL_GetTick>
 8001bd8:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bda:	e013      	b.n	8001c04 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bdc:	f7ff f8d0 	bl	8000d80 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	6a3b      	ldr	r3, [r7, #32]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d90c      	bls.n	8001c04 <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e0eb      	b.n	8001dc6 <HAL_RCC_OscConfig+0x482>
 8001bee:	bf00      	nop
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	40023802 	.word	0x40023802
 8001bf8:	42470000 	.word	0x42470000
 8001bfc:	42470e80 	.word	0x42470e80
 8001c00:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c04:	4b72      	ldr	r3, [pc, #456]	; (8001dd0 <HAL_RCC_OscConfig+0x48c>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d0e5      	beq.n	8001bdc <HAL_RCC_OscConfig+0x298>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689a      	ldr	r2, [r3, #8]
 8001c14:	4b6f      	ldr	r3, [pc, #444]	; (8001dd4 <HAL_RCC_OscConfig+0x490>)
 8001c16:	b2d2      	uxtb	r2, r2
 8001c18:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d015      	beq.n	8001c4e <HAL_RCC_OscConfig+0x30a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c22:	f7ff f8ad 	bl	8000d80 <HAL_GetTick>
 8001c26:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c28:	e00a      	b.n	8001c40 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c2a:	f7ff f8a9 	bl	8000d80 <HAL_GetTick>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	6a3b      	ldr	r3, [r7, #32]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d901      	bls.n	8001c40 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e0c2      	b.n	8001dc6 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c40:	4b65      	ldr	r3, [pc, #404]	; (8001dd8 <HAL_RCC_OscConfig+0x494>)
 8001c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c44:	f003 0302 	and.w	r3, r3, #2
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d0ee      	beq.n	8001c2a <HAL_RCC_OscConfig+0x2e6>
 8001c4c:	e014      	b.n	8001c78 <HAL_RCC_OscConfig+0x334>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c4e:	f7ff f897 	bl	8000d80 <HAL_GetTick>
 8001c52:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c54:	e00a      	b.n	8001c6c <HAL_RCC_OscConfig+0x328>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c56:	f7ff f893 	bl	8000d80 <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	6a3b      	ldr	r3, [r7, #32]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d901      	bls.n	8001c6c <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e0ac      	b.n	8001dc6 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c6c:	4b5a      	ldr	r3, [pc, #360]	; (8001dd8 <HAL_RCC_OscConfig+0x494>)
 8001c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c70:	f003 0302 	and.w	r3, r3, #2
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d1ee      	bne.n	8001c56 <HAL_RCC_OscConfig+0x312>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d105      	bne.n	8001c8c <HAL_RCC_OscConfig+0x348>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c80:	4b55      	ldr	r3, [pc, #340]	; (8001dd8 <HAL_RCC_OscConfig+0x494>)
 8001c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c84:	4a54      	ldr	r2, [pc, #336]	; (8001dd8 <HAL_RCC_OscConfig+0x494>)
 8001c86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c8a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	f000 8097 	beq.w	8001dc4 <HAL_RCC_OscConfig+0x480>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c96:	4b50      	ldr	r3, [pc, #320]	; (8001dd8 <HAL_RCC_OscConfig+0x494>)
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	f003 030c 	and.w	r3, r3, #12
 8001c9e:	2b08      	cmp	r3, #8
 8001ca0:	d061      	beq.n	8001d66 <HAL_RCC_OscConfig+0x422>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	699b      	ldr	r3, [r3, #24]
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d146      	bne.n	8001d38 <HAL_RCC_OscConfig+0x3f4>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001caa:	4b4c      	ldr	r3, [pc, #304]	; (8001ddc <HAL_RCC_OscConfig+0x498>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb0:	f7ff f866 	bl	8000d80 <HAL_GetTick>
 8001cb4:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cb6:	e008      	b.n	8001cca <HAL_RCC_OscConfig+0x386>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cb8:	f7ff f862 	bl	8000d80 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	6a3b      	ldr	r3, [r7, #32]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b64      	cmp	r3, #100	; 0x64
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_OscConfig+0x386>
          {
            return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e07d      	b.n	8001dc6 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cca:	4b43      	ldr	r3, [pc, #268]	; (8001dd8 <HAL_RCC_OscConfig+0x494>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d1f0      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x374>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cd6:	4b40      	ldr	r3, [pc, #256]	; (8001dd8 <HAL_RCC_OscConfig+0x494>)
 8001cd8:	685a      	ldr	r2, [r3, #4]
 8001cda:	4b41      	ldr	r3, [pc, #260]	; (8001de0 <HAL_RCC_OscConfig+0x49c>)
 8001cdc:	4013      	ands	r3, r2
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	69d1      	ldr	r1, [r2, #28]
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	6a12      	ldr	r2, [r2, #32]
 8001ce6:	4311      	orrs	r1, r2
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001cec:	0192      	lsls	r2, r2, #6
 8001cee:	4311      	orrs	r1, r2
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001cf4:	0612      	lsls	r2, r2, #24
 8001cf6:	4311      	orrs	r1, r2
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001cfc:	0852      	lsrs	r2, r2, #1
 8001cfe:	3a01      	subs	r2, #1
 8001d00:	0412      	lsls	r2, r2, #16
 8001d02:	430a      	orrs	r2, r1
 8001d04:	4934      	ldr	r1, [pc, #208]	; (8001dd8 <HAL_RCC_OscConfig+0x494>)
 8001d06:	4313      	orrs	r3, r2
 8001d08:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d0a:	4b34      	ldr	r3, [pc, #208]	; (8001ddc <HAL_RCC_OscConfig+0x498>)
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d10:	f7ff f836 	bl	8000d80 <HAL_GetTick>
 8001d14:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d16:	e008      	b.n	8001d2a <HAL_RCC_OscConfig+0x3e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d18:	f7ff f832 	bl	8000d80 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	6a3b      	ldr	r3, [r7, #32]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b64      	cmp	r3, #100	; 0x64
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0x3e6>
          {
            return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e04d      	b.n	8001dc6 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d2a:	4b2b      	ldr	r3, [pc, #172]	; (8001dd8 <HAL_RCC_OscConfig+0x494>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d0f0      	beq.n	8001d18 <HAL_RCC_OscConfig+0x3d4>
 8001d36:	e045      	b.n	8001dc4 <HAL_RCC_OscConfig+0x480>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d38:	4b28      	ldr	r3, [pc, #160]	; (8001ddc <HAL_RCC_OscConfig+0x498>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d3e:	f7ff f81f 	bl	8000d80 <HAL_GetTick>
 8001d42:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d44:	e008      	b.n	8001d58 <HAL_RCC_OscConfig+0x414>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d46:	f7ff f81b 	bl	8000d80 <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	6a3b      	ldr	r3, [r7, #32]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	2b64      	cmp	r3, #100	; 0x64
 8001d52:	d901      	bls.n	8001d58 <HAL_RCC_OscConfig+0x414>
          {
            return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	e036      	b.n	8001dc6 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d58:	4b1f      	ldr	r3, [pc, #124]	; (8001dd8 <HAL_RCC_OscConfig+0x494>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d1f0      	bne.n	8001d46 <HAL_RCC_OscConfig+0x402>
 8001d64:	e02e      	b.n	8001dc4 <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	699b      	ldr	r3, [r3, #24]
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d101      	bne.n	8001d72 <HAL_RCC_OscConfig+0x42e>
      {
        return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e029      	b.n	8001dc6 <HAL_RCC_OscConfig+0x482>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8001d72:	4b19      	ldr	r3, [pc, #100]	; (8001dd8 <HAL_RCC_OscConfig+0x494>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	69db      	ldr	r3, [r3, #28]
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d11c      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d115      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x47c>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	099b      	lsrs	r3, r3, #6
 8001d98:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d10d      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d106      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d001      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x480>
        {
          return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e000      	b.n	8001dc6 <HAL_RCC_OscConfig+0x482>
        }
      }
    }
  }
  return HAL_OK;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3728      	adds	r7, #40	; 0x28
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	40007000 	.word	0x40007000
 8001dd4:	40023870 	.word	0x40023870
 8001dd8:	40023800 	.word	0x40023800
 8001ddc:	42470060 	.word	0x42470060
 8001de0:	f0bc8000 	.word	0xf0bc8000

08001de4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d101      	bne.n	8001df8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e0d2      	b.n	8001f9e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001df8:	4b6b      	ldr	r3, [pc, #428]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 030f 	and.w	r3, r3, #15
 8001e00:	683a      	ldr	r2, [r7, #0]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d90c      	bls.n	8001e20 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e06:	4b68      	ldr	r3, [pc, #416]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e08:	683a      	ldr	r2, [r7, #0]
 8001e0a:	b2d2      	uxtb	r2, r2
 8001e0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e0e:	4b66      	ldr	r3, [pc, #408]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 030f 	and.w	r3, r3, #15
 8001e16:	683a      	ldr	r2, [r7, #0]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d001      	beq.n	8001e20 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e0be      	b.n	8001f9e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d020      	beq.n	8001e6e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0304 	and.w	r3, r3, #4
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d005      	beq.n	8001e44 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e38:	4b5c      	ldr	r3, [pc, #368]	; (8001fac <HAL_RCC_ClockConfig+0x1c8>)
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	4a5b      	ldr	r2, [pc, #364]	; (8001fac <HAL_RCC_ClockConfig+0x1c8>)
 8001e3e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e42:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0308 	and.w	r3, r3, #8
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d005      	beq.n	8001e5c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8001e50:	4b56      	ldr	r3, [pc, #344]	; (8001fac <HAL_RCC_ClockConfig+0x1c8>)
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	4a55      	ldr	r2, [pc, #340]	; (8001fac <HAL_RCC_ClockConfig+0x1c8>)
 8001e56:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e5a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e5c:	4b53      	ldr	r3, [pc, #332]	; (8001fac <HAL_RCC_ClockConfig+0x1c8>)
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	4950      	ldr	r1, [pc, #320]	; (8001fac <HAL_RCC_ClockConfig+0x1c8>)
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d040      	beq.n	8001efc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d107      	bne.n	8001e92 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e82:	4b4a      	ldr	r3, [pc, #296]	; (8001fac <HAL_RCC_ClockConfig+0x1c8>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d115      	bne.n	8001eba <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e085      	b.n	8001f9e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d107      	bne.n	8001eaa <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e9a:	4b44      	ldr	r3, [pc, #272]	; (8001fac <HAL_RCC_ClockConfig+0x1c8>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d109      	bne.n	8001eba <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e079      	b.n	8001f9e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eaa:	4b40      	ldr	r3, [pc, #256]	; (8001fac <HAL_RCC_ClockConfig+0x1c8>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d101      	bne.n	8001eba <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e071      	b.n	8001f9e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001eba:	4b3c      	ldr	r3, [pc, #240]	; (8001fac <HAL_RCC_ClockConfig+0x1c8>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f023 0203 	bic.w	r2, r3, #3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	4939      	ldr	r1, [pc, #228]	; (8001fac <HAL_RCC_ClockConfig+0x1c8>)
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ecc:	f7fe ff58 	bl	8000d80 <HAL_GetTick>
 8001ed0:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ed2:	e00a      	b.n	8001eea <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ed4:	f7fe ff54 	bl	8000d80 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e059      	b.n	8001f9e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eea:	4b30      	ldr	r3, [pc, #192]	; (8001fac <HAL_RCC_ClockConfig+0x1c8>)
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	f003 020c 	and.w	r2, r3, #12
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d1eb      	bne.n	8001ed4 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001efc:	4b2a      	ldr	r3, [pc, #168]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 030f 	and.w	r3, r3, #15
 8001f04:	683a      	ldr	r2, [r7, #0]
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d20c      	bcs.n	8001f24 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f0a:	4b27      	ldr	r3, [pc, #156]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f0c:	683a      	ldr	r2, [r7, #0]
 8001f0e:	b2d2      	uxtb	r2, r2
 8001f10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f12:	4b25      	ldr	r3, [pc, #148]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 030f 	and.w	r3, r3, #15
 8001f1a:	683a      	ldr	r2, [r7, #0]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d001      	beq.n	8001f24 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e03c      	b.n	8001f9e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0304 	and.w	r3, r3, #4
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d008      	beq.n	8001f42 <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f30:	4b1e      	ldr	r3, [pc, #120]	; (8001fac <HAL_RCC_ClockConfig+0x1c8>)
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	491b      	ldr	r1, [pc, #108]	; (8001fac <HAL_RCC_ClockConfig+0x1c8>)
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0308 	and.w	r3, r3, #8
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d009      	beq.n	8001f62 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f4e:	4b17      	ldr	r3, [pc, #92]	; (8001fac <HAL_RCC_ClockConfig+0x1c8>)
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	4913      	ldr	r1, [pc, #76]	; (8001fac <HAL_RCC_ClockConfig+0x1c8>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8001f62:	f000 f82b 	bl	8001fbc <HAL_RCC_GetSysClockFreq>
 8001f66:	4601      	mov	r1, r0
 8001f68:	4b10      	ldr	r3, [pc, #64]	; (8001fac <HAL_RCC_ClockConfig+0x1c8>)
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f70:	22f0      	movs	r2, #240	; 0xf0
 8001f72:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f74:	693a      	ldr	r2, [r7, #16]
 8001f76:	fa92 f2a2 	rbit	r2, r2
 8001f7a:	60fa      	str	r2, [r7, #12]
  return result;
 8001f7c:	68fa      	ldr	r2, [r7, #12]
 8001f7e:	fab2 f282 	clz	r2, r2
 8001f82:	b2d2      	uxtb	r2, r2
 8001f84:	40d3      	lsrs	r3, r2
 8001f86:	4a0a      	ldr	r2, [pc, #40]	; (8001fb0 <HAL_RCC_ClockConfig+0x1cc>)
 8001f88:	5cd3      	ldrb	r3, [r2, r3]
 8001f8a:	fa21 f303 	lsr.w	r3, r1, r3
 8001f8e:	4a09      	ldr	r2, [pc, #36]	; (8001fb4 <HAL_RCC_ClockConfig+0x1d0>)
 8001f90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f92:	4b09      	ldr	r3, [pc, #36]	; (8001fb8 <HAL_RCC_ClockConfig+0x1d4>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7fe fdf6 	bl	8000b88 <HAL_InitTick>

  return HAL_OK;
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3718      	adds	r7, #24
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40023c00 	.word	0x40023c00
 8001fac:	40023800 	.word	0x40023800
 8001fb0:	08007dd8 	.word	0x08007dd8
 8001fb4:	20000000 	.word	0x20000000
 8001fb8:	20000004 	.word	0x20000004

08001fbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	607b      	str	r3, [r7, #4]
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	60fb      	str	r3, [r7, #12]
 8001fca:	2300      	movs	r3, #0
 8001fcc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fd2:	4b63      	ldr	r3, [pc, #396]	; (8002160 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f003 030c 	and.w	r3, r3, #12
 8001fda:	2b04      	cmp	r3, #4
 8001fdc:	d007      	beq.n	8001fee <HAL_RCC_GetSysClockFreq+0x32>
 8001fde:	2b08      	cmp	r3, #8
 8001fe0:	d008      	beq.n	8001ff4 <HAL_RCC_GetSysClockFreq+0x38>
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	f040 80b4 	bne.w	8002150 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001fe8:	4b5e      	ldr	r3, [pc, #376]	; (8002164 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001fea:	60bb      	str	r3, [r7, #8]
       break;
 8001fec:	e0b3      	b.n	8002156 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001fee:	4b5e      	ldr	r3, [pc, #376]	; (8002168 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001ff0:	60bb      	str	r3, [r7, #8]
      break;
 8001ff2:	e0b0      	b.n	8002156 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ff4:	4b5a      	ldr	r3, [pc, #360]	; (8002160 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ffc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ffe:	4b58      	ldr	r3, [pc, #352]	; (8002160 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d04a      	beq.n	80020a0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800200a:	4b55      	ldr	r3, [pc, #340]	; (8002160 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	099b      	lsrs	r3, r3, #6
 8002010:	f04f 0400 	mov.w	r4, #0
 8002014:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002018:	f04f 0200 	mov.w	r2, #0
 800201c:	ea03 0501 	and.w	r5, r3, r1
 8002020:	ea04 0602 	and.w	r6, r4, r2
 8002024:	4629      	mov	r1, r5
 8002026:	4632      	mov	r2, r6
 8002028:	f04f 0300 	mov.w	r3, #0
 800202c:	f04f 0400 	mov.w	r4, #0
 8002030:	0154      	lsls	r4, r2, #5
 8002032:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002036:	014b      	lsls	r3, r1, #5
 8002038:	4619      	mov	r1, r3
 800203a:	4622      	mov	r2, r4
 800203c:	1b49      	subs	r1, r1, r5
 800203e:	eb62 0206 	sbc.w	r2, r2, r6
 8002042:	f04f 0300 	mov.w	r3, #0
 8002046:	f04f 0400 	mov.w	r4, #0
 800204a:	0194      	lsls	r4, r2, #6
 800204c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002050:	018b      	lsls	r3, r1, #6
 8002052:	1a5b      	subs	r3, r3, r1
 8002054:	eb64 0402 	sbc.w	r4, r4, r2
 8002058:	f04f 0100 	mov.w	r1, #0
 800205c:	f04f 0200 	mov.w	r2, #0
 8002060:	00e2      	lsls	r2, r4, #3
 8002062:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002066:	00d9      	lsls	r1, r3, #3
 8002068:	460b      	mov	r3, r1
 800206a:	4614      	mov	r4, r2
 800206c:	195b      	adds	r3, r3, r5
 800206e:	eb44 0406 	adc.w	r4, r4, r6
 8002072:	f04f 0100 	mov.w	r1, #0
 8002076:	f04f 0200 	mov.w	r2, #0
 800207a:	0262      	lsls	r2, r4, #9
 800207c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002080:	0259      	lsls	r1, r3, #9
 8002082:	460b      	mov	r3, r1
 8002084:	4614      	mov	r4, r2
 8002086:	4618      	mov	r0, r3
 8002088:	4621      	mov	r1, r4
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f04f 0400 	mov.w	r4, #0
 8002090:	461a      	mov	r2, r3
 8002092:	4623      	mov	r3, r4
 8002094:	f7fe f89c 	bl	80001d0 <__aeabi_uldivmod>
 8002098:	4603      	mov	r3, r0
 800209a:	460c      	mov	r4, r1
 800209c:	60fb      	str	r3, [r7, #12]
 800209e:	e049      	b.n	8002134 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020a0:	4b2f      	ldr	r3, [pc, #188]	; (8002160 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	099b      	lsrs	r3, r3, #6
 80020a6:	f04f 0400 	mov.w	r4, #0
 80020aa:	f240 11ff 	movw	r1, #511	; 0x1ff
 80020ae:	f04f 0200 	mov.w	r2, #0
 80020b2:	ea03 0501 	and.w	r5, r3, r1
 80020b6:	ea04 0602 	and.w	r6, r4, r2
 80020ba:	4629      	mov	r1, r5
 80020bc:	4632      	mov	r2, r6
 80020be:	f04f 0300 	mov.w	r3, #0
 80020c2:	f04f 0400 	mov.w	r4, #0
 80020c6:	0154      	lsls	r4, r2, #5
 80020c8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80020cc:	014b      	lsls	r3, r1, #5
 80020ce:	4619      	mov	r1, r3
 80020d0:	4622      	mov	r2, r4
 80020d2:	1b49      	subs	r1, r1, r5
 80020d4:	eb62 0206 	sbc.w	r2, r2, r6
 80020d8:	f04f 0300 	mov.w	r3, #0
 80020dc:	f04f 0400 	mov.w	r4, #0
 80020e0:	0194      	lsls	r4, r2, #6
 80020e2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80020e6:	018b      	lsls	r3, r1, #6
 80020e8:	1a5b      	subs	r3, r3, r1
 80020ea:	eb64 0402 	sbc.w	r4, r4, r2
 80020ee:	f04f 0100 	mov.w	r1, #0
 80020f2:	f04f 0200 	mov.w	r2, #0
 80020f6:	00e2      	lsls	r2, r4, #3
 80020f8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80020fc:	00d9      	lsls	r1, r3, #3
 80020fe:	460b      	mov	r3, r1
 8002100:	4614      	mov	r4, r2
 8002102:	195b      	adds	r3, r3, r5
 8002104:	eb44 0406 	adc.w	r4, r4, r6
 8002108:	f04f 0100 	mov.w	r1, #0
 800210c:	f04f 0200 	mov.w	r2, #0
 8002110:	02a2      	lsls	r2, r4, #10
 8002112:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002116:	0299      	lsls	r1, r3, #10
 8002118:	460b      	mov	r3, r1
 800211a:	4614      	mov	r4, r2
 800211c:	4618      	mov	r0, r3
 800211e:	4621      	mov	r1, r4
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f04f 0400 	mov.w	r4, #0
 8002126:	461a      	mov	r2, r3
 8002128:	4623      	mov	r3, r4
 800212a:	f7fe f851 	bl	80001d0 <__aeabi_uldivmod>
 800212e:	4603      	mov	r3, r0
 8002130:	460c      	mov	r4, r1
 8002132:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002134:	4b0a      	ldr	r3, [pc, #40]	; (8002160 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	0c1b      	lsrs	r3, r3, #16
 800213a:	f003 0303 	and.w	r3, r3, #3
 800213e:	3301      	adds	r3, #1
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002144:	68fa      	ldr	r2, [r7, #12]
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	fbb2 f3f3 	udiv	r3, r2, r3
 800214c:	60bb      	str	r3, [r7, #8]
      break;
 800214e:	e002      	b.n	8002156 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002150:	4b04      	ldr	r3, [pc, #16]	; (8002164 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002152:	60bb      	str	r3, [r7, #8]
      break;
 8002154:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002156:	68bb      	ldr	r3, [r7, #8]
}
 8002158:	4618      	mov	r0, r3
 800215a:	3714      	adds	r7, #20
 800215c:	46bd      	mov	sp, r7
 800215e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002160:	40023800 	.word	0x40023800
 8002164:	00f42400 	.word	0x00f42400
 8002168:	007a1200 	.word	0x007a1200

0800216c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002170:	4b02      	ldr	r3, [pc, #8]	; (800217c <HAL_RCC_GetHCLKFreq+0x10>)
 8002172:	681b      	ldr	r3, [r3, #0]
}
 8002174:	4618      	mov	r0, r3
 8002176:	46bd      	mov	sp, r7
 8002178:	bc80      	pop	{r7}
 800217a:	4770      	bx	lr
 800217c:	20000000 	.word	0x20000000

08002180 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8002186:	f7ff fff1 	bl	800216c <HAL_RCC_GetHCLKFreq>
 800218a:	4601      	mov	r1, r0
 800218c:	4b0b      	ldr	r3, [pc, #44]	; (80021bc <HAL_RCC_GetPCLK1Freq+0x3c>)
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8002194:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8002198:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	fa92 f2a2 	rbit	r2, r2
 80021a0:	603a      	str	r2, [r7, #0]
  return result;
 80021a2:	683a      	ldr	r2, [r7, #0]
 80021a4:	fab2 f282 	clz	r2, r2
 80021a8:	b2d2      	uxtb	r2, r2
 80021aa:	40d3      	lsrs	r3, r2
 80021ac:	4a04      	ldr	r2, [pc, #16]	; (80021c0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80021ae:	5cd3      	ldrb	r3, [r2, r3]
 80021b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3708      	adds	r7, #8
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	40023800 	.word	0x40023800
 80021c0:	08007de8 	.word	0x08007de8

080021c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 80021ca:	f7ff ffcf 	bl	800216c <HAL_RCC_GetHCLKFreq>
 80021ce:	4601      	mov	r1, r0
 80021d0:	4b0b      	ldr	r3, [pc, #44]	; (8002200 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80021d8:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80021dc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	fa92 f2a2 	rbit	r2, r2
 80021e4:	603a      	str	r2, [r7, #0]
  return result;
 80021e6:	683a      	ldr	r2, [r7, #0]
 80021e8:	fab2 f282 	clz	r2, r2
 80021ec:	b2d2      	uxtb	r2, r2
 80021ee:	40d3      	lsrs	r3, r2
 80021f0:	4a04      	ldr	r2, [pc, #16]	; (8002204 <HAL_RCC_GetPCLK2Freq+0x40>)
 80021f2:	5cd3      	ldrb	r3, [r2, r3]
 80021f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3708      	adds	r7, #8
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40023800 	.word	0x40023800
 8002204:	08007de8 	.word	0x08007de8

08002208 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	220f      	movs	r2, #15
 8002216:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002218:	4b11      	ldr	r3, [pc, #68]	; (8002260 <HAL_RCC_GetClockConfig+0x58>)
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	f003 0203 	and.w	r2, r3, #3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002224:	4b0e      	ldr	r3, [pc, #56]	; (8002260 <HAL_RCC_GetClockConfig+0x58>)
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002230:	4b0b      	ldr	r3, [pc, #44]	; (8002260 <HAL_RCC_GetClockConfig+0x58>)
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800223c:	4b08      	ldr	r3, [pc, #32]	; (8002260 <HAL_RCC_GetClockConfig+0x58>)
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	08db      	lsrs	r3, r3, #3
 8002242:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800224a:	4b06      	ldr	r3, [pc, #24]	; (8002264 <HAL_RCC_GetClockConfig+0x5c>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 020f 	and.w	r2, r3, #15
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	601a      	str	r2, [r3, #0]
}
 8002256:	bf00      	nop
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	bc80      	pop	{r7}
 800225e:	4770      	bx	lr
 8002260:	40023800 	.word	0x40023800
 8002264:	40023c00 	.word	0x40023c00

08002268 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d101      	bne.n	800227a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e022      	b.n	80022c0 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002280:	b2db      	uxtb	r3, r3
 8002282:	2b00      	cmp	r3, #0
 8002284:	d105      	bne.n	8002292 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f7fe fb43 	bl	8000918 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2203      	movs	r2, #3
 8002296:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f000 f814 	bl	80022c8 <HAL_SD_InitCard>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e00a      	b.n	80022c0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2200      	movs	r2, #0
 80022b4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2201      	movs	r2, #1
 80022ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80022be:	2300      	movs	r3, #0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3708      	adds	r7, #8
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80022c8:	b5b0      	push	{r4, r5, r7, lr}
 80022ca:	b08e      	sub	sp, #56	; 0x38
 80022cc:	af04      	add	r7, sp, #16
 80022ce:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80022d0:	2300      	movs	r3, #0
 80022d2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80022d4:	2300      	movs	r3, #0
 80022d6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80022d8:	2300      	movs	r3, #0
 80022da:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80022dc:	2300      	movs	r3, #0
 80022de:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80022e0:	2300      	movs	r3, #0
 80022e2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80022e4:	2376      	movs	r3, #118	; 0x76
 80022e6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681d      	ldr	r5, [r3, #0]
 80022ec:	466c      	mov	r4, sp
 80022ee:	f107 0314 	add.w	r3, r7, #20
 80022f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80022f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80022fa:	f107 0308 	add.w	r3, r7, #8
 80022fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002300:	4628      	mov	r0, r5
 8002302:	f001 ff9d 	bl	8004240 <SDIO_Init>
 8002306:	4603      	mov	r3, r0
 8002308:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800230c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e031      	b.n	800237c <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8002318:	4b1a      	ldr	r3, [pc, #104]	; (8002384 <HAL_SD_InitCard+0xbc>)
 800231a:	2200      	movs	r2, #0
 800231c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4618      	mov	r0, r3
 8002324:	f001 ffd2 	bl	80042cc <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8002328:	4b16      	ldr	r3, [pc, #88]	; (8002384 <HAL_SD_InitCard+0xbc>)
 800232a:	2201      	movs	r2, #1
 800232c:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f001 f8f0 	bl	8003514 <SD_PowerON>
 8002334:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002336:	6a3b      	ldr	r3, [r7, #32]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d00b      	beq.n	8002354 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002348:	6a3b      	ldr	r3, [r7, #32]
 800234a:	431a      	orrs	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e013      	b.n	800237c <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f001 f80f 	bl	8003378 <SD_InitCard>
 800235a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800235c:	6a3b      	ldr	r3, [r7, #32]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d00b      	beq.n	800237a <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2201      	movs	r2, #1
 8002366:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800236e:	6a3b      	ldr	r3, [r7, #32]
 8002370:	431a      	orrs	r2, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e000      	b.n	800237c <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800237a:	2300      	movs	r3, #0
}
 800237c:	4618      	mov	r0, r3
 800237e:	3728      	adds	r7, #40	; 0x28
 8002380:	46bd      	mov	sp, r7
 8002382:	bdb0      	pop	{r4, r5, r7, pc}
 8002384:	422580a0 	.word	0x422580a0

08002388 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b092      	sub	sp, #72	; 0x48
 800238c:	af00      	add	r7, sp, #0
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	607a      	str	r2, [r7, #4]
 8002394:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002396:	f7fe fcf3 	bl	8000d80 <HAL_GetTick>
 800239a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d107      	bne.n	80023ba <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ae:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e1d9      	b.n	800276e <HAL_SD_ReadBlocks+0x3e6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	f040 81cc 	bne.w	8002760 <HAL_SD_ReadBlocks+0x3d8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2200      	movs	r2, #0
 80023cc:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80023ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	441a      	add	r2, r3
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023d8:	429a      	cmp	r2, r3
 80023da:	d907      	bls.n	80023ec <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023e0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e1c0      	b.n	800276e <HAL_SD_ReadBlocks+0x3e6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2203      	movs	r2, #3
 80023f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2200      	movs	r2, #0
 80023fa:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002400:	2b01      	cmp	r3, #1
 8002402:	d002      	beq.n	800240a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8002404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002406:	025b      	lsls	r3, r3, #9
 8002408:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002412:	4618      	mov	r0, r3
 8002414:	f001 ffe8 	bl	80043e8 <SDMMC_CmdBlockLength>
 8002418:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 800241a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800241c:	2b00      	cmp	r3, #0
 800241e:	d00f      	beq.n	8002440 <HAL_SD_ReadBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a9b      	ldr	r2, [pc, #620]	; (8002694 <HAL_SD_ReadBlocks+0x30c>)
 8002426:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800242c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800242e:	431a      	orrs	r2, r3
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e196      	b.n	800276e <HAL_SD_ReadBlocks+0x3e6>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002440:	f04f 33ff 	mov.w	r3, #4294967295
 8002444:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	025b      	lsls	r3, r3, #9
 800244a:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800244c:	2390      	movs	r3, #144	; 0x90
 800244e:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002450:	2302      	movs	r3, #2
 8002452:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002454:	2300      	movs	r3, #0
 8002456:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8002458:	2301      	movs	r3, #1
 800245a:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f107 0214 	add.w	r2, r7, #20
 8002464:	4611      	mov	r1, r2
 8002466:	4618      	mov	r0, r3
 8002468:	f001 ff93 	bl	8004392 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	2b01      	cmp	r3, #1
 8002470:	d90a      	bls.n	8002488 <HAL_SD_ReadBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2202      	movs	r2, #2
 8002476:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800247e:	4618      	mov	r0, r3
 8002480:	f001 fff6 	bl	8004470 <SDMMC_CmdReadMultiBlock>
 8002484:	6478      	str	r0, [r7, #68]	; 0x44
 8002486:	e009      	b.n	800249c <HAL_SD_ReadBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2201      	movs	r2, #1
 800248c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002494:	4618      	mov	r0, r3
 8002496:	f001 ffc9 	bl	800442c <SDMMC_CmdReadSingleBlock>
 800249a:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800249c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d012      	beq.n	80024c8 <HAL_SD_ReadBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a7b      	ldr	r2, [pc, #492]	; (8002694 <HAL_SD_ReadBlocks+0x30c>)
 80024a8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024b0:	431a      	orrs	r2, r3
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2201      	movs	r2, #1
 80024ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2200      	movs	r2, #0
 80024c2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e152      	b.n	800276e <HAL_SD_ReadBlocks+0x3e6>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80024cc:	e061      	b.n	8002592 <HAL_SD_ReadBlocks+0x20a>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d03c      	beq.n	8002556 <HAL_SD_ReadBlocks+0x1ce>
 80024dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d039      	beq.n	8002556 <HAL_SD_ReadBlocks+0x1ce>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80024e2:	2300      	movs	r3, #0
 80024e4:	643b      	str	r3, [r7, #64]	; 0x40
 80024e6:	e033      	b.n	8002550 <HAL_SD_ReadBlocks+0x1c8>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f001 fed1 	bl	8004294 <SDIO_ReadFIFO>
 80024f2:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80024f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024f6:	b2da      	uxtb	r2, r3
 80024f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024fa:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80024fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024fe:	3301      	adds	r3, #1
 8002500:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002502:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002504:	3b01      	subs	r3, #1
 8002506:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8002508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800250a:	0a1b      	lsrs	r3, r3, #8
 800250c:	b2da      	uxtb	r2, r3
 800250e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002510:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002514:	3301      	adds	r3, #1
 8002516:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800251a:	3b01      	subs	r3, #1
 800251c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800251e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002520:	0c1b      	lsrs	r3, r3, #16
 8002522:	b2da      	uxtb	r2, r3
 8002524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002526:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800252a:	3301      	adds	r3, #1
 800252c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800252e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002530:	3b01      	subs	r3, #1
 8002532:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002536:	0e1b      	lsrs	r3, r3, #24
 8002538:	b2da      	uxtb	r2, r3
 800253a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800253c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800253e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002540:	3301      	adds	r3, #1
 8002542:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002546:	3b01      	subs	r3, #1
 8002548:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 800254a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800254c:	3301      	adds	r3, #1
 800254e:	643b      	str	r3, [r7, #64]	; 0x40
 8002550:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002552:	2b07      	cmp	r3, #7
 8002554:	d9c8      	bls.n	80024e8 <HAL_SD_ReadBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002556:	f7fe fc13 	bl	8000d80 <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002562:	429a      	cmp	r2, r3
 8002564:	d902      	bls.n	800256c <HAL_SD_ReadBlocks+0x1e4>
 8002566:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002568:	2b00      	cmp	r3, #0
 800256a:	d112      	bne.n	8002592 <HAL_SD_ReadBlocks+0x20a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a48      	ldr	r2, [pc, #288]	; (8002694 <HAL_SD_ReadBlocks+0x30c>)
 8002572:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002578:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2200      	movs	r2, #0
 800258c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e0ed      	b.n	800276e <HAL_SD_ReadBlocks+0x3e6>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002598:	f240 332a 	movw	r3, #810	; 0x32a
 800259c:	4013      	ands	r3, r2
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d095      	beq.n	80024ce <HAL_SD_ReadBlocks+0x146>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d022      	beq.n	80025f6 <HAL_SD_ReadBlocks+0x26e>
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d91f      	bls.n	80025f6 <HAL_SD_ReadBlocks+0x26e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ba:	2b03      	cmp	r3, #3
 80025bc:	d01b      	beq.n	80025f6 <HAL_SD_ReadBlocks+0x26e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f001 ffba 	bl	800453c <SDMMC_CmdStopTransfer>
 80025c8:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80025ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d012      	beq.n	80025f6 <HAL_SD_ReadBlocks+0x26e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a2f      	ldr	r2, [pc, #188]	; (8002694 <HAL_SD_ReadBlocks+0x30c>)
 80025d6:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025de:	431a      	orrs	r2, r3
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2200      	movs	r2, #0
 80025f0:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e0bb      	b.n	800276e <HAL_SD_ReadBlocks+0x3e6>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025fc:	f003 0308 	and.w	r3, r3, #8
 8002600:	2b00      	cmp	r3, #0
 8002602:	d012      	beq.n	800262a <HAL_SD_ReadBlocks+0x2a2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a22      	ldr	r2, [pc, #136]	; (8002694 <HAL_SD_ReadBlocks+0x30c>)
 800260a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002610:	f043 0208 	orr.w	r2, r3, #8
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2200      	movs	r2, #0
 8002624:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e0a1      	b.n	800276e <HAL_SD_ReadBlocks+0x3e6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d012      	beq.n	800265e <HAL_SD_ReadBlocks+0x2d6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a15      	ldr	r2, [pc, #84]	; (8002694 <HAL_SD_ReadBlocks+0x30c>)
 800263e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002644:	f043 0202 	orr.w	r2, r3, #2
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2200      	movs	r2, #0
 8002658:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e087      	b.n	800276e <HAL_SD_ReadBlocks+0x3e6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002664:	f003 0320 	and.w	r3, r3, #32
 8002668:	2b00      	cmp	r3, #0
 800266a:	d064      	beq.n	8002736 <HAL_SD_ReadBlocks+0x3ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a08      	ldr	r2, [pc, #32]	; (8002694 <HAL_SD_ReadBlocks+0x30c>)
 8002672:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002678:	f043 0220 	orr.w	r2, r3, #32
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2200      	movs	r2, #0
 800268c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e06d      	b.n	800276e <HAL_SD_ReadBlocks+0x3e6>
 8002692:	bf00      	nop
 8002694:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4618      	mov	r0, r3
 800269e:	f001 fdf9 	bl	8004294 <SDIO_ReadFIFO>
 80026a2:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 80026a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a6:	b2da      	uxtb	r2, r3
 80026a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026aa:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80026ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026ae:	3301      	adds	r3, #1
 80026b0:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80026b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026b4:	3b01      	subs	r3, #1
 80026b6:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80026b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ba:	0a1b      	lsrs	r3, r3, #8
 80026bc:	b2da      	uxtb	r2, r3
 80026be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026c0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80026c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026c4:	3301      	adds	r3, #1
 80026c6:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80026c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026ca:	3b01      	subs	r3, #1
 80026cc:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80026ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d0:	0c1b      	lsrs	r3, r3, #16
 80026d2:	b2da      	uxtb	r2, r3
 80026d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026d6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80026d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026da:	3301      	adds	r3, #1
 80026dc:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80026de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026e0:	3b01      	subs	r3, #1
 80026e2:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80026e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026e6:	0e1b      	lsrs	r3, r3, #24
 80026e8:	b2da      	uxtb	r2, r3
 80026ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026ec:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80026ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026f0:	3301      	adds	r3, #1
 80026f2:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80026f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026f6:	3b01      	subs	r3, #1
 80026f8:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80026fa:	f7fe fb41 	bl	8000d80 <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002706:	429a      	cmp	r2, r3
 8002708:	d902      	bls.n	8002710 <HAL_SD_ReadBlocks+0x388>
 800270a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800270c:	2b00      	cmp	r3, #0
 800270e:	d112      	bne.n	8002736 <HAL_SD_ReadBlocks+0x3ae>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a18      	ldr	r2, [pc, #96]	; (8002778 <HAL_SD_ReadBlocks+0x3f0>)
 8002716:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800271c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2200      	movs	r2, #0
 8002730:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e01b      	b.n	800276e <HAL_SD_ReadBlocks+0x3e6>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800273c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d002      	beq.n	800274a <HAL_SD_ReadBlocks+0x3c2>
 8002744:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002746:	2b00      	cmp	r3, #0
 8002748:	d1a6      	bne.n	8002698 <HAL_SD_ReadBlocks+0x310>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f240 523a 	movw	r2, #1338	; 0x53a
 8002752:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800275c:	2300      	movs	r3, #0
 800275e:	e006      	b.n	800276e <HAL_SD_ReadBlocks+0x3e6>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002764:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
  }
}
 800276e:	4618      	mov	r0, r3
 8002770:	3748      	adds	r7, #72	; 0x48
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	004005ff 	.word	0x004005ff

0800277c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b092      	sub	sp, #72	; 0x48
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	607a      	str	r2, [r7, #4]
 8002788:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800278a:	f7fe faf9 	bl	8000d80 <HAL_GetTick>
 800278e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d107      	bne.n	80027ae <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027a2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e184      	b.n	8002ab8 <HAL_SD_WriteBlocks+0x33c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	f040 8177 	bne.w	8002aaa <HAL_SD_WriteBlocks+0x32e>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2200      	movs	r2, #0
 80027c0:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80027c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	441a      	add	r2, r3
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d907      	bls.n	80027e0 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e16b      	b.n	8002ab8 <HAL_SD_WriteBlocks+0x33c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2203      	movs	r2, #3
 80027e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2200      	movs	r2, #0
 80027ee:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d002      	beq.n	80027fe <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80027f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027fa:	025b      	lsls	r3, r3, #9
 80027fc:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002806:	4618      	mov	r0, r3
 8002808:	f001 fdee 	bl	80043e8 <SDMMC_CmdBlockLength>
 800280c:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 800280e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002810:	2b00      	cmp	r3, #0
 8002812:	d00f      	beq.n	8002834 <HAL_SD_WriteBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a9d      	ldr	r2, [pc, #628]	; (8002a90 <HAL_SD_WriteBlocks+0x314>)
 800281a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002820:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002822:	431a      	orrs	r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e141      	b.n	8002ab8 <HAL_SD_WriteBlocks+0x33c>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002834:	f04f 33ff 	mov.w	r3, #4294967295
 8002838:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	025b      	lsls	r3, r3, #9
 800283e:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002840:	2390      	movs	r3, #144	; 0x90
 8002842:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8002844:	2300      	movs	r3, #0
 8002846:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002848:	2300      	movs	r3, #0
 800284a:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800284c:	2301      	movs	r3, #1
 800284e:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f107 0218 	add.w	r2, r7, #24
 8002858:	4611      	mov	r1, r2
 800285a:	4618      	mov	r0, r3
 800285c:	f001 fd99 	bl	8004392 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	2b01      	cmp	r3, #1
 8002864:	d90a      	bls.n	800287c <HAL_SD_WriteBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2220      	movs	r2, #32
 800286a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002872:	4618      	mov	r0, r3
 8002874:	f001 fe40 	bl	80044f8 <SDMMC_CmdWriteMultiBlock>
 8002878:	6478      	str	r0, [r7, #68]	; 0x44
 800287a:	e009      	b.n	8002890 <HAL_SD_WriteBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2210      	movs	r2, #16
 8002880:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002888:	4618      	mov	r0, r3
 800288a:	f001 fe13 	bl	80044b4 <SDMMC_CmdWriteSingleBlock>
 800288e:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002890:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002892:	2b00      	cmp	r3, #0
 8002894:	d012      	beq.n	80028bc <HAL_SD_WriteBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a7d      	ldr	r2, [pc, #500]	; (8002a90 <HAL_SD_WriteBlocks+0x314>)
 800289c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028a4:	431a      	orrs	r2, r3
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2201      	movs	r2, #1
 80028ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2200      	movs	r2, #0
 80028b6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e0fd      	b.n	8002ab8 <HAL_SD_WriteBlocks+0x33c>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80028c0:	e065      	b.n	800298e <HAL_SD_WriteBlocks+0x212>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d040      	beq.n	8002952 <HAL_SD_WriteBlocks+0x1d6>
 80028d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d03d      	beq.n	8002952 <HAL_SD_WriteBlocks+0x1d6>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80028d6:	2300      	movs	r3, #0
 80028d8:	643b      	str	r3, [r7, #64]	; 0x40
 80028da:	e037      	b.n	800294c <HAL_SD_WriteBlocks+0x1d0>
        {
          data = (uint32_t)(*tempbuff);
 80028dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80028e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028e4:	3301      	adds	r3, #1
 80028e6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80028e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028ea:	3b01      	subs	r3, #1
 80028ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80028ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	021a      	lsls	r2, r3, #8
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80028fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028fc:	3301      	adds	r3, #1
 80028fe:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002902:	3b01      	subs	r3, #1
 8002904:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8002906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	041a      	lsls	r2, r3, #16
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	4313      	orrs	r3, r2
 8002910:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002914:	3301      	adds	r3, #1
 8002916:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800291a:	3b01      	subs	r3, #1
 800291c:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800291e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	061a      	lsls	r2, r3, #24
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	4313      	orrs	r3, r2
 8002928:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800292a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800292c:	3301      	adds	r3, #1
 800292e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002932:	3b01      	subs	r3, #1
 8002934:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f107 0214 	add.w	r2, r7, #20
 800293e:	4611      	mov	r1, r2
 8002940:	4618      	mov	r0, r3
 8002942:	f001 fcb3 	bl	80042ac <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8002946:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002948:	3301      	adds	r3, #1
 800294a:	643b      	str	r3, [r7, #64]	; 0x40
 800294c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800294e:	2b07      	cmp	r3, #7
 8002950:	d9c4      	bls.n	80028dc <HAL_SD_WriteBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002952:	f7fe fa15 	bl	8000d80 <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800295e:	429a      	cmp	r2, r3
 8002960:	d902      	bls.n	8002968 <HAL_SD_WriteBlocks+0x1ec>
 8002962:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002964:	2b00      	cmp	r3, #0
 8002966:	d112      	bne.n	800298e <HAL_SD_WriteBlocks+0x212>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a48      	ldr	r2, [pc, #288]	; (8002a90 <HAL_SD_WriteBlocks+0x314>)
 800296e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002974:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002976:	431a      	orrs	r2, r3
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2200      	movs	r2, #0
 8002988:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e094      	b.n	8002ab8 <HAL_SD_WriteBlocks+0x33c>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002994:	f240 331a 	movw	r3, #794	; 0x31a
 8002998:	4013      	ands	r3, r2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d091      	beq.n	80028c2 <HAL_SD_WriteBlocks+0x146>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d022      	beq.n	80029f2 <HAL_SD_WriteBlocks+0x276>
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d91f      	bls.n	80029f2 <HAL_SD_WriteBlocks+0x276>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b6:	2b03      	cmp	r3, #3
 80029b8:	d01b      	beq.n	80029f2 <HAL_SD_WriteBlocks+0x276>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4618      	mov	r0, r3
 80029c0:	f001 fdbc 	bl	800453c <SDMMC_CmdStopTransfer>
 80029c4:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80029c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d012      	beq.n	80029f2 <HAL_SD_WriteBlocks+0x276>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a2f      	ldr	r2, [pc, #188]	; (8002a90 <HAL_SD_WriteBlocks+0x314>)
 80029d2:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029da:	431a      	orrs	r2, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2200      	movs	r2, #0
 80029ec:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e062      	b.n	8002ab8 <HAL_SD_WriteBlocks+0x33c>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029f8:	f003 0308 	and.w	r3, r3, #8
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d012      	beq.n	8002a26 <HAL_SD_WriteBlocks+0x2aa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a22      	ldr	r2, [pc, #136]	; (8002a90 <HAL_SD_WriteBlocks+0x314>)
 8002a06:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a0c:	f043 0208 	orr.w	r2, r3, #8
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e048      	b.n	8002ab8 <HAL_SD_WriteBlocks+0x33c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a2c:	f003 0302 	and.w	r3, r3, #2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d012      	beq.n	8002a5a <HAL_SD_WriteBlocks+0x2de>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a15      	ldr	r2, [pc, #84]	; (8002a90 <HAL_SD_WriteBlocks+0x314>)
 8002a3a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a40:	f043 0202 	orr.w	r2, r3, #2
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2200      	movs	r2, #0
 8002a54:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e02e      	b.n	8002ab8 <HAL_SD_WriteBlocks+0x33c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a60:	f003 0310 	and.w	r3, r3, #16
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d015      	beq.n	8002a94 <HAL_SD_WriteBlocks+0x318>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a08      	ldr	r2, [pc, #32]	; (8002a90 <HAL_SD_WriteBlocks+0x314>)
 8002a6e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a74:	f043 0210 	orr.w	r2, r3, #16
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2200      	movs	r2, #0
 8002a88:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e014      	b.n	8002ab8 <HAL_SD_WriteBlocks+0x33c>
 8002a8e:	bf00      	nop
 8002a90:	004005ff 	.word	0x004005ff
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f240 523a 	movw	r2, #1338	; 0x53a
 8002a9c:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	e006      	b.n	8002ab8 <HAL_SD_WriteBlocks+0x33c>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aae:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
  }
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3748      	adds	r7, #72	; 0x48
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002acc:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ad4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d008      	beq.n	8002aee <HAL_SD_IRQHandler+0x2e>
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f003 0308 	and.w	r3, r3, #8
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d003      	beq.n	8002aee <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 ff2a 	bl	8003940 <SD_Read_IT>
 8002aec:	e157      	b.n	8002d9e <HAL_SD_IRQHandler+0x2de>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	f000 808f 	beq.w	8002c1c <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b06:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	6812      	ldr	r2, [r2, #0]
 8002b12:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8002b16:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8002b1a:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f022 0201 	bic.w	r2, r2, #1
 8002b2a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f003 0308 	and.w	r3, r3, #8
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d039      	beq.n	8002baa <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f003 0302 	and.w	r3, r3, #2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d104      	bne.n	8002b4a <HAL_SD_IRQHandler+0x8a>
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f003 0320 	and.w	r3, r3, #32
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d011      	beq.n	8002b6e <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f001 fcf4 	bl	800453c <SDMMC_CmdStopTransfer>
 8002b54:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d008      	beq.n	8002b6e <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	431a      	orrs	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f000 f921 	bl	8002db0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f240 523a 	movw	r2, #1338	; 0x53a
 8002b76:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f003 0301 	and.w	r3, r3, #1
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d104      	bne.n	8002b9a <HAL_SD_IRQHandler+0xda>
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d003      	beq.n	8002ba2 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f002 f952 	bl	8004e44 <HAL_SD_RxCpltCallback>
 8002ba0:	e0fd      	b.n	8002d9e <HAL_SD_IRQHandler+0x2de>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f002 f944 	bl	8004e30 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002ba8:	e0f9      	b.n	8002d9e <HAL_SD_IRQHandler+0x2de>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	f000 80f4 	beq.w	8002d9e <HAL_SD_IRQHandler+0x2de>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f003 0320 	and.w	r3, r3, #32
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d011      	beq.n	8002be4 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f001 fcb9 	bl	800453c <SDMMC_CmdStopTransfer>
 8002bca:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d008      	beq.n	8002be4 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	431a      	orrs	r2, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 f8e6 	bl	8002db0 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	f040 80d7 	bne.w	8002d9e <HAL_SD_IRQHandler+0x2de>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f003 0302 	and.w	r3, r3, #2
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	f040 80d1 	bne.w	8002d9e <HAL_SD_IRQHandler+0x2de>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f022 0208 	bic.w	r2, r2, #8
 8002c0a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f002 f90b 	bl	8004e30 <HAL_SD_TxCpltCallback>
}
 8002c1a:	e0c0      	b.n	8002d9e <HAL_SD_IRQHandler+0x2de>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d008      	beq.n	8002c3c <HAL_SD_IRQHandler+0x17c>
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f003 0308 	and.w	r3, r3, #8
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d003      	beq.n	8002c3c <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f000 fed4 	bl	80039e2 <SD_Write_IT>
 8002c3a:	e0b0      	b.n	8002d9e <HAL_SD_IRQHandler+0x2de>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c42:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	f000 80a9 	beq.w	8002d9e <HAL_SD_IRQHandler+0x2de>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d005      	beq.n	8002c66 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c5e:	f043 0202 	orr.w	r2, r3, #2
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c6c:	f003 0308 	and.w	r3, r3, #8
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d005      	beq.n	8002c80 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c78:	f043 0208 	orr.w	r2, r3, #8
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c86:	f003 0320 	and.w	r3, r3, #32
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d005      	beq.n	8002c9a <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c92:	f043 0220 	orr.w	r2, r3, #32
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ca0:	f003 0310 	and.w	r3, r3, #16
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d005      	beq.n	8002cb4 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cac:	f043 0210 	orr.w	r2, r3, #16
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f240 723a 	movw	r2, #1850	; 0x73a
 8002cbc:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	6812      	ldr	r2, [r2, #0]
 8002cc8:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8002ccc:	f023 0302 	bic.w	r3, r3, #2
 8002cd0:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f001 fc30 	bl	800453c <SDMMC_CmdStopTransfer>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce2:	431a      	orrs	r2, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f003 0308 	and.w	r3, r3, #8
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d00a      	beq.n	8002d08 <HAL_SD_IRQHandler+0x248>
      hsd->State = HAL_SD_STATE_READY;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f000 f855 	bl	8002db0 <HAL_SD_ErrorCallback>
}
 8002d06:	e04a      	b.n	8002d9e <HAL_SD_IRQHandler+0x2de>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d045      	beq.n	8002d9e <HAL_SD_IRQHandler+0x2de>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f003 0310 	and.w	r3, r3, #16
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d104      	bne.n	8002d26 <HAL_SD_IRQHandler+0x266>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f003 0320 	and.w	r3, r3, #32
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d011      	beq.n	8002d4a <HAL_SD_IRQHandler+0x28a>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d2a:	4a1f      	ldr	r2, [pc, #124]	; (8002da8 <HAL_SD_IRQHandler+0x2e8>)
 8002d2c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7fe f9de 	bl	80010f4 <HAL_DMA_Abort_IT>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d02f      	beq.n	8002d9e <HAL_SD_IRQHandler+0x2de>
          SD_DMATxAbort(hsd->hdmatx);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d42:	4618      	mov	r0, r3
 8002d44:	f000 faaa 	bl	800329c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8002d48:	e029      	b.n	8002d9e <HAL_SD_IRQHandler+0x2de>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	f003 0301 	and.w	r3, r3, #1
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d104      	bne.n	8002d5e <HAL_SD_IRQHandler+0x29e>
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d011      	beq.n	8002d82 <HAL_SD_IRQHandler+0x2c2>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d62:	4a12      	ldr	r2, [pc, #72]	; (8002dac <HAL_SD_IRQHandler+0x2ec>)
 8002d64:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7fe f9c2 	bl	80010f4 <HAL_DMA_Abort_IT>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d013      	beq.n	8002d9e <HAL_SD_IRQHandler+0x2de>
          SD_DMARxAbort(hsd->hdmarx);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f000 fac5 	bl	800330a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8002d80:	e00d      	b.n	8002d9e <HAL_SD_IRQHandler+0x2de>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f002 f840 	bl	8004e1c <HAL_SD_AbortCallback>
}
 8002d9c:	e7ff      	b.n	8002d9e <HAL_SD_IRQHandler+0x2de>
 8002d9e:	bf00      	nop
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	0800329d 	.word	0x0800329d
 8002dac:	0800330b 	.word	0x0800330b

08002db0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8002db8:	bf00      	nop
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bc80      	pop	{r7}
 8002dc0:	4770      	bx	lr
	...

08002dc4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002dd2:	0f9b      	lsrs	r3, r3, #30
 8002dd4:	b2da      	uxtb	r2, r3
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002dde:	0e9b      	lsrs	r3, r3, #26
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	f003 030f 	and.w	r3, r3, #15
 8002de6:	b2da      	uxtb	r2, r3
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002df0:	0e1b      	lsrs	r3, r3, #24
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	f003 0303 	and.w	r3, r3, #3
 8002df8:	b2da      	uxtb	r2, r3
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e02:	0c1b      	lsrs	r3, r3, #16
 8002e04:	b2da      	uxtb	r2, r3
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e0e:	0a1b      	lsrs	r3, r3, #8
 8002e10:	b2da      	uxtb	r2, r3
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e1a:	b2da      	uxtb	r2, r3
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e24:	0d1b      	lsrs	r3, r3, #20
 8002e26:	b29a      	uxth	r2, r3
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e30:	0c1b      	lsrs	r3, r3, #16
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	f003 030f 	and.w	r3, r3, #15
 8002e38:	b2da      	uxtb	r2, r3
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e42:	0bdb      	lsrs	r3, r3, #15
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	f003 0301 	and.w	r3, r3, #1
 8002e4a:	b2da      	uxtb	r2, r3
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e54:	0b9b      	lsrs	r3, r3, #14
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	f003 0301 	and.w	r3, r3, #1
 8002e5c:	b2da      	uxtb	r2, r3
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e66:	0b5b      	lsrs	r3, r3, #13
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	b2da      	uxtb	r2, r3
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e78:	0b1b      	lsrs	r3, r3, #12
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	f003 0301 	and.w	r3, r3, #1
 8002e80:	b2da      	uxtb	r2, r3
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d163      	bne.n	8002f5c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e98:	009a      	lsls	r2, r3, #2
 8002e9a:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002ea4:	0f92      	lsrs	r2, r2, #30
 8002ea6:	431a      	orrs	r2, r3
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002eb0:	0edb      	lsrs	r3, r3, #27
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	f003 0307 	and.w	r3, r3, #7
 8002eb8:	b2da      	uxtb	r2, r3
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ec2:	0e1b      	lsrs	r3, r3, #24
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	f003 0307 	and.w	r3, r3, #7
 8002eca:	b2da      	uxtb	r2, r3
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ed4:	0d5b      	lsrs	r3, r3, #21
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	f003 0307 	and.w	r3, r3, #7
 8002edc:	b2da      	uxtb	r2, r3
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ee6:	0c9b      	lsrs	r3, r3, #18
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	f003 0307 	and.w	r3, r3, #7
 8002eee:	b2da      	uxtb	r2, r3
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ef8:	0bdb      	lsrs	r3, r3, #15
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	f003 0307 	and.w	r3, r3, #7
 8002f00:	b2da      	uxtb	r2, r3
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	1c5a      	adds	r2, r3, #1
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	7e1b      	ldrb	r3, [r3, #24]
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	f003 0307 	and.w	r3, r3, #7
 8002f1a:	3302      	adds	r3, #2
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002f26:	fb02 f203 	mul.w	r2, r2, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	7a1b      	ldrb	r3, [r3, #8]
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	f003 030f 	and.w	r3, r3, #15
 8002f38:	2201      	movs	r2, #1
 8002f3a:	409a      	lsls	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002f48:	0a52      	lsrs	r2, r2, #9
 8002f4a:	fb02 f203 	mul.w	r2, r2, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f58:	661a      	str	r2, [r3, #96]	; 0x60
 8002f5a:	e031      	b.n	8002fc0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d11d      	bne.n	8002fa0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f68:	041b      	lsls	r3, r3, #16
 8002f6a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f72:	0c1b      	lsrs	r3, r3, #16
 8002f74:	431a      	orrs	r2, r3
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	3301      	adds	r3, #1
 8002f80:	029a      	lsls	r2, r3, #10
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f94:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	661a      	str	r2, [r3, #96]	; 0x60
 8002f9e:	e00f      	b.n	8002fc0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a58      	ldr	r2, [pc, #352]	; (8003108 <HAL_SD_GetCardCSD+0x344>)
 8002fa6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e09d      	b.n	80030fc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fc4:	0b9b      	lsrs	r3, r3, #14
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	f003 0301 	and.w	r3, r3, #1
 8002fcc:	b2da      	uxtb	r2, r3
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fd6:	09db      	lsrs	r3, r3, #7
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fde:	b2da      	uxtb	r2, r3
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fee:	b2da      	uxtb	r2, r3
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff8:	0fdb      	lsrs	r3, r3, #31
 8002ffa:	b2da      	uxtb	r2, r3
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003004:	0f5b      	lsrs	r3, r3, #29
 8003006:	b2db      	uxtb	r3, r3
 8003008:	f003 0303 	and.w	r3, r3, #3
 800300c:	b2da      	uxtb	r2, r3
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003016:	0e9b      	lsrs	r3, r3, #26
 8003018:	b2db      	uxtb	r3, r3
 800301a:	f003 0307 	and.w	r3, r3, #7
 800301e:	b2da      	uxtb	r2, r3
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003028:	0d9b      	lsrs	r3, r3, #22
 800302a:	b2db      	uxtb	r3, r3
 800302c:	f003 030f 	and.w	r3, r3, #15
 8003030:	b2da      	uxtb	r2, r3
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800303a:	0d5b      	lsrs	r3, r3, #21
 800303c:	b2db      	uxtb	r3, r3
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	b2da      	uxtb	r2, r3
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003056:	0c1b      	lsrs	r3, r3, #16
 8003058:	b2db      	uxtb	r3, r3
 800305a:	f003 0301 	and.w	r3, r3, #1
 800305e:	b2da      	uxtb	r2, r3
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800306a:	0bdb      	lsrs	r3, r3, #15
 800306c:	b2db      	uxtb	r3, r3
 800306e:	f003 0301 	and.w	r3, r3, #1
 8003072:	b2da      	uxtb	r2, r3
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800307e:	0b9b      	lsrs	r3, r3, #14
 8003080:	b2db      	uxtb	r3, r3
 8003082:	f003 0301 	and.w	r3, r3, #1
 8003086:	b2da      	uxtb	r2, r3
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003092:	0b5b      	lsrs	r3, r3, #13
 8003094:	b2db      	uxtb	r3, r3
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	b2da      	uxtb	r2, r3
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a6:	0b1b      	lsrs	r3, r3, #12
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	f003 0301 	and.w	r3, r3, #1
 80030ae:	b2da      	uxtb	r2, r3
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ba:	0a9b      	lsrs	r3, r3, #10
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	f003 0303 	and.w	r3, r3, #3
 80030c2:	b2da      	uxtb	r2, r3
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ce:	0a1b      	lsrs	r3, r3, #8
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	f003 0303 	and.w	r3, r3, #3
 80030d6:	b2da      	uxtb	r2, r3
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030e2:	085b      	lsrs	r3, r3, #1
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030ea:	b2da      	uxtb	r2, r3
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	2201      	movs	r2, #1
 80030f6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80030fa:	2300      	movs	r3, #0
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	370c      	adds	r7, #12
 8003100:	46bd      	mov	sp, r7
 8003102:	bc80      	pop	{r7}
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	004005ff 	.word	0x004005ff

0800310c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8003156:	2300      	movs	r3, #0
}
 8003158:	4618      	mov	r0, r3
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	bc80      	pop	{r7}
 8003160:	4770      	bx	lr
	...

08003164 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8003164:	b5b0      	push	{r4, r5, r7, lr}
 8003166:	b08e      	sub	sp, #56	; 0x38
 8003168:	af04      	add	r7, sp, #16
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2203      	movs	r2, #3
 8003172:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800317a:	2b03      	cmp	r3, #3
 800317c:	d02e      	beq.n	80031dc <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003184:	d106      	bne.n	8003194 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800318a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	639a      	str	r2, [r3, #56]	; 0x38
 8003192:	e029      	b.n	80031e8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800319a:	d10a      	bne.n	80031b2 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f000 fa6f 	bl	8003680 <SD_WideBus_Enable>
 80031a2:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031aa:	431a      	orrs	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	639a      	str	r2, [r3, #56]	; 0x38
 80031b0:	e01a      	b.n	80031e8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d10a      	bne.n	80031ce <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f000 faac 	bl	8003716 <SD_WideBus_Disable>
 80031be:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c6:	431a      	orrs	r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	639a      	str	r2, [r3, #56]	; 0x38
 80031cc:	e00c      	b.n	80031e8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	639a      	str	r2, [r3, #56]	; 0x38
 80031da:	e005      	b.n	80031e8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d009      	beq.n	8003204 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a18      	ldr	r2, [pc, #96]	; (8003258 <HAL_SD_ConfigWideBusOperation+0xf4>)
 80031f6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e024      	b.n	800324e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	699b      	ldr	r3, [r3, #24]
 8003224:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681d      	ldr	r5, [r3, #0]
 800322a:	466c      	mov	r4, sp
 800322c:	f107 0318 	add.w	r3, r7, #24
 8003230:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003234:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003238:	f107 030c 	add.w	r3, r7, #12
 800323c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800323e:	4628      	mov	r0, r5
 8003240:	f000 fffe 	bl	8004240 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3728      	adds	r7, #40	; 0x28
 8003252:	46bd      	mov	sp, r7
 8003254:	bdb0      	pop	{r4, r5, r7, pc}
 8003256:	bf00      	nop
 8003258:	004005ff 	.word	0x004005ff

0800325c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003264:	2300      	movs	r3, #0
 8003266:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003268:	f107 030c 	add.w	r3, r7, #12
 800326c:	4619      	mov	r1, r3
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f000 f9de 	bl	8003630 <SD_SendStatus>
 8003274:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d005      	beq.n	8003288 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	431a      	orrs	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	0a5b      	lsrs	r3, r3, #9
 800328c:	f003 030f 	and.w	r3, r3, #15
 8003290:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8003292:	693b      	ldr	r3, [r7, #16]
}
 8003294:	4618      	mov	r0, r3
 8003296:	3718      	adds	r7, #24
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a8:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f240 523a 	movw	r2, #1338	; 0x53a
 80032b2:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80032b4:	68f8      	ldr	r0, [r7, #12]
 80032b6:	f7ff ffd1 	bl	800325c <HAL_SD_GetCardState>
 80032ba:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2200      	movs	r2, #0
 80032c8:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	2b06      	cmp	r3, #6
 80032ce:	d002      	beq.n	80032d6 <SD_DMATxAbort+0x3a>
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	2b05      	cmp	r3, #5
 80032d4:	d10a      	bne.n	80032ec <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4618      	mov	r0, r3
 80032dc:	f001 f92e 	bl	800453c <SDMMC_CmdStopTransfer>
 80032e0:	4602      	mov	r2, r0
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e6:	431a      	orrs	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d103      	bne.n	80032fc <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80032f4:	68f8      	ldr	r0, [r7, #12]
 80032f6:	f001 fd91 	bl	8004e1c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80032fa:	e002      	b.n	8003302 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80032fc:	68f8      	ldr	r0, [r7, #12]
 80032fe:	f7ff fd57 	bl	8002db0 <HAL_SD_ErrorCallback>
}
 8003302:	bf00      	nop
 8003304:	3710      	adds	r7, #16
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}

0800330a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800330a:	b580      	push	{r7, lr}
 800330c:	b084      	sub	sp, #16
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003316:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f240 523a 	movw	r2, #1338	; 0x53a
 8003320:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8003322:	68f8      	ldr	r0, [r7, #12]
 8003324:	f7ff ff9a 	bl	800325c <HAL_SD_GetCardState>
 8003328:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2201      	movs	r2, #1
 800332e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2200      	movs	r2, #0
 8003336:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	2b06      	cmp	r3, #6
 800333c:	d002      	beq.n	8003344 <SD_DMARxAbort+0x3a>
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	2b05      	cmp	r3, #5
 8003342:	d10a      	bne.n	800335a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4618      	mov	r0, r3
 800334a:	f001 f8f7 	bl	800453c <SDMMC_CmdStopTransfer>
 800334e:	4602      	mov	r2, r0
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003354:	431a      	orrs	r2, r3
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800335e:	2b00      	cmp	r3, #0
 8003360:	d103      	bne.n	800336a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8003362:	68f8      	ldr	r0, [r7, #12]
 8003364:	f001 fd5a 	bl	8004e1c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003368:	e002      	b.n	8003370 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800336a:	68f8      	ldr	r0, [r7, #12]
 800336c:	f7ff fd20 	bl	8002db0 <HAL_SD_ErrorCallback>
}
 8003370:	bf00      	nop
 8003372:	3710      	adds	r7, #16
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003378:	b5b0      	push	{r4, r5, r7, lr}
 800337a:	b094      	sub	sp, #80	; 0x50
 800337c:	af04      	add	r7, sp, #16
 800337e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003380:	2301      	movs	r3, #1
 8003382:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4618      	mov	r0, r3
 800338a:	f000 ffae 	bl	80042ea <SDIO_GetPowerState>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d102      	bne.n	800339a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003394:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003398:	e0b7      	b.n	800350a <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800339e:	2b03      	cmp	r3, #3
 80033a0:	d02f      	beq.n	8003402 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f001 f9d2 	bl	8004750 <SDMMC_CmdSendCID>
 80033ac:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80033ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d001      	beq.n	80033b8 <SD_InitCard+0x40>
    {
      return errorstate;
 80033b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033b6:	e0a8      	b.n	800350a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2100      	movs	r1, #0
 80033be:	4618      	mov	r0, r3
 80033c0:	f000 ffd5 	bl	800436e <SDIO_GetResponse>
 80033c4:	4602      	mov	r2, r0
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2104      	movs	r1, #4
 80033d0:	4618      	mov	r0, r3
 80033d2:	f000 ffcc 	bl	800436e <SDIO_GetResponse>
 80033d6:	4602      	mov	r2, r0
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2108      	movs	r1, #8
 80033e2:	4618      	mov	r0, r3
 80033e4:	f000 ffc3 	bl	800436e <SDIO_GetResponse>
 80033e8:	4602      	mov	r2, r0
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	210c      	movs	r1, #12
 80033f4:	4618      	mov	r0, r3
 80033f6:	f000 ffba 	bl	800436e <SDIO_GetResponse>
 80033fa:	4602      	mov	r2, r0
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003406:	2b03      	cmp	r3, #3
 8003408:	d00d      	beq.n	8003426 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f107 020e 	add.w	r2, r7, #14
 8003412:	4611      	mov	r1, r2
 8003414:	4618      	mov	r0, r3
 8003416:	f001 f9d8 	bl	80047ca <SDMMC_CmdSetRelAdd>
 800341a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800341c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800341e:	2b00      	cmp	r3, #0
 8003420:	d001      	beq.n	8003426 <SD_InitCard+0xae>
    {
      return errorstate;
 8003422:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003424:	e071      	b.n	800350a <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800342a:	2b03      	cmp	r3, #3
 800342c:	d036      	beq.n	800349c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800342e:	89fb      	ldrh	r3, [r7, #14]
 8003430:	461a      	mov	r2, r3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800343e:	041b      	lsls	r3, r3, #16
 8003440:	4619      	mov	r1, r3
 8003442:	4610      	mov	r0, r2
 8003444:	f001 f9a2 	bl	800478c <SDMMC_CmdSendCSD>
 8003448:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800344a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800344c:	2b00      	cmp	r3, #0
 800344e:	d001      	beq.n	8003454 <SD_InitCard+0xdc>
    {
      return errorstate;
 8003450:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003452:	e05a      	b.n	800350a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2100      	movs	r1, #0
 800345a:	4618      	mov	r0, r3
 800345c:	f000 ff87 	bl	800436e <SDIO_GetResponse>
 8003460:	4602      	mov	r2, r0
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2104      	movs	r1, #4
 800346c:	4618      	mov	r0, r3
 800346e:	f000 ff7e 	bl	800436e <SDIO_GetResponse>
 8003472:	4602      	mov	r2, r0
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2108      	movs	r1, #8
 800347e:	4618      	mov	r0, r3
 8003480:	f000 ff75 	bl	800436e <SDIO_GetResponse>
 8003484:	4602      	mov	r2, r0
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	210c      	movs	r1, #12
 8003490:	4618      	mov	r0, r3
 8003492:	f000 ff6c 	bl	800436e <SDIO_GetResponse>
 8003496:	4602      	mov	r2, r0
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2104      	movs	r1, #4
 80034a2:	4618      	mov	r0, r3
 80034a4:	f000 ff63 	bl	800436e <SDIO_GetResponse>
 80034a8:	4603      	mov	r3, r0
 80034aa:	0d1a      	lsrs	r2, r3, #20
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80034b0:	f107 0310 	add.w	r3, r7, #16
 80034b4:	4619      	mov	r1, r3
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f7ff fc84 	bl	8002dc4 <HAL_SD_GetCardCSD>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d002      	beq.n	80034c8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80034c2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80034c6:	e020      	b.n	800350a <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6819      	ldr	r1, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034d0:	041b      	lsls	r3, r3, #16
 80034d2:	f04f 0400 	mov.w	r4, #0
 80034d6:	461a      	mov	r2, r3
 80034d8:	4623      	mov	r3, r4
 80034da:	4608      	mov	r0, r1
 80034dc:	f001 f850 	bl	8004580 <SDMMC_CmdSelDesel>
 80034e0:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80034e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d001      	beq.n	80034ec <SD_InitCard+0x174>
  {
    return errorstate;
 80034e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034ea:	e00e      	b.n	800350a <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681d      	ldr	r5, [r3, #0]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	466c      	mov	r4, sp
 80034f4:	f103 0210 	add.w	r2, r3, #16
 80034f8:	ca07      	ldmia	r2, {r0, r1, r2}
 80034fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80034fe:	3304      	adds	r3, #4
 8003500:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003502:	4628      	mov	r0, r5
 8003504:	f000 fe9c 	bl	8004240 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3740      	adds	r7, #64	; 0x40
 800350e:	46bd      	mov	sp, r7
 8003510:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003514 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b086      	sub	sp, #24
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800351c:	2300      	movs	r3, #0
 800351e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003520:	2300      	movs	r3, #0
 8003522:	617b      	str	r3, [r7, #20]
 8003524:	2300      	movs	r3, #0
 8003526:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4618      	mov	r0, r3
 800352e:	f001 f84a 	bl	80045c6 <SDMMC_CmdGoIdleState>
 8003532:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d001      	beq.n	800353e <SD_PowerON+0x2a>
  {
    return errorstate;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	e072      	b.n	8003624 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4618      	mov	r0, r3
 8003544:	f001 f85d 	bl	8004602 <SDMMC_CmdOperCond>
 8003548:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00d      	beq.n	800356c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4618      	mov	r0, r3
 800355c:	f001 f833 	bl	80045c6 <SDMMC_CmdGoIdleState>
 8003560:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d004      	beq.n	8003572 <SD_PowerON+0x5e>
    {
      return errorstate;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	e05b      	b.n	8003624 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003576:	2b01      	cmp	r3, #1
 8003578:	d137      	bne.n	80035ea <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2100      	movs	r1, #0
 8003580:	4618      	mov	r0, r3
 8003582:	f001 f85d 	bl	8004640 <SDMMC_CmdAppCommand>
 8003586:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d02d      	beq.n	80035ea <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800358e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003592:	e047      	b.n	8003624 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2100      	movs	r1, #0
 800359a:	4618      	mov	r0, r3
 800359c:	f001 f850 	bl	8004640 <SDMMC_CmdAppCommand>
 80035a0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d001      	beq.n	80035ac <SD_PowerON+0x98>
    {
      return errorstate;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	e03b      	b.n	8003624 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	491e      	ldr	r1, [pc, #120]	; (800362c <SD_PowerON+0x118>)
 80035b2:	4618      	mov	r0, r3
 80035b4:	f001 f866 	bl	8004684 <SDMMC_CmdAppOperCommand>
 80035b8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d002      	beq.n	80035c6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80035c0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80035c4:	e02e      	b.n	8003624 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2100      	movs	r1, #0
 80035cc:	4618      	mov	r0, r3
 80035ce:	f000 fece 	bl	800436e <SDIO_GetResponse>
 80035d2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	0fdb      	lsrs	r3, r3, #31
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d101      	bne.n	80035e0 <SD_PowerON+0xcc>
 80035dc:	2301      	movs	r3, #1
 80035de:	e000      	b.n	80035e2 <SD_PowerON+0xce>
 80035e0:	2300      	movs	r3, #0
 80035e2:	613b      	str	r3, [r7, #16]

    count++;
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	3301      	adds	r3, #1
 80035e8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d802      	bhi.n	80035fa <SD_PowerON+0xe6>
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d0cc      	beq.n	8003594 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003600:	4293      	cmp	r3, r2
 8003602:	d902      	bls.n	800360a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003604:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003608:	e00c      	b.n	8003624 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d003      	beq.n	800361c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	645a      	str	r2, [r3, #68]	; 0x44
 800361a:	e002      	b.n	8003622 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8003622:	2300      	movs	r3, #0
}
 8003624:	4618      	mov	r0, r3
 8003626:	3718      	adds	r7, #24
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	c1100000 	.word	0xc1100000

08003630 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d102      	bne.n	8003646 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8003640:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003644:	e018      	b.n	8003678 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800364e:	041b      	lsls	r3, r3, #16
 8003650:	4619      	mov	r1, r3
 8003652:	4610      	mov	r0, r2
 8003654:	f001 f8da 	bl	800480c <SDMMC_CmdSendStatus>
 8003658:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d001      	beq.n	8003664 <SD_SendStatus+0x34>
  {
    return errorstate;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	e009      	b.n	8003678 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2100      	movs	r1, #0
 800366a:	4618      	mov	r0, r3
 800366c:	f000 fe7f 	bl	800436e <SDIO_GetResponse>
 8003670:	4602      	mov	r2, r0
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	3710      	adds	r7, #16
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b086      	sub	sp, #24
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003688:	2300      	movs	r3, #0
 800368a:	60fb      	str	r3, [r7, #12]
 800368c:	2300      	movs	r3, #0
 800368e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2100      	movs	r1, #0
 8003696:	4618      	mov	r0, r3
 8003698:	f000 fe69 	bl	800436e <SDIO_GetResponse>
 800369c:	4603      	mov	r3, r0
 800369e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036a6:	d102      	bne.n	80036ae <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80036a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80036ac:	e02f      	b.n	800370e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80036ae:	f107 030c 	add.w	r3, r7, #12
 80036b2:	4619      	mov	r1, r3
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f000 f879 	bl	80037ac <SD_FindSCR>
 80036ba:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d001      	beq.n	80036c6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	e023      	b.n	800370e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d01c      	beq.n	800370a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036d8:	041b      	lsls	r3, r3, #16
 80036da:	4619      	mov	r1, r3
 80036dc:	4610      	mov	r0, r2
 80036de:	f000 ffaf 	bl	8004640 <SDMMC_CmdAppCommand>
 80036e2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d001      	beq.n	80036ee <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	e00f      	b.n	800370e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2102      	movs	r1, #2
 80036f4:	4618      	mov	r0, r3
 80036f6:	f000 ffe8 	bl	80046ca <SDMMC_CmdBusWidth>
 80036fa:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d001      	beq.n	8003706 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	e003      	b.n	800370e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8003706:	2300      	movs	r3, #0
 8003708:	e001      	b.n	800370e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800370a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800370e:	4618      	mov	r0, r3
 8003710:	3718      	adds	r7, #24
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}

08003716 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8003716:	b580      	push	{r7, lr}
 8003718:	b086      	sub	sp, #24
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800371e:	2300      	movs	r3, #0
 8003720:	60fb      	str	r3, [r7, #12]
 8003722:	2300      	movs	r3, #0
 8003724:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2100      	movs	r1, #0
 800372c:	4618      	mov	r0, r3
 800372e:	f000 fe1e 	bl	800436e <SDIO_GetResponse>
 8003732:	4603      	mov	r3, r0
 8003734:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003738:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800373c:	d102      	bne.n	8003744 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800373e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003742:	e02f      	b.n	80037a4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003744:	f107 030c 	add.w	r3, r7, #12
 8003748:	4619      	mov	r1, r3
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 f82e 	bl	80037ac <SD_FindSCR>
 8003750:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d001      	beq.n	800375c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	e023      	b.n	80037a4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d01c      	beq.n	80037a0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800376e:	041b      	lsls	r3, r3, #16
 8003770:	4619      	mov	r1, r3
 8003772:	4610      	mov	r0, r2
 8003774:	f000 ff64 	bl	8004640 <SDMMC_CmdAppCommand>
 8003778:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d001      	beq.n	8003784 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	e00f      	b.n	80037a4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2100      	movs	r1, #0
 800378a:	4618      	mov	r0, r3
 800378c:	f000 ff9d 	bl	80046ca <SDMMC_CmdBusWidth>
 8003790:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d001      	beq.n	800379c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	e003      	b.n	80037a4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800379c:	2300      	movs	r3, #0
 800379e:	e001      	b.n	80037a4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80037a0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3718      	adds	r7, #24
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80037ac:	b590      	push	{r4, r7, lr}
 80037ae:	b08f      	sub	sp, #60	; 0x3c
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80037b6:	f7fd fae3 	bl	8000d80 <HAL_GetTick>
 80037ba:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80037bc:	2300      	movs	r3, #0
 80037be:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80037c0:	2300      	movs	r3, #0
 80037c2:	60bb      	str	r3, [r7, #8]
 80037c4:	2300      	movs	r3, #0
 80037c6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2108      	movs	r1, #8
 80037d2:	4618      	mov	r0, r3
 80037d4:	f000 fe08 	bl	80043e8 <SDMMC_CmdBlockLength>
 80037d8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80037da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d001      	beq.n	80037e4 <SD_FindSCR+0x38>
  {
    return errorstate;
 80037e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037e2:	e0a9      	b.n	8003938 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037ec:	041b      	lsls	r3, r3, #16
 80037ee:	4619      	mov	r1, r3
 80037f0:	4610      	mov	r0, r2
 80037f2:	f000 ff25 	bl	8004640 <SDMMC_CmdAppCommand>
 80037f6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80037f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d001      	beq.n	8003802 <SD_FindSCR+0x56>
  {
    return errorstate;
 80037fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003800:	e09a      	b.n	8003938 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003802:	f04f 33ff 	mov.w	r3, #4294967295
 8003806:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8003808:	2308      	movs	r3, #8
 800380a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800380c:	2330      	movs	r3, #48	; 0x30
 800380e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003810:	2302      	movs	r3, #2
 8003812:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003814:	2300      	movs	r3, #0
 8003816:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8003818:	2301      	movs	r3, #1
 800381a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f107 0210 	add.w	r2, r7, #16
 8003824:	4611      	mov	r1, r2
 8003826:	4618      	mov	r0, r3
 8003828:	f000 fdb3 	bl	8004392 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4618      	mov	r0, r3
 8003832:	f000 ff6c 	bl	800470e <SDMMC_CmdSendSCR>
 8003836:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800383a:	2b00      	cmp	r3, #0
 800383c:	d022      	beq.n	8003884 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800383e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003840:	e07a      	b.n	8003938 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003848:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800384c:	2b00      	cmp	r3, #0
 800384e:	d00e      	beq.n	800386e <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6819      	ldr	r1, [r3, #0]
 8003854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	f107 0208 	add.w	r2, r7, #8
 800385c:	18d4      	adds	r4, r2, r3
 800385e:	4608      	mov	r0, r1
 8003860:	f000 fd18 	bl	8004294 <SDIO_ReadFIFO>
 8003864:	4603      	mov	r3, r0
 8003866:	6023      	str	r3, [r4, #0]
      index++;
 8003868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800386a:	3301      	adds	r3, #1
 800386c:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800386e:	f7fd fa87 	bl	8000d80 <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800387c:	d102      	bne.n	8003884 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800387e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003882:	e059      	b.n	8003938 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800388a:	f240 432a 	movw	r3, #1066	; 0x42a
 800388e:	4013      	ands	r3, r2
 8003890:	2b00      	cmp	r3, #0
 8003892:	d0d6      	beq.n	8003842 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800389a:	f003 0308 	and.w	r3, r3, #8
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d005      	beq.n	80038ae <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2208      	movs	r2, #8
 80038a8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80038aa:	2308      	movs	r3, #8
 80038ac:	e044      	b.n	8003938 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038b4:	f003 0302 	and.w	r3, r3, #2
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d005      	beq.n	80038c8 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2202      	movs	r2, #2
 80038c2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80038c4:	2302      	movs	r3, #2
 80038c6:	e037      	b.n	8003938 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ce:	f003 0320 	and.w	r3, r3, #32
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d005      	beq.n	80038e2 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2220      	movs	r2, #32
 80038dc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80038de:	2320      	movs	r3, #32
 80038e0:	e02a      	b.n	8003938 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f240 523a 	movw	r2, #1338	; 0x53a
 80038ea:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	061a      	lsls	r2, r3, #24
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	021b      	lsls	r3, r3, #8
 80038f4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80038f8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	0a1b      	lsrs	r3, r3, #8
 80038fe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003902:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	0e1b      	lsrs	r3, r3, #24
 8003908:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800390a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800390c:	601a      	str	r2, [r3, #0]
    scr++;
 800390e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003910:	3304      	adds	r3, #4
 8003912:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	061a      	lsls	r2, r3, #24
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	021b      	lsls	r3, r3, #8
 800391c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003920:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	0a1b      	lsrs	r3, r3, #8
 8003926:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800392a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	0e1b      	lsrs	r3, r3, #24
 8003930:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003934:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	373c      	adds	r7, #60	; 0x3c
 800393c:	46bd      	mov	sp, r7
 800393e:	bd90      	pop	{r4, r7, pc}

08003940 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b086      	sub	sp, #24
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800394c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003952:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d03f      	beq.n	80039da <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800395a:	2300      	movs	r3, #0
 800395c:	617b      	str	r3, [r7, #20]
 800395e:	e033      	b.n	80039c8 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4618      	mov	r0, r3
 8003966:	f000 fc95 	bl	8004294 <SDIO_ReadFIFO>
 800396a:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	b2da      	uxtb	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	3301      	adds	r3, #1
 8003978:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	3b01      	subs	r3, #1
 800397e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	0a1b      	lsrs	r3, r3, #8
 8003984:	b2da      	uxtb	r2, r3
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	701a      	strb	r2, [r3, #0]
      tmp++;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	3301      	adds	r3, #1
 800398e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	3b01      	subs	r3, #1
 8003994:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	0c1b      	lsrs	r3, r3, #16
 800399a:	b2da      	uxtb	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	701a      	strb	r2, [r3, #0]
      tmp++;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	3301      	adds	r3, #1
 80039a4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	3b01      	subs	r3, #1
 80039aa:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	0e1b      	lsrs	r3, r3, #24
 80039b0:	b2da      	uxtb	r2, r3
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	701a      	strb	r2, [r3, #0]
      tmp++;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	3301      	adds	r3, #1
 80039ba:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	3b01      	subs	r3, #1
 80039c0:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	3301      	adds	r3, #1
 80039c6:	617b      	str	r3, [r7, #20]
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	2b07      	cmp	r3, #7
 80039cc:	d9c8      	bls.n	8003960 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	693a      	ldr	r2, [r7, #16]
 80039d8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80039da:	bf00      	nop
 80039dc:	3718      	adds	r7, #24
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}

080039e2 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80039e2:	b580      	push	{r7, lr}
 80039e4:	b086      	sub	sp, #24
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a1b      	ldr	r3, [r3, #32]
 80039ee:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f4:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d043      	beq.n	8003a84 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80039fc:	2300      	movs	r3, #0
 80039fe:	617b      	str	r3, [r7, #20]
 8003a00:	e037      	b.n	8003a72 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	3b01      	subs	r3, #1
 8003a12:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	021a      	lsls	r2, r3, #8
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	3301      	adds	r3, #1
 8003a24:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	041a      	lsls	r2, r3, #16
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	3b01      	subs	r3, #1
 8003a42:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	061a      	lsls	r2, r3, #24
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	3301      	adds	r3, #1
 8003a54:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	3b01      	subs	r3, #1
 8003a5a:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f107 0208 	add.w	r2, r7, #8
 8003a64:	4611      	mov	r1, r2
 8003a66:	4618      	mov	r0, r3
 8003a68:	f000 fc20 	bl	80042ac <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	3301      	adds	r3, #1
 8003a70:	617b      	str	r3, [r7, #20]
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	2b07      	cmp	r3, #7
 8003a76:	d9c4      	bls.n	8003a02 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	68fa      	ldr	r2, [r7, #12]
 8003a7c:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	693a      	ldr	r2, [r7, #16]
 8003a82:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8003a84:	bf00      	nop
 8003a86:	3718      	adds	r7, #24
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d101      	bne.n	8003a9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e041      	b.n	8003b22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d106      	bne.n	8003ab8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 f839 	bl	8003b2a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2202      	movs	r2, #2
 8003abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	3304      	adds	r3, #4
 8003ac8:	4619      	mov	r1, r3
 8003aca:	4610      	mov	r0, r2
 8003acc:	f000 f9d0 	bl	8003e70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3708      	adds	r7, #8
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}

08003b2a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	b083      	sub	sp, #12
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003b32:	bf00      	nop
 8003b34:	370c      	adds	r7, #12
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bc80      	pop	{r7}
 8003b3a:	4770      	bx	lr

08003b3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b085      	sub	sp, #20
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d001      	beq.n	8003b54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e04e      	b.n	8003bf2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2202      	movs	r2, #2
 8003b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	68da      	ldr	r2, [r3, #12]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f042 0201 	orr.w	r2, r2, #1
 8003b6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a22      	ldr	r2, [pc, #136]	; (8003bfc <HAL_TIM_Base_Start_IT+0xc0>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d022      	beq.n	8003bbc <HAL_TIM_Base_Start_IT+0x80>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b7e:	d01d      	beq.n	8003bbc <HAL_TIM_Base_Start_IT+0x80>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a1e      	ldr	r2, [pc, #120]	; (8003c00 <HAL_TIM_Base_Start_IT+0xc4>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d018      	beq.n	8003bbc <HAL_TIM_Base_Start_IT+0x80>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a1d      	ldr	r2, [pc, #116]	; (8003c04 <HAL_TIM_Base_Start_IT+0xc8>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d013      	beq.n	8003bbc <HAL_TIM_Base_Start_IT+0x80>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a1b      	ldr	r2, [pc, #108]	; (8003c08 <HAL_TIM_Base_Start_IT+0xcc>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d00e      	beq.n	8003bbc <HAL_TIM_Base_Start_IT+0x80>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a1a      	ldr	r2, [pc, #104]	; (8003c0c <HAL_TIM_Base_Start_IT+0xd0>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d009      	beq.n	8003bbc <HAL_TIM_Base_Start_IT+0x80>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a18      	ldr	r2, [pc, #96]	; (8003c10 <HAL_TIM_Base_Start_IT+0xd4>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d004      	beq.n	8003bbc <HAL_TIM_Base_Start_IT+0x80>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a17      	ldr	r2, [pc, #92]	; (8003c14 <HAL_TIM_Base_Start_IT+0xd8>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d111      	bne.n	8003be0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f003 0307 	and.w	r3, r3, #7
 8003bc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2b06      	cmp	r3, #6
 8003bcc:	d010      	beq.n	8003bf0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f042 0201 	orr.w	r2, r2, #1
 8003bdc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bde:	e007      	b.n	8003bf0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f042 0201 	orr.w	r2, r2, #1
 8003bee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3714      	adds	r7, #20
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bc80      	pop	{r7}
 8003bfa:	4770      	bx	lr
 8003bfc:	40010000 	.word	0x40010000
 8003c00:	40000400 	.word	0x40000400
 8003c04:	40000800 	.word	0x40000800
 8003c08:	40000c00 	.word	0x40000c00
 8003c0c:	40010400 	.word	0x40010400
 8003c10:	40014000 	.word	0x40014000
 8003c14:	40001800 	.word	0x40001800

08003c18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b082      	sub	sp, #8
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	f003 0302 	and.w	r3, r3, #2
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d122      	bne.n	8003c74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	f003 0302 	and.w	r3, r3, #2
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d11b      	bne.n	8003c74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f06f 0202 	mvn.w	r2, #2
 8003c44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	f003 0303 	and.w	r3, r3, #3
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d003      	beq.n	8003c62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 f8ed 	bl	8003e3a <HAL_TIM_IC_CaptureCallback>
 8003c60:	e005      	b.n	8003c6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 f8e0 	bl	8003e28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f000 f8ef 	bl	8003e4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	f003 0304 	and.w	r3, r3, #4
 8003c7e:	2b04      	cmp	r3, #4
 8003c80:	d122      	bne.n	8003cc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	f003 0304 	and.w	r3, r3, #4
 8003c8c:	2b04      	cmp	r3, #4
 8003c8e:	d11b      	bne.n	8003cc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f06f 0204 	mvn.w	r2, #4
 8003c98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2202      	movs	r2, #2
 8003c9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d003      	beq.n	8003cb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 f8c3 	bl	8003e3a <HAL_TIM_IC_CaptureCallback>
 8003cb4:	e005      	b.n	8003cc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f000 f8b6 	bl	8003e28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f000 f8c5 	bl	8003e4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	f003 0308 	and.w	r3, r3, #8
 8003cd2:	2b08      	cmp	r3, #8
 8003cd4:	d122      	bne.n	8003d1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	f003 0308 	and.w	r3, r3, #8
 8003ce0:	2b08      	cmp	r3, #8
 8003ce2:	d11b      	bne.n	8003d1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f06f 0208 	mvn.w	r2, #8
 8003cec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2204      	movs	r2, #4
 8003cf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	69db      	ldr	r3, [r3, #28]
 8003cfa:	f003 0303 	and.w	r3, r3, #3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d003      	beq.n	8003d0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 f899 	bl	8003e3a <HAL_TIM_IC_CaptureCallback>
 8003d08:	e005      	b.n	8003d16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f000 f88c 	bl	8003e28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f000 f89b 	bl	8003e4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	f003 0310 	and.w	r3, r3, #16
 8003d26:	2b10      	cmp	r3, #16
 8003d28:	d122      	bne.n	8003d70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	f003 0310 	and.w	r3, r3, #16
 8003d34:	2b10      	cmp	r3, #16
 8003d36:	d11b      	bne.n	8003d70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f06f 0210 	mvn.w	r2, #16
 8003d40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2208      	movs	r2, #8
 8003d46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	69db      	ldr	r3, [r3, #28]
 8003d4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d003      	beq.n	8003d5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 f86f 	bl	8003e3a <HAL_TIM_IC_CaptureCallback>
 8003d5c:	e005      	b.n	8003d6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 f862 	bl	8003e28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f000 f871 	bl	8003e4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	691b      	ldr	r3, [r3, #16]
 8003d76:	f003 0301 	and.w	r3, r3, #1
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d10e      	bne.n	8003d9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	f003 0301 	and.w	r3, r3, #1
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d107      	bne.n	8003d9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f06f 0201 	mvn.w	r2, #1
 8003d94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f7fc fd7c 	bl	8000894 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003da6:	2b80      	cmp	r3, #128	; 0x80
 8003da8:	d10e      	bne.n	8003dc8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003db4:	2b80      	cmp	r3, #128	; 0x80
 8003db6:	d107      	bne.n	8003dc8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003dc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 f8fb 	bl	8003fbe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dd2:	2b40      	cmp	r3, #64	; 0x40
 8003dd4:	d10e      	bne.n	8003df4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003de0:	2b40      	cmp	r3, #64	; 0x40
 8003de2:	d107      	bne.n	8003df4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003dec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 f835 	bl	8003e5e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	f003 0320 	and.w	r3, r3, #32
 8003dfe:	2b20      	cmp	r3, #32
 8003e00:	d10e      	bne.n	8003e20 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	f003 0320 	and.w	r3, r3, #32
 8003e0c:	2b20      	cmp	r3, #32
 8003e0e:	d107      	bne.n	8003e20 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f06f 0220 	mvn.w	r2, #32
 8003e18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 f8c6 	bl	8003fac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e20:	bf00      	nop
 8003e22:	3708      	adds	r7, #8
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e30:	bf00      	nop
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bc80      	pop	{r7}
 8003e38:	4770      	bx	lr

08003e3a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e3a:	b480      	push	{r7}
 8003e3c:	b083      	sub	sp, #12
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e42:	bf00      	nop
 8003e44:	370c      	adds	r7, #12
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bc80      	pop	{r7}
 8003e4a:	4770      	bx	lr

08003e4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e54:	bf00      	nop
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bc80      	pop	{r7}
 8003e5c:	4770      	bx	lr

08003e5e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e5e:	b480      	push	{r7}
 8003e60:	b083      	sub	sp, #12
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e66:	bf00      	nop
 8003e68:	370c      	adds	r7, #12
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bc80      	pop	{r7}
 8003e6e:	4770      	bx	lr

08003e70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b085      	sub	sp, #20
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a3f      	ldr	r2, [pc, #252]	; (8003f80 <TIM_Base_SetConfig+0x110>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d013      	beq.n	8003eb0 <TIM_Base_SetConfig+0x40>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e8e:	d00f      	beq.n	8003eb0 <TIM_Base_SetConfig+0x40>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4a3c      	ldr	r2, [pc, #240]	; (8003f84 <TIM_Base_SetConfig+0x114>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d00b      	beq.n	8003eb0 <TIM_Base_SetConfig+0x40>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4a3b      	ldr	r2, [pc, #236]	; (8003f88 <TIM_Base_SetConfig+0x118>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d007      	beq.n	8003eb0 <TIM_Base_SetConfig+0x40>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a3a      	ldr	r2, [pc, #232]	; (8003f8c <TIM_Base_SetConfig+0x11c>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d003      	beq.n	8003eb0 <TIM_Base_SetConfig+0x40>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4a39      	ldr	r2, [pc, #228]	; (8003f90 <TIM_Base_SetConfig+0x120>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d108      	bne.n	8003ec2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	68fa      	ldr	r2, [r7, #12]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a2e      	ldr	r2, [pc, #184]	; (8003f80 <TIM_Base_SetConfig+0x110>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d02b      	beq.n	8003f22 <TIM_Base_SetConfig+0xb2>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ed0:	d027      	beq.n	8003f22 <TIM_Base_SetConfig+0xb2>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a2b      	ldr	r2, [pc, #172]	; (8003f84 <TIM_Base_SetConfig+0x114>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d023      	beq.n	8003f22 <TIM_Base_SetConfig+0xb2>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a2a      	ldr	r2, [pc, #168]	; (8003f88 <TIM_Base_SetConfig+0x118>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d01f      	beq.n	8003f22 <TIM_Base_SetConfig+0xb2>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a29      	ldr	r2, [pc, #164]	; (8003f8c <TIM_Base_SetConfig+0x11c>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d01b      	beq.n	8003f22 <TIM_Base_SetConfig+0xb2>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a28      	ldr	r2, [pc, #160]	; (8003f90 <TIM_Base_SetConfig+0x120>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d017      	beq.n	8003f22 <TIM_Base_SetConfig+0xb2>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a27      	ldr	r2, [pc, #156]	; (8003f94 <TIM_Base_SetConfig+0x124>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d013      	beq.n	8003f22 <TIM_Base_SetConfig+0xb2>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a26      	ldr	r2, [pc, #152]	; (8003f98 <TIM_Base_SetConfig+0x128>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d00f      	beq.n	8003f22 <TIM_Base_SetConfig+0xb2>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a25      	ldr	r2, [pc, #148]	; (8003f9c <TIM_Base_SetConfig+0x12c>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d00b      	beq.n	8003f22 <TIM_Base_SetConfig+0xb2>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a24      	ldr	r2, [pc, #144]	; (8003fa0 <TIM_Base_SetConfig+0x130>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d007      	beq.n	8003f22 <TIM_Base_SetConfig+0xb2>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a23      	ldr	r2, [pc, #140]	; (8003fa4 <TIM_Base_SetConfig+0x134>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d003      	beq.n	8003f22 <TIM_Base_SetConfig+0xb2>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a22      	ldr	r2, [pc, #136]	; (8003fa8 <TIM_Base_SetConfig+0x138>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d108      	bne.n	8003f34 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	68fa      	ldr	r2, [r7, #12]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	695b      	ldr	r3, [r3, #20]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	68fa      	ldr	r2, [r7, #12]
 8003f46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	689a      	ldr	r2, [r3, #8]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	4a09      	ldr	r2, [pc, #36]	; (8003f80 <TIM_Base_SetConfig+0x110>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d003      	beq.n	8003f68 <TIM_Base_SetConfig+0xf8>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	4a0b      	ldr	r2, [pc, #44]	; (8003f90 <TIM_Base_SetConfig+0x120>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d103      	bne.n	8003f70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	691a      	ldr	r2, [r3, #16]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	615a      	str	r2, [r3, #20]
}
 8003f76:	bf00      	nop
 8003f78:	3714      	adds	r7, #20
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bc80      	pop	{r7}
 8003f7e:	4770      	bx	lr
 8003f80:	40010000 	.word	0x40010000
 8003f84:	40000400 	.word	0x40000400
 8003f88:	40000800 	.word	0x40000800
 8003f8c:	40000c00 	.word	0x40000c00
 8003f90:	40010400 	.word	0x40010400
 8003f94:	40014000 	.word	0x40014000
 8003f98:	40014400 	.word	0x40014400
 8003f9c:	40014800 	.word	0x40014800
 8003fa0:	40001800 	.word	0x40001800
 8003fa4:	40001c00 	.word	0x40001c00
 8003fa8:	40002000 	.word	0x40002000

08003fac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003fb4:	bf00      	nop
 8003fb6:	370c      	adds	r7, #12
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bc80      	pop	{r7}
 8003fbc:	4770      	bx	lr

08003fbe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	b083      	sub	sp, #12
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003fc6:	bf00      	nop
 8003fc8:	370c      	adds	r7, #12
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bc80      	pop	{r7}
 8003fce:	4770      	bx	lr

08003fd0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d101      	bne.n	8003fe2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e03f      	b.n	8004062 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d106      	bne.n	8003ffc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f7fc fd7e 	bl	8000af8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2224      	movs	r2, #36	; 0x24
 8004000:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	68da      	ldr	r2, [r3, #12]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004012:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f000 f829 	bl	800406c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	691a      	ldr	r2, [r3, #16]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004028:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	695a      	ldr	r2, [r3, #20]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004038:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68da      	ldr	r2, [r3, #12]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004048:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2220      	movs	r2, #32
 8004054:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2220      	movs	r2, #32
 800405c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004060:	2300      	movs	r3, #0
}
 8004062:	4618      	mov	r0, r3
 8004064:	3708      	adds	r7, #8
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
	...

0800406c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	68da      	ldr	r2, [r3, #12]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	430a      	orrs	r2, r1
 8004088:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	689a      	ldr	r2, [r3, #8]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	431a      	orrs	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	695b      	ldr	r3, [r3, #20]
 8004098:	431a      	orrs	r2, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	69db      	ldr	r3, [r3, #28]
 800409e:	4313      	orrs	r3, r2
 80040a0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80040ac:	f023 030c 	bic.w	r3, r3, #12
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	6812      	ldr	r2, [r2, #0]
 80040b4:	68b9      	ldr	r1, [r7, #8]
 80040b6:	430b      	orrs	r3, r1
 80040b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	695b      	ldr	r3, [r3, #20]
 80040c0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	699a      	ldr	r2, [r3, #24]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	430a      	orrs	r2, r1
 80040ce:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1) || (huart->Instance == USART6))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a57      	ldr	r2, [pc, #348]	; (8004234 <UART_SetConfig+0x1c8>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d004      	beq.n	80040e4 <UART_SetConfig+0x78>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a56      	ldr	r2, [pc, #344]	; (8004238 <UART_SetConfig+0x1cc>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d103      	bne.n	80040ec <UART_SetConfig+0x80>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80040e4:	f7fe f86e 	bl	80021c4 <HAL_RCC_GetPCLK2Freq>
 80040e8:	60f8      	str	r0, [r7, #12]
 80040ea:	e002      	b.n	80040f2 <UART_SetConfig+0x86>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80040ec:	f7fe f848 	bl	8002180 <HAL_RCC_GetPCLK1Freq>
 80040f0:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	69db      	ldr	r3, [r3, #28]
 80040f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040fa:	d14c      	bne.n	8004196 <UART_SetConfig+0x12a>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80040fc:	68fa      	ldr	r2, [r7, #12]
 80040fe:	4613      	mov	r3, r2
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	4413      	add	r3, r2
 8004104:	009a      	lsls	r2, r3, #2
 8004106:	441a      	add	r2, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	005b      	lsls	r3, r3, #1
 800410e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004112:	4a4a      	ldr	r2, [pc, #296]	; (800423c <UART_SetConfig+0x1d0>)
 8004114:	fba2 2303 	umull	r2, r3, r2, r3
 8004118:	095b      	lsrs	r3, r3, #5
 800411a:	0119      	lsls	r1, r3, #4
 800411c:	68fa      	ldr	r2, [r7, #12]
 800411e:	4613      	mov	r3, r2
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	4413      	add	r3, r2
 8004124:	009a      	lsls	r2, r3, #2
 8004126:	441a      	add	r2, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	005b      	lsls	r3, r3, #1
 800412e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004132:	4b42      	ldr	r3, [pc, #264]	; (800423c <UART_SetConfig+0x1d0>)
 8004134:	fba3 0302 	umull	r0, r3, r3, r2
 8004138:	095b      	lsrs	r3, r3, #5
 800413a:	2064      	movs	r0, #100	; 0x64
 800413c:	fb00 f303 	mul.w	r3, r0, r3
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	00db      	lsls	r3, r3, #3
 8004144:	3332      	adds	r3, #50	; 0x32
 8004146:	4a3d      	ldr	r2, [pc, #244]	; (800423c <UART_SetConfig+0x1d0>)
 8004148:	fba2 2303 	umull	r2, r3, r2, r3
 800414c:	095b      	lsrs	r3, r3, #5
 800414e:	005b      	lsls	r3, r3, #1
 8004150:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004154:	4419      	add	r1, r3
 8004156:	68fa      	ldr	r2, [r7, #12]
 8004158:	4613      	mov	r3, r2
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	4413      	add	r3, r2
 800415e:	009a      	lsls	r2, r3, #2
 8004160:	441a      	add	r2, r3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	005b      	lsls	r3, r3, #1
 8004168:	fbb2 f2f3 	udiv	r2, r2, r3
 800416c:	4b33      	ldr	r3, [pc, #204]	; (800423c <UART_SetConfig+0x1d0>)
 800416e:	fba3 0302 	umull	r0, r3, r3, r2
 8004172:	095b      	lsrs	r3, r3, #5
 8004174:	2064      	movs	r0, #100	; 0x64
 8004176:	fb00 f303 	mul.w	r3, r0, r3
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	00db      	lsls	r3, r3, #3
 800417e:	3332      	adds	r3, #50	; 0x32
 8004180:	4a2e      	ldr	r2, [pc, #184]	; (800423c <UART_SetConfig+0x1d0>)
 8004182:	fba2 2303 	umull	r2, r3, r2, r3
 8004186:	095b      	lsrs	r3, r3, #5
 8004188:	f003 0207 	and.w	r2, r3, #7
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	440a      	add	r2, r1
 8004192:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004194:	e04a      	b.n	800422c <UART_SetConfig+0x1c0>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	4613      	mov	r3, r2
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	4413      	add	r3, r2
 800419e:	009a      	lsls	r2, r3, #2
 80041a0:	441a      	add	r2, r3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ac:	4a23      	ldr	r2, [pc, #140]	; (800423c <UART_SetConfig+0x1d0>)
 80041ae:	fba2 2303 	umull	r2, r3, r2, r3
 80041b2:	095b      	lsrs	r3, r3, #5
 80041b4:	0119      	lsls	r1, r3, #4
 80041b6:	68fa      	ldr	r2, [r7, #12]
 80041b8:	4613      	mov	r3, r2
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	4413      	add	r3, r2
 80041be:	009a      	lsls	r2, r3, #2
 80041c0:	441a      	add	r2, r3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80041cc:	4b1b      	ldr	r3, [pc, #108]	; (800423c <UART_SetConfig+0x1d0>)
 80041ce:	fba3 0302 	umull	r0, r3, r3, r2
 80041d2:	095b      	lsrs	r3, r3, #5
 80041d4:	2064      	movs	r0, #100	; 0x64
 80041d6:	fb00 f303 	mul.w	r3, r0, r3
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	011b      	lsls	r3, r3, #4
 80041de:	3332      	adds	r3, #50	; 0x32
 80041e0:	4a16      	ldr	r2, [pc, #88]	; (800423c <UART_SetConfig+0x1d0>)
 80041e2:	fba2 2303 	umull	r2, r3, r2, r3
 80041e6:	095b      	lsrs	r3, r3, #5
 80041e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041ec:	4419      	add	r1, r3
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	4613      	mov	r3, r2
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	4413      	add	r3, r2
 80041f6:	009a      	lsls	r2, r3, #2
 80041f8:	441a      	add	r2, r3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	fbb2 f2f3 	udiv	r2, r2, r3
 8004204:	4b0d      	ldr	r3, [pc, #52]	; (800423c <UART_SetConfig+0x1d0>)
 8004206:	fba3 0302 	umull	r0, r3, r3, r2
 800420a:	095b      	lsrs	r3, r3, #5
 800420c:	2064      	movs	r0, #100	; 0x64
 800420e:	fb00 f303 	mul.w	r3, r0, r3
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	011b      	lsls	r3, r3, #4
 8004216:	3332      	adds	r3, #50	; 0x32
 8004218:	4a08      	ldr	r2, [pc, #32]	; (800423c <UART_SetConfig+0x1d0>)
 800421a:	fba2 2303 	umull	r2, r3, r2, r3
 800421e:	095b      	lsrs	r3, r3, #5
 8004220:	f003 020f 	and.w	r2, r3, #15
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	440a      	add	r2, r1
 800422a:	609a      	str	r2, [r3, #8]
}
 800422c:	bf00      	nop
 800422e:	3710      	adds	r7, #16
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}
 8004234:	40011000 	.word	0x40011000
 8004238:	40011400 	.word	0x40011400
 800423c:	51eb851f 	.word	0x51eb851f

08004240 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8004240:	b084      	sub	sp, #16
 8004242:	b480      	push	{r7}
 8004244:	b085      	sub	sp, #20
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
 800424a:	f107 001c 	add.w	r0, r7, #28
 800424e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8004252:	2300      	movs	r3, #0
 8004254:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8004256:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8004258:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800425a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800425c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800425e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004260:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8004262:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8004266:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800426a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800426c:	68fa      	ldr	r2, [r7, #12]
 800426e:	4313      	orrs	r3, r2
 8004270:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800427a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800427e:	68fa      	ldr	r2, [r7, #12]
 8004280:	431a      	orrs	r2, r3
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004286:	2300      	movs	r3, #0
}
 8004288:	4618      	mov	r0, r3
 800428a:	3714      	adds	r7, #20
 800428c:	46bd      	mov	sp, r7
 800428e:	bc80      	pop	{r7}
 8004290:	b004      	add	sp, #16
 8004292:	4770      	bx	lr

08004294 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	370c      	adds	r7, #12
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bc80      	pop	{r7}
 80042aa:	4770      	bx	lr

080042ac <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80042c0:	2300      	movs	r3, #0
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	370c      	adds	r7, #12
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bc80      	pop	{r7}
 80042ca:	4770      	bx	lr

080042cc <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b082      	sub	sp, #8
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2203      	movs	r2, #3
 80042d8:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80042da:	2002      	movs	r0, #2
 80042dc:	f7fc fd5a 	bl	8000d94 <HAL_Delay>
  
  return HAL_OK;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3708      	adds	r7, #8
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}

080042ea <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80042ea:	b480      	push	{r7}
 80042ec:	b083      	sub	sp, #12
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0303 	and.w	r3, r3, #3
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	370c      	adds	r7, #12
 80042fe:	46bd      	mov	sp, r7
 8004300:	bc80      	pop	{r7}
 8004302:	4770      	bx	lr

08004304 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8004304:	b480      	push	{r7}
 8004306:	b085      	sub	sp, #20
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800430e:	2300      	movs	r3, #0
 8004310:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004322:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8004328:	431a      	orrs	r2, r3
                       Command->CPSM);
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800432e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004330:	68fa      	ldr	r2, [r7, #12]
 8004332:	4313      	orrs	r3, r2
 8004334:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800433e:	f023 030f 	bic.w	r3, r3, #15
 8004342:	68fa      	ldr	r2, [r7, #12]
 8004344:	431a      	orrs	r2, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800434a:	2300      	movs	r3, #0
}
 800434c:	4618      	mov	r0, r3
 800434e:	3714      	adds	r7, #20
 8004350:	46bd      	mov	sp, r7
 8004352:	bc80      	pop	{r7}
 8004354:	4770      	bx	lr

08004356 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8004356:	b480      	push	{r7}
 8004358:	b083      	sub	sp, #12
 800435a:	af00      	add	r7, sp, #0
 800435c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	b2db      	uxtb	r3, r3
}
 8004364:	4618      	mov	r0, r3
 8004366:	370c      	adds	r7, #12
 8004368:	46bd      	mov	sp, r7
 800436a:	bc80      	pop	{r7}
 800436c:	4770      	bx	lr

0800436e <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800436e:	b480      	push	{r7}
 8004370:	b085      	sub	sp, #20
 8004372:	af00      	add	r7, sp, #0
 8004374:	6078      	str	r0, [r7, #4]
 8004376:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	3314      	adds	r3, #20
 800437c:	461a      	mov	r2, r3
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	4413      	add	r3, r2
 8004382:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
}  
 8004388:	4618      	mov	r0, r3
 800438a:	3714      	adds	r7, #20
 800438c:	46bd      	mov	sp, r7
 800438e:	bc80      	pop	{r7}
 8004390:	4770      	bx	lr

08004392 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8004392:	b480      	push	{r7}
 8004394:	b085      	sub	sp, #20
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
 800439a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800439c:	2300      	movs	r3, #0
 800439e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	685a      	ldr	r2, [r3, #4]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80043b8:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80043be:	431a      	orrs	r2, r3
                       Data->DPSM);
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80043c4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d0:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	431a      	orrs	r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80043dc:	2300      	movs	r3, #0

}
 80043de:	4618      	mov	r0, r3
 80043e0:	3714      	adds	r7, #20
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bc80      	pop	{r7}
 80043e6:	4770      	bx	lr

080043e8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b088      	sub	sp, #32
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80043f6:	2310      	movs	r3, #16
 80043f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80043fa:	2340      	movs	r3, #64	; 0x40
 80043fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80043fe:	2300      	movs	r3, #0
 8004400:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004402:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004406:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004408:	f107 0308 	add.w	r3, r7, #8
 800440c:	4619      	mov	r1, r3
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f7ff ff78 	bl	8004304 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8004414:	f241 3288 	movw	r2, #5000	; 0x1388
 8004418:	2110      	movs	r1, #16
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 fa40 	bl	80048a0 <SDMMC_GetCmdResp1>
 8004420:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004422:	69fb      	ldr	r3, [r7, #28]
}
 8004424:	4618      	mov	r0, r3
 8004426:	3720      	adds	r7, #32
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}

0800442c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b088      	sub	sp, #32
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800443a:	2311      	movs	r3, #17
 800443c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800443e:	2340      	movs	r3, #64	; 0x40
 8004440:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004442:	2300      	movs	r3, #0
 8004444:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004446:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800444a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800444c:	f107 0308 	add.w	r3, r7, #8
 8004450:	4619      	mov	r1, r3
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f7ff ff56 	bl	8004304 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004458:	f241 3288 	movw	r2, #5000	; 0x1388
 800445c:	2111      	movs	r1, #17
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 fa1e 	bl	80048a0 <SDMMC_GetCmdResp1>
 8004464:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004466:	69fb      	ldr	r3, [r7, #28]
}
 8004468:	4618      	mov	r0, r3
 800446a:	3720      	adds	r7, #32
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}

08004470 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b088      	sub	sp, #32
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800447e:	2312      	movs	r3, #18
 8004480:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004482:	2340      	movs	r3, #64	; 0x40
 8004484:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004486:	2300      	movs	r3, #0
 8004488:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800448a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800448e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004490:	f107 0308 	add.w	r3, r7, #8
 8004494:	4619      	mov	r1, r3
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f7ff ff34 	bl	8004304 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800449c:	f241 3288 	movw	r2, #5000	; 0x1388
 80044a0:	2112      	movs	r1, #18
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 f9fc 	bl	80048a0 <SDMMC_GetCmdResp1>
 80044a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80044aa:	69fb      	ldr	r3, [r7, #28]
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3720      	adds	r7, #32
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b088      	sub	sp, #32
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80044c2:	2318      	movs	r3, #24
 80044c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80044c6:	2340      	movs	r3, #64	; 0x40
 80044c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80044ca:	2300      	movs	r3, #0
 80044cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80044ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044d2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80044d4:	f107 0308 	add.w	r3, r7, #8
 80044d8:	4619      	mov	r1, r3
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f7ff ff12 	bl	8004304 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80044e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80044e4:	2118      	movs	r1, #24
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 f9da 	bl	80048a0 <SDMMC_GetCmdResp1>
 80044ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80044ee:	69fb      	ldr	r3, [r7, #28]
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3720      	adds	r7, #32
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b088      	sub	sp, #32
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8004506:	2319      	movs	r3, #25
 8004508:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800450a:	2340      	movs	r3, #64	; 0x40
 800450c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800450e:	2300      	movs	r3, #0
 8004510:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004512:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004516:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004518:	f107 0308 	add.w	r3, r7, #8
 800451c:	4619      	mov	r1, r3
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f7ff fef0 	bl	8004304 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004524:	f241 3288 	movw	r2, #5000	; 0x1388
 8004528:	2119      	movs	r1, #25
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 f9b8 	bl	80048a0 <SDMMC_GetCmdResp1>
 8004530:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004532:	69fb      	ldr	r3, [r7, #28]
}
 8004534:	4618      	mov	r0, r3
 8004536:	3720      	adds	r7, #32
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}

0800453c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b088      	sub	sp, #32
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8004544:	2300      	movs	r3, #0
 8004546:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8004548:	230c      	movs	r3, #12
 800454a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800454c:	2340      	movs	r3, #64	; 0x40
 800454e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004550:	2300      	movs	r3, #0
 8004552:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004554:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004558:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800455a:	f107 0308 	add.w	r3, r7, #8
 800455e:	4619      	mov	r1, r3
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f7ff fecf 	bl	8004304 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8004566:	4a05      	ldr	r2, [pc, #20]	; (800457c <SDMMC_CmdStopTransfer+0x40>)
 8004568:	210c      	movs	r1, #12
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f000 f998 	bl	80048a0 <SDMMC_GetCmdResp1>
 8004570:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004572:	69fb      	ldr	r3, [r7, #28]
}
 8004574:	4618      	mov	r0, r3
 8004576:	3720      	adds	r7, #32
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}
 800457c:	05f5e100 	.word	0x05f5e100

08004580 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b08a      	sub	sp, #40	; 0x28
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004590:	2307      	movs	r3, #7
 8004592:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004594:	2340      	movs	r3, #64	; 0x40
 8004596:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004598:	2300      	movs	r3, #0
 800459a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800459c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045a0:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80045a2:	f107 0310 	add.w	r3, r7, #16
 80045a6:	4619      	mov	r1, r3
 80045a8:	68f8      	ldr	r0, [r7, #12]
 80045aa:	f7ff feab 	bl	8004304 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80045ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80045b2:	2107      	movs	r1, #7
 80045b4:	68f8      	ldr	r0, [r7, #12]
 80045b6:	f000 f973 	bl	80048a0 <SDMMC_GetCmdResp1>
 80045ba:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80045bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3728      	adds	r7, #40	; 0x28
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}

080045c6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80045c6:	b580      	push	{r7, lr}
 80045c8:	b088      	sub	sp, #32
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80045ce:	2300      	movs	r3, #0
 80045d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80045d2:	2300      	movs	r3, #0
 80045d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80045d6:	2300      	movs	r3, #0
 80045d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80045da:	2300      	movs	r3, #0
 80045dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80045de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045e2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80045e4:	f107 0308 	add.w	r3, r7, #8
 80045e8:	4619      	mov	r1, r3
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f7ff fe8a 	bl	8004304 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f000 f92d 	bl	8004850 <SDMMC_GetCmdError>
 80045f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80045f8:	69fb      	ldr	r3, [r7, #28]
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3720      	adds	r7, #32
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}

08004602 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8004602:	b580      	push	{r7, lr}
 8004604:	b088      	sub	sp, #32
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800460a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800460e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004610:	2308      	movs	r3, #8
 8004612:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004614:	2340      	movs	r3, #64	; 0x40
 8004616:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004618:	2300      	movs	r3, #0
 800461a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800461c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004620:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004622:	f107 0308 	add.w	r3, r7, #8
 8004626:	4619      	mov	r1, r3
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f7ff fe6b 	bl	8004304 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 fb16 	bl	8004c60 <SDMMC_GetCmdResp7>
 8004634:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004636:	69fb      	ldr	r3, [r7, #28]
}
 8004638:	4618      	mov	r0, r3
 800463a:	3720      	adds	r7, #32
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b088      	sub	sp, #32
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800464e:	2337      	movs	r3, #55	; 0x37
 8004650:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004652:	2340      	movs	r3, #64	; 0x40
 8004654:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004656:	2300      	movs	r3, #0
 8004658:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800465a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800465e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004660:	f107 0308 	add.w	r3, r7, #8
 8004664:	4619      	mov	r1, r3
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f7ff fe4c 	bl	8004304 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800466c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004670:	2137      	movs	r1, #55	; 0x37
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 f914 	bl	80048a0 <SDMMC_GetCmdResp1>
 8004678:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800467a:	69fb      	ldr	r3, [r7, #28]
}
 800467c:	4618      	mov	r0, r3
 800467e:	3720      	adds	r7, #32
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}

08004684 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b088      	sub	sp, #32
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004698:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800469a:	2329      	movs	r3, #41	; 0x29
 800469c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800469e:	2340      	movs	r3, #64	; 0x40
 80046a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80046a2:	2300      	movs	r3, #0
 80046a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80046a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046aa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80046ac:	f107 0308 	add.w	r3, r7, #8
 80046b0:	4619      	mov	r1, r3
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f7ff fe26 	bl	8004304 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f000 fa23 	bl	8004b04 <SDMMC_GetCmdResp3>
 80046be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80046c0:	69fb      	ldr	r3, [r7, #28]
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3720      	adds	r7, #32
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}

080046ca <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80046ca:	b580      	push	{r7, lr}
 80046cc:	b088      	sub	sp, #32
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	6078      	str	r0, [r7, #4]
 80046d2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80046d8:	2306      	movs	r3, #6
 80046da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80046dc:	2340      	movs	r3, #64	; 0x40
 80046de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80046e0:	2300      	movs	r3, #0
 80046e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80046e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046e8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80046ea:	f107 0308 	add.w	r3, r7, #8
 80046ee:	4619      	mov	r1, r3
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f7ff fe07 	bl	8004304 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80046f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80046fa:	2106      	movs	r1, #6
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f000 f8cf 	bl	80048a0 <SDMMC_GetCmdResp1>
 8004702:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004704:	69fb      	ldr	r3, [r7, #28]
}
 8004706:	4618      	mov	r0, r3
 8004708:	3720      	adds	r7, #32
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}

0800470e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800470e:	b580      	push	{r7, lr}
 8004710:	b088      	sub	sp, #32
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8004716:	2300      	movs	r3, #0
 8004718:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800471a:	2333      	movs	r3, #51	; 0x33
 800471c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800471e:	2340      	movs	r3, #64	; 0x40
 8004720:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004722:	2300      	movs	r3, #0
 8004724:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004726:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800472a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800472c:	f107 0308 	add.w	r3, r7, #8
 8004730:	4619      	mov	r1, r3
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f7ff fde6 	bl	8004304 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8004738:	f241 3288 	movw	r2, #5000	; 0x1388
 800473c:	2133      	movs	r1, #51	; 0x33
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f000 f8ae 	bl	80048a0 <SDMMC_GetCmdResp1>
 8004744:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004746:	69fb      	ldr	r3, [r7, #28]
}
 8004748:	4618      	mov	r0, r3
 800474a:	3720      	adds	r7, #32
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b088      	sub	sp, #32
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8004758:	2300      	movs	r3, #0
 800475a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800475c:	2302      	movs	r3, #2
 800475e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004760:	23c0      	movs	r3, #192	; 0xc0
 8004762:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004764:	2300      	movs	r3, #0
 8004766:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004768:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800476c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800476e:	f107 0308 	add.w	r3, r7, #8
 8004772:	4619      	mov	r1, r3
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f7ff fdc5 	bl	8004304 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f000 f97c 	bl	8004a78 <SDMMC_GetCmdResp2>
 8004780:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004782:	69fb      	ldr	r3, [r7, #28]
}
 8004784:	4618      	mov	r0, r3
 8004786:	3720      	adds	r7, #32
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}

0800478c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b088      	sub	sp, #32
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800479a:	2309      	movs	r3, #9
 800479c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800479e:	23c0      	movs	r3, #192	; 0xc0
 80047a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80047a2:	2300      	movs	r3, #0
 80047a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80047a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047aa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80047ac:	f107 0308 	add.w	r3, r7, #8
 80047b0:	4619      	mov	r1, r3
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f7ff fda6 	bl	8004304 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f000 f95d 	bl	8004a78 <SDMMC_GetCmdResp2>
 80047be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80047c0:	69fb      	ldr	r3, [r7, #28]
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3720      	adds	r7, #32
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}

080047ca <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80047ca:	b580      	push	{r7, lr}
 80047cc:	b088      	sub	sp, #32
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]
 80047d2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80047d4:	2300      	movs	r3, #0
 80047d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80047d8:	2303      	movs	r3, #3
 80047da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80047dc:	2340      	movs	r3, #64	; 0x40
 80047de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80047e0:	2300      	movs	r3, #0
 80047e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80047e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047e8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80047ea:	f107 0308 	add.w	r3, r7, #8
 80047ee:	4619      	mov	r1, r3
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f7ff fd87 	bl	8004304 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80047f6:	683a      	ldr	r2, [r7, #0]
 80047f8:	2103      	movs	r1, #3
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 f9bc 	bl	8004b78 <SDMMC_GetCmdResp6>
 8004800:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004802:	69fb      	ldr	r3, [r7, #28]
}
 8004804:	4618      	mov	r0, r3
 8004806:	3720      	adds	r7, #32
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}

0800480c <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b088      	sub	sp, #32
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800481a:	230d      	movs	r3, #13
 800481c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800481e:	2340      	movs	r3, #64	; 0x40
 8004820:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004822:	2300      	movs	r3, #0
 8004824:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004826:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800482a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800482c:	f107 0308 	add.w	r3, r7, #8
 8004830:	4619      	mov	r1, r3
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f7ff fd66 	bl	8004304 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8004838:	f241 3288 	movw	r2, #5000	; 0x1388
 800483c:	210d      	movs	r1, #13
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 f82e 	bl	80048a0 <SDMMC_GetCmdResp1>
 8004844:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004846:	69fb      	ldr	r3, [r7, #28]
}
 8004848:	4618      	mov	r0, r3
 800484a:	3720      	adds	r7, #32
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}

08004850 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8004850:	b490      	push	{r4, r7}
 8004852:	b082      	sub	sp, #8
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004858:	4b0f      	ldr	r3, [pc, #60]	; (8004898 <SDMMC_GetCmdError+0x48>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a0f      	ldr	r2, [pc, #60]	; (800489c <SDMMC_GetCmdError+0x4c>)
 800485e:	fba2 2303 	umull	r2, r3, r2, r3
 8004862:	0a5b      	lsrs	r3, r3, #9
 8004864:	f241 3288 	movw	r2, #5000	; 0x1388
 8004868:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800486c:	4623      	mov	r3, r4
 800486e:	1e5c      	subs	r4, r3, #1
 8004870:	2b00      	cmp	r3, #0
 8004872:	d102      	bne.n	800487a <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004874:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004878:	e009      	b.n	800488e <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800487e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004882:	2b00      	cmp	r3, #0
 8004884:	d0f2      	beq.n	800486c <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	22c5      	movs	r2, #197	; 0xc5
 800488a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800488c:	2300      	movs	r3, #0
}
 800488e:	4618      	mov	r0, r3
 8004890:	3708      	adds	r7, #8
 8004892:	46bd      	mov	sp, r7
 8004894:	bc90      	pop	{r4, r7}
 8004896:	4770      	bx	lr
 8004898:	20000000 	.word	0x20000000
 800489c:	10624dd3 	.word	0x10624dd3

080048a0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80048a0:	b590      	push	{r4, r7, lr}
 80048a2:	b087      	sub	sp, #28
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	460b      	mov	r3, r1
 80048aa:	607a      	str	r2, [r7, #4]
 80048ac:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80048ae:	4b6f      	ldr	r3, [pc, #444]	; (8004a6c <SDMMC_GetCmdResp1+0x1cc>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a6f      	ldr	r2, [pc, #444]	; (8004a70 <SDMMC_GetCmdResp1+0x1d0>)
 80048b4:	fba2 2303 	umull	r2, r3, r2, r3
 80048b8:	0a5b      	lsrs	r3, r3, #9
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80048c0:	4623      	mov	r3, r4
 80048c2:	1e5c      	subs	r4, r3, #1
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d102      	bne.n	80048ce <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80048c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80048cc:	e0c9      	b.n	8004a62 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048d2:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d0f0      	beq.n	80048c0 <SDMMC_GetCmdResp1+0x20>
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d1eb      	bne.n	80048c0 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048ec:	f003 0304 	and.w	r3, r3, #4
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d004      	beq.n	80048fe <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2204      	movs	r2, #4
 80048f8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80048fa:	2304      	movs	r3, #4
 80048fc:	e0b1      	b.n	8004a62 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004902:	f003 0301 	and.w	r3, r3, #1
 8004906:	2b00      	cmp	r3, #0
 8004908:	d004      	beq.n	8004914 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2201      	movs	r2, #1
 800490e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004910:	2301      	movs	r3, #1
 8004912:	e0a6      	b.n	8004a62 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	22c5      	movs	r2, #197	; 0xc5
 8004918:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800491a:	68f8      	ldr	r0, [r7, #12]
 800491c:	f7ff fd1b 	bl	8004356 <SDIO_GetCommandResponse>
 8004920:	4603      	mov	r3, r0
 8004922:	461a      	mov	r2, r3
 8004924:	7afb      	ldrb	r3, [r7, #11]
 8004926:	4293      	cmp	r3, r2
 8004928:	d001      	beq.n	800492e <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800492a:	2301      	movs	r3, #1
 800492c:	e099      	b.n	8004a62 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800492e:	2100      	movs	r1, #0
 8004930:	68f8      	ldr	r0, [r7, #12]
 8004932:	f7ff fd1c 	bl	800436e <SDIO_GetResponse>
 8004936:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004938:	693a      	ldr	r2, [r7, #16]
 800493a:	4b4e      	ldr	r3, [pc, #312]	; (8004a74 <SDMMC_GetCmdResp1+0x1d4>)
 800493c:	4013      	ands	r3, r2
 800493e:	2b00      	cmp	r3, #0
 8004940:	d101      	bne.n	8004946 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8004942:	2300      	movs	r3, #0
 8004944:	e08d      	b.n	8004a62 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	2b00      	cmp	r3, #0
 800494a:	da02      	bge.n	8004952 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800494c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004950:	e087      	b.n	8004a62 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004958:	2b00      	cmp	r3, #0
 800495a:	d001      	beq.n	8004960 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800495c:	2340      	movs	r3, #64	; 0x40
 800495e:	e080      	b.n	8004a62 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d001      	beq.n	800496e <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800496a:	2380      	movs	r3, #128	; 0x80
 800496c:	e079      	b.n	8004a62 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004974:	2b00      	cmp	r3, #0
 8004976:	d002      	beq.n	800497e <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004978:	f44f 7380 	mov.w	r3, #256	; 0x100
 800497c:	e071      	b.n	8004a62 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004984:	2b00      	cmp	r3, #0
 8004986:	d002      	beq.n	800498e <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004988:	f44f 7300 	mov.w	r3, #512	; 0x200
 800498c:	e069      	b.n	8004a62 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004994:	2b00      	cmp	r3, #0
 8004996:	d002      	beq.n	800499e <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004998:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800499c:	e061      	b.n	8004a62 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d002      	beq.n	80049ae <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80049a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80049ac:	e059      	b.n	8004a62 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d002      	beq.n	80049be <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80049b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80049bc:	e051      	b.n	8004a62 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d002      	beq.n	80049ce <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80049c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80049cc:	e049      	b.n	8004a62 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d002      	beq.n	80049de <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80049d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80049dc:	e041      	b.n	8004a62 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d002      	beq.n	80049ee <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 80049e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049ec:	e039      	b.n	8004a62 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d002      	beq.n	80049fe <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80049f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80049fc:	e031      	b.n	8004a62 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d002      	beq.n	8004a0e <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8004a08:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004a0c:	e029      	b.n	8004a62 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d002      	beq.n	8004a1e <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8004a18:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004a1c:	e021      	b.n	8004a62 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d002      	beq.n	8004a2e <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8004a28:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004a2c:	e019      	b.n	8004a62 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d002      	beq.n	8004a3e <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004a38:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004a3c:	e011      	b.n	8004a62 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d002      	beq.n	8004a4e <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8004a48:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004a4c:	e009      	b.n	8004a62 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	f003 0308 	and.w	r3, r3, #8
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d002      	beq.n	8004a5e <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8004a58:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004a5c:	e001      	b.n	8004a62 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004a5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	371c      	adds	r7, #28
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd90      	pop	{r4, r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	20000000 	.word	0x20000000
 8004a70:	10624dd3 	.word	0x10624dd3
 8004a74:	fdffe008 	.word	0xfdffe008

08004a78 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8004a78:	b490      	push	{r4, r7}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004a80:	4b1e      	ldr	r3, [pc, #120]	; (8004afc <SDMMC_GetCmdResp2+0x84>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a1e      	ldr	r2, [pc, #120]	; (8004b00 <SDMMC_GetCmdResp2+0x88>)
 8004a86:	fba2 2303 	umull	r2, r3, r2, r3
 8004a8a:	0a5b      	lsrs	r3, r3, #9
 8004a8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a90:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004a94:	4623      	mov	r3, r4
 8004a96:	1e5c      	subs	r4, r3, #1
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d102      	bne.n	8004aa2 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004a9c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004aa0:	e026      	b.n	8004af0 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aa6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d0f0      	beq.n	8004a94 <SDMMC_GetCmdResp2+0x1c>
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d1eb      	bne.n	8004a94 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ac0:	f003 0304 	and.w	r3, r3, #4
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d004      	beq.n	8004ad2 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2204      	movs	r2, #4
 8004acc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004ace:	2304      	movs	r3, #4
 8004ad0:	e00e      	b.n	8004af0 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ad6:	f003 0301 	and.w	r3, r3, #1
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d004      	beq.n	8004ae8 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e003      	b.n	8004af0 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	22c5      	movs	r2, #197	; 0xc5
 8004aec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3710      	adds	r7, #16
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bc90      	pop	{r4, r7}
 8004af8:	4770      	bx	lr
 8004afa:	bf00      	nop
 8004afc:	20000000 	.word	0x20000000
 8004b00:	10624dd3 	.word	0x10624dd3

08004b04 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8004b04:	b490      	push	{r4, r7}
 8004b06:	b084      	sub	sp, #16
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004b0c:	4b18      	ldr	r3, [pc, #96]	; (8004b70 <SDMMC_GetCmdResp3+0x6c>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a18      	ldr	r2, [pc, #96]	; (8004b74 <SDMMC_GetCmdResp3+0x70>)
 8004b12:	fba2 2303 	umull	r2, r3, r2, r3
 8004b16:	0a5b      	lsrs	r3, r3, #9
 8004b18:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b1c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004b20:	4623      	mov	r3, r4
 8004b22:	1e5c      	subs	r4, r3, #1
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d102      	bne.n	8004b2e <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004b28:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004b2c:	e01b      	b.n	8004b66 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b32:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d0f0      	beq.n	8004b20 <SDMMC_GetCmdResp3+0x1c>
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d1eb      	bne.n	8004b20 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b4c:	f003 0304 	and.w	r3, r3, #4
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d004      	beq.n	8004b5e <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2204      	movs	r2, #4
 8004b58:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004b5a:	2304      	movs	r3, #4
 8004b5c:	e003      	b.n	8004b66 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	22c5      	movs	r2, #197	; 0xc5
 8004b62:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004b64:	2300      	movs	r3, #0
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3710      	adds	r7, #16
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bc90      	pop	{r4, r7}
 8004b6e:	4770      	bx	lr
 8004b70:	20000000 	.word	0x20000000
 8004b74:	10624dd3 	.word	0x10624dd3

08004b78 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8004b78:	b590      	push	{r4, r7, lr}
 8004b7a:	b087      	sub	sp, #28
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	460b      	mov	r3, r1
 8004b82:	607a      	str	r2, [r7, #4]
 8004b84:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004b86:	4b34      	ldr	r3, [pc, #208]	; (8004c58 <SDMMC_GetCmdResp6+0xe0>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a34      	ldr	r2, [pc, #208]	; (8004c5c <SDMMC_GetCmdResp6+0xe4>)
 8004b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b90:	0a5b      	lsrs	r3, r3, #9
 8004b92:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b96:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004b9a:	4623      	mov	r3, r4
 8004b9c:	1e5c      	subs	r4, r3, #1
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d102      	bne.n	8004ba8 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004ba2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004ba6:	e052      	b.n	8004c4e <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bac:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d0f0      	beq.n	8004b9a <SDMMC_GetCmdResp6+0x22>
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d1eb      	bne.n	8004b9a <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bc6:	f003 0304 	and.w	r3, r3, #4
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d004      	beq.n	8004bd8 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2204      	movs	r2, #4
 8004bd2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004bd4:	2304      	movs	r3, #4
 8004bd6:	e03a      	b.n	8004c4e <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bdc:	f003 0301 	and.w	r3, r3, #1
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d004      	beq.n	8004bee <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2201      	movs	r2, #1
 8004be8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e02f      	b.n	8004c4e <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004bee:	68f8      	ldr	r0, [r7, #12]
 8004bf0:	f7ff fbb1 	bl	8004356 <SDIO_GetCommandResponse>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	7afb      	ldrb	r3, [r7, #11]
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d001      	beq.n	8004c02 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e025      	b.n	8004c4e <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	22c5      	movs	r2, #197	; 0xc5
 8004c06:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004c08:	2100      	movs	r1, #0
 8004c0a:	68f8      	ldr	r0, [r7, #12]
 8004c0c:	f7ff fbaf 	bl	800436e <SDIO_GetResponse>
 8004c10:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d106      	bne.n	8004c2a <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	0c1b      	lsrs	r3, r3, #16
 8004c20:	b29a      	uxth	r2, r3
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8004c26:	2300      	movs	r3, #0
 8004c28:	e011      	b.n	8004c4e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d002      	beq.n	8004c3a <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004c34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004c38:	e009      	b.n	8004c4e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d002      	beq.n	8004c4a <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004c44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c48:	e001      	b.n	8004c4e <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004c4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	371c      	adds	r7, #28
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd90      	pop	{r4, r7, pc}
 8004c56:	bf00      	nop
 8004c58:	20000000 	.word	0x20000000
 8004c5c:	10624dd3 	.word	0x10624dd3

08004c60 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8004c60:	b490      	push	{r4, r7}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004c68:	4b21      	ldr	r3, [pc, #132]	; (8004cf0 <SDMMC_GetCmdResp7+0x90>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a21      	ldr	r2, [pc, #132]	; (8004cf4 <SDMMC_GetCmdResp7+0x94>)
 8004c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c72:	0a5b      	lsrs	r3, r3, #9
 8004c74:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c78:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004c7c:	4623      	mov	r3, r4
 8004c7e:	1e5c      	subs	r4, r3, #1
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d102      	bne.n	8004c8a <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004c84:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004c88:	e02c      	b.n	8004ce4 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c8e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d0f0      	beq.n	8004c7c <SDMMC_GetCmdResp7+0x1c>
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d1eb      	bne.n	8004c7c <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ca8:	f003 0304 	and.w	r3, r3, #4
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d004      	beq.n	8004cba <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2204      	movs	r2, #4
 8004cb4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004cb6:	2304      	movs	r3, #4
 8004cb8:	e014      	b.n	8004ce4 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cbe:	f003 0301 	and.w	r3, r3, #1
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d004      	beq.n	8004cd0 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e009      	b.n	8004ce4 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d002      	beq.n	8004ce2 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2240      	movs	r2, #64	; 0x40
 8004ce0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004ce2:	2300      	movs	r3, #0
  
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3710      	adds	r7, #16
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bc90      	pop	{r4, r7}
 8004cec:	4770      	bx	lr
 8004cee:	bf00      	nop
 8004cf0:	20000000 	.word	0x20000000
 8004cf4:	10624dd3 	.word	0x10624dd3

08004cf8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8004cfc:	4904      	ldr	r1, [pc, #16]	; (8004d10 <MX_FATFS_Init+0x18>)
 8004cfe:	4805      	ldr	r0, [pc, #20]	; (8004d14 <MX_FATFS_Init+0x1c>)
 8004d00:	f000 f92e 	bl	8004f60 <FATFS_LinkDriver>
 8004d04:	4603      	mov	r3, r0
 8004d06:	461a      	mov	r2, r3
 8004d08:	4b03      	ldr	r3, [pc, #12]	; (8004d18 <MX_FATFS_Init+0x20>)
 8004d0a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004d0c:	bf00      	nop
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	200069cc 	.word	0x200069cc
 8004d14:	08007df8 	.word	0x08007df8
 8004d18:	20008b6c 	.word	0x20008b6c

08004d1c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8004d22:	2300      	movs	r3, #0
 8004d24:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8004d26:	f000 f8a9 	bl	8004e7c <BSP_SD_IsDetected>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d001      	beq.n	8004d34 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	e012      	b.n	8004d5a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8004d34:	480b      	ldr	r0, [pc, #44]	; (8004d64 <BSP_SD_Init+0x48>)
 8004d36:	f7fd fa97 	bl	8002268 <HAL_SD_Init>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8004d3e:	79fb      	ldrb	r3, [r7, #7]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d109      	bne.n	8004d58 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8004d44:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004d48:	4806      	ldr	r0, [pc, #24]	; (8004d64 <BSP_SD_Init+0x48>)
 8004d4a:	f7fe fa0b 	bl	8003164 <HAL_SD_ConfigWideBusOperation>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d001      	beq.n	8004d58 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8004d58:	79fb      	ldrb	r3, [r7, #7]
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3708      	adds	r7, #8
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop
 8004d64:	20007a68 	.word	0x20007a68

08004d68 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b088      	sub	sp, #32
 8004d6c:	af02      	add	r7, sp, #8
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	60b9      	str	r1, [r7, #8]
 8004d72:	607a      	str	r2, [r7, #4]
 8004d74:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8004d76:	2300      	movs	r3, #0
 8004d78:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	9300      	str	r3, [sp, #0]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	68ba      	ldr	r2, [r7, #8]
 8004d82:	68f9      	ldr	r1, [r7, #12]
 8004d84:	4806      	ldr	r0, [pc, #24]	; (8004da0 <BSP_SD_ReadBlocks+0x38>)
 8004d86:	f7fd faff 	bl	8002388 <HAL_SD_ReadBlocks>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d001      	beq.n	8004d94 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8004d94:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3718      	adds	r7, #24
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	20007a68 	.word	0x20007a68

08004da4 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b088      	sub	sp, #32
 8004da8:	af02      	add	r7, sp, #8
 8004daa:	60f8      	str	r0, [r7, #12]
 8004dac:	60b9      	str	r1, [r7, #8]
 8004dae:	607a      	str	r2, [r7, #4]
 8004db0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8004db2:	2300      	movs	r3, #0
 8004db4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	9300      	str	r3, [sp, #0]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	68ba      	ldr	r2, [r7, #8]
 8004dbe:	68f9      	ldr	r1, [r7, #12]
 8004dc0:	4806      	ldr	r0, [pc, #24]	; (8004ddc <BSP_SD_WriteBlocks+0x38>)
 8004dc2:	f7fd fcdb 	bl	800277c <HAL_SD_WriteBlocks>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d001      	beq.n	8004dd0 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8004dd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3718      	adds	r7, #24
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	bf00      	nop
 8004ddc:	20007a68 	.word	0x20007a68

08004de0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8004de4:	4805      	ldr	r0, [pc, #20]	; (8004dfc <BSP_SD_GetCardState+0x1c>)
 8004de6:	f7fe fa39 	bl	800325c <HAL_SD_GetCardState>
 8004dea:	4603      	mov	r3, r0
 8004dec:	2b04      	cmp	r3, #4
 8004dee:	bf14      	ite	ne
 8004df0:	2301      	movne	r3, #1
 8004df2:	2300      	moveq	r3, #0
 8004df4:	b2db      	uxtb	r3, r3
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	20007a68 	.word	0x20007a68

08004e00 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b082      	sub	sp, #8
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8004e08:	6879      	ldr	r1, [r7, #4]
 8004e0a:	4803      	ldr	r0, [pc, #12]	; (8004e18 <BSP_SD_GetCardInfo+0x18>)
 8004e0c:	f7fe f97e 	bl	800310c <HAL_SD_GetCardInfo>
}
 8004e10:	bf00      	nop
 8004e12:	3708      	adds	r7, #8
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}
 8004e18:	20007a68 	.word	0x20007a68

08004e1c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b082      	sub	sp, #8
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8004e24:	f000 f818 	bl	8004e58 <BSP_SD_AbortCallback>
}
 8004e28:	bf00      	nop
 8004e2a:	3708      	adds	r7, #8
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}

08004e30 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b082      	sub	sp, #8
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8004e38:	f000 f814 	bl	8004e64 <BSP_SD_WriteCpltCallback>
}
 8004e3c:	bf00      	nop
 8004e3e:	3708      	adds	r7, #8
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b082      	sub	sp, #8
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8004e4c:	f000 f810 	bl	8004e70 <BSP_SD_ReadCpltCallback>
}
 8004e50:	bf00      	nop
 8004e52:	3708      	adds	r7, #8
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}

08004e58 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	af00      	add	r7, sp, #0

}
 8004e5c:	bf00      	nop
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bc80      	pop	{r7}
 8004e62:	4770      	bx	lr

08004e64 <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 8004e64:	b480      	push	{r7}
 8004e66:	af00      	add	r7, sp, #0

}
 8004e68:	bf00      	nop
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bc80      	pop	{r7}
 8004e6e:	4770      	bx	lr

08004e70 <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 8004e70:	b480      	push	{r7}
 8004e72:	af00      	add	r7, sp, #0

}
 8004e74:	bf00      	nop
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bc80      	pop	{r7}
 8004e7a:	4770      	bx	lr

08004e7c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8004e82:	2301      	movs	r3, #1
 8004e84:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8004e86:	f000 f80b 	bl	8004ea0 <BSP_PlatformIsDetected>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d101      	bne.n	8004e94 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8004e90:	2300      	movs	r3, #0
 8004e92:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8004e94:	79fb      	ldrb	r3, [r7, #7]
 8004e96:	b2db      	uxtb	r3, r3
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3708      	adds	r7, #8
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b082      	sub	sp, #8
 8004ea4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8004eaa:	2104      	movs	r1, #4
 8004eac:	4806      	ldr	r0, [pc, #24]	; (8004ec8 <BSP_PlatformIsDetected+0x28>)
 8004eae:	f7fc fd19 	bl	80018e4 <HAL_GPIO_ReadPin>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d001      	beq.n	8004ebc <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8004ebc:	79fb      	ldrb	r3, [r7, #7]
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3708      	adds	r7, #8
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	40021800 	.word	0x40021800

08004ecc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b087      	sub	sp, #28
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8004eda:	2301      	movs	r3, #1
 8004edc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8004ee2:	4b1e      	ldr	r3, [pc, #120]	; (8004f5c <FATFS_LinkDriverEx+0x90>)
 8004ee4:	7a5b      	ldrb	r3, [r3, #9]
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d831      	bhi.n	8004f50 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8004eec:	4b1b      	ldr	r3, [pc, #108]	; (8004f5c <FATFS_LinkDriverEx+0x90>)
 8004eee:	7a5b      	ldrb	r3, [r3, #9]
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	4b19      	ldr	r3, [pc, #100]	; (8004f5c <FATFS_LinkDriverEx+0x90>)
 8004ef6:	2100      	movs	r1, #0
 8004ef8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8004efa:	4b18      	ldr	r3, [pc, #96]	; (8004f5c <FATFS_LinkDriverEx+0x90>)
 8004efc:	7a5b      	ldrb	r3, [r3, #9]
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	4a16      	ldr	r2, [pc, #88]	; (8004f5c <FATFS_LinkDriverEx+0x90>)
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	4413      	add	r3, r2
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8004f0a:	4b14      	ldr	r3, [pc, #80]	; (8004f5c <FATFS_LinkDriverEx+0x90>)
 8004f0c:	7a5b      	ldrb	r3, [r3, #9]
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	461a      	mov	r2, r3
 8004f12:	4b12      	ldr	r3, [pc, #72]	; (8004f5c <FATFS_LinkDriverEx+0x90>)
 8004f14:	4413      	add	r3, r2
 8004f16:	79fa      	ldrb	r2, [r7, #7]
 8004f18:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8004f1a:	4b10      	ldr	r3, [pc, #64]	; (8004f5c <FATFS_LinkDriverEx+0x90>)
 8004f1c:	7a5b      	ldrb	r3, [r3, #9]
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	1c5a      	adds	r2, r3, #1
 8004f22:	b2d1      	uxtb	r1, r2
 8004f24:	4a0d      	ldr	r2, [pc, #52]	; (8004f5c <FATFS_LinkDriverEx+0x90>)
 8004f26:	7251      	strb	r1, [r2, #9]
 8004f28:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8004f2a:	7dbb      	ldrb	r3, [r7, #22]
 8004f2c:	3330      	adds	r3, #48	; 0x30
 8004f2e:	b2da      	uxtb	r2, r3
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	3301      	adds	r3, #1
 8004f38:	223a      	movs	r2, #58	; 0x3a
 8004f3a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	3302      	adds	r3, #2
 8004f40:	222f      	movs	r2, #47	; 0x2f
 8004f42:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	3303      	adds	r3, #3
 8004f48:	2200      	movs	r2, #0
 8004f4a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8004f50:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	371c      	adds	r7, #28
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bc80      	pop	{r7}
 8004f5a:	4770      	bx	lr
 8004f5c:	2000002c 	.word	0x2000002c

08004f60 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b082      	sub	sp, #8
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	6839      	ldr	r1, [r7, #0]
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f7ff ffac 	bl	8004ecc <FATFS_LinkDriverEx>
 8004f74:	4603      	mov	r3, r0
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3708      	adds	r7, #8
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
	...

08004f80 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b082      	sub	sp, #8
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	4603      	mov	r3, r0
 8004f88:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8004f8a:	4b0b      	ldr	r3, [pc, #44]	; (8004fb8 <SD_initialize+0x38>)
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	701a      	strb	r2, [r3, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 8004f90:	f7ff fec4 	bl	8004d1c <BSP_SD_Init>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d107      	bne.n	8004faa <SD_initialize+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8004f9a:	4b07      	ldr	r3, [pc, #28]	; (8004fb8 <SD_initialize+0x38>)
 8004f9c:	781b      	ldrb	r3, [r3, #0]
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	f023 0301 	bic.w	r3, r3, #1
 8004fa4:	b2da      	uxtb	r2, r3
 8004fa6:	4b04      	ldr	r3, [pc, #16]	; (8004fb8 <SD_initialize+0x38>)
 8004fa8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8004faa:	4b03      	ldr	r3, [pc, #12]	; (8004fb8 <SD_initialize+0x38>)
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	b2db      	uxtb	r3, r3
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3708      	adds	r7, #8
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	20000009 	.word	0x20000009

08004fbc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b082      	sub	sp, #8
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8004fc6:	4b0b      	ldr	r3, [pc, #44]	; (8004ff4 <SD_status+0x38>)
 8004fc8:	2201      	movs	r2, #1
 8004fca:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8004fcc:	f7ff ff08 	bl	8004de0 <BSP_SD_GetCardState>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d107      	bne.n	8004fe6 <SD_status+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8004fd6:	4b07      	ldr	r3, [pc, #28]	; (8004ff4 <SD_status+0x38>)
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	b2db      	uxtb	r3, r3
 8004fdc:	f023 0301 	bic.w	r3, r3, #1
 8004fe0:	b2da      	uxtb	r2, r3
 8004fe2:	4b04      	ldr	r3, [pc, #16]	; (8004ff4 <SD_status+0x38>)
 8004fe4:	701a      	strb	r2, [r3, #0]
  }
  
  return Stat;
 8004fe6:	4b03      	ldr	r3, [pc, #12]	; (8004ff4 <SD_status+0x38>)
 8004fe8:	781b      	ldrb	r3, [r3, #0]
 8004fea:	b2db      	uxtb	r3, r3
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3708      	adds	r7, #8
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	20000009 	.word	0x20000009

08004ff8 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b086      	sub	sp, #24
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	60b9      	str	r1, [r7, #8]
 8005000:	607a      	str	r2, [r7, #4]
 8005002:	603b      	str	r3, [r7, #0]
 8005004:	4603      	mov	r3, r0
 8005006:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 800500c:	4b0f      	ldr	r3, [pc, #60]	; (800504c <SD_read+0x54>)
 800500e:	613b      	str	r3, [r7, #16]

  if(BSP_SD_ReadBlocks((uint32_t*)buff, 
 8005010:	4b0f      	ldr	r3, [pc, #60]	; (8005050 <SD_read+0x58>)
 8005012:	683a      	ldr	r2, [r7, #0]
 8005014:	6879      	ldr	r1, [r7, #4]
 8005016:	68b8      	ldr	r0, [r7, #8]
 8005018:	f7ff fea6 	bl	8004d68 <BSP_SD_ReadBlocks>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d10e      	bne.n	8005040 <SD_read+0x48>
                       (uint32_t) (sector), 
                       count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 8005022:	e006      	b.n	8005032 <SD_read+0x3a>
    {
      if (timeout-- == 0)
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	1e5a      	subs	r2, r3, #1
 8005028:	613a      	str	r2, [r7, #16]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d101      	bne.n	8005032 <SD_read+0x3a>
      {
        return RES_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e007      	b.n	8005042 <SD_read+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 8005032:	f7ff fed5 	bl	8004de0 <BSP_SD_GetCardState>
 8005036:	4603      	mov	r3, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	d1f3      	bne.n	8005024 <SD_read+0x2c>
      }
    }
    res = RES_OK;
 800503c:	2300      	movs	r3, #0
 800503e:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 8005040:	7dfb      	ldrb	r3, [r7, #23]
}
 8005042:	4618      	mov	r0, r3
 8005044:	3718      	adds	r7, #24
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop
 800504c:	000186a0 	.word	0x000186a0
 8005050:	05f5e100 	.word	0x05f5e100

08005054 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b086      	sub	sp, #24
 8005058:	af00      	add	r7, sp, #0
 800505a:	60b9      	str	r1, [r7, #8]
 800505c:	607a      	str	r2, [r7, #4]
 800505e:	603b      	str	r3, [r7, #0]
 8005060:	4603      	mov	r3, r0
 8005062:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 8005068:	4b0f      	ldr	r3, [pc, #60]	; (80050a8 <SD_write+0x54>)
 800506a:	613b      	str	r3, [r7, #16]

  if(BSP_SD_WriteBlocks((uint32_t*)buff, 
 800506c:	4b0f      	ldr	r3, [pc, #60]	; (80050ac <SD_write+0x58>)
 800506e:	683a      	ldr	r2, [r7, #0]
 8005070:	6879      	ldr	r1, [r7, #4]
 8005072:	68b8      	ldr	r0, [r7, #8]
 8005074:	f7ff fe96 	bl	8004da4 <BSP_SD_WriteBlocks>
 8005078:	4603      	mov	r3, r0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d10e      	bne.n	800509c <SD_write+0x48>
                        (uint32_t)(sector), 
                        count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 800507e:	e006      	b.n	800508e <SD_write+0x3a>
    {
      if (timeout-- == 0)
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	1e5a      	subs	r2, r3, #1
 8005084:	613a      	str	r2, [r7, #16]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d101      	bne.n	800508e <SD_write+0x3a>
      {
        return RES_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e007      	b.n	800509e <SD_write+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 800508e:	f7ff fea7 	bl	8004de0 <BSP_SD_GetCardState>
 8005092:	4603      	mov	r3, r0
 8005094:	2b00      	cmp	r3, #0
 8005096:	d1f3      	bne.n	8005080 <SD_write+0x2c>
      }
    }    
    res = RES_OK;
 8005098:	2300      	movs	r3, #0
 800509a:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 800509c:	7dfb      	ldrb	r3, [r7, #23]
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3718      	adds	r7, #24
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	000186a0 	.word	0x000186a0
 80050ac:	05f5e100 	.word	0x05f5e100

080050b0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b08c      	sub	sp, #48	; 0x30
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	4603      	mov	r3, r0
 80050b8:	603a      	str	r2, [r7, #0]
 80050ba:	71fb      	strb	r3, [r7, #7]
 80050bc:	460b      	mov	r3, r1
 80050be:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80050c6:	4b24      	ldr	r3, [pc, #144]	; (8005158 <SD_ioctl+0xa8>)
 80050c8:	781b      	ldrb	r3, [r3, #0]
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	f003 0301 	and.w	r3, r3, #1
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d001      	beq.n	80050d8 <SD_ioctl+0x28>
 80050d4:	2303      	movs	r3, #3
 80050d6:	e03b      	b.n	8005150 <SD_ioctl+0xa0>
  
  switch (cmd)
 80050d8:	79bb      	ldrb	r3, [r7, #6]
 80050da:	2b03      	cmp	r3, #3
 80050dc:	d833      	bhi.n	8005146 <SD_ioctl+0x96>
 80050de:	a201      	add	r2, pc, #4	; (adr r2, 80050e4 <SD_ioctl+0x34>)
 80050e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050e4:	080050f5 	.word	0x080050f5
 80050e8:	080050fd 	.word	0x080050fd
 80050ec:	08005115 	.word	0x08005115
 80050f0:	0800512f 	.word	0x0800512f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80050f4:	2300      	movs	r3, #0
 80050f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80050fa:	e027      	b.n	800514c <SD_ioctl+0x9c>
  
  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80050fc:	f107 030c 	add.w	r3, r7, #12
 8005100:	4618      	mov	r0, r3
 8005102:	f7ff fe7d 	bl	8004e00 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8005106:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800510c:	2300      	movs	r3, #0
 800510e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005112:	e01b      	b.n	800514c <SD_ioctl+0x9c>
  
  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005114:	f107 030c 	add.w	r3, r7, #12
 8005118:	4618      	mov	r0, r3
 800511a:	f7ff fe71 	bl	8004e00 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800511e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005120:	b29a      	uxth	r2, r3
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8005126:	2300      	movs	r3, #0
 8005128:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800512c:	e00e      	b.n	800514c <SD_ioctl+0x9c>
  
  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800512e:	f107 030c 	add.w	r3, r7, #12
 8005132:	4618      	mov	r0, r3
 8005134:	f7ff fe64 	bl	8004e00 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize;
 8005138:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800513e:	2300      	movs	r3, #0
 8005140:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005144:	e002      	b.n	800514c <SD_ioctl+0x9c>
  
  default:
    res = RES_PARERR;
 8005146:	2304      	movs	r3, #4
 8005148:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }
  
  return res;
 800514c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005150:	4618      	mov	r0, r3
 8005152:	3730      	adds	r7, #48	; 0x30
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}
 8005158:	20000009 	.word	0x20000009

0800515c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800515c:	b480      	push	{r7}
 800515e:	b085      	sub	sp, #20
 8005160:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005162:	f3ef 8305 	mrs	r3, IPSR
 8005166:	60bb      	str	r3, [r7, #8]
  return(result);
 8005168:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800516a:	2b00      	cmp	r3, #0
 800516c:	d10f      	bne.n	800518e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800516e:	f3ef 8310 	mrs	r3, PRIMASK
 8005172:	607b      	str	r3, [r7, #4]
  return(result);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d109      	bne.n	800518e <osKernelInitialize+0x32>
 800517a:	4b10      	ldr	r3, [pc, #64]	; (80051bc <osKernelInitialize+0x60>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	2b02      	cmp	r3, #2
 8005180:	d109      	bne.n	8005196 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005182:	f3ef 8311 	mrs	r3, BASEPRI
 8005186:	603b      	str	r3, [r7, #0]
  return(result);
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d003      	beq.n	8005196 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800518e:	f06f 0305 	mvn.w	r3, #5
 8005192:	60fb      	str	r3, [r7, #12]
 8005194:	e00c      	b.n	80051b0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005196:	4b09      	ldr	r3, [pc, #36]	; (80051bc <osKernelInitialize+0x60>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d105      	bne.n	80051aa <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800519e:	4b07      	ldr	r3, [pc, #28]	; (80051bc <osKernelInitialize+0x60>)
 80051a0:	2201      	movs	r2, #1
 80051a2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80051a4:	2300      	movs	r3, #0
 80051a6:	60fb      	str	r3, [r7, #12]
 80051a8:	e002      	b.n	80051b0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80051aa:	f04f 33ff 	mov.w	r3, #4294967295
 80051ae:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80051b0:	68fb      	ldr	r3, [r7, #12]
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3714      	adds	r7, #20
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bc80      	pop	{r7}
 80051ba:	4770      	bx	lr
 80051bc:	20000038 	.word	0x20000038

080051c0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b084      	sub	sp, #16
 80051c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051c6:	f3ef 8305 	mrs	r3, IPSR
 80051ca:	60bb      	str	r3, [r7, #8]
  return(result);
 80051cc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d10f      	bne.n	80051f2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051d2:	f3ef 8310 	mrs	r3, PRIMASK
 80051d6:	607b      	str	r3, [r7, #4]
  return(result);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d109      	bne.n	80051f2 <osKernelStart+0x32>
 80051de:	4b11      	ldr	r3, [pc, #68]	; (8005224 <osKernelStart+0x64>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	2b02      	cmp	r3, #2
 80051e4:	d109      	bne.n	80051fa <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80051e6:	f3ef 8311 	mrs	r3, BASEPRI
 80051ea:	603b      	str	r3, [r7, #0]
  return(result);
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d003      	beq.n	80051fa <osKernelStart+0x3a>
    stat = osErrorISR;
 80051f2:	f06f 0305 	mvn.w	r3, #5
 80051f6:	60fb      	str	r3, [r7, #12]
 80051f8:	e00e      	b.n	8005218 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80051fa:	4b0a      	ldr	r3, [pc, #40]	; (8005224 <osKernelStart+0x64>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d107      	bne.n	8005212 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8005202:	4b08      	ldr	r3, [pc, #32]	; (8005224 <osKernelStart+0x64>)
 8005204:	2202      	movs	r2, #2
 8005206:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8005208:	f001 f980 	bl	800650c <vTaskStartScheduler>
      stat = osOK;
 800520c:	2300      	movs	r3, #0
 800520e:	60fb      	str	r3, [r7, #12]
 8005210:	e002      	b.n	8005218 <osKernelStart+0x58>
    } else {
      stat = osError;
 8005212:	f04f 33ff 	mov.w	r3, #4294967295
 8005216:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005218:	68fb      	ldr	r3, [r7, #12]
}
 800521a:	4618      	mov	r0, r3
 800521c:	3710      	adds	r7, #16
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	20000038 	.word	0x20000038

08005228 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005228:	b580      	push	{r7, lr}
 800522a:	b092      	sub	sp, #72	; 0x48
 800522c:	af04      	add	r7, sp, #16
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005234:	2300      	movs	r3, #0
 8005236:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005238:	f3ef 8305 	mrs	r3, IPSR
 800523c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800523e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8005240:	2b00      	cmp	r3, #0
 8005242:	f040 8094 	bne.w	800536e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005246:	f3ef 8310 	mrs	r3, PRIMASK
 800524a:	623b      	str	r3, [r7, #32]
  return(result);
 800524c:	6a3b      	ldr	r3, [r7, #32]
 800524e:	2b00      	cmp	r3, #0
 8005250:	f040 808d 	bne.w	800536e <osThreadNew+0x146>
 8005254:	4b48      	ldr	r3, [pc, #288]	; (8005378 <osThreadNew+0x150>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	2b02      	cmp	r3, #2
 800525a:	d106      	bne.n	800526a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800525c:	f3ef 8311 	mrs	r3, BASEPRI
 8005260:	61fb      	str	r3, [r7, #28]
  return(result);
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	2b00      	cmp	r3, #0
 8005266:	f040 8082 	bne.w	800536e <osThreadNew+0x146>
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d07e      	beq.n	800536e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8005270:	2380      	movs	r3, #128	; 0x80
 8005272:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8005274:	2318      	movs	r3, #24
 8005276:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8005278:	2300      	movs	r3, #0
 800527a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800527c:	f107 031b 	add.w	r3, r7, #27
 8005280:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8005282:	f04f 33ff 	mov.w	r3, #4294967295
 8005286:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d045      	beq.n	800531a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d002      	beq.n	800529c <osThreadNew+0x74>
        name = attr->name;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	699b      	ldr	r3, [r3, #24]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d002      	beq.n	80052aa <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	699b      	ldr	r3, [r3, #24]
 80052a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80052aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d008      	beq.n	80052c2 <osThreadNew+0x9a>
 80052b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052b2:	2b38      	cmp	r3, #56	; 0x38
 80052b4:	d805      	bhi.n	80052c2 <osThreadNew+0x9a>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	f003 0301 	and.w	r3, r3, #1
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d001      	beq.n	80052c6 <osThreadNew+0x9e>
        return (NULL);
 80052c2:	2300      	movs	r3, #0
 80052c4:	e054      	b.n	8005370 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	695b      	ldr	r3, [r3, #20]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d003      	beq.n	80052d6 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	695b      	ldr	r3, [r3, #20]
 80052d2:	089b      	lsrs	r3, r3, #2
 80052d4:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d00e      	beq.n	80052fc <osThreadNew+0xd4>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	2b53      	cmp	r3, #83	; 0x53
 80052e4:	d90a      	bls.n	80052fc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d006      	beq.n	80052fc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	695b      	ldr	r3, [r3, #20]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d002      	beq.n	80052fc <osThreadNew+0xd4>
        mem = 1;
 80052f6:	2301      	movs	r3, #1
 80052f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80052fa:	e010      	b.n	800531e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d10c      	bne.n	800531e <osThreadNew+0xf6>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d108      	bne.n	800531e <osThreadNew+0xf6>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	691b      	ldr	r3, [r3, #16]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d104      	bne.n	800531e <osThreadNew+0xf6>
          mem = 0;
 8005314:	2300      	movs	r3, #0
 8005316:	62bb      	str	r3, [r7, #40]	; 0x28
 8005318:	e001      	b.n	800531e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800531a:	2300      	movs	r3, #0
 800531c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800531e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005320:	2b01      	cmp	r3, #1
 8005322:	d110      	bne.n	8005346 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800532c:	9202      	str	r2, [sp, #8]
 800532e:	9301      	str	r3, [sp, #4]
 8005330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005332:	9300      	str	r3, [sp, #0]
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005338:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800533a:	68f8      	ldr	r0, [r7, #12]
 800533c:	f000 ff22 	bl	8006184 <xTaskCreateStatic>
 8005340:	4603      	mov	r3, r0
 8005342:	617b      	str	r3, [r7, #20]
 8005344:	e013      	b.n	800536e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8005346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005348:	2b00      	cmp	r3, #0
 800534a:	d110      	bne.n	800536e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800534c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800534e:	b29a      	uxth	r2, r3
 8005350:	f107 0314 	add.w	r3, r7, #20
 8005354:	9301      	str	r3, [sp, #4]
 8005356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005358:	9300      	str	r3, [sp, #0]
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800535e:	68f8      	ldr	r0, [r7, #12]
 8005360:	f000 ff69 	bl	8006236 <xTaskCreate>
 8005364:	4603      	mov	r3, r0
 8005366:	2b01      	cmp	r3, #1
 8005368:	d001      	beq.n	800536e <osThreadNew+0x146>
          hTask = NULL;
 800536a:	2300      	movs	r3, #0
 800536c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800536e:	697b      	ldr	r3, [r7, #20]
}
 8005370:	4618      	mov	r0, r3
 8005372:	3738      	adds	r7, #56	; 0x38
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}
 8005378:	20000038 	.word	0x20000038

0800537c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800537c:	b580      	push	{r7, lr}
 800537e:	b086      	sub	sp, #24
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005384:	f3ef 8305 	mrs	r3, IPSR
 8005388:	613b      	str	r3, [r7, #16]
  return(result);
 800538a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800538c:	2b00      	cmp	r3, #0
 800538e:	d10f      	bne.n	80053b0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005390:	f3ef 8310 	mrs	r3, PRIMASK
 8005394:	60fb      	str	r3, [r7, #12]
  return(result);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d109      	bne.n	80053b0 <osDelay+0x34>
 800539c:	4b0d      	ldr	r3, [pc, #52]	; (80053d4 <osDelay+0x58>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2b02      	cmp	r3, #2
 80053a2:	d109      	bne.n	80053b8 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80053a4:	f3ef 8311 	mrs	r3, BASEPRI
 80053a8:	60bb      	str	r3, [r7, #8]
  return(result);
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d003      	beq.n	80053b8 <osDelay+0x3c>
    stat = osErrorISR;
 80053b0:	f06f 0305 	mvn.w	r3, #5
 80053b4:	617b      	str	r3, [r7, #20]
 80053b6:	e007      	b.n	80053c8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80053b8:	2300      	movs	r3, #0
 80053ba:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d002      	beq.n	80053c8 <osDelay+0x4c>
      vTaskDelay(ticks);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f001 f86e 	bl	80064a4 <vTaskDelay>
    }
  }

  return (stat);
 80053c8:	697b      	ldr	r3, [r7, #20]
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3718      	adds	r7, #24
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	20000038 	.word	0x20000038

080053d8 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80053d8:	b580      	push	{r7, lr}
 80053da:	b08a      	sub	sp, #40	; 0x28
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80053e0:	2300      	movs	r3, #0
 80053e2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053e4:	f3ef 8305 	mrs	r3, IPSR
 80053e8:	613b      	str	r3, [r7, #16]
  return(result);
 80053ea:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	f040 8085 	bne.w	80054fc <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053f2:	f3ef 8310 	mrs	r3, PRIMASK
 80053f6:	60fb      	str	r3, [r7, #12]
  return(result);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d17e      	bne.n	80054fc <osMutexNew+0x124>
 80053fe:	4b42      	ldr	r3, [pc, #264]	; (8005508 <osMutexNew+0x130>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2b02      	cmp	r3, #2
 8005404:	d105      	bne.n	8005412 <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005406:	f3ef 8311 	mrs	r3, BASEPRI
 800540a:	60bb      	str	r3, [r7, #8]
  return(result);
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d174      	bne.n	80054fc <osMutexNew+0x124>
    if (attr != NULL) {
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d003      	beq.n	8005420 <osMutexNew+0x48>
      type = attr->attr_bits;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	623b      	str	r3, [r7, #32]
 800541e:	e001      	b.n	8005424 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8005420:	2300      	movs	r3, #0
 8005422:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8005424:	6a3b      	ldr	r3, [r7, #32]
 8005426:	f003 0301 	and.w	r3, r3, #1
 800542a:	2b00      	cmp	r3, #0
 800542c:	d002      	beq.n	8005434 <osMutexNew+0x5c>
      rmtx = 1U;
 800542e:	2301      	movs	r3, #1
 8005430:	61fb      	str	r3, [r7, #28]
 8005432:	e001      	b.n	8005438 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8005434:	2300      	movs	r3, #0
 8005436:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8005438:	6a3b      	ldr	r3, [r7, #32]
 800543a:	f003 0308 	and.w	r3, r3, #8
 800543e:	2b00      	cmp	r3, #0
 8005440:	d15c      	bne.n	80054fc <osMutexNew+0x124>
      mem = -1;
 8005442:	f04f 33ff 	mov.w	r3, #4294967295
 8005446:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d015      	beq.n	800547a <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d006      	beq.n	8005464 <osMutexNew+0x8c>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	2b47      	cmp	r3, #71	; 0x47
 800545c:	d902      	bls.n	8005464 <osMutexNew+0x8c>
          mem = 1;
 800545e:	2301      	movs	r3, #1
 8005460:	61bb      	str	r3, [r7, #24]
 8005462:	e00c      	b.n	800547e <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d108      	bne.n	800547e <osMutexNew+0xa6>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d104      	bne.n	800547e <osMutexNew+0xa6>
            mem = 0;
 8005474:	2300      	movs	r3, #0
 8005476:	61bb      	str	r3, [r7, #24]
 8005478:	e001      	b.n	800547e <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800547a:	2300      	movs	r3, #0
 800547c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800547e:	69bb      	ldr	r3, [r7, #24]
 8005480:	2b01      	cmp	r3, #1
 8005482:	d112      	bne.n	80054aa <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d007      	beq.n	800549a <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	4619      	mov	r1, r3
 8005490:	2004      	movs	r0, #4
 8005492:	f000 fa85 	bl	80059a0 <xQueueCreateMutexStatic>
 8005496:	6278      	str	r0, [r7, #36]	; 0x24
 8005498:	e016      	b.n	80054c8 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	4619      	mov	r1, r3
 80054a0:	2001      	movs	r0, #1
 80054a2:	f000 fa7d 	bl	80059a0 <xQueueCreateMutexStatic>
 80054a6:	6278      	str	r0, [r7, #36]	; 0x24
 80054a8:	e00e      	b.n	80054c8 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 80054aa:	69bb      	ldr	r3, [r7, #24]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d10b      	bne.n	80054c8 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d004      	beq.n	80054c0 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 80054b6:	2004      	movs	r0, #4
 80054b8:	f000 fa5a 	bl	8005970 <xQueueCreateMutex>
 80054bc:	6278      	str	r0, [r7, #36]	; 0x24
 80054be:	e003      	b.n	80054c8 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 80054c0:	2001      	movs	r0, #1
 80054c2:	f000 fa55 	bl	8005970 <xQueueCreateMutex>
 80054c6:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80054c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d00c      	beq.n	80054e8 <osMutexNew+0x110>
        if (attr != NULL) {
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d003      	beq.n	80054dc <osMutexNew+0x104>
          name = attr->name;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	617b      	str	r3, [r7, #20]
 80054da:	e001      	b.n	80054e0 <osMutexNew+0x108>
        } else {
          name = NULL;
 80054dc:	2300      	movs	r3, #0
 80054de:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 80054e0:	6979      	ldr	r1, [r7, #20]
 80054e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80054e4:	f000 fdf2 	bl	80060cc <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80054e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d006      	beq.n	80054fc <osMutexNew+0x124>
 80054ee:	69fb      	ldr	r3, [r7, #28]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d003      	beq.n	80054fc <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80054f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f6:	f043 0301 	orr.w	r3, r3, #1
 80054fa:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80054fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3728      	adds	r7, #40	; 0x28
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	20000038 	.word	0x20000038

0800550c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800550c:	b480      	push	{r7}
 800550e:	b085      	sub	sp, #20
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	4a06      	ldr	r2, [pc, #24]	; (8005534 <vApplicationGetIdleTaskMemory+0x28>)
 800551c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	4a05      	ldr	r2, [pc, #20]	; (8005538 <vApplicationGetIdleTaskMemory+0x2c>)
 8005522:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2280      	movs	r2, #128	; 0x80
 8005528:	601a      	str	r2, [r3, #0]
}
 800552a:	bf00      	nop
 800552c:	3714      	adds	r7, #20
 800552e:	46bd      	mov	sp, r7
 8005530:	bc80      	pop	{r7}
 8005532:	4770      	bx	lr
 8005534:	2000003c 	.word	0x2000003c
 8005538:	20000090 	.word	0x20000090

0800553c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800553c:	b480      	push	{r7}
 800553e:	b085      	sub	sp, #20
 8005540:	af00      	add	r7, sp, #0
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	4a07      	ldr	r2, [pc, #28]	; (8005568 <vApplicationGetTimerTaskMemory+0x2c>)
 800554c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	4a06      	ldr	r2, [pc, #24]	; (800556c <vApplicationGetTimerTaskMemory+0x30>)
 8005552:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f44f 7280 	mov.w	r2, #256	; 0x100
 800555a:	601a      	str	r2, [r3, #0]
}
 800555c:	bf00      	nop
 800555e:	3714      	adds	r7, #20
 8005560:	46bd      	mov	sp, r7
 8005562:	bc80      	pop	{r7}
 8005564:	4770      	bx	lr
 8005566:	bf00      	nop
 8005568:	20000290 	.word	0x20000290
 800556c:	200002e4 	.word	0x200002e4

08005570 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005570:	b480      	push	{r7}
 8005572:	b083      	sub	sp, #12
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f103 0208 	add.w	r2, r3, #8
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f04f 32ff 	mov.w	r2, #4294967295
 8005588:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f103 0208 	add.w	r2, r3, #8
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f103 0208 	add.w	r2, r3, #8
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80055a4:	bf00      	nop
 80055a6:	370c      	adds	r7, #12
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bc80      	pop	{r7}
 80055ac:	4770      	bx	lr

080055ae <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80055ae:	b480      	push	{r7}
 80055b0:	b083      	sub	sp, #12
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80055bc:	bf00      	nop
 80055be:	370c      	adds	r7, #12
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bc80      	pop	{r7}
 80055c4:	4770      	bx	lr

080055c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80055c6:	b480      	push	{r7}
 80055c8:	b085      	sub	sp, #20
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
 80055ce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	68fa      	ldr	r2, [r7, #12]
 80055da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	689a      	ldr	r2, [r3, #8]
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	683a      	ldr	r2, [r7, #0]
 80055ea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	683a      	ldr	r2, [r7, #0]
 80055f0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	1c5a      	adds	r2, r3, #1
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	601a      	str	r2, [r3, #0]
}
 8005602:	bf00      	nop
 8005604:	3714      	adds	r7, #20
 8005606:	46bd      	mov	sp, r7
 8005608:	bc80      	pop	{r7}
 800560a:	4770      	bx	lr

0800560c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800560c:	b480      	push	{r7}
 800560e:	b085      	sub	sp, #20
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005622:	d103      	bne.n	800562c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	691b      	ldr	r3, [r3, #16]
 8005628:	60fb      	str	r3, [r7, #12]
 800562a:	e00c      	b.n	8005646 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	3308      	adds	r3, #8
 8005630:	60fb      	str	r3, [r7, #12]
 8005632:	e002      	b.n	800563a <vListInsert+0x2e>
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	60fb      	str	r3, [r7, #12]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	68ba      	ldr	r2, [r7, #8]
 8005642:	429a      	cmp	r2, r3
 8005644:	d2f6      	bcs.n	8005634 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	685a      	ldr	r2, [r3, #4]
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	683a      	ldr	r2, [r7, #0]
 8005654:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	68fa      	ldr	r2, [r7, #12]
 800565a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	683a      	ldr	r2, [r7, #0]
 8005660:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	1c5a      	adds	r2, r3, #1
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	601a      	str	r2, [r3, #0]
}
 8005672:	bf00      	nop
 8005674:	3714      	adds	r7, #20
 8005676:	46bd      	mov	sp, r7
 8005678:	bc80      	pop	{r7}
 800567a:	4770      	bx	lr

0800567c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800567c:	b480      	push	{r7}
 800567e:	b085      	sub	sp, #20
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	691b      	ldr	r3, [r3, #16]
 8005688:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	6892      	ldr	r2, [r2, #8]
 8005692:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	6852      	ldr	r2, [r2, #4]
 800569c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d103      	bne.n	80056b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	689a      	ldr	r2, [r3, #8]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2200      	movs	r2, #0
 80056b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	1e5a      	subs	r2, r3, #1
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3714      	adds	r7, #20
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bc80      	pop	{r7}
 80056cc:	4770      	bx	lr
	...

080056d0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d109      	bne.n	80056f8 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80056e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e8:	f383 8811 	msr	BASEPRI, r3
 80056ec:	f3bf 8f6f 	isb	sy
 80056f0:	f3bf 8f4f 	dsb	sy
 80056f4:	60bb      	str	r3, [r7, #8]
 80056f6:	e7fe      	b.n	80056f6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80056f8:	f002 f816 	bl	8007728 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005704:	68f9      	ldr	r1, [r7, #12]
 8005706:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005708:	fb01 f303 	mul.w	r3, r1, r3
 800570c:	441a      	add	r2, r3
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2200      	movs	r2, #0
 8005716:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005728:	3b01      	subs	r3, #1
 800572a:	68f9      	ldr	r1, [r7, #12]
 800572c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800572e:	fb01 f303 	mul.w	r3, r1, r3
 8005732:	441a      	add	r2, r3
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	22ff      	movs	r2, #255	; 0xff
 800573c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	22ff      	movs	r2, #255	; 0xff
 8005744:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d114      	bne.n	8005778 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d01a      	beq.n	800578c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	3310      	adds	r3, #16
 800575a:	4618      	mov	r0, r3
 800575c:	f001 f95a 	bl	8006a14 <xTaskRemoveFromEventList>
 8005760:	4603      	mov	r3, r0
 8005762:	2b00      	cmp	r3, #0
 8005764:	d012      	beq.n	800578c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005766:	4b0d      	ldr	r3, [pc, #52]	; (800579c <xQueueGenericReset+0xcc>)
 8005768:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800576c:	601a      	str	r2, [r3, #0]
 800576e:	f3bf 8f4f 	dsb	sy
 8005772:	f3bf 8f6f 	isb	sy
 8005776:	e009      	b.n	800578c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	3310      	adds	r3, #16
 800577c:	4618      	mov	r0, r3
 800577e:	f7ff fef7 	bl	8005570 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	3324      	adds	r3, #36	; 0x24
 8005786:	4618      	mov	r0, r3
 8005788:	f7ff fef2 	bl	8005570 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800578c:	f001 fffa 	bl	8007784 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005790:	2301      	movs	r3, #1
}
 8005792:	4618      	mov	r0, r3
 8005794:	3710      	adds	r7, #16
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
 800579a:	bf00      	nop
 800579c:	e000ed04 	.word	0xe000ed04

080057a0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b08e      	sub	sp, #56	; 0x38
 80057a4:	af02      	add	r7, sp, #8
 80057a6:	60f8      	str	r0, [r7, #12]
 80057a8:	60b9      	str	r1, [r7, #8]
 80057aa:	607a      	str	r2, [r7, #4]
 80057ac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d109      	bne.n	80057c8 <xQueueGenericCreateStatic+0x28>
 80057b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b8:	f383 8811 	msr	BASEPRI, r3
 80057bc:	f3bf 8f6f 	isb	sy
 80057c0:	f3bf 8f4f 	dsb	sy
 80057c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80057c6:	e7fe      	b.n	80057c6 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d109      	bne.n	80057e2 <xQueueGenericCreateStatic+0x42>
 80057ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d2:	f383 8811 	msr	BASEPRI, r3
 80057d6:	f3bf 8f6f 	isb	sy
 80057da:	f3bf 8f4f 	dsb	sy
 80057de:	627b      	str	r3, [r7, #36]	; 0x24
 80057e0:	e7fe      	b.n	80057e0 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d002      	beq.n	80057ee <xQueueGenericCreateStatic+0x4e>
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d001      	beq.n	80057f2 <xQueueGenericCreateStatic+0x52>
 80057ee:	2301      	movs	r3, #1
 80057f0:	e000      	b.n	80057f4 <xQueueGenericCreateStatic+0x54>
 80057f2:	2300      	movs	r3, #0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d109      	bne.n	800580c <xQueueGenericCreateStatic+0x6c>
 80057f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057fc:	f383 8811 	msr	BASEPRI, r3
 8005800:	f3bf 8f6f 	isb	sy
 8005804:	f3bf 8f4f 	dsb	sy
 8005808:	623b      	str	r3, [r7, #32]
 800580a:	e7fe      	b.n	800580a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d102      	bne.n	8005818 <xQueueGenericCreateStatic+0x78>
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d101      	bne.n	800581c <xQueueGenericCreateStatic+0x7c>
 8005818:	2301      	movs	r3, #1
 800581a:	e000      	b.n	800581e <xQueueGenericCreateStatic+0x7e>
 800581c:	2300      	movs	r3, #0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d109      	bne.n	8005836 <xQueueGenericCreateStatic+0x96>
 8005822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005826:	f383 8811 	msr	BASEPRI, r3
 800582a:	f3bf 8f6f 	isb	sy
 800582e:	f3bf 8f4f 	dsb	sy
 8005832:	61fb      	str	r3, [r7, #28]
 8005834:	e7fe      	b.n	8005834 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005836:	2348      	movs	r3, #72	; 0x48
 8005838:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	2b48      	cmp	r3, #72	; 0x48
 800583e:	d009      	beq.n	8005854 <xQueueGenericCreateStatic+0xb4>
 8005840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005844:	f383 8811 	msr	BASEPRI, r3
 8005848:	f3bf 8f6f 	isb	sy
 800584c:	f3bf 8f4f 	dsb	sy
 8005850:	61bb      	str	r3, [r7, #24]
 8005852:	e7fe      	b.n	8005852 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800585a:	2b00      	cmp	r3, #0
 800585c:	d00d      	beq.n	800587a <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800585e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005860:	2201      	movs	r2, #1
 8005862:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005866:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800586a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800586c:	9300      	str	r3, [sp, #0]
 800586e:	4613      	mov	r3, r2
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	68b9      	ldr	r1, [r7, #8]
 8005874:	68f8      	ldr	r0, [r7, #12]
 8005876:	f000 f842 	bl	80058fe <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800587a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800587c:	4618      	mov	r0, r3
 800587e:	3730      	adds	r7, #48	; 0x30
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005884:	b580      	push	{r7, lr}
 8005886:	b08a      	sub	sp, #40	; 0x28
 8005888:	af02      	add	r7, sp, #8
 800588a:	60f8      	str	r0, [r7, #12]
 800588c:	60b9      	str	r1, [r7, #8]
 800588e:	4613      	mov	r3, r2
 8005890:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d109      	bne.n	80058ac <xQueueGenericCreate+0x28>
 8005898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800589c:	f383 8811 	msr	BASEPRI, r3
 80058a0:	f3bf 8f6f 	isb	sy
 80058a4:	f3bf 8f4f 	dsb	sy
 80058a8:	613b      	str	r3, [r7, #16]
 80058aa:	e7fe      	b.n	80058aa <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d102      	bne.n	80058b8 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80058b2:	2300      	movs	r3, #0
 80058b4:	61fb      	str	r3, [r7, #28]
 80058b6:	e004      	b.n	80058c2 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	68ba      	ldr	r2, [r7, #8]
 80058bc:	fb02 f303 	mul.w	r3, r2, r3
 80058c0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	3348      	adds	r3, #72	; 0x48
 80058c6:	4618      	mov	r0, r3
 80058c8:	f002 f824 	bl	8007914 <pvPortMalloc>
 80058cc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80058ce:	69bb      	ldr	r3, [r7, #24]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d00f      	beq.n	80058f4 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	3348      	adds	r3, #72	; 0x48
 80058d8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	2200      	movs	r2, #0
 80058de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80058e2:	79fa      	ldrb	r2, [r7, #7]
 80058e4:	69bb      	ldr	r3, [r7, #24]
 80058e6:	9300      	str	r3, [sp, #0]
 80058e8:	4613      	mov	r3, r2
 80058ea:	697a      	ldr	r2, [r7, #20]
 80058ec:	68b9      	ldr	r1, [r7, #8]
 80058ee:	68f8      	ldr	r0, [r7, #12]
 80058f0:	f000 f805 	bl	80058fe <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80058f4:	69bb      	ldr	r3, [r7, #24]
	}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3720      	adds	r7, #32
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}

080058fe <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80058fe:	b580      	push	{r7, lr}
 8005900:	b084      	sub	sp, #16
 8005902:	af00      	add	r7, sp, #0
 8005904:	60f8      	str	r0, [r7, #12]
 8005906:	60b9      	str	r1, [r7, #8]
 8005908:	607a      	str	r2, [r7, #4]
 800590a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d103      	bne.n	800591a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	69ba      	ldr	r2, [r7, #24]
 8005916:	601a      	str	r2, [r3, #0]
 8005918:	e002      	b.n	8005920 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800591a:	69bb      	ldr	r3, [r7, #24]
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005920:	69bb      	ldr	r3, [r7, #24]
 8005922:	68fa      	ldr	r2, [r7, #12]
 8005924:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005926:	69bb      	ldr	r3, [r7, #24]
 8005928:	68ba      	ldr	r2, [r7, #8]
 800592a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800592c:	2101      	movs	r1, #1
 800592e:	69b8      	ldr	r0, [r7, #24]
 8005930:	f7ff fece 	bl	80056d0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005934:	bf00      	nop
 8005936:	3710      	adds	r7, #16
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}

0800593c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800593c:	b580      	push	{r7, lr}
 800593e:	b082      	sub	sp, #8
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d00e      	beq.n	8005968 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2200      	movs	r2, #0
 8005954:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800595c:	2300      	movs	r3, #0
 800595e:	2200      	movs	r2, #0
 8005960:	2100      	movs	r1, #0
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f000 f838 	bl	80059d8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005968:	bf00      	nop
 800596a:	3708      	adds	r7, #8
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}

08005970 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005970:	b580      	push	{r7, lr}
 8005972:	b086      	sub	sp, #24
 8005974:	af00      	add	r7, sp, #0
 8005976:	4603      	mov	r3, r0
 8005978:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800597a:	2301      	movs	r3, #1
 800597c:	617b      	str	r3, [r7, #20]
 800597e:	2300      	movs	r3, #0
 8005980:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005982:	79fb      	ldrb	r3, [r7, #7]
 8005984:	461a      	mov	r2, r3
 8005986:	6939      	ldr	r1, [r7, #16]
 8005988:	6978      	ldr	r0, [r7, #20]
 800598a:	f7ff ff7b 	bl	8005884 <xQueueGenericCreate>
 800598e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8005990:	68f8      	ldr	r0, [r7, #12]
 8005992:	f7ff ffd3 	bl	800593c <prvInitialiseMutex>

		return pxNewQueue;
 8005996:	68fb      	ldr	r3, [r7, #12]
	}
 8005998:	4618      	mov	r0, r3
 800599a:	3718      	adds	r7, #24
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}

080059a0 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b088      	sub	sp, #32
 80059a4:	af02      	add	r7, sp, #8
 80059a6:	4603      	mov	r3, r0
 80059a8:	6039      	str	r1, [r7, #0]
 80059aa:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80059ac:	2301      	movs	r3, #1
 80059ae:	617b      	str	r3, [r7, #20]
 80059b0:	2300      	movs	r3, #0
 80059b2:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80059b4:	79fb      	ldrb	r3, [r7, #7]
 80059b6:	9300      	str	r3, [sp, #0]
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	2200      	movs	r2, #0
 80059bc:	6939      	ldr	r1, [r7, #16]
 80059be:	6978      	ldr	r0, [r7, #20]
 80059c0:	f7ff feee 	bl	80057a0 <xQueueGenericCreateStatic>
 80059c4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80059c6:	68f8      	ldr	r0, [r7, #12]
 80059c8:	f7ff ffb8 	bl	800593c <prvInitialiseMutex>

		return pxNewQueue;
 80059cc:	68fb      	ldr	r3, [r7, #12]
	}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3718      	adds	r7, #24
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
	...

080059d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b08e      	sub	sp, #56	; 0x38
 80059dc:	af00      	add	r7, sp, #0
 80059de:	60f8      	str	r0, [r7, #12]
 80059e0:	60b9      	str	r1, [r7, #8]
 80059e2:	607a      	str	r2, [r7, #4]
 80059e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80059e6:	2300      	movs	r3, #0
 80059e8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80059ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d109      	bne.n	8005a08 <xQueueGenericSend+0x30>
 80059f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f8:	f383 8811 	msr	BASEPRI, r3
 80059fc:	f3bf 8f6f 	isb	sy
 8005a00:	f3bf 8f4f 	dsb	sy
 8005a04:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a06:	e7fe      	b.n	8005a06 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d103      	bne.n	8005a16 <xQueueGenericSend+0x3e>
 8005a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d101      	bne.n	8005a1a <xQueueGenericSend+0x42>
 8005a16:	2301      	movs	r3, #1
 8005a18:	e000      	b.n	8005a1c <xQueueGenericSend+0x44>
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d109      	bne.n	8005a34 <xQueueGenericSend+0x5c>
 8005a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a24:	f383 8811 	msr	BASEPRI, r3
 8005a28:	f3bf 8f6f 	isb	sy
 8005a2c:	f3bf 8f4f 	dsb	sy
 8005a30:	627b      	str	r3, [r7, #36]	; 0x24
 8005a32:	e7fe      	b.n	8005a32 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	2b02      	cmp	r3, #2
 8005a38:	d103      	bne.n	8005a42 <xQueueGenericSend+0x6a>
 8005a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d101      	bne.n	8005a46 <xQueueGenericSend+0x6e>
 8005a42:	2301      	movs	r3, #1
 8005a44:	e000      	b.n	8005a48 <xQueueGenericSend+0x70>
 8005a46:	2300      	movs	r3, #0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d109      	bne.n	8005a60 <xQueueGenericSend+0x88>
 8005a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a50:	f383 8811 	msr	BASEPRI, r3
 8005a54:	f3bf 8f6f 	isb	sy
 8005a58:	f3bf 8f4f 	dsb	sy
 8005a5c:	623b      	str	r3, [r7, #32]
 8005a5e:	e7fe      	b.n	8005a5e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a60:	f001 f992 	bl	8006d88 <xTaskGetSchedulerState>
 8005a64:	4603      	mov	r3, r0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d102      	bne.n	8005a70 <xQueueGenericSend+0x98>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d101      	bne.n	8005a74 <xQueueGenericSend+0x9c>
 8005a70:	2301      	movs	r3, #1
 8005a72:	e000      	b.n	8005a76 <xQueueGenericSend+0x9e>
 8005a74:	2300      	movs	r3, #0
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d109      	bne.n	8005a8e <xQueueGenericSend+0xb6>
 8005a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a7e:	f383 8811 	msr	BASEPRI, r3
 8005a82:	f3bf 8f6f 	isb	sy
 8005a86:	f3bf 8f4f 	dsb	sy
 8005a8a:	61fb      	str	r3, [r7, #28]
 8005a8c:	e7fe      	b.n	8005a8c <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a8e:	f001 fe4b 	bl	8007728 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d302      	bcc.n	8005aa4 <xQueueGenericSend+0xcc>
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	2b02      	cmp	r3, #2
 8005aa2:	d129      	bne.n	8005af8 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005aa4:	683a      	ldr	r2, [r7, #0]
 8005aa6:	68b9      	ldr	r1, [r7, #8]
 8005aa8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005aaa:	f000 f9ff 	bl	8005eac <prvCopyDataToQueue>
 8005aae:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d010      	beq.n	8005ada <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aba:	3324      	adds	r3, #36	; 0x24
 8005abc:	4618      	mov	r0, r3
 8005abe:	f000 ffa9 	bl	8006a14 <xTaskRemoveFromEventList>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d013      	beq.n	8005af0 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005ac8:	4b3f      	ldr	r3, [pc, #252]	; (8005bc8 <xQueueGenericSend+0x1f0>)
 8005aca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ace:	601a      	str	r2, [r3, #0]
 8005ad0:	f3bf 8f4f 	dsb	sy
 8005ad4:	f3bf 8f6f 	isb	sy
 8005ad8:	e00a      	b.n	8005af0 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d007      	beq.n	8005af0 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005ae0:	4b39      	ldr	r3, [pc, #228]	; (8005bc8 <xQueueGenericSend+0x1f0>)
 8005ae2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ae6:	601a      	str	r2, [r3, #0]
 8005ae8:	f3bf 8f4f 	dsb	sy
 8005aec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005af0:	f001 fe48 	bl	8007784 <vPortExitCritical>
				return pdPASS;
 8005af4:	2301      	movs	r3, #1
 8005af6:	e063      	b.n	8005bc0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d103      	bne.n	8005b06 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005afe:	f001 fe41 	bl	8007784 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005b02:	2300      	movs	r3, #0
 8005b04:	e05c      	b.n	8005bc0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d106      	bne.n	8005b1a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005b0c:	f107 0314 	add.w	r3, r7, #20
 8005b10:	4618      	mov	r0, r3
 8005b12:	f000 ffe1 	bl	8006ad8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005b16:	2301      	movs	r3, #1
 8005b18:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005b1a:	f001 fe33 	bl	8007784 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005b1e:	f000 fd59 	bl	80065d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005b22:	f001 fe01 	bl	8007728 <vPortEnterCritical>
 8005b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b2c:	b25b      	sxtb	r3, r3
 8005b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b32:	d103      	bne.n	8005b3c <xQueueGenericSend+0x164>
 8005b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b36:	2200      	movs	r2, #0
 8005b38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b42:	b25b      	sxtb	r3, r3
 8005b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b48:	d103      	bne.n	8005b52 <xQueueGenericSend+0x17a>
 8005b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b52:	f001 fe17 	bl	8007784 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b56:	1d3a      	adds	r2, r7, #4
 8005b58:	f107 0314 	add.w	r3, r7, #20
 8005b5c:	4611      	mov	r1, r2
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f000 ffd0 	bl	8006b04 <xTaskCheckForTimeOut>
 8005b64:	4603      	mov	r3, r0
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d124      	bne.n	8005bb4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005b6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b6c:	f000 fa96 	bl	800609c <prvIsQueueFull>
 8005b70:	4603      	mov	r3, r0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d018      	beq.n	8005ba8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b78:	3310      	adds	r3, #16
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	4611      	mov	r1, r2
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f000 fefa 	bl	8006978 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005b84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b86:	f000 fa21 	bl	8005fcc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005b8a:	f000 fd31 	bl	80065f0 <xTaskResumeAll>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	f47f af7c 	bne.w	8005a8e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8005b96:	4b0c      	ldr	r3, [pc, #48]	; (8005bc8 <xQueueGenericSend+0x1f0>)
 8005b98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b9c:	601a      	str	r2, [r3, #0]
 8005b9e:	f3bf 8f4f 	dsb	sy
 8005ba2:	f3bf 8f6f 	isb	sy
 8005ba6:	e772      	b.n	8005a8e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005ba8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005baa:	f000 fa0f 	bl	8005fcc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005bae:	f000 fd1f 	bl	80065f0 <xTaskResumeAll>
 8005bb2:	e76c      	b.n	8005a8e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005bb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005bb6:	f000 fa09 	bl	8005fcc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005bba:	f000 fd19 	bl	80065f0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005bbe:	2300      	movs	r3, #0
		}
	}
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3738      	adds	r7, #56	; 0x38
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}
 8005bc8:	e000ed04 	.word	0xe000ed04

08005bcc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b08e      	sub	sp, #56	; 0x38
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	60f8      	str	r0, [r7, #12]
 8005bd4:	60b9      	str	r1, [r7, #8]
 8005bd6:	607a      	str	r2, [r7, #4]
 8005bd8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d109      	bne.n	8005bf8 <xQueueGenericSendFromISR+0x2c>
 8005be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be8:	f383 8811 	msr	BASEPRI, r3
 8005bec:	f3bf 8f6f 	isb	sy
 8005bf0:	f3bf 8f4f 	dsb	sy
 8005bf4:	627b      	str	r3, [r7, #36]	; 0x24
 8005bf6:	e7fe      	b.n	8005bf6 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d103      	bne.n	8005c06 <xQueueGenericSendFromISR+0x3a>
 8005bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d101      	bne.n	8005c0a <xQueueGenericSendFromISR+0x3e>
 8005c06:	2301      	movs	r3, #1
 8005c08:	e000      	b.n	8005c0c <xQueueGenericSendFromISR+0x40>
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d109      	bne.n	8005c24 <xQueueGenericSendFromISR+0x58>
 8005c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c14:	f383 8811 	msr	BASEPRI, r3
 8005c18:	f3bf 8f6f 	isb	sy
 8005c1c:	f3bf 8f4f 	dsb	sy
 8005c20:	623b      	str	r3, [r7, #32]
 8005c22:	e7fe      	b.n	8005c22 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	2b02      	cmp	r3, #2
 8005c28:	d103      	bne.n	8005c32 <xQueueGenericSendFromISR+0x66>
 8005c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	d101      	bne.n	8005c36 <xQueueGenericSendFromISR+0x6a>
 8005c32:	2301      	movs	r3, #1
 8005c34:	e000      	b.n	8005c38 <xQueueGenericSendFromISR+0x6c>
 8005c36:	2300      	movs	r3, #0
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d109      	bne.n	8005c50 <xQueueGenericSendFromISR+0x84>
 8005c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c40:	f383 8811 	msr	BASEPRI, r3
 8005c44:	f3bf 8f6f 	isb	sy
 8005c48:	f3bf 8f4f 	dsb	sy
 8005c4c:	61fb      	str	r3, [r7, #28]
 8005c4e:	e7fe      	b.n	8005c4e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005c50:	f001 fe24 	bl	800789c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005c54:	f3ef 8211 	mrs	r2, BASEPRI
 8005c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c5c:	f383 8811 	msr	BASEPRI, r3
 8005c60:	f3bf 8f6f 	isb	sy
 8005c64:	f3bf 8f4f 	dsb	sy
 8005c68:	61ba      	str	r2, [r7, #24]
 8005c6a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005c6c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d302      	bcc.n	8005c82 <xQueueGenericSendFromISR+0xb6>
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	2b02      	cmp	r3, #2
 8005c80:	d12c      	bne.n	8005cdc <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005c8c:	683a      	ldr	r2, [r7, #0]
 8005c8e:	68b9      	ldr	r1, [r7, #8]
 8005c90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c92:	f000 f90b 	bl	8005eac <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005c96:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c9e:	d112      	bne.n	8005cc6 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d016      	beq.n	8005cd6 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005caa:	3324      	adds	r3, #36	; 0x24
 8005cac:	4618      	mov	r0, r3
 8005cae:	f000 feb1 	bl	8006a14 <xTaskRemoveFromEventList>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d00e      	beq.n	8005cd6 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d00b      	beq.n	8005cd6 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	601a      	str	r2, [r3, #0]
 8005cc4:	e007      	b.n	8005cd6 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005cc6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005cca:	3301      	adds	r3, #1
 8005ccc:	b2db      	uxtb	r3, r3
 8005cce:	b25a      	sxtb	r2, r3
 8005cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005cda:	e001      	b.n	8005ce0 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	637b      	str	r3, [r7, #52]	; 0x34
 8005ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ce2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005cea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3738      	adds	r7, #56	; 0x38
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}

08005cf4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b08c      	sub	sp, #48	; 0x30
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	60f8      	str	r0, [r7, #12]
 8005cfc:	60b9      	str	r1, [r7, #8]
 8005cfe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005d00:	2300      	movs	r3, #0
 8005d02:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d109      	bne.n	8005d22 <xQueueReceive+0x2e>
	__asm volatile
 8005d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d12:	f383 8811 	msr	BASEPRI, r3
 8005d16:	f3bf 8f6f 	isb	sy
 8005d1a:	f3bf 8f4f 	dsb	sy
 8005d1e:	623b      	str	r3, [r7, #32]
 8005d20:	e7fe      	b.n	8005d20 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d103      	bne.n	8005d30 <xQueueReceive+0x3c>
 8005d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d101      	bne.n	8005d34 <xQueueReceive+0x40>
 8005d30:	2301      	movs	r3, #1
 8005d32:	e000      	b.n	8005d36 <xQueueReceive+0x42>
 8005d34:	2300      	movs	r3, #0
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d109      	bne.n	8005d4e <xQueueReceive+0x5a>
 8005d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d3e:	f383 8811 	msr	BASEPRI, r3
 8005d42:	f3bf 8f6f 	isb	sy
 8005d46:	f3bf 8f4f 	dsb	sy
 8005d4a:	61fb      	str	r3, [r7, #28]
 8005d4c:	e7fe      	b.n	8005d4c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005d4e:	f001 f81b 	bl	8006d88 <xTaskGetSchedulerState>
 8005d52:	4603      	mov	r3, r0
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d102      	bne.n	8005d5e <xQueueReceive+0x6a>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d101      	bne.n	8005d62 <xQueueReceive+0x6e>
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e000      	b.n	8005d64 <xQueueReceive+0x70>
 8005d62:	2300      	movs	r3, #0
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d109      	bne.n	8005d7c <xQueueReceive+0x88>
 8005d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d6c:	f383 8811 	msr	BASEPRI, r3
 8005d70:	f3bf 8f6f 	isb	sy
 8005d74:	f3bf 8f4f 	dsb	sy
 8005d78:	61bb      	str	r3, [r7, #24]
 8005d7a:	e7fe      	b.n	8005d7a <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005d7c:	f001 fcd4 	bl	8007728 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d84:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d01f      	beq.n	8005dcc <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005d8c:	68b9      	ldr	r1, [r7, #8]
 8005d8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d90:	f000 f8f6 	bl	8005f80 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d96:	1e5a      	subs	r2, r3, #1
 8005d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d9a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d9e:	691b      	ldr	r3, [r3, #16]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d00f      	beq.n	8005dc4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da6:	3310      	adds	r3, #16
 8005da8:	4618      	mov	r0, r3
 8005daa:	f000 fe33 	bl	8006a14 <xTaskRemoveFromEventList>
 8005dae:	4603      	mov	r3, r0
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d007      	beq.n	8005dc4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005db4:	4b3c      	ldr	r3, [pc, #240]	; (8005ea8 <xQueueReceive+0x1b4>)
 8005db6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dba:	601a      	str	r2, [r3, #0]
 8005dbc:	f3bf 8f4f 	dsb	sy
 8005dc0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005dc4:	f001 fcde 	bl	8007784 <vPortExitCritical>
				return pdPASS;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	e069      	b.n	8005ea0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d103      	bne.n	8005dda <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005dd2:	f001 fcd7 	bl	8007784 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	e062      	b.n	8005ea0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d106      	bne.n	8005dee <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005de0:	f107 0310 	add.w	r3, r7, #16
 8005de4:	4618      	mov	r0, r3
 8005de6:	f000 fe77 	bl	8006ad8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005dea:	2301      	movs	r3, #1
 8005dec:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005dee:	f001 fcc9 	bl	8007784 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005df2:	f000 fbef 	bl	80065d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005df6:	f001 fc97 	bl	8007728 <vPortEnterCritical>
 8005dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dfc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e00:	b25b      	sxtb	r3, r3
 8005e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e06:	d103      	bne.n	8005e10 <xQueueReceive+0x11c>
 8005e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e16:	b25b      	sxtb	r3, r3
 8005e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e1c:	d103      	bne.n	8005e26 <xQueueReceive+0x132>
 8005e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e20:	2200      	movs	r2, #0
 8005e22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e26:	f001 fcad 	bl	8007784 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005e2a:	1d3a      	adds	r2, r7, #4
 8005e2c:	f107 0310 	add.w	r3, r7, #16
 8005e30:	4611      	mov	r1, r2
 8005e32:	4618      	mov	r0, r3
 8005e34:	f000 fe66 	bl	8006b04 <xTaskCheckForTimeOut>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d123      	bne.n	8005e86 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e40:	f000 f916 	bl	8006070 <prvIsQueueEmpty>
 8005e44:	4603      	mov	r3, r0
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d017      	beq.n	8005e7a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e4c:	3324      	adds	r3, #36	; 0x24
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	4611      	mov	r1, r2
 8005e52:	4618      	mov	r0, r3
 8005e54:	f000 fd90 	bl	8006978 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005e58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e5a:	f000 f8b7 	bl	8005fcc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005e5e:	f000 fbc7 	bl	80065f0 <xTaskResumeAll>
 8005e62:	4603      	mov	r3, r0
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d189      	bne.n	8005d7c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8005e68:	4b0f      	ldr	r3, [pc, #60]	; (8005ea8 <xQueueReceive+0x1b4>)
 8005e6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e6e:	601a      	str	r2, [r3, #0]
 8005e70:	f3bf 8f4f 	dsb	sy
 8005e74:	f3bf 8f6f 	isb	sy
 8005e78:	e780      	b.n	8005d7c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005e7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e7c:	f000 f8a6 	bl	8005fcc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005e80:	f000 fbb6 	bl	80065f0 <xTaskResumeAll>
 8005e84:	e77a      	b.n	8005d7c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005e86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e88:	f000 f8a0 	bl	8005fcc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e8c:	f000 fbb0 	bl	80065f0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e92:	f000 f8ed 	bl	8006070 <prvIsQueueEmpty>
 8005e96:	4603      	mov	r3, r0
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	f43f af6f 	beq.w	8005d7c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005e9e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3730      	adds	r7, #48	; 0x30
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}
 8005ea8:	e000ed04 	.word	0xe000ed04

08005eac <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b086      	sub	sp, #24
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	60f8      	str	r0, [r7, #12]
 8005eb4:	60b9      	str	r1, [r7, #8]
 8005eb6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d10d      	bne.n	8005ee6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d14d      	bne.n	8005f6e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f000 ff74 	bl	8006dc4 <xTaskPriorityDisinherit>
 8005edc:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	605a      	str	r2, [r3, #4]
 8005ee4:	e043      	b.n	8005f6e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d119      	bne.n	8005f20 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	6898      	ldr	r0, [r3, #8]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef4:	461a      	mov	r2, r3
 8005ef6:	68b9      	ldr	r1, [r7, #8]
 8005ef8:	f001 ff04 	bl	8007d04 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	689a      	ldr	r2, [r3, #8]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f04:	441a      	add	r2, r3
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	689a      	ldr	r2, [r3, #8]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d32b      	bcc.n	8005f6e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	609a      	str	r2, [r3, #8]
 8005f1e:	e026      	b.n	8005f6e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	68d8      	ldr	r0, [r3, #12]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f28:	461a      	mov	r2, r3
 8005f2a:	68b9      	ldr	r1, [r7, #8]
 8005f2c:	f001 feea 	bl	8007d04 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	68da      	ldr	r2, [r3, #12]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f38:	425b      	negs	r3, r3
 8005f3a:	441a      	add	r2, r3
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	68da      	ldr	r2, [r3, #12]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d207      	bcs.n	8005f5c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	685a      	ldr	r2, [r3, #4]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f54:	425b      	negs	r3, r3
 8005f56:	441a      	add	r2, r3
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2b02      	cmp	r3, #2
 8005f60:	d105      	bne.n	8005f6e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d002      	beq.n	8005f6e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	3b01      	subs	r3, #1
 8005f6c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	1c5a      	adds	r2, r3, #1
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005f76:	697b      	ldr	r3, [r7, #20]
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3718      	adds	r7, #24
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b082      	sub	sp, #8
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d018      	beq.n	8005fc4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	68da      	ldr	r2, [r3, #12]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f9a:	441a      	add	r2, r3
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	68da      	ldr	r2, [r3, #12]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d303      	bcc.n	8005fb4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	68d9      	ldr	r1, [r3, #12]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	6838      	ldr	r0, [r7, #0]
 8005fc0:	f001 fea0 	bl	8007d04 <memcpy>
	}
}
 8005fc4:	bf00      	nop
 8005fc6:	3708      	adds	r7, #8
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b084      	sub	sp, #16
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005fd4:	f001 fba8 	bl	8007728 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005fde:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005fe0:	e011      	b.n	8006006 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d012      	beq.n	8006010 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	3324      	adds	r3, #36	; 0x24
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f000 fd10 	bl	8006a14 <xTaskRemoveFromEventList>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d001      	beq.n	8005ffe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005ffa:	f000 fde3 	bl	8006bc4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005ffe:	7bfb      	ldrb	r3, [r7, #15]
 8006000:	3b01      	subs	r3, #1
 8006002:	b2db      	uxtb	r3, r3
 8006004:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800600a:	2b00      	cmp	r3, #0
 800600c:	dce9      	bgt.n	8005fe2 <prvUnlockQueue+0x16>
 800600e:	e000      	b.n	8006012 <prvUnlockQueue+0x46>
					break;
 8006010:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	22ff      	movs	r2, #255	; 0xff
 8006016:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800601a:	f001 fbb3 	bl	8007784 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800601e:	f001 fb83 	bl	8007728 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006028:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800602a:	e011      	b.n	8006050 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	691b      	ldr	r3, [r3, #16]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d012      	beq.n	800605a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	3310      	adds	r3, #16
 8006038:	4618      	mov	r0, r3
 800603a:	f000 fceb 	bl	8006a14 <xTaskRemoveFromEventList>
 800603e:	4603      	mov	r3, r0
 8006040:	2b00      	cmp	r3, #0
 8006042:	d001      	beq.n	8006048 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006044:	f000 fdbe 	bl	8006bc4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006048:	7bbb      	ldrb	r3, [r7, #14]
 800604a:	3b01      	subs	r3, #1
 800604c:	b2db      	uxtb	r3, r3
 800604e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006050:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006054:	2b00      	cmp	r3, #0
 8006056:	dce9      	bgt.n	800602c <prvUnlockQueue+0x60>
 8006058:	e000      	b.n	800605c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800605a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	22ff      	movs	r2, #255	; 0xff
 8006060:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006064:	f001 fb8e 	bl	8007784 <vPortExitCritical>
}
 8006068:	bf00      	nop
 800606a:	3710      	adds	r7, #16
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}

08006070 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b084      	sub	sp, #16
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006078:	f001 fb56 	bl	8007728 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006080:	2b00      	cmp	r3, #0
 8006082:	d102      	bne.n	800608a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006084:	2301      	movs	r3, #1
 8006086:	60fb      	str	r3, [r7, #12]
 8006088:	e001      	b.n	800608e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800608a:	2300      	movs	r3, #0
 800608c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800608e:	f001 fb79 	bl	8007784 <vPortExitCritical>

	return xReturn;
 8006092:	68fb      	ldr	r3, [r7, #12]
}
 8006094:	4618      	mov	r0, r3
 8006096:	3710      	adds	r7, #16
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}

0800609c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b084      	sub	sp, #16
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80060a4:	f001 fb40 	bl	8007728 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d102      	bne.n	80060ba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80060b4:	2301      	movs	r3, #1
 80060b6:	60fb      	str	r3, [r7, #12]
 80060b8:	e001      	b.n	80060be <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80060ba:	2300      	movs	r3, #0
 80060bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80060be:	f001 fb61 	bl	8007784 <vPortExitCritical>

	return xReturn;
 80060c2:	68fb      	ldr	r3, [r7, #12]
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3710      	adds	r7, #16
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}

080060cc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80060cc:	b480      	push	{r7}
 80060ce:	b085      	sub	sp, #20
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80060d6:	2300      	movs	r3, #0
 80060d8:	60fb      	str	r3, [r7, #12]
 80060da:	e014      	b.n	8006106 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80060dc:	4a0e      	ldr	r2, [pc, #56]	; (8006118 <vQueueAddToRegistry+0x4c>)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d10b      	bne.n	8006100 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80060e8:	490b      	ldr	r1, [pc, #44]	; (8006118 <vQueueAddToRegistry+0x4c>)
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	683a      	ldr	r2, [r7, #0]
 80060ee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80060f2:	4a09      	ldr	r2, [pc, #36]	; (8006118 <vQueueAddToRegistry+0x4c>)
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	00db      	lsls	r3, r3, #3
 80060f8:	4413      	add	r3, r2
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80060fe:	e005      	b.n	800610c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	3301      	adds	r3, #1
 8006104:	60fb      	str	r3, [r7, #12]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2b07      	cmp	r3, #7
 800610a:	d9e7      	bls.n	80060dc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800610c:	bf00      	nop
 800610e:	3714      	adds	r7, #20
 8006110:	46bd      	mov	sp, r7
 8006112:	bc80      	pop	{r7}
 8006114:	4770      	bx	lr
 8006116:	bf00      	nop
 8006118:	2000abd0 	.word	0x2000abd0

0800611c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800611c:	b580      	push	{r7, lr}
 800611e:	b086      	sub	sp, #24
 8006120:	af00      	add	r7, sp, #0
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	60b9      	str	r1, [r7, #8]
 8006126:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800612c:	f001 fafc 	bl	8007728 <vPortEnterCritical>
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006136:	b25b      	sxtb	r3, r3
 8006138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800613c:	d103      	bne.n	8006146 <vQueueWaitForMessageRestricted+0x2a>
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	2200      	movs	r2, #0
 8006142:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800614c:	b25b      	sxtb	r3, r3
 800614e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006152:	d103      	bne.n	800615c <vQueueWaitForMessageRestricted+0x40>
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	2200      	movs	r2, #0
 8006158:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800615c:	f001 fb12 	bl	8007784 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006164:	2b00      	cmp	r3, #0
 8006166:	d106      	bne.n	8006176 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	3324      	adds	r3, #36	; 0x24
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	68b9      	ldr	r1, [r7, #8]
 8006170:	4618      	mov	r0, r3
 8006172:	f000 fc25 	bl	80069c0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006176:	6978      	ldr	r0, [r7, #20]
 8006178:	f7ff ff28 	bl	8005fcc <prvUnlockQueue>
	}
 800617c:	bf00      	nop
 800617e:	3718      	adds	r7, #24
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}

08006184 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006184:	b580      	push	{r7, lr}
 8006186:	b08e      	sub	sp, #56	; 0x38
 8006188:	af04      	add	r7, sp, #16
 800618a:	60f8      	str	r0, [r7, #12]
 800618c:	60b9      	str	r1, [r7, #8]
 800618e:	607a      	str	r2, [r7, #4]
 8006190:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006194:	2b00      	cmp	r3, #0
 8006196:	d109      	bne.n	80061ac <xTaskCreateStatic+0x28>
 8006198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800619c:	f383 8811 	msr	BASEPRI, r3
 80061a0:	f3bf 8f6f 	isb	sy
 80061a4:	f3bf 8f4f 	dsb	sy
 80061a8:	623b      	str	r3, [r7, #32]
 80061aa:	e7fe      	b.n	80061aa <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80061ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d109      	bne.n	80061c6 <xTaskCreateStatic+0x42>
 80061b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b6:	f383 8811 	msr	BASEPRI, r3
 80061ba:	f3bf 8f6f 	isb	sy
 80061be:	f3bf 8f4f 	dsb	sy
 80061c2:	61fb      	str	r3, [r7, #28]
 80061c4:	e7fe      	b.n	80061c4 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80061c6:	2354      	movs	r3, #84	; 0x54
 80061c8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	2b54      	cmp	r3, #84	; 0x54
 80061ce:	d009      	beq.n	80061e4 <xTaskCreateStatic+0x60>
 80061d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d4:	f383 8811 	msr	BASEPRI, r3
 80061d8:	f3bf 8f6f 	isb	sy
 80061dc:	f3bf 8f4f 	dsb	sy
 80061e0:	61bb      	str	r3, [r7, #24]
 80061e2:	e7fe      	b.n	80061e2 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80061e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d01e      	beq.n	8006228 <xTaskCreateStatic+0xa4>
 80061ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d01b      	beq.n	8006228 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80061f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061f2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80061f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061f8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80061fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fc:	2202      	movs	r2, #2
 80061fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006202:	2300      	movs	r3, #0
 8006204:	9303      	str	r3, [sp, #12]
 8006206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006208:	9302      	str	r3, [sp, #8]
 800620a:	f107 0314 	add.w	r3, r7, #20
 800620e:	9301      	str	r3, [sp, #4]
 8006210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006212:	9300      	str	r3, [sp, #0]
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	68b9      	ldr	r1, [r7, #8]
 800621a:	68f8      	ldr	r0, [r7, #12]
 800621c:	f000 f850 	bl	80062c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006220:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006222:	f000 f8d3 	bl	80063cc <prvAddNewTaskToReadyList>
 8006226:	e001      	b.n	800622c <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8006228:	2300      	movs	r3, #0
 800622a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800622c:	697b      	ldr	r3, [r7, #20]
	}
 800622e:	4618      	mov	r0, r3
 8006230:	3728      	adds	r7, #40	; 0x28
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}

08006236 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006236:	b580      	push	{r7, lr}
 8006238:	b08c      	sub	sp, #48	; 0x30
 800623a:	af04      	add	r7, sp, #16
 800623c:	60f8      	str	r0, [r7, #12]
 800623e:	60b9      	str	r1, [r7, #8]
 8006240:	603b      	str	r3, [r7, #0]
 8006242:	4613      	mov	r3, r2
 8006244:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006246:	88fb      	ldrh	r3, [r7, #6]
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	4618      	mov	r0, r3
 800624c:	f001 fb62 	bl	8007914 <pvPortMalloc>
 8006250:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d00e      	beq.n	8006276 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006258:	2054      	movs	r0, #84	; 0x54
 800625a:	f001 fb5b 	bl	8007914 <pvPortMalloc>
 800625e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006260:	69fb      	ldr	r3, [r7, #28]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d003      	beq.n	800626e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006266:	69fb      	ldr	r3, [r7, #28]
 8006268:	697a      	ldr	r2, [r7, #20]
 800626a:	631a      	str	r2, [r3, #48]	; 0x30
 800626c:	e005      	b.n	800627a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800626e:	6978      	ldr	r0, [r7, #20]
 8006270:	f001 fc12 	bl	8007a98 <vPortFree>
 8006274:	e001      	b.n	800627a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006276:	2300      	movs	r3, #0
 8006278:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800627a:	69fb      	ldr	r3, [r7, #28]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d017      	beq.n	80062b0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006280:	69fb      	ldr	r3, [r7, #28]
 8006282:	2200      	movs	r2, #0
 8006284:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006288:	88fa      	ldrh	r2, [r7, #6]
 800628a:	2300      	movs	r3, #0
 800628c:	9303      	str	r3, [sp, #12]
 800628e:	69fb      	ldr	r3, [r7, #28]
 8006290:	9302      	str	r3, [sp, #8]
 8006292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006294:	9301      	str	r3, [sp, #4]
 8006296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006298:	9300      	str	r3, [sp, #0]
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	68b9      	ldr	r1, [r7, #8]
 800629e:	68f8      	ldr	r0, [r7, #12]
 80062a0:	f000 f80e 	bl	80062c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80062a4:	69f8      	ldr	r0, [r7, #28]
 80062a6:	f000 f891 	bl	80063cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80062aa:	2301      	movs	r3, #1
 80062ac:	61bb      	str	r3, [r7, #24]
 80062ae:	e002      	b.n	80062b6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80062b0:	f04f 33ff 	mov.w	r3, #4294967295
 80062b4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80062b6:	69bb      	ldr	r3, [r7, #24]
	}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3720      	adds	r7, #32
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}

080062c0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b088      	sub	sp, #32
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	60f8      	str	r0, [r7, #12]
 80062c8:	60b9      	str	r1, [r7, #8]
 80062ca:	607a      	str	r2, [r7, #4]
 80062cc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80062ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	009b      	lsls	r3, r3, #2
 80062d6:	461a      	mov	r2, r3
 80062d8:	21a5      	movs	r1, #165	; 0xa5
 80062da:	f001 fd1e 	bl	8007d1a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80062de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80062e8:	3b01      	subs	r3, #1
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	4413      	add	r3, r2
 80062ee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80062f0:	69bb      	ldr	r3, [r7, #24]
 80062f2:	f023 0307 	bic.w	r3, r3, #7
 80062f6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80062f8:	69bb      	ldr	r3, [r7, #24]
 80062fa:	f003 0307 	and.w	r3, r3, #7
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d009      	beq.n	8006316 <prvInitialiseNewTask+0x56>
 8006302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006306:	f383 8811 	msr	BASEPRI, r3
 800630a:	f3bf 8f6f 	isb	sy
 800630e:	f3bf 8f4f 	dsb	sy
 8006312:	617b      	str	r3, [r7, #20]
 8006314:	e7fe      	b.n	8006314 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006316:	2300      	movs	r3, #0
 8006318:	61fb      	str	r3, [r7, #28]
 800631a:	e012      	b.n	8006342 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800631c:	68ba      	ldr	r2, [r7, #8]
 800631e:	69fb      	ldr	r3, [r7, #28]
 8006320:	4413      	add	r3, r2
 8006322:	7819      	ldrb	r1, [r3, #0]
 8006324:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006326:	69fb      	ldr	r3, [r7, #28]
 8006328:	4413      	add	r3, r2
 800632a:	3334      	adds	r3, #52	; 0x34
 800632c:	460a      	mov	r2, r1
 800632e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006330:	68ba      	ldr	r2, [r7, #8]
 8006332:	69fb      	ldr	r3, [r7, #28]
 8006334:	4413      	add	r3, r2
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d006      	beq.n	800634a <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	3301      	adds	r3, #1
 8006340:	61fb      	str	r3, [r7, #28]
 8006342:	69fb      	ldr	r3, [r7, #28]
 8006344:	2b0f      	cmp	r3, #15
 8006346:	d9e9      	bls.n	800631c <prvInitialiseNewTask+0x5c>
 8006348:	e000      	b.n	800634c <prvInitialiseNewTask+0x8c>
		{
			break;
 800634a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800634c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800634e:	2200      	movs	r2, #0
 8006350:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006356:	2b37      	cmp	r3, #55	; 0x37
 8006358:	d901      	bls.n	800635e <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800635a:	2337      	movs	r3, #55	; 0x37
 800635c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800635e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006360:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006362:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006366:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006368:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800636a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800636c:	2200      	movs	r2, #0
 800636e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006372:	3304      	adds	r3, #4
 8006374:	4618      	mov	r0, r3
 8006376:	f7ff f91a 	bl	80055ae <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800637a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800637c:	3318      	adds	r3, #24
 800637e:	4618      	mov	r0, r3
 8006380:	f7ff f915 	bl	80055ae <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006386:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006388:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800638a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800638c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006392:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006396:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006398:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800639a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800639c:	2200      	movs	r2, #0
 800639e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80063a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a2:	2200      	movs	r2, #0
 80063a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80063a8:	683a      	ldr	r2, [r7, #0]
 80063aa:	68f9      	ldr	r1, [r7, #12]
 80063ac:	69b8      	ldr	r0, [r7, #24]
 80063ae:	f001 f8d3 	bl	8007558 <pxPortInitialiseStack>
 80063b2:	4602      	mov	r2, r0
 80063b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80063b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d002      	beq.n	80063c4 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80063be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063c2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80063c4:	bf00      	nop
 80063c6:	3720      	adds	r7, #32
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b082      	sub	sp, #8
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80063d4:	f001 f9a8 	bl	8007728 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80063d8:	4b2b      	ldr	r3, [pc, #172]	; (8006488 <prvAddNewTaskToReadyList+0xbc>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	3301      	adds	r3, #1
 80063de:	4a2a      	ldr	r2, [pc, #168]	; (8006488 <prvAddNewTaskToReadyList+0xbc>)
 80063e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80063e2:	4b2a      	ldr	r3, [pc, #168]	; (800648c <prvAddNewTaskToReadyList+0xc0>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d109      	bne.n	80063fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80063ea:	4a28      	ldr	r2, [pc, #160]	; (800648c <prvAddNewTaskToReadyList+0xc0>)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80063f0:	4b25      	ldr	r3, [pc, #148]	; (8006488 <prvAddNewTaskToReadyList+0xbc>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d110      	bne.n	800641a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80063f8:	f000 fc08 	bl	8006c0c <prvInitialiseTaskLists>
 80063fc:	e00d      	b.n	800641a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80063fe:	4b24      	ldr	r3, [pc, #144]	; (8006490 <prvAddNewTaskToReadyList+0xc4>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d109      	bne.n	800641a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006406:	4b21      	ldr	r3, [pc, #132]	; (800648c <prvAddNewTaskToReadyList+0xc0>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006410:	429a      	cmp	r2, r3
 8006412:	d802      	bhi.n	800641a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006414:	4a1d      	ldr	r2, [pc, #116]	; (800648c <prvAddNewTaskToReadyList+0xc0>)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800641a:	4b1e      	ldr	r3, [pc, #120]	; (8006494 <prvAddNewTaskToReadyList+0xc8>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	3301      	adds	r3, #1
 8006420:	4a1c      	ldr	r2, [pc, #112]	; (8006494 <prvAddNewTaskToReadyList+0xc8>)
 8006422:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006428:	4b1b      	ldr	r3, [pc, #108]	; (8006498 <prvAddNewTaskToReadyList+0xcc>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	429a      	cmp	r2, r3
 800642e:	d903      	bls.n	8006438 <prvAddNewTaskToReadyList+0x6c>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006434:	4a18      	ldr	r2, [pc, #96]	; (8006498 <prvAddNewTaskToReadyList+0xcc>)
 8006436:	6013      	str	r3, [r2, #0]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800643c:	4613      	mov	r3, r2
 800643e:	009b      	lsls	r3, r3, #2
 8006440:	4413      	add	r3, r2
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	4a15      	ldr	r2, [pc, #84]	; (800649c <prvAddNewTaskToReadyList+0xd0>)
 8006446:	441a      	add	r2, r3
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	3304      	adds	r3, #4
 800644c:	4619      	mov	r1, r3
 800644e:	4610      	mov	r0, r2
 8006450:	f7ff f8b9 	bl	80055c6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006454:	f001 f996 	bl	8007784 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006458:	4b0d      	ldr	r3, [pc, #52]	; (8006490 <prvAddNewTaskToReadyList+0xc4>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d00e      	beq.n	800647e <prvAddNewTaskToReadyList+0xb2>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006460:	4b0a      	ldr	r3, [pc, #40]	; (800648c <prvAddNewTaskToReadyList+0xc0>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800646a:	429a      	cmp	r2, r3
 800646c:	d207      	bcs.n	800647e <prvAddNewTaskToReadyList+0xb2>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800646e:	4b0c      	ldr	r3, [pc, #48]	; (80064a0 <prvAddNewTaskToReadyList+0xd4>)
 8006470:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006474:	601a      	str	r2, [r3, #0]
 8006476:	f3bf 8f4f 	dsb	sy
 800647a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800647e:	bf00      	nop
 8006480:	3708      	adds	r7, #8
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop
 8006488:	20000bb8 	.word	0x20000bb8
 800648c:	200006e4 	.word	0x200006e4
 8006490:	20000bc4 	.word	0x20000bc4
 8006494:	20000bd4 	.word	0x20000bd4
 8006498:	20000bc0 	.word	0x20000bc0
 800649c:	200006e8 	.word	0x200006e8
 80064a0:	e000ed04 	.word	0xe000ed04

080064a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b084      	sub	sp, #16
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80064ac:	2300      	movs	r3, #0
 80064ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d016      	beq.n	80064e4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80064b6:	4b13      	ldr	r3, [pc, #76]	; (8006504 <vTaskDelay+0x60>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d009      	beq.n	80064d2 <vTaskDelay+0x2e>
 80064be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c2:	f383 8811 	msr	BASEPRI, r3
 80064c6:	f3bf 8f6f 	isb	sy
 80064ca:	f3bf 8f4f 	dsb	sy
 80064ce:	60bb      	str	r3, [r7, #8]
 80064d0:	e7fe      	b.n	80064d0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80064d2:	f000 f87f 	bl	80065d4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80064d6:	2100      	movs	r1, #0
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f000 fcdf 	bl	8006e9c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80064de:	f000 f887 	bl	80065f0 <xTaskResumeAll>
 80064e2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d107      	bne.n	80064fa <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80064ea:	4b07      	ldr	r3, [pc, #28]	; (8006508 <vTaskDelay+0x64>)
 80064ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064f0:	601a      	str	r2, [r3, #0]
 80064f2:	f3bf 8f4f 	dsb	sy
 80064f6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80064fa:	bf00      	nop
 80064fc:	3710      	adds	r7, #16
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop
 8006504:	20000be0 	.word	0x20000be0
 8006508:	e000ed04 	.word	0xe000ed04

0800650c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b08a      	sub	sp, #40	; 0x28
 8006510:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006512:	2300      	movs	r3, #0
 8006514:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006516:	2300      	movs	r3, #0
 8006518:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800651a:	463a      	mov	r2, r7
 800651c:	1d39      	adds	r1, r7, #4
 800651e:	f107 0308 	add.w	r3, r7, #8
 8006522:	4618      	mov	r0, r3
 8006524:	f7fe fff2 	bl	800550c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006528:	6839      	ldr	r1, [r7, #0]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	68ba      	ldr	r2, [r7, #8]
 800652e:	9202      	str	r2, [sp, #8]
 8006530:	9301      	str	r3, [sp, #4]
 8006532:	2300      	movs	r3, #0
 8006534:	9300      	str	r3, [sp, #0]
 8006536:	2300      	movs	r3, #0
 8006538:	460a      	mov	r2, r1
 800653a:	4920      	ldr	r1, [pc, #128]	; (80065bc <vTaskStartScheduler+0xb0>)
 800653c:	4820      	ldr	r0, [pc, #128]	; (80065c0 <vTaskStartScheduler+0xb4>)
 800653e:	f7ff fe21 	bl	8006184 <xTaskCreateStatic>
 8006542:	4602      	mov	r2, r0
 8006544:	4b1f      	ldr	r3, [pc, #124]	; (80065c4 <vTaskStartScheduler+0xb8>)
 8006546:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006548:	4b1e      	ldr	r3, [pc, #120]	; (80065c4 <vTaskStartScheduler+0xb8>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d002      	beq.n	8006556 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006550:	2301      	movs	r3, #1
 8006552:	617b      	str	r3, [r7, #20]
 8006554:	e001      	b.n	800655a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006556:	2300      	movs	r3, #0
 8006558:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	2b01      	cmp	r3, #1
 800655e:	d102      	bne.n	8006566 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006560:	f000 fcf0 	bl	8006f44 <xTimerCreateTimerTask>
 8006564:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	2b01      	cmp	r3, #1
 800656a:	d115      	bne.n	8006598 <vTaskStartScheduler+0x8c>
 800656c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006570:	f383 8811 	msr	BASEPRI, r3
 8006574:	f3bf 8f6f 	isb	sy
 8006578:	f3bf 8f4f 	dsb	sy
 800657c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800657e:	4b12      	ldr	r3, [pc, #72]	; (80065c8 <vTaskStartScheduler+0xbc>)
 8006580:	f04f 32ff 	mov.w	r2, #4294967295
 8006584:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006586:	4b11      	ldr	r3, [pc, #68]	; (80065cc <vTaskStartScheduler+0xc0>)
 8006588:	2201      	movs	r2, #1
 800658a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800658c:	4b10      	ldr	r3, [pc, #64]	; (80065d0 <vTaskStartScheduler+0xc4>)
 800658e:	2200      	movs	r2, #0
 8006590:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006592:	f001 f859 	bl	8007648 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006596:	e00d      	b.n	80065b4 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800659e:	d109      	bne.n	80065b4 <vTaskStartScheduler+0xa8>
 80065a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a4:	f383 8811 	msr	BASEPRI, r3
 80065a8:	f3bf 8f6f 	isb	sy
 80065ac:	f3bf 8f4f 	dsb	sy
 80065b0:	60fb      	str	r3, [r7, #12]
 80065b2:	e7fe      	b.n	80065b2 <vTaskStartScheduler+0xa6>
}
 80065b4:	bf00      	nop
 80065b6:	3718      	adds	r7, #24
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}
 80065bc:	08007d68 	.word	0x08007d68
 80065c0:	08006bdd 	.word	0x08006bdd
 80065c4:	20000bdc 	.word	0x20000bdc
 80065c8:	20000bd8 	.word	0x20000bd8
 80065cc:	20000bc4 	.word	0x20000bc4
 80065d0:	20000bbc 	.word	0x20000bbc

080065d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80065d4:	b480      	push	{r7}
 80065d6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80065d8:	4b04      	ldr	r3, [pc, #16]	; (80065ec <vTaskSuspendAll+0x18>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	3301      	adds	r3, #1
 80065de:	4a03      	ldr	r2, [pc, #12]	; (80065ec <vTaskSuspendAll+0x18>)
 80065e0:	6013      	str	r3, [r2, #0]
}
 80065e2:	bf00      	nop
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bc80      	pop	{r7}
 80065e8:	4770      	bx	lr
 80065ea:	bf00      	nop
 80065ec:	20000be0 	.word	0x20000be0

080065f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b084      	sub	sp, #16
 80065f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80065f6:	2300      	movs	r3, #0
 80065f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80065fa:	2300      	movs	r3, #0
 80065fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80065fe:	4b41      	ldr	r3, [pc, #260]	; (8006704 <xTaskResumeAll+0x114>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d109      	bne.n	800661a <xTaskResumeAll+0x2a>
 8006606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800660a:	f383 8811 	msr	BASEPRI, r3
 800660e:	f3bf 8f6f 	isb	sy
 8006612:	f3bf 8f4f 	dsb	sy
 8006616:	603b      	str	r3, [r7, #0]
 8006618:	e7fe      	b.n	8006618 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800661a:	f001 f885 	bl	8007728 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800661e:	4b39      	ldr	r3, [pc, #228]	; (8006704 <xTaskResumeAll+0x114>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	3b01      	subs	r3, #1
 8006624:	4a37      	ldr	r2, [pc, #220]	; (8006704 <xTaskResumeAll+0x114>)
 8006626:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006628:	4b36      	ldr	r3, [pc, #216]	; (8006704 <xTaskResumeAll+0x114>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d162      	bne.n	80066f6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006630:	4b35      	ldr	r3, [pc, #212]	; (8006708 <xTaskResumeAll+0x118>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d05e      	beq.n	80066f6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006638:	e02f      	b.n	800669a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800663a:	4b34      	ldr	r3, [pc, #208]	; (800670c <xTaskResumeAll+0x11c>)
 800663c:	68db      	ldr	r3, [r3, #12]
 800663e:	68db      	ldr	r3, [r3, #12]
 8006640:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	3318      	adds	r3, #24
 8006646:	4618      	mov	r0, r3
 8006648:	f7ff f818 	bl	800567c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	3304      	adds	r3, #4
 8006650:	4618      	mov	r0, r3
 8006652:	f7ff f813 	bl	800567c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800665a:	4b2d      	ldr	r3, [pc, #180]	; (8006710 <xTaskResumeAll+0x120>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	429a      	cmp	r2, r3
 8006660:	d903      	bls.n	800666a <xTaskResumeAll+0x7a>
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006666:	4a2a      	ldr	r2, [pc, #168]	; (8006710 <xTaskResumeAll+0x120>)
 8006668:	6013      	str	r3, [r2, #0]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800666e:	4613      	mov	r3, r2
 8006670:	009b      	lsls	r3, r3, #2
 8006672:	4413      	add	r3, r2
 8006674:	009b      	lsls	r3, r3, #2
 8006676:	4a27      	ldr	r2, [pc, #156]	; (8006714 <xTaskResumeAll+0x124>)
 8006678:	441a      	add	r2, r3
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	3304      	adds	r3, #4
 800667e:	4619      	mov	r1, r3
 8006680:	4610      	mov	r0, r2
 8006682:	f7fe ffa0 	bl	80055c6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800668a:	4b23      	ldr	r3, [pc, #140]	; (8006718 <xTaskResumeAll+0x128>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006690:	429a      	cmp	r2, r3
 8006692:	d302      	bcc.n	800669a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006694:	4b21      	ldr	r3, [pc, #132]	; (800671c <xTaskResumeAll+0x12c>)
 8006696:	2201      	movs	r2, #1
 8006698:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800669a:	4b1c      	ldr	r3, [pc, #112]	; (800670c <xTaskResumeAll+0x11c>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d1cb      	bne.n	800663a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d001      	beq.n	80066ac <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80066a8:	f000 fb4a 	bl	8006d40 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80066ac:	4b1c      	ldr	r3, [pc, #112]	; (8006720 <xTaskResumeAll+0x130>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d010      	beq.n	80066da <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80066b8:	f000 f844 	bl	8006744 <xTaskIncrementTick>
 80066bc:	4603      	mov	r3, r0
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d002      	beq.n	80066c8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80066c2:	4b16      	ldr	r3, [pc, #88]	; (800671c <xTaskResumeAll+0x12c>)
 80066c4:	2201      	movs	r2, #1
 80066c6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	3b01      	subs	r3, #1
 80066cc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d1f1      	bne.n	80066b8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80066d4:	4b12      	ldr	r3, [pc, #72]	; (8006720 <xTaskResumeAll+0x130>)
 80066d6:	2200      	movs	r2, #0
 80066d8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80066da:	4b10      	ldr	r3, [pc, #64]	; (800671c <xTaskResumeAll+0x12c>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d009      	beq.n	80066f6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80066e2:	2301      	movs	r3, #1
 80066e4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80066e6:	4b0f      	ldr	r3, [pc, #60]	; (8006724 <xTaskResumeAll+0x134>)
 80066e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066ec:	601a      	str	r2, [r3, #0]
 80066ee:	f3bf 8f4f 	dsb	sy
 80066f2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80066f6:	f001 f845 	bl	8007784 <vPortExitCritical>

	return xAlreadyYielded;
 80066fa:	68bb      	ldr	r3, [r7, #8]
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3710      	adds	r7, #16
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}
 8006704:	20000be0 	.word	0x20000be0
 8006708:	20000bb8 	.word	0x20000bb8
 800670c:	20000b78 	.word	0x20000b78
 8006710:	20000bc0 	.word	0x20000bc0
 8006714:	200006e8 	.word	0x200006e8
 8006718:	200006e4 	.word	0x200006e4
 800671c:	20000bcc 	.word	0x20000bcc
 8006720:	20000bc8 	.word	0x20000bc8
 8006724:	e000ed04 	.word	0xe000ed04

08006728 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006728:	b480      	push	{r7}
 800672a:	b083      	sub	sp, #12
 800672c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800672e:	4b04      	ldr	r3, [pc, #16]	; (8006740 <xTaskGetTickCount+0x18>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006734:	687b      	ldr	r3, [r7, #4]
}
 8006736:	4618      	mov	r0, r3
 8006738:	370c      	adds	r7, #12
 800673a:	46bd      	mov	sp, r7
 800673c:	bc80      	pop	{r7}
 800673e:	4770      	bx	lr
 8006740:	20000bbc 	.word	0x20000bbc

08006744 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b086      	sub	sp, #24
 8006748:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800674a:	2300      	movs	r3, #0
 800674c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800674e:	4b51      	ldr	r3, [pc, #324]	; (8006894 <xTaskIncrementTick+0x150>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	2b00      	cmp	r3, #0
 8006754:	f040 808d 	bne.w	8006872 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006758:	4b4f      	ldr	r3, [pc, #316]	; (8006898 <xTaskIncrementTick+0x154>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	3301      	adds	r3, #1
 800675e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006760:	4a4d      	ldr	r2, [pc, #308]	; (8006898 <xTaskIncrementTick+0x154>)
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d11f      	bne.n	80067ac <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800676c:	4b4b      	ldr	r3, [pc, #300]	; (800689c <xTaskIncrementTick+0x158>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d009      	beq.n	800678a <xTaskIncrementTick+0x46>
 8006776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800677a:	f383 8811 	msr	BASEPRI, r3
 800677e:	f3bf 8f6f 	isb	sy
 8006782:	f3bf 8f4f 	dsb	sy
 8006786:	603b      	str	r3, [r7, #0]
 8006788:	e7fe      	b.n	8006788 <xTaskIncrementTick+0x44>
 800678a:	4b44      	ldr	r3, [pc, #272]	; (800689c <xTaskIncrementTick+0x158>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	60fb      	str	r3, [r7, #12]
 8006790:	4b43      	ldr	r3, [pc, #268]	; (80068a0 <xTaskIncrementTick+0x15c>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a41      	ldr	r2, [pc, #260]	; (800689c <xTaskIncrementTick+0x158>)
 8006796:	6013      	str	r3, [r2, #0]
 8006798:	4a41      	ldr	r2, [pc, #260]	; (80068a0 <xTaskIncrementTick+0x15c>)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	6013      	str	r3, [r2, #0]
 800679e:	4b41      	ldr	r3, [pc, #260]	; (80068a4 <xTaskIncrementTick+0x160>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	3301      	adds	r3, #1
 80067a4:	4a3f      	ldr	r2, [pc, #252]	; (80068a4 <xTaskIncrementTick+0x160>)
 80067a6:	6013      	str	r3, [r2, #0]
 80067a8:	f000 faca 	bl	8006d40 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80067ac:	4b3e      	ldr	r3, [pc, #248]	; (80068a8 <xTaskIncrementTick+0x164>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	693a      	ldr	r2, [r7, #16]
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d34e      	bcc.n	8006854 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067b6:	4b39      	ldr	r3, [pc, #228]	; (800689c <xTaskIncrementTick+0x158>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d101      	bne.n	80067c4 <xTaskIncrementTick+0x80>
 80067c0:	2301      	movs	r3, #1
 80067c2:	e000      	b.n	80067c6 <xTaskIncrementTick+0x82>
 80067c4:	2300      	movs	r3, #0
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d004      	beq.n	80067d4 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067ca:	4b37      	ldr	r3, [pc, #220]	; (80068a8 <xTaskIncrementTick+0x164>)
 80067cc:	f04f 32ff 	mov.w	r2, #4294967295
 80067d0:	601a      	str	r2, [r3, #0]
					break;
 80067d2:	e03f      	b.n	8006854 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80067d4:	4b31      	ldr	r3, [pc, #196]	; (800689c <xTaskIncrementTick+0x158>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	68db      	ldr	r3, [r3, #12]
 80067da:	68db      	ldr	r3, [r3, #12]
 80067dc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80067e4:	693a      	ldr	r2, [r7, #16]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d203      	bcs.n	80067f4 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80067ec:	4a2e      	ldr	r2, [pc, #184]	; (80068a8 <xTaskIncrementTick+0x164>)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6013      	str	r3, [r2, #0]
						break;
 80067f2:	e02f      	b.n	8006854 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	3304      	adds	r3, #4
 80067f8:	4618      	mov	r0, r3
 80067fa:	f7fe ff3f 	bl	800567c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006802:	2b00      	cmp	r3, #0
 8006804:	d004      	beq.n	8006810 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	3318      	adds	r3, #24
 800680a:	4618      	mov	r0, r3
 800680c:	f7fe ff36 	bl	800567c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006814:	4b25      	ldr	r3, [pc, #148]	; (80068ac <xTaskIncrementTick+0x168>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	429a      	cmp	r2, r3
 800681a:	d903      	bls.n	8006824 <xTaskIncrementTick+0xe0>
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006820:	4a22      	ldr	r2, [pc, #136]	; (80068ac <xTaskIncrementTick+0x168>)
 8006822:	6013      	str	r3, [r2, #0]
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006828:	4613      	mov	r3, r2
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	4413      	add	r3, r2
 800682e:	009b      	lsls	r3, r3, #2
 8006830:	4a1f      	ldr	r2, [pc, #124]	; (80068b0 <xTaskIncrementTick+0x16c>)
 8006832:	441a      	add	r2, r3
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	3304      	adds	r3, #4
 8006838:	4619      	mov	r1, r3
 800683a:	4610      	mov	r0, r2
 800683c:	f7fe fec3 	bl	80055c6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006844:	4b1b      	ldr	r3, [pc, #108]	; (80068b4 <xTaskIncrementTick+0x170>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800684a:	429a      	cmp	r2, r3
 800684c:	d3b3      	bcc.n	80067b6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800684e:	2301      	movs	r3, #1
 8006850:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006852:	e7b0      	b.n	80067b6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006854:	4b17      	ldr	r3, [pc, #92]	; (80068b4 <xTaskIncrementTick+0x170>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800685a:	4915      	ldr	r1, [pc, #84]	; (80068b0 <xTaskIncrementTick+0x16c>)
 800685c:	4613      	mov	r3, r2
 800685e:	009b      	lsls	r3, r3, #2
 8006860:	4413      	add	r3, r2
 8006862:	009b      	lsls	r3, r3, #2
 8006864:	440b      	add	r3, r1
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	2b01      	cmp	r3, #1
 800686a:	d907      	bls.n	800687c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800686c:	2301      	movs	r3, #1
 800686e:	617b      	str	r3, [r7, #20]
 8006870:	e004      	b.n	800687c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006872:	4b11      	ldr	r3, [pc, #68]	; (80068b8 <xTaskIncrementTick+0x174>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	3301      	adds	r3, #1
 8006878:	4a0f      	ldr	r2, [pc, #60]	; (80068b8 <xTaskIncrementTick+0x174>)
 800687a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800687c:	4b0f      	ldr	r3, [pc, #60]	; (80068bc <xTaskIncrementTick+0x178>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d001      	beq.n	8006888 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8006884:	2301      	movs	r3, #1
 8006886:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006888:	697b      	ldr	r3, [r7, #20]
}
 800688a:	4618      	mov	r0, r3
 800688c:	3718      	adds	r7, #24
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}
 8006892:	bf00      	nop
 8006894:	20000be0 	.word	0x20000be0
 8006898:	20000bbc 	.word	0x20000bbc
 800689c:	20000b70 	.word	0x20000b70
 80068a0:	20000b74 	.word	0x20000b74
 80068a4:	20000bd0 	.word	0x20000bd0
 80068a8:	20000bd8 	.word	0x20000bd8
 80068ac:	20000bc0 	.word	0x20000bc0
 80068b0:	200006e8 	.word	0x200006e8
 80068b4:	200006e4 	.word	0x200006e4
 80068b8:	20000bc8 	.word	0x20000bc8
 80068bc:	20000bcc 	.word	0x20000bcc

080068c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80068c0:	b480      	push	{r7}
 80068c2:	b085      	sub	sp, #20
 80068c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80068c6:	4b27      	ldr	r3, [pc, #156]	; (8006964 <vTaskSwitchContext+0xa4>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d003      	beq.n	80068d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80068ce:	4b26      	ldr	r3, [pc, #152]	; (8006968 <vTaskSwitchContext+0xa8>)
 80068d0:	2201      	movs	r2, #1
 80068d2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80068d4:	e040      	b.n	8006958 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80068d6:	4b24      	ldr	r3, [pc, #144]	; (8006968 <vTaskSwitchContext+0xa8>)
 80068d8:	2200      	movs	r2, #0
 80068da:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80068dc:	4b23      	ldr	r3, [pc, #140]	; (800696c <vTaskSwitchContext+0xac>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	60fb      	str	r3, [r7, #12]
 80068e2:	e00f      	b.n	8006904 <vTaskSwitchContext+0x44>
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d109      	bne.n	80068fe <vTaskSwitchContext+0x3e>
 80068ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ee:	f383 8811 	msr	BASEPRI, r3
 80068f2:	f3bf 8f6f 	isb	sy
 80068f6:	f3bf 8f4f 	dsb	sy
 80068fa:	607b      	str	r3, [r7, #4]
 80068fc:	e7fe      	b.n	80068fc <vTaskSwitchContext+0x3c>
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	3b01      	subs	r3, #1
 8006902:	60fb      	str	r3, [r7, #12]
 8006904:	491a      	ldr	r1, [pc, #104]	; (8006970 <vTaskSwitchContext+0xb0>)
 8006906:	68fa      	ldr	r2, [r7, #12]
 8006908:	4613      	mov	r3, r2
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	4413      	add	r3, r2
 800690e:	009b      	lsls	r3, r3, #2
 8006910:	440b      	add	r3, r1
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d0e5      	beq.n	80068e4 <vTaskSwitchContext+0x24>
 8006918:	68fa      	ldr	r2, [r7, #12]
 800691a:	4613      	mov	r3, r2
 800691c:	009b      	lsls	r3, r3, #2
 800691e:	4413      	add	r3, r2
 8006920:	009b      	lsls	r3, r3, #2
 8006922:	4a13      	ldr	r2, [pc, #76]	; (8006970 <vTaskSwitchContext+0xb0>)
 8006924:	4413      	add	r3, r2
 8006926:	60bb      	str	r3, [r7, #8]
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	685a      	ldr	r2, [r3, #4]
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	605a      	str	r2, [r3, #4]
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	685a      	ldr	r2, [r3, #4]
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	3308      	adds	r3, #8
 800693a:	429a      	cmp	r2, r3
 800693c:	d104      	bne.n	8006948 <vTaskSwitchContext+0x88>
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	685a      	ldr	r2, [r3, #4]
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	605a      	str	r2, [r3, #4]
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	68db      	ldr	r3, [r3, #12]
 800694e:	4a09      	ldr	r2, [pc, #36]	; (8006974 <vTaskSwitchContext+0xb4>)
 8006950:	6013      	str	r3, [r2, #0]
 8006952:	4a06      	ldr	r2, [pc, #24]	; (800696c <vTaskSwitchContext+0xac>)
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	6013      	str	r3, [r2, #0]
}
 8006958:	bf00      	nop
 800695a:	3714      	adds	r7, #20
 800695c:	46bd      	mov	sp, r7
 800695e:	bc80      	pop	{r7}
 8006960:	4770      	bx	lr
 8006962:	bf00      	nop
 8006964:	20000be0 	.word	0x20000be0
 8006968:	20000bcc 	.word	0x20000bcc
 800696c:	20000bc0 	.word	0x20000bc0
 8006970:	200006e8 	.word	0x200006e8
 8006974:	200006e4 	.word	0x200006e4

08006978 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b084      	sub	sp, #16
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d109      	bne.n	800699c <vTaskPlaceOnEventList+0x24>
 8006988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800698c:	f383 8811 	msr	BASEPRI, r3
 8006990:	f3bf 8f6f 	isb	sy
 8006994:	f3bf 8f4f 	dsb	sy
 8006998:	60fb      	str	r3, [r7, #12]
 800699a:	e7fe      	b.n	800699a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800699c:	4b07      	ldr	r3, [pc, #28]	; (80069bc <vTaskPlaceOnEventList+0x44>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	3318      	adds	r3, #24
 80069a2:	4619      	mov	r1, r3
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f7fe fe31 	bl	800560c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80069aa:	2101      	movs	r1, #1
 80069ac:	6838      	ldr	r0, [r7, #0]
 80069ae:	f000 fa75 	bl	8006e9c <prvAddCurrentTaskToDelayedList>
}
 80069b2:	bf00      	nop
 80069b4:	3710      	adds	r7, #16
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
 80069ba:	bf00      	nop
 80069bc:	200006e4 	.word	0x200006e4

080069c0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b086      	sub	sp, #24
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	60f8      	str	r0, [r7, #12]
 80069c8:	60b9      	str	r1, [r7, #8]
 80069ca:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d109      	bne.n	80069e6 <vTaskPlaceOnEventListRestricted+0x26>
 80069d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d6:	f383 8811 	msr	BASEPRI, r3
 80069da:	f3bf 8f6f 	isb	sy
 80069de:	f3bf 8f4f 	dsb	sy
 80069e2:	617b      	str	r3, [r7, #20]
 80069e4:	e7fe      	b.n	80069e4 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80069e6:	4b0a      	ldr	r3, [pc, #40]	; (8006a10 <vTaskPlaceOnEventListRestricted+0x50>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	3318      	adds	r3, #24
 80069ec:	4619      	mov	r1, r3
 80069ee:	68f8      	ldr	r0, [r7, #12]
 80069f0:	f7fe fde9 	bl	80055c6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d002      	beq.n	8006a00 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80069fa:	f04f 33ff 	mov.w	r3, #4294967295
 80069fe:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006a00:	6879      	ldr	r1, [r7, #4]
 8006a02:	68b8      	ldr	r0, [r7, #8]
 8006a04:	f000 fa4a 	bl	8006e9c <prvAddCurrentTaskToDelayedList>
	}
 8006a08:	bf00      	nop
 8006a0a:	3718      	adds	r7, #24
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}
 8006a10:	200006e4 	.word	0x200006e4

08006a14 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b086      	sub	sp, #24
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	68db      	ldr	r3, [r3, #12]
 8006a20:	68db      	ldr	r3, [r3, #12]
 8006a22:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d109      	bne.n	8006a3e <xTaskRemoveFromEventList+0x2a>
 8006a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a2e:	f383 8811 	msr	BASEPRI, r3
 8006a32:	f3bf 8f6f 	isb	sy
 8006a36:	f3bf 8f4f 	dsb	sy
 8006a3a:	60fb      	str	r3, [r7, #12]
 8006a3c:	e7fe      	b.n	8006a3c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	3318      	adds	r3, #24
 8006a42:	4618      	mov	r0, r3
 8006a44:	f7fe fe1a 	bl	800567c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a48:	4b1d      	ldr	r3, [pc, #116]	; (8006ac0 <xTaskRemoveFromEventList+0xac>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d11d      	bne.n	8006a8c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	3304      	adds	r3, #4
 8006a54:	4618      	mov	r0, r3
 8006a56:	f7fe fe11 	bl	800567c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a5e:	4b19      	ldr	r3, [pc, #100]	; (8006ac4 <xTaskRemoveFromEventList+0xb0>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	429a      	cmp	r2, r3
 8006a64:	d903      	bls.n	8006a6e <xTaskRemoveFromEventList+0x5a>
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a6a:	4a16      	ldr	r2, [pc, #88]	; (8006ac4 <xTaskRemoveFromEventList+0xb0>)
 8006a6c:	6013      	str	r3, [r2, #0]
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a72:	4613      	mov	r3, r2
 8006a74:	009b      	lsls	r3, r3, #2
 8006a76:	4413      	add	r3, r2
 8006a78:	009b      	lsls	r3, r3, #2
 8006a7a:	4a13      	ldr	r2, [pc, #76]	; (8006ac8 <xTaskRemoveFromEventList+0xb4>)
 8006a7c:	441a      	add	r2, r3
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	3304      	adds	r3, #4
 8006a82:	4619      	mov	r1, r3
 8006a84:	4610      	mov	r0, r2
 8006a86:	f7fe fd9e 	bl	80055c6 <vListInsertEnd>
 8006a8a:	e005      	b.n	8006a98 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	3318      	adds	r3, #24
 8006a90:	4619      	mov	r1, r3
 8006a92:	480e      	ldr	r0, [pc, #56]	; (8006acc <xTaskRemoveFromEventList+0xb8>)
 8006a94:	f7fe fd97 	bl	80055c6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a9c:	4b0c      	ldr	r3, [pc, #48]	; (8006ad0 <xTaskRemoveFromEventList+0xbc>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	d905      	bls.n	8006ab2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006aaa:	4b0a      	ldr	r3, [pc, #40]	; (8006ad4 <xTaskRemoveFromEventList+0xc0>)
 8006aac:	2201      	movs	r2, #1
 8006aae:	601a      	str	r2, [r3, #0]
 8006ab0:	e001      	b.n	8006ab6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006ab6:	697b      	ldr	r3, [r7, #20]
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3718      	adds	r7, #24
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}
 8006ac0:	20000be0 	.word	0x20000be0
 8006ac4:	20000bc0 	.word	0x20000bc0
 8006ac8:	200006e8 	.word	0x200006e8
 8006acc:	20000b78 	.word	0x20000b78
 8006ad0:	200006e4 	.word	0x200006e4
 8006ad4:	20000bcc 	.word	0x20000bcc

08006ad8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b083      	sub	sp, #12
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006ae0:	4b06      	ldr	r3, [pc, #24]	; (8006afc <vTaskInternalSetTimeOutState+0x24>)
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006ae8:	4b05      	ldr	r3, [pc, #20]	; (8006b00 <vTaskInternalSetTimeOutState+0x28>)
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	605a      	str	r2, [r3, #4]
}
 8006af0:	bf00      	nop
 8006af2:	370c      	adds	r7, #12
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bc80      	pop	{r7}
 8006af8:	4770      	bx	lr
 8006afa:	bf00      	nop
 8006afc:	20000bd0 	.word	0x20000bd0
 8006b00:	20000bbc 	.word	0x20000bbc

08006b04 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b088      	sub	sp, #32
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
 8006b0c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d109      	bne.n	8006b28 <xTaskCheckForTimeOut+0x24>
 8006b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b18:	f383 8811 	msr	BASEPRI, r3
 8006b1c:	f3bf 8f6f 	isb	sy
 8006b20:	f3bf 8f4f 	dsb	sy
 8006b24:	613b      	str	r3, [r7, #16]
 8006b26:	e7fe      	b.n	8006b26 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d109      	bne.n	8006b42 <xTaskCheckForTimeOut+0x3e>
 8006b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b32:	f383 8811 	msr	BASEPRI, r3
 8006b36:	f3bf 8f6f 	isb	sy
 8006b3a:	f3bf 8f4f 	dsb	sy
 8006b3e:	60fb      	str	r3, [r7, #12]
 8006b40:	e7fe      	b.n	8006b40 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8006b42:	f000 fdf1 	bl	8007728 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006b46:	4b1d      	ldr	r3, [pc, #116]	; (8006bbc <xTaskCheckForTimeOut+0xb8>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	69ba      	ldr	r2, [r7, #24]
 8006b52:	1ad3      	subs	r3, r2, r3
 8006b54:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b5e:	d102      	bne.n	8006b66 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006b60:	2300      	movs	r3, #0
 8006b62:	61fb      	str	r3, [r7, #28]
 8006b64:	e023      	b.n	8006bae <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681a      	ldr	r2, [r3, #0]
 8006b6a:	4b15      	ldr	r3, [pc, #84]	; (8006bc0 <xTaskCheckForTimeOut+0xbc>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	429a      	cmp	r2, r3
 8006b70:	d007      	beq.n	8006b82 <xTaskCheckForTimeOut+0x7e>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	69ba      	ldr	r2, [r7, #24]
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	d302      	bcc.n	8006b82 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	61fb      	str	r3, [r7, #28]
 8006b80:	e015      	b.n	8006bae <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	697a      	ldr	r2, [r7, #20]
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d20b      	bcs.n	8006ba4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	1ad2      	subs	r2, r2, r3
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f7ff ff9d 	bl	8006ad8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	61fb      	str	r3, [r7, #28]
 8006ba2:	e004      	b.n	8006bae <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006baa:	2301      	movs	r3, #1
 8006bac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006bae:	f000 fde9 	bl	8007784 <vPortExitCritical>

	return xReturn;
 8006bb2:	69fb      	ldr	r3, [r7, #28]
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3720      	adds	r7, #32
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}
 8006bbc:	20000bbc 	.word	0x20000bbc
 8006bc0:	20000bd0 	.word	0x20000bd0

08006bc4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006bc8:	4b03      	ldr	r3, [pc, #12]	; (8006bd8 <vTaskMissedYield+0x14>)
 8006bca:	2201      	movs	r2, #1
 8006bcc:	601a      	str	r2, [r3, #0]
}
 8006bce:	bf00      	nop
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bc80      	pop	{r7}
 8006bd4:	4770      	bx	lr
 8006bd6:	bf00      	nop
 8006bd8:	20000bcc 	.word	0x20000bcc

08006bdc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b082      	sub	sp, #8
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006be4:	f000 f852 	bl	8006c8c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006be8:	4b06      	ldr	r3, [pc, #24]	; (8006c04 <prvIdleTask+0x28>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	d9f9      	bls.n	8006be4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006bf0:	4b05      	ldr	r3, [pc, #20]	; (8006c08 <prvIdleTask+0x2c>)
 8006bf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bf6:	601a      	str	r2, [r3, #0]
 8006bf8:	f3bf 8f4f 	dsb	sy
 8006bfc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006c00:	e7f0      	b.n	8006be4 <prvIdleTask+0x8>
 8006c02:	bf00      	nop
 8006c04:	200006e8 	.word	0x200006e8
 8006c08:	e000ed04 	.word	0xe000ed04

08006c0c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b082      	sub	sp, #8
 8006c10:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c12:	2300      	movs	r3, #0
 8006c14:	607b      	str	r3, [r7, #4]
 8006c16:	e00c      	b.n	8006c32 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006c18:	687a      	ldr	r2, [r7, #4]
 8006c1a:	4613      	mov	r3, r2
 8006c1c:	009b      	lsls	r3, r3, #2
 8006c1e:	4413      	add	r3, r2
 8006c20:	009b      	lsls	r3, r3, #2
 8006c22:	4a12      	ldr	r2, [pc, #72]	; (8006c6c <prvInitialiseTaskLists+0x60>)
 8006c24:	4413      	add	r3, r2
 8006c26:	4618      	mov	r0, r3
 8006c28:	f7fe fca2 	bl	8005570 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	3301      	adds	r3, #1
 8006c30:	607b      	str	r3, [r7, #4]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2b37      	cmp	r3, #55	; 0x37
 8006c36:	d9ef      	bls.n	8006c18 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006c38:	480d      	ldr	r0, [pc, #52]	; (8006c70 <prvInitialiseTaskLists+0x64>)
 8006c3a:	f7fe fc99 	bl	8005570 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006c3e:	480d      	ldr	r0, [pc, #52]	; (8006c74 <prvInitialiseTaskLists+0x68>)
 8006c40:	f7fe fc96 	bl	8005570 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006c44:	480c      	ldr	r0, [pc, #48]	; (8006c78 <prvInitialiseTaskLists+0x6c>)
 8006c46:	f7fe fc93 	bl	8005570 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006c4a:	480c      	ldr	r0, [pc, #48]	; (8006c7c <prvInitialiseTaskLists+0x70>)
 8006c4c:	f7fe fc90 	bl	8005570 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006c50:	480b      	ldr	r0, [pc, #44]	; (8006c80 <prvInitialiseTaskLists+0x74>)
 8006c52:	f7fe fc8d 	bl	8005570 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006c56:	4b0b      	ldr	r3, [pc, #44]	; (8006c84 <prvInitialiseTaskLists+0x78>)
 8006c58:	4a05      	ldr	r2, [pc, #20]	; (8006c70 <prvInitialiseTaskLists+0x64>)
 8006c5a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006c5c:	4b0a      	ldr	r3, [pc, #40]	; (8006c88 <prvInitialiseTaskLists+0x7c>)
 8006c5e:	4a05      	ldr	r2, [pc, #20]	; (8006c74 <prvInitialiseTaskLists+0x68>)
 8006c60:	601a      	str	r2, [r3, #0]
}
 8006c62:	bf00      	nop
 8006c64:	3708      	adds	r7, #8
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}
 8006c6a:	bf00      	nop
 8006c6c:	200006e8 	.word	0x200006e8
 8006c70:	20000b48 	.word	0x20000b48
 8006c74:	20000b5c 	.word	0x20000b5c
 8006c78:	20000b78 	.word	0x20000b78
 8006c7c:	20000b8c 	.word	0x20000b8c
 8006c80:	20000ba4 	.word	0x20000ba4
 8006c84:	20000b70 	.word	0x20000b70
 8006c88:	20000b74 	.word	0x20000b74

08006c8c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b082      	sub	sp, #8
 8006c90:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006c92:	e019      	b.n	8006cc8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006c94:	f000 fd48 	bl	8007728 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006c98:	4b0f      	ldr	r3, [pc, #60]	; (8006cd8 <prvCheckTasksWaitingTermination+0x4c>)
 8006c9a:	68db      	ldr	r3, [r3, #12]
 8006c9c:	68db      	ldr	r3, [r3, #12]
 8006c9e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	3304      	adds	r3, #4
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f7fe fce9 	bl	800567c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006caa:	4b0c      	ldr	r3, [pc, #48]	; (8006cdc <prvCheckTasksWaitingTermination+0x50>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	3b01      	subs	r3, #1
 8006cb0:	4a0a      	ldr	r2, [pc, #40]	; (8006cdc <prvCheckTasksWaitingTermination+0x50>)
 8006cb2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006cb4:	4b0a      	ldr	r3, [pc, #40]	; (8006ce0 <prvCheckTasksWaitingTermination+0x54>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	3b01      	subs	r3, #1
 8006cba:	4a09      	ldr	r2, [pc, #36]	; (8006ce0 <prvCheckTasksWaitingTermination+0x54>)
 8006cbc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006cbe:	f000 fd61 	bl	8007784 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f000 f80e 	bl	8006ce4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006cc8:	4b05      	ldr	r3, [pc, #20]	; (8006ce0 <prvCheckTasksWaitingTermination+0x54>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d1e1      	bne.n	8006c94 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006cd0:	bf00      	nop
 8006cd2:	3708      	adds	r7, #8
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}
 8006cd8:	20000b8c 	.word	0x20000b8c
 8006cdc:	20000bb8 	.word	0x20000bb8
 8006ce0:	20000ba0 	.word	0x20000ba0

08006ce4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b084      	sub	sp, #16
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d108      	bne.n	8006d08 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f000 fecc 	bl	8007a98 <vPortFree>
				vPortFree( pxTCB );
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f000 fec9 	bl	8007a98 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006d06:	e017      	b.n	8006d38 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d103      	bne.n	8006d1a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f000 fec0 	bl	8007a98 <vPortFree>
	}
 8006d18:	e00e      	b.n	8006d38 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d20:	2b02      	cmp	r3, #2
 8006d22:	d009      	beq.n	8006d38 <prvDeleteTCB+0x54>
 8006d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d28:	f383 8811 	msr	BASEPRI, r3
 8006d2c:	f3bf 8f6f 	isb	sy
 8006d30:	f3bf 8f4f 	dsb	sy
 8006d34:	60fb      	str	r3, [r7, #12]
 8006d36:	e7fe      	b.n	8006d36 <prvDeleteTCB+0x52>
	}
 8006d38:	bf00      	nop
 8006d3a:	3710      	adds	r7, #16
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}

08006d40 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006d40:	b480      	push	{r7}
 8006d42:	b083      	sub	sp, #12
 8006d44:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d46:	4b0e      	ldr	r3, [pc, #56]	; (8006d80 <prvResetNextTaskUnblockTime+0x40>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d101      	bne.n	8006d54 <prvResetNextTaskUnblockTime+0x14>
 8006d50:	2301      	movs	r3, #1
 8006d52:	e000      	b.n	8006d56 <prvResetNextTaskUnblockTime+0x16>
 8006d54:	2300      	movs	r3, #0
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d004      	beq.n	8006d64 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006d5a:	4b0a      	ldr	r3, [pc, #40]	; (8006d84 <prvResetNextTaskUnblockTime+0x44>)
 8006d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8006d60:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006d62:	e008      	b.n	8006d76 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006d64:	4b06      	ldr	r3, [pc, #24]	; (8006d80 <prvResetNextTaskUnblockTime+0x40>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	68db      	ldr	r3, [r3, #12]
 8006d6a:	68db      	ldr	r3, [r3, #12]
 8006d6c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	4a04      	ldr	r2, [pc, #16]	; (8006d84 <prvResetNextTaskUnblockTime+0x44>)
 8006d74:	6013      	str	r3, [r2, #0]
}
 8006d76:	bf00      	nop
 8006d78:	370c      	adds	r7, #12
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bc80      	pop	{r7}
 8006d7e:	4770      	bx	lr
 8006d80:	20000b70 	.word	0x20000b70
 8006d84:	20000bd8 	.word	0x20000bd8

08006d88 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006d88:	b480      	push	{r7}
 8006d8a:	b083      	sub	sp, #12
 8006d8c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006d8e:	4b0b      	ldr	r3, [pc, #44]	; (8006dbc <xTaskGetSchedulerState+0x34>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d102      	bne.n	8006d9c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006d96:	2301      	movs	r3, #1
 8006d98:	607b      	str	r3, [r7, #4]
 8006d9a:	e008      	b.n	8006dae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d9c:	4b08      	ldr	r3, [pc, #32]	; (8006dc0 <xTaskGetSchedulerState+0x38>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d102      	bne.n	8006daa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006da4:	2302      	movs	r3, #2
 8006da6:	607b      	str	r3, [r7, #4]
 8006da8:	e001      	b.n	8006dae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006daa:	2300      	movs	r3, #0
 8006dac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006dae:	687b      	ldr	r3, [r7, #4]
	}
 8006db0:	4618      	mov	r0, r3
 8006db2:	370c      	adds	r7, #12
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bc80      	pop	{r7}
 8006db8:	4770      	bx	lr
 8006dba:	bf00      	nop
 8006dbc:	20000bc4 	.word	0x20000bc4
 8006dc0:	20000be0 	.word	0x20000be0

08006dc4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b086      	sub	sp, #24
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d054      	beq.n	8006e84 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006dda:	4b2d      	ldr	r3, [pc, #180]	; (8006e90 <xTaskPriorityDisinherit+0xcc>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	693a      	ldr	r2, [r7, #16]
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d009      	beq.n	8006df8 <xTaskPriorityDisinherit+0x34>
 8006de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de8:	f383 8811 	msr	BASEPRI, r3
 8006dec:	f3bf 8f6f 	isb	sy
 8006df0:	f3bf 8f4f 	dsb	sy
 8006df4:	60fb      	str	r3, [r7, #12]
 8006df6:	e7fe      	b.n	8006df6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d109      	bne.n	8006e14 <xTaskPriorityDisinherit+0x50>
 8006e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e04:	f383 8811 	msr	BASEPRI, r3
 8006e08:	f3bf 8f6f 	isb	sy
 8006e0c:	f3bf 8f4f 	dsb	sy
 8006e10:	60bb      	str	r3, [r7, #8]
 8006e12:	e7fe      	b.n	8006e12 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e18:	1e5a      	subs	r2, r3, #1
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d02c      	beq.n	8006e84 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d128      	bne.n	8006e84 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	3304      	adds	r3, #4
 8006e36:	4618      	mov	r0, r3
 8006e38:	f7fe fc20 	bl	800567c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e48:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e54:	4b0f      	ldr	r3, [pc, #60]	; (8006e94 <xTaskPriorityDisinherit+0xd0>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d903      	bls.n	8006e64 <xTaskPriorityDisinherit+0xa0>
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e60:	4a0c      	ldr	r2, [pc, #48]	; (8006e94 <xTaskPriorityDisinherit+0xd0>)
 8006e62:	6013      	str	r3, [r2, #0]
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e68:	4613      	mov	r3, r2
 8006e6a:	009b      	lsls	r3, r3, #2
 8006e6c:	4413      	add	r3, r2
 8006e6e:	009b      	lsls	r3, r3, #2
 8006e70:	4a09      	ldr	r2, [pc, #36]	; (8006e98 <xTaskPriorityDisinherit+0xd4>)
 8006e72:	441a      	add	r2, r3
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	3304      	adds	r3, #4
 8006e78:	4619      	mov	r1, r3
 8006e7a:	4610      	mov	r0, r2
 8006e7c:	f7fe fba3 	bl	80055c6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006e80:	2301      	movs	r3, #1
 8006e82:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006e84:	697b      	ldr	r3, [r7, #20]
	}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3718      	adds	r7, #24
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}
 8006e8e:	bf00      	nop
 8006e90:	200006e4 	.word	0x200006e4
 8006e94:	20000bc0 	.word	0x20000bc0
 8006e98:	200006e8 	.word	0x200006e8

08006e9c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b084      	sub	sp, #16
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006ea6:	4b21      	ldr	r3, [pc, #132]	; (8006f2c <prvAddCurrentTaskToDelayedList+0x90>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006eac:	4b20      	ldr	r3, [pc, #128]	; (8006f30 <prvAddCurrentTaskToDelayedList+0x94>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	3304      	adds	r3, #4
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f7fe fbe2 	bl	800567c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ebe:	d10a      	bne.n	8006ed6 <prvAddCurrentTaskToDelayedList+0x3a>
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d007      	beq.n	8006ed6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ec6:	4b1a      	ldr	r3, [pc, #104]	; (8006f30 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	3304      	adds	r3, #4
 8006ecc:	4619      	mov	r1, r3
 8006ece:	4819      	ldr	r0, [pc, #100]	; (8006f34 <prvAddCurrentTaskToDelayedList+0x98>)
 8006ed0:	f7fe fb79 	bl	80055c6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006ed4:	e026      	b.n	8006f24 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006ed6:	68fa      	ldr	r2, [r7, #12]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	4413      	add	r3, r2
 8006edc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006ede:	4b14      	ldr	r3, [pc, #80]	; (8006f30 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	68ba      	ldr	r2, [r7, #8]
 8006ee4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006ee6:	68ba      	ldr	r2, [r7, #8]
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	429a      	cmp	r2, r3
 8006eec:	d209      	bcs.n	8006f02 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006eee:	4b12      	ldr	r3, [pc, #72]	; (8006f38 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	4b0f      	ldr	r3, [pc, #60]	; (8006f30 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	3304      	adds	r3, #4
 8006ef8:	4619      	mov	r1, r3
 8006efa:	4610      	mov	r0, r2
 8006efc:	f7fe fb86 	bl	800560c <vListInsert>
}
 8006f00:	e010      	b.n	8006f24 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f02:	4b0e      	ldr	r3, [pc, #56]	; (8006f3c <prvAddCurrentTaskToDelayedList+0xa0>)
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	4b0a      	ldr	r3, [pc, #40]	; (8006f30 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	3304      	adds	r3, #4
 8006f0c:	4619      	mov	r1, r3
 8006f0e:	4610      	mov	r0, r2
 8006f10:	f7fe fb7c 	bl	800560c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006f14:	4b0a      	ldr	r3, [pc, #40]	; (8006f40 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	68ba      	ldr	r2, [r7, #8]
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d202      	bcs.n	8006f24 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006f1e:	4a08      	ldr	r2, [pc, #32]	; (8006f40 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	6013      	str	r3, [r2, #0]
}
 8006f24:	bf00      	nop
 8006f26:	3710      	adds	r7, #16
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}
 8006f2c:	20000bbc 	.word	0x20000bbc
 8006f30:	200006e4 	.word	0x200006e4
 8006f34:	20000ba4 	.word	0x20000ba4
 8006f38:	20000b74 	.word	0x20000b74
 8006f3c:	20000b70 	.word	0x20000b70
 8006f40:	20000bd8 	.word	0x20000bd8

08006f44 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b08a      	sub	sp, #40	; 0x28
 8006f48:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006f4e:	f000 fac3 	bl	80074d8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006f52:	4b1c      	ldr	r3, [pc, #112]	; (8006fc4 <xTimerCreateTimerTask+0x80>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d021      	beq.n	8006f9e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006f62:	1d3a      	adds	r2, r7, #4
 8006f64:	f107 0108 	add.w	r1, r7, #8
 8006f68:	f107 030c 	add.w	r3, r7, #12
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f7fe fae5 	bl	800553c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006f72:	6879      	ldr	r1, [r7, #4]
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	68fa      	ldr	r2, [r7, #12]
 8006f78:	9202      	str	r2, [sp, #8]
 8006f7a:	9301      	str	r3, [sp, #4]
 8006f7c:	2302      	movs	r3, #2
 8006f7e:	9300      	str	r3, [sp, #0]
 8006f80:	2300      	movs	r3, #0
 8006f82:	460a      	mov	r2, r1
 8006f84:	4910      	ldr	r1, [pc, #64]	; (8006fc8 <xTimerCreateTimerTask+0x84>)
 8006f86:	4811      	ldr	r0, [pc, #68]	; (8006fcc <xTimerCreateTimerTask+0x88>)
 8006f88:	f7ff f8fc 	bl	8006184 <xTaskCreateStatic>
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	4b10      	ldr	r3, [pc, #64]	; (8006fd0 <xTimerCreateTimerTask+0x8c>)
 8006f90:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006f92:	4b0f      	ldr	r3, [pc, #60]	; (8006fd0 <xTimerCreateTimerTask+0x8c>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d001      	beq.n	8006f9e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d109      	bne.n	8006fb8 <xTimerCreateTimerTask+0x74>
 8006fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa8:	f383 8811 	msr	BASEPRI, r3
 8006fac:	f3bf 8f6f 	isb	sy
 8006fb0:	f3bf 8f4f 	dsb	sy
 8006fb4:	613b      	str	r3, [r7, #16]
 8006fb6:	e7fe      	b.n	8006fb6 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8006fb8:	697b      	ldr	r3, [r7, #20]
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3718      	adds	r7, #24
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}
 8006fc2:	bf00      	nop
 8006fc4:	20000c14 	.word	0x20000c14
 8006fc8:	08007d70 	.word	0x08007d70
 8006fcc:	080070ed 	.word	0x080070ed
 8006fd0:	20000c18 	.word	0x20000c18

08006fd4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b08a      	sub	sp, #40	; 0x28
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	60f8      	str	r0, [r7, #12]
 8006fdc:	60b9      	str	r1, [r7, #8]
 8006fde:	607a      	str	r2, [r7, #4]
 8006fe0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d109      	bne.n	8007000 <xTimerGenericCommand+0x2c>
 8006fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff0:	f383 8811 	msr	BASEPRI, r3
 8006ff4:	f3bf 8f6f 	isb	sy
 8006ff8:	f3bf 8f4f 	dsb	sy
 8006ffc:	623b      	str	r3, [r7, #32]
 8006ffe:	e7fe      	b.n	8006ffe <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007000:	4b19      	ldr	r3, [pc, #100]	; (8007068 <xTimerGenericCommand+0x94>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d02a      	beq.n	800705e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	2b05      	cmp	r3, #5
 8007018:	dc18      	bgt.n	800704c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800701a:	f7ff feb5 	bl	8006d88 <xTaskGetSchedulerState>
 800701e:	4603      	mov	r3, r0
 8007020:	2b02      	cmp	r3, #2
 8007022:	d109      	bne.n	8007038 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007024:	4b10      	ldr	r3, [pc, #64]	; (8007068 <xTimerGenericCommand+0x94>)
 8007026:	6818      	ldr	r0, [r3, #0]
 8007028:	f107 0110 	add.w	r1, r7, #16
 800702c:	2300      	movs	r3, #0
 800702e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007030:	f7fe fcd2 	bl	80059d8 <xQueueGenericSend>
 8007034:	6278      	str	r0, [r7, #36]	; 0x24
 8007036:	e012      	b.n	800705e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007038:	4b0b      	ldr	r3, [pc, #44]	; (8007068 <xTimerGenericCommand+0x94>)
 800703a:	6818      	ldr	r0, [r3, #0]
 800703c:	f107 0110 	add.w	r1, r7, #16
 8007040:	2300      	movs	r3, #0
 8007042:	2200      	movs	r2, #0
 8007044:	f7fe fcc8 	bl	80059d8 <xQueueGenericSend>
 8007048:	6278      	str	r0, [r7, #36]	; 0x24
 800704a:	e008      	b.n	800705e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800704c:	4b06      	ldr	r3, [pc, #24]	; (8007068 <xTimerGenericCommand+0x94>)
 800704e:	6818      	ldr	r0, [r3, #0]
 8007050:	f107 0110 	add.w	r1, r7, #16
 8007054:	2300      	movs	r3, #0
 8007056:	683a      	ldr	r2, [r7, #0]
 8007058:	f7fe fdb8 	bl	8005bcc <xQueueGenericSendFromISR>
 800705c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800705e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007060:	4618      	mov	r0, r3
 8007062:	3728      	adds	r7, #40	; 0x28
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}
 8007068:	20000c14 	.word	0x20000c14

0800706c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b088      	sub	sp, #32
 8007070:	af02      	add	r7, sp, #8
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007076:	4b1c      	ldr	r3, [pc, #112]	; (80070e8 <prvProcessExpiredTimer+0x7c>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	68db      	ldr	r3, [r3, #12]
 800707c:	68db      	ldr	r3, [r3, #12]
 800707e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	3304      	adds	r3, #4
 8007084:	4618      	mov	r0, r3
 8007086:	f7fe faf9 	bl	800567c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	69db      	ldr	r3, [r3, #28]
 800708e:	2b01      	cmp	r3, #1
 8007090:	d121      	bne.n	80070d6 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	699a      	ldr	r2, [r3, #24]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	18d1      	adds	r1, r2, r3
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	683a      	ldr	r2, [r7, #0]
 800709e:	6978      	ldr	r0, [r7, #20]
 80070a0:	f000 f8c8 	bl	8007234 <prvInsertTimerInActiveList>
 80070a4:	4603      	mov	r3, r0
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d015      	beq.n	80070d6 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80070aa:	2300      	movs	r3, #0
 80070ac:	9300      	str	r3, [sp, #0]
 80070ae:	2300      	movs	r3, #0
 80070b0:	687a      	ldr	r2, [r7, #4]
 80070b2:	2100      	movs	r1, #0
 80070b4:	6978      	ldr	r0, [r7, #20]
 80070b6:	f7ff ff8d 	bl	8006fd4 <xTimerGenericCommand>
 80070ba:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d109      	bne.n	80070d6 <prvProcessExpiredTimer+0x6a>
 80070c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c6:	f383 8811 	msr	BASEPRI, r3
 80070ca:	f3bf 8f6f 	isb	sy
 80070ce:	f3bf 8f4f 	dsb	sy
 80070d2:	60fb      	str	r3, [r7, #12]
 80070d4:	e7fe      	b.n	80070d4 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070da:	6978      	ldr	r0, [r7, #20]
 80070dc:	4798      	blx	r3
}
 80070de:	bf00      	nop
 80070e0:	3718      	adds	r7, #24
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}
 80070e6:	bf00      	nop
 80070e8:	20000c0c 	.word	0x20000c0c

080070ec <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b084      	sub	sp, #16
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80070f4:	f107 0308 	add.w	r3, r7, #8
 80070f8:	4618      	mov	r0, r3
 80070fa:	f000 f857 	bl	80071ac <prvGetNextExpireTime>
 80070fe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	4619      	mov	r1, r3
 8007104:	68f8      	ldr	r0, [r7, #12]
 8007106:	f000 f803 	bl	8007110 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800710a:	f000 f8d5 	bl	80072b8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800710e:	e7f1      	b.n	80070f4 <prvTimerTask+0x8>

08007110 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b084      	sub	sp, #16
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800711a:	f7ff fa5b 	bl	80065d4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800711e:	f107 0308 	add.w	r3, r7, #8
 8007122:	4618      	mov	r0, r3
 8007124:	f000 f866 	bl	80071f4 <prvSampleTimeNow>
 8007128:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d130      	bne.n	8007192 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d10a      	bne.n	800714c <prvProcessTimerOrBlockTask+0x3c>
 8007136:	687a      	ldr	r2, [r7, #4]
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	429a      	cmp	r2, r3
 800713c:	d806      	bhi.n	800714c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800713e:	f7ff fa57 	bl	80065f0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007142:	68f9      	ldr	r1, [r7, #12]
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f7ff ff91 	bl	800706c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800714a:	e024      	b.n	8007196 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d008      	beq.n	8007164 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007152:	4b13      	ldr	r3, [pc, #76]	; (80071a0 <prvProcessTimerOrBlockTask+0x90>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	2b00      	cmp	r3, #0
 800715a:	bf0c      	ite	eq
 800715c:	2301      	moveq	r3, #1
 800715e:	2300      	movne	r3, #0
 8007160:	b2db      	uxtb	r3, r3
 8007162:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007164:	4b0f      	ldr	r3, [pc, #60]	; (80071a4 <prvProcessTimerOrBlockTask+0x94>)
 8007166:	6818      	ldr	r0, [r3, #0]
 8007168:	687a      	ldr	r2, [r7, #4]
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	1ad3      	subs	r3, r2, r3
 800716e:	683a      	ldr	r2, [r7, #0]
 8007170:	4619      	mov	r1, r3
 8007172:	f7fe ffd3 	bl	800611c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007176:	f7ff fa3b 	bl	80065f0 <xTaskResumeAll>
 800717a:	4603      	mov	r3, r0
 800717c:	2b00      	cmp	r3, #0
 800717e:	d10a      	bne.n	8007196 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007180:	4b09      	ldr	r3, [pc, #36]	; (80071a8 <prvProcessTimerOrBlockTask+0x98>)
 8007182:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007186:	601a      	str	r2, [r3, #0]
 8007188:	f3bf 8f4f 	dsb	sy
 800718c:	f3bf 8f6f 	isb	sy
}
 8007190:	e001      	b.n	8007196 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007192:	f7ff fa2d 	bl	80065f0 <xTaskResumeAll>
}
 8007196:	bf00      	nop
 8007198:	3710      	adds	r7, #16
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}
 800719e:	bf00      	nop
 80071a0:	20000c10 	.word	0x20000c10
 80071a4:	20000c14 	.word	0x20000c14
 80071a8:	e000ed04 	.word	0xe000ed04

080071ac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80071ac:	b480      	push	{r7}
 80071ae:	b085      	sub	sp, #20
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80071b4:	4b0e      	ldr	r3, [pc, #56]	; (80071f0 <prvGetNextExpireTime+0x44>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	bf0c      	ite	eq
 80071be:	2301      	moveq	r3, #1
 80071c0:	2300      	movne	r3, #0
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	461a      	mov	r2, r3
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d105      	bne.n	80071de <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80071d2:	4b07      	ldr	r3, [pc, #28]	; (80071f0 <prvGetNextExpireTime+0x44>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	68db      	ldr	r3, [r3, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	60fb      	str	r3, [r7, #12]
 80071dc:	e001      	b.n	80071e2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80071de:	2300      	movs	r3, #0
 80071e0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80071e2:	68fb      	ldr	r3, [r7, #12]
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3714      	adds	r7, #20
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bc80      	pop	{r7}
 80071ec:	4770      	bx	lr
 80071ee:	bf00      	nop
 80071f0:	20000c0c 	.word	0x20000c0c

080071f4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b084      	sub	sp, #16
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80071fc:	f7ff fa94 	bl	8006728 <xTaskGetTickCount>
 8007200:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007202:	4b0b      	ldr	r3, [pc, #44]	; (8007230 <prvSampleTimeNow+0x3c>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	68fa      	ldr	r2, [r7, #12]
 8007208:	429a      	cmp	r2, r3
 800720a:	d205      	bcs.n	8007218 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800720c:	f000 f904 	bl	8007418 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2201      	movs	r2, #1
 8007214:	601a      	str	r2, [r3, #0]
 8007216:	e002      	b.n	800721e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800721e:	4a04      	ldr	r2, [pc, #16]	; (8007230 <prvSampleTimeNow+0x3c>)
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007224:	68fb      	ldr	r3, [r7, #12]
}
 8007226:	4618      	mov	r0, r3
 8007228:	3710      	adds	r7, #16
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}
 800722e:	bf00      	nop
 8007230:	20000c1c 	.word	0x20000c1c

08007234 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b086      	sub	sp, #24
 8007238:	af00      	add	r7, sp, #0
 800723a:	60f8      	str	r0, [r7, #12]
 800723c:	60b9      	str	r1, [r7, #8]
 800723e:	607a      	str	r2, [r7, #4]
 8007240:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007242:	2300      	movs	r3, #0
 8007244:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	68ba      	ldr	r2, [r7, #8]
 800724a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	68fa      	ldr	r2, [r7, #12]
 8007250:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007252:	68ba      	ldr	r2, [r7, #8]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	429a      	cmp	r2, r3
 8007258:	d812      	bhi.n	8007280 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800725a:	687a      	ldr	r2, [r7, #4]
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	1ad2      	subs	r2, r2, r3
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	699b      	ldr	r3, [r3, #24]
 8007264:	429a      	cmp	r2, r3
 8007266:	d302      	bcc.n	800726e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007268:	2301      	movs	r3, #1
 800726a:	617b      	str	r3, [r7, #20]
 800726c:	e01b      	b.n	80072a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800726e:	4b10      	ldr	r3, [pc, #64]	; (80072b0 <prvInsertTimerInActiveList+0x7c>)
 8007270:	681a      	ldr	r2, [r3, #0]
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	3304      	adds	r3, #4
 8007276:	4619      	mov	r1, r3
 8007278:	4610      	mov	r0, r2
 800727a:	f7fe f9c7 	bl	800560c <vListInsert>
 800727e:	e012      	b.n	80072a6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	429a      	cmp	r2, r3
 8007286:	d206      	bcs.n	8007296 <prvInsertTimerInActiveList+0x62>
 8007288:	68ba      	ldr	r2, [r7, #8]
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	429a      	cmp	r2, r3
 800728e:	d302      	bcc.n	8007296 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007290:	2301      	movs	r3, #1
 8007292:	617b      	str	r3, [r7, #20]
 8007294:	e007      	b.n	80072a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007296:	4b07      	ldr	r3, [pc, #28]	; (80072b4 <prvInsertTimerInActiveList+0x80>)
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	3304      	adds	r3, #4
 800729e:	4619      	mov	r1, r3
 80072a0:	4610      	mov	r0, r2
 80072a2:	f7fe f9b3 	bl	800560c <vListInsert>
		}
	}

	return xProcessTimerNow;
 80072a6:	697b      	ldr	r3, [r7, #20]
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	3718      	adds	r7, #24
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}
 80072b0:	20000c10 	.word	0x20000c10
 80072b4:	20000c0c 	.word	0x20000c0c

080072b8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b08e      	sub	sp, #56	; 0x38
 80072bc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80072be:	e099      	b.n	80073f4 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	da17      	bge.n	80072f6 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80072c6:	1d3b      	adds	r3, r7, #4
 80072c8:	3304      	adds	r3, #4
 80072ca:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80072cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d109      	bne.n	80072e6 <prvProcessReceivedCommands+0x2e>
 80072d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072d6:	f383 8811 	msr	BASEPRI, r3
 80072da:	f3bf 8f6f 	isb	sy
 80072de:	f3bf 8f4f 	dsb	sy
 80072e2:	61fb      	str	r3, [r7, #28]
 80072e4:	e7fe      	b.n	80072e4 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80072e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072ec:	6850      	ldr	r0, [r2, #4]
 80072ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072f0:	6892      	ldr	r2, [r2, #8]
 80072f2:	4611      	mov	r1, r2
 80072f4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	db7a      	blt.n	80073f2 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007302:	695b      	ldr	r3, [r3, #20]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d004      	beq.n	8007312 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800730a:	3304      	adds	r3, #4
 800730c:	4618      	mov	r0, r3
 800730e:	f7fe f9b5 	bl	800567c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007312:	463b      	mov	r3, r7
 8007314:	4618      	mov	r0, r3
 8007316:	f7ff ff6d 	bl	80071f4 <prvSampleTimeNow>
 800731a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2b09      	cmp	r3, #9
 8007320:	d868      	bhi.n	80073f4 <prvProcessReceivedCommands+0x13c>
 8007322:	a201      	add	r2, pc, #4	; (adr r2, 8007328 <prvProcessReceivedCommands+0x70>)
 8007324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007328:	08007351 	.word	0x08007351
 800732c:	08007351 	.word	0x08007351
 8007330:	08007351 	.word	0x08007351
 8007334:	080073f5 	.word	0x080073f5
 8007338:	080073ab 	.word	0x080073ab
 800733c:	080073e1 	.word	0x080073e1
 8007340:	08007351 	.word	0x08007351
 8007344:	08007351 	.word	0x08007351
 8007348:	080073f5 	.word	0x080073f5
 800734c:	080073ab 	.word	0x080073ab
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007350:	68ba      	ldr	r2, [r7, #8]
 8007352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007354:	699b      	ldr	r3, [r3, #24]
 8007356:	18d1      	adds	r1, r2, r3
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800735c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800735e:	f7ff ff69 	bl	8007234 <prvInsertTimerInActiveList>
 8007362:	4603      	mov	r3, r0
 8007364:	2b00      	cmp	r3, #0
 8007366:	d045      	beq.n	80073f4 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800736a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800736c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800736e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007372:	69db      	ldr	r3, [r3, #28]
 8007374:	2b01      	cmp	r3, #1
 8007376:	d13d      	bne.n	80073f4 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007378:	68ba      	ldr	r2, [r7, #8]
 800737a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800737c:	699b      	ldr	r3, [r3, #24]
 800737e:	441a      	add	r2, r3
 8007380:	2300      	movs	r3, #0
 8007382:	9300      	str	r3, [sp, #0]
 8007384:	2300      	movs	r3, #0
 8007386:	2100      	movs	r1, #0
 8007388:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800738a:	f7ff fe23 	bl	8006fd4 <xTimerGenericCommand>
 800738e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007390:	6a3b      	ldr	r3, [r7, #32]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d12e      	bne.n	80073f4 <prvProcessReceivedCommands+0x13c>
 8007396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800739a:	f383 8811 	msr	BASEPRI, r3
 800739e:	f3bf 8f6f 	isb	sy
 80073a2:	f3bf 8f4f 	dsb	sy
 80073a6:	61bb      	str	r3, [r7, #24]
 80073a8:	e7fe      	b.n	80073a8 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80073aa:	68ba      	ldr	r2, [r7, #8]
 80073ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ae:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80073b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b2:	699b      	ldr	r3, [r3, #24]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d109      	bne.n	80073cc <prvProcessReceivedCommands+0x114>
 80073b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073bc:	f383 8811 	msr	BASEPRI, r3
 80073c0:	f3bf 8f6f 	isb	sy
 80073c4:	f3bf 8f4f 	dsb	sy
 80073c8:	617b      	str	r3, [r7, #20]
 80073ca:	e7fe      	b.n	80073ca <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80073cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ce:	699a      	ldr	r2, [r3, #24]
 80073d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d2:	18d1      	adds	r1, r2, r3
 80073d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073da:	f7ff ff2b 	bl	8007234 <prvInsertTimerInActiveList>
					break;
 80073de:	e009      	b.n	80073f4 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80073e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d104      	bne.n	80073f4 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 80073ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073ec:	f000 fb54 	bl	8007a98 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80073f0:	e000      	b.n	80073f4 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80073f2:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80073f4:	4b07      	ldr	r3, [pc, #28]	; (8007414 <prvProcessReceivedCommands+0x15c>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	1d39      	adds	r1, r7, #4
 80073fa:	2200      	movs	r2, #0
 80073fc:	4618      	mov	r0, r3
 80073fe:	f7fe fc79 	bl	8005cf4 <xQueueReceive>
 8007402:	4603      	mov	r3, r0
 8007404:	2b00      	cmp	r3, #0
 8007406:	f47f af5b 	bne.w	80072c0 <prvProcessReceivedCommands+0x8>
	}
}
 800740a:	bf00      	nop
 800740c:	3730      	adds	r7, #48	; 0x30
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}
 8007412:	bf00      	nop
 8007414:	20000c14 	.word	0x20000c14

08007418 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b088      	sub	sp, #32
 800741c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800741e:	e044      	b.n	80074aa <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007420:	4b2b      	ldr	r3, [pc, #172]	; (80074d0 <prvSwitchTimerLists+0xb8>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	68db      	ldr	r3, [r3, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800742a:	4b29      	ldr	r3, [pc, #164]	; (80074d0 <prvSwitchTimerLists+0xb8>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	68db      	ldr	r3, [r3, #12]
 8007430:	68db      	ldr	r3, [r3, #12]
 8007432:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	3304      	adds	r3, #4
 8007438:	4618      	mov	r0, r3
 800743a:	f7fe f91f 	bl	800567c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007442:	68f8      	ldr	r0, [r7, #12]
 8007444:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	69db      	ldr	r3, [r3, #28]
 800744a:	2b01      	cmp	r3, #1
 800744c:	d12d      	bne.n	80074aa <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	699b      	ldr	r3, [r3, #24]
 8007452:	693a      	ldr	r2, [r7, #16]
 8007454:	4413      	add	r3, r2
 8007456:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007458:	68ba      	ldr	r2, [r7, #8]
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	429a      	cmp	r2, r3
 800745e:	d90e      	bls.n	800747e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	68ba      	ldr	r2, [r7, #8]
 8007464:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	68fa      	ldr	r2, [r7, #12]
 800746a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800746c:	4b18      	ldr	r3, [pc, #96]	; (80074d0 <prvSwitchTimerLists+0xb8>)
 800746e:	681a      	ldr	r2, [r3, #0]
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	3304      	adds	r3, #4
 8007474:	4619      	mov	r1, r3
 8007476:	4610      	mov	r0, r2
 8007478:	f7fe f8c8 	bl	800560c <vListInsert>
 800747c:	e015      	b.n	80074aa <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800747e:	2300      	movs	r3, #0
 8007480:	9300      	str	r3, [sp, #0]
 8007482:	2300      	movs	r3, #0
 8007484:	693a      	ldr	r2, [r7, #16]
 8007486:	2100      	movs	r1, #0
 8007488:	68f8      	ldr	r0, [r7, #12]
 800748a:	f7ff fda3 	bl	8006fd4 <xTimerGenericCommand>
 800748e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d109      	bne.n	80074aa <prvSwitchTimerLists+0x92>
 8007496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800749a:	f383 8811 	msr	BASEPRI, r3
 800749e:	f3bf 8f6f 	isb	sy
 80074a2:	f3bf 8f4f 	dsb	sy
 80074a6:	603b      	str	r3, [r7, #0]
 80074a8:	e7fe      	b.n	80074a8 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80074aa:	4b09      	ldr	r3, [pc, #36]	; (80074d0 <prvSwitchTimerLists+0xb8>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d1b5      	bne.n	8007420 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80074b4:	4b06      	ldr	r3, [pc, #24]	; (80074d0 <prvSwitchTimerLists+0xb8>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80074ba:	4b06      	ldr	r3, [pc, #24]	; (80074d4 <prvSwitchTimerLists+0xbc>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4a04      	ldr	r2, [pc, #16]	; (80074d0 <prvSwitchTimerLists+0xb8>)
 80074c0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80074c2:	4a04      	ldr	r2, [pc, #16]	; (80074d4 <prvSwitchTimerLists+0xbc>)
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	6013      	str	r3, [r2, #0]
}
 80074c8:	bf00      	nop
 80074ca:	3718      	adds	r7, #24
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}
 80074d0:	20000c0c 	.word	0x20000c0c
 80074d4:	20000c10 	.word	0x20000c10

080074d8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b082      	sub	sp, #8
 80074dc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80074de:	f000 f923 	bl	8007728 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80074e2:	4b15      	ldr	r3, [pc, #84]	; (8007538 <prvCheckForValidListAndQueue+0x60>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d120      	bne.n	800752c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80074ea:	4814      	ldr	r0, [pc, #80]	; (800753c <prvCheckForValidListAndQueue+0x64>)
 80074ec:	f7fe f840 	bl	8005570 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80074f0:	4813      	ldr	r0, [pc, #76]	; (8007540 <prvCheckForValidListAndQueue+0x68>)
 80074f2:	f7fe f83d 	bl	8005570 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80074f6:	4b13      	ldr	r3, [pc, #76]	; (8007544 <prvCheckForValidListAndQueue+0x6c>)
 80074f8:	4a10      	ldr	r2, [pc, #64]	; (800753c <prvCheckForValidListAndQueue+0x64>)
 80074fa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80074fc:	4b12      	ldr	r3, [pc, #72]	; (8007548 <prvCheckForValidListAndQueue+0x70>)
 80074fe:	4a10      	ldr	r2, [pc, #64]	; (8007540 <prvCheckForValidListAndQueue+0x68>)
 8007500:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007502:	2300      	movs	r3, #0
 8007504:	9300      	str	r3, [sp, #0]
 8007506:	4b11      	ldr	r3, [pc, #68]	; (800754c <prvCheckForValidListAndQueue+0x74>)
 8007508:	4a11      	ldr	r2, [pc, #68]	; (8007550 <prvCheckForValidListAndQueue+0x78>)
 800750a:	2110      	movs	r1, #16
 800750c:	200a      	movs	r0, #10
 800750e:	f7fe f947 	bl	80057a0 <xQueueGenericCreateStatic>
 8007512:	4602      	mov	r2, r0
 8007514:	4b08      	ldr	r3, [pc, #32]	; (8007538 <prvCheckForValidListAndQueue+0x60>)
 8007516:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007518:	4b07      	ldr	r3, [pc, #28]	; (8007538 <prvCheckForValidListAndQueue+0x60>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d005      	beq.n	800752c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007520:	4b05      	ldr	r3, [pc, #20]	; (8007538 <prvCheckForValidListAndQueue+0x60>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	490b      	ldr	r1, [pc, #44]	; (8007554 <prvCheckForValidListAndQueue+0x7c>)
 8007526:	4618      	mov	r0, r3
 8007528:	f7fe fdd0 	bl	80060cc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800752c:	f000 f92a 	bl	8007784 <vPortExitCritical>
}
 8007530:	bf00      	nop
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}
 8007536:	bf00      	nop
 8007538:	20000c14 	.word	0x20000c14
 800753c:	20000be4 	.word	0x20000be4
 8007540:	20000bf8 	.word	0x20000bf8
 8007544:	20000c0c 	.word	0x20000c0c
 8007548:	20000c10 	.word	0x20000c10
 800754c:	20000cc0 	.word	0x20000cc0
 8007550:	20000c20 	.word	0x20000c20
 8007554:	08007d78 	.word	0x08007d78

08007558 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007558:	b480      	push	{r7}
 800755a:	b085      	sub	sp, #20
 800755c:	af00      	add	r7, sp, #0
 800755e:	60f8      	str	r0, [r7, #12]
 8007560:	60b9      	str	r1, [r7, #8]
 8007562:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	3b04      	subs	r3, #4
 8007568:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007570:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	3b04      	subs	r3, #4
 8007576:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	f023 0201 	bic.w	r2, r3, #1
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	3b04      	subs	r3, #4
 8007586:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007588:	4a08      	ldr	r2, [pc, #32]	; (80075ac <pxPortInitialiseStack+0x54>)
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	3b14      	subs	r3, #20
 8007592:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007594:	687a      	ldr	r2, [r7, #4]
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	3b20      	subs	r3, #32
 800759e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80075a0:	68fb      	ldr	r3, [r7, #12]
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3714      	adds	r7, #20
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bc80      	pop	{r7}
 80075aa:	4770      	bx	lr
 80075ac:	080075b1 	.word	0x080075b1

080075b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80075b0:	b480      	push	{r7}
 80075b2:	b085      	sub	sp, #20
 80075b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80075b6:	2300      	movs	r3, #0
 80075b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80075ba:	4b10      	ldr	r3, [pc, #64]	; (80075fc <prvTaskExitError+0x4c>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075c2:	d009      	beq.n	80075d8 <prvTaskExitError+0x28>
 80075c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c8:	f383 8811 	msr	BASEPRI, r3
 80075cc:	f3bf 8f6f 	isb	sy
 80075d0:	f3bf 8f4f 	dsb	sy
 80075d4:	60fb      	str	r3, [r7, #12]
 80075d6:	e7fe      	b.n	80075d6 <prvTaskExitError+0x26>
 80075d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075dc:	f383 8811 	msr	BASEPRI, r3
 80075e0:	f3bf 8f6f 	isb	sy
 80075e4:	f3bf 8f4f 	dsb	sy
 80075e8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80075ea:	bf00      	nop
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d0fc      	beq.n	80075ec <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80075f2:	bf00      	nop
 80075f4:	3714      	adds	r7, #20
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bc80      	pop	{r7}
 80075fa:	4770      	bx	lr
 80075fc:	2000000c 	.word	0x2000000c

08007600 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007600:	4b07      	ldr	r3, [pc, #28]	; (8007620 <pxCurrentTCBConst2>)
 8007602:	6819      	ldr	r1, [r3, #0]
 8007604:	6808      	ldr	r0, [r1, #0]
 8007606:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800760a:	f380 8809 	msr	PSP, r0
 800760e:	f3bf 8f6f 	isb	sy
 8007612:	f04f 0000 	mov.w	r0, #0
 8007616:	f380 8811 	msr	BASEPRI, r0
 800761a:	f04e 0e0d 	orr.w	lr, lr, #13
 800761e:	4770      	bx	lr

08007620 <pxCurrentTCBConst2>:
 8007620:	200006e4 	.word	0x200006e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007624:	bf00      	nop
 8007626:	bf00      	nop

08007628 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007628:	4806      	ldr	r0, [pc, #24]	; (8007644 <prvPortStartFirstTask+0x1c>)
 800762a:	6800      	ldr	r0, [r0, #0]
 800762c:	6800      	ldr	r0, [r0, #0]
 800762e:	f380 8808 	msr	MSP, r0
 8007632:	b662      	cpsie	i
 8007634:	b661      	cpsie	f
 8007636:	f3bf 8f4f 	dsb	sy
 800763a:	f3bf 8f6f 	isb	sy
 800763e:	df00      	svc	0
 8007640:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007642:	bf00      	nop
 8007644:	e000ed08 	.word	0xe000ed08

08007648 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b084      	sub	sp, #16
 800764c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800764e:	4b31      	ldr	r3, [pc, #196]	; (8007714 <xPortStartScheduler+0xcc>)
 8007650:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	b2db      	uxtb	r3, r3
 8007658:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	22ff      	movs	r2, #255	; 0xff
 800765e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	781b      	ldrb	r3, [r3, #0]
 8007664:	b2db      	uxtb	r3, r3
 8007666:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007668:	78fb      	ldrb	r3, [r7, #3]
 800766a:	b2db      	uxtb	r3, r3
 800766c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007670:	b2da      	uxtb	r2, r3
 8007672:	4b29      	ldr	r3, [pc, #164]	; (8007718 <xPortStartScheduler+0xd0>)
 8007674:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007676:	4b29      	ldr	r3, [pc, #164]	; (800771c <xPortStartScheduler+0xd4>)
 8007678:	2207      	movs	r2, #7
 800767a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800767c:	e009      	b.n	8007692 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800767e:	4b27      	ldr	r3, [pc, #156]	; (800771c <xPortStartScheduler+0xd4>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	3b01      	subs	r3, #1
 8007684:	4a25      	ldr	r2, [pc, #148]	; (800771c <xPortStartScheduler+0xd4>)
 8007686:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007688:	78fb      	ldrb	r3, [r7, #3]
 800768a:	b2db      	uxtb	r3, r3
 800768c:	005b      	lsls	r3, r3, #1
 800768e:	b2db      	uxtb	r3, r3
 8007690:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007692:	78fb      	ldrb	r3, [r7, #3]
 8007694:	b2db      	uxtb	r3, r3
 8007696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800769a:	2b80      	cmp	r3, #128	; 0x80
 800769c:	d0ef      	beq.n	800767e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800769e:	4b1f      	ldr	r3, [pc, #124]	; (800771c <xPortStartScheduler+0xd4>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f1c3 0307 	rsb	r3, r3, #7
 80076a6:	2b04      	cmp	r3, #4
 80076a8:	d009      	beq.n	80076be <xPortStartScheduler+0x76>
 80076aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ae:	f383 8811 	msr	BASEPRI, r3
 80076b2:	f3bf 8f6f 	isb	sy
 80076b6:	f3bf 8f4f 	dsb	sy
 80076ba:	60bb      	str	r3, [r7, #8]
 80076bc:	e7fe      	b.n	80076bc <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80076be:	4b17      	ldr	r3, [pc, #92]	; (800771c <xPortStartScheduler+0xd4>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	021b      	lsls	r3, r3, #8
 80076c4:	4a15      	ldr	r2, [pc, #84]	; (800771c <xPortStartScheduler+0xd4>)
 80076c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80076c8:	4b14      	ldr	r3, [pc, #80]	; (800771c <xPortStartScheduler+0xd4>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80076d0:	4a12      	ldr	r2, [pc, #72]	; (800771c <xPortStartScheduler+0xd4>)
 80076d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	b2da      	uxtb	r2, r3
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80076dc:	4b10      	ldr	r3, [pc, #64]	; (8007720 <xPortStartScheduler+0xd8>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a0f      	ldr	r2, [pc, #60]	; (8007720 <xPortStartScheduler+0xd8>)
 80076e2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80076e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80076e8:	4b0d      	ldr	r3, [pc, #52]	; (8007720 <xPortStartScheduler+0xd8>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a0c      	ldr	r2, [pc, #48]	; (8007720 <xPortStartScheduler+0xd8>)
 80076ee:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80076f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80076f4:	f000 f8b0 	bl	8007858 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80076f8:	4b0a      	ldr	r3, [pc, #40]	; (8007724 <xPortStartScheduler+0xdc>)
 80076fa:	2200      	movs	r2, #0
 80076fc:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80076fe:	f7ff ff93 	bl	8007628 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007702:	f7ff f8dd 	bl	80068c0 <vTaskSwitchContext>
	prvTaskExitError();
 8007706:	f7ff ff53 	bl	80075b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800770a:	2300      	movs	r3, #0
}
 800770c:	4618      	mov	r0, r3
 800770e:	3710      	adds	r7, #16
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}
 8007714:	e000e400 	.word	0xe000e400
 8007718:	20000d08 	.word	0x20000d08
 800771c:	20000d0c 	.word	0x20000d0c
 8007720:	e000ed20 	.word	0xe000ed20
 8007724:	2000000c 	.word	0x2000000c

08007728 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007728:	b480      	push	{r7}
 800772a:	b083      	sub	sp, #12
 800772c:	af00      	add	r7, sp, #0
 800772e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007732:	f383 8811 	msr	BASEPRI, r3
 8007736:	f3bf 8f6f 	isb	sy
 800773a:	f3bf 8f4f 	dsb	sy
 800773e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007740:	4b0e      	ldr	r3, [pc, #56]	; (800777c <vPortEnterCritical+0x54>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	3301      	adds	r3, #1
 8007746:	4a0d      	ldr	r2, [pc, #52]	; (800777c <vPortEnterCritical+0x54>)
 8007748:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800774a:	4b0c      	ldr	r3, [pc, #48]	; (800777c <vPortEnterCritical+0x54>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	2b01      	cmp	r3, #1
 8007750:	d10e      	bne.n	8007770 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007752:	4b0b      	ldr	r3, [pc, #44]	; (8007780 <vPortEnterCritical+0x58>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	b2db      	uxtb	r3, r3
 8007758:	2b00      	cmp	r3, #0
 800775a:	d009      	beq.n	8007770 <vPortEnterCritical+0x48>
 800775c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007760:	f383 8811 	msr	BASEPRI, r3
 8007764:	f3bf 8f6f 	isb	sy
 8007768:	f3bf 8f4f 	dsb	sy
 800776c:	603b      	str	r3, [r7, #0]
 800776e:	e7fe      	b.n	800776e <vPortEnterCritical+0x46>
	}
}
 8007770:	bf00      	nop
 8007772:	370c      	adds	r7, #12
 8007774:	46bd      	mov	sp, r7
 8007776:	bc80      	pop	{r7}
 8007778:	4770      	bx	lr
 800777a:	bf00      	nop
 800777c:	2000000c 	.word	0x2000000c
 8007780:	e000ed04 	.word	0xe000ed04

08007784 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007784:	b480      	push	{r7}
 8007786:	b083      	sub	sp, #12
 8007788:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800778a:	4b10      	ldr	r3, [pc, #64]	; (80077cc <vPortExitCritical+0x48>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d109      	bne.n	80077a6 <vPortExitCritical+0x22>
 8007792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007796:	f383 8811 	msr	BASEPRI, r3
 800779a:	f3bf 8f6f 	isb	sy
 800779e:	f3bf 8f4f 	dsb	sy
 80077a2:	607b      	str	r3, [r7, #4]
 80077a4:	e7fe      	b.n	80077a4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80077a6:	4b09      	ldr	r3, [pc, #36]	; (80077cc <vPortExitCritical+0x48>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	3b01      	subs	r3, #1
 80077ac:	4a07      	ldr	r2, [pc, #28]	; (80077cc <vPortExitCritical+0x48>)
 80077ae:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80077b0:	4b06      	ldr	r3, [pc, #24]	; (80077cc <vPortExitCritical+0x48>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d104      	bne.n	80077c2 <vPortExitCritical+0x3e>
 80077b8:	2300      	movs	r3, #0
 80077ba:	603b      	str	r3, [r7, #0]
	__asm volatile
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80077c2:	bf00      	nop
 80077c4:	370c      	adds	r7, #12
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bc80      	pop	{r7}
 80077ca:	4770      	bx	lr
 80077cc:	2000000c 	.word	0x2000000c

080077d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80077d0:	f3ef 8009 	mrs	r0, PSP
 80077d4:	f3bf 8f6f 	isb	sy
 80077d8:	4b0d      	ldr	r3, [pc, #52]	; (8007810 <pxCurrentTCBConst>)
 80077da:	681a      	ldr	r2, [r3, #0]
 80077dc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80077e0:	6010      	str	r0, [r2, #0]
 80077e2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80077e6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80077ea:	f380 8811 	msr	BASEPRI, r0
 80077ee:	f7ff f867 	bl	80068c0 <vTaskSwitchContext>
 80077f2:	f04f 0000 	mov.w	r0, #0
 80077f6:	f380 8811 	msr	BASEPRI, r0
 80077fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80077fe:	6819      	ldr	r1, [r3, #0]
 8007800:	6808      	ldr	r0, [r1, #0]
 8007802:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007806:	f380 8809 	msr	PSP, r0
 800780a:	f3bf 8f6f 	isb	sy
 800780e:	4770      	bx	lr

08007810 <pxCurrentTCBConst>:
 8007810:	200006e4 	.word	0x200006e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007814:	bf00      	nop
 8007816:	bf00      	nop

08007818 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b082      	sub	sp, #8
 800781c:	af00      	add	r7, sp, #0
	__asm volatile
 800781e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007822:	f383 8811 	msr	BASEPRI, r3
 8007826:	f3bf 8f6f 	isb	sy
 800782a:	f3bf 8f4f 	dsb	sy
 800782e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007830:	f7fe ff88 	bl	8006744 <xTaskIncrementTick>
 8007834:	4603      	mov	r3, r0
 8007836:	2b00      	cmp	r3, #0
 8007838:	d003      	beq.n	8007842 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800783a:	4b06      	ldr	r3, [pc, #24]	; (8007854 <SysTick_Handler+0x3c>)
 800783c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007840:	601a      	str	r2, [r3, #0]
 8007842:	2300      	movs	r3, #0
 8007844:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800784c:	bf00      	nop
 800784e:	3708      	adds	r7, #8
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}
 8007854:	e000ed04 	.word	0xe000ed04

08007858 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007858:	b480      	push	{r7}
 800785a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800785c:	4b0a      	ldr	r3, [pc, #40]	; (8007888 <vPortSetupTimerInterrupt+0x30>)
 800785e:	2200      	movs	r2, #0
 8007860:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007862:	4b0a      	ldr	r3, [pc, #40]	; (800788c <vPortSetupTimerInterrupt+0x34>)
 8007864:	2200      	movs	r2, #0
 8007866:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007868:	4b09      	ldr	r3, [pc, #36]	; (8007890 <vPortSetupTimerInterrupt+0x38>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4a09      	ldr	r2, [pc, #36]	; (8007894 <vPortSetupTimerInterrupt+0x3c>)
 800786e:	fba2 2303 	umull	r2, r3, r2, r3
 8007872:	099b      	lsrs	r3, r3, #6
 8007874:	4a08      	ldr	r2, [pc, #32]	; (8007898 <vPortSetupTimerInterrupt+0x40>)
 8007876:	3b01      	subs	r3, #1
 8007878:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800787a:	4b03      	ldr	r3, [pc, #12]	; (8007888 <vPortSetupTimerInterrupt+0x30>)
 800787c:	2207      	movs	r2, #7
 800787e:	601a      	str	r2, [r3, #0]
}
 8007880:	bf00      	nop
 8007882:	46bd      	mov	sp, r7
 8007884:	bc80      	pop	{r7}
 8007886:	4770      	bx	lr
 8007888:	e000e010 	.word	0xe000e010
 800788c:	e000e018 	.word	0xe000e018
 8007890:	20000000 	.word	0x20000000
 8007894:	10624dd3 	.word	0x10624dd3
 8007898:	e000e014 	.word	0xe000e014

0800789c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800789c:	b480      	push	{r7}
 800789e:	b085      	sub	sp, #20
 80078a0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80078a2:	f3ef 8305 	mrs	r3, IPSR
 80078a6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	2b0f      	cmp	r3, #15
 80078ac:	d913      	bls.n	80078d6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80078ae:	4a15      	ldr	r2, [pc, #84]	; (8007904 <vPortValidateInterruptPriority+0x68>)
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	4413      	add	r3, r2
 80078b4:	781b      	ldrb	r3, [r3, #0]
 80078b6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80078b8:	4b13      	ldr	r3, [pc, #76]	; (8007908 <vPortValidateInterruptPriority+0x6c>)
 80078ba:	781b      	ldrb	r3, [r3, #0]
 80078bc:	7afa      	ldrb	r2, [r7, #11]
 80078be:	429a      	cmp	r2, r3
 80078c0:	d209      	bcs.n	80078d6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80078c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c6:	f383 8811 	msr	BASEPRI, r3
 80078ca:	f3bf 8f6f 	isb	sy
 80078ce:	f3bf 8f4f 	dsb	sy
 80078d2:	607b      	str	r3, [r7, #4]
 80078d4:	e7fe      	b.n	80078d4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80078d6:	4b0d      	ldr	r3, [pc, #52]	; (800790c <vPortValidateInterruptPriority+0x70>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80078de:	4b0c      	ldr	r3, [pc, #48]	; (8007910 <vPortValidateInterruptPriority+0x74>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	429a      	cmp	r2, r3
 80078e4:	d909      	bls.n	80078fa <vPortValidateInterruptPriority+0x5e>
 80078e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ea:	f383 8811 	msr	BASEPRI, r3
 80078ee:	f3bf 8f6f 	isb	sy
 80078f2:	f3bf 8f4f 	dsb	sy
 80078f6:	603b      	str	r3, [r7, #0]
 80078f8:	e7fe      	b.n	80078f8 <vPortValidateInterruptPriority+0x5c>
	}
 80078fa:	bf00      	nop
 80078fc:	3714      	adds	r7, #20
 80078fe:	46bd      	mov	sp, r7
 8007900:	bc80      	pop	{r7}
 8007902:	4770      	bx	lr
 8007904:	e000e3f0 	.word	0xe000e3f0
 8007908:	20000d08 	.word	0x20000d08
 800790c:	e000ed0c 	.word	0xe000ed0c
 8007910:	20000d0c 	.word	0x20000d0c

08007914 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b08a      	sub	sp, #40	; 0x28
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800791c:	2300      	movs	r3, #0
 800791e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007920:	f7fe fe58 	bl	80065d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007924:	4b57      	ldr	r3, [pc, #348]	; (8007a84 <pvPortMalloc+0x170>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d101      	bne.n	8007930 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800792c:	f000 f90c 	bl	8007b48 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007930:	4b55      	ldr	r3, [pc, #340]	; (8007a88 <pvPortMalloc+0x174>)
 8007932:	681a      	ldr	r2, [r3, #0]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	4013      	ands	r3, r2
 8007938:	2b00      	cmp	r3, #0
 800793a:	f040 808c 	bne.w	8007a56 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d01c      	beq.n	800797e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8007944:	2208      	movs	r2, #8
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	4413      	add	r3, r2
 800794a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f003 0307 	and.w	r3, r3, #7
 8007952:	2b00      	cmp	r3, #0
 8007954:	d013      	beq.n	800797e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f023 0307 	bic.w	r3, r3, #7
 800795c:	3308      	adds	r3, #8
 800795e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f003 0307 	and.w	r3, r3, #7
 8007966:	2b00      	cmp	r3, #0
 8007968:	d009      	beq.n	800797e <pvPortMalloc+0x6a>
 800796a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800796e:	f383 8811 	msr	BASEPRI, r3
 8007972:	f3bf 8f6f 	isb	sy
 8007976:	f3bf 8f4f 	dsb	sy
 800797a:	617b      	str	r3, [r7, #20]
 800797c:	e7fe      	b.n	800797c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d068      	beq.n	8007a56 <pvPortMalloc+0x142>
 8007984:	4b41      	ldr	r3, [pc, #260]	; (8007a8c <pvPortMalloc+0x178>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	687a      	ldr	r2, [r7, #4]
 800798a:	429a      	cmp	r2, r3
 800798c:	d863      	bhi.n	8007a56 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800798e:	4b40      	ldr	r3, [pc, #256]	; (8007a90 <pvPortMalloc+0x17c>)
 8007990:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007992:	4b3f      	ldr	r3, [pc, #252]	; (8007a90 <pvPortMalloc+0x17c>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007998:	e004      	b.n	80079a4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800799a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800799c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800799e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80079a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	687a      	ldr	r2, [r7, #4]
 80079aa:	429a      	cmp	r2, r3
 80079ac:	d903      	bls.n	80079b6 <pvPortMalloc+0xa2>
 80079ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d1f1      	bne.n	800799a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80079b6:	4b33      	ldr	r3, [pc, #204]	; (8007a84 <pvPortMalloc+0x170>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079bc:	429a      	cmp	r2, r3
 80079be:	d04a      	beq.n	8007a56 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80079c0:	6a3b      	ldr	r3, [r7, #32]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	2208      	movs	r2, #8
 80079c6:	4413      	add	r3, r2
 80079c8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80079ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079cc:	681a      	ldr	r2, [r3, #0]
 80079ce:	6a3b      	ldr	r3, [r7, #32]
 80079d0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80079d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d4:	685a      	ldr	r2, [r3, #4]
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	1ad2      	subs	r2, r2, r3
 80079da:	2308      	movs	r3, #8
 80079dc:	005b      	lsls	r3, r3, #1
 80079de:	429a      	cmp	r2, r3
 80079e0:	d91e      	bls.n	8007a20 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80079e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	4413      	add	r3, r2
 80079e8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80079ea:	69bb      	ldr	r3, [r7, #24]
 80079ec:	f003 0307 	and.w	r3, r3, #7
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d009      	beq.n	8007a08 <pvPortMalloc+0xf4>
 80079f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079f8:	f383 8811 	msr	BASEPRI, r3
 80079fc:	f3bf 8f6f 	isb	sy
 8007a00:	f3bf 8f4f 	dsb	sy
 8007a04:	613b      	str	r3, [r7, #16]
 8007a06:	e7fe      	b.n	8007a06 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a0a:	685a      	ldr	r2, [r3, #4]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	1ad2      	subs	r2, r2, r3
 8007a10:	69bb      	ldr	r3, [r7, #24]
 8007a12:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a16:	687a      	ldr	r2, [r7, #4]
 8007a18:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007a1a:	69b8      	ldr	r0, [r7, #24]
 8007a1c:	f000 f8f6 	bl	8007c0c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007a20:	4b1a      	ldr	r3, [pc, #104]	; (8007a8c <pvPortMalloc+0x178>)
 8007a22:	681a      	ldr	r2, [r3, #0]
 8007a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	1ad3      	subs	r3, r2, r3
 8007a2a:	4a18      	ldr	r2, [pc, #96]	; (8007a8c <pvPortMalloc+0x178>)
 8007a2c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007a2e:	4b17      	ldr	r3, [pc, #92]	; (8007a8c <pvPortMalloc+0x178>)
 8007a30:	681a      	ldr	r2, [r3, #0]
 8007a32:	4b18      	ldr	r3, [pc, #96]	; (8007a94 <pvPortMalloc+0x180>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	429a      	cmp	r2, r3
 8007a38:	d203      	bcs.n	8007a42 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007a3a:	4b14      	ldr	r3, [pc, #80]	; (8007a8c <pvPortMalloc+0x178>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a15      	ldr	r2, [pc, #84]	; (8007a94 <pvPortMalloc+0x180>)
 8007a40:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a44:	685a      	ldr	r2, [r3, #4]
 8007a46:	4b10      	ldr	r3, [pc, #64]	; (8007a88 <pvPortMalloc+0x174>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	431a      	orrs	r2, r3
 8007a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a4e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a52:	2200      	movs	r2, #0
 8007a54:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007a56:	f7fe fdcb 	bl	80065f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a5a:	69fb      	ldr	r3, [r7, #28]
 8007a5c:	f003 0307 	and.w	r3, r3, #7
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d009      	beq.n	8007a78 <pvPortMalloc+0x164>
 8007a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a68:	f383 8811 	msr	BASEPRI, r3
 8007a6c:	f3bf 8f6f 	isb	sy
 8007a70:	f3bf 8f4f 	dsb	sy
 8007a74:	60fb      	str	r3, [r7, #12]
 8007a76:	e7fe      	b.n	8007a76 <pvPortMalloc+0x162>
	return pvReturn;
 8007a78:	69fb      	ldr	r3, [r7, #28]
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3728      	adds	r7, #40	; 0x28
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}
 8007a82:	bf00      	nop
 8007a84:	20004918 	.word	0x20004918
 8007a88:	20004924 	.word	0x20004924
 8007a8c:	2000491c 	.word	0x2000491c
 8007a90:	20004910 	.word	0x20004910
 8007a94:	20004920 	.word	0x20004920

08007a98 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b086      	sub	sp, #24
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d046      	beq.n	8007b38 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007aaa:	2308      	movs	r3, #8
 8007aac:	425b      	negs	r3, r3
 8007aae:	697a      	ldr	r2, [r7, #20]
 8007ab0:	4413      	add	r3, r2
 8007ab2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	685a      	ldr	r2, [r3, #4]
 8007abc:	4b20      	ldr	r3, [pc, #128]	; (8007b40 <vPortFree+0xa8>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4013      	ands	r3, r2
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d109      	bne.n	8007ada <vPortFree+0x42>
 8007ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aca:	f383 8811 	msr	BASEPRI, r3
 8007ace:	f3bf 8f6f 	isb	sy
 8007ad2:	f3bf 8f4f 	dsb	sy
 8007ad6:	60fb      	str	r3, [r7, #12]
 8007ad8:	e7fe      	b.n	8007ad8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d009      	beq.n	8007af6 <vPortFree+0x5e>
 8007ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae6:	f383 8811 	msr	BASEPRI, r3
 8007aea:	f3bf 8f6f 	isb	sy
 8007aee:	f3bf 8f4f 	dsb	sy
 8007af2:	60bb      	str	r3, [r7, #8]
 8007af4:	e7fe      	b.n	8007af4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	685a      	ldr	r2, [r3, #4]
 8007afa:	4b11      	ldr	r3, [pc, #68]	; (8007b40 <vPortFree+0xa8>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	4013      	ands	r3, r2
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d019      	beq.n	8007b38 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d115      	bne.n	8007b38 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	685a      	ldr	r2, [r3, #4]
 8007b10:	4b0b      	ldr	r3, [pc, #44]	; (8007b40 <vPortFree+0xa8>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	43db      	mvns	r3, r3
 8007b16:	401a      	ands	r2, r3
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007b1c:	f7fe fd5a 	bl	80065d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	685a      	ldr	r2, [r3, #4]
 8007b24:	4b07      	ldr	r3, [pc, #28]	; (8007b44 <vPortFree+0xac>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4413      	add	r3, r2
 8007b2a:	4a06      	ldr	r2, [pc, #24]	; (8007b44 <vPortFree+0xac>)
 8007b2c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007b2e:	6938      	ldr	r0, [r7, #16]
 8007b30:	f000 f86c 	bl	8007c0c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007b34:	f7fe fd5c 	bl	80065f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007b38:	bf00      	nop
 8007b3a:	3718      	adds	r7, #24
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}
 8007b40:	20004924 	.word	0x20004924
 8007b44:	2000491c 	.word	0x2000491c

08007b48 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b085      	sub	sp, #20
 8007b4c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007b4e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007b52:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007b54:	4b27      	ldr	r3, [pc, #156]	; (8007bf4 <prvHeapInit+0xac>)
 8007b56:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f003 0307 	and.w	r3, r3, #7
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d00c      	beq.n	8007b7c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	3307      	adds	r3, #7
 8007b66:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f023 0307 	bic.w	r3, r3, #7
 8007b6e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007b70:	68ba      	ldr	r2, [r7, #8]
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	1ad3      	subs	r3, r2, r3
 8007b76:	4a1f      	ldr	r2, [pc, #124]	; (8007bf4 <prvHeapInit+0xac>)
 8007b78:	4413      	add	r3, r2
 8007b7a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007b80:	4a1d      	ldr	r2, [pc, #116]	; (8007bf8 <prvHeapInit+0xb0>)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007b86:	4b1c      	ldr	r3, [pc, #112]	; (8007bf8 <prvHeapInit+0xb0>)
 8007b88:	2200      	movs	r2, #0
 8007b8a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	68ba      	ldr	r2, [r7, #8]
 8007b90:	4413      	add	r3, r2
 8007b92:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007b94:	2208      	movs	r2, #8
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	1a9b      	subs	r3, r3, r2
 8007b9a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	f023 0307 	bic.w	r3, r3, #7
 8007ba2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	4a15      	ldr	r2, [pc, #84]	; (8007bfc <prvHeapInit+0xb4>)
 8007ba8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007baa:	4b14      	ldr	r3, [pc, #80]	; (8007bfc <prvHeapInit+0xb4>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007bb2:	4b12      	ldr	r3, [pc, #72]	; (8007bfc <prvHeapInit+0xb4>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	68fa      	ldr	r2, [r7, #12]
 8007bc2:	1ad2      	subs	r2, r2, r3
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007bc8:	4b0c      	ldr	r3, [pc, #48]	; (8007bfc <prvHeapInit+0xb4>)
 8007bca:	681a      	ldr	r2, [r3, #0]
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	4a0a      	ldr	r2, [pc, #40]	; (8007c00 <prvHeapInit+0xb8>)
 8007bd6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	685b      	ldr	r3, [r3, #4]
 8007bdc:	4a09      	ldr	r2, [pc, #36]	; (8007c04 <prvHeapInit+0xbc>)
 8007bde:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007be0:	4b09      	ldr	r3, [pc, #36]	; (8007c08 <prvHeapInit+0xc0>)
 8007be2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007be6:	601a      	str	r2, [r3, #0]
}
 8007be8:	bf00      	nop
 8007bea:	3714      	adds	r7, #20
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bc80      	pop	{r7}
 8007bf0:	4770      	bx	lr
 8007bf2:	bf00      	nop
 8007bf4:	20000d10 	.word	0x20000d10
 8007bf8:	20004910 	.word	0x20004910
 8007bfc:	20004918 	.word	0x20004918
 8007c00:	20004920 	.word	0x20004920
 8007c04:	2000491c 	.word	0x2000491c
 8007c08:	20004924 	.word	0x20004924

08007c0c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b085      	sub	sp, #20
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007c14:	4b27      	ldr	r3, [pc, #156]	; (8007cb4 <prvInsertBlockIntoFreeList+0xa8>)
 8007c16:	60fb      	str	r3, [r7, #12]
 8007c18:	e002      	b.n	8007c20 <prvInsertBlockIntoFreeList+0x14>
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	60fb      	str	r3, [r7, #12]
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	687a      	ldr	r2, [r7, #4]
 8007c26:	429a      	cmp	r2, r3
 8007c28:	d8f7      	bhi.n	8007c1a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	68ba      	ldr	r2, [r7, #8]
 8007c34:	4413      	add	r3, r2
 8007c36:	687a      	ldr	r2, [r7, #4]
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	d108      	bne.n	8007c4e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	685a      	ldr	r2, [r3, #4]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	441a      	add	r2, r3
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	68ba      	ldr	r2, [r7, #8]
 8007c58:	441a      	add	r2, r3
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	429a      	cmp	r2, r3
 8007c60:	d118      	bne.n	8007c94 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681a      	ldr	r2, [r3, #0]
 8007c66:	4b14      	ldr	r3, [pc, #80]	; (8007cb8 <prvInsertBlockIntoFreeList+0xac>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d00d      	beq.n	8007c8a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	685a      	ldr	r2, [r3, #4]
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	441a      	add	r2, r3
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	681a      	ldr	r2, [r3, #0]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	601a      	str	r2, [r3, #0]
 8007c88:	e008      	b.n	8007c9c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007c8a:	4b0b      	ldr	r3, [pc, #44]	; (8007cb8 <prvInsertBlockIntoFreeList+0xac>)
 8007c8c:	681a      	ldr	r2, [r3, #0]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	601a      	str	r2, [r3, #0]
 8007c92:	e003      	b.n	8007c9c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681a      	ldr	r2, [r3, #0]
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007c9c:	68fa      	ldr	r2, [r7, #12]
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	d002      	beq.n	8007caa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	687a      	ldr	r2, [r7, #4]
 8007ca8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007caa:	bf00      	nop
 8007cac:	3714      	adds	r7, #20
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bc80      	pop	{r7}
 8007cb2:	4770      	bx	lr
 8007cb4:	20004910 	.word	0x20004910
 8007cb8:	20004918 	.word	0x20004918

08007cbc <__libc_init_array>:
 8007cbc:	b570      	push	{r4, r5, r6, lr}
 8007cbe:	2500      	movs	r5, #0
 8007cc0:	4e0c      	ldr	r6, [pc, #48]	; (8007cf4 <__libc_init_array+0x38>)
 8007cc2:	4c0d      	ldr	r4, [pc, #52]	; (8007cf8 <__libc_init_array+0x3c>)
 8007cc4:	1ba4      	subs	r4, r4, r6
 8007cc6:	10a4      	asrs	r4, r4, #2
 8007cc8:	42a5      	cmp	r5, r4
 8007cca:	d109      	bne.n	8007ce0 <__libc_init_array+0x24>
 8007ccc:	f000 f82e 	bl	8007d2c <_init>
 8007cd0:	2500      	movs	r5, #0
 8007cd2:	4e0a      	ldr	r6, [pc, #40]	; (8007cfc <__libc_init_array+0x40>)
 8007cd4:	4c0a      	ldr	r4, [pc, #40]	; (8007d00 <__libc_init_array+0x44>)
 8007cd6:	1ba4      	subs	r4, r4, r6
 8007cd8:	10a4      	asrs	r4, r4, #2
 8007cda:	42a5      	cmp	r5, r4
 8007cdc:	d105      	bne.n	8007cea <__libc_init_array+0x2e>
 8007cde:	bd70      	pop	{r4, r5, r6, pc}
 8007ce0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007ce4:	4798      	blx	r3
 8007ce6:	3501      	adds	r5, #1
 8007ce8:	e7ee      	b.n	8007cc8 <__libc_init_array+0xc>
 8007cea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007cee:	4798      	blx	r3
 8007cf0:	3501      	adds	r5, #1
 8007cf2:	e7f2      	b.n	8007cda <__libc_init_array+0x1e>
 8007cf4:	08007e14 	.word	0x08007e14
 8007cf8:	08007e14 	.word	0x08007e14
 8007cfc:	08007e14 	.word	0x08007e14
 8007d00:	08007e18 	.word	0x08007e18

08007d04 <memcpy>:
 8007d04:	b510      	push	{r4, lr}
 8007d06:	1e43      	subs	r3, r0, #1
 8007d08:	440a      	add	r2, r1
 8007d0a:	4291      	cmp	r1, r2
 8007d0c:	d100      	bne.n	8007d10 <memcpy+0xc>
 8007d0e:	bd10      	pop	{r4, pc}
 8007d10:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d14:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d18:	e7f7      	b.n	8007d0a <memcpy+0x6>

08007d1a <memset>:
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	4402      	add	r2, r0
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d100      	bne.n	8007d24 <memset+0xa>
 8007d22:	4770      	bx	lr
 8007d24:	f803 1b01 	strb.w	r1, [r3], #1
 8007d28:	e7f9      	b.n	8007d1e <memset+0x4>
	...

08007d2c <_init>:
 8007d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d2e:	bf00      	nop
 8007d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d32:	bc08      	pop	{r3}
 8007d34:	469e      	mov	lr, r3
 8007d36:	4770      	bx	lr

08007d38 <_fini>:
 8007d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d3a:	bf00      	nop
 8007d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d3e:	bc08      	pop	{r3}
 8007d40:	469e      	mov	lr, r3
 8007d42:	4770      	bx	lr
